{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioCertsInfo/IstioCertsInfo.tsx\";\nimport * as React from 'react';\nimport * as API from '../../services/Api';\nimport { Button, Card, CardBody, CardHeader, Grid, GridItem, Modal, Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { istioCertsInfoSelector, lastRefreshAtSelector } from 'store/Selectors';\nimport { bindActionCreators } from 'redux';\nimport { IstioCertsInfoActions } from 'actions/IstioCertsInfoActions';\nimport { connect } from 'react-redux';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { infoStyle } from 'styles/DropdownStyles';\n\nvar IstioCertsInfo = /*#__PURE__*/function (_React$Component) {\n  _inherits(IstioCertsInfo, _React$Component);\n\n  var _super = _createSuper(IstioCertsInfo);\n\n  function IstioCertsInfo(props) {\n    var _this;\n\n    _classCallCheck(this, IstioCertsInfo);\n\n    _this = _super.call(this, props);\n\n    _this.open = function () {\n      _this.setState({\n        showModal: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        showModal: false\n      });\n    };\n\n    _this.fetchStatus = function () {\n      API.getIstioCertsInfo().then(function (response) {\n        _this.props.setIstioCertsInfo(response.data);\n\n        _this.setState({\n          certsError: false\n        });\n      }).catch(function (_error) {\n        _this.setState({\n          certsError: true\n        });\n      });\n    };\n\n    _this.showCertInfo = function (certInfo) {\n      return /*#__PURE__*/React.createElement(Grid, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, \"Issuer\")), /*#__PURE__*/React.createElement(GridItem, {\n        span: 9,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, certInfo.issuer), /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, \"Valid from\")), /*#__PURE__*/React.createElement(GridItem, {\n        span: 9,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, certInfo.notBefore), /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, \"Valid until\")), /*#__PURE__*/React.createElement(GridItem, {\n        span: 9,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, certInfo.notAfter), certInfo.dnsNames && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, \"DNS Names\")), /*#__PURE__*/React.createElement(GridItem, {\n        span: 9,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, certInfo.dnsNames && certInfo.dnsNames.map(function (dnsName, index) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 79\n          }\n        }, dnsName);\n      }))));\n    };\n\n    _this.state = {\n      showModal: false,\n      certsError: false\n    };\n    return _this;\n  }\n\n  _createClass(IstioCertsInfo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStatus();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n        this.fetchStatus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        isSmall: true,\n        isOpen: this.state.showModal,\n        onClose: this.close,\n        title: \"Certificates information\",\n        actions: [/*#__PURE__*/React.createElement(Button, {\n          onClick: this.close,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }\n        }, \"Close\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, this.state.certsError && /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          color: PFColors.Danger\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, \"An error occurred getting certificates information\"), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, this.props.certsInfo && !this.state.certsError && this.props.certsInfo.map(function (certInfo, index) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(CardHeader, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h3\",\n          size: \"lg\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }\n        }, \"From \", certInfo.secretName, \" secret\")), /*#__PURE__*/React.createElement(CardBody, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Grid, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(GridItem, {\n          span: 12,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 23\n          }\n        }, certInfo.error && /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            color: PFColors.Danger\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 27\n          }\n        }, \"An error occurred, \", certInfo.error), !certInfo.accessible && /*#__PURE__*/React.createElement(Tooltip, {\n          position: TooltipPosition.right,\n          content: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              textAlign: 'left'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 31\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 33\n            }\n          }, \"For security purposes, Kiali has not been granted permission to view this certificate. If you want Kiali to provide details about this certificate then you must grant the Kiali service account permission to read the secret \", certInfo.secretName, \" found in namespace \", certInfo.secretNamespace, \".\"), /*#__PURE__*/React.createElement(\"p\", {\n            style: {\n              marginTop: '20px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }\n          }, \"Refer to the Kiali documentation for details on how you can add this permission.\")),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }\n        }, \"Access denied \", /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 45\n          }\n        }))))), !certInfo.error && certInfo.accessible && _this2.showCertInfo(certInfo))));\n      })));\n    }\n  }]);\n\n  return IstioCertsInfo;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    certsInfo: istioCertsInfoSelector(state),\n    lastRefreshAt: lastRefreshAtSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setIstioCertsInfo: bindActionCreators(IstioCertsInfoActions.setinfo, dispatch)\n  };\n};\n\nvar IstioCertsInfoConnected = connect(mapStateToProps, mapDispatchToProps, null, {\n  forwardRef: true\n})(IstioCertsInfo);\nexport default IstioCertsInfoConnected;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioCertsInfo/IstioCertsInfo.tsx"],"names":["React","API","Button","Card","CardBody","CardHeader","Grid","GridItem","Modal","Title","Tooltip","TooltipPosition","istioCertsInfoSelector","lastRefreshAtSelector","bindActionCreators","IstioCertsInfoActions","connect","PFColors","KialiIcon","infoStyle","IstioCertsInfo","props","open","setState","showModal","close","fetchStatus","getIstioCertsInfo","then","response","setIstioCertsInfo","data","certsError","catch","_error","showCertInfo","certInfo","issuer","notBefore","notAfter","dnsNames","map","dnsName","index","state","prevProps","lastRefreshAt","color","Danger","certsInfo","secretName","error","accessible","right","textAlign","secretNamespace","marginTop","Component","mapStateToProps","mapDispatchToProps","dispatch","setinfo","IstioCertsInfoConnected","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as API from '../../services/Api';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Grid,\n  GridItem,\n  Modal,\n  Title,\n  Tooltip,\n  TooltipPosition\n} from '@patternfly/react-core';\nimport { KialiAppState } from 'store/Store';\nimport { istioCertsInfoSelector, lastRefreshAtSelector } from 'store/Selectors';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { bindActionCreators } from 'redux';\nimport { IstioCertsInfoActions } from 'actions/IstioCertsInfoActions';\nimport { connect } from 'react-redux';\nimport { TimeInMilliseconds } from 'types/Common';\nimport { CertsInfo } from 'types/CertsInfo';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { infoStyle } from 'styles/DropdownStyles';\n\ntype IstioCertsInfoState = {\n  showModal: boolean;\n  certsError: Boolean;\n};\n\ntype ReduxProps = {\n  lastRefreshAt: TimeInMilliseconds;\n  setIstioCertsInfo: (istioCertsInfo: CertsInfo[]) => void;\n  certsInfo: CertsInfo[];\n};\n\ntype IstioCertsInfoProps = ReduxProps & {\n  ref: React.RefObject<any>;\n};\n\nclass IstioCertsInfo extends React.Component<IstioCertsInfoProps, IstioCertsInfoState> {\n  constructor(props: IstioCertsInfoProps) {\n    super(props);\n    this.state = { showModal: false, certsError: false };\n  }\n\n  open = () => {\n    this.setState({ showModal: true });\n  };\n\n  close = () => {\n    this.setState({ showModal: false });\n  };\n\n  componentDidMount() {\n    this.fetchStatus();\n  }\n\n  componentDidUpdate(prevProps: Readonly<IstioCertsInfoProps>): void {\n    if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n      this.fetchStatus();\n    }\n  }\n\n  fetchStatus = () => {\n    API.getIstioCertsInfo()\n      .then(response => {\n        this.props.setIstioCertsInfo(response.data);\n        this.setState({ certsError: false });\n      })\n      .catch(_error => {\n        this.setState({ certsError: true });\n      });\n  };\n\n  showCertInfo = (certInfo: CertsInfo): JSX.Element => {\n    return (\n      <Grid>\n        <GridItem span={3}>\n          <b>Issuer</b>\n        </GridItem>\n        <GridItem span={9}>{certInfo.issuer}</GridItem>\n        <GridItem span={3}>\n          <b>Valid from</b>\n        </GridItem>\n        <GridItem span={9}>{certInfo.notBefore}</GridItem>\n        <GridItem span={3}>\n          <b>Valid until</b>\n        </GridItem>\n        <GridItem span={9}>{certInfo.notAfter}</GridItem>\n        {certInfo.dnsNames && (\n          <>\n            <GridItem span={3}>\n              <b>DNS Names</b>\n            </GridItem>\n            <GridItem span={9}>\n              {certInfo.dnsNames && certInfo.dnsNames.map((dnsName, index) => <li key={index}>{dnsName}</li>)}\n            </GridItem>\n          </>\n        )}\n      </Grid>\n    );\n  };\n\n  render() {\n    return (\n      <Modal\n        isSmall={true}\n        isOpen={this.state.showModal}\n        onClose={this.close}\n        title=\"Certificates information\"\n        actions={[<Button onClick={this.close}>Close</Button>]}\n      >\n        {this.state.certsError && (\n          <p style={{ color: PFColors.Danger }}>An error occurred getting certificates information</p>\n        )}\n        <ul>\n          {this.props.certsInfo &&\n            !this.state.certsError &&\n            this.props.certsInfo.map((certInfo, index) => (\n              <li key={index}>\n                <Card>\n                  <CardHeader>\n                    <Title headingLevel=\"h3\" size=\"lg\">\n                      From {certInfo.secretName} secret\n                    </Title>\n                  </CardHeader>\n                  <CardBody>\n                    <Grid>\n                      <GridItem span={12}>\n                        {certInfo.error && (\n                          <p style={{ color: PFColors.Danger }}>An error occurred, {certInfo.error}</p>\n                        )}\n                        {!certInfo.accessible && (\n                          <Tooltip\n                            position={TooltipPosition.right}\n                            content={\n                              <div style={{ textAlign: 'left' }}>\n                                <p>\n                                  For security purposes, Kiali has not been granted permission to view this certificate.\n                                  If you want Kiali to provide details about this certificate then you must grant the\n                                  Kiali service account permission to read the secret {certInfo.secretName} found in\n                                  namespace {certInfo.secretNamespace}.\n                                </p>\n                                <p style={{ marginTop: '20px' }}>\n                                  Refer to the Kiali documentation for details on how you can add this permission.\n                                </p>\n                              </div>\n                            }\n                          >\n                            <span>\n                              Access denied <KialiIcon.Warning className={infoStyle} />\n                            </span>\n                          </Tooltip>\n                        )}\n                      </GridItem>\n                    </Grid>\n                    {!certInfo.error && certInfo.accessible && this.showCertInfo(certInfo)}\n                  </CardBody>\n                </Card>\n              </li>\n            ))}\n        </ul>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  certsInfo: istioCertsInfoSelector(state),\n  lastRefreshAt: lastRefreshAtSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  setIstioCertsInfo: bindActionCreators(IstioCertsInfoActions.setinfo, dispatch)\n});\n\nconst IstioCertsInfoConnected = connect(mapStateToProps, mapDispatchToProps, null, { forwardRef: true })(\n  IstioCertsInfo\n);\n\nexport default IstioCertsInfoConnected;\n"]},"metadata":{},"sourceType":"module"}
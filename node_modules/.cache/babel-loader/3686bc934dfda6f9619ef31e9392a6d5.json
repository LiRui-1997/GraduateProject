{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/StatsComparison.tsx\";\n\nimport * as React from 'react';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport _round from 'lodash/round';\nimport { HeatMap } from 'components/HeatMap/HeatMap';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { Button, ButtonVariant, Tooltip } from '@patternfly/react-core';\nimport { compactStatsIntervals, allStatsIntervals, getSpanStats, statsAvgWithQuantiles, statsToMatrix, statsPerPeer, statsCompareKind } from 'utils/tracing/TraceStats';\nvar statToText = {\n  avg: {\n    short: 'avg',\n    long: 'average'\n  },\n  '0.5': {\n    short: 'p50',\n    long: 'median'\n  },\n  '0.75': {\n    short: 'p75',\n    long: '75th percentile'\n  },\n  '0.8': {\n    short: 'p80',\n    long: '80th percentile'\n  },\n  '0.9': {\n    short: 'p90',\n    long: '90th percentile'\n  },\n  '0.99': {\n    short: 'p99',\n    long: '99th percentile'\n  },\n  '0.999': {\n    short: 'p99.9',\n    long: '99.9th percentile'\n  }\n};\n\nvar renderHeatMap = function renderHeatMap(item, stats, intervals, compactMode) {\n  return /*#__PURE__*/React.createElement(HeatMap, {\n    xLabels: statsAvgWithQuantiles.map(function (s) {\n      var _statToText$s;\n\n      return ((_statToText$s = statToText[s]) === null || _statToText$s === void 0 ? void 0 : _statToText$s.short) || s;\n    }),\n    yLabels: intervals,\n    data: statsToMatrix(stats, intervals),\n    displayMode: compactMode ? 'compact' : 'normal',\n    colorMap: HeatMap.HealthColorMap,\n    dataRange: {\n      from: -10,\n      to: 10\n    },\n    colorUndefined: PFColors.Black200,\n    valueFormat: function valueFormat(v) {\n      return (v > 0 ? '+' : '') + _round(v, 1);\n    },\n    tooltip: function tooltip(x, y, v) {\n      var _statToText$statsAvgW;\n\n      // Build explanation tooltip\n      var slowOrFast = v > 0 ? 'slower' : 'faster';\n      var stat = ((_statToText$statsAvgW = statToText[statsAvgWithQuantiles[x]]) === null || _statToText$statsAvgW === void 0 ? void 0 : _statToText$statsAvgW.long) || statsAvgWithQuantiles[x];\n      var interval = intervals[y];\n      var info = item.info;\n      var dir = 'from',\n          rev = 'to';\n\n      if (info.direction === 'inbound') {\n        dir = 'to';\n        rev = 'from';\n      }\n\n      var thisObj = statsCompareKind === 'app' ? item.app : item.workload;\n      var peer = statsPerPeer ? rev + ' ' + info.peer : '';\n      return \"This request has been \".concat(_round(Math.abs(v), 2), \"ms \").concat(slowOrFast, \" than the \").concat(stat, \" of all \").concat(info.direction, \" requests \").concat(dir, \" \").concat(thisObj, \" \").concat(peer, \" in the last \").concat(interval);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  });\n};\n\nexport var renderMetricsComparison = function renderMetricsComparison(item, compactMode, metricsStats, load) {\n  var intervals = compactMode ? compactStatsIntervals : allStatsIntervals;\n  var itemStats = getSpanStats(item, intervals, metricsStats);\n\n  if (itemStats.length > 0) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, !compactMode && /*#__PURE__*/React.createElement(Tooltip, {\n      content: \"This heatmap is a comparison matrix of this request duration against duration statistics aggregated over time. Move the pointer over cells to get more details.\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoAltIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 31\n      }\n    }, \"Comparison map: \"))), renderHeatMap(item, itemStats, intervals, compactMode));\n  }\n\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    content: \"Click to load more statistics for this request\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: load,\n    variant: ButtonVariant.link,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Load statistics\")));\n};\nexport var renderTraceHeatMap = function renderTraceHeatMap(matrix, intervals, compactMode) {\n  return /*#__PURE__*/React.createElement(HeatMap, {\n    xLabels: statsAvgWithQuantiles.map(function (s) {\n      var _statToText$s2;\n\n      return ((_statToText$s2 = statToText[s]) === null || _statToText$s2 === void 0 ? void 0 : _statToText$s2.short) || s;\n    }),\n    yLabels: intervals,\n    data: matrix,\n    displayMode: compactMode ? 'compact' : 'normal',\n    colorMap: HeatMap.HealthColorMap,\n    dataRange: {\n      from: -10,\n      to: 10\n    },\n    colorUndefined: PFColors.Black200,\n    valueFormat: function valueFormat(v) {\n      return (v > 0 ? '+' : '') + _round(v, 1);\n    },\n    tooltip: function tooltip(x, y, v) {\n      var _statToText$statsAvgW2;\n\n      // Build explanation tooltip\n      var slowOrFast = v > 0 ? 'slower' : 'faster';\n      var stat = ((_statToText$statsAvgW2 = statToText[statsAvgWithQuantiles[x]]) === null || _statToText$statsAvgW2 === void 0 ? void 0 : _statToText$statsAvgW2.long) || statsAvgWithQuantiles[x];\n      var interval = intervals[y];\n      return \"Trace requests have been, in average, \".concat(_round(Math.abs(v), 2), \"ms \").concat(slowOrFast, \" than the \").concat(stat, \" of the requests involving the same services in the last \").concat(interval);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/StatsComparison.tsx"],"names":["React","InfoAltIcon","_round","HeatMap","PFColors","Button","ButtonVariant","Tooltip","compactStatsIntervals","allStatsIntervals","getSpanStats","statsAvgWithQuantiles","statsToMatrix","statsPerPeer","statsCompareKind","statToText","avg","short","long","renderHeatMap","item","stats","intervals","compactMode","map","s","HealthColorMap","from","to","Black200","v","x","y","slowOrFast","stat","interval","info","dir","rev","direction","thisObj","app","workload","peer","Math","abs","renderMetricsComparison","metricsStats","load","itemStats","length","link","renderTraceHeatMap","matrix"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,OAAhC,QAA+C,wBAA/C;AAEA,SACEC,qBADF,EAEEC,iBAFF,EAGEC,YAHF,EAIEC,qBAJF,EAMEC,aANF,EAQEC,YARF,EASEC,gBATF,QAUO,0BAVP;AAYA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GADY;AAEjB,SAAO;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAFU;AAGjB,UAAQ;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAHS;AAIjB,SAAO;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAJU;AAKjB,SAAO;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GALU;AAMjB,UAAQ;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GANS;AAOjB,WAAS;AAAED,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,IAAI,EAAE;AAAxB;AAPQ,CAAnB;;AAUA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CACpBC,IADoB,EAEpBC,KAFoB,EAGpBC,SAHoB,EAIpBC,WAJoB,EAKjB;AACH,sBACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEZ,qBAAqB,CAACa,GAAtB,CAA0B,UAAAC,CAAC;AAAA;;AAAA,aAAI,kBAAAV,UAAU,CAACU,CAAD,CAAV,gEAAeR,KAAf,KAAwBQ,CAA5B;AAAA,KAA3B,CADX;AAEE,IAAA,OAAO,EAAEH,SAFX;AAGE,IAAA,IAAI,EAAEV,aAAa,CAACS,KAAD,EAAQC,SAAR,CAHrB;AAIE,IAAA,WAAW,EAAEC,WAAW,GAAG,SAAH,GAAe,QAJzC;AAKE,IAAA,QAAQ,EAAEpB,OAAO,CAACuB,cALpB;AAME,IAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAC,EAAT;AAAaC,MAAAA,EAAE,EAAE;AAAjB,KANb;AAOE,IAAA,cAAc,EAAExB,QAAQ,CAACyB,QAP3B;AAQE,IAAA,WAAW,EAAE,qBAAAC,CAAC;AAAA,aAAI,CAACA,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAAf,IAAqB5B,MAAM,CAAC4B,CAAD,EAAI,CAAJ,CAA/B;AAAA,KARhB;AASE,IAAA,OAAO,EAAE,iBAACC,CAAD,EAAIC,CAAJ,EAAOF,CAAP,EAAa;AAAA;;AACpB;AACA,UAAMG,UAAU,GAAGH,CAAC,GAAG,CAAJ,GAAQ,QAAR,GAAmB,QAAtC;AACA,UAAMI,IAAI,GAAG,0BAAAnB,UAAU,CAACJ,qBAAqB,CAACoB,CAAD,CAAtB,CAAV,gFAAsCb,IAAtC,KAA8CP,qBAAqB,CAACoB,CAAD,CAAhF;AACA,UAAMI,QAAQ,GAAGb,SAAS,CAACU,CAAD,CAA1B;AACA,UAAMI,IAAI,GAAGhB,IAAI,CAACgB,IAAlB;AACA,UAAIC,GAAG,GAAG,MAAV;AAAA,UACEC,GAAG,GAAG,IADR;;AAEA,UAAIF,IAAI,CAACG,SAAL,KAAmB,SAAvB,EAAkC;AAChCF,QAAAA,GAAG,GAAG,IAAN;AACAC,QAAAA,GAAG,GAAG,MAAN;AACD;;AACD,UAAME,OAAO,GAAG1B,gBAAgB,KAAK,KAArB,GAA6BM,IAAI,CAACqB,GAAlC,GAAwCrB,IAAI,CAACsB,QAA7D;AACA,UAAMC,IAAI,GAAG9B,YAAY,GAAGyB,GAAG,GAAG,GAAN,GAAYF,IAAI,CAACO,IAApB,GAA2B,EAApD;AACA,6CAAgCzC,MAAM,CAAC0C,IAAI,CAACC,GAAL,CAASf,CAAT,CAAD,EAAc,CAAd,CAAtC,gBAA4DG,UAA5D,uBAAmFC,IAAnF,qBACEE,IAAI,CAACG,SADP,uBAEaF,GAFb,cAEoBG,OAFpB,cAE+BG,IAF/B,0BAEmDR,QAFnD;AAGD,KA1BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA8BD,CApCD;;AAsCA,OAAO,IAAMW,uBAAuB,GAAG,SAA1BA,uBAA0B,CACrC1B,IADqC,EAErCG,WAFqC,EAGrCwB,YAHqC,EAIrCC,IAJqC,EAKlC;AACH,MAAM1B,SAAS,GAAGC,WAAW,GAAGf,qBAAH,GAA2BC,iBAAxD;AACA,MAAMwC,SAAS,GAAGvC,YAAY,CAACU,IAAD,EAAOE,SAAP,EAAkByB,YAAlB,CAA9B;;AACA,MAAIE,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,wBACE,0CACG,CAAC3B,WAAD,iBACC,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAC,iKAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBACkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADlB,CADF,CAFJ,EAQGJ,aAAa,CAACC,IAAD,EAAO6B,SAAP,EAAkB3B,SAAlB,EAA6BC,WAA7B,CARhB,CADF;AAYD;;AACD,sBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAC,gDAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEyB,IAAjB;AAAuB,IAAA,OAAO,EAAE1C,aAAa,CAAC6C,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,CADF;AAOD,CA7BM;AA+BP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAsB/B,SAAtB,EAA2CC,WAA3C,EAAoE;AACpG,sBACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEZ,qBAAqB,CAACa,GAAtB,CAA0B,UAAAC,CAAC;AAAA;;AAAA,aAAI,mBAAAV,UAAU,CAACU,CAAD,CAAV,kEAAeR,KAAf,KAAwBQ,CAA5B;AAAA,KAA3B,CADX;AAEE,IAAA,OAAO,EAAEH,SAFX;AAGE,IAAA,IAAI,EAAE+B,MAHR;AAIE,IAAA,WAAW,EAAE9B,WAAW,GAAG,SAAH,GAAe,QAJzC;AAKE,IAAA,QAAQ,EAAEpB,OAAO,CAACuB,cALpB;AAME,IAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAC,EAAT;AAAaC,MAAAA,EAAE,EAAE;AAAjB,KANb;AAOE,IAAA,cAAc,EAAExB,QAAQ,CAACyB,QAP3B;AAQE,IAAA,WAAW,EAAE,qBAAAC,CAAC;AAAA,aAAI,CAACA,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAAf,IAAqB5B,MAAM,CAAC4B,CAAD,EAAI,CAAJ,CAA/B;AAAA,KARhB;AASE,IAAA,OAAO,EAAE,iBAACC,CAAD,EAAIC,CAAJ,EAAOF,CAAP,EAAa;AAAA;;AACpB;AACA,UAAMG,UAAU,GAAGH,CAAC,GAAG,CAAJ,GAAQ,QAAR,GAAmB,QAAtC;AACA,UAAMI,IAAI,GAAG,2BAAAnB,UAAU,CAACJ,qBAAqB,CAACoB,CAAD,CAAtB,CAAV,kFAAsCb,IAAtC,KAA8CP,qBAAqB,CAACoB,CAAD,CAAhF;AACA,UAAMI,QAAQ,GAAGb,SAAS,CAACU,CAAD,CAA1B;AACA,6DAAgD9B,MAAM,CACpD0C,IAAI,CAACC,GAAL,CAASf,CAAT,CADoD,EAEpD,CAFoD,CAAtD,gBAGOG,UAHP,uBAG8BC,IAH9B,sEAG8FC,QAH9F;AAID,KAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsBD,CAvBM","sourcesContent":["import * as React from 'react';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport _round from 'lodash/round';\n\nimport { HeatMap } from 'components/HeatMap/HeatMap';\nimport { MetricsStats } from 'types/Metrics';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { Button, ButtonVariant, Tooltip } from '@patternfly/react-core';\nimport { EnvoySpanInfo, RichSpanData } from 'types/JaegerInfo';\nimport {\n  compactStatsIntervals,\n  allStatsIntervals,\n  getSpanStats,\n  statsAvgWithQuantiles,\n  StatsMatrix,\n  statsToMatrix,\n  StatsWithIntervalIndex,\n  statsPerPeer,\n  statsCompareKind\n} from 'utils/tracing/TraceStats';\n\nconst statToText = {\n  avg: { short: 'avg', long: 'average' },\n  '0.5': { short: 'p50', long: 'median' },\n  '0.75': { short: 'p75', long: '75th percentile' },\n  '0.8': { short: 'p80', long: '80th percentile' },\n  '0.9': { short: 'p90', long: '90th percentile' },\n  '0.99': { short: 'p99', long: '99th percentile' },\n  '0.999': { short: 'p99.9', long: '99.9th percentile' }\n};\n\nconst renderHeatMap = (\n  item: RichSpanData,\n  stats: StatsWithIntervalIndex[],\n  intervals: string[],\n  compactMode: boolean\n) => {\n  return (\n    <HeatMap\n      xLabels={statsAvgWithQuantiles.map(s => statToText[s]?.short || s)}\n      yLabels={intervals}\n      data={statsToMatrix(stats, intervals)}\n      displayMode={compactMode ? 'compact' : 'normal'}\n      colorMap={HeatMap.HealthColorMap}\n      dataRange={{ from: -10, to: 10 }}\n      colorUndefined={PFColors.Black200}\n      valueFormat={v => (v > 0 ? '+' : '') + _round(v, 1)}\n      tooltip={(x, y, v) => {\n        // Build explanation tooltip\n        const slowOrFast = v > 0 ? 'slower' : 'faster';\n        const stat = statToText[statsAvgWithQuantiles[x]]?.long || statsAvgWithQuantiles[x];\n        const interval = intervals[y];\n        const info = item.info as EnvoySpanInfo;\n        let dir = 'from',\n          rev = 'to';\n        if (info.direction === 'inbound') {\n          dir = 'to';\n          rev = 'from';\n        }\n        const thisObj = statsCompareKind === 'app' ? item.app : item.workload;\n        const peer = statsPerPeer ? rev + ' ' + info.peer : '';\n        return `This request has been ${_round(Math.abs(v), 2)}ms ${slowOrFast} than the ${stat} of all ${\n          info.direction\n        } requests ${dir} ${thisObj} ${peer} in the last ${interval}`;\n      }}\n    />\n  );\n};\n\nexport const renderMetricsComparison = (\n  item: RichSpanData,\n  compactMode: boolean,\n  metricsStats: Map<string, MetricsStats>,\n  load: () => void\n) => {\n  const intervals = compactMode ? compactStatsIntervals : allStatsIntervals;\n  const itemStats = getSpanStats(item, intervals, metricsStats);\n  if (itemStats.length > 0) {\n    return (\n      <>\n        {!compactMode && (\n          <Tooltip content=\"This heatmap is a comparison matrix of this request duration against duration statistics aggregated over time. Move the pointer over cells to get more details.\">\n            <>\n              <InfoAltIcon /> <strong>Comparison map: </strong>\n            </>\n          </Tooltip>\n        )}\n        {renderHeatMap(item, itemStats, intervals, compactMode)}\n      </>\n    );\n  }\n  return (\n    <Tooltip content=\"Click to load more statistics for this request\">\n      <Button onClick={load} variant={ButtonVariant.link}>\n        <strong>Load statistics</strong>\n      </Button>\n    </Tooltip>\n  );\n};\n\nexport const renderTraceHeatMap = (matrix: StatsMatrix, intervals: string[], compactMode: boolean) => {\n  return (\n    <HeatMap\n      xLabels={statsAvgWithQuantiles.map(s => statToText[s]?.short || s)}\n      yLabels={intervals}\n      data={matrix}\n      displayMode={compactMode ? 'compact' : 'normal'}\n      colorMap={HeatMap.HealthColorMap}\n      dataRange={{ from: -10, to: 10 }}\n      colorUndefined={PFColors.Black200}\n      valueFormat={v => (v > 0 ? '+' : '') + _round(v, 1)}\n      tooltip={(x, y, v) => {\n        // Build explanation tooltip\n        const slowOrFast = v > 0 ? 'slower' : 'faster';\n        const stat = statToText[statsAvgWithQuantiles[x]]?.long || statsAvgWithQuantiles[x];\n        const interval = intervals[y];\n        return `Trace requests have been, in average, ${_round(\n          Math.abs(v),\n          2\n        )}ms ${slowOrFast} than the ${stat} of the requests involving the same services in the last ${interval}`;\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
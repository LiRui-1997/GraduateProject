{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/BreadcrumbView/BreadcrumbView.tsx\";\nimport * as React from 'react';\nimport { Paths } from '../../config';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { FilterSelected } from '../Filters/StatefulFilters';\nimport { dicIstioType } from '../../types/IstioConfigList';\nvar ItemNames = {\n  applications: 'App',\n  services: 'Service',\n  workloads: 'Workload',\n  istio: 'Istio Object',\n  iter8: 'Iter8 Experiment'\n};\nvar IstioName = 'Istio Config';\nvar Iter8Name = 'Iter8 Experiments';\nvar namespaceRegex = /namespaces\\/([a-z0-9-]+)\\/([\\w-.]+)\\/([\\w-.]+)(\\/([\\w-.]+))?(\\/([\\w-.]+))?/;\nvar extNamespaceRegex = /extensions\\/namespaces\\/([a-z0-9-]+)\\/([\\w-.]+)\\/([\\w-.]+)(\\/([\\w-.]+))?(\\/([\\w-.]+))?/;\nexport var BreadcrumbView = /*#__PURE__*/function (_React$Component) {\n  _inherits(BreadcrumbView, _React$Component);\n\n  var _super = _createSuper(BreadcrumbView);\n\n  function BreadcrumbView(props) {\n    var _this;\n\n    _classCallCheck(this, BreadcrumbView);\n\n    _this = _super.call(this, props);\n\n    _this.updateItem = function () {\n      var regex = namespaceRegex;\n      var extension = false;\n\n      if (_this.props.location.pathname.startsWith('/extensions')) {\n        regex = extNamespaceRegex;\n        extension = true;\n      }\n\n      var match = _this.props.location.pathname.match(regex) || [];\n      var ns = match[1];\n      var page = Paths[match[2].toUpperCase()];\n      var istioType = match[3];\n      var itemName = page !== 'istio' ? match[3] : match[5];\n      return {\n        namespace: ns,\n        pathItem: page,\n        item: itemName,\n        itemName: ItemNames[page],\n        istioType: istioType,\n        extension: extension\n      };\n    };\n\n    _this.cleanFilters = function () {\n      FilterSelected.resetFilters();\n    };\n\n    _this.isIstio = function () {\n      return _this.state.pathItem === 'istio';\n    };\n\n    _this.isIter8 = function () {\n      return _this.state.pathItem === 'iter8';\n    };\n\n    _this.getItemPage = function () {\n      var path = \"/namespaces/\".concat(_this.state.namespace, \"/\").concat(_this.state.pathItem, \"/\").concat(_this.state.item);\n\n      if (_this.state.extension) {\n        path = '/extensions' + path;\n      }\n\n      return path;\n    };\n\n    _this.state = _this.updateItem();\n    return _this;\n  }\n\n  _createClass(BreadcrumbView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState, _snapshot) {\n      if (prevProps.location !== this.props.location) {\n        this.setState(this.updateItem());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          namespace = _this$state.namespace,\n          item = _this$state.item,\n          istioType = _this$state.istioType,\n          pathItem = _this$state.pathItem;\n      var isIstio = this.isIstio();\n      var isIter8 = this.isIter8();\n      var linkItem = isIstio ? /*#__PURE__*/React.createElement(BreadcrumbItem, {\n        isActive: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, item) : /*#__PURE__*/React.createElement(BreadcrumbItem, {\n        isActive: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: this.getItemPage(),\n        onClick: this.cleanFilters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }, item));\n      return /*#__PURE__*/React.createElement(Breadcrumb, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(BreadcrumbItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/\".concat(this.state.extension ? 'extensions/' + pathItem : pathItem),\n        onClick: this.cleanFilters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, isIstio ? IstioName : isIter8 ? Iter8Name : BreadcrumbView.capitalize(pathItem))), /*#__PURE__*/React.createElement(BreadcrumbItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/\".concat(this.state.extension ? 'extensions/' + pathItem : pathItem, \"?namespaces=\").concat(namespace),\n        onClick: this.cleanFilters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }\n      }, \"Namespace: \", namespace)), isIstio && /*#__PURE__*/React.createElement(BreadcrumbItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/\".concat(this.state.extension ? 'extensions/' + pathItem : pathItem, \"?namespaces=\").concat(namespace, \"&istiotype=\").concat(dicIstioType[this.state.istioType || '']),\n        onClick: this.cleanFilters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, istioType ? BreadcrumbView.istioType(istioType) : istioType)), linkItem);\n    }\n  }], [{\n    key: \"istioType\",\n    value: function istioType(rawType) {\n      var istioType = Object.keys(dicIstioType).find(function (key) {\n        return dicIstioType[key] === rawType;\n      });\n      return istioType ? istioType : this.capitalize(rawType);\n    }\n  }]);\n\n  return BreadcrumbView;\n}(React.Component);\n\nBreadcrumbView.capitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport default BreadcrumbView;","map":{"version":3,"sources":["/root/kiali-ui/src/components/BreadcrumbView/BreadcrumbView.tsx"],"names":["React","Paths","Link","Breadcrumb","BreadcrumbItem","FilterSelected","dicIstioType","ItemNames","applications","services","workloads","istio","iter8","IstioName","Iter8Name","namespaceRegex","extNamespaceRegex","BreadcrumbView","props","updateItem","regex","extension","location","pathname","startsWith","match","ns","page","toUpperCase","istioType","itemName","namespace","pathItem","item","cleanFilters","resetFilters","isIstio","state","isIter8","getItemPage","path","prevProps","_prevState","_snapshot","setState","linkItem","capitalize","rawType","Object","keys","find","key","Component","str","charAt","slice"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Paths } from '../../config';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { FilterSelected } from '../Filters/StatefulFilters';\nimport { dicIstioType } from '../../types/IstioConfigList';\n\ninterface BreadCumbViewProps {\n  location: {\n    pathname: string;\n    search: string;\n  };\n}\n\ninterface BreadCumbViewState {\n  namespace: string;\n  itemName: string;\n  item: string;\n  pathItem: string;\n  istioType?: string;\n  extension: boolean;\n}\n\nconst ItemNames = {\n  applications: 'App',\n  services: 'Service',\n  workloads: 'Workload',\n  istio: 'Istio Object',\n  iter8: 'Iter8 Experiment'\n};\n\nconst IstioName = 'Istio Config';\nconst Iter8Name = 'Iter8 Experiments';\nconst namespaceRegex = /namespaces\\/([a-z0-9-]+)\\/([\\w-.]+)\\/([\\w-.]+)(\\/([\\w-.]+))?(\\/([\\w-.]+))?/;\nconst extNamespaceRegex = /extensions\\/namespaces\\/([a-z0-9-]+)\\/([\\w-.]+)\\/([\\w-.]+)(\\/([\\w-.]+))?(\\/([\\w-.]+))?/;\n\nexport class BreadcrumbView extends React.Component<BreadCumbViewProps, BreadCumbViewState> {\n  static capitalize = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  static istioType(rawType: string) {\n    const istioType = Object.keys(dicIstioType).find(key => dicIstioType[key] === rawType);\n    return istioType ? istioType : this.capitalize(rawType);\n  }\n\n  constructor(props: BreadCumbViewProps) {\n    super(props);\n    this.state = this.updateItem();\n  }\n\n  updateItem = () => {\n    let regex = namespaceRegex;\n    let extension = false;\n    if (this.props.location.pathname.startsWith('/extensions')) {\n      regex = extNamespaceRegex;\n      extension = true;\n    }\n    const match = this.props.location.pathname.match(regex) || [];\n    const ns = match[1];\n    const page = Paths[match[2].toUpperCase()];\n    const istioType = match[3];\n    let itemName = page !== 'istio' ? match[3] : match[5];\n    return {\n      namespace: ns,\n      pathItem: page,\n      item: itemName,\n      itemName: ItemNames[page],\n      istioType: istioType,\n      extension: extension\n    };\n  };\n\n  componentDidUpdate(\n    prevProps: Readonly<BreadCumbViewProps>,\n    _prevState: Readonly<BreadCumbViewState>,\n    _snapshot?: any\n  ): void {\n    if (prevProps.location !== this.props.location) {\n      this.setState(this.updateItem());\n    }\n  }\n\n  cleanFilters = () => {\n    FilterSelected.resetFilters();\n  };\n\n  isIstio = () => {\n    return this.state.pathItem === 'istio';\n  };\n\n  isIter8 = () => {\n    return this.state.pathItem === 'iter8';\n  };\n\n  getItemPage = () => {\n    let path = `/namespaces/${this.state.namespace}/${this.state.pathItem}/${this.state.item}`;\n    if (this.state.extension) {\n      path = '/extensions' + path;\n    }\n    return path;\n  };\n\n  render() {\n    const { namespace, item, istioType, pathItem } = this.state;\n    const isIstio = this.isIstio();\n    const isIter8 = this.isIter8();\n    const linkItem = isIstio ? (\n      <BreadcrumbItem isActive={true}>{item}</BreadcrumbItem>\n    ) : (\n      <BreadcrumbItem isActive={true}>\n        <Link to={this.getItemPage()} onClick={this.cleanFilters}>\n          {item}\n        </Link>\n      </BreadcrumbItem>\n    );\n    return (\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={`/${this.state.extension ? 'extensions/' + pathItem : pathItem}`} onClick={this.cleanFilters}>\n            {isIstio ? IstioName : isIter8 ? Iter8Name : BreadcrumbView.capitalize(pathItem)}\n          </Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Link\n            to={`/${this.state.extension ? 'extensions/' + pathItem : pathItem}?namespaces=${namespace}`}\n            onClick={this.cleanFilters}\n          >\n            Namespace: {namespace}\n          </Link>\n        </BreadcrumbItem>\n        {isIstio && (\n          <BreadcrumbItem>\n            <Link\n              to={`/${this.state.extension ? 'extensions/' + pathItem : pathItem}?namespaces=${namespace}&istiotype=${\n                dicIstioType[this.state.istioType || '']\n              }`}\n              onClick={this.cleanFilters}\n            >\n              {istioType ? BreadcrumbView.istioType(istioType) : istioType}\n            </Link>\n          </BreadcrumbItem>\n        )}\n        {linkItem}\n      </Breadcrumb>\n    );\n  }\n}\n\nexport default BreadcrumbView;\n"]},"metadata":{},"sourceType":"module"}
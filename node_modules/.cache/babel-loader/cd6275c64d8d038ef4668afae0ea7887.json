{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioStatus/IstioStatus.tsx\";\nimport * as React from 'react';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { Status } from '../../types/IstioStatus';\nimport { MessageType } from '../../types/MessageCenter';\nimport { istioStatusSelector, lastRefreshAtSelector, namespaceItemsSelector } from '../../store/Selectors';\nimport { bindActionCreators } from 'redux';\nimport { IstioStatusActions } from '../../actions/IstioStatusActions';\nimport { connect } from 'react-redux';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport IstioStatusList from './IstioStatusList';\nimport { PFColors } from '../Pf/PfColors';\nimport './IstioStatus.css';\nimport { ResourcesFullIcon } from '@patternfly/react-icons';\nimport NamespaceThunkActions from '../../actions/NamespaceThunkActions';\nvar ValidToColor = {\n  'true-true-true': PFColors.Danger,\n  'true-true-false': PFColors.Danger,\n  'true-false-true': PFColors.Danger,\n  'true-false-false': PFColors.Danger,\n  'false-true-true': PFColors.Warning,\n  'false-true-false': PFColors.Warning,\n  'false-false-true': PFColors.Info,\n  'false-false-false': PFColors.Success\n};\nexport var IstioStatus = /*#__PURE__*/function (_React$Component) {\n  _inherits(IstioStatus, _React$Component);\n\n  var _super = _createSuper(IstioStatus);\n\n  function IstioStatus() {\n    var _this;\n\n    _classCallCheck(this, IstioStatus);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.fetchStatus = function () {\n      API.getIstioStatus().then(function (response) {\n        return _this.props.setIstioStatus(response.data);\n      }).catch(function (error) {\n        // User without namespaces can't have access to mTLS information. Reduce severity to info.\n        var informative = _this.props.namespaces && _this.props.namespaces.length < 1;\n\n        if (informative) {\n          AlertUtils.addError('Istio deployment status disabled.', error, 'default', MessageType.INFO);\n        } else {\n          AlertUtils.addError('Error fetching Istio deployment status.', error, 'default', MessageType.ERROR);\n        }\n      });\n    };\n\n    _this.tooltipContent = function () {\n      return /*#__PURE__*/React.createElement(IstioStatusList, {\n        status: _this.props.status,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 12\n        }\n      });\n    };\n\n    _this.tooltipColor = function () {\n      var coreUnhealthy = false;\n      var addonUnhealthy = false;\n      var notReady = false;\n      Object.keys(_this.props.status || {}).forEach(function (compKey) {\n        var _this$props$status$co = _this.props.status[compKey],\n            status = _this$props$status$co.status,\n            is_core = _this$props$status$co.is_core;\n        var isNotReady = status === Status.NotReady;\n        var isUnhealthy = status !== Status.Healthy && !isNotReady;\n\n        if (is_core) {\n          coreUnhealthy = coreUnhealthy || isUnhealthy;\n        } else {\n          addonUnhealthy = addonUnhealthy || isUnhealthy;\n        }\n\n        notReady = notReady || isNotReady;\n      });\n      return ValidToColor[\"\".concat(coreUnhealthy, \"-\").concat(addonUnhealthy, \"-\").concat(notReady)];\n    };\n\n    _this.healthyComponents = function () {\n      return _this.props.status.reduce(function (healthy, compStatus) {\n        return healthy && compStatus.status === Status.Healthy;\n      }, true);\n    };\n\n    return _this;\n  }\n\n  _createClass(IstioStatus, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.refreshNamespaces();\n      this.fetchStatus();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n        this.fetchStatus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.healthyComponents()) {\n        return /*#__PURE__*/React.createElement(Tooltip, {\n          position: TooltipPosition.left,\n          enableFlip: true,\n          content: this.tooltipContent(),\n          maxWidth: '25rem',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(ResourcesFullIcon, {\n          color: this.tooltipColor(),\n          style: {\n            verticalAlign: '-0.3em',\n            marginRight: 8\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return null;\n    }\n  }]);\n\n  return IstioStatus;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    status: istioStatusSelector(state),\n    lastRefreshAt: lastRefreshAtSelector(state),\n    namespaces: namespaceItemsSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setIstioStatus: bindActionCreators(IstioStatusActions.setinfo, dispatch),\n    refreshNamespaces: function refreshNamespaces() {\n      dispatch(NamespaceThunkActions.fetchNamespacesIfNeeded());\n    }\n  };\n};\n\nvar IstioStatusConnected = connect(mapStateToProps, mapDispatchToProps)(IstioStatus);\nexport default IstioStatusConnected;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioStatus/IstioStatus.tsx"],"names":["React","API","AlertUtils","Status","MessageType","istioStatusSelector","lastRefreshAtSelector","namespaceItemsSelector","bindActionCreators","IstioStatusActions","connect","Tooltip","TooltipPosition","IstioStatusList","PFColors","ResourcesFullIcon","NamespaceThunkActions","ValidToColor","Danger","Warning","Info","Success","IstioStatus","fetchStatus","getIstioStatus","then","response","props","setIstioStatus","data","catch","error","informative","namespaces","length","addError","INFO","ERROR","tooltipContent","status","tooltipColor","coreUnhealthy","addonUnhealthy","notReady","Object","keys","forEach","compKey","is_core","isNotReady","NotReady","isUnhealthy","Healthy","healthyComponents","reduce","healthy","compStatus","refreshNamespaces","prevProps","lastRefreshAt","left","verticalAlign","marginRight","Component","mapStateToProps","state","mapDispatchToProps","dispatch","setinfo","fetchNamespacesIfNeeded","IstioStatusConnected"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { TimeInMilliseconds } from '../../types/Common';\nimport { ComponentStatus, Status } from '../../types/IstioStatus';\nimport { MessageType } from '../../types/MessageCenter';\nimport Namespace from '../../types/Namespace';\nimport { KialiAppState } from '../../store/Store';\nimport { istioStatusSelector, lastRefreshAtSelector, namespaceItemsSelector } from '../../store/Selectors';\nimport { bindActionCreators } from 'redux';\nimport { IstioStatusActions } from '../../actions/IstioStatusActions';\nimport { connect } from 'react-redux';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport IstioStatusList from './IstioStatusList';\nimport { PFColors } from '../Pf/PfColors';\nimport './IstioStatus.css';\nimport { ResourcesFullIcon } from '@patternfly/react-icons';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport NamespaceThunkActions from '../../actions/NamespaceThunkActions';\n\ntype ReduxProps = {\n  lastRefreshAt: TimeInMilliseconds;\n  setIstioStatus: (istioStatus: ComponentStatus[]) => void;\n  refreshNamespaces: () => void;\n  namespaces: Namespace[] | undefined;\n  status: ComponentStatus[];\n};\n\ntype Props = ReduxProps & {};\n\nconst ValidToColor = {\n  'true-true-true': PFColors.Danger,\n  'true-true-false': PFColors.Danger,\n  'true-false-true': PFColors.Danger,\n  'true-false-false': PFColors.Danger,\n  'false-true-true': PFColors.Warning,\n  'false-true-false': PFColors.Warning,\n  'false-false-true': PFColors.Info,\n  'false-false-false': PFColors.Success\n};\n\nexport class IstioStatus extends React.Component<Props> {\n  componentDidMount() {\n    this.props.refreshNamespaces();\n    this.fetchStatus();\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>): void {\n    if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n      this.fetchStatus();\n    }\n  }\n\n  fetchStatus = () => {\n    API.getIstioStatus()\n      .then(response => {\n        return this.props.setIstioStatus(response.data);\n      })\n      .catch(error => {\n        // User without namespaces can't have access to mTLS information. Reduce severity to info.\n        const informative = this.props.namespaces && this.props.namespaces.length < 1;\n        if (informative) {\n          AlertUtils.addError('Istio deployment status disabled.', error, 'default', MessageType.INFO);\n        } else {\n          AlertUtils.addError('Error fetching Istio deployment status.', error, 'default', MessageType.ERROR);\n        }\n      });\n  };\n\n  tooltipContent = () => {\n    return <IstioStatusList status={this.props.status} />;\n  };\n\n  tooltipColor = () => {\n    let coreUnhealthy: boolean = false;\n    let addonUnhealthy: boolean = false;\n    let notReady: boolean = false;\n\n    Object.keys(this.props.status || {}).forEach((compKey: string) => {\n      const { status, is_core } = this.props.status[compKey];\n      const isNotReady: boolean = status === Status.NotReady;\n      const isUnhealthy: boolean = status !== Status.Healthy && !isNotReady;\n\n      if (is_core) {\n        coreUnhealthy = coreUnhealthy || isUnhealthy;\n      } else {\n        addonUnhealthy = addonUnhealthy || isUnhealthy;\n      }\n\n      notReady = notReady || isNotReady;\n    });\n\n    return ValidToColor[`${coreUnhealthy}-${addonUnhealthy}-${notReady}`];\n  };\n\n  healthyComponents = () => {\n    return this.props.status.reduce((healthy: boolean, compStatus: ComponentStatus) => {\n      return healthy && compStatus.status === Status.Healthy;\n    }, true);\n  };\n\n  render() {\n    if (!this.healthyComponents()) {\n      return (\n        <Tooltip position={TooltipPosition.left} enableFlip={true} content={this.tooltipContent()} maxWidth={'25rem'}>\n          <ResourcesFullIcon color={this.tooltipColor()} style={{ verticalAlign: '-0.3em', marginRight: 8 }} />\n        </Tooltip>\n      );\n    }\n\n    return null;\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  status: istioStatusSelector(state),\n  lastRefreshAt: lastRefreshAtSelector(state),\n  namespaces: namespaceItemsSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  setIstioStatus: bindActionCreators(IstioStatusActions.setinfo, dispatch),\n  refreshNamespaces: () => {\n    dispatch(NamespaceThunkActions.fetchNamespacesIfNeeded());\n  }\n});\n\nconst IstioStatusConnected = connect(mapStateToProps, mapDispatchToProps)(IstioStatus);\n\nexport default IstioStatusConnected;\n"]},"metadata":{},"sourceType":"module"}
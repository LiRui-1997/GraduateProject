{"ast":null,"code":"import { NodeType } from '../../types/Graph';\nimport { URLParam } from '../../app/History';\nimport { isKioskMode } from '../../utils/SearchParamUtils';\n\nvar buildCommonQueryParams = function buildCommonQueryParams(params) {\n  var q = \"&\".concat(URLParam.GRAPH_EDGE_LABEL, \"=\").concat(params.edgeLabels);\n  q += \"&\".concat(URLParam.GRAPH_LAYOUT, \"=\").concat(params.graphLayout.name);\n  q += \"&\".concat(URLParam.GRAPH_IDLE_EDGES, \"=\").concat(params.showIdleEdges);\n  q += \"&\".concat(URLParam.GRAPH_IDLE_NODES, \"=\").concat(params.showIdleNodes);\n  q += \"&\".concat(URLParam.GRAPH_SERVICE_NODES, \"=\").concat(params.showServiceNodes);\n  q += \"&\".concat(URLParam.GRAPH_TRAFFIC, \"=\").concat(params.trafficRates);\n  q += \"&\".concat(URLParam.GRAPH_TYPE, \"=\").concat(params.graphType);\n  q += \"&\".concat(URLParam.DURATION, \"=\").concat(params.duration);\n  q += \"&\".concat(URLParam.GRAPH_OPERATION_NODES, \"=\").concat(params.showOperationNodes);\n  q += \"&\".concat(URLParam.REFRESH_INTERVAL, \"=\").concat(params.refreshInterval);\n  return q;\n};\n\nexport var makeNamespacesGraphUrlFromParams = function makeNamespacesGraphUrlFromParams(params) {\n  var queryParams = buildCommonQueryParams(params);\n\n  if (params.activeNamespaces.length > 0) {\n    var namespaces = params.activeNamespaces.map(function (namespace) {\n      return namespace.name;\n    }).join(',');\n    queryParams += \"&\".concat(URLParam.NAMESPACES, \"=\").concat(namespaces);\n  }\n\n  if (isKioskMode()) {\n    queryParams += '&kiosk=true';\n  }\n\n  return \"/graph/namespaces?\" + queryParams;\n};\nexport var makeNodeGraphUrlFromParams = function makeNodeGraphUrlFromParams(params) {\n  var node = params.node;\n\n  if (node) {\n    switch (node.nodeType) {\n      case NodeType.AGGREGATE:\n        return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/aggregates/\").concat(node.aggregate, \"/\").concat(node.aggregateValue, \"?\") + buildCommonQueryParams(params);\n\n      case NodeType.APP:\n        if (node.version && node.version !== 'unknown') {\n          return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/applications/\").concat(node.app, \"/versions/\").concat(node.version, \"?\") + buildCommonQueryParams(params);\n        }\n\n        return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/applications/\").concat(node.app, \"?\") + buildCommonQueryParams(params);\n\n      case NodeType.BOX:\n        // can only be app box\n        return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/applications/\").concat(node.app, \"?\") + buildCommonQueryParams(params);\n\n      case NodeType.SERVICE:\n        return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/services/\").concat(node.service, \"?\") + buildCommonQueryParams(params);\n\n      case NodeType.WORKLOAD:\n        return \"/graph/node/namespaces/\".concat(node.namespace.name, \"/workloads/\").concat(node.workload, \"?\") + buildCommonQueryParams(params);\n\n      default:\n        console.debug('makeNodeUrl defaulting to makeNamespaceUrl');\n        return makeNamespacesGraphUrlFromParams(params);\n    }\n  } else {\n    // this should never happen but typescript needs this\n    return '';\n  }\n};","map":{"version":3,"sources":["/root/kiali-ui/src/components/Nav/NavUtils.tsx"],"names":["NodeType","URLParam","isKioskMode","buildCommonQueryParams","params","q","GRAPH_EDGE_LABEL","edgeLabels","GRAPH_LAYOUT","graphLayout","name","GRAPH_IDLE_EDGES","showIdleEdges","GRAPH_IDLE_NODES","showIdleNodes","GRAPH_SERVICE_NODES","showServiceNodes","GRAPH_TRAFFIC","trafficRates","GRAPH_TYPE","graphType","DURATION","duration","GRAPH_OPERATION_NODES","showOperationNodes","REFRESH_INTERVAL","refreshInterval","makeNamespacesGraphUrlFromParams","queryParams","activeNamespaces","length","namespaces","map","namespace","join","NAMESPACES","makeNodeGraphUrlFromParams","node","nodeType","AGGREGATE","aggregate","aggregateValue","APP","version","app","BOX","SERVICE","service","WORKLOAD","workload","console","debug"],"mappings":"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","sourcesContent":["import { Layout, EdgeLabelMode, NodeType, NodeParamsType, GraphType, TrafficRate } from '../../types/Graph';\nimport { DurationInSeconds, IntervalInMilliseconds } from '../../types/Common';\nimport Namespace from '../../types/Namespace';\nimport { URLParam } from '../../app/History';\nimport { isKioskMode } from '../../utils/SearchParamUtils';\n\nexport type GraphUrlParams = {\n  activeNamespaces: Namespace[];\n  duration: DurationInSeconds;\n  edgeLabels: EdgeLabelMode[];\n  graphLayout: Layout;\n  graphType: GraphType;\n  node?: NodeParamsType;\n  refreshInterval: IntervalInMilliseconds;\n  showIdleEdges: boolean;\n  showIdleNodes: boolean;\n  showOperationNodes: boolean;\n  showServiceNodes: boolean;\n  trafficRates: TrafficRate[];\n};\n\nconst buildCommonQueryParams = (params: GraphUrlParams): string => {\n  let q = `&${URLParam.GRAPH_EDGE_LABEL}=${params.edgeLabels}`;\n  q += `&${URLParam.GRAPH_LAYOUT}=${params.graphLayout.name}`;\n  q += `&${URLParam.GRAPH_IDLE_EDGES}=${params.showIdleEdges}`;\n  q += `&${URLParam.GRAPH_IDLE_NODES}=${params.showIdleNodes}`;\n  q += `&${URLParam.GRAPH_SERVICE_NODES}=${params.showServiceNodes}`;\n  q += `&${URLParam.GRAPH_TRAFFIC}=${params.trafficRates}`;\n  q += `&${URLParam.GRAPH_TYPE}=${params.graphType}`;\n  q += `&${URLParam.DURATION}=${params.duration}`;\n  q += `&${URLParam.GRAPH_OPERATION_NODES}=${params.showOperationNodes}`;\n  q += `&${URLParam.REFRESH_INTERVAL}=${params.refreshInterval}`;\n  return q;\n};\n\nexport const makeNamespacesGraphUrlFromParams = (params: GraphUrlParams): string => {\n  let queryParams = buildCommonQueryParams(params);\n  if (params.activeNamespaces.length > 0) {\n    const namespaces = params.activeNamespaces.map(namespace => namespace.name).join(',');\n    queryParams += `&${URLParam.NAMESPACES}=${namespaces}`;\n  }\n  if (isKioskMode()) {\n    queryParams += '&kiosk=true';\n  }\n  return `/graph/namespaces?` + queryParams;\n};\n\nexport const makeNodeGraphUrlFromParams = (params: GraphUrlParams): string => {\n  const node = params.node;\n  if (node) {\n    switch (node.nodeType) {\n      case NodeType.AGGREGATE:\n        return (\n          `/graph/node/namespaces/${node.namespace.name}/aggregates/${node.aggregate}/${node.aggregateValue}?` +\n          buildCommonQueryParams(params)\n        );\n      case NodeType.APP:\n        if (node.version && node.version !== 'unknown') {\n          return (\n            `/graph/node/namespaces/${node.namespace.name}/applications/${node.app}/versions/${node.version}?` +\n            buildCommonQueryParams(params)\n          );\n        }\n        return (\n          `/graph/node/namespaces/${node.namespace.name}/applications/${node.app}?` + buildCommonQueryParams(params)\n        );\n      case NodeType.BOX:\n        // can only be app box\n        return (\n          `/graph/node/namespaces/${node.namespace.name}/applications/${node.app}?` + buildCommonQueryParams(params)\n        );\n      case NodeType.SERVICE:\n        return (\n          `/graph/node/namespaces/${node.namespace.name}/services/${node.service}?` + buildCommonQueryParams(params)\n        );\n      case NodeType.WORKLOAD:\n        return (\n          `/graph/node/namespaces/${node.namespace.name}/workloads/${node.workload}?` + buildCommonQueryParams(params)\n        );\n      default:\n        console.debug('makeNodeUrl defaulting to makeNamespaceUrl');\n        return makeNamespacesGraphUrlFromParams(params);\n    }\n  } else {\n    // this should never happen but typescript needs this\n    return '';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
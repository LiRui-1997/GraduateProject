{"ast":null,"code":"import _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphSettings.tsx\";\nimport { Radio, Dropdown, DropdownToggle, Checkbox, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { HistoryManager, URLParam } from '../../../app/History';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { GraphType, EdgeLabelMode, isResponseTimeMode, isThroughputMode } from '../../../types/Graph';\nimport * as _ from 'lodash';\nimport { edgeLabelsSelector } from 'store/Selectors';\nimport { BoundingClientAwareComponent, PropertyType } from 'components/BoundingClientAwareComponent/BoundingClientAwareComponent';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { containerStyle, infoStyle, itemStyleWithInfo, itemStyleWithoutInfo, menuStyle, menuEntryStyle, titleStyle } from 'styles/DropdownStyles';\nimport { INITIAL_GRAPH_STATE } from 'reducers/GraphDataState';\nvar marginBottom = 20;\n\nvar GraphSettings = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(GraphSettings, _React$PureComponent);\n\n  var _super = _createSuper(GraphSettings);\n\n  function GraphSettings(props) {\n    var _this;\n\n    _classCallCheck(this, GraphSettings);\n\n    _this = _super.call(this, props);\n\n    _this.handleURLBool = function (param, paramDefault, reduxValue, reduxToggle) {\n      var urlValue = HistoryManager.getBooleanParam(param);\n\n      if (urlValue !== undefined) {\n        if (urlValue !== reduxValue) {\n          reduxToggle();\n        }\n      } else if (reduxValue !== paramDefault) {\n        HistoryManager.setParam(param, String(reduxValue));\n      }\n    };\n\n    _this.alignURLBool = function (param, paramDefault, prev, curr) {\n      if (prev === curr) {\n        return;\n      }\n\n      if (curr === paramDefault) {\n        HistoryManager.deleteParam(param, true);\n      } else {\n        HistoryManager.setParam(param, String(curr));\n      }\n    };\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.toggleEdgeLabelMode = function (_, event) {\n      var mode = event.target.value;\n\n      if (_this.props.edgeLabels.includes(mode)) {\n        var newEdgeLabels;\n\n        switch (mode) {\n          case EdgeLabelMode.RESPONSE_TIME_GROUP:\n            newEdgeLabels = _this.props.edgeLabels.filter(function (l) {\n              return !isResponseTimeMode(l);\n            });\n            break;\n\n          case EdgeLabelMode.THROUGHPUT_GROUP:\n            newEdgeLabels = _this.props.edgeLabels.filter(function (l) {\n              return !isThroughputMode(l);\n            });\n            break;\n\n          default:\n            newEdgeLabels = _this.props.edgeLabels.filter(function (l) {\n              return l !== mode;\n            });\n        }\n\n        _this.props.setEdgeLabels(newEdgeLabels);\n      } else {\n        switch (mode) {\n          case EdgeLabelMode.RESPONSE_TIME_GROUP:\n            _this.props.setEdgeLabels([].concat(_toConsumableArray(_this.props.edgeLabels), [mode, EdgeLabelMode.RESPONSE_TIME_P95]));\n\n            break;\n\n          case EdgeLabelMode.THROUGHPUT_GROUP:\n            _this.props.setEdgeLabels([].concat(_toConsumableArray(_this.props.edgeLabels), [mode, EdgeLabelMode.THROUGHPUT_REQUEST]));\n\n            break;\n\n          default:\n            _this.props.setEdgeLabels([].concat(_toConsumableArray(_this.props.edgeLabels), [mode]));\n\n        }\n      }\n    };\n\n    _this.toggleEdgeLabelResponseTimeMode = function (_, event) {\n      var mode = event.target.value;\n\n      var newEdgeLabels = _this.props.edgeLabels.filter(function (l) {\n        return !isResponseTimeMode(l);\n      });\n\n      _this.props.setEdgeLabels([].concat(_toConsumableArray(newEdgeLabels), [EdgeLabelMode.RESPONSE_TIME_GROUP, mode]));\n    };\n\n    _this.toggleEdgeLabelThroughputMode = function (_, event) {\n      var mode = event.target.value;\n\n      var newEdgeLabels = _this.props.edgeLabels.filter(function (l) {\n        return !isThroughputMode(l);\n      });\n\n      _this.props.setEdgeLabels([].concat(_toConsumableArray(newEdgeLabels), [EdgeLabelMode.THROUGHPUT_GROUP, mode]));\n    };\n\n    _this.state = {\n      isOpen: false\n    }; // Let URL override current redux state at construction time. Update URL as needed.\n\n    _this.handleURLBool(URLParam.GRAPH_ANIMATION, INITIAL_GRAPH_STATE.toolbarState.showTrafficAnimation, props.showTrafficAnimation, props.toggleTrafficAnimation);\n\n    _this.handleURLBool(URLParam.GRAPH_BADGE_SECURITY, INITIAL_GRAPH_STATE.toolbarState.showSecurity, props.showSecurity, props.toggleGraphSecurity);\n\n    _this.handleURLBool(URLParam.GRAPH_BADGE_SIDECAR, INITIAL_GRAPH_STATE.toolbarState.showMissingSidecars, props.showMissingSidecars, props.toggleGraphMissingSidecars);\n\n    _this.handleURLBool(URLParam.GRAPH_BADGE_VS, INITIAL_GRAPH_STATE.toolbarState.showVirtualServices, props.showVirtualServices, props.toggleGraphVirtualServices);\n\n    _this.handleURLBool(URLParam.GRAPH_BOX_CLUSTER, INITIAL_GRAPH_STATE.toolbarState.boxByCluster, props.boxByCluster, props.toggleBoxByCluster);\n\n    _this.handleURLBool(URLParam.GRAPH_BOX_NAMESPACE, INITIAL_GRAPH_STATE.toolbarState.boxByNamespace, props.boxByNamespace, props.toggleBoxByNamespace);\n\n    _this.handleURLBool(URLParam.GRAPH_COMPRESS_ON_HIDE, INITIAL_GRAPH_STATE.toolbarState.compressOnHide, props.compressOnHide, props.toggleCompressOnHide);\n\n    _this.handleURLBool(URLParam.GRAPH_IDLE_EDGES, INITIAL_GRAPH_STATE.toolbarState.showIdleEdges, props.showIdleEdges, props.toggleIdleEdges);\n\n    _this.handleURLBool(URLParam.GRAPH_IDLE_NODES, INITIAL_GRAPH_STATE.toolbarState.showIdleNodes, props.showIdleNodes, props.toggleIdleNodes);\n\n    _this.handleURLBool(URLParam.GRAPH_OPERATION_NODES, INITIAL_GRAPH_STATE.toolbarState.showOperationNodes, props.showOperationNodes, props.toggleOperationNodes);\n\n    _this.handleURLBool(URLParam.GRAPH_SERVICE_NODES, INITIAL_GRAPH_STATE.toolbarState.showServiceNodes, props.showServiceNodes, props.toggleServiceNodes);\n\n    return _this;\n  }\n\n  _createClass(GraphSettings, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prev) {\n      // ensure redux state and URL are aligned\n      this.alignURLBool(URLParam.GRAPH_ANIMATION, INITIAL_GRAPH_STATE.toolbarState.showTrafficAnimation, prev.showTrafficAnimation, this.props.showTrafficAnimation);\n      this.alignURLBool(URLParam.GRAPH_BADGE_SECURITY, INITIAL_GRAPH_STATE.toolbarState.showSecurity, prev.showSecurity, this.props.showSecurity);\n      this.alignURLBool(URLParam.GRAPH_BADGE_SIDECAR, INITIAL_GRAPH_STATE.toolbarState.showMissingSidecars, prev.showMissingSidecars, this.props.showMissingSidecars);\n      this.alignURLBool(URLParam.GRAPH_BADGE_VS, INITIAL_GRAPH_STATE.toolbarState.showVirtualServices, prev.showVirtualServices, this.props.showVirtualServices);\n      this.alignURLBool(URLParam.GRAPH_BOX_CLUSTER, INITIAL_GRAPH_STATE.toolbarState.boxByCluster, prev.boxByCluster, this.props.boxByCluster);\n      this.alignURLBool(URLParam.GRAPH_BOX_NAMESPACE, INITIAL_GRAPH_STATE.toolbarState.boxByNamespace, prev.boxByNamespace, this.props.boxByNamespace);\n      this.alignURLBool(URLParam.GRAPH_COMPRESS_ON_HIDE, INITIAL_GRAPH_STATE.toolbarState.compressOnHide, prev.compressOnHide, this.props.compressOnHide);\n      this.alignURLBool(URLParam.GRAPH_IDLE_EDGES, INITIAL_GRAPH_STATE.toolbarState.showIdleEdges, prev.showIdleEdges, this.props.showIdleEdges);\n      this.alignURLBool(URLParam.GRAPH_IDLE_NODES, INITIAL_GRAPH_STATE.toolbarState.showIdleNodes, prev.showIdleNodes, this.props.showIdleNodes);\n      this.alignURLBool(URLParam.GRAPH_OPERATION_NODES, INITIAL_GRAPH_STATE.toolbarState.showOperationNodes, prev.showOperationNodes, this.props.showOperationNodes);\n      this.alignURLBool(URLParam.GRAPH_SERVICE_NODES, INITIAL_GRAPH_STATE.toolbarState.showServiceNodes, prev.showServiceNodes, this.props.showServiceNodes);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          id: \"display-settings\",\n          onToggle: this.onToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 11\n          }\n        }, \"Display\"),\n        isOpen: this.state.isOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 7\n        }\n      }, this.getPopoverContent());\n    }\n  }, {\n    key: \"getPopoverContent\",\n    value: function getPopoverContent() {\n      var _this2 = this;\n\n      // map our attributes from redux\n      var _this$props = this.props,\n          boxByCluster = _this$props.boxByCluster,\n          boxByNamespace = _this$props.boxByNamespace,\n          compressOnHide = _this$props.compressOnHide,\n          edgeLabels = _this$props.edgeLabels,\n          showIdleEdges = _this$props.showIdleEdges,\n          showIdleNodes = _this$props.showIdleNodes,\n          showMissingSidecars = _this$props.showMissingSidecars,\n          showOperationNodes = _this$props.showOperationNodes,\n          showSecurity = _this$props.showSecurity,\n          showServiceNodes = _this$props.showServiceNodes,\n          showTrafficAnimation = _this$props.showTrafficAnimation,\n          showVirtualServices = _this$props.showVirtualServices; // map our dispatchers for redux\n\n      var _this$props2 = this.props,\n          toggleBoxByCluster = _this$props2.toggleBoxByCluster,\n          toggleBoxByNamespace = _this$props2.toggleBoxByNamespace,\n          toggleCompressOnHide = _this$props2.toggleCompressOnHide,\n          toggleGraphMissingSidecars = _this$props2.toggleGraphMissingSidecars,\n          toggleGraphSecurity = _this$props2.toggleGraphSecurity,\n          toggleGraphVirtualServices = _this$props2.toggleGraphVirtualServices,\n          toggleIdleEdges = _this$props2.toggleIdleEdges,\n          toggleIdleNodes = _this$props2.toggleIdleNodes,\n          toggleOperationNodes = _this$props2.toggleOperationNodes,\n          toggleServiceNodes = _this$props2.toggleServiceNodes,\n          toggleTrafficAnimation = _this$props2.toggleTrafficAnimation;\n      var edgeLabelOptions = [{\n        id: EdgeLabelMode.RESPONSE_TIME_GROUP,\n        labelText: _.startCase(EdgeLabelMode.RESPONSE_TIME_GROUP),\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }\n        }, \"Displays the requested response time. The unit is milliseconds (ms) when less than 1000, otherwise seconds (s). Default: 95th Percentile.\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }\n        }, \"Response times only apply to request-based traffic (not TCP or gRPC messaging). Additionally, the following edges do not offer a response time label but the information is available in the side panel when selecting the edge:\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }\n        }, \"- edges into service nodes\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }\n        }, \"- edges into or out of operation nodes.\"))\n      }, {\n        id: EdgeLabelMode.THROUGHPUT_GROUP,\n        labelText: _.startCase(EdgeLabelMode.THROUGHPUT_GROUP),\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }\n        }, \"Displays the requested HTTP Throughput. The unit is bytes-per-second (bps) when less than 1024, otherwise kilobytes-per-second (kps). Default: Request Throughput\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }\n        }, \"Throughput applies only to request-based, HTTP traffic. Additionally, the following edges do not offer a throughput label:\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }\n        }, \"- edges into service nodes\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }\n        }, \"- edges into or out of operation nodes.\"))\n      }, {\n        id: EdgeLabelMode.TRAFFIC_DISTRIBUTION,\n        labelText: _.startCase(EdgeLabelMode.TRAFFIC_DISTRIBUTION),\n        isChecked: edgeLabels.includes(EdgeLabelMode.TRAFFIC_DISTRIBUTION),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 11\n          }\n        }, \"HTTP and gRPC Edges display the percentage of traffic for that edge, when less than 100%. For a source node, the sum for outbound edges (per protocol) should be equal to or near 100%, given rounding. TCP edges are not included in the distribution because their rates reflect bytes.\")\n      }, {\n        id: EdgeLabelMode.TRAFFIC_RATE,\n        labelText: _.startCase(EdgeLabelMode.TRAFFIC_RATE),\n        isChecked: edgeLabels.includes(EdgeLabelMode.TRAFFIC_RATE),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 11\n          }\n        }, \"HTTP rates are in requests-per-second (rps). gRPC rates may be in requests-per-second (rps) or messages-per-second (mps). For request rates, the percentage of error responses is shown below the rate, when non-zero. TCP rates are in bytes. The unit is bytes-per-second (bps) when less than 1024, otherwise kilobytes-per-second (kps). Rates are rounded to 2 significant digits.\")\n      }];\n      var throughputOptions = [{\n        id: EdgeLabelMode.THROUGHPUT_REQUEST,\n        labelText: 'Request',\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_REQUEST),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 11\n          }\n        }, \"HTTP request data in bytes-per-second (bps) or kilobytes-per-second (kps)\")\n      }, {\n        id: EdgeLabelMode.THROUGHPUT_RESPONSE,\n        labelText: 'Response',\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_RESPONSE),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 11\n          }\n        }, \"HTTP response data in bytes per second (bps) or kilobytes-per-second (kps)\")\n      }];\n      var responseTimeOptions = [{\n        id: EdgeLabelMode.RESPONSE_TIME_AVERAGE,\n        labelText: 'Average',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_AVERAGE),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 18\n          }\n        }, \"Average request response time\")\n      }, {\n        id: EdgeLabelMode.RESPONSE_TIME_P50,\n        labelText: 'Median',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P50),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 18\n          }\n        }, \"Median request response time (50th Percentile)\")\n      }, {\n        id: EdgeLabelMode.RESPONSE_TIME_P95,\n        labelText: '95th Percentile',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P95),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 18\n          }\n        }, \"Max response time for 95% of requests (95th Percentile)\")\n      }, {\n        id: EdgeLabelMode.RESPONSE_TIME_P99,\n        labelText: '99th Percentile',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P99),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 18\n          }\n        }, \"Max response time for 99% of requests (99th Percentile)\")\n      }];\n      var visibilityOptions = [{\n        id: 'boxByCluster',\n        labelText: 'Cluster Boxes',\n        isChecked: boxByCluster,\n        onChange: toggleBoxByCluster,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 18\n          }\n        }, \"When enabled the graph will box nodes in the same cluster.\")\n      }, {\n        id: 'boxByNamespace',\n        labelText: 'Namespace Boxes',\n        isChecked: boxByNamespace,\n        onChange: toggleBoxByNamespace,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 11\n          }\n        }, \"When enabled the graph will box nodes in the same namespace, within the same cluster.\")\n      }, {\n        id: 'filterHide',\n        labelText: 'Compressed Hide',\n        isChecked: compressOnHide,\n        onChange: toggleCompressOnHide,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 11\n          }\n        }, \"Compress the graph after graph-hide removes matching elements. Otherwise the graph maintains the space consumed by the hidden elements.\")\n      }, {\n        id: 'filterIdleEdges',\n        labelText: 'Idle Edges',\n        isChecked: showIdleEdges,\n        onChange: toggleIdleEdges,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 11\n          }\n        }, \"Idle edges have no request traffic for the time period. Disabled by default to provide cleaner graphs. Enable to help detect unexpected traffic omissions, or to confirm expected edges with no traffic (due to routing, mirroring, etc).\")\n      }, {\n        id: 'filterIdleNodes',\n        labelText: 'Idle Nodes',\n        isChecked: showIdleNodes,\n        onChange: toggleIdleNodes,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 11\n          }\n        }, \"With \\\"Idle Edges\\\" enabled this displays nodes for defined services that have *never* received traffic. With \\\"Idle Edges\\\" disabled this displays nodes for defined services that have not received traffic during the current time period. Disabled by default to provide cleaner graphs. Enable to help locate unused, misconfigured or obsolete services.\")\n      }, {\n        id: 'filterOperationNodes',\n        disabled: this.props.graphType === GraphType.SERVICE,\n        labelText: 'Operation Nodes',\n        isChecked: showOperationNodes,\n        onChange: toggleOperationNodes,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }\n        }, \"When both operation and service nodes are enabled then the operation is displayed specific to each service to which it applies, and therefore may be duplicated for different services. When enabled independently each operation will have a single node representing the total traffic for that operation.\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }\n        }, \"- Operations with no traffic are ignored.\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }\n        }, \"- This is not applicable to Service graphs.\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }\n        }, \"- Operation nodes require additional \\\"Request Classification\\\" Istio configuration for workloads in the selected namespaces.\"))\n      }, {\n        id: 'filterServiceNodes',\n        disabled: this.props.graphType === GraphType.SERVICE,\n        labelText: 'Service Nodes',\n        isChecked: showServiceNodes,\n        onChange: toggleServiceNodes,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 11\n          }\n        }, \"Reflect service routing by injecting the destination service nodes into the graph. This can be useful for grouping requests for the same service, but routed to different workloads. Edges leading into service nodes are logical aggregations and will not show response time labels, but if selected the side panel will provide a response time chart.\")\n      }, {\n        id: 'filterTrafficAnimation',\n        labelText: 'Traffic Animation',\n        isChecked: showTrafficAnimation,\n        onChange: toggleTrafficAnimation,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 11\n          }\n        }, \"Animate the graph to reflect traffic flow. The particle density and speed roughly reflects an edge's request load relevant to the other edges. Animation can be CPU intensive.\")\n      }];\n      var badgeOptions = [{\n        id: 'filterSidecars',\n        labelText: 'Missing Sidecars',\n        isChecked: showMissingSidecars,\n        onChange: toggleGraphMissingSidecars\n      }, {\n        id: 'filterSecurity',\n        labelText: 'Security',\n        isChecked: showSecurity,\n        onChange: toggleGraphSecurity,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }\n        }, \"Show closed or open lock icons on edges with traffic that differs from the global mTLS policy. The percentage of mTLS traffic can be seen in the side-panel when selecting the edge. Note that the global masthead will show a lock icon when global mTLS is enabled. The side-panel will also display source and destination principals, if available. mTLS status is not offered for gRPC-message traffic.\"))\n      }, {\n        id: 'filterVS',\n        labelText: 'Virtual Services',\n        isChecked: showVirtualServices,\n        onChange: toggleGraphVirtualServices,\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }\n        }, \"Show virtual service related icons. Additional icons are displayed if a circuit breaker is present on the virtual service or if the virtual service was created through one of the Kiali service wizards.\"))\n      }];\n      return /*#__PURE__*/React.createElement(BoundingClientAwareComponent, {\n        className: containerStyle,\n        maxHeight: {\n          type: PropertyType.VIEWPORT_HEIGHT_MINUS_TOP,\n          margin: marginBottom\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"graph-display-menu\",\n        className: menuStyle,\n        style: {\n          width: '15em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: titleStyle,\n        style: {\n          position: 'relative',\n          bottom: '3px',\n          paddingRight: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }\n      }, \"Show Edge Labels\"), /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"tooltip_show_edge_labels\",\n        position: TooltipPosition.right,\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 19\n          }\n        }, \"Values for multiple label selections are stacked in the same order as the options below. Hover or selection will always show units, an additionally show protocol.\")),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: infoStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 15\n        }\n      }))), edgeLabelOptions.map(function (edgeLabelOption) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: edgeLabelOption.id,\n          className: menuEntryStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: edgeLabelOption.id,\n          className: !!edgeLabelOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Checkbox, {\n          id: edgeLabelOption.id,\n          name: \"edgeLabelOptions\",\n          isChecked: edgeLabelOption.isChecked,\n          label: edgeLabelOption.labelText,\n          onChange: _this2.toggleEdgeLabelMode,\n          value: edgeLabelOption.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 17\n          }\n        })), !!edgeLabelOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tooltip_\".concat(edgeLabelOption.id),\n          position: TooltipPosition.right,\n          content: edgeLabelOption.tooltip,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 19\n          }\n        })), edgeLabelOption.id === EdgeLabelMode.RESPONSE_TIME_GROUP && responseTimeOptions.some(function (o) {\n          return o.isChecked;\n        }) && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 17\n          }\n        }, responseTimeOptions.map(function (rtOption) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: rtOption.id,\n            className: menuEntryStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            key: rtOption.id,\n            className: !!rtOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n            style: {\n              paddingLeft: '35px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Radio, {\n            id: rtOption.id,\n            style: {\n              paddingLeft: '5px'\n            },\n            name: \"rtOptions\",\n            isChecked: rtOption.isChecked,\n            label: rtOption.labelText,\n            onChange: _this2.toggleEdgeLabelResponseTimeMode,\n            value: rtOption.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 25\n            }\n          })), !!rtOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tooltip_\".concat(rtOption.id),\n            position: TooltipPosition.right,\n            content: rtOption.tooltip,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 27\n            }\n          })));\n        })), edgeLabelOption.id === EdgeLabelMode.THROUGHPUT_GROUP && throughputOptions.some(function (o) {\n          return o.isChecked;\n        }) && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 17\n          }\n        }, throughputOptions.map(function (throughputOption) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: throughputOption.id,\n            className: menuEntryStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            key: throughputOption.id,\n            className: !!throughputOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n            style: {\n              paddingLeft: '35px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Radio, {\n            id: throughputOption.id,\n            style: {\n              paddingLeft: '5px'\n            },\n            name: \"throughputOptions\",\n            isChecked: throughputOption.isChecked,\n            label: throughputOption.labelText,\n            onChange: _this2.toggleEdgeLabelThroughputMode,\n            value: throughputOption.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 25\n            }\n          })), !!throughputOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tooltip_\".concat(throughputOption.id),\n            position: TooltipPosition.right,\n            content: throughputOption.tooltip,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 27\n            }\n          })));\n        })));\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 11\n        }\n      }, \"Show\"), visibilityOptions.map(function (item) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: item.id,\n          style: {\n            display: 'inline-block'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: item.id,\n          className: !!item.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Checkbox, {\n          id: item.id,\n          isChecked: item.isChecked,\n          label: item.labelText,\n          onChange: item.onChange,\n          isDisabled: item.disabled,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 17\n          }\n        })), !!item.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tooltip_\".concat(item.id),\n          position: TooltipPosition.right,\n          content: item.tooltip,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 19\n          }\n        })));\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }\n      }, \"Show Badges\"), badgeOptions.map(function (item) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: item.id,\n          style: {\n            display: 'inline-block'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: item.id,\n          className: !!item.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Checkbox, {\n          id: item.id,\n          isChecked: item.isChecked,\n          label: item.labelText,\n          onChange: item.onChange,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 17\n          }\n        })), !!item.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tooltip_\".concat(item.id),\n          position: TooltipPosition.right,\n          content: item.tooltip,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 19\n          }\n        })));\n      })));\n    }\n  }]);\n\n  return GraphSettings;\n}(React.PureComponent); // Allow Redux to map sections of our global app state to our props\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    boxByCluster: state.graph.toolbarState.boxByCluster,\n    boxByNamespace: state.graph.toolbarState.boxByNamespace,\n    compressOnHide: state.graph.toolbarState.compressOnHide,\n    edgeLabels: edgeLabelsSelector(state),\n    showIdleEdges: state.graph.toolbarState.showIdleEdges,\n    showIdleNodes: state.graph.toolbarState.showIdleNodes,\n    showMissingSidecars: state.graph.toolbarState.showMissingSidecars,\n    showOperationNodes: state.graph.toolbarState.showOperationNodes,\n    showSecurity: state.graph.toolbarState.showSecurity,\n    showServiceNodes: state.graph.toolbarState.showServiceNodes,\n    showTrafficAnimation: state.graph.toolbarState.showTrafficAnimation,\n    showVirtualServices: state.graph.toolbarState.showVirtualServices\n  };\n}; // Map our actions to Redux\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    toggleBoxByCluster: bindActionCreators(GraphToolbarActions.toggleBoxByCluster, dispatch),\n    toggleBoxByNamespace: bindActionCreators(GraphToolbarActions.toggleBoxByNamespace, dispatch),\n    toggleCompressOnHide: bindActionCreators(GraphToolbarActions.toggleCompressOnHide, dispatch),\n    toggleGraphMissingSidecars: bindActionCreators(GraphToolbarActions.toggleGraphMissingSidecars, dispatch),\n    toggleGraphSecurity: bindActionCreators(GraphToolbarActions.toggleGraphSecurity, dispatch),\n    toggleGraphVirtualServices: bindActionCreators(GraphToolbarActions.toggleGraphVirtualServices, dispatch),\n    toggleIdleEdges: bindActionCreators(GraphToolbarActions.toggleIdleEdges, dispatch),\n    toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch),\n    toggleOperationNodes: bindActionCreators(GraphToolbarActions.toggleOperationNodes, dispatch),\n    toggleServiceNodes: bindActionCreators(GraphToolbarActions.toggleServiceNodes, dispatch),\n    toggleTrafficAnimation: bindActionCreators(GraphToolbarActions.toggleTrafficAnimation, dispatch)\n  };\n}; // hook up to Redux for our State to be mapped to props\n\n\nvar GraphSettingsContainer = connect(mapStateToProps, mapDispatchToProps)(GraphSettings);\nexport default GraphSettingsContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphSettings.tsx"],"names":["Radio","Dropdown","DropdownToggle","Checkbox","Tooltip","TooltipPosition","React","connect","bindActionCreators","HistoryManager","URLParam","GraphToolbarActions","GraphType","EdgeLabelMode","isResponseTimeMode","isThroughputMode","_","edgeLabelsSelector","BoundingClientAwareComponent","PropertyType","KialiIcon","containerStyle","infoStyle","itemStyleWithInfo","itemStyleWithoutInfo","menuStyle","menuEntryStyle","titleStyle","INITIAL_GRAPH_STATE","marginBottom","GraphSettings","props","handleURLBool","param","paramDefault","reduxValue","reduxToggle","urlValue","getBooleanParam","undefined","setParam","String","alignURLBool","prev","curr","deleteParam","onToggle","isOpen","setState","toggleEdgeLabelMode","event","mode","target","value","edgeLabels","includes","newEdgeLabels","RESPONSE_TIME_GROUP","filter","l","THROUGHPUT_GROUP","setEdgeLabels","RESPONSE_TIME_P95","THROUGHPUT_REQUEST","toggleEdgeLabelResponseTimeMode","toggleEdgeLabelThroughputMode","state","GRAPH_ANIMATION","toolbarState","showTrafficAnimation","toggleTrafficAnimation","GRAPH_BADGE_SECURITY","showSecurity","toggleGraphSecurity","GRAPH_BADGE_SIDECAR","showMissingSidecars","toggleGraphMissingSidecars","GRAPH_BADGE_VS","showVirtualServices","toggleGraphVirtualServices","GRAPH_BOX_CLUSTER","boxByCluster","toggleBoxByCluster","GRAPH_BOX_NAMESPACE","boxByNamespace","toggleBoxByNamespace","GRAPH_COMPRESS_ON_HIDE","compressOnHide","toggleCompressOnHide","GRAPH_IDLE_EDGES","showIdleEdges","toggleIdleEdges","GRAPH_IDLE_NODES","showIdleNodes","toggleIdleNodes","GRAPH_OPERATION_NODES","showOperationNodes","toggleOperationNodes","GRAPH_SERVICE_NODES","showServiceNodes","toggleServiceNodes","getPopoverContent","edgeLabelOptions","id","labelText","startCase","isChecked","tooltip","textAlign","TRAFFIC_DISTRIBUTION","TRAFFIC_RATE","throughputOptions","THROUGHPUT_RESPONSE","responseTimeOptions","RESPONSE_TIME_AVERAGE","RESPONSE_TIME_P50","RESPONSE_TIME_P99","visibilityOptions","onChange","disabled","graphType","SERVICE","badgeOptions","type","VIEWPORT_HEIGHT_MINUS_TOP","margin","width","marginTop","position","bottom","paddingRight","right","map","edgeLabelOption","some","o","rtOption","paddingLeft","throughputOption","item","display","PureComponent","mapStateToProps","graph","mapDispatchToProps","dispatch","GraphSettingsContainer"],"mappings":"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","sourcesContent":["import { Radio, Dropdown, DropdownToggle, Checkbox, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { bindActionCreators } from 'redux';\nimport { HistoryManager, URLParam } from '../../../app/History';\nimport { GraphToolbarState, KialiAppState } from '../../../store/Store';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { GraphType, EdgeLabelMode, isResponseTimeMode, isThroughputMode } from '../../../types/Graph';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport * as _ from 'lodash';\nimport { edgeLabelsSelector } from 'store/Selectors';\nimport {\n  BoundingClientAwareComponent,\n  PropertyType\n} from 'components/BoundingClientAwareComponent/BoundingClientAwareComponent';\nimport { KialiIcon } from 'config/KialiIcon';\nimport {\n  containerStyle,\n  infoStyle,\n  itemStyleWithInfo,\n  itemStyleWithoutInfo,\n  menuStyle,\n  menuEntryStyle,\n  titleStyle\n} from 'styles/DropdownStyles';\nimport { INITIAL_GRAPH_STATE } from 'reducers/GraphDataState';\n\ntype ReduxProps = {\n  boxByCluster: boolean;\n  boxByNamespace: boolean;\n  compressOnHide: boolean;\n  edgeLabels: EdgeLabelMode[];\n  setEdgeLabels: (edgeLabels: EdgeLabelMode[]) => void;\n  showIdleEdges: boolean;\n  showIdleNodes: boolean;\n  showMissingSidecars: boolean;\n  showOperationNodes: boolean;\n  showSecurity: boolean;\n  showServiceNodes: boolean;\n  showTrafficAnimation: boolean;\n  showVirtualServices: boolean;\n  toggleBoxByCluster(): void;\n  toggleBoxByNamespace(): void;\n  toggleCompressOnHide(): void;\n  toggleGraphMissingSidecars(): void;\n  toggleGraphSecurity(): void;\n  toggleGraphVirtualServices(): void;\n  toggleIdleEdges(): void;\n  toggleIdleNodes(): void;\n  toggleOperationNodes(): void;\n  toggleServiceNodes(): void;\n  toggleTrafficAnimation(): void;\n};\n\ntype GraphSettingsProps = ReduxProps &\n  Omit<GraphToolbarState, 'findValue' | 'hideValue' | 'showLegend' | 'showFindHelp' | 'trafficRates'>;\n\ntype GraphSettingsState = { isOpen: boolean };\n\ninterface DisplayOptionType {\n  id: string;\n  disabled?: boolean;\n  labelText: string;\n  isChecked: boolean;\n  onChange?: () => void;\n  tooltip?: React.ReactNode;\n}\n\nconst marginBottom = 20;\n\nclass GraphSettings extends React.PureComponent<GraphSettingsProps, GraphSettingsState> {\n  constructor(props: GraphSettingsProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n\n    // Let URL override current redux state at construction time. Update URL as needed.\n    this.handleURLBool(\n      URLParam.GRAPH_ANIMATION,\n      INITIAL_GRAPH_STATE.toolbarState.showTrafficAnimation,\n      props.showTrafficAnimation,\n      props.toggleTrafficAnimation\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_BADGE_SECURITY,\n      INITIAL_GRAPH_STATE.toolbarState.showSecurity,\n      props.showSecurity,\n      props.toggleGraphSecurity\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_BADGE_SIDECAR,\n      INITIAL_GRAPH_STATE.toolbarState.showMissingSidecars,\n      props.showMissingSidecars,\n      props.toggleGraphMissingSidecars\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_BADGE_VS,\n      INITIAL_GRAPH_STATE.toolbarState.showVirtualServices,\n      props.showVirtualServices,\n      props.toggleGraphVirtualServices\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_BOX_CLUSTER,\n      INITIAL_GRAPH_STATE.toolbarState.boxByCluster,\n      props.boxByCluster,\n      props.toggleBoxByCluster\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_BOX_NAMESPACE,\n      INITIAL_GRAPH_STATE.toolbarState.boxByNamespace,\n      props.boxByNamespace,\n      props.toggleBoxByNamespace\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_COMPRESS_ON_HIDE,\n      INITIAL_GRAPH_STATE.toolbarState.compressOnHide,\n      props.compressOnHide,\n      props.toggleCompressOnHide\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_IDLE_EDGES,\n      INITIAL_GRAPH_STATE.toolbarState.showIdleEdges,\n      props.showIdleEdges,\n      props.toggleIdleEdges\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_IDLE_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showIdleNodes,\n      props.showIdleNodes,\n      props.toggleIdleNodes\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_OPERATION_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showOperationNodes,\n      props.showOperationNodes,\n      props.toggleOperationNodes\n    );\n    this.handleURLBool(\n      URLParam.GRAPH_SERVICE_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showServiceNodes,\n      props.showServiceNodes,\n      props.toggleServiceNodes\n    );\n  }\n\n  componentDidUpdate(prev: GraphSettingsProps) {\n    // ensure redux state and URL are aligned\n    this.alignURLBool(\n      URLParam.GRAPH_ANIMATION,\n      INITIAL_GRAPH_STATE.toolbarState.showTrafficAnimation,\n      prev.showTrafficAnimation,\n      this.props.showTrafficAnimation\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_BADGE_SECURITY,\n      INITIAL_GRAPH_STATE.toolbarState.showSecurity,\n      prev.showSecurity,\n      this.props.showSecurity\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_BADGE_SIDECAR,\n      INITIAL_GRAPH_STATE.toolbarState.showMissingSidecars,\n      prev.showMissingSidecars,\n      this.props.showMissingSidecars\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_BADGE_VS,\n      INITIAL_GRAPH_STATE.toolbarState.showVirtualServices,\n      prev.showVirtualServices,\n      this.props.showVirtualServices\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_BOX_CLUSTER,\n      INITIAL_GRAPH_STATE.toolbarState.boxByCluster,\n      prev.boxByCluster,\n      this.props.boxByCluster\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_BOX_NAMESPACE,\n      INITIAL_GRAPH_STATE.toolbarState.boxByNamespace,\n      prev.boxByNamespace,\n      this.props.boxByNamespace\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_COMPRESS_ON_HIDE,\n      INITIAL_GRAPH_STATE.toolbarState.compressOnHide,\n      prev.compressOnHide,\n      this.props.compressOnHide\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_IDLE_EDGES,\n      INITIAL_GRAPH_STATE.toolbarState.showIdleEdges,\n      prev.showIdleEdges,\n      this.props.showIdleEdges\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_IDLE_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showIdleNodes,\n      prev.showIdleNodes,\n      this.props.showIdleNodes\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_OPERATION_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showOperationNodes,\n      prev.showOperationNodes,\n      this.props.showOperationNodes\n    );\n    this.alignURLBool(\n      URLParam.GRAPH_SERVICE_NODES,\n      INITIAL_GRAPH_STATE.toolbarState.showServiceNodes,\n      prev.showServiceNodes,\n      this.props.showServiceNodes\n    );\n  }\n\n  private handleURLBool = (param: URLParam, paramDefault: boolean, reduxValue: boolean, reduxToggle: () => void) => {\n    const urlValue = HistoryManager.getBooleanParam(param);\n    if (urlValue !== undefined) {\n      if (urlValue !== reduxValue) {\n        reduxToggle();\n      }\n    } else if (reduxValue !== paramDefault) {\n      HistoryManager.setParam(param, String(reduxValue));\n    }\n  };\n\n  private alignURLBool = (param: URLParam, paramDefault: boolean, prev: boolean, curr: boolean) => {\n    if (prev === curr) {\n      return;\n    }\n    if (curr === paramDefault) {\n      HistoryManager.deleteParam(param, true);\n    } else {\n      HistoryManager.setParam(param, String(curr));\n    }\n  };\n\n  render() {\n    return (\n      <Dropdown\n        toggle={\n          <DropdownToggle id=\"display-settings\" onToggle={this.onToggle}>\n            Display\n          </DropdownToggle>\n        }\n        isOpen={this.state.isOpen}\n      >\n        {this.getPopoverContent()}\n      </Dropdown>\n    );\n  }\n\n  private onToggle = isOpen => {\n    this.setState({\n      isOpen\n    });\n  };\n\n  private getPopoverContent() {\n    // map our attributes from redux\n    const {\n      boxByCluster,\n      boxByNamespace,\n      compressOnHide,\n      edgeLabels,\n      showIdleEdges,\n      showIdleNodes,\n      showMissingSidecars,\n      showOperationNodes,\n      showSecurity,\n      showServiceNodes,\n      showTrafficAnimation,\n      showVirtualServices\n    } = this.props;\n\n    // map our dispatchers for redux\n    const {\n      toggleBoxByCluster,\n      toggleBoxByNamespace,\n      toggleCompressOnHide,\n      toggleGraphMissingSidecars,\n      toggleGraphSecurity,\n      toggleGraphVirtualServices,\n      toggleIdleEdges,\n      toggleIdleNodes,\n      toggleOperationNodes,\n      toggleServiceNodes,\n      toggleTrafficAnimation\n    } = this.props;\n\n    const edgeLabelOptions: DisplayOptionType[] = [\n      {\n        id: EdgeLabelMode.RESPONSE_TIME_GROUP,\n        labelText: _.startCase(EdgeLabelMode.RESPONSE_TIME_GROUP),\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            <div>\n              Displays the requested response time. The unit is milliseconds (ms) when less than 1000, otherwise seconds\n              (s). Default: 95th Percentile.\n            </div>\n            <div>\n              Response times only apply to request-based traffic (not TCP or gRPC messaging). Additionally, the\n              following edges do not offer a response time label but the information is available in the side panel when\n              selecting the edge:\n            </div>\n            <div>- edges into service nodes</div>\n            <div>- edges into or out of operation nodes.</div>\n          </div>\n        )\n      },\n      {\n        id: EdgeLabelMode.THROUGHPUT_GROUP,\n        labelText: _.startCase(EdgeLabelMode.THROUGHPUT_GROUP),\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            <div>\n              Displays the requested HTTP Throughput. The unit is bytes-per-second (bps) when less than 1024, otherwise\n              kilobytes-per-second (kps). Default: Request Throughput\n            </div>\n            <div>\n              Throughput applies only to request-based, HTTP traffic. Additionally, the following edges do not offer a\n              throughput label:\n            </div>\n            <div>- edges into service nodes</div>\n            <div>- edges into or out of operation nodes.</div>\n          </div>\n        )\n      },\n      {\n        id: EdgeLabelMode.TRAFFIC_DISTRIBUTION,\n        labelText: _.startCase(EdgeLabelMode.TRAFFIC_DISTRIBUTION),\n        isChecked: edgeLabels.includes(EdgeLabelMode.TRAFFIC_DISTRIBUTION),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            HTTP and gRPC Edges display the percentage of traffic for that edge, when less than 100%. For a source node,\n            the sum for outbound edges (per protocol) should be equal to or near 100%, given rounding. TCP edges are not\n            included in the distribution because their rates reflect bytes.\n          </div>\n        )\n      },\n      {\n        id: EdgeLabelMode.TRAFFIC_RATE,\n        labelText: _.startCase(EdgeLabelMode.TRAFFIC_RATE),\n        isChecked: edgeLabels.includes(EdgeLabelMode.TRAFFIC_RATE),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            HTTP rates are in requests-per-second (rps). gRPC rates may be in requests-per-second (rps) or\n            messages-per-second (mps). For request rates, the percentage of error responses is shown below the rate,\n            when non-zero. TCP rates are in bytes. The unit is bytes-per-second (bps) when less than 1024, otherwise\n            kilobytes-per-second (kps). Rates are rounded to 2 significant digits.\n          </div>\n        )\n      }\n    ];\n\n    const throughputOptions: DisplayOptionType[] = [\n      {\n        id: EdgeLabelMode.THROUGHPUT_REQUEST,\n        labelText: 'Request',\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_REQUEST),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            HTTP request data in bytes-per-second (bps) or kilobytes-per-second (kps)\n          </div>\n        )\n      },\n      {\n        id: EdgeLabelMode.THROUGHPUT_RESPONSE,\n        labelText: 'Response',\n        isChecked: edgeLabels.includes(EdgeLabelMode.THROUGHPUT_RESPONSE),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            HTTP response data in bytes per second (bps) or kilobytes-per-second (kps)\n          </div>\n        )\n      }\n    ];\n\n    const responseTimeOptions: DisplayOptionType[] = [\n      {\n        id: EdgeLabelMode.RESPONSE_TIME_AVERAGE,\n        labelText: 'Average',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_AVERAGE),\n        tooltip: <div style={{ textAlign: 'left' }}>Average request response time</div>\n      },\n      {\n        id: EdgeLabelMode.RESPONSE_TIME_P50,\n        labelText: 'Median',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P50),\n        tooltip: <div style={{ textAlign: 'left' }}>Median request response time (50th Percentile)</div>\n      },\n      {\n        id: EdgeLabelMode.RESPONSE_TIME_P95,\n        labelText: '95th Percentile',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P95),\n        tooltip: <div style={{ textAlign: 'left' }}>Max response time for 95% of requests (95th Percentile)</div>\n      },\n      {\n        id: EdgeLabelMode.RESPONSE_TIME_P99,\n        labelText: '99th Percentile',\n        isChecked: edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_P99),\n        tooltip: <div style={{ textAlign: 'left' }}>Max response time for 99% of requests (99th Percentile)</div>\n      }\n    ];\n\n    const visibilityOptions: DisplayOptionType[] = [\n      {\n        id: 'boxByCluster',\n        labelText: 'Cluster Boxes',\n        isChecked: boxByCluster,\n        onChange: toggleBoxByCluster,\n        tooltip: <div style={{ textAlign: 'left' }}>When enabled the graph will box nodes in the same cluster.</div>\n      },\n      {\n        id: 'boxByNamespace',\n        labelText: 'Namespace Boxes',\n        isChecked: boxByNamespace,\n        onChange: toggleBoxByNamespace,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            When enabled the graph will box nodes in the same namespace, within the same cluster.\n          </div>\n        )\n      },\n      {\n        id: 'filterHide',\n        labelText: 'Compressed Hide',\n        isChecked: compressOnHide,\n        onChange: toggleCompressOnHide,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Compress the graph after graph-hide removes matching elements. Otherwise the graph maintains the space\n            consumed by the hidden elements.\n          </div>\n        )\n      },\n      {\n        id: 'filterIdleEdges',\n        labelText: 'Idle Edges',\n        isChecked: showIdleEdges,\n        onChange: toggleIdleEdges,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Idle edges have no request traffic for the time period. Disabled by default to provide cleaner graphs.\n            Enable to help detect unexpected traffic omissions, or to confirm expected edges with no traffic (due to\n            routing, mirroring, etc).\n          </div>\n        )\n      },\n      {\n        id: 'filterIdleNodes',\n        labelText: 'Idle Nodes',\n        isChecked: showIdleNodes,\n        onChange: toggleIdleNodes,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            With \"Idle Edges\" enabled this displays nodes for defined services that have *never* received traffic. With\n            \"Idle Edges\" disabled this displays nodes for defined services that have not received traffic during the\n            current time period. Disabled by default to provide cleaner graphs. Enable to help locate unused,\n            misconfigured or obsolete services.\n          </div>\n        )\n      },\n      {\n        id: 'filterOperationNodes',\n        disabled: this.props.graphType === GraphType.SERVICE,\n        labelText: 'Operation Nodes',\n        isChecked: showOperationNodes,\n        onChange: toggleOperationNodes,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            <div>\n              When both operation and service nodes are enabled then the operation is displayed specific to each service\n              to which it applies, and therefore may be duplicated for different services. When enabled independently\n              each operation will have a single node representing the total traffic for that operation.\n            </div>\n            <div>- Operations with no traffic are ignored.</div>\n            <div>- This is not applicable to Service graphs.</div>\n            <div>\n              - Operation nodes require additional \"Request Classification\" Istio configuration for workloads in the\n              selected namespaces.\n            </div>\n          </div>\n        )\n      },\n      {\n        id: 'filterServiceNodes',\n        disabled: this.props.graphType === GraphType.SERVICE,\n        labelText: 'Service Nodes',\n        isChecked: showServiceNodes,\n        onChange: toggleServiceNodes,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Reflect service routing by injecting the destination service nodes into the graph. This can be useful for\n            grouping requests for the same service, but routed to different workloads. Edges leading into service nodes\n            are logical aggregations and will not show response time labels, but if selected the side panel will provide\n            a response time chart.\n          </div>\n        )\n      },\n      {\n        id: 'filterTrafficAnimation',\n        labelText: 'Traffic Animation',\n        isChecked: showTrafficAnimation,\n        onChange: toggleTrafficAnimation,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Animate the graph to reflect traffic flow. The particle density and speed roughly reflects an edge's request\n            load relevant to the other edges. Animation can be CPU intensive.\n          </div>\n        )\n      }\n    ];\n\n    const badgeOptions: DisplayOptionType[] = [\n      {\n        id: 'filterSidecars',\n        labelText: 'Missing Sidecars',\n        isChecked: showMissingSidecars,\n        onChange: toggleGraphMissingSidecars\n      },\n      {\n        id: 'filterSecurity',\n        labelText: 'Security',\n        isChecked: showSecurity,\n        onChange: toggleGraphSecurity,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            <div>\n              Show closed or open lock icons on edges with traffic that differs from the global mTLS policy. The\n              percentage of mTLS traffic can be seen in the side-panel when selecting the edge. Note that the global\n              masthead will show a lock icon when global mTLS is enabled. The side-panel will also display source and\n              destination principals, if available. mTLS status is not offered for gRPC-message traffic.\n            </div>\n          </div>\n        )\n      },\n      {\n        id: 'filterVS',\n        labelText: 'Virtual Services',\n        isChecked: showVirtualServices,\n        onChange: toggleGraphVirtualServices,\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            <div>\n              Show virtual service related icons. Additional icons are displayed if a circuit breaker is present on the\n              virtual service or if the virtual service was created through one of the Kiali service wizards.\n            </div>\n          </div>\n        )\n      }\n    ];\n\n    return (\n      <BoundingClientAwareComponent\n        className={containerStyle}\n        maxHeight={{ type: PropertyType.VIEWPORT_HEIGHT_MINUS_TOP, margin: marginBottom }}\n      >\n        <div id=\"graph-display-menu\" className={menuStyle} style={{ width: '15em' }}>\n          <div style={{ marginTop: '10px' }}>\n            <span className={titleStyle} style={{ position: 'relative', bottom: '3px', paddingRight: 0 }}>\n              Show Edge Labels\n            </span>\n            <Tooltip\n              key=\"tooltip_show_edge_labels\"\n              position={TooltipPosition.right}\n              content={\n                <div style={{ textAlign: 'left' }}>\n                  <div>\n                    Values for multiple label selections are stacked in the same order as the options below. Hover or\n                    selection will always show units, an additionally show protocol.\n                  </div>\n                </div>\n              }\n            >\n              <KialiIcon.Info className={infoStyle} />\n            </Tooltip>\n          </div>\n          {edgeLabelOptions.map((edgeLabelOption: DisplayOptionType) => (\n            <div key={edgeLabelOption.id} className={menuEntryStyle}>\n              <label\n                key={edgeLabelOption.id}\n                className={!!edgeLabelOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n              >\n                <Checkbox\n                  id={edgeLabelOption.id}\n                  name=\"edgeLabelOptions\"\n                  isChecked={edgeLabelOption.isChecked}\n                  label={edgeLabelOption.labelText}\n                  onChange={this.toggleEdgeLabelMode}\n                  value={edgeLabelOption.id}\n                />\n              </label>\n              {!!edgeLabelOption.tooltip && (\n                <Tooltip\n                  key={`tooltip_${edgeLabelOption.id}`}\n                  position={TooltipPosition.right}\n                  content={edgeLabelOption.tooltip}\n                >\n                  <KialiIcon.Info className={infoStyle} />\n                </Tooltip>\n              )}\n              {edgeLabelOption.id === EdgeLabelMode.RESPONSE_TIME_GROUP && responseTimeOptions.some(o => o.isChecked) && (\n                <div>\n                  {responseTimeOptions.map((rtOption: DisplayOptionType) => (\n                    <div key={rtOption.id} className={menuEntryStyle}>\n                      <label\n                        key={rtOption.id}\n                        className={!!rtOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n                        style={{ paddingLeft: '35px' }}\n                      >\n                        <Radio\n                          id={rtOption.id}\n                          style={{ paddingLeft: '5px' }}\n                          name=\"rtOptions\"\n                          isChecked={rtOption.isChecked}\n                          label={rtOption.labelText}\n                          onChange={this.toggleEdgeLabelResponseTimeMode}\n                          value={rtOption.id}\n                        />\n                      </label>\n                      {!!rtOption.tooltip && (\n                        <Tooltip\n                          key={`tooltip_${rtOption.id}`}\n                          position={TooltipPosition.right}\n                          content={rtOption.tooltip}\n                        >\n                          <KialiIcon.Info className={infoStyle} />\n                        </Tooltip>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n              {edgeLabelOption.id === EdgeLabelMode.THROUGHPUT_GROUP && throughputOptions.some(o => o.isChecked) && (\n                <div>\n                  {throughputOptions.map((throughputOption: DisplayOptionType) => (\n                    <div key={throughputOption.id} className={menuEntryStyle}>\n                      <label\n                        key={throughputOption.id}\n                        className={!!throughputOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n                        style={{ paddingLeft: '35px' }}\n                      >\n                        <Radio\n                          id={throughputOption.id}\n                          style={{ paddingLeft: '5px' }}\n                          name=\"throughputOptions\"\n                          isChecked={throughputOption.isChecked}\n                          label={throughputOption.labelText}\n                          onChange={this.toggleEdgeLabelThroughputMode}\n                          value={throughputOption.id}\n                        />\n                      </label>\n                      {!!throughputOption.tooltip && (\n                        <Tooltip\n                          key={`tooltip_${throughputOption.id}`}\n                          position={TooltipPosition.right}\n                          content={throughputOption.tooltip}\n                        >\n                          <KialiIcon.Info className={infoStyle} />\n                        </Tooltip>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n          <div className={titleStyle}>Show</div>\n          {visibilityOptions.map((item: DisplayOptionType) => (\n            <div key={item.id} style={{ display: 'inline-block' }}>\n              <label key={item.id} className={!!item.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}>\n                <Checkbox\n                  id={item.id}\n                  isChecked={item.isChecked}\n                  label={item.labelText}\n                  onChange={item.onChange}\n                  isDisabled={item.disabled}\n                />\n              </label>\n              {!!item.tooltip && (\n                <Tooltip key={`tooltip_${item.id}`} position={TooltipPosition.right} content={item.tooltip}>\n                  <KialiIcon.Info className={infoStyle} />\n                </Tooltip>\n              )}\n            </div>\n          ))}\n          <div className={titleStyle}>Show Badges</div>\n          {badgeOptions.map((item: DisplayOptionType) => (\n            <div key={item.id} style={{ display: 'inline-block' }}>\n              <label key={item.id} className={!!item.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}>\n                <Checkbox id={item.id} isChecked={item.isChecked} label={item.labelText} onChange={item.onChange} />\n              </label>\n              {!!item.tooltip && (\n                <Tooltip key={`tooltip_${item.id}`} position={TooltipPosition.right} content={item.tooltip}>\n                  <KialiIcon.Info className={infoStyle} />\n                </Tooltip>\n              )}\n            </div>\n          ))}\n        </div>\n      </BoundingClientAwareComponent>\n    );\n  }\n\n  private toggleEdgeLabelMode = (_, event) => {\n    const mode = event.target.value as EdgeLabelMode;\n    if (this.props.edgeLabels.includes(mode)) {\n      let newEdgeLabels;\n      switch (mode) {\n        case EdgeLabelMode.RESPONSE_TIME_GROUP:\n          newEdgeLabels = this.props.edgeLabels.filter(l => !isResponseTimeMode(l));\n          break;\n        case EdgeLabelMode.THROUGHPUT_GROUP:\n          newEdgeLabels = this.props.edgeLabels.filter(l => !isThroughputMode(l));\n          break;\n        default:\n          newEdgeLabels = this.props.edgeLabels.filter(l => l !== mode);\n      }\n      this.props.setEdgeLabels(newEdgeLabels);\n    } else {\n      switch (mode) {\n        case EdgeLabelMode.RESPONSE_TIME_GROUP:\n          this.props.setEdgeLabels([...this.props.edgeLabels, mode, EdgeLabelMode.RESPONSE_TIME_P95]);\n          break;\n        case EdgeLabelMode.THROUGHPUT_GROUP:\n          this.props.setEdgeLabels([...this.props.edgeLabels, mode, EdgeLabelMode.THROUGHPUT_REQUEST]);\n          break;\n        default:\n          this.props.setEdgeLabels([...this.props.edgeLabels, mode]);\n      }\n    }\n  };\n\n  private toggleEdgeLabelResponseTimeMode = (_, event) => {\n    const mode = event.target.value as EdgeLabelMode;\n    const newEdgeLabels = this.props.edgeLabels.filter(l => !isResponseTimeMode(l));\n    this.props.setEdgeLabels([...newEdgeLabels, EdgeLabelMode.RESPONSE_TIME_GROUP, mode]);\n  };\n\n  private toggleEdgeLabelThroughputMode = (_, event) => {\n    const mode = event.target.value as EdgeLabelMode;\n    const newEdgeLabels = this.props.edgeLabels.filter(l => !isThroughputMode(l));\n    this.props.setEdgeLabels([...newEdgeLabels, EdgeLabelMode.THROUGHPUT_GROUP, mode]);\n  };\n}\n\n// Allow Redux to map sections of our global app state to our props\nconst mapStateToProps = (state: KialiAppState) => ({\n  boxByCluster: state.graph.toolbarState.boxByCluster,\n  boxByNamespace: state.graph.toolbarState.boxByNamespace,\n  compressOnHide: state.graph.toolbarState.compressOnHide,\n  edgeLabels: edgeLabelsSelector(state),\n  showIdleEdges: state.graph.toolbarState.showIdleEdges,\n  showIdleNodes: state.graph.toolbarState.showIdleNodes,\n  showMissingSidecars: state.graph.toolbarState.showMissingSidecars,\n  showOperationNodes: state.graph.toolbarState.showOperationNodes,\n  showSecurity: state.graph.toolbarState.showSecurity,\n  showServiceNodes: state.graph.toolbarState.showServiceNodes,\n  showTrafficAnimation: state.graph.toolbarState.showTrafficAnimation,\n  showVirtualServices: state.graph.toolbarState.showVirtualServices\n});\n\n// Map our actions to Redux\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    toggleBoxByCluster: bindActionCreators(GraphToolbarActions.toggleBoxByCluster, dispatch),\n    toggleBoxByNamespace: bindActionCreators(GraphToolbarActions.toggleBoxByNamespace, dispatch),\n    toggleCompressOnHide: bindActionCreators(GraphToolbarActions.toggleCompressOnHide, dispatch),\n    toggleGraphMissingSidecars: bindActionCreators(GraphToolbarActions.toggleGraphMissingSidecars, dispatch),\n    toggleGraphSecurity: bindActionCreators(GraphToolbarActions.toggleGraphSecurity, dispatch),\n    toggleGraphVirtualServices: bindActionCreators(GraphToolbarActions.toggleGraphVirtualServices, dispatch),\n    toggleIdleEdges: bindActionCreators(GraphToolbarActions.toggleIdleEdges, dispatch),\n    toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch),\n    toggleOperationNodes: bindActionCreators(GraphToolbarActions.toggleOperationNodes, dispatch),\n    toggleServiceNodes: bindActionCreators(GraphToolbarActions.toggleServiceNodes, dispatch),\n    toggleTrafficAnimation: bindActionCreators(GraphToolbarActions.toggleTrafficAnimation, dispatch)\n  };\n};\n\n// hook up to Redux for our State to be mapped to props\nconst GraphSettingsContainer = connect(mapStateToProps, mapDispatchToProps)(GraphSettings);\nexport default GraphSettingsContainer;\n"]},"metadata":{},"sourceType":"module"}
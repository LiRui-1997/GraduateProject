{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/MessageCenter/MessageCenterTrigger.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Badge, Button, ButtonVariant } from '@patternfly/react-core';\nimport { MessageType } from '../../types/MessageCenter';\nimport MessageCenterThunkActions from '../../actions/MessageCenterThunkActions';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { style } from 'typestyle';\nexport var MessageCenterTrigger = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MessageCenterTrigger, _React$PureComponent);\n\n  var _super = _createSuper(MessageCenterTrigger);\n\n  function MessageCenterTrigger() {\n    var _this;\n\n    _classCallCheck(this, MessageCenterTrigger);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderSystemErrorBadge = function () {\n      if (_this.props.systemErrorsCount === 0) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Button, {\n        id: 'icon_warning',\n        \"aria-label\": 'SystemError',\n        onClick: _this.props.toggleSystemErrorsCenter,\n        variant: ButtonVariant.plain,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }), _this.props.systemErrorsCount, _this.props.systemErrorsCount === 1 ? ' Open Issue' : ' Open Issues');\n    };\n\n    _this.renderMessageCenterBadge = function () {\n      var bell = style({\n        position: 'relative',\n        right: '5px',\n        top: '2px'\n      });\n      return /*#__PURE__*/React.createElement(Button, {\n        id: 'bell_icon_warning',\n        \"aria-label\": 'Notifications',\n        onClick: _this.props.toggleMessageCenter,\n        variant: ButtonVariant.plain,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Bell, {\n        className: bell,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }), _this.props.newMessagesCount > 0 && /*#__PURE__*/React.createElement(Badge, {\n        className: 'pf-badge-bordered' + (_this.props.badgeDanger ? ' badge-danger' : ''),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }, _this.props.newMessagesCount > 0 ? _this.props.newMessagesCount : ' '));\n    };\n\n    return _this;\n  }\n\n  _createClass(MessageCenterTrigger, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderSystemErrorBadge(), this.renderMessageCenterBadge());\n    }\n  }]);\n\n  return MessageCenterTrigger;\n}(React.PureComponent);\n\nvar mapStateToPropsMessageCenterTrigger = function mapStateToPropsMessageCenterTrigger(state) {\n  var dangerousMessageTypes = [MessageType.ERROR, MessageType.WARNING];\n  var systemErrorsCount = 0;\n  var systemErrorsGroup = state.messageCenter.groups.find(function (item) {\n    return item.id === 'systemErrors';\n  });\n\n  if (systemErrorsGroup) {\n    systemErrorsCount = systemErrorsGroup.messages.length;\n  }\n\n  return state.messageCenter.groups.reduce(function (unreadMessages, group) {\n    return unreadMessages.concat(group.messages.reduce(function (unreadMessagesInGroup, message) {\n      if (!message.seen) {\n        unreadMessagesInGroup.push(message);\n      }\n\n      return unreadMessagesInGroup;\n    }, []));\n  }, []).reduce(function (propsToMap, message) {\n    propsToMap.newMessagesCount++;\n    propsToMap.badgeDanger = propsToMap.badgeDanger || dangerousMessageTypes.includes(message.type);\n    return propsToMap;\n  }, {\n    newMessagesCount: 0,\n    systemErrorsCount: systemErrorsCount,\n    badgeDanger: false\n  });\n};\n\nvar mapDispatchToPropsMessageCenterTrigger = function mapDispatchToPropsMessageCenterTrigger(dispatch) {\n  return {\n    toggleMessageCenter: function toggleMessageCenter() {\n      return dispatch(MessageCenterThunkActions.toggleMessageCenter());\n    },\n    toggleSystemErrorsCenter: function toggleSystemErrorsCenter() {\n      return dispatch(MessageCenterThunkActions.toggleSystemErrorsCenter());\n    }\n  };\n};\n\nvar MessageCenterTriggerContainer = connect(mapStateToPropsMessageCenterTrigger, mapDispatchToPropsMessageCenterTrigger)(MessageCenterTrigger);\nexport default MessageCenterTriggerContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/components/MessageCenter/MessageCenterTrigger.tsx"],"names":["React","connect","Badge","Button","ButtonVariant","MessageType","MessageCenterThunkActions","KialiIcon","style","MessageCenterTrigger","renderSystemErrorBadge","props","systemErrorsCount","toggleSystemErrorsCenter","plain","renderMessageCenterBadge","bell","position","right","top","toggleMessageCenter","newMessagesCount","badgeDanger","PureComponent","mapStateToPropsMessageCenterTrigger","state","dangerousMessageTypes","ERROR","WARNING","systemErrorsGroup","messageCenter","groups","find","item","id","messages","length","reduce","unreadMessages","group","concat","unreadMessagesInGroup","message","seen","push","propsToMap","includes","type","mapDispatchToPropsMessageCenterTrigger","dispatch","MessageCenterTriggerContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { connect } from 'react-redux';\nimport { Badge, Button, ButtonVariant } from '@patternfly/react-core';\nimport { KialiAppState } from '../../store/Store';\nimport { MessageType, NotificationGroup, NotificationMessage } from '../../types/MessageCenter';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport MessageCenterThunkActions from '../../actions/MessageCenterThunkActions';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { style } from 'typestyle';\n\ntype PropsType = {\n  newMessagesCount: number;\n  systemErrorsCount: number;\n  badgeDanger: boolean;\n  toggleMessageCenter: () => void;\n  toggleSystemErrorsCenter: () => void;\n};\n\nexport class MessageCenterTrigger extends React.PureComponent<PropsType, {}> {\n  render() {\n    return (\n      <>\n        {this.renderSystemErrorBadge()}\n        {this.renderMessageCenterBadge()}\n      </>\n    );\n  }\n\n  private renderSystemErrorBadge = () => {\n    if (this.props.systemErrorsCount === 0) {\n      return null;\n    }\n\n    return (\n      <Button\n        id={'icon_warning'}\n        aria-label={'SystemError'}\n        onClick={this.props.toggleSystemErrorsCenter}\n        variant={ButtonVariant.plain}\n      >\n        <KialiIcon.Warning />\n        {this.props.systemErrorsCount}\n        {this.props.systemErrorsCount === 1 ? ' Open Issue' : ' Open Issues'}\n      </Button>\n    );\n  };\n\n  private renderMessageCenterBadge = () => {\n    const bell = style({\n      position: 'relative',\n      right: '5px',\n      top: '2px'\n    });\n\n    return (\n      <Button\n        id={'bell_icon_warning'}\n        aria-label={'Notifications'}\n        onClick={this.props.toggleMessageCenter}\n        variant={ButtonVariant.plain}\n      >\n        <KialiIcon.Bell className={bell} />\n        {this.props.newMessagesCount > 0 && (\n          <Badge className={'pf-badge-bordered' + (this.props.badgeDanger ? ' badge-danger' : '')}>\n            {this.props.newMessagesCount > 0 ? this.props.newMessagesCount : ' '}\n          </Badge>\n        )}\n      </Button>\n    );\n  };\n}\n\nconst mapStateToPropsMessageCenterTrigger = (state: KialiAppState) => {\n  type MessageCenterTriggerPropsToMap = {\n    newMessagesCount: number;\n    badgeDanger: boolean;\n    systemErrorsCount: number;\n  };\n\n  const dangerousMessageTypes = [MessageType.ERROR, MessageType.WARNING];\n  let systemErrorsCount = 0;\n\n  const systemErrorsGroup = state.messageCenter.groups.find(item => item.id === 'systemErrors');\n  if (systemErrorsGroup) {\n    systemErrorsCount = systemErrorsGroup.messages.length;\n  }\n\n  return state.messageCenter.groups\n    .reduce((unreadMessages: NotificationMessage[], group: NotificationGroup) => {\n      return unreadMessages.concat(\n        group.messages.reduce((unreadMessagesInGroup: NotificationMessage[], message: NotificationMessage) => {\n          if (!message.seen) {\n            unreadMessagesInGroup.push(message);\n          }\n          return unreadMessagesInGroup;\n        }, [])\n      );\n    }, [])\n    .reduce(\n      (propsToMap: MessageCenterTriggerPropsToMap, message: NotificationMessage) => {\n        propsToMap.newMessagesCount++;\n        propsToMap.badgeDanger = propsToMap.badgeDanger || dangerousMessageTypes.includes(message.type);\n        return propsToMap;\n      },\n      { newMessagesCount: 0, systemErrorsCount: systemErrorsCount, badgeDanger: false }\n    );\n};\n\nconst mapDispatchToPropsMessageCenterTrigger = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    toggleMessageCenter: () => dispatch(MessageCenterThunkActions.toggleMessageCenter()),\n    toggleSystemErrorsCenter: () => dispatch(MessageCenterThunkActions.toggleSystemErrorsCenter())\n  };\n};\n\nconst MessageCenterTriggerContainer = connect(\n  mapStateToPropsMessageCenterTrigger,\n  mapDispatchToPropsMessageCenterTrigger\n)(MessageCenterTrigger);\nexport default MessageCenterTriggerContainer;\n"]},"metadata":{},"sourceType":"module"}
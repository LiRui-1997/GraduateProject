{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/ServiceDetails/ServiceNetwork.tsx\";\nimport * as React from 'react';\nimport { Card, CardBody, CardHeader, Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport ValidationList from '../../components/Validations/ValidationList';\nimport { KialiIcon } from '../../config/KialiIcon';\nvar resourceListStyle = style({\n  margin: '0px 0 11px 0',\n  $nest: {\n    '& > ul > li > span': {\n      float: 'left',\n      width: '125px',\n      fontWeight: 700\n    }\n  }\n});\nvar infoStyle = style({\n  margin: '0px 0px 2px 10px',\n  verticalAlign: '-3px !important'\n});\n\nvar ServiceNetwork = /*#__PURE__*/function (_React$Component) {\n  _inherits(ServiceNetwork, _React$Component);\n\n  var _super = _createSuper(ServiceNetwork);\n\n  function ServiceNetwork() {\n    _classCallCheck(this, ServiceNetwork);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ServiceNetwork, [{\n    key: \"getPortOver\",\n    value: function getPortOver(portId) {\n      return /*#__PURE__*/React.createElement(ValidationList, {\n        checks: this.getPortChecks(portId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"getPortChecks\",\n    value: function getPortChecks(portId) {\n      return this.props.validations ? this.props.validations.checks.filter(function (c) {\n        return c.path === 'spec/ports[' + portId + ']';\n      }) : [];\n    }\n  }, {\n    key: \"hasIssue\",\n    value: function hasIssue(portId) {\n      return this.getPortChecks(portId).length > 0;\n    }\n  }, {\n    key: \"getHostnames\",\n    value: function getHostnames(virtualServices) {\n      var _this = this;\n\n      var hostnames = [];\n      virtualServices.forEach(function (vs) {\n        var _vs$spec$hosts;\n\n        (_vs$spec$hosts = vs.spec.hosts) === null || _vs$spec$hosts === void 0 ? void 0 : _vs$spec$hosts.forEach(function (host) {\n          if (host === '*') {\n            var _vs$spec$gateways;\n\n            (_vs$spec$gateways = vs.spec.gateways) === null || _vs$spec$gateways === void 0 ? void 0 : _vs$spec$gateways.forEach(function (vsGatewayName) {\n              var vsGateways = _this.props.gateways.filter(function (gateway) {\n                return gateway.metadata.name === vsGatewayName;\n              });\n\n              vsGateways.forEach(function (vsGateway) {\n                var _vsGateway$spec$serve;\n\n                (_vsGateway$spec$serve = vsGateway.spec.servers) === null || _vsGateway$spec$serve === void 0 ? void 0 : _vsGateway$spec$serve.forEach(function (servers) {\n                  servers.hosts.forEach(function (host) {\n                    hostnames.push({\n                      hostname: host,\n                      fromType: vsGateway.kind,\n                      fromName: vsGateway.metadata.name\n                    });\n                  });\n                });\n              });\n            });\n          } else {\n            hostnames.push({\n              hostname: host,\n              fromType: vs.kind,\n              fromName: vs.metadata.name\n            });\n          }\n        });\n      }); // If there is a wildcard, then it will display only one, the first match\n\n      for (var _i = 0, _hostnames = hostnames; _i < _hostnames.length; _i++) {\n        var hostnameInfo = _hostnames[_i];\n\n        if (hostnameInfo.hostname === '*') {\n          return [hostnameInfo];\n        }\n      }\n\n      return hostnames;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Card, {\n        isCompact: true,\n        id: 'ServiceNetworkCard',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h3\",\n        size: \"2xl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, \"Network\")), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        key: \"network-list\",\n        className: resourceListStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          listStyleType: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, \"Type\"), this.props.serviceDetails.service.type), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, this.props.serviceDetails.service.type !== 'ExternalName' ? 'Service IP' : 'ExternalName'), this.props.serviceDetails.service.type !== 'ExternalName' ? this.props.serviceDetails.service.ip ? this.props.serviceDetails.service.ip : '' : this.props.serviceDetails.service.externalName ? this.props.serviceDetails.service.externalName : ''), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, \"Endpoints\"), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, (this.props.serviceDetails.endpoints || []).map(function (endpoint, i) {\n        return (endpoint.addresses || []).map(function (address, u) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: 'endpoint_' + i + '_address_' + u,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 23\n            }\n          }, address.name !== '' ? /*#__PURE__*/React.createElement(Tooltip, {\n            position: TooltipPosition.right,\n            content: /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                textAlign: 'left'\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 31\n              }\n            }, address.kind, \": \", address.name),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }\n          }, address.ip, \" \", /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 44\n            }\n          }))) : /*#__PURE__*/React.createElement(React.Fragment, null, address.name));\n        });\n      }))), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }\n      }, \"Ports\"), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, (this.props.serviceDetails.service.ports || []).map(function (port, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'port_' + i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            marginRight: '10px'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }\n        }, port.name, \" \", port.port, \"/\", port.protocol), _this2.hasIssue(i) ? _this2.getPortOver(i) : undefined);\n      }))), this.props.serviceDetails.virtualServices.items.length > 0 && /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }\n      }, \"Hostnames\"), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'inline-block',\n          width: '75%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 19\n        }\n      }, this.getHostnames(this.props.serviceDetails.virtualServices.items).map(function (hostname, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'hostname_' + i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Tooltip, {\n          position: TooltipPosition.right,\n          content: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              textAlign: 'left'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 31\n            }\n          }, hostname.fromType, \" \", hostname.fromName, \": \", hostname.hostname),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 31\n          }\n        }, hostname.hostname), /*#__PURE__*/React.createElement(\"span\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 31\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }\n        })))));\n      })))))));\n    }\n  }]);\n\n  return ServiceNetwork;\n}(React.Component);\n\nexport default ServiceNetwork;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/ServiceDetails/ServiceNetwork.tsx"],"names":["React","Card","CardBody","CardHeader","Title","Tooltip","TooltipPosition","style","ValidationList","KialiIcon","resourceListStyle","margin","$nest","float","width","fontWeight","infoStyle","verticalAlign","ServiceNetwork","portId","getPortChecks","props","validations","checks","filter","c","path","length","virtualServices","hostnames","forEach","vs","spec","hosts","host","gateways","vsGatewayName","vsGateways","gateway","metadata","name","vsGateway","servers","push","hostname","fromType","kind","fromName","hostnameInfo","listStyleType","serviceDetails","service","type","ip","externalName","display","endpoints","map","endpoint","i","addresses","address","u","right","textAlign","ports","port","marginRight","protocol","hasIssue","getPortOver","undefined","items","getHostnames","whiteSpace","overflow","textOverflow","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Card, CardBody, CardHeader, Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { ServiceDetailsInfo } from '../../types/ServiceInfo';\nimport { style } from 'typestyle';\nimport { Gateway, ObjectCheck, ObjectValidation, VirtualService } from '../../types/IstioObjects';\nimport ValidationList from '../../components/Validations/ValidationList';\nimport { KialiIcon } from '../../config/KialiIcon';\n\ntype Props = {\n  serviceDetails: ServiceDetailsInfo;\n  gateways: Gateway[];\n  validations?: ObjectValidation;\n};\n\ntype HostnameInfo = {\n  hostname: string;\n  fromType: string | undefined;\n  fromName: string | undefined;\n};\n\nconst resourceListStyle = style({\n  margin: '0px 0 11px 0',\n  $nest: {\n    '& > ul > li > span': {\n      float: 'left',\n      width: '125px',\n      fontWeight: 700\n    }\n  }\n});\n\nconst infoStyle = style({\n  margin: '0px 0px 2px 10px',\n  verticalAlign: '-3px !important'\n});\n\nclass ServiceNetwork extends React.Component<Props> {\n  getPortOver(portId: number) {\n    return <ValidationList checks={this.getPortChecks(portId)} />;\n  }\n\n  getPortChecks(portId: number): ObjectCheck[] {\n    return this.props.validations\n      ? this.props.validations.checks.filter(c => c.path === 'spec/ports[' + portId + ']')\n      : [];\n  }\n\n  hasIssue(portId: number): boolean {\n    return this.getPortChecks(portId).length > 0;\n  }\n\n  getHostnames(virtualServices: VirtualService[]): HostnameInfo[] {\n    var hostnames: HostnameInfo[] = [];\n\n    virtualServices.forEach(vs => {\n      vs.spec.hosts?.forEach(host => {\n        if (host === '*') {\n          vs.spec.gateways?.forEach(vsGatewayName => {\n            const vsGateways = this.props.gateways.filter(gateway => {\n              return gateway.metadata.name === vsGatewayName;\n            });\n\n            vsGateways.forEach(vsGateway => {\n              vsGateway.spec.servers?.forEach(servers => {\n                servers.hosts.forEach(host => {\n                  hostnames.push({ hostname: host, fromType: vsGateway.kind, fromName: vsGateway.metadata.name });\n                });\n              });\n            });\n          });\n        } else {\n          hostnames.push({ hostname: host, fromType: vs.kind, fromName: vs.metadata.name });\n        }\n      });\n    });\n\n    // If there is a wildcard, then it will display only one, the first match\n    for (var hostnameInfo of hostnames) {\n      if (hostnameInfo.hostname === '*') {\n        return [hostnameInfo];\n      }\n    }\n\n    return hostnames;\n  }\n\n  render() {\n    return (\n      <Card isCompact={true} id={'ServiceNetworkCard'}>\n        <CardHeader>\n          <Title headingLevel=\"h3\" size=\"2xl\">\n            Network\n          </Title>\n        </CardHeader>\n        <CardBody>\n          <div key=\"network-list\" className={resourceListStyle}>\n            <ul style={{ listStyleType: 'none' }}>\n              <li>\n                <span>Type</span>\n                {this.props.serviceDetails.service.type}\n              </li>\n              <li>\n                <span>{this.props.serviceDetails.service.type !== 'ExternalName' ? 'Service IP' : 'ExternalName'}</span>\n                {this.props.serviceDetails.service.type !== 'ExternalName'\n                  ? this.props.serviceDetails.service.ip\n                    ? this.props.serviceDetails.service.ip\n                    : ''\n                  : this.props.serviceDetails.service.externalName\n                  ? this.props.serviceDetails.service.externalName\n                  : ''}\n              </li>\n              <li>\n                <span>Endpoints</span>\n                <div style={{ display: 'inline-block' }}>\n                  {(this.props.serviceDetails.endpoints || []).map((endpoint, i) => {\n                    return (endpoint.addresses || []).map((address, u) => (\n                      <div key={'endpoint_' + i + '_address_' + u}>\n                        {address.name !== '' ? (\n                          <Tooltip\n                            position={TooltipPosition.right}\n                            content={\n                              <div style={{ textAlign: 'left' }}>\n                                {address.kind}: {address.name}\n                              </div>\n                            }\n                          >\n                            <span>\n                              {address.ip} <KialiIcon.Info className={infoStyle} />\n                            </span>\n                          </Tooltip>\n                        ) : (\n                          <>{address.name}</>\n                        )}\n                      </div>\n                    ));\n                  })}\n                </div>\n              </li>\n              <li>\n                <span>Ports</span>\n                <div style={{ display: 'inline-block' }}>\n                  {(this.props.serviceDetails.service.ports || []).map((port, i) => {\n                    return (\n                      <div key={'port_' + i}>\n                        <span style={{ marginRight: '10px' }}>\n                          {port.name} {port.port}/{port.protocol}\n                        </span>\n                        {this.hasIssue(i) ? this.getPortOver(i) : undefined}\n                      </div>\n                    );\n                  })}\n                </div>\n              </li>\n              {this.props.serviceDetails.virtualServices.items.length > 0 && (\n                <li>\n                  <span>Hostnames</span>\n                  <div\n                    style={{\n                      display: 'inline-block',\n                      width: '75%'\n                    }}\n                  >\n                    {this.getHostnames(this.props.serviceDetails.virtualServices.items).map((hostname, i) => {\n                      return (\n                        <div key={'hostname_' + i}>\n                          <Tooltip\n                            position={TooltipPosition.right}\n                            content={\n                              <div style={{ textAlign: 'left' }}>\n                                {hostname.fromType} {hostname.fromName}: {hostname.hostname}\n                              </div>\n                            }\n                          >\n                            <div style={{ display: 'flex' }}>\n                              <span\n                                style={{\n                                  whiteSpace: 'nowrap',\n                                  overflow: 'hidden',\n                                  textOverflow: 'ellipsis'\n                                }}\n                              >\n                                {hostname.hostname}\n                              </span>\n                              <span>\n                                <KialiIcon.Info className={infoStyle} />\n                              </span>\n                            </div>\n                          </Tooltip>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </li>\n              )}\n            </ul>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default ServiceNetwork;\n"]},"metadata":{},"sourceType":"module"}
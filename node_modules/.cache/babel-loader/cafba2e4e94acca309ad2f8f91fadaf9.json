{"ast":null,"code":"import _objectSpread from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createStore,applyMiddleware,compose}from'redux';import{persistStore,persistReducer}from'redux-persist';import{persistFilter}from'redux-persist-transform-filter';import{createTransform}from'redux-persist';import rootReducer from'../reducers';import thunk from'redux-thunk';// defaults to localStorage for web and AsyncStorage for react-native\nimport storage from'redux-persist/lib/storage';import{INITIAL_GLOBAL_STATE}from'../reducers/GlobalState';import{INITIAL_LOGIN_STATE}from'../reducers/LoginState';import{INITIAL_GRAPH_STATE}from'../reducers/GraphDataState';import{INITIAL_USER_SETTINGS_STATE}from'../reducers/UserSettingsState';import{INITIAL_MESSAGE_CENTER_STATE}from'../reducers/MessageCenter';import{INITIAL_STATUS_STATE}from'../reducers/HelpDropdownState';import{INITIAL_NAMESPACE_STATE}from'../reducers/NamespaceState';import{INITIAL_JAEGER_STATE}from'../reducers/JaegerState';import{INITIAL_MESH_TLS_STATE}from'../reducers/MeshTlsState';import{INITIAL_TOUR_STATE}from'../reducers/TourState';import{INITIAL_ISTIO_STATUS_STATE}from'../reducers/IstioStatusState';import{INITIAL_METRICS_STATS_STATE}from'../reducers/MetricsStatsState';import{INITIAL_ISTIO_CERTS_INFO_STATE}from'reducers/IstioCertsInfoState';var webRoot=window.WEB_ROOT?window.WEB_ROOT:undefined;var persistKey='kiali-'+(webRoot&&webRoot!=='/'?webRoot.substring(1):'root');// Needed to be able to whitelist fields but allowing to keep an initialState\nvar whitelistInputWithInitialState=function whitelistInputWithInitialState(reducerName,inboundPaths,initialState){return createTransform(function(inboundState){return persistFilter(inboundState,inboundPaths,'whitelist');},function(outboundState){return _objectSpread(_objectSpread({},initialState),outboundState);},{whitelist:[reducerName]});};var authenticationPersistFilter=whitelistInputWithInitialState('authentication',['landingRoute'],INITIAL_LOGIN_STATE);var namespacePersistFilter=whitelistInputWithInitialState('namespaces',['activeNamespaces'],INITIAL_NAMESPACE_STATE);var graphPersistFilter=whitelistInputWithInitialState('graph',['filterState','layout'],INITIAL_GRAPH_STATE);var userSettingsPersitFilter=whitelistInputWithInitialState('userSettings',['duration','refreshInterval','timeRange'],INITIAL_USER_SETTINGS_STATE);var persistConfig={key:persistKey,storage:storage,whitelist:['authentication','graph','jaegerState','namespaces','statusState','userSettings'],transforms:[authenticationPersistFilter,graphPersistFilter,namespacePersistFilter,userSettingsPersitFilter]};var composeEnhancers=process.env.NODE_ENV==='development'&&window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose;var configureStore=function configureStore(initialState){// configure middlewares\nvar middlewares=[thunk];// compose enhancers\nvar enhancer=composeEnhancers(applyMiddleware.apply(void 0,middlewares));// persist reducers\nvar persistentReducer=persistReducer(persistConfig,rootReducer);return createStore(persistentReducer,initialState,enhancer);};// Setup the initial state of the Redux store with defaults\n// (instead of having things be undefined until they are populated by query)\n// Redux 4.0 actually required this\nvar initialStore={globalState:INITIAL_GLOBAL_STATE,statusState:INITIAL_STATUS_STATE,namespaces:INITIAL_NAMESPACE_STATE,authentication:INITIAL_LOGIN_STATE,messageCenter:INITIAL_MESSAGE_CENTER_STATE,graph:INITIAL_GRAPH_STATE,userSettings:INITIAL_USER_SETTINGS_STATE,jaegerState:INITIAL_JAEGER_STATE,meshTLSStatus:INITIAL_MESH_TLS_STATE,metricsStats:INITIAL_METRICS_STATS_STATE,istioStatus:INITIAL_ISTIO_STATUS_STATE,istioCertsInfo:INITIAL_ISTIO_CERTS_INFO_STATE,tourState:INITIAL_TOUR_STATE};// pass an optional param to rehydrate state on app start\nexport var store=configureStore(initialStore);export var persistor=persistStore(store);","map":null,"metadata":{},"sourceType":"module"}
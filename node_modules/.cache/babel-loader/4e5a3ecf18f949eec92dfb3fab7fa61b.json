{"ast":null,"code":"import { getType } from 'typesafe-actions';\nimport { GraphActions } from '../actions/GraphActions';\nimport { GraphType, TrafficRate } from '../types/Graph';\nimport { GraphToolbarActions } from '../actions/GraphToolbarActions';\nimport { DagreGraph } from '../components/CytoscapeGraph/graphs/DagreGraph';\nimport { updateState } from '../utils/Reducer';\nexport var INITIAL_GRAPH_STATE = {\n  graphDefinition: null,\n  layout: DagreGraph.getLayout(),\n  node: undefined,\n  summaryData: null,\n  toolbarState: {\n    boxByCluster: false,\n    boxByNamespace: false,\n    compressOnHide: true,\n    edgeLabels: [],\n    findValue: '',\n    graphType: GraphType.VERSIONED_APP,\n    hideValue: '',\n    showFindHelp: false,\n    showIdleEdges: false,\n    showIdleNodes: false,\n    showLegend: false,\n    showMissingSidecars: true,\n    showOperationNodes: false,\n    showSecurity: false,\n    showServiceNodes: true,\n    showTrafficAnimation: false,\n    showVirtualServices: true,\n    trafficRates: [TrafficRate.GRPC_GROUP, TrafficRate.GRPC_REQUEST, TrafficRate.HTTP_GROUP, TrafficRate.HTTP_REQUEST, TrafficRate.TCP_GROUP, TrafficRate.TCP_SENT]\n  },\n  updateTime: 0\n}; // This Reducer allows changes to the 'graphDataState' portion of Redux Store\n\nvar graphDataState = function graphDataState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_GRAPH_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case getType(GraphActions.onNamespaceChange):\n      return updateState(state, {\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n\n    case getType(GraphActions.setGraphDefinition):\n      return updateState(state, {\n        graphDefinition: action.payload\n      });\n\n    case getType(GraphActions.setLayout):\n      return updateState(state, {\n        layout: action.payload\n      });\n\n    case getType(GraphActions.setNode):\n      return updateState(state, {\n        node: action.payload,\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on node change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n\n    case getType(GraphActions.setUpdateTime):\n      return updateState(state, {\n        updateTime: action.payload\n      });\n\n    case getType(GraphActions.updateSummary):\n      return updateState(state, {\n        summaryData: updateState(state.summaryData, {\n          summaryType: action.payload.summaryType,\n          summaryTarget: action.payload.summaryTarget\n        })\n      });\n    // Filter actions\n    //\n\n    case getType(GraphToolbarActions.setEdgeLabels):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          edgeLabels: action.payload\n        })\n      });\n\n    case getType(GraphToolbarActions.setFindValue):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          findValue: action.payload\n        })\n      });\n\n    case getType(GraphToolbarActions.setGraphType):\n      var isServiceGraph = action.payload === GraphType.SERVICE;\n      var showOperationNodes = isServiceGraph ? false : state.toolbarState.showOperationNodes;\n      var showServiceNodes = isServiceGraph ? false : state.toolbarState.showServiceNodes;\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          graphType: action.payload,\n          showOperationNodes: showOperationNodes,\n          showServiceNodes: showServiceNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n\n    case getType(GraphToolbarActions.setHideValue):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          hideValue: action.payload\n        })\n      });\n\n    case getType(GraphToolbarActions.setIdleNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleNodes: action.payload\n        })\n      });\n\n    case getType(GraphToolbarActions.setTrafficRates):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          trafficRates: action.payload\n        })\n      });\n\n    case getType(GraphToolbarActions.resetSettings):\n      return updateState(state, {\n        toolbarState: INITIAL_GRAPH_STATE.toolbarState\n      });\n\n    case getType(GraphToolbarActions.toggleBoxByCluster):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          boxByCluster: !state.toolbarState.boxByCluster\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleBoxByNamespace):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          boxByNamespace: !state.toolbarState.boxByNamespace\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleCompressOnHide):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          compressOnHide: !state.toolbarState.compressOnHide\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleFindHelp):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showFindHelp: !state.toolbarState.showFindHelp\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleGraphVirtualServices):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showVirtualServices: !state.toolbarState.showVirtualServices\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleGraphMissingSidecars):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showMissingSidecars: !state.toolbarState.showMissingSidecars\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleGraphSecurity):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showSecurity: !state.toolbarState.showSecurity\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleIdleEdges):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleEdges: !state.toolbarState.showIdleEdges\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleIdleNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleNodes: !state.toolbarState.showIdleNodes\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleLegend):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showLegend: !state.toolbarState.showLegend\n        })\n      });\n\n    case getType(GraphToolbarActions.toggleOperationNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showOperationNodes: !state.toolbarState.showOperationNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n\n    case getType(GraphToolbarActions.toggleServiceNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showServiceNodes: !state.toolbarState.showServiceNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n\n    case getType(GraphToolbarActions.toggleTrafficAnimation):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showTrafficAnimation: !state.toolbarState.showTrafficAnimation\n        })\n      });\n\n    default:\n      // Return unmodified state if there are no changes.\n      return state;\n  }\n};\n\nexport default graphDataState;","map":{"version":3,"sources":["/root/GraduateProject/src/reducers/GraphDataState.ts"],"names":["getType","GraphActions","GraphType","TrafficRate","GraphToolbarActions","DagreGraph","updateState","INITIAL_GRAPH_STATE","graphDefinition","layout","getLayout","node","undefined","summaryData","toolbarState","boxByCluster","boxByNamespace","compressOnHide","edgeLabels","findValue","graphType","VERSIONED_APP","hideValue","showFindHelp","showIdleEdges","showIdleNodes","showLegend","showMissingSidecars","showOperationNodes","showSecurity","showServiceNodes","showTrafficAnimation","showVirtualServices","trafficRates","GRPC_GROUP","GRPC_REQUEST","HTTP_GROUP","HTTP_REQUEST","TCP_GROUP","TCP_SENT","updateTime","graphDataState","state","action","type","onNamespaceChange","setGraphDefinition","payload","setLayout","setNode","setUpdateTime","updateSummary","summaryType","summaryTarget","setEdgeLabels","setFindValue","setGraphType","isServiceGraph","SERVICE","setHideValue","setIdleNodes","setTrafficRates","resetSettings","toggleBoxByCluster","toggleBoxByNamespace","toggleCompressOnHide","toggleFindHelp","toggleGraphVirtualServices","toggleGraphMissingSidecars","toggleGraphSecurity","toggleIdleEdges","toggleIdleNodes","toggleLegend","toggleOperationNodes","toggleServiceNodes","toggleTrafficAnimation"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAGA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,gBAAvC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,UAAT,QAA2B,gDAA3B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,IAAMC,mBAA+B,GAAG;AAC7CC,EAAAA,eAAe,EAAE,IAD4B;AAE7CC,EAAAA,MAAM,EAAEJ,UAAU,CAACK,SAAX,EAFqC;AAG7CC,EAAAA,IAAI,EAAEC,SAHuC;AAI7CC,EAAAA,WAAW,EAAE,IAJgC;AAK7CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,YAAY,EAAE,KADF;AAEZC,IAAAA,cAAc,EAAE,KAFJ;AAGZC,IAAAA,cAAc,EAAE,IAHJ;AAIZC,IAAAA,UAAU,EAAE,EAJA;AAKZC,IAAAA,SAAS,EAAE,EALC;AAMZC,IAAAA,SAAS,EAAElB,SAAS,CAACmB,aANT;AAOZC,IAAAA,SAAS,EAAE,EAPC;AAQZC,IAAAA,YAAY,EAAE,KARF;AASZC,IAAAA,aAAa,EAAE,KATH;AAUZC,IAAAA,aAAa,EAAE,KAVH;AAWZC,IAAAA,UAAU,EAAE,KAXA;AAYZC,IAAAA,mBAAmB,EAAE,IAZT;AAaZC,IAAAA,kBAAkB,EAAE,KAbR;AAcZC,IAAAA,YAAY,EAAE,KAdF;AAeZC,IAAAA,gBAAgB,EAAE,IAfN;AAgBZC,IAAAA,oBAAoB,EAAE,KAhBV;AAiBZC,IAAAA,mBAAmB,EAAE,IAjBT;AAkBZC,IAAAA,YAAY,EAAE,CACZ9B,WAAW,CAAC+B,UADA,EAEZ/B,WAAW,CAACgC,YAFA,EAGZhC,WAAW,CAACiC,UAHA,EAIZjC,WAAW,CAACkC,YAJA,EAKZlC,WAAW,CAACmC,SALA,EAMZnC,WAAW,CAACoC,QANA;AAlBF,GAL+B;AAgC7CC,EAAAA,UAAU,EAAE;AAhCiC,CAAxC,C,CAmCP;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAiF;AAAA,MAAhFC,KAAgF,uEAA5DnC,mBAA4D;AAAA,MAAvCoC,MAAuC;;AACtG,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK5C,OAAO,CAACC,YAAY,CAAC4C,iBAAd,CAAZ;AACE,aAAOvC,WAAW,CAACoC,KAAD,EAAQ;AACxB7B,QAAAA,WAAW,EAAEN,mBAAmB,CAACM;AADT,OAAR,CAAlB;;AAGF,SAAKb,OAAO,CAACC,YAAY,CAAC6C,kBAAd,CAAZ;AACE,aAAOxC,WAAW,CAACoC,KAAD,EAAQ;AAAElC,QAAAA,eAAe,EAAEmC,MAAM,CAACI;AAA1B,OAAR,CAAlB;;AACF,SAAK/C,OAAO,CAACC,YAAY,CAAC+C,SAAd,CAAZ;AACE,aAAO1C,WAAW,CAACoC,KAAD,EAAQ;AAAEjC,QAAAA,MAAM,EAAEkC,MAAM,CAACI;AAAjB,OAAR,CAAlB;;AACF,SAAK/C,OAAO,CAACC,YAAY,CAACgD,OAAd,CAAZ;AACE,aAAO3C,WAAW,CAACoC,KAAD,EAAQ;AACxB/B,QAAAA,IAAI,EAAEgC,MAAM,CAACI,OADW;AAExB;AACAlC,QAAAA,WAAW,EAAEN,mBAAmB,CAACM;AAHT,OAAR,CAAlB;;AAKF,SAAKb,OAAO,CAACC,YAAY,CAACiD,aAAd,CAAZ;AACE,aAAO5C,WAAW,CAACoC,KAAD,EAAQ;AACxBF,QAAAA,UAAU,EAAEG,MAAM,CAACI;AADK,OAAR,CAAlB;;AAGF,SAAK/C,OAAO,CAACC,YAAY,CAACkD,aAAd,CAAZ;AACE,aAAO7C,WAAW,CAACoC,KAAD,EAAQ;AACxB7B,QAAAA,WAAW,EAAEP,WAAW,CAACoC,KAAK,CAAC7B,WAAP,EAAoB;AAC1CuC,UAAAA,WAAW,EAAET,MAAM,CAACI,OAAP,CAAeK,WADc;AAE1CC,UAAAA,aAAa,EAAEV,MAAM,CAACI,OAAP,CAAeM;AAFY,SAApB;AADA,OAAR,CAAlB;AAMF;AACA;;AACA,SAAKrD,OAAO,CAACI,mBAAmB,CAACkD,aAArB,CAAZ;AACE,aAAOhD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CI,UAAAA,UAAU,EAAEyB,MAAM,CAACI;AADyB,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK/C,OAAO,CAACI,mBAAmB,CAACmD,YAArB,CAAZ;AACE,aAAOjD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CK,UAAAA,SAAS,EAAEwB,MAAM,CAACI;AAD0B,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK/C,OAAO,CAACI,mBAAmB,CAACoD,YAArB,CAAZ;AACE,UAAMC,cAAc,GAAGd,MAAM,CAACI,OAAP,KAAmB7C,SAAS,CAACwD,OAApD;AACA,UAAM9B,kBAAkB,GAAG6B,cAAc,GAAG,KAAH,GAAWf,KAAK,CAAC5B,YAAN,CAAmBc,kBAAvE;AACA,UAAME,gBAAgB,GAAG2B,cAAc,GAAG,KAAH,GAAWf,KAAK,CAAC5B,YAAN,CAAmBgB,gBAArE;AACA,aAAOxB,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CM,UAAAA,SAAS,EAAEuB,MAAM,CAACI,OAD0B;AAE5CnB,UAAAA,kBAAkB,EAAEA,kBAFwB;AAG5CE,UAAAA,gBAAgB,EAAEA;AAH0B,SAArB,CADD;AAMxB;AACAjB,QAAAA,WAAW,EAAEN,mBAAmB,CAACM;AAPT,OAAR,CAAlB;;AASF,SAAKb,OAAO,CAACI,mBAAmB,CAACuD,YAArB,CAAZ;AACE,aAAOrD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CQ,UAAAA,SAAS,EAAEqB,MAAM,CAACI;AAD0B,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK/C,OAAO,CAACI,mBAAmB,CAACwD,YAArB,CAAZ;AACE,aAAOtD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CW,UAAAA,aAAa,EAAEkB,MAAM,CAACI;AADsB,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK/C,OAAO,CAACI,mBAAmB,CAACyD,eAArB,CAAZ;AACE,aAAOvD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CmB,UAAAA,YAAY,EAAEU,MAAM,CAACI;AADuB,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK/C,OAAO,CAACI,mBAAmB,CAAC0D,aAArB,CAAZ;AACE,aAAOxD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAEP,mBAAmB,CAACO;AADV,OAAR,CAAlB;;AAGF,SAAKd,OAAO,CAACI,mBAAmB,CAAC2D,kBAArB,CAAZ;AACE,aAAOzD,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CC,UAAAA,YAAY,EAAE,CAAC2B,KAAK,CAAC5B,YAAN,CAAmBC;AADU,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKf,OAAO,CAACI,mBAAmB,CAAC4D,oBAArB,CAAZ;AACE,aAAO1D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CE,UAAAA,cAAc,EAAE,CAAC0B,KAAK,CAAC5B,YAAN,CAAmBE;AADQ,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKhB,OAAO,CAACI,mBAAmB,CAAC6D,oBAArB,CAAZ;AACE,aAAO3D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CG,UAAAA,cAAc,EAAE,CAACyB,KAAK,CAAC5B,YAAN,CAAmBG;AADQ,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKjB,OAAO,CAACI,mBAAmB,CAAC8D,cAArB,CAAZ;AACE,aAAO5D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CS,UAAAA,YAAY,EAAE,CAACmB,KAAK,CAAC5B,YAAN,CAAmBS;AADU,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKvB,OAAO,CAACI,mBAAmB,CAAC+D,0BAArB,CAAZ;AACE,aAAO7D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CkB,UAAAA,mBAAmB,EAAE,CAACU,KAAK,CAAC5B,YAAN,CAAmBkB;AADG,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKhC,OAAO,CAACI,mBAAmB,CAACgE,0BAArB,CAAZ;AACE,aAAO9D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5Ca,UAAAA,mBAAmB,EAAE,CAACe,KAAK,CAAC5B,YAAN,CAAmBa;AADG,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK3B,OAAO,CAACI,mBAAmB,CAACiE,mBAArB,CAAZ;AACE,aAAO/D,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5Ce,UAAAA,YAAY,EAAE,CAACa,KAAK,CAAC5B,YAAN,CAAmBe;AADU,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK7B,OAAO,CAACI,mBAAmB,CAACkE,eAArB,CAAZ;AACE,aAAOhE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CU,UAAAA,aAAa,EAAE,CAACkB,KAAK,CAAC5B,YAAN,CAAmBU;AADS,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKxB,OAAO,CAACI,mBAAmB,CAACmE,eAArB,CAAZ;AACE,aAAOjE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CW,UAAAA,aAAa,EAAE,CAACiB,KAAK,CAAC5B,YAAN,CAAmBW;AADS,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAKzB,OAAO,CAACI,mBAAmB,CAACoE,YAArB,CAAZ;AACE,aAAOlE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CY,UAAAA,UAAU,EAAE,CAACgB,KAAK,CAAC5B,YAAN,CAAmBY;AADY,SAArB;AADD,OAAR,CAAlB;;AAKF,SAAK1B,OAAO,CAACI,mBAAmB,CAACqE,oBAArB,CAAZ;AACE,aAAOnE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5Cc,UAAAA,kBAAkB,EAAE,CAACc,KAAK,CAAC5B,YAAN,CAAmBc;AADI,SAArB,CADD;AAIxB;AACAf,QAAAA,WAAW,EAAEN,mBAAmB,CAACM;AALT,OAAR,CAAlB;;AAOF,SAAKb,OAAO,CAACI,mBAAmB,CAACsE,kBAArB,CAAZ;AACE,aAAOpE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CgB,UAAAA,gBAAgB,EAAE,CAACY,KAAK,CAAC5B,YAAN,CAAmBgB;AADM,SAArB,CADD;AAIxB;AACAjB,QAAAA,WAAW,EAAEN,mBAAmB,CAACM;AALT,OAAR,CAAlB;;AAOF,SAAKb,OAAO,CAACI,mBAAmB,CAACuE,sBAArB,CAAZ;AACE,aAAOrE,WAAW,CAACoC,KAAD,EAAQ;AACxB5B,QAAAA,YAAY,EAAER,WAAW,CAACoC,KAAK,CAAC5B,YAAP,EAAqB;AAC5CiB,UAAAA,oBAAoB,EAAE,CAACW,KAAK,CAAC5B,YAAN,CAAmBiB;AADE,SAArB;AADD,OAAR,CAAlB;;AAKF;AACE;AACA,aAAOW,KAAP;AA/JJ;AAiKD,CAlKD;;AAoKA,eAAeD,cAAf","sourcesContent":["import { getType } from 'typesafe-actions';\nimport { GraphActions } from '../actions/GraphActions';\nimport { KialiAppAction } from '../actions/KialiAppAction';\nimport { GraphState } from '../store/Store';\nimport { GraphType, TrafficRate } from '../types/Graph';\nimport { GraphToolbarActions } from '../actions/GraphToolbarActions';\nimport { DagreGraph } from '../components/CytoscapeGraph/graphs/DagreGraph';\nimport { updateState } from '../utils/Reducer';\n\nexport const INITIAL_GRAPH_STATE: GraphState = {\n  graphDefinition: null,\n  layout: DagreGraph.getLayout(),\n  node: undefined,\n  summaryData: null,\n  toolbarState: {\n    boxByCluster: false,\n    boxByNamespace: false,\n    compressOnHide: true,\n    edgeLabels: [],\n    findValue: '',\n    graphType: GraphType.VERSIONED_APP,\n    hideValue: '',\n    showFindHelp: false,\n    showIdleEdges: false,\n    showIdleNodes: false,\n    showLegend: false,\n    showMissingSidecars: true,\n    showOperationNodes: false,\n    showSecurity: false,\n    showServiceNodes: true,\n    showTrafficAnimation: false,\n    showVirtualServices: true,\n    trafficRates: [\n      TrafficRate.GRPC_GROUP,\n      TrafficRate.GRPC_REQUEST,\n      TrafficRate.HTTP_GROUP,\n      TrafficRate.HTTP_REQUEST,\n      TrafficRate.TCP_GROUP,\n      TrafficRate.TCP_SENT\n    ]\n  },\n  updateTime: 0\n};\n\n// This Reducer allows changes to the 'graphDataState' portion of Redux Store\nconst graphDataState = (state: GraphState = INITIAL_GRAPH_STATE, action: KialiAppAction): GraphState => {\n  switch (action.type) {\n    case getType(GraphActions.onNamespaceChange):\n      return updateState(state, {\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n    case getType(GraphActions.setGraphDefinition):\n      return updateState(state, { graphDefinition: action.payload });\n    case getType(GraphActions.setLayout):\n      return updateState(state, { layout: action.payload });\n    case getType(GraphActions.setNode):\n      return updateState(state, {\n        node: action.payload,\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on node change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n    case getType(GraphActions.setUpdateTime):\n      return updateState(state, {\n        updateTime: action.payload\n      });\n    case getType(GraphActions.updateSummary):\n      return updateState(state, {\n        summaryData: updateState(state.summaryData, {\n          summaryType: action.payload.summaryType,\n          summaryTarget: action.payload.summaryTarget\n        })\n      });\n    // Filter actions\n    //\n    case getType(GraphToolbarActions.setEdgeLabels):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          edgeLabels: action.payload\n        })\n      });\n    case getType(GraphToolbarActions.setFindValue):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          findValue: action.payload\n        })\n      });\n    case getType(GraphToolbarActions.setGraphType):\n      const isServiceGraph = action.payload === GraphType.SERVICE;\n      const showOperationNodes = isServiceGraph ? false : state.toolbarState.showOperationNodes;\n      const showServiceNodes = isServiceGraph ? false : state.toolbarState.showServiceNodes;\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          graphType: action.payload,\n          showOperationNodes: showOperationNodes,\n          showServiceNodes: showServiceNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n    case getType(GraphToolbarActions.setHideValue):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          hideValue: action.payload\n        })\n      });\n    case getType(GraphToolbarActions.setIdleNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleNodes: action.payload\n        })\n      });\n    case getType(GraphToolbarActions.setTrafficRates):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          trafficRates: action.payload\n        })\n      });\n    case getType(GraphToolbarActions.resetSettings):\n      return updateState(state, {\n        toolbarState: INITIAL_GRAPH_STATE.toolbarState\n      });\n    case getType(GraphToolbarActions.toggleBoxByCluster):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          boxByCluster: !state.toolbarState.boxByCluster\n        })\n      });\n    case getType(GraphToolbarActions.toggleBoxByNamespace):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          boxByNamespace: !state.toolbarState.boxByNamespace\n        })\n      });\n    case getType(GraphToolbarActions.toggleCompressOnHide):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          compressOnHide: !state.toolbarState.compressOnHide\n        })\n      });\n    case getType(GraphToolbarActions.toggleFindHelp):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showFindHelp: !state.toolbarState.showFindHelp\n        })\n      });\n    case getType(GraphToolbarActions.toggleGraphVirtualServices):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showVirtualServices: !state.toolbarState.showVirtualServices\n        })\n      });\n    case getType(GraphToolbarActions.toggleGraphMissingSidecars):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showMissingSidecars: !state.toolbarState.showMissingSidecars\n        })\n      });\n    case getType(GraphToolbarActions.toggleGraphSecurity):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showSecurity: !state.toolbarState.showSecurity\n        })\n      });\n    case getType(GraphToolbarActions.toggleIdleEdges):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleEdges: !state.toolbarState.showIdleEdges\n        })\n      });\n    case getType(GraphToolbarActions.toggleIdleNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showIdleNodes: !state.toolbarState.showIdleNodes\n        })\n      });\n    case getType(GraphToolbarActions.toggleLegend):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showLegend: !state.toolbarState.showLegend\n        })\n      });\n    case getType(GraphToolbarActions.toggleOperationNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showOperationNodes: !state.toolbarState.showOperationNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n    case getType(GraphToolbarActions.toggleServiceNodes):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showServiceNodes: !state.toolbarState.showServiceNodes\n        }),\n        // TODO: This should be handled in GraphPage.ComponentDidUpdate (Init graph on type change)\n        summaryData: INITIAL_GRAPH_STATE.summaryData\n      });\n    case getType(GraphToolbarActions.toggleTrafficAnimation):\n      return updateState(state, {\n        toolbarState: updateState(state.toolbarState, {\n          showTrafficAnimation: !state.toolbarState.showTrafficAnimation\n        })\n      });\n    default:\n      // Return unmodified state if there are no changes.\n      return state;\n  }\n};\n\nexport default graphDataState;\n"]},"metadata":{},"sourceType":"module"}
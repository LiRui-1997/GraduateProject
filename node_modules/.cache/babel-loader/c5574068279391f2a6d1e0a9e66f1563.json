{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentDetailsPage.tsx\";\nimport * as React from 'react';\nimport ParameterizedTabs, { activeTab } from '../../../../components/Tab/Tabs';\nimport { RenderHeader } from '../../../../components/Nav/Page';\nimport { Tab } from '@patternfly/react-core';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport { emptyExperimentDetailsInfo } from '../../../../types/Iter8';\nimport Iter8Dropdown from './Iter8Dropdown';\nimport history from '../../../../app/History';\nimport { connect } from 'react-redux';\nimport ExperimentInfoDescription from './ExperimentInfoDescription';\nimport CriteriaInfoDescription from './CriteriaInfoDescription';\nimport AssessmentInfoDescription from './AssessmentInfoDescription';\nimport { durationSelector } from '../../../../store/Selectors';\nimport RefreshContainer from '../../../../components/Refresh/Refresh';\nvar tabName = 'tab';\nvar defaultTab = 'overview';\nvar tabIndex = {\n  info: 0,\n  assessment: 1,\n  criteria: 2\n};\n\nvar ExperimentDetailsPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentDetailsPage, _React$Component);\n\n  var _super = _createSuper(ExperimentDetailsPage);\n\n  function ExperimentDetailsPage(props) {\n    var _urlParams$get;\n\n    var _this;\n\n    _classCallCheck(this, ExperimentDetailsPage);\n\n    _this = _super.call(this, props);\n\n    _this.initTrafficSplit = function (experiment) {\n      if (_this.state.manualOverride.length !== 0) {\n        return _this.state.manualOverride;\n      } else {\n        var trafficSplit = [];\n        trafficSplit.push({\n          name: experiment.experimentItem.baseline.name,\n          weight: 0,\n          maxWeight: 100,\n          locked: false,\n          mirrored: false\n        });\n        experiment.experimentItem.candidates.forEach(function (c) {\n          trafficSplit.push({\n            name: c.name,\n            weight: 0,\n            maxWeight: 100,\n            locked: false,\n            mirrored: false\n          });\n        });\n        return trafficSplit;\n      }\n    };\n\n    _this.fetchExperiment = function () {\n      var namespace = _this.props.match.params.namespace;\n      var name = _this.props.match.params.name;\n      API.getIter8Info().then(function (result) {\n        var iter8Info = result.data;\n\n        if (iter8Info.enabled) {\n          API.getExperiment(namespace, name).then(function (result) {\n            var manualOverride = _this.initTrafficSplit(result.data);\n\n            if (_this.state.resetActionFlag) {\n              _this.setState({\n                iter8Info: iter8Info,\n                actionTaken: '',\n                experiment: result.data,\n                canDelete: result.data.permissions.delete,\n                resetActionFlag: false,\n                manualOverride: manualOverride,\n                lastRefreshAt: Date.now()\n              });\n            } else {\n              _this.setState({\n                experiment: result.data,\n                canDelete: result.data.permissions.delete,\n                resetActionFlag: true,\n                manualOverride: manualOverride,\n                lastRefreshAt: Date.now()\n              });\n            }\n          }).catch(function (error) {\n            AlertUtils.addError('Could not fetch Iter8 Experiment', error);\n          });\n        } else {\n          AlertUtils.addError('Kiali has Iter8 extension enabled but it is not detected in the cluster');\n        }\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch Iter8 Info.', error);\n      });\n    };\n\n    _this.backToList = function () {\n      // Back to list page\n      history.push(\"/extensions/iter8?namespaces=\".concat(_this.props.match.params.namespace));\n    };\n\n    _this.doRefresh = function () {\n      _this.fetchExperiment();\n    };\n\n    _this.doDelete = function () {\n      API.deleteExperiment(_this.props.match.params.namespace, _this.props.match.params.name).then(function () {\n        return _this.backToList();\n      }).catch(function (error) {\n        AlertUtils.addError('Could not delete Iter8 Experiment.', error);\n      });\n    };\n\n    _this.doTrafficSplit = function (manualOverride) {\n      _this.setState(function (_) {\n        return {\n          manualOverride: manualOverride\n        };\n      });\n    };\n\n    _this.doIter8Action = function (requestAction) {\n      var errMsg = 'Could not' + requestAction + ' Iter8 Experiment';\n      var action = {\n        action: requestAction,\n        trafficSplit: []\n      };\n\n      if (requestAction === 'terminate') {\n        var newrafficSplit = new Map();\n\n        _this.state.manualOverride.forEach(function (w, _) {\n          newrafficSplit.set(w.name, String(w.weight));\n        });\n\n        action.trafficSplit = Array.from(newrafficSplit);\n      }\n\n      _this.setState({\n        actionTaken: requestAction\n      });\n\n      API.updateExperiment(_this.props.match.params.namespace, _this.props.match.params.name, JSON.stringify(action)).then(function () {\n        return _this.doRefresh();\n      }).catch(function (error) {\n        _this.setState({\n          actionTaken: ''\n        });\n\n        AlertUtils.addError(errMsg, error);\n      });\n    };\n\n    _this.renderRightToolbar = function () {\n      return /*#__PURE__*/React.createElement(Iter8Dropdown, {\n        experimentName: _this.props.match.params.name,\n        manualOverride: _this.state.manualOverride,\n        canDelete: _this.state.canDelete,\n        startTime: _this.state.experiment ? _this.state.experiment.experimentItem.startTime : '',\n        endTime: _this.state.experiment ? _this.state.experiment.experimentItem.endTime : '',\n        phase: _this.state.experiment ? _this.state.experiment.experimentItem.phase : ' ',\n        onDelete: _this.doDelete,\n        onResume: function onResume() {\n          return _this.doIter8Action('resume');\n        },\n        onPause: function onPause() {\n          return _this.doIter8Action('pause');\n        },\n        onTerminate: function onTerminate() {\n          return _this.doIter8Action('terminate');\n        },\n        doTrafficSplit: _this.doTrafficSplit,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 7\n        }\n      });\n    };\n\n    var urlParams = new URLSearchParams(history.location.search);\n    var baseline = urlParams.get('baseline') || '';\n    var candidates = ((_urlParams$get = urlParams.get('candidates')) === null || _urlParams$get === void 0 ? void 0 : _urlParams$get.split(',')) || [];\n\n    var _trafficSplit = new Map();\n\n    _trafficSplit.set(baseline, 0);\n\n    candidates.forEach(function (c) {\n      _trafficSplit.set(c, 0);\n    });\n    _this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        analyticsImgVersion: '',\n        controllerImgVersion: '',\n        namespace: 'iter8'\n      },\n      experiment: emptyExperimentDetailsInfo,\n      canDelete: false,\n      currentTab: activeTab(tabName, defaultTab),\n      target: urlParams.get('target') || '',\n      baseline: baseline,\n      actionTaken: '',\n      resetActionFlag: false,\n      manualOverride: [],\n      lastRefreshAt: Date.now()\n    };\n    return _this;\n  }\n\n  _createClass(ExperimentDetailsPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchExperiment();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.state.currentTab !== activeTab(tabName, defaultTab) || prevProps.lastRefreshAt !== this.props.lastRefreshAt) {\n        this.setState({\n          currentTab: activeTab(tabName, defaultTab)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var overviewTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 0,\n        title: \"Overview\",\n        key: \"Overview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ExperimentInfoDescription, {\n        namespace: this.props.match.params.namespace,\n        experiment: this.props.match.params.name,\n        target: this.state.target,\n        experimentDetails: this.state.experiment,\n        actionTaken: this.state.actionTaken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }\n      }));\n      var metricProgressInfo = new Map(); //= new Array(this.state.experiment.criterias.length);\n\n      var _iterator = _createForOfIteratorHelper(this.state.experiment.criterias),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          metricProgressInfo.set(c.name, {\n            name: c.name,\n            threshold: c.criteria.tolerance,\n            thresholdType: c.criteria.toleranceType,\n            preferred_direction: c.metric.preferred_direction,\n            isReward: c.criteria.isReward,\n            unit: c.metric.numerator.unit\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var assessmentTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 1,\n        title: \"Assessment\",\n        key: \"Assessment\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(AssessmentInfoDescription, {\n        lastRefreshAt: this.state.lastRefreshAt,\n        iter8Info: this.state.iter8Info,\n        name: this.props.match.params.name,\n        namespace: this.props.match.params.namespace,\n        experimentItem: this.state.experiment.experimentItem,\n        metricInfo: metricProgressInfo,\n        fetchOp: function fetchOp() {\n          return _this2.fetchExperiment();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }));\n      var criteriaTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 2,\n        title: \"Criteria\",\n        key: \"Criteria\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CriteriaInfoDescription, {\n        iter8Info: this.state.iter8Info,\n        criterias: this.state.experiment ? this.state.experiment.criterias : [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 9\n        }\n      }));\n      var tabsArray = [overviewTab, assessmentTab, criteriaTab];\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderHeader, {\n        location: this.props.location,\n        rightToolbar: /*#__PURE__*/React.createElement(RefreshContainer, {\n          id: \"time_range_refresh\",\n          hideLabel: true,\n          handleRefresh: this.doRefresh,\n          manageURL: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }\n        }),\n        actionsToolbar: this.renderRightToolbar(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ParameterizedTabs, {\n        id: \"basic-tabs\",\n        onSelect: function onSelect(tabValue) {\n          _this2.setState({\n            currentTab: tabValue\n          });\n        },\n        tabMap: tabIndex,\n        tabName: tabName,\n        defaultTab: defaultTab,\n        postHandler: this.fetchExperiment,\n        activeTab: this.state.currentTab,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 9\n        }\n      }, tabsArray));\n    }\n  }]);\n\n  return ExperimentDetailsPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    duration: durationSelector(state),\n    lastRefreshAt: state.globalState.lastRefreshAt\n  };\n};\n\nvar ExperimentDetailsPageContainer = connect(mapStateToProps, null)(ExperimentDetailsPage);\nexport default ExperimentDetailsPageContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentDetailsPage.tsx"],"names":["React","ParameterizedTabs","activeTab","RenderHeader","Tab","API","AlertUtils","emptyExperimentDetailsInfo","Iter8Dropdown","history","connect","ExperimentInfoDescription","CriteriaInfoDescription","AssessmentInfoDescription","durationSelector","RefreshContainer","tabName","defaultTab","tabIndex","info","assessment","criteria","ExperimentDetailsPage","props","initTrafficSplit","experiment","state","manualOverride","length","trafficSplit","push","name","experimentItem","baseline","weight","maxWeight","locked","mirrored","candidates","forEach","c","fetchExperiment","namespace","match","params","getIter8Info","then","result","iter8Info","data","enabled","getExperiment","resetActionFlag","setState","actionTaken","canDelete","permissions","delete","lastRefreshAt","Date","now","catch","error","addError","backToList","doRefresh","doDelete","deleteExperiment","doTrafficSplit","_","doIter8Action","requestAction","errMsg","action","newrafficSplit","Map","w","set","String","Array","from","updateExperiment","JSON","stringify","renderRightToolbar","startTime","endTime","phase","urlParams","URLSearchParams","location","search","get","split","supportedVersion","analyticsImgVersion","controllerImgVersion","currentTab","target","prevProps","overviewTab","metricProgressInfo","criterias","threshold","tolerance","thresholdType","toleranceType","preferred_direction","metric","isReward","unit","numerator","assessmentTab","criteriaTab","tabsArray","tabValue","Component","mapStateToProps","duration","globalState","ExperimentDetailsPageContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport ParameterizedTabs, { activeTab } from '../../../../components/Tab/Tabs';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { RenderHeader } from '../../../../components/Nav/Page';\nimport { Tab } from '@patternfly/react-core';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport {\n  emptyExperimentDetailsInfo,\n  ExperimentAction,\n  Iter8ExpDetailsInfo,\n  Iter8Info,\n  MetricProgressInfo\n} from '../../../../types/Iter8';\nimport Iter8Dropdown from './Iter8Dropdown';\nimport history from '../../../../app/History';\nimport { connect } from 'react-redux';\n\nimport ExperimentInfoDescription from './ExperimentInfoDescription';\nimport CriteriaInfoDescription from './CriteriaInfoDescription';\nimport AssessmentInfoDescription from './AssessmentInfoDescription';\nimport { KialiAppState } from '../../../../store/Store';\nimport { durationSelector } from '../../../../store/Selectors';\nimport { TimeInMilliseconds } from '../../../../types/Common';\nimport RefreshContainer from '../../../../components/Refresh/Refresh';\nimport { WorkloadWeight } from '../../../../components/IstioWizards/TrafficShifting';\n\ninterface ExpeerimentId {\n  namespace: string;\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<ExpeerimentId> {\n  lastRefreshAt: TimeInMilliseconds;\n}\n\ninterface State {\n  iter8Info: Iter8Info;\n  experiment: Iter8ExpDetailsInfo;\n  currentTab: string;\n  canDelete: boolean;\n  target: string;\n  baseline: string;\n  actionTaken: string;\n  resetActionFlag: boolean;\n  manualOverride: WorkloadWeight[];\n  lastRefreshAt: TimeInMilliseconds;\n}\n\nconst tabName = 'tab';\nconst defaultTab = 'overview';\n\nconst tabIndex: { [tab: string]: number } = {\n  info: 0,\n  assessment: 1,\n  criteria: 2\n};\n\nclass ExperimentDetailsPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const urlParams = new URLSearchParams(history.location.search);\n\n    let baseline = urlParams.get('baseline') || '';\n    let candidates = urlParams.get('candidates')?.split(',') || [];\n    let trafficSplit = new Map<string, number>();\n    trafficSplit.set(baseline, 0);\n    candidates.forEach(c => {\n      trafficSplit.set(c, 0);\n    });\n    this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        analyticsImgVersion: '',\n        controllerImgVersion: '',\n        namespace: 'iter8'\n      },\n      experiment: emptyExperimentDetailsInfo,\n      canDelete: false,\n      currentTab: activeTab(tabName, defaultTab),\n      target: urlParams.get('target') || '',\n      baseline: baseline,\n      actionTaken: '',\n      resetActionFlag: false,\n      manualOverride: [],\n      lastRefreshAt: Date.now()\n    };\n  }\n\n  initTrafficSplit = (experiment): WorkloadWeight[] => {\n    if (this.state.manualOverride.length !== 0) {\n      return this.state.manualOverride;\n    } else {\n      let trafficSplit: WorkloadWeight[] = [];\n      trafficSplit.push({\n        name: experiment.experimentItem.baseline.name,\n        weight: 0,\n        maxWeight: 100,\n        locked: false,\n        mirrored: false\n      });\n      experiment.experimentItem.candidates.forEach(c => {\n        trafficSplit.push({\n          name: c.name,\n          weight: 0,\n          maxWeight: 100,\n          locked: false,\n          mirrored: false\n        });\n      });\n      return trafficSplit;\n    }\n  };\n\n  fetchExperiment = () => {\n    const namespace = this.props.match.params.namespace;\n    const name = this.props.match.params.name;\n    API.getIter8Info()\n      .then(result => {\n        const iter8Info = result.data;\n        if (iter8Info.enabled) {\n          API.getExperiment(namespace, name)\n            .then(result => {\n              let manualOverride = this.initTrafficSplit(result.data);\n              if (this.state.resetActionFlag) {\n                this.setState({\n                  iter8Info: iter8Info,\n                  actionTaken: '',\n                  experiment: result.data,\n                  canDelete: result.data.permissions.delete,\n                  resetActionFlag: false,\n                  manualOverride: manualOverride,\n                  lastRefreshAt: Date.now()\n                });\n              } else {\n                this.setState({\n                  experiment: result.data,\n                  canDelete: result.data.permissions.delete,\n                  resetActionFlag: true,\n                  manualOverride: manualOverride,\n                  lastRefreshAt: Date.now()\n                });\n              }\n            })\n            .catch(error => {\n              AlertUtils.addError('Could not fetch Iter8 Experiment', error);\n            });\n        } else {\n          AlertUtils.addError('Kiali has Iter8 extension enabled but it is not detected in the cluster');\n        }\n      })\n\n      .catch(error => {\n        AlertUtils.addError('Could not fetch Iter8 Info.', error);\n      });\n  };\n\n  componentDidMount() {\n    this.fetchExperiment();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.state.currentTab !== activeTab(tabName, defaultTab) ||\n      prevProps.lastRefreshAt !== this.props.lastRefreshAt\n    ) {\n      this.setState({\n        currentTab: activeTab(tabName, defaultTab)\n      });\n    }\n  }\n\n  backToList = () => {\n    // Back to list page\n    history.push(`/extensions/iter8?namespaces=${this.props.match.params.namespace}`);\n  };\n\n  doRefresh = () => {\n    this.fetchExperiment();\n  };\n\n  doDelete = () => {\n    API.deleteExperiment(this.props.match.params.namespace, this.props.match.params.name)\n      .then(() => this.backToList())\n      .catch(error => {\n        AlertUtils.addError('Could not delete Iter8 Experiment.', error);\n      });\n  };\n\n  doTrafficSplit = (manualOverride: WorkloadWeight[]) => {\n    this.setState(_ => {\n      return {\n        manualOverride: manualOverride\n      };\n    });\n  };\n\n  doIter8Action = (requestAction: string): void => {\n    let errMsg = 'Could not' + requestAction + ' Iter8 Experiment';\n    const action: ExperimentAction = {\n      action: requestAction,\n      trafficSplit: []\n    };\n    if (requestAction === 'terminate') {\n      let newrafficSplit = new Map<string, string>();\n\n      this.state.manualOverride.forEach((w, _) => {\n        newrafficSplit.set(w.name, String(w.weight));\n      });\n      action.trafficSplit = Array.from(newrafficSplit);\n    }\n    this.setState({ actionTaken: requestAction });\n    API.updateExperiment(this.props.match.params.namespace, this.props.match.params.name, JSON.stringify(action))\n      .then(() => this.doRefresh())\n      .catch(error => {\n        this.setState({ actionTaken: '' });\n        AlertUtils.addError(errMsg, error);\n      });\n  };\n\n  renderRightToolbar = () => {\n    return (\n      <Iter8Dropdown\n        experimentName={this.props.match.params.name}\n        manualOverride={this.state.manualOverride}\n        canDelete={this.state.canDelete}\n        startTime={this.state.experiment ? this.state.experiment.experimentItem.startTime : ''}\n        endTime={this.state.experiment ? this.state.experiment.experimentItem.endTime : ''}\n        phase={this.state.experiment ? this.state.experiment.experimentItem.phase : ' '}\n        onDelete={this.doDelete}\n        onResume={() => this.doIter8Action('resume')}\n        onPause={() => this.doIter8Action('pause')}\n        onTerminate={() => this.doIter8Action('terminate')}\n        doTrafficSplit={this.doTrafficSplit}\n      />\n    );\n  };\n\n  render() {\n    const overviewTab = (\n      <Tab eventKey={0} title=\"Overview\" key=\"Overview\">\n        <ExperimentInfoDescription\n          namespace={this.props.match.params.namespace}\n          experiment={this.props.match.params.name}\n          target={this.state.target}\n          experimentDetails={this.state.experiment}\n          actionTaken={this.state.actionTaken}\n        />\n      </Tab>\n    );\n    const metricProgressInfo: Map<string, MetricProgressInfo> = new Map<string, MetricProgressInfo>(); //= new Array(this.state.experiment.criterias.length);\n    for (const c of this.state.experiment.criterias) {\n      metricProgressInfo.set(c.name, {\n        name: c.name,\n        threshold: c.criteria.tolerance,\n        thresholdType: c.criteria.toleranceType,\n        preferred_direction: c.metric.preferred_direction,\n        isReward: c.criteria.isReward,\n        unit: c.metric.numerator.unit\n      });\n    }\n\n    const assessmentTab = (\n      <Tab eventKey={1} title=\"Assessment\" key=\"Assessment\">\n        <AssessmentInfoDescription\n          lastRefreshAt={this.state.lastRefreshAt}\n          iter8Info={this.state.iter8Info}\n          name={this.props.match.params.name}\n          namespace={this.props.match.params.namespace}\n          experimentItem={this.state.experiment.experimentItem}\n          metricInfo={metricProgressInfo}\n          fetchOp={() => this.fetchExperiment()}\n        />\n      </Tab>\n    );\n\n    const criteriaTab = (\n      <Tab eventKey={2} title=\"Criteria\" key=\"Criteria\">\n        <CriteriaInfoDescription\n          iter8Info={this.state.iter8Info}\n          criterias={this.state.experiment ? this.state.experiment.criterias : []}\n        />\n      </Tab>\n    );\n    const tabsArray: any[] = [overviewTab, assessmentTab, criteriaTab];\n    return (\n      <>\n        <RenderHeader\n          location={this.props.location}\n          rightToolbar={\n            <RefreshContainer\n              id=\"time_range_refresh\"\n              hideLabel={true}\n              handleRefresh={this.doRefresh}\n              manageURL={true}\n            />\n          }\n          actionsToolbar={this.renderRightToolbar()}\n        />\n        <ParameterizedTabs\n          id=\"basic-tabs\"\n          onSelect={tabValue => {\n            this.setState({ currentTab: tabValue });\n          }}\n          tabMap={tabIndex}\n          tabName={tabName}\n          defaultTab={defaultTab}\n          postHandler={this.fetchExperiment}\n          activeTab={this.state.currentTab}\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          {tabsArray}\n        </ParameterizedTabs>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  duration: durationSelector(state),\n  lastRefreshAt: state.globalState.lastRefreshAt\n});\n\nconst ExperimentDetailsPageContainer = connect(mapStateToProps, null)(ExperimentDetailsPage);\n\nexport default ExperimentDetailsPageContainer;\n"]},"metadata":{},"sourceType":"module"}
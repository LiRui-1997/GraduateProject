{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioWizards/CircuitBreaker/ConnectionPool.tsx\";\nimport * as React from 'react';\nimport { FormGroup, Switch, TextInput } from '@patternfly/react-core';\nimport { CONNECTION_POOL_TOOLTIP, wizardTooltip } from '../WizardHelp';\n\nvar ConnectionPool = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConnectionPool, _React$Component);\n\n  var _super = _createSuper(ConnectionPool);\n\n  function ConnectionPool() {\n    _classCallCheck(this, ConnectionPool);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this,\n          _this$props$connectio,\n          _this$props$connectio2;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Add Connection Pool\",\n        fieldId: \"cpSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"cpSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.props.isConnectionPool,\n        onChange: function onChange() {\n          return _this.props.onConnectionPool(!_this.props.isConnectionPool, _this.props.connectionPool);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }\n      }, wizardTooltip(CONNECTION_POOL_TOOLTIP))), this.props.isConnectionPool && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Max Connections\",\n        fieldId: \"maxConnections\",\n        helperText: \"Maximum number of HTTP1 /TCP connections to a destination host\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: (_this$props$connectio = this.props.connectionPool.tcp) === null || _this$props$connectio === void 0 ? void 0 : _this$props$connectio.maxConnections,\n        id: \"maxConnections\",\n        name: \"maxConnections\",\n        onChange: function onChange(value) {\n          var newValue = Number(value || 0);\n          newValue = Number.isNaN(newValue) ? 0 : newValue;\n          var cp = _this.props.connectionPool;\n\n          if (!cp.tcp) {\n            cp.tcp = {};\n          }\n\n          cp.tcp.maxConnections = newValue;\n\n          _this.props.onConnectionPool(_this.props.isConnectionPool, cp);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      })), this.props.isConnectionPool && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"HTTP1 Max Pending Requests\",\n        fieldId: \"http1MaxPendingRequests\",\n        helperText: \"Maximum number of pending HTTP requests to a destination.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: (_this$props$connectio2 = this.props.connectionPool.http) === null || _this$props$connectio2 === void 0 ? void 0 : _this$props$connectio2.http1MaxPendingRequests,\n        id: \"http1MaxPendingRequests\",\n        name: \"http1MaxPendingRequests\",\n        onChange: function onChange(value) {\n          var newValue = Number(value || 0);\n          newValue = Number.isNaN(newValue) ? 0 : newValue;\n          var cp = _this.props.connectionPool;\n\n          if (!cp.http) {\n            cp.http = {};\n          }\n\n          cp.http.http1MaxPendingRequests = newValue;\n\n          _this.props.onConnectionPool(_this.props.isConnectionPool, cp);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return ConnectionPool;\n}(React.Component);\n\nexport default ConnectionPool;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioWizards/CircuitBreaker/ConnectionPool.tsx"],"names":["React","FormGroup","Switch","TextInput","CONNECTION_POOL_TOOLTIP","wizardTooltip","ConnectionPool","props","isConnectionPool","onConnectionPool","connectionPool","tcp","maxConnections","value","newValue","Number","isNaN","cp","http","http1MaxPendingRequests","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FormGroup, Switch, TextInput } from '@patternfly/react-core';\nimport { ConnectionPoolSettings } from '../../../types/IstioObjects';\nimport { CONNECTION_POOL_TOOLTIP, wizardTooltip } from '../WizardHelp';\n\ntype Props = {\n  isConnectionPool: boolean;\n  connectionPool: ConnectionPoolSettings;\n  onConnectionPool: (isConnectionPool: boolean, connectionPool: ConnectionPoolSettings) => void;\n};\n\nclass ConnectionPool extends React.Component<Props> {\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Add Connection Pool\" fieldId=\"cpSwitch\">\n          <Switch\n            id=\"cpSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.props.isConnectionPool}\n            onChange={() => this.props.onConnectionPool(!this.props.isConnectionPool, this.props.connectionPool)}\n          />\n          <span>{wizardTooltip(CONNECTION_POOL_TOOLTIP)}</span>\n        </FormGroup>\n        {this.props.isConnectionPool && (\n          <FormGroup\n            label=\"Max Connections\"\n            fieldId=\"maxConnections\"\n            helperText=\"Maximum number of HTTP1 /TCP connections to a destination host\"\n          >\n            <TextInput\n              value={this.props.connectionPool.tcp?.maxConnections}\n              id=\"maxConnections\"\n              name=\"maxConnections\"\n              onChange={value => {\n                let newValue = Number(value || 0);\n                newValue = Number.isNaN(newValue) ? 0 : newValue;\n                const cp = this.props.connectionPool;\n                if (!cp.tcp) {\n                  cp.tcp = {};\n                }\n                cp.tcp.maxConnections = newValue;\n                this.props.onConnectionPool(this.props.isConnectionPool, cp);\n              }}\n            />\n          </FormGroup>\n        )}\n        {this.props.isConnectionPool && (\n          <FormGroup\n            label=\"HTTP1 Max Pending Requests\"\n            fieldId=\"http1MaxPendingRequests\"\n            helperText=\"Maximum number of pending HTTP requests to a destination.\"\n          >\n            <TextInput\n              value={this.props.connectionPool.http?.http1MaxPendingRequests}\n              id=\"http1MaxPendingRequests\"\n              name=\"http1MaxPendingRequests\"\n              onChange={value => {\n                let newValue = Number(value || 0);\n                newValue = Number.isNaN(newValue) ? 0 : newValue;\n                const cp = this.props.connectionPool;\n                if (!cp.http) {\n                  cp.http = {};\n                }\n                cp.http.http1MaxPendingRequests = newValue;\n                this.props.onConnectionPool(this.props.isConnectionPool, cp);\n              }}\n            />\n          </FormGroup>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConnectionPool;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { FILTER_ACTION_APPEND, FILTER_ACTION_UPDATE, FilterTypes } from '../../types/Filters';\nimport { HEALTHY, DEGRADED, FAILURE, NA, NOT_READY } from '../../types/Health';\nimport { removeDuplicatesArray } from '../../utils/Common';\nexport var presenceValues = [{\n  id: 'present',\n  title: 'Present'\n}, {\n  id: 'notpresent',\n  title: 'Not Present'\n}];\nexport var istioSidecarFilter = {\n  id: 'istiosidecar',\n  title: 'Istio Sidecar',\n  placeholder: 'Filter by IstioSidecar Validation',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_UPDATE,\n  filterValues: presenceValues\n};\nexport var healthFilter = {\n  id: 'health',\n  title: 'Health',\n  placeholder: 'Filter by Health',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [{\n    id: HEALTHY.name,\n    title: HEALTHY.name\n  }, {\n    id: DEGRADED.name,\n    title: DEGRADED.name\n  }, {\n    id: FAILURE.name,\n    title: FAILURE.name\n  }, {\n    id: NOT_READY.name,\n    title: NOT_READY.name\n  }, {\n    id: 'na',\n    title: NA.name\n  }]\n};\nexport var labelFilter = {\n  id: 'label',\n  title: 'Label',\n  placeholder: 'Filter by Label',\n  filterType: FilterTypes.label,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\nexport var getFilterSelectedValues = function getFilterSelectedValues(filter, activeFilters) {\n  var selected = activeFilters.filters.filter(function (activeFilter) {\n    return activeFilter.id === filter.id;\n  }).map(function (activeFilter) {\n    return activeFilter.value;\n  });\n  return removeDuplicatesArray(selected);\n};\nexport var getPresenceFilterValue = function getPresenceFilterValue(filter, activeFilters) {\n  var presenceFilters = activeFilters.filters.filter(function (activeFilter) {\n    return activeFilter.id === filter.id;\n  });\n\n  if (presenceFilters.length > 0) {\n    return presenceFilters[0].value === 'Present';\n  }\n\n  return undefined;\n};\nexport var filterByHealth = function filterByHealth(items, filterValues) {\n  var itemsWithHealthPromises = items.map(function (item) {\n    return item.healthPromise.then(function (h) {\n      return {\n        health: h,\n        item: item\n      };\n    });\n  });\n  return Promise.all(itemsWithHealthPromises).then(function (itemsWithHealth) {\n    return itemsWithHealth.filter(function (itemWithHealth) {\n      return filterValues.includes(itemWithHealth.health.getGlobalStatus().name);\n    }).map(function (itemWithHealth) {\n      return itemWithHealth.item;\n    });\n  });\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/Filters/CommonFilters.ts"],"names":["FILTER_ACTION_APPEND","FILTER_ACTION_UPDATE","FilterTypes","HEALTHY","DEGRADED","FAILURE","NA","NOT_READY","removeDuplicatesArray","presenceValues","id","title","istioSidecarFilter","placeholder","filterType","select","action","filterValues","healthFilter","name","labelFilter","label","getFilterSelectedValues","filter","activeFilters","selected","filters","activeFilter","map","value","getPresenceFilterValue","presenceFilters","length","undefined","filterByHealth","items","itemsWithHealthPromises","item","healthPromise","then","h","health","Promise","all","itemsWithHealth","itemWithHealth","includes","getGlobalStatus"],"mappings":"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","sourcesContent":["import {\n  FILTER_ACTION_APPEND,\n  FilterType,\n  FILTER_ACTION_UPDATE,\n  FilterValue,\n  ActiveFiltersInfo,\n  FilterTypes\n} from '../../types/Filters';\nimport { HEALTHY, DEGRADED, FAILURE, NA, NOT_READY, Health } from '../../types/Health';\nimport { removeDuplicatesArray } from '../../utils/Common';\n\nexport const presenceValues: FilterValue[] = [\n  {\n    id: 'present',\n    title: 'Present'\n  },\n  {\n    id: 'notpresent',\n    title: 'Not Present'\n  }\n];\n\nexport const istioSidecarFilter: FilterType = {\n  id: 'istiosidecar',\n  title: 'Istio Sidecar',\n  placeholder: 'Filter by IstioSidecar Validation',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_UPDATE,\n  filterValues: presenceValues\n};\n\nexport const healthFilter: FilterType = {\n  id: 'health',\n  title: 'Health',\n  placeholder: 'Filter by Health',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [\n    {\n      id: HEALTHY.name,\n      title: HEALTHY.name\n    },\n    {\n      id: DEGRADED.name,\n      title: DEGRADED.name\n    },\n    {\n      id: FAILURE.name,\n      title: FAILURE.name\n    },\n    {\n      id: NOT_READY.name,\n      title: NOT_READY.name\n    },\n    {\n      id: 'na',\n      title: NA.name\n    }\n  ]\n};\n\nexport const labelFilter: FilterType = {\n  id: 'label',\n  title: 'Label',\n  placeholder: 'Filter by Label',\n  filterType: FilterTypes.label,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\n\nexport const getFilterSelectedValues = (filter: FilterType, activeFilters: ActiveFiltersInfo): string[] => {\n  const selected: string[] = activeFilters.filters\n    .filter(activeFilter => activeFilter.id === filter.id)\n    .map(activeFilter => activeFilter.value);\n  return removeDuplicatesArray(selected);\n};\n\nexport const getPresenceFilterValue = (filter: FilterType, activeFilters: ActiveFiltersInfo): boolean | undefined => {\n  const presenceFilters = activeFilters.filters.filter(activeFilter => activeFilter.id === filter.id);\n\n  if (presenceFilters.length > 0) {\n    return presenceFilters[0].value === 'Present';\n  }\n  return undefined;\n};\n\nexport const filterByHealth = <T extends { healthPromise: Promise<Health> }>(\n  items: T[],\n  filterValues: string[]\n): Promise<T[]> => {\n  const itemsWithHealthPromises = items.map(item => item.healthPromise.then(h => ({ health: h, item: item })));\n  return Promise.all(itemsWithHealthPromises).then(itemsWithHealth => {\n    return itemsWithHealth\n      .filter(itemWithHealth => filterValues.includes(itemWithHealth.health.getGlobalStatus().name))\n      .map(itemWithHealth => itemWithHealth.item);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
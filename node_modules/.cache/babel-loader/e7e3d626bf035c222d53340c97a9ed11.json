{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/IstioConfigNew/PeerAuthenticationForm.tsx\";\nimport * as React from 'react';\nimport { Button, FormGroup, FormSelect, FormSelectOption, Switch } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { PeerAuthenticationMutualTLSMode } from '../../types/IstioObjects';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nvar noPortMtlsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\nvar headerCells = [{\n  title: 'Port Number',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Mutual TLS Mode',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: '',\n  props: {}\n}];\nexport var PEER_AUTHENTICATION = 'PeerAuthentication';\nexport var PEER_AUTHENTICATIONS = 'peerauthentications';\nexport var initPeerAuthentication = function initPeerAuthentication() {\n  return {\n    workloadSelector: '',\n    mtls: PeerAuthenticationMutualTLSMode.UNSET,\n    portLevelMtls: [],\n    addWorkloadSelector: false,\n    workloadSelectorValid: false,\n    addPortMtls: false,\n    addNewPortMtls: {\n      port: '',\n      mtls: PeerAuthenticationMutualTLSMode.UNSET\n    }\n  };\n};\nexport var isPeerAuthenticationStateValid = function isPeerAuthenticationStateValid(pa) {\n  var workloadSelectorRule = pa.addWorkloadSelector ? pa.workloadSelectorValid : true;\n  var validPortsMtlsRule = pa.addPortMtls ? pa.workloadSelectorValid && pa.portLevelMtls.length > 0 : true;\n  return workloadSelectorRule && validPortsMtlsRule;\n};\n\nvar PeerAuthenticationForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(PeerAuthenticationForm, _React$Component);\n\n  var _super = _createSuper(PeerAuthenticationForm);\n\n  function PeerAuthenticationForm(props) {\n    var _this;\n\n    _classCallCheck(this, PeerAuthenticationForm);\n\n    _this = _super.call(this, props);\n\n    _this.onChangeWorkloadSelector = function () {\n      _this.setState(function (prevState) {\n        return {\n          addWorkloadSelector: !prevState.addWorkloadSelector\n        };\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.onChangeAddPortMtls = function () {\n      _this.setState(function (prevState) {\n        return {\n          addPortMtls: !prevState.addPortMtls\n        };\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.addWorkloadLabels = function (value, _) {\n      if (value.length === 0) {\n        _this.setState({\n          workloadSelectorValid: false,\n          workloadSelector: ''\n        }, function () {\n          return _this.onPeerAuthenticationChange();\n        });\n\n        return;\n      }\n\n      value = value.trim();\n      var labels = value.split(',');\n      var isValid = true; // Some smoke validation rules for the labels\n\n      for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n\n        if (label.indexOf('=') < 0) {\n          isValid = false;\n          break;\n        }\n\n        var splitLabel = label.split('=');\n\n        if (splitLabel.length !== 2) {\n          isValid = false;\n          break;\n        }\n\n        if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n          isValid = false;\n          break;\n        }\n      }\n\n      _this.setState({\n        workloadSelectorValid: isValid,\n        workloadSelector: value\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.onPeerAuthenticationChange = function () {\n      _this.props.onChange(_this.state);\n    };\n\n    _this.onMutualTlsChange = function (value, _) {\n      _this.setState({\n        mtls: value\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.onAddPortNumber = function (value, _) {\n      _this.setState(function (prevState) {\n        return {\n          addNewPortMtls: {\n            port: value.trim(),\n            mtls: prevState.addNewPortMtls.mtls\n          }\n        };\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.onAddPortMtlsMode = function (value, _) {\n      _this.setState(function (prevState) {\n        return {\n          addNewPortMtls: {\n            port: prevState.addNewPortMtls.port,\n            mtls: value\n          }\n        };\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.onAddPortMtls = function () {\n      _this.setState(function (prevState) {\n        prevState.portLevelMtls.push(prevState.addNewPortMtls);\n        return {\n          portLevelMtls: prevState.portLevelMtls,\n          addNewPortMtls: {\n            port: '',\n            mtls: PeerAuthenticationMutualTLSMode.UNSET\n          }\n        };\n      }, function () {\n        return _this.onPeerAuthenticationChange();\n      });\n    };\n\n    _this.actionResolver = function (rowData, _ref) {\n      var rowIndex = _ref.rowIndex;\n      var removeAction = {\n        title: 'Remove Port MTLS',\n        // @ts-ignore\n        onClick: function onClick(event, rowIndex, rowData, extraData) {\n          _this.setState(function (prevState) {\n            prevState.portLevelMtls.splice(rowIndex, 1);\n            return {\n              portLevelMtls: prevState.portLevelMtls\n            };\n          }, function () {\n            return _this.onPeerAuthenticationChange();\n          });\n        }\n      };\n\n      if (rowIndex < _this.props.peerAuthentication.portLevelMtls.length) {\n        return [removeAction];\n      }\n\n      return [];\n    };\n\n    _this.state = {\n      addWorkloadSelector: false,\n      workloadSelectorValid: false,\n      workloadSelector: _this.props.peerAuthentication.workloadSelector,\n      mtls: _this.props.peerAuthentication.mtls,\n      addPortMtls: false,\n      portLevelMtls: _this.props.peerAuthentication.portLevelMtls,\n      addNewPortMtls: {\n        port: '',\n        mtls: PeerAuthenticationMutualTLSMode.UNSET\n      }\n    };\n    return _this;\n  }\n\n  _createClass(PeerAuthenticationForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        addWorkloadSelector: this.props.peerAuthentication.addWorkloadSelector,\n        workloadSelectorValid: this.props.peerAuthentication.workloadSelectorValid,\n        workloadSelector: this.props.peerAuthentication.workloadSelector,\n        mtls: this.props.peerAuthentication.mtls,\n        addPortMtls: this.props.peerAuthentication.addPortMtls,\n        portLevelMtls: this.props.peerAuthentication.portLevelMtls,\n        addNewPortMtls: this.props.peerAuthentication.addNewPortMtls\n      });\n    }\n  }, {\n    key: \"rows\",\n    value: function rows() {\n      var _this2 = this;\n\n      return this.props.peerAuthentication.portLevelMtls.map(function (pmtls, i) {\n        return {\n          key: 'portMtls' + i,\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, pmtls.port), /*#__PURE__*/React.createElement(React.Fragment, null, pmtls.mtls), '']\n        };\n      }).concat([{\n        key: 'pmtlsNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.addNewPortMtls.port,\n          id: \"addPortNumber\",\n          \"aria-describedby\": \"add port number\",\n          name: \"addPortNumber\",\n          onChange: this.onAddPortNumber,\n          isValid: this.state.addNewPortMtls.port.length > 0 && !isNaN(Number(this.state.addNewPortMtls.port)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n          value: this.state.addNewPortMtls.mtls,\n          id: \"addPortMtlsMode\",\n          name: \"addPortMtlsMode\",\n          onChange: this.onAddPortMtlsMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }\n        }, Object.keys(PeerAuthenticationMutualTLSMode).map(function (option, index) {\n          return /*#__PURE__*/React.createElement(FormSelectOption, {\n            key: 'p' + index,\n            value: option,\n            label: option,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }\n          });\n        }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          id: \"addServerBtn\",\n          variant: \"link\",\n          icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 23\n            }\n          }),\n          isDisabled: this.state.addNewPortMtls.port.length === 0 || isNaN(Number(this.state.addNewPortMtls.port)),\n          onClick: this.onAddPortMtls,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }\n        }))]\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Workload Selector\",\n        fieldId: \"workloadSelectorSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"workloadSelectorSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addWorkloadSelector,\n        onChange: this.onChangeWorkloadSelector,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }\n      })), this.state.addWorkloadSelector && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"workloadLabels\",\n        label: \"Labels\",\n        helperText: \"One or more labels to select a workload where the PeerAuthentication is applied.\",\n        helperTextInvalid: \"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\",\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwHosts\",\n        name: \"gwHosts\",\n        isDisabled: !this.state.addWorkloadSelector,\n        value: this.state.workloadSelector,\n        onChange: this.addWorkloadLabels,\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Mutual TLS Mode\",\n        fieldId: \"mutualTls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.mtls,\n        onChange: this.onMutualTlsChange,\n        id: \"mutualTls\",\n        name: \"rules-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }\n      }, Object.keys(PeerAuthenticationMutualTLSMode).map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: index,\n          value: option,\n          label: option,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Port Mutual TLS\",\n        fieldId: \"addPortMtls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"addPortMtls\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addPortMtls,\n        onChange: this.onChangeAddPortMtls,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }\n      })), this.state.addPortMtls && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Port Level MTLS\",\n        fieldId: \"portMtlsList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Port Level MTLS\",\n        cells: headerCells,\n        rows: this.rows() // @ts-ignore\n        ,\n        actionResolver: this.actionResolver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }\n      })), this.props.peerAuthentication.portLevelMtls.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: noPortMtlsStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }\n      }, \"PeerAuthentication has no Port Mutual TLS defined\"), !this.state.addWorkloadSelector && /*#__PURE__*/React.createElement(\"div\", {\n        className: noPortMtlsStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }\n      }, \"Port Mutual TLS requires a Workload Selector\")));\n    }\n  }]);\n\n  return PeerAuthenticationForm;\n}(React.Component);\n\nexport default PeerAuthenticationForm;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/IstioConfigNew/PeerAuthenticationForm.tsx"],"names":["React","Button","FormGroup","FormSelect","FormSelectOption","Switch","TextInputBase","TextInput","PeerAuthenticationMutualTLSMode","cellWidth","Table","TableBody","TableHeader","style","PFColors","PlusCircleIcon","noPortMtlsStyle","marginTop","color","Red100","headerCells","title","transforms","props","PEER_AUTHENTICATION","PEER_AUTHENTICATIONS","initPeerAuthentication","workloadSelector","mtls","UNSET","portLevelMtls","addWorkloadSelector","workloadSelectorValid","addPortMtls","addNewPortMtls","port","isPeerAuthenticationStateValid","pa","workloadSelectorRule","validPortsMtlsRule","length","PeerAuthenticationForm","onChangeWorkloadSelector","setState","prevState","onPeerAuthenticationChange","onChangeAddPortMtls","addWorkloadLabels","value","_","trim","labels","split","isValid","i","label","indexOf","splitLabel","onChange","state","onMutualTlsChange","onAddPortNumber","onAddPortMtlsMode","onAddPortMtls","push","actionResolver","rowData","rowIndex","removeAction","onClick","event","extraData","splice","peerAuthentication","map","pmtls","key","cells","concat","isNaN","Number","Object","keys","option","index","rows","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, FormGroup, FormSelect, FormSelectOption, Switch } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { PeerAuthenticationMutualTLSMode } from '../../types/IstioObjects';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nconst noPortMtlsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\n\nconst headerCells: ICell[] = [\n  {\n    title: 'Port Number',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Mutual TLS Mode',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: '',\n    props: {}\n  }\n];\n\ntype Props = {\n  peerAuthentication: PeerAuthenticationState;\n  onChange: (peerAuthentication: PeerAuthenticationState) => void;\n};\n\nexport type PortMtls = {\n  port: string;\n  mtls: string;\n};\n\nexport type PeerAuthenticationState = {\n  workloadSelector: string;\n  mtls: string;\n  portLevelMtls: PortMtls[];\n  addWorkloadSelector: boolean;\n  workloadSelectorValid: boolean;\n  addPortMtls: boolean;\n  addNewPortMtls: PortMtls;\n};\n\nexport const PEER_AUTHENTICATION = 'PeerAuthentication';\nexport const PEER_AUTHENTICATIONS = 'peerauthentications';\n\nexport const initPeerAuthentication = (): PeerAuthenticationState => ({\n  workloadSelector: '',\n  mtls: PeerAuthenticationMutualTLSMode.UNSET,\n  portLevelMtls: [],\n  addWorkloadSelector: false,\n  workloadSelectorValid: false,\n  addPortMtls: false,\n  addNewPortMtls: {\n    port: '',\n    mtls: PeerAuthenticationMutualTLSMode.UNSET\n  }\n});\n\nexport const isPeerAuthenticationStateValid = (pa: PeerAuthenticationState): boolean => {\n  const workloadSelectorRule = pa.addWorkloadSelector ? pa.workloadSelectorValid : true;\n  const validPortsMtlsRule = pa.addPortMtls ? pa.workloadSelectorValid && pa.portLevelMtls.length > 0 : true;\n  return workloadSelectorRule && validPortsMtlsRule;\n};\n\nclass PeerAuthenticationForm extends React.Component<Props, PeerAuthenticationState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      addWorkloadSelector: false,\n      workloadSelectorValid: false,\n      workloadSelector: this.props.peerAuthentication.workloadSelector,\n      mtls: this.props.peerAuthentication.mtls,\n      addPortMtls: false,\n      portLevelMtls: this.props.peerAuthentication.portLevelMtls,\n      addNewPortMtls: {\n        port: '',\n        mtls: PeerAuthenticationMutualTLSMode.UNSET\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      addWorkloadSelector: this.props.peerAuthentication.addWorkloadSelector,\n      workloadSelectorValid: this.props.peerAuthentication.workloadSelectorValid,\n      workloadSelector: this.props.peerAuthentication.workloadSelector,\n      mtls: this.props.peerAuthentication.mtls,\n      addPortMtls: this.props.peerAuthentication.addPortMtls,\n      portLevelMtls: this.props.peerAuthentication.portLevelMtls,\n      addNewPortMtls: this.props.peerAuthentication.addNewPortMtls\n    });\n  }\n\n  onChangeWorkloadSelector = () => {\n    this.setState(\n      prevState => {\n        return {\n          addWorkloadSelector: !prevState.addWorkloadSelector\n        };\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  onChangeAddPortMtls = () => {\n    this.setState(\n      prevState => {\n        return {\n          addPortMtls: !prevState.addPortMtls\n        };\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  addWorkloadLabels = (value: string, _) => {\n    if (value.length === 0) {\n      this.setState(\n        {\n          workloadSelectorValid: false,\n          workloadSelector: ''\n        },\n        () => this.onPeerAuthenticationChange()\n      );\n      return;\n    }\n    value = value.trim();\n    const labels: string[] = value.split(',');\n    let isValid = true;\n    // Some smoke validation rules for the labels\n    for (let i = 0; i < labels.length; i++) {\n      const label = labels[i];\n      if (label.indexOf('=') < 0) {\n        isValid = false;\n        break;\n      }\n      const splitLabel: string[] = label.split('=');\n      if (splitLabel.length !== 2) {\n        isValid = false;\n        break;\n      }\n      if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n        isValid = false;\n        break;\n      }\n    }\n    this.setState(\n      {\n        workloadSelectorValid: isValid,\n        workloadSelector: value\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  onPeerAuthenticationChange = () => {\n    this.props.onChange(this.state);\n  };\n\n  onMutualTlsChange = (value, _) => {\n    this.setState(\n      {\n        mtls: value\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  onAddPortNumber = (value: string, _) => {\n    this.setState(\n      prevState => {\n        return {\n          addNewPortMtls: {\n            port: value.trim(),\n            mtls: prevState.addNewPortMtls.mtls\n          }\n        };\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  onAddPortMtlsMode = (value: string, _) => {\n    this.setState(\n      prevState => {\n        return {\n          addNewPortMtls: {\n            port: prevState.addNewPortMtls.port,\n            mtls: value\n          }\n        };\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  onAddPortMtls = () => {\n    this.setState(\n      prevState => {\n        prevState.portLevelMtls.push(prevState.addNewPortMtls);\n        return {\n          portLevelMtls: prevState.portLevelMtls,\n          addNewPortMtls: {\n            port: '',\n            mtls: PeerAuthenticationMutualTLSMode.UNSET\n          }\n        };\n      },\n      () => this.onPeerAuthenticationChange()\n    );\n  };\n\n  // @ts-ignore\n  actionResolver = (rowData, { rowIndex }) => {\n    const removeAction = {\n      title: 'Remove Port MTLS',\n      // @ts-ignore\n      onClick: (event, rowIndex, rowData, extraData) => {\n        this.setState(\n          prevState => {\n            prevState.portLevelMtls.splice(rowIndex, 1);\n            return {\n              portLevelMtls: prevState.portLevelMtls\n            };\n          },\n          () => this.onPeerAuthenticationChange()\n        );\n      }\n    };\n    if (rowIndex < this.props.peerAuthentication.portLevelMtls.length) {\n      return [removeAction];\n    }\n    return [];\n  };\n\n  rows() {\n    return this.props.peerAuthentication.portLevelMtls\n      .map((pmtls, i) => ({\n        key: 'portMtls' + i,\n        cells: [<>{pmtls.port}</>, <>{pmtls.mtls}</>, '']\n      }))\n      .concat([\n        {\n          key: 'pmtlsNew',\n          cells: [\n            <>\n              <TextInput\n                value={this.state.addNewPortMtls.port}\n                id=\"addPortNumber\"\n                aria-describedby=\"add port number\"\n                name=\"addPortNumber\"\n                onChange={this.onAddPortNumber}\n                isValid={this.state.addNewPortMtls.port.length > 0 && !isNaN(Number(this.state.addNewPortMtls.port))}\n              />\n            </>,\n            <>\n              <FormSelect\n                value={this.state.addNewPortMtls.mtls}\n                id=\"addPortMtlsMode\"\n                name=\"addPortMtlsMode\"\n                onChange={this.onAddPortMtlsMode}\n              >\n                {Object.keys(PeerAuthenticationMutualTLSMode).map((option, index) => (\n                  <FormSelectOption key={'p' + index} value={option} label={option} />\n                ))}\n              </FormSelect>\n            </>,\n            <>\n              <Button\n                id=\"addServerBtn\"\n                variant=\"link\"\n                icon={<PlusCircleIcon />}\n                isDisabled={\n                  this.state.addNewPortMtls.port.length === 0 || isNaN(Number(this.state.addNewPortMtls.port))\n                }\n                onClick={this.onAddPortMtls}\n              />\n            </>\n          ]\n        }\n      ]);\n  }\n\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Workload Selector\" fieldId=\"workloadSelectorSwitch\">\n          <Switch\n            id=\"workloadSelectorSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addWorkloadSelector}\n            onChange={this.onChangeWorkloadSelector}\n          />\n        </FormGroup>\n        {this.state.addWorkloadSelector && (\n          <FormGroup\n            fieldId=\"workloadLabels\"\n            label=\"Labels\"\n            helperText=\"One or more labels to select a workload where the PeerAuthentication is applied.\"\n            helperTextInvalid=\"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\"\n            isValid={this.state.workloadSelectorValid}\n          >\n            <TextInput\n              id=\"gwHosts\"\n              name=\"gwHosts\"\n              isDisabled={!this.state.addWorkloadSelector}\n              value={this.state.workloadSelector}\n              onChange={this.addWorkloadLabels}\n              isValid={this.state.workloadSelectorValid}\n            />\n          </FormGroup>\n        )}\n        <FormGroup label=\"Mutual TLS Mode\" fieldId=\"mutualTls\">\n          <FormSelect value={this.state.mtls} onChange={this.onMutualTlsChange} id=\"mutualTls\" name=\"rules-form\">\n            {Object.keys(PeerAuthenticationMutualTLSMode).map((option, index) => (\n              <FormSelectOption key={index} value={option} label={option} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label=\"Port Mutual TLS\" fieldId=\"addPortMtls\">\n          <Switch\n            id=\"addPortMtls\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addPortMtls}\n            onChange={this.onChangeAddPortMtls}\n          />\n        </FormGroup>\n        {this.state.addPortMtls && (\n          <FormGroup label=\"Port Level MTLS\" fieldId=\"portMtlsList\">\n            <Table\n              aria-label=\"Port Level MTLS\"\n              cells={headerCells}\n              rows={this.rows()}\n              // @ts-ignore\n              actionResolver={this.actionResolver}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n            {this.props.peerAuthentication.portLevelMtls.length === 0 && (\n              <div className={noPortMtlsStyle}>PeerAuthentication has no Port Mutual TLS defined</div>\n            )}\n            {!this.state.addWorkloadSelector && (\n              <div className={noPortMtlsStyle}>Port Mutual TLS requires a Workload Selector</div>\n            )}\n          </FormGroup>\n        )}\n      </>\n    );\n  }\n}\n\nexport default PeerAuthenticationForm;\n"]},"metadata":{},"sourceType":"module"}
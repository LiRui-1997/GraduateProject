{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar hasCompoundParentsExpanded = function hasCompoundParentsExpanded(parentId, compoundParent, rows) {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _iterator = _createForOfIteratorHelper(rows),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var i = _step.value;\n\n      if (rows[parentId].hasOwnProperty('parent')) {\n        parentId = rows[parentId].parent;\n      } else {\n        return rows[parentId].cells[compoundParent].props.isOpen;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n};\n\nvar hasParentsExpanded = function hasParentsExpanded(parentId, rows) {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _iterator2 = _createForOfIteratorHelper(rows),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var i = _step2.value;\n\n      if (rows[parentId].hasOwnProperty('parent')) {\n        parentId = rows[parentId].parent;\n      } else {\n        return rows[parentId].isOpen;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return false;\n};\n\nexport var isRowExpanded = function isRowExpanded(row, rows) {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n\n  return undefined;\n};\nexport var getErrorTextByValidator = function getErrorTextByValidator(validatorName, validators) {\n  var result = validators.filter(function (validator) {\n    return validator.name === validatorName;\n  });\n  return result[0].errorText;\n};\nexport var cancelCellEdits = function cancelCellEdits(row) {\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true;\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nexport var validateCellEdits = function validateCellEdits(row, type, validationErrors) {\n  var missingPropErrorTxt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Validation requires unique name property for row cells';\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    var hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    var hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        var errorMsg = Object.keys(validationErrors).filter(function (validatorName) {\n          return validationErrors[validatorName].includes(cell.props.name);\n        }).map(function (validatorName) {\n          return getErrorTextByValidator(validatorName, row.rowEditValidationRules);\n        });\n\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\nexport var applyCellEdits = function applyCellEdits(row, type) {\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    var hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    var hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n\n      delete cell.props.editableValue;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};","map":{"version":3,"sources":["/root/GraduateProject/node_modules/@patternfly/react-table/dist/esm/components/Table/utils/utils.js"],"names":["hasCompoundParentsExpanded","parentId","compoundParent","rows","i","hasOwnProperty","parent","cells","props","isOpen","hasParentsExpanded","isRowExpanded","row","undefined","getErrorTextByValidator","validatorName","validators","result","filter","validator","name","errorText","cancelCellEdits","forEach","cell","editableValue","isValid","isEditable","validateCellEdits","type","validationErrors","missingPropErrorTxt","Object","keys","length","hasValue","value","hasEditableValue","errorMsg","includes","map","rowEditValidationRules","join","console","warn","applyCellEdits"],"mappings":"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","sourcesContent":["const hasCompoundParentsExpanded = (parentId, compoundParent, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].cells[compoundParent].props.isOpen;\n    }\n  }\n\n  return false;\n};\n\nconst hasParentsExpanded = (parentId, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].isOpen;\n    }\n  }\n\n  return false;\n};\n\nexport const isRowExpanded = (row, rows) => {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n\n  return undefined;\n};\nexport const getErrorTextByValidator = (validatorName, validators) => {\n  const result = validators.filter(validator => validator.name === validatorName);\n  return result[0].errorText;\n};\nexport const cancelCellEdits = row => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true;\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nexport const validateCellEdits = (row, type, validationErrors, missingPropErrorTxt = 'Validation requires unique name property for row cells') => {\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        const errorMsg = Object.keys(validationErrors).filter(validatorName => validationErrors[validatorName].includes(cell.props.name)).map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\nexport const applyCellEdits = (row, type) => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n\n      delete cell.props.editableValue;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}
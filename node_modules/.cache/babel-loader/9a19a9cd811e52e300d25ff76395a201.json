{"ast":null,"code":"// Store is the Redux Data store\n// Various pages are described here with their various sections\nexport var LoginStatus;\n\n(function (LoginStatus) {\n  LoginStatus[LoginStatus[\"logging\"] = 0] = \"logging\";\n  LoginStatus[LoginStatus[\"loggedIn\"] = 1] = \"loggedIn\";\n  LoginStatus[LoginStatus[\"loggedOut\"] = 2] = \"loggedOut\";\n  LoginStatus[LoginStatus[\"error\"] = 3] = \"error\";\n  LoginStatus[LoginStatus[\"expired\"] = 4] = \"expired\";\n})(LoginStatus || (LoginStatus = {}));","map":{"version":3,"sources":["/root/GraduateProject/src/store/Store.ts"],"names":["LoginStatus"],"mappings":"AA2BA;AAgBA;AA0CA,WAAYA,WAAZ;;WAAYA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["import { NotificationGroup } from '../types/MessageCenter';\nimport Namespace from '../types/Namespace';\nimport {\n  DurationInSeconds,\n  IntervalInMilliseconds,\n  RawDate,\n  TimeInMilliseconds,\n  TimeRange,\n  UserName\n} from '../types/Common';\nimport {\n  EdgeLabelMode,\n  GraphDefinition,\n  GraphType,\n  Layout,\n  NodeParamsType,\n  SummaryData,\n  TrafficRate\n} from '../types/Graph';\nimport { TLSStatus } from '../types/TLSStatus';\nimport { StatusState } from '../types/StatusState';\nimport { TourInfo } from 'components/Tour/TourStop';\nimport { ComponentStatus } from '../types/IstioStatus';\nimport { JaegerState } from 'reducers/JaegerState';\nimport { MetricsStatsState } from 'reducers/MetricsStatsState';\nimport { CertsInfo } from 'types/CertsInfo';\n\n// Store is the Redux Data store\n\nexport interface GlobalState {\n  readonly loadingCounter: number;\n  readonly isPageVisible: boolean;\n  lastRefreshAt: TimeInMilliseconds;\n}\n\nexport interface NamespaceState {\n  readonly activeNamespaces: Namespace[];\n  readonly items?: Namespace[];\n  readonly isFetching: boolean;\n  readonly lastUpdated?: Date;\n  readonly filter: string;\n}\n\n// Various pages are described here with their various sections\nexport interface GraphToolbarState {\n  // dropdown props\n  edgeLabels: EdgeLabelMode[];\n  graphType: GraphType;\n  trafficRates: TrafficRate[];\n  // find props\n  findValue: string;\n  hideValue: string;\n  showFindHelp: boolean;\n  // Toggle props\n  boxByCluster: boolean;\n  boxByNamespace: boolean;\n  compressOnHide: boolean;\n  showIdleEdges: boolean;\n  showIdleNodes: boolean;\n  showLegend: boolean;\n  showMissingSidecars: boolean;\n  showOperationNodes: boolean;\n  showSecurity: boolean;\n  showServiceNodes: boolean;\n  showTrafficAnimation: boolean;\n  showVirtualServices: boolean;\n}\n\nexport interface MessageCenterState {\n  nextId: number; // This likely will go away once we have persistence\n  groups: NotificationGroup[];\n  hidden: boolean;\n  expanded: boolean;\n  expandedGroupId?: string;\n}\n\nexport interface GraphState {\n  graphDefinition: GraphDefinition | null; // Not for consumption. Only for \"Debug\" dialog.\n  layout: Layout;\n  node?: NodeParamsType;\n  summaryData: SummaryData | null;\n  toolbarState: GraphToolbarState;\n  updateTime: TimeInMilliseconds;\n}\n\nexport enum LoginStatus {\n  logging,\n  loggedIn,\n  loggedOut,\n  error,\n  expired\n}\n\nexport interface LoginSession {\n  expiresOn: RawDate;\n  username: UserName;\n}\n\nexport interface LoginState {\n  landingRoute?: string;\n  message: string;\n  session?: LoginSession;\n  status: LoginStatus;\n}\n\nexport interface InterfaceSettings {\n  navCollapse: boolean;\n}\n\nexport interface UserSettings {\n  duration: DurationInSeconds;\n  interface: InterfaceSettings;\n  refreshInterval: IntervalInMilliseconds;\n  replayActive: boolean;\n  replayQueryTime: TimeInMilliseconds;\n  timeRange: TimeRange;\n}\n\nexport interface TourState {\n  activeTour?: TourInfo;\n  activeStop?: number; // index into the TourInfo.stops array\n}\n\n// This defines the Kiali Global Application State\nexport interface KialiAppState {\n  // Global state === across multiple pages\n  // could also be session state\n  globalState: GlobalState;\n  statusState: StatusState;\n  meshTLSStatus: TLSStatus;\n  istioStatus: ComponentStatus[];\n  istioCertsInfo: CertsInfo[];\n  /** Page Settings */\n  authentication: LoginState;\n  messageCenter: MessageCenterState;\n  namespaces: NamespaceState;\n  graph: GraphState;\n  /** User Settings */\n  userSettings: UserSettings;\n  /** Jaeger Settings */\n  jaegerState: JaegerState;\n  tourState: TourState;\n  metricsStats: MetricsStatsState;\n}\n"]},"metadata":{},"sourceType":"module"}
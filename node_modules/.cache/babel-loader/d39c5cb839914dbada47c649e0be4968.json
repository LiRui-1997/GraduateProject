{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/IstioWizards/GatewaySelector.tsx\";\nimport * as React from 'react';\nimport { Checkbox, Form, FormGroup, FormSelect, FormSelectOption, Radio, Switch, TextInput } from '@patternfly/react-core';\nimport { GATEWAY_TOOLTIP, wizardTooltip } from './WizardHelp';\nvar GatewayForm;\n\n(function (GatewayForm) {\n  GatewayForm[GatewayForm[\"SWITCH\"] = 0] = \"SWITCH\";\n  GatewayForm[GatewayForm[\"MESH\"] = 1] = \"MESH\";\n  GatewayForm[GatewayForm[\"GW_HOSTS\"] = 2] = \"GW_HOSTS\";\n  GatewayForm[GatewayForm[\"SELECT\"] = 3] = \"SELECT\";\n  GatewayForm[GatewayForm[\"GATEWAY_SELECTED\"] = 4] = \"GATEWAY_SELECTED\";\n  GatewayForm[GatewayForm[\"PORT\"] = 5] = \"PORT\";\n})(GatewayForm || (GatewayForm = {}));\n\nvar GatewaySelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(GatewaySelector, _React$Component);\n\n  var _super = _createSuper(GatewaySelector);\n\n  function GatewaySelector(props) {\n    var _this;\n\n    _classCallCheck(this, GatewaySelector);\n\n    _this = _super.call(this, props);\n\n    _this.checkGwHosts = function (gwHosts) {\n      var hosts = gwHosts.split(',');\n\n      for (var i = 0; i < hosts.length; i++) {\n        if (hosts[i] === '*') {\n          continue;\n        }\n\n        if (!hosts[i].includes('.')) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    _this.onFormChange = function (component, value) {\n      switch (component) {\n        case GatewayForm.SWITCH:\n          _this.setState(function (prevState) {\n            return {\n              addGateway: !prevState.addGateway\n            };\n          }, function () {\n            return _this.props.onGatewayChange(true, _this.state);\n          });\n\n          break;\n\n        case GatewayForm.MESH:\n          _this.setState(function (prevState) {\n            return {\n              addMesh: !prevState.addMesh\n            };\n          }, function () {\n            return _this.props.onGatewayChange(true, _this.state);\n          });\n\n          break;\n\n        case GatewayForm.GW_HOSTS:\n          _this.setState({\n            gwHosts: value,\n            gwHostsValid: _this.checkGwHosts(value)\n          }, function () {\n            return _this.props.onGatewayChange(_this.state.gwHostsValid, _this.state);\n          });\n\n          break;\n\n        case GatewayForm.SELECT:\n          _this.setState({\n            newGateway: value === 'true'\n          }, function () {\n            return _this.props.onGatewayChange(true, _this.state);\n          });\n\n          break;\n\n        case GatewayForm.GATEWAY_SELECTED:\n          _this.setState({\n            selectedGateway: value\n          }, function () {\n            return _this.props.onGatewayChange(true, _this.state);\n          });\n\n          break;\n\n        case GatewayForm.PORT:\n          _this.setState({\n            port: +value\n          }, function () {\n            return _this.props.onGatewayChange(true, _this.state);\n          });\n\n          break;\n\n        default: // No default action\n\n      }\n    };\n\n    _this.state = {\n      addGateway: props.hasGateway,\n      gwHosts: '*',\n      gwHostsValid: true,\n      newGateway: props.gateways.length === 0,\n      selectedGateway: props.gateways.length > 0 ? props.gateway !== '' ? props.gateway : props.gateways[0] : '',\n      addMesh: props.isMesh,\n      port: 80\n    };\n    return _this;\n  }\n\n  _createClass(GatewaySelector, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Form, {\n        isHorizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Add Gateway\",\n        fieldId: \"gatewaySwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"advanced-gwSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addGateway,\n        onChange: function onChange() {\n          return _this2.onFormChange(GatewayForm.SWITCH, '');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      }, wizardTooltip(GATEWAY_TOOLTIP))), this.state.addGateway && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"includeMesh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        id: \"includeMesh\",\n        label: /*#__PURE__*/React.createElement(React.Fragment, null, \"Include \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }\n        }, \"mesh\"), \" gateway\"),\n        isDisabled: !this.state.addGateway,\n        isChecked: this.state.addMesh,\n        onChange: function onChange() {\n          return _this2.onFormChange(GatewayForm.MESH, '');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"selectGateway\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: \"existingGateway\",\n        name: \"selectGateway\",\n        label: \"Select Gateway\",\n        isDisabled: !this.state.addGateway || this.props.gateways.length === 0,\n        isChecked: !this.state.newGateway,\n        onChange: function onChange() {\n          return _this2.onFormChange(GatewayForm.SELECT, 'false');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        id: \"createGateway\",\n        name: \"selectGateway\",\n        label: \"Create Gateway\",\n        isDisabled: !this.state.addGateway,\n        isChecked: this.state.newGateway,\n        onChange: function onChange() {\n          return _this2.onFormChange(GatewayForm.SELECT, 'true');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }\n      })), !this.state.newGateway && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"selectGateway\",\n        label: \"Gateway\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }\n      }, this.props.gateways.length > 0 && /*#__PURE__*/React.createElement(FormSelect, {\n        id: \"selectGateway\",\n        value: this.state.selectedGateway,\n        isDisabled: !this.state.addGateway || this.state.newGateway || this.props.gateways.length === 0,\n        onChange: function onChange(gw) {\n          return _this2.onFormChange(GatewayForm.GATEWAY_SELECTED, gw);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 19\n        }\n      }, this.props.gateways.map(function (gw) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: gw,\n          value: gw,\n          label: gw,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 23\n          }\n        });\n      })), this.props.gateways.length === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, \"There are no gateways to select.\")), this.state.newGateway && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"gwPort\",\n        label: \"Port\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwPort\",\n        name: \"gwPort\",\n        type: \"number\",\n        isDisabled: !this.state.addGateway || !this.state.newGateway,\n        value: this.state.port,\n        onChange: function onChange(value) {\n          return _this2.onFormChange(GatewayForm.PORT, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"gwHosts\",\n        label: \"Gateway Hosts\",\n        helperText: \"One or more hosts exposed by this gateway. Enter one or multiple hosts separated by comma.\",\n        helperTextInvalid: \"Gateway hosts should be specified using FQDN format or '*' wildcard.\",\n        isValid: this.state.gwHostsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwHosts\",\n        name: \"gwHosts\",\n        isDisabled: !this.state.addGateway || !this.state.newGateway,\n        value: this.state.gwHosts,\n        onChange: function onChange(value) {\n          return _this2.onFormChange(GatewayForm.GW_HOSTS, value);\n        },\n        isValid: this.state.gwHostsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 19\n        }\n      })))));\n    }\n  }]);\n\n  return GatewaySelector;\n}(React.Component);\n\nexport default GatewaySelector;","map":{"version":3,"sources":["/root/GraduateProject/src/components/IstioWizards/GatewaySelector.tsx"],"names":["React","Checkbox","Form","FormGroup","FormSelect","FormSelectOption","Radio","Switch","TextInput","GATEWAY_TOOLTIP","wizardTooltip","GatewayForm","GatewaySelector","props","checkGwHosts","gwHosts","hosts","split","i","length","includes","onFormChange","component","value","SWITCH","setState","prevState","addGateway","onGatewayChange","state","MESH","addMesh","GW_HOSTS","gwHostsValid","SELECT","newGateway","GATEWAY_SELECTED","selectedGateway","PORT","port","hasGateway","gateways","gateway","isMesh","gw","map","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Checkbox,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Radio,\n  Switch,\n  TextInput\n} from '@patternfly/react-core';\nimport { GATEWAY_TOOLTIP, wizardTooltip } from './WizardHelp';\n\ntype Props = {\n  serviceName: string;\n  hasGateway: boolean;\n  gateway: string;\n  isMesh: boolean;\n  gateways: string[];\n  onGatewayChange: (valid: boolean, gateway: GatewaySelectorState) => void;\n};\n\nexport type GatewaySelectorState = {\n  addGateway: boolean;\n  gwHosts: string;\n  gwHostsValid: boolean;\n  newGateway: boolean;\n  selectedGateway: string;\n  addMesh: boolean;\n  port: number;\n};\n\nenum GatewayForm {\n  SWITCH,\n  MESH,\n  GW_HOSTS,\n  SELECT,\n  GATEWAY_SELECTED,\n  PORT\n}\n\nclass GatewaySelector extends React.Component<Props, GatewaySelectorState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      addGateway: props.hasGateway,\n      gwHosts: '*',\n      gwHostsValid: true,\n      newGateway: props.gateways.length === 0,\n      selectedGateway: props.gateways.length > 0 ? (props.gateway !== '' ? props.gateway : props.gateways[0]) : '',\n      addMesh: props.isMesh,\n      port: 80\n    };\n  }\n\n  checkGwHosts = (gwHosts: string): boolean => {\n    const hosts = gwHosts.split(',');\n    for (let i = 0; i < hosts.length; i++) {\n      if (hosts[i] === '*') {\n        continue;\n      }\n      if (!hosts[i].includes('.')) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  onFormChange = (component: GatewayForm, value: string) => {\n    switch (component) {\n      case GatewayForm.SWITCH:\n        this.setState(\n          prevState => {\n            return {\n              addGateway: !prevState.addGateway\n            };\n          },\n          () => this.props.onGatewayChange(true, this.state)\n        );\n        break;\n      case GatewayForm.MESH:\n        this.setState(\n          prevState => {\n            return {\n              addMesh: !prevState.addMesh\n            };\n          },\n          () => this.props.onGatewayChange(true, this.state)\n        );\n        break;\n      case GatewayForm.GW_HOSTS:\n        this.setState(\n          {\n            gwHosts: value,\n            gwHostsValid: this.checkGwHosts(value)\n          },\n          () => this.props.onGatewayChange(this.state.gwHostsValid, this.state)\n        );\n        break;\n      case GatewayForm.SELECT:\n        this.setState(\n          {\n            newGateway: value === 'true'\n          },\n          () => this.props.onGatewayChange(true, this.state)\n        );\n        break;\n      case GatewayForm.GATEWAY_SELECTED:\n        this.setState(\n          {\n            selectedGateway: value\n          },\n          () => this.props.onGatewayChange(true, this.state)\n        );\n        break;\n      case GatewayForm.PORT:\n        this.setState(\n          {\n            port: +value\n          },\n          () => this.props.onGatewayChange(true, this.state)\n        );\n        break;\n      default:\n      // No default action\n    }\n  };\n\n  render() {\n    return (\n      <Form isHorizontal={true}>\n        <FormGroup label=\"Add Gateway\" fieldId=\"gatewaySwitch\">\n          <Switch\n            id=\"advanced-gwSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addGateway}\n            onChange={() => this.onFormChange(GatewayForm.SWITCH, '')}\n          />\n          <span>{wizardTooltip(GATEWAY_TOOLTIP)}</span>\n        </FormGroup>\n        {this.state.addGateway && (\n          <>\n            <FormGroup fieldId=\"includeMesh\">\n              <Checkbox\n                id=\"includeMesh\"\n                label={\n                  <>\n                    Include <b>mesh</b> gateway\n                  </>\n                }\n                isDisabled={!this.state.addGateway}\n                isChecked={this.state.addMesh}\n                onChange={() => this.onFormChange(GatewayForm.MESH, '')}\n              />\n            </FormGroup>\n            <FormGroup fieldId=\"selectGateway\">\n              <Radio\n                id=\"existingGateway\"\n                name=\"selectGateway\"\n                label=\"Select Gateway\"\n                isDisabled={!this.state.addGateway || this.props.gateways.length === 0}\n                isChecked={!this.state.newGateway}\n                onChange={() => this.onFormChange(GatewayForm.SELECT, 'false')}\n              />\n              <Radio\n                id=\"createGateway\"\n                name=\"selectGateway\"\n                label=\"Create Gateway\"\n                isDisabled={!this.state.addGateway}\n                isChecked={this.state.newGateway}\n                onChange={() => this.onFormChange(GatewayForm.SELECT, 'true')}\n              />\n            </FormGroup>\n            {!this.state.newGateway && (\n              <FormGroup fieldId=\"selectGateway\" label=\"Gateway\">\n                {this.props.gateways.length > 0 && (\n                  <FormSelect\n                    id=\"selectGateway\"\n                    value={this.state.selectedGateway}\n                    isDisabled={!this.state.addGateway || this.state.newGateway || this.props.gateways.length === 0}\n                    onChange={(gw: string) => this.onFormChange(GatewayForm.GATEWAY_SELECTED, gw)}\n                  >\n                    {this.props.gateways.map(gw => (\n                      <FormSelectOption key={gw} value={gw} label={gw} />\n                    ))}\n                  </FormSelect>\n                )}\n                {this.props.gateways.length === 0 && <>There are no gateways to select.</>}\n              </FormGroup>\n            )}\n            {this.state.newGateway && (\n              <>\n                <FormGroup fieldId=\"gwPort\" label=\"Port\">\n                  <TextInput\n                    id=\"gwPort\"\n                    name=\"gwPort\"\n                    type=\"number\"\n                    isDisabled={!this.state.addGateway || !this.state.newGateway}\n                    value={this.state.port}\n                    onChange={value => this.onFormChange(GatewayForm.PORT, value)}\n                  />\n                </FormGroup>\n                <FormGroup\n                  fieldId=\"gwHosts\"\n                  label=\"Gateway Hosts\"\n                  helperText=\"One or more hosts exposed by this gateway. Enter one or multiple hosts separated by comma.\"\n                  helperTextInvalid=\"Gateway hosts should be specified using FQDN format or '*' wildcard.\"\n                  isValid={this.state.gwHostsValid}\n                >\n                  <TextInput\n                    id=\"gwHosts\"\n                    name=\"gwHosts\"\n                    isDisabled={!this.state.addGateway || !this.state.newGateway}\n                    value={this.state.gwHosts}\n                    onChange={value => this.onFormChange(GatewayForm.GW_HOSTS, value)}\n                    isValid={this.state.gwHostsValid}\n                  />\n                </FormGroup>\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    );\n  }\n}\n\nexport default GatewaySelector;\n"]},"metadata":{},"sourceType":"module"}
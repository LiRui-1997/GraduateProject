{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar isVisibleMetric = function isVisibleMetric(labels, labelValues) {\n  for (var promLabelName in labels) {\n    if (Object.prototype.hasOwnProperty.call(labels, promLabelName)) {\n      var actualValue = labels[promLabelName];\n      var values = labelValues.get(promLabelName);\n\n      if (values && Object.prototype.hasOwnProperty.call(values, actualValue) && !values[actualValue]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport var filterAndRenameMetric = function filterAndRenameMetric(metrics, labels) {\n  var filtered = metrics.filter(function (m) {\n    return isVisibleMetric(m.labels, labels.values);\n  });\n  return renameMetrics(filtered, labels.prettifier);\n};\n\nvar mapStatForDisplay = function mapStatForDisplay(stat) {\n  switch (stat) {\n    case '0.5':\n      return 'p50';\n\n    case '0.95':\n      return 'p95';\n\n    case '0.99':\n      return 'p99';\n\n    case '0.999':\n      return 'p99.9';\n\n    default:\n      return stat;\n  }\n};\n\nvar renameMetrics = function renameMetrics(metrics, labelPrettifier) {\n  var hasSeveralFamilyNames = false;\n\n  if (metrics.length > 0) {\n    var firstName = metrics[0].name;\n    hasSeveralFamilyNames = metrics.some(function (s) {\n      return s.name !== firstName;\n    });\n  }\n\n  var multipleValuesLabels = getMultipleValuesLabels(metrics);\n  return metrics.map(function (m) {\n    var name = m.name;\n    var stat = mapStatForDisplay(m.stat);\n    var otherLabels = Object.entries(m.labels).filter(function (e) {\n      return multipleValuesLabels.has(e[0]);\n    }).map(function (e) {\n      return labelPrettifier ? labelPrettifier(e[0], e[1]) : e[1];\n    });\n    var labels = (stat ? [stat] : []).concat(otherLabels).join(',');\n    var finalName = '';\n\n    if (labels === '') {\n      // E.g. Serie A\n      finalName = name;\n    } else if (hasSeveralFamilyNames) {\n      // E.g. Serie A [p99,another_label_value]\n      finalName = \"\".concat(name, \" [\").concat(labels, \"]\");\n    } else {\n      // E.g. p99,another_label_value\n      // (since we only have a single serie name, it is considered implicit and we save some characters space)\n      finalName = labels;\n    }\n\n    return _objectSpread(_objectSpread({}, m), {}, {\n      name: finalName\n    });\n  });\n};\n\nvar getMultipleValuesLabels = function getMultipleValuesLabels(metrics) {\n  var singleValueLabels = new Map();\n  var multipleValuesLabels = new Set();\n  metrics.forEach(function (m) {\n    Object.entries(m.labels).forEach(function (e) {\n      if (multipleValuesLabels.has(e[0])) {\n        return;\n      }\n\n      var value = singleValueLabels.get(e[0]);\n\n      if (value === undefined) {\n        singleValueLabels.set(e[0], e[1]);\n      } else if (value !== e[1]) {\n        singleValueLabels.delete(e[0]);\n        multipleValuesLabels.add(e[0]);\n      }\n    });\n  });\n  return multipleValuesLabels;\n};\n\nexport var generateKey = function generateKey(metrics, chartName) {\n  if (metrics.length === 0) {\n    return 'blank';\n  }\n\n  var labelNames = Object.keys(metrics[0].labels);\n\n  if (labelNames.length === 0) {\n    return chartName;\n  }\n\n  return chartName + '-' + labelNames.join('-');\n};","map":{"version":3,"sources":["/root/kiali-ui/src/utils/TimeSeriesUtils.ts"],"names":["isVisibleMetric","labels","labelValues","promLabelName","Object","prototype","hasOwnProperty","call","actualValue","values","get","filterAndRenameMetric","metrics","filtered","filter","m","renameMetrics","prettifier","mapStatForDisplay","stat","labelPrettifier","hasSeveralFamilyNames","length","firstName","name","some","s","multipleValuesLabels","getMultipleValuesLabels","map","otherLabels","entries","e","has","concat","join","finalName","singleValueLabels","Map","Set","forEach","value","undefined","set","delete","add","generateKey","chartName","labelNames","keys"],"mappings":"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","sourcesContent":["import { AllPromLabelsValues, Labels, Metric } from 'types/Metrics';\n\ntype KVMapper = (key: string, value: string) => string;\nexport type LabelsInfo = {\n  values: AllPromLabelsValues;\n  prettifier?: KVMapper;\n};\n\nconst isVisibleMetric = (labels: Labels, labelValues: AllPromLabelsValues): boolean => {\n  for (const promLabelName in labels) {\n    if (Object.prototype.hasOwnProperty.call(labels, promLabelName)) {\n      const actualValue = labels[promLabelName];\n      const values = labelValues.get(promLabelName);\n      if (values && Object.prototype.hasOwnProperty.call(values, actualValue) && !values[actualValue]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport const filterAndRenameMetric = (metrics: Metric[], labels: LabelsInfo): Metric[] => {\n  const filtered = metrics.filter(m => isVisibleMetric(m.labels, labels.values));\n  return renameMetrics(filtered, labels.prettifier);\n};\n\nconst mapStatForDisplay = (stat?: string): string | undefined => {\n  switch (stat) {\n    case '0.5':\n      return 'p50';\n    case '0.95':\n      return 'p95';\n    case '0.99':\n      return 'p99';\n    case '0.999':\n      return 'p99.9';\n    default:\n      return stat;\n  }\n};\n\nconst renameMetrics = (metrics: Metric[], labelPrettifier?: KVMapper): Metric[] => {\n  let hasSeveralFamilyNames = false;\n  if (metrics.length > 0) {\n    const firstName = metrics[0].name;\n    hasSeveralFamilyNames = metrics.some(s => s.name !== firstName);\n  }\n  const multipleValuesLabels = getMultipleValuesLabels(metrics);\n  return metrics.map(m => {\n    const name = m.name;\n    const stat = mapStatForDisplay(m.stat);\n    const otherLabels = Object.entries(m.labels)\n      .filter(e => multipleValuesLabels.has(e[0]))\n      .map(e => (labelPrettifier ? labelPrettifier(e[0], e[1]) : e[1]));\n    const labels = (stat ? [stat] : []).concat(otherLabels).join(',');\n    let finalName = '';\n    if (labels === '') {\n      // E.g. Serie A\n      finalName = name;\n    } else if (hasSeveralFamilyNames) {\n      // E.g. Serie A [p99,another_label_value]\n      finalName = `${name} [${labels}]`;\n    } else {\n      // E.g. p99,another_label_value\n      // (since we only have a single serie name, it is considered implicit and we save some characters space)\n      finalName = labels;\n    }\n    return {\n      ...m,\n      name: finalName\n    };\n  });\n};\n\nconst getMultipleValuesLabels = (metrics: Metric[]): Set<string> => {\n  const singleValueLabels = new Map<string, string>();\n  const multipleValuesLabels = new Set<string>();\n  metrics.forEach(m => {\n    Object.entries(m.labels).forEach(e => {\n      if (multipleValuesLabels.has(e[0])) {\n        return;\n      }\n      const value = singleValueLabels.get(e[0]);\n      if (value === undefined) {\n        singleValueLabels.set(e[0], e[1]);\n      } else if (value !== e[1]) {\n        singleValueLabels.delete(e[0]);\n        multipleValuesLabels.add(e[0]);\n      }\n    });\n  });\n  return multipleValuesLabels;\n};\n\nexport const generateKey = (metrics: Metric[], chartName: string): string => {\n  if (metrics.length === 0) {\n    return 'blank';\n  }\n\n  const labelNames = Object.keys(metrics[0].labels);\n  if (labelNames.length === 0) {\n    return chartName;\n  }\n\n  return chartName + '-' + labelNames.join('-');\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/IstioConfigNew/SidecarForm.tsx\";\nimport * as React from 'react';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors'; // Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\n\nimport { Button, FormGroup, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { isSidecarHostValid } from '../../utils/IstioConfigUtils';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nvar headerCells = [{\n  title: 'Egress Host',\n  transforms: [cellWidth(60)],\n  props: {}\n}, {\n  title: '',\n  props: {}\n}];\nvar noEgressHostsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\nvar hostsHelperText = 'Enter a valid namespace/FQDN Egress host.';\nexport var SIDECAR = 'Sidecar';\nexport var SIDECARS = 'sidecars'; // Gateway and Sidecar states are consolidated in the parent page\n\nexport var isSidecarStateValid = function isSidecarStateValid(s) {\n  return s.egressHosts.length > 0 && (!s.addWorkloadSelector || s.addWorkloadSelector && s.workloadSelectorValid);\n};\nexport var initSidecar = function initSidecar(initHost) {\n  return {\n    addEgressHost: {\n      host: ''\n    },\n    addWorkloadSelector: false,\n    egressHosts: [{\n      host: initHost\n    }],\n    validEgressHost: false,\n    workloadSelectorValid: false,\n    workloadSelectorLabels: ''\n  };\n};\n\nvar SidecarForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(SidecarForm, _React$Component);\n\n  var _super = _createSuper(SidecarForm);\n\n  function SidecarForm(props) {\n    var _this;\n\n    _classCallCheck(this, SidecarForm);\n\n    _this = _super.call(this, props);\n\n    _this.actionResolver = function (rowData, _ref) {\n      var rowIndex = _ref.rowIndex;\n      var removeAction = {\n        title: 'Remove Server',\n        // @ts-ignore\n        onClick: function onClick(event, rowIndex, _rowData, _extraData) {\n          _this.setState(function (prevState) {\n            prevState.egressHosts.splice(rowIndex, 1);\n            return {\n              egressHosts: prevState.egressHosts\n            };\n          }, function () {\n            return _this.props.onChange(_this.state);\n          });\n        }\n      };\n\n      if (rowIndex < _this.state.egressHosts.length) {\n        return [removeAction];\n      }\n\n      return [];\n    };\n\n    _this.onAddHost = function (value, _) {\n      var host = value.trim();\n\n      _this.setState({\n        addEgressHost: {\n          host: host\n        },\n        validEgressHost: isSidecarHostValid(host)\n      });\n    };\n\n    _this.onAddEgressHost = function () {\n      _this.setState(function (prevState) {\n        prevState.egressHosts.push(_this.state.addEgressHost);\n        return {\n          egressHosts: prevState.egressHosts,\n          addEgressHost: {\n            host: ''\n          }\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.addWorkloadLabels = function (value, _) {\n      if (value.length === 0) {\n        _this.setState({\n          workloadSelectorValid: false,\n          workloadSelectorLabels: ''\n        }, function () {\n          return _this.props.onChange(_this.state);\n        });\n\n        return;\n      }\n\n      value = value.trim();\n      var labels = value.split(',');\n      var isValid = true; // Some smoke validation rules for the labels\n\n      for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n\n        if (label.indexOf('=') < 0) {\n          isValid = false;\n          break;\n        }\n\n        var splitLabel = label.split('=');\n\n        if (splitLabel.length !== 2) {\n          isValid = false;\n          break;\n        }\n\n        if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n          isValid = false;\n          break;\n        }\n      }\n\n      _this.setState({\n        workloadSelectorValid: isValid,\n        workloadSelectorLabels: value\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.state = initSidecar('');\n    return _this;\n  }\n\n  _createClass(SidecarForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState(this.props.sidecar);\n    } // @ts-ignore\n\n  }, {\n    key: \"rows\",\n    value: function rows() {\n      return this.state.egressHosts.map(function (eHost, i) {\n        return {\n          key: 'eH' + i,\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, eHost.host), '']\n        };\n      }).concat([{\n        key: 'eHNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.addEgressHost.host,\n          type: \"text\",\n          id: \"addEgressHost\",\n          key: \"addEgressHost\",\n          \"aria-describedby\": \"add egress host\",\n          name: \"addHost\",\n          onChange: this.onAddHost,\n          isValid: this.state.validEgressHost,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }\n        }), !this.state.validEgressHost && /*#__PURE__*/React.createElement(\"div\", {\n          key: \"hostsHelperText\",\n          className: noEgressHostsStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }\n        }, hostsHelperText)), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          variant: \"link\",\n          icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 23\n            }\n          }),\n          isDisabled: !this.state.validEgressHost,\n          onClick: this.onAddEgressHost,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }\n        }))]\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Workload Selector\",\n        fieldId: \"workloadSelectorSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"workloadSelectorSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addWorkloadSelector,\n        onChange: function onChange() {\n          _this2.setState(function (prevState) {\n            return {\n              addWorkloadSelector: !prevState.addWorkloadSelector\n            };\n          }, function () {\n            return _this2.props.onChange(_this2.state);\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }\n      })), this.state.addWorkloadSelector && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"workloadLabels\",\n        label: \"Labels\",\n        helperText: \"One or more labels to select a workload where the Sidecar is applied.\",\n        helperTextInvalid: \"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\",\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwHosts\",\n        name: \"gwHosts\",\n        isDisabled: !this.state.addWorkloadSelector,\n        value: this.state.workloadSelectorLabels,\n        onChange: this.addWorkloadLabels,\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Egress\",\n        fieldId: \"egressHostTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Egress Hosts\",\n        cells: headerCells,\n        rows: this.rows() // @ts-ignore\n        ,\n        actionResolver: this.actionResolver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }\n      })), this.state.egressHosts.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: noEgressHostsStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }\n      }, \"Sidecar has no Egress Hosts Defined\")));\n    }\n  }]);\n\n  return SidecarForm;\n}(React.Component);\n\nexport default SidecarForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/IstioConfigNew/SidecarForm.tsx"],"names":["React","cellWidth","Table","TableBody","TableHeader","style","PFColors","Button","FormGroup","Switch","TextInputBase","TextInput","isSidecarHostValid","PlusCircleIcon","headerCells","title","transforms","props","noEgressHostsStyle","marginTop","color","Red100","hostsHelperText","SIDECAR","SIDECARS","isSidecarStateValid","s","egressHosts","length","addWorkloadSelector","workloadSelectorValid","initSidecar","initHost","addEgressHost","host","validEgressHost","workloadSelectorLabels","SidecarForm","actionResolver","rowData","rowIndex","removeAction","onClick","event","_rowData","_extraData","setState","prevState","splice","onChange","state","onAddHost","value","_","trim","onAddEgressHost","push","addWorkloadLabels","labels","split","isValid","i","label","indexOf","splitLabel","sidecar","map","eHost","key","cells","concat","rows","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\n// Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\nimport { Button, FormGroup, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { isSidecarHostValid } from '../../utils/IstioConfigUtils';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nconst headerCells: ICell[] = [\n  {\n    title: 'Egress Host',\n    transforms: [cellWidth(60) as any],\n    props: {}\n  },\n  {\n    title: '',\n    props: {}\n  }\n];\n\nconst noEgressHostsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\n\nconst hostsHelperText = 'Enter a valid namespace/FQDN Egress host.';\n\nexport type EgressHost = {\n  host: string;\n};\n\ntype Props = {\n  sidecar: SidecarState;\n  onChange: (sidecar: SidecarState) => void;\n};\n\nexport const SIDECAR = 'Sidecar';\nexport const SIDECARS = 'sidecars';\n\n// Gateway and Sidecar states are consolidated in the parent page\nexport type SidecarState = {\n  addEgressHost: EgressHost;\n  addWorkloadSelector: boolean;\n  egressHosts: EgressHost[];\n  validEgressHost: boolean;\n  workloadSelectorValid: boolean;\n  workloadSelectorLabels: string;\n};\n\nexport const isSidecarStateValid = (s: SidecarState): boolean => {\n  return s.egressHosts.length > 0 && (!s.addWorkloadSelector || (s.addWorkloadSelector && s.workloadSelectorValid));\n};\n\nexport const initSidecar = (initHost: string): SidecarState => {\n  return {\n    addEgressHost: {\n      host: ''\n    },\n    addWorkloadSelector: false,\n    egressHosts: [\n      {\n        host: initHost\n      }\n    ],\n    validEgressHost: false,\n    workloadSelectorValid: false,\n    workloadSelectorLabels: ''\n  };\n};\n\nclass SidecarForm extends React.Component<Props, SidecarState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initSidecar('');\n  }\n\n  componentDidMount() {\n    this.setState(this.props.sidecar);\n  }\n\n  // @ts-ignore\n  actionResolver = (rowData, { rowIndex }) => {\n    const removeAction = {\n      title: 'Remove Server',\n      // @ts-ignore\n      onClick: (event, rowIndex, _rowData, _extraData) => {\n        this.setState(\n          prevState => {\n            prevState.egressHosts.splice(rowIndex, 1);\n            return {\n              egressHosts: prevState.egressHosts\n            };\n          },\n          () => this.props.onChange(this.state)\n        );\n      }\n    };\n    if (rowIndex < this.state.egressHosts.length) {\n      return [removeAction];\n    }\n    return [];\n  };\n\n  onAddHost = (value: string, _) => {\n    const host = value.trim();\n    this.setState({\n      addEgressHost: {\n        host: host\n      },\n      validEgressHost: isSidecarHostValid(host)\n    });\n  };\n\n  onAddEgressHost = () => {\n    this.setState(\n      prevState => {\n        prevState.egressHosts.push(this.state.addEgressHost);\n        return {\n          egressHosts: prevState.egressHosts,\n          addEgressHost: {\n            host: ''\n          }\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  addWorkloadLabels = (value: string, _) => {\n    if (value.length === 0) {\n      this.setState(\n        {\n          workloadSelectorValid: false,\n          workloadSelectorLabels: ''\n        },\n        () => this.props.onChange(this.state)\n      );\n      return;\n    }\n    value = value.trim();\n    const labels: string[] = value.split(',');\n    let isValid = true;\n    // Some smoke validation rules for the labels\n    for (let i = 0; i < labels.length; i++) {\n      const label = labels[i];\n      if (label.indexOf('=') < 0) {\n        isValid = false;\n        break;\n      }\n      const splitLabel: string[] = label.split('=');\n      if (splitLabel.length !== 2) {\n        isValid = false;\n        break;\n      }\n      if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n        isValid = false;\n        break;\n      }\n    }\n    this.setState(\n      {\n        workloadSelectorValid: isValid,\n        workloadSelectorLabels: value\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  rows() {\n    return this.state.egressHosts\n      .map((eHost, i) => ({\n        key: 'eH' + i,\n        cells: [<>{eHost.host}</>, '']\n      }))\n      .concat([\n        {\n          key: 'eHNew',\n          cells: [\n            <>\n              <TextInput\n                value={this.state.addEgressHost.host}\n                type=\"text\"\n                id=\"addEgressHost\"\n                key=\"addEgressHost\"\n                aria-describedby=\"add egress host\"\n                name=\"addHost\"\n                onChange={this.onAddHost}\n                isValid={this.state.validEgressHost}\n              />\n              {!this.state.validEgressHost && (\n                <div key=\"hostsHelperText\" className={noEgressHostsStyle}>\n                  {hostsHelperText}\n                </div>\n              )}\n            </>,\n            <>\n              <Button\n                variant=\"link\"\n                icon={<PlusCircleIcon />}\n                isDisabled={!this.state.validEgressHost}\n                onClick={this.onAddEgressHost}\n              />\n            </>\n          ]\n        }\n      ]);\n  }\n\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Workload Selector\" fieldId=\"workloadSelectorSwitch\">\n          <Switch\n            id=\"workloadSelectorSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addWorkloadSelector}\n            onChange={() => {\n              this.setState(\n                prevState => ({\n                  addWorkloadSelector: !prevState.addWorkloadSelector\n                }),\n                () => this.props.onChange(this.state)\n              );\n            }}\n          />\n        </FormGroup>\n        {this.state.addWorkloadSelector && (\n          <FormGroup\n            fieldId=\"workloadLabels\"\n            label=\"Labels\"\n            helperText=\"One or more labels to select a workload where the Sidecar is applied.\"\n            helperTextInvalid=\"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\"\n            isValid={this.state.workloadSelectorValid}\n          >\n            <TextInput\n              id=\"gwHosts\"\n              name=\"gwHosts\"\n              isDisabled={!this.state.addWorkloadSelector}\n              value={this.state.workloadSelectorLabels}\n              onChange={this.addWorkloadLabels}\n              isValid={this.state.workloadSelectorValid}\n            />\n          </FormGroup>\n        )}\n        <FormGroup label=\"Egress\" fieldId=\"egressHostTable\">\n          <Table\n            aria-label=\"Egress Hosts\"\n            cells={headerCells}\n            rows={this.rows()}\n            // @ts-ignore\n            actionResolver={this.actionResolver}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {this.state.egressHosts.length === 0 && (\n            <div className={noEgressHostsStyle}>Sidecar has no Egress Hosts Defined</div>\n          )}\n        </FormGroup>\n      </>\n    );\n  }\n}\n\nexport default SidecarForm;\n"]},"metadata":{},"sourceType":"module"}
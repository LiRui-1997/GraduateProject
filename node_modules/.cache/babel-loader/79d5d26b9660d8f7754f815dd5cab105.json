{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/CytoscapeGraph/EmptyGraphLayout.tsx\";\nimport * as React from 'react';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport * as _ from 'lodash';\nimport { KialiIcon } from '../../config/KialiIcon';\nvar emptyStateStyle = style({\n  height: '98%',\n  marginRight: 'auto',\n  marginLeft: 'auto',\n  marginBottom: 10,\n  marginTop: 10\n});\n\nvar EmptyGraphLayout = /*#__PURE__*/function (_React$Component) {\n  _inherits(EmptyGraphLayout, _React$Component);\n\n  var _super = _createSuper(EmptyGraphLayout);\n\n  function EmptyGraphLayout() {\n    _classCallCheck(this, EmptyGraphLayout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EmptyGraphLayout, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var currentIsEmpty = this.props.elements === undefined || _.isEmpty(this.props.elements.nodes);\n\n      var nextIsEmpty = nextProps.elements === undefined || _.isEmpty(nextProps.elements.nodes); // Update if we have elements and we are not loading\n\n\n      if (!nextProps.isLoading && !nextIsEmpty) {\n        return true;\n      } // Update if we are going from having no elements to having elements or vice versa\n\n\n      if (currentIsEmpty !== nextIsEmpty) {\n        return true;\n      } // Do not update if we have elements and the namespace didn't change, as this means we are refreshing\n\n\n      return !(!nextIsEmpty && _.isEqual(this.props.namespaces, nextProps.namespaces));\n    }\n  }, {\n    key: \"namespacesText\",\n    value: function namespacesText() {\n      if (this.props.namespaces && this.props.namespaces.length > 0) {\n        if (this.props.namespaces.length === 1) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, \"namespace \", /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 23\n            }\n          }, this.props.namespaces[0].name));\n        } else {\n          var namespacesString = this.props.namespaces.slice(0, -1).map(function (namespace) {\n            return namespace.name;\n          }).join(',') + ' and ' + this.props.namespaces[this.props.namespaces.length - 1].name;\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 13\n            }\n          }, namespacesString));\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.isError) {\n        return /*#__PURE__*/React.createElement(EmptyState, {\n          variant: EmptyStateVariant.large,\n          className: emptyStateStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(EmptyStateIcon, {\n          icon: KialiIcon.Error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h5\",\n          size: \"lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }\n        }, \"Error loading Graph\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }\n        }, this.props.error));\n      }\n\n      if (this.props.isLoading) {\n        return /*#__PURE__*/React.createElement(EmptyState, {\n          variant: EmptyStateVariant.large,\n          className: emptyStateStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h5\",\n          size: \"lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }\n        }, \"\\u670D\\u52A1\\u7F51\\u683C\\u6D41\\u91CF\\u56FE\\u52A0\\u8F7D\\u4E2D...\"));\n      }\n\n      if (this.props.namespaces.length === 0) {\n        return /*#__PURE__*/React.createElement(EmptyState, {\n          variant: EmptyStateVariant.large,\n          className: emptyStateStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h5\",\n          size: \"lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }\n        }, \"No namespace is selected\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }\n        }, \"There is currently no namespace selected, please select one using the Namespace selector.\"));\n      }\n\n      var isGraphEmpty = !this.props.elements || !this.props.elements.nodes || this.props.elements.nodes.length < 1;\n\n      if (isGraphEmpty && !this.props.isMiniGraph) {\n        return /*#__PURE__*/React.createElement(EmptyState, {\n          variant: EmptyStateVariant.large,\n          className: emptyStateStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h5\",\n          size: \"lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }\n        }, \"\\u672A\\u80FD\\u751F\\u6210\\u670D\\u52A1\\u7F51\\u683C\\u6D41\\u91CF\\u56FE\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }\n        }, this.namespacesText(), \"\\u547D\\u540D\\u7A7A\\u95F4\\u4E0B\\u6682\\u65F6\\u65E0\\u6CD5\\u751F\\u6210\\u670D\\u52A1\\u7F51\\u683C\\u6D41\\u91CF\\u56FE\\uFF0C\\u53EF\\u80FD\\u662F\\u7531\\u4E8E\", this.props.namespaces.length === 1 ? '此命名空间' : '这些命名空间', \"\\u4E0B\\u6CA1\\u6709\\u8FDB\\u884C\\u76F8\\u5173\\u670D\\u52A1\\u7F51\\u683C\\u914D\\u7F6E\\uFF0C \\u6216\\u8005\\u76F8\\u5173\\u670D\\u52A1\\u8FD8\\u672A\\u63A5\\u6536\\u5230\\u8BBF\\u95EE\\u8BF7\\u6C42\\u3002\", this.props.showIdleNodes && /*#__PURE__*/React.createElement(React.Fragment, null, \" You are currently displaying 'Idle nodes', send requests to the service mesh and click 'Refresh'.\"), !this.props.showIdleNodes && /*#__PURE__*/React.createElement(React.Fragment, null, \" \\u53EF\\u4EE5\\u70B9\\u51FB\\u4E0B\\u65B9\\u6309\\u94AE\\u5C55\\u793A\\u6B64\\u547D\\u540D\\u7A7A\\u95F4\\u4E0B\\u7684\\u670D\\u52A1\")), /*#__PURE__*/React.createElement(Button, {\n          onClick: this.props.showIdleNodes ? this.props.action : this.props.toggleIdleNodes,\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 11\n          }\n        }, this.props.showIdleNodes && /*#__PURE__*/React.createElement(React.Fragment, null, \"Refresh\") || /*#__PURE__*/React.createElement(React.Fragment, null, \"Display idle nodes\")));\n      }\n\n      if (isGraphEmpty && this.props.isMiniGraph) {\n        return /*#__PURE__*/React.createElement(EmptyState, {\n          variant: EmptyStateVariant.large,\n          className: emptyStateStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Title, {\n          headingLevel: \"h5\",\n          size: \"lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }\n        }, \"Empty Graph\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }\n        }, \"No graph traffic for the time period.\"));\n      }\n\n      return this.props.children;\n    }\n  }]);\n\n  return EmptyGraphLayout;\n}(React.Component);\n\nexport { EmptyGraphLayout as default };","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/EmptyGraphLayout.tsx"],"names":["React","Button","EmptyState","EmptyStateBody","EmptyStateIcon","EmptyStateVariant","Title","style","_","KialiIcon","emptyStateStyle","height","marginRight","marginLeft","marginBottom","marginTop","EmptyGraphLayout","nextProps","currentIsEmpty","props","elements","undefined","isEmpty","nodes","nextIsEmpty","isLoading","isEqual","namespaces","length","name","namespacesString","slice","map","namespace","join","isError","large","Error","error","isGraphEmpty","isMiniGraph","namespacesText","showIdleNodes","action","toggleIdleNodes","children","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport * as _ from 'lodash';\nimport Namespace from '../../types/Namespace';\nimport { KialiIcon } from '../../config/KialiIcon';\nimport { DecoratedGraphElements } from '../../types/Graph';\n\ntype EmptyGraphLayoutProps = {\n  action?: any;\n  elements?: DecoratedGraphElements;\n  namespaces: Namespace[];\n  isLoading?: boolean;\n  isError: boolean;\n  isMiniGraph: boolean;\n  error?: string;\n  showIdleNodes: boolean;\n  toggleIdleNodes: () => void;\n};\n\nconst emptyStateStyle = style({\n  height: '98%',\n  marginRight: 'auto',\n  marginLeft: 'auto',\n  marginBottom: 10,\n  marginTop: 10\n});\n\ntype EmptyGraphLayoutState = {};\n\nexport default class EmptyGraphLayout extends React.Component<EmptyGraphLayoutProps, EmptyGraphLayoutState> {\n  shouldComponentUpdate(nextProps: EmptyGraphLayoutProps) {\n    const currentIsEmpty = this.props.elements === undefined || _.isEmpty(this.props.elements.nodes);\n    const nextIsEmpty = nextProps.elements === undefined || _.isEmpty(nextProps.elements.nodes);\n\n    // Update if we have elements and we are not loading\n    if (!nextProps.isLoading && !nextIsEmpty) {\n      return true;\n    }\n\n    // Update if we are going from having no elements to having elements or vice versa\n    if (currentIsEmpty !== nextIsEmpty) {\n      return true;\n    }\n    // Do not update if we have elements and the namespace didn't change, as this means we are refreshing\n    return !(!nextIsEmpty && _.isEqual(this.props.namespaces, nextProps.namespaces));\n  }\n\n  namespacesText() {\n    if (this.props.namespaces && this.props.namespaces.length > 0) {\n      if (this.props.namespaces.length === 1) {\n        return (\n          <>\n            namespace <b>{this.props.namespaces[0].name}</b>\n          </>\n        );\n      } else {\n        const namespacesString =\n          this.props.namespaces\n            .slice(0, -1)\n            .map(namespace => namespace.name)\n            .join(',') +\n          ' and ' +\n          this.props.namespaces[this.props.namespaces.length - 1].name;\n        return (\n          <>\n            <b>{namespacesString}</b>\n          </>\n        );\n      }\n    }\n    return null;\n  }\n\n  render() {\n    if (this.props.isError) {\n      return (\n        <EmptyState variant={EmptyStateVariant.large} className={emptyStateStyle}>\n          <EmptyStateIcon icon={KialiIcon.Error} />\n          <Title headingLevel=\"h5\" size=\"lg\">\n            Error loading Graph\n          </Title>\n          <EmptyStateBody>{this.props.error}</EmptyStateBody>\n        </EmptyState>\n      );\n    }\n    if (this.props.isLoading) {\n      return (\n        <EmptyState variant={EmptyStateVariant.large} className={emptyStateStyle}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            服务网格流量图加载中...\n          </Title>\n        </EmptyState>\n      );\n    }\n\n    if (this.props.namespaces.length === 0) {\n      return (\n        <EmptyState variant={EmptyStateVariant.large} className={emptyStateStyle}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            No namespace is selected\n          </Title>\n          <EmptyStateBody>\n            There is currently no namespace selected, please select one using the Namespace selector.\n          </EmptyStateBody>\n        </EmptyState>\n      );\n    }\n\n    const isGraphEmpty = !this.props.elements || !this.props.elements.nodes || this.props.elements.nodes.length < 1;\n\n    if (isGraphEmpty && !this.props.isMiniGraph) {\n      return (\n        <EmptyState variant={EmptyStateVariant.large} className={emptyStateStyle}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            未能生成服务网格流量图\n          </Title>\n          <EmptyStateBody>\n            {this.namespacesText()}命名空间下暂时无法生成服务网格流量图，可能是由于{this.props.namespaces.length === 1 ? '此命名空间' : '这些命名空间'}下没有进行相关服务网格配置，\n            或者相关服务还未接收到访问请求。\n            {this.props.showIdleNodes && (\n              <> You are currently displaying 'Idle nodes', send requests to the service mesh and click 'Refresh'.</>\n            )}\n            {!this.props.showIdleNodes && (\n              <> 可以点击下方按钮展示此命名空间下的服务</>\n            )}\n          </EmptyStateBody>\n          <Button onClick={this.props.showIdleNodes ? this.props.action : this.props.toggleIdleNodes} variant=\"primary\">\n            {(this.props.showIdleNodes && <>Refresh</>) || <>Display idle nodes</>}\n          </Button>\n        </EmptyState>\n      );\n    }\n\n    if (isGraphEmpty && this.props.isMiniGraph) {\n      return (\n        <EmptyState variant={EmptyStateVariant.large} className={emptyStateStyle}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            Empty Graph\n          </Title>\n          <EmptyStateBody>No graph traffic for the time period.</EmptyStateBody>\n        </EmptyState>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
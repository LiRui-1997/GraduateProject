{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentCreatePage.tsx\";\nimport * as React from 'react';\nimport { style } from 'typestyle';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport { ActionGroup, Button, ButtonVariant, Form, FormGroup, FormSelect, FormSelectOption, Grid, GridItem, Popover, Switch, Text, TextInputBase as TextInput, TextVariants } from '@patternfly/react-core';\nimport history from '../../../../app/History';\nimport { RenderContent } from '../../../../components/Nav/Page';\nimport ExperimentCriteriaForm from './ExperimentCriteriaForm';\nimport ExperimentHostForm, { initHost } from './ExperimentHostForm';\nimport ExperimentTrafficForm from './ExperimentTrafficForm';\nimport { PromisesRegistry } from '../../../../utils/CancelablePromises';\nimport { activeNamespacesSelector } from '../../../../store/Selectors';\nimport { connect } from 'react-redux';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport DefaultSecondaryMasthead from '../../../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport { MOVE_TYPE } from './ExperimentRules';\nexport var OnRemoveFromListOptions; // Style constants\n\n(function (OnRemoveFromListOptions) {\n  OnRemoveFromListOptions[OnRemoveFromListOptions[\"Criteria\"] = 0] = \"Criteria\";\n  OnRemoveFromListOptions[OnRemoveFromListOptions[\"Host\"] = 1] = \"Host\";\n  OnRemoveFromListOptions[OnRemoveFromListOptions[\"Match\"] = 2] = \"Match\";\n})(OnRemoveFromListOptions || (OnRemoveFromListOptions = {}));\n\nvar containerPadding = style({\n  padding: '20px 20px 20px 20px'\n});\nvar regex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[-a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nvar formPadding = style({\n  padding: '30px 20px 30px 20px'\n});\nvar durationTimeStyle = style({\n  paddingTop: 8,\n  color: PFColors.Blue400\n});\nvar algorithms = ['progressive', 'top_2', 'uniform'];\nvar onTermination = ['to_winner', 'to_baseline', 'keep_last'];\nvar iter8oExpOptions = [{\n  value: 'Deployment',\n  label: 'Deployment'\n}, {\n  value: 'Service',\n  label: 'Service'\n}];\n\nvar ExperimentCreatePage = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentCreatePage, _React$Component);\n\n  var _super = _createSuper(ExperimentCreatePage);\n\n  function ExperimentCreatePage(props) {\n    var _this;\n\n    _classCallCheck(this, ExperimentCreatePage);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n\n    _this.fetchNamespaces = function () {\n      _this.promises.register('namespaces', API.getNamespaces()).then(function (namespacesResponse) {\n        var allNamespaces = namespacesResponse.data.map(function (nsInfo) {\n          return nsInfo.name;\n        });\n\n        _this.setState(function (prevState) {\n          var newExperiment = prevState.experiment;\n          newExperiment.baseline = '';\n          newExperiment.candidates = [];\n          newExperiment.namespace = allNamespaces[0];\n          return {\n            experiment: newExperiment,\n            namespaces: allNamespaces,\n            reloadService: !history.location.pathname.endsWith('/new')\n          };\n        });\n      });\n    };\n\n    _this.fetchIter8Info = function () {\n      _this.promises.register('iter8Metrics', API.getIter8Info()).then(function (result) {\n        var iter8Info = result.data;\n\n        _this.setState(function (prevState) {\n          return {\n            iter8Info: iter8Info,\n            experiment: prevState.experiment,\n            reloadService: prevState.reloadService,\n            metricNames: prevState.metricNames\n          };\n        });\n      }).catch(function (infoerror) {\n        if (!infoerror.isCanceled) {\n          AlertUtils.addError('Could not fetch Iter8 Info Detail.', infoerror);\n        }\n      });\n    };\n\n    _this.fetchMetrics = function () {\n      _this.promises.register('iter8Metrics', API.getIter8Metrics()).then(function (mresponse) {\n        var metricsNames = ['-- 请选择 ---'];\n        metricsNames = metricsNames.concat(mresponse.data);\n\n        _this.setState(function (prevState) {\n          return {\n            iter8Info: prevState.iter8Info,\n            experiment: prevState.experiment,\n            reloadService: prevState.reloadService,\n            metricNames: metricsNames\n          };\n        });\n      }).catch(function (metricsError) {\n        if (!metricsError.isCanceled) {\n          AlertUtils.addError('Could not fetch Iter8 Metric  Detail.', metricsError);\n        }\n      });\n    };\n\n    _this.fetchServices = function (selectedNS) {\n      var _namespace = '';\n\n      if (selectedNS !== '') {\n        _namespace = selectedNS;\n      } else if (_this.state.experiment.namespace !== '') {\n        _namespace = _this.state.experiment.namespace;\n      }\n\n      if (_namespace.length > 0) {\n        if (!_this.promises.has('servicesByNamespace')) {\n          _this.promises.register('servicesByNamespace', API.getServices(_namespace)).then(function (response) {\n            var services = response.data.services.map(function (svc) {\n              return svc.name;\n            });\n\n            if (services.length > 0) {\n              _this.promises.register('firstServiceDetails', API.getServiceDetail(_namespace, services[0], false)).then(function (responseDetail) {\n                var workloads = [];\n\n                if (responseDetail.workloads) {\n                  workloads = responseDetail.workloads.map(function (w) {\n                    return w.name;\n                  });\n                }\n\n                _this.setState(function (prevState) {\n                  prevState.experiment.service = services[0];\n\n                  if (workloads.length > 0) {\n                    prevState.experiment.baseline = workloads[0];\n                  }\n\n                  return {\n                    services: services,\n                    workloads: workloads,\n                    experiment: prevState.experiment,\n                    reloadService: false\n                  };\n                });\n\n                _this.promises.cancel('firstServiceDetails');\n              }).catch(function (svcDetailError) {\n                if (!svcDetailError.isCanceled) {\n                  AlertUtils.addError('Could not fetch Service Detail.', svcDetailError);\n                }\n              });\n            } // Clean promise from register\n\n\n            _this.promises.cancel('servicesByNamespace');\n          }).catch(function (svcError) {\n            if (!svcError.isCanceled) {\n              AlertUtils.addError('Could not fetch Services list.', svcError);\n            }\n          });\n        }\n      }\n    };\n\n    _this.fetchGateways = function (namespace) {\n      _this.promises.register('gateways', API.getIstioConfig(namespace, ['gateways'], false, '', '')).then(function (response) {\n        var gatewayhostpair = [];\n        var gateways = [];\n        gateways.push('-- select gateway --');\n        response.data.gateways.forEach(function (gt) {\n          var _gt$spec$servers;\n\n          (_gt$spec$servers = gt.spec.servers) === null || _gt$spec$servers === void 0 ? void 0 : _gt$spec$servers.forEach(function (svc) {\n            gateways.push(gt.metadata.name);\n            svc.hosts.forEach(function (hs) {\n              gatewayhostpair.push({\n                name: hs,\n                gateway: gt.metadata.name\n              });\n            });\n          });\n        });\n\n        _this.setState(function (prevState) {\n          return {\n            services: prevState.services,\n            workloads: prevState.workloads,\n            gateways: gateways,\n            hostsOfGateway: gatewayhostpair,\n            experiment: prevState.experiment,\n            reloadService: false,\n            hostState: initHost(gateways[0])\n          };\n        });\n      });\n    };\n\n    _this.fetchWorkloads = function (namespace, serviceName) {\n      _this.promises.register('serviceDetails', API.getServiceDetail(namespace, serviceName, false)).then(function (responseDetail) {\n        var workloads = [];\n\n        if (responseDetail.workloads) {\n          workloads = responseDetail.workloads.map(function (w) {\n            return w.name;\n          });\n        }\n\n        _this.setState(function (prevState) {\n          if (workloads.length > 0) {\n            prevState.experiment.baseline = workloads[0];\n          }\n\n          return {\n            workloads: workloads,\n            experiment: prevState.experiment\n          };\n        });\n      }).catch(function (svcDetailError) {\n        if (!svcDetailError.isCanceled) {\n          AlertUtils.addError('Could not fetch Service Detail.', svcDetailError);\n        }\n      });\n    };\n\n    _this.onExperimentChange = function (newexperiment) {\n      _this.setState({\n        experiment: newexperiment\n      });\n    };\n\n    _this.onExperimentKindChange = function (value, _) {\n      _this.setState(function (prevState) {\n        var newExperiment = prevState.experiment;\n        newExperiment.experimentKind = value;\n        return {\n          experiment: newExperiment\n        };\n      });\n    };\n\n    _this.goExperimentsPage = function () {\n      history.push('/extensions/iter8');\n    };\n\n    _this.createExperiment = function () {\n      var nsName = _this.state.experiment.namespace;\n\n      _this.promises.register('Create Iter8 Experiment', API.createExperiment(nsName, JSON.stringify(_this.state.experiment), {})).then(function (_) {\n        return _this.goExperimentsPage();\n      }).catch(function (error) {\n        return AlertUtils.addError('Could not create Experiment.', error);\n      });\n    };\n\n    _this.changeExperiment = function (field, value) {\n      _this.setState(function (prevState) {\n        var reloadService = prevState.reloadService;\n        var newExperiment = prevState.experiment;\n\n        switch (field) {\n          case 'name':\n            newExperiment.name = value.trim();\n            break;\n\n          case 'namespace':\n            newExperiment.namespace = value.trim();\n            reloadService = true;\n            break;\n\n          case 'service':\n            newExperiment.service = value.trim();\n            break;\n\n          case 'algorithm':\n            if (value.trim() === 'progressive') {\n              _this.setState({\n                showMaxIncrement: true\n              });\n            } else {\n              _this.setState({\n                showMaxIncrement: false\n              });\n            }\n\n            newExperiment.trafficControl.strategy = value.trim();\n            break;\n\n          case 'onTermination':\n            newExperiment.trafficControl.onTermination = value.trim();\n            break;\n\n          case 'baseline':\n            newExperiment.baseline = value.trim();\n            break;\n\n          case 'candidate':\n            var candidates = value.trim().split(',');\n            candidates = candidates.map(function (el) {\n              return el.trim();\n            });\n            newExperiment.candidates = candidates;\n            break;\n\n          case 'kubernets':\n            newExperiment.apiversion = 'v1';\n            break;\n\n          case 'knative':\n            newExperiment.apiversion = 'serving.knative.dev/v1alpha1';\n            break;\n\n          case 'metricName':\n            newExperiment.criterias[0].metric = value.trim();\n            break;\n\n          case 'toleranceType':\n            newExperiment.criterias[0].toleranceType = value.trim();\n            break;\n\n          case 'routerID':\n            newExperiment.routerID = value.trim();\n            break;\n\n          default:\n        }\n\n        return {\n          experiment: newExperiment,\n          reloadService: reloadService\n        };\n      }, function () {\n        history.location.pathname.endsWith('/new') ? _this.onExperimentChange(_this.state.experiment) : _this.props.onChange(_this.isMainFormValid(), _this.state.experiment);\n      });\n    };\n\n    _this.changeExperimentNumber = function (field, value) {\n      _this.setState(function (prevState) {\n        var newExperiment = prevState.experiment;\n\n        switch (field) {\n          case 'maxIteration':\n            newExperiment.duration.maxIterations = value;\n            break;\n\n          case 'maxIncrement':\n            newExperiment.trafficControl.maxIncrement = value;\n            break;\n\n          case 'tolerance':\n            newExperiment.criterias[0].tolerance = value;\n            break;\n\n          case 'interval':\n            newExperiment.duration.intervalInSecond = value;\n            newExperiment.duration.interval = newExperiment.duration.intervalInSecond + 's';\n            break;\n\n          default:\n        }\n\n        var totalSecond = newExperiment.duration.maxIterations * newExperiment.duration.intervalInSecond;\n        var hours = Math.floor(totalSecond / 60 / 60);\n        var minutes = Math.floor(totalSecond / 60) - hours * 60;\n        return {\n          experiment: newExperiment,\n          totalDuration: hours + ' hours ' + minutes + ' minutes ' + totalSecond % 60 + ' seconds'\n        };\n      }, function () {\n        history.location.pathname.endsWith('/new') ? _this.onExperimentChange(_this.state.experiment) : _this.props.onChange(_this.isMainFormValid(), _this.state.experiment);\n      });\n    };\n\n    _this.isMainFormValid = function () {\n      return _this.state.experiment.name !== '' && _this.state.experiment.name.search(regex) === 0 && (_this.state.experiment.experimentKind === 'Deployment' && _this.state.experiment.service !== '' || _this.state.experiment.experimentKind === 'Service') && _this.state.experiment.namespace !== '' && _this.state.experiment.baseline !== '' && _this.state.experiment.candidates.length !== 0;\n    };\n\n    _this.isTCFormValid = function () {\n      return _this.state.experiment.duration.interval !== '' && _this.state.experiment.duration.maxIterations > 0;\n    };\n\n    _this.isSCFormValid = function () {\n      return _this.state.experiment.criterias.length !== 0;\n    };\n\n    _this.onAddToList = function (newCriteria, newHost, newMatch) {\n      _this.setState(function (prevState) {\n        if (newHost != null && newHost.name !== '') {\n          prevState.experiment.hosts.push(newHost);\n        } else if (newCriteria != null && newCriteria.metric !== '') {\n          prevState.experiment.criterias.push(newCriteria);\n        } else if (newMatch != null) {\n          prevState.experiment.trafficControl.match.http.push(newMatch);\n        }\n\n        return {\n          iter8Info: prevState.iter8Info,\n          experiment: {\n            name: prevState.experiment.name,\n            namespace: prevState.experiment.namespace,\n            service: prevState.experiment.service,\n            apiversion: prevState.experiment.apiversion,\n            baseline: prevState.experiment.baseline,\n            candidates: prevState.experiment.candidates,\n            trafficControl: prevState.experiment.trafficControl,\n            criterias: prevState.experiment.criterias,\n            hosts: prevState.experiment.hosts,\n            duration: prevState.experiment.duration,\n            experimentKind: prevState.experiment.experimentKind,\n            routerID: prevState.experiment.routerID\n          }\n        };\n      });\n    };\n\n    _this.onRemoveFromList = function (type, index) {\n      _this.setState(function (prevState) {\n        if (type === OnRemoveFromListOptions.Criteria) {\n          prevState.experiment.criterias.splice(index, 1);\n        } else if (type === OnRemoveFromListOptions.Host) {\n          prevState.experiment.hosts.splice(index, 1);\n        } else if (type === OnRemoveFromListOptions.Match) {\n          prevState.experiment.trafficControl.match.http.splice(index, 1);\n        }\n\n        return {\n          iter8Info: prevState.iter8Info,\n          experiment: {\n            name: prevState.experiment.name,\n            namespace: prevState.experiment.namespace,\n            service: prevState.experiment.service,\n            apiversion: prevState.experiment.apiversion,\n            baseline: prevState.experiment.baseline,\n            candidates: prevState.experiment.candidates,\n            trafficControl: prevState.experiment.trafficControl,\n            criterias: prevState.experiment.criterias,\n            hosts: prevState.experiment.hosts,\n            duration: prevState.experiment.duration,\n            experimentKind: prevState.experiment.experimentKind,\n            routerID: prevState.experiment.routerID\n          }\n        };\n      });\n    };\n\n    _this.onMoveMatchRule = function (index, move) {\n      _this.setState(function (prevState) {\n        var sourceRules = prevState.experiment.trafficControl.match.http;\n        var sourceRule = sourceRules[index];\n        var targetIndex = move === MOVE_TYPE.UP ? index - 1 : index + 1;\n        var targetRule = sourceRules[targetIndex];\n        sourceRules[targetIndex] = sourceRule;\n        sourceRules[index] = targetRule;\n        return _objectSpread({}, prevState);\n      });\n    };\n\n    _this.onChangeHostGateway = function () {\n      _this.setState(function (prevState) {\n        return {\n          addHostGateway: !prevState.addHostGateway\n        };\n      });\n    };\n\n    _this.onChangeShowTrafficControl = function () {\n      _this.setState(function (prevState) {\n        return {\n          showTrafficControl: !prevState.showTrafficControl\n        };\n      });\n    };\n\n    _this.onChangeShowDurationControl = function () {\n      _this.setState(function (prevState) {\n        return {\n          showDurationControl: !prevState.showDurationControl\n        };\n      });\n    };\n\n    _this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        analyticsImgVersion: '',\n        controllerImgVersion: '',\n        namespace: 'iter8'\n      },\n      experiment: {\n        name: '',\n        namespace: _this.props.namespace,\n        apiversion: 'v1',\n        service: _this.props.serviceName,\n        baseline: '',\n        candidates: [],\n        experimentKind: 'Deployment',\n        trafficControl: {\n          strategy: 'progressive',\n          maxIncrement: 10,\n          onTermination: 'to_winner',\n          match: {\n            http: []\n          }\n        },\n        duration: {\n          interval: '30s',\n          intervalInSecond: 30,\n          maxIterations: 10\n        },\n        criterias: [],\n        hosts: [],\n        routerID: ''\n      },\n      namespaces: [],\n      services: [],\n      workloads: [],\n      gateways: [],\n      hostsOfGateway: [],\n      metricNames: [],\n      showAdvanced: history.location.pathname.endsWith('/new') ? true : _this.props.showAdvanced,\n      showMaxIncrement: true,\n      reloadService: false,\n      totalDuration: '5 mins',\n      hostState: initHost(''),\n      value: '',\n      filename: '',\n      addHostGateway: false,\n      showTrafficControl: false,\n      showDurationControl: false\n    };\n    return _this;\n  }\n\n  _createClass(ExperimentCreatePage, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.state.namespaces.length === 0 && this.props.namespace === undefined) {\n        this.promises.register('namespaces', API.getNamespaces()).then(function (namespacesResponse) {\n          var namespace = namespacesResponse.data;\n          var allNamespaces = namespace.map(function (nsInfo) {\n            return nsInfo.name;\n          });\n\n          _this2.setState(function (prevState) {\n            var newExperiment = prevState.experiment;\n            newExperiment.namespace = allNamespaces[0];\n            return {\n              experiment: newExperiment,\n              namespaces: allNamespaces,\n              reloadService: false\n            };\n          });\n        }).then(function () {\n          _this2.fetchIter8Info();\n        }).then(function () {\n          _this2.fetchServices(_this2.state.experiment.namespace);\n        }).then(function () {\n          _this2.fetchGateways(_this2.state.experiment.namespace);\n        }).then(function () {\n          _this2.fetchMetrics();\n        }).catch(function (namespacesError) {\n          if (!namespacesError.isCanceled) {\n            AlertUtils.addError('Could not fetch namespace list', namespacesError);\n          }\n        });\n      } else if (this.props.namespace !== undefined && this.props.serviceName !== undefined) {\n        this.fetchWorkloads(this.props.namespace, this.props.serviceName);\n        this.fetchGateways(this.props.namespace);\n        this.fetchMetrics();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, _prevState) {\n      if (this.state.reloadService) {\n        this.fetchServices('');\n      }\n    }\n  }, {\n    key: \"renderBaselineSelect\",\n    value: function renderBaselineSelect() {\n      var _this3 = this;\n\n      var isDeployment = this.state.experiment.experimentKind === 'Deployment';\n      var usingMap = isDeployment ? this.state.workloads : this.state.services;\n      return [/*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"baseline\",\n        label: isDeployment ? '基准版本' : '基准版本',\n        isRequired: true,\n        isValid: this.state.experiment.baseline !== '' // helperText={\n        //   isDeployment\n        //     ? 'The baseline deployment of the target service (i.e. reviews-v1)'\n        //     : 'The baseline service (i.e. reviews)'\n        // }\n        ,\n        helperTextInvalid: isDeployment ? '基准版本不能为空！' : '基准版本不能为空！',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        id: \"baseline\",\n        value: this.state.experiment.baseline,\n        placeholder: isDeployment ? 'Baseline Deployment' : 'Baseline Service',\n        onChange: function onChange(value) {\n          return _this3.changeExperiment('baseline', value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 9\n        }\n      }, usingMap.map(function (wk, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          label: wk,\n          key: 'workloadBaseline' + index,\n          value: wk,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }\n        });\n      })))];\n    }\n  }, {\n    key: \"renderCandidateSelect\",\n    value: function renderCandidateSelect() {\n      var _this4 = this;\n\n      var isDeployment = this.state.experiment.experimentKind === 'Deployment';\n      var usingMap = this.state.experiment.experimentKind === 'Deployment' ? this.state.workloads : this.state.services;\n      return [/*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"candidates\",\n        label: isDeployment ? '候选版本' : '候选版本',\n        isRequired: true,\n        isValid: this.state.experiment.candidates.length !== 0 // helperText={\n        //   isDeployment\n        //     ? 'Name or a List of names of candidate deployment of the target service (i.e. reviews-v2, or reviews-v2,reviews-v3)'\n        //     : 'Name or a List of names of candidate service (i.e. reviews)'\n        // }\n        ,\n        helperTextInvalid: isDeployment ? '候选版本不能为空！' : '候选版本不能为空！',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"candidate\",\n        value: this.state.experiment.candidates.join(','),\n        placeholder: \"\\u4ECE\\u5217\\u8868\\u4E2D\\u9009\\u62E9\\u83B7\\u80DC\\u81EA\\u5B9A\\u4E49\\u8F93\\u5165\",\n        onChange: function onChange(value) {\n          return _this4.changeExperiment('candidate', value);\n        },\n        list: 'candidateName',\n        autoComplete: 'off',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"datalist\", {\n        id: \"candidateName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 9\n        }\n      }, usingMap.map(function (wk, index) {\n        return wk !== _this4.state.experiment.baseline ? /*#__PURE__*/React.createElement(\"option\", {\n          label: wk,\n          key: 'workloadCandidate' + index,\n          value: wk,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }\n        }, wk) : '';\n      })))];\n    }\n  }, {\n    key: \"renderFullGeneral\",\n    value: function renderFullGeneral() {\n      var _this5 = this;\n\n      var isNamespacesValid = false;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"name\",\n        label: \"\\u5B9E\\u9A8C\\u540D\\u79F0\",\n        isRequired: true,\n        isValid: this.state.experiment.name !== '' && this.state.experiment.name.search(regex) === 0,\n        helperTextInvalid: \"\\u5B9E\\u9A8C\\u540D\\u79F0\\u4E0D\\u80FD\\u4E3A\\u7A7A\\uFF01\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"name\",\n        value: this.state.experiment.name,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u5B9E\\u9A8C\\u540D\\u79F0\",\n        onChange: function onChange(value) {\n          return _this5.changeExperiment('name', value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"experimentKind\",\n        label: \"\\u76EE\\u6807\\u7C7B\\u578B\",\n        isRequired: true,\n        helperTextInvalid: \"\\u5B9E\\u9A8C\\u76EE\\u6807\\u4E3ADeployment\\u6216\\u8005Service\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.experiment.experimentKind,\n        onChange: this.onExperimentKindChange,\n        id: \"targetKind\",\n        name: \"targetKinde\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }\n      }, iter8oExpOptions.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: index,\n          value: option.value,\n          label: option.label,\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 15\n          }\n        });\n      }))), history.location.pathname.endsWith('/new') ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"\\u547D\\u540D\\u7A7A\\u95F4\",\n        isRequired: true,\n        fieldId: \"namespaces\" // helperText={'指定实验所在的命名空间'}\n        ,\n        isValid: isNamespacesValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        id: \"namespaces\",\n        value: this.state.experiment.namespace,\n        placeholder: \"Namespace\",\n        onChange: function onChange(value) {\n          _this5.changeExperiment('namespace', value);\n\n          _this5.fetchServices(value);\n\n          _this5.fetchGateways(value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 15\n        }\n      }, this.state.namespaces.map(function (svc, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          label: svc,\n          key: 'namespace' + index,\n          value: svc,\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 19\n          }\n        });\n      }))), this.state.experiment.experimentKind === 'Deployment' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"service\",\n        label: \"\\u76EE\\u6807\\u670D\\u52A1\",\n        isRequired: true,\n        isValid: this.state.experiment.service !== '' // helperText=\"Target Service specifies the reference to experiment targets (i.e. reviews)\"\n        ,\n        helperTextInvalid: \"\\u76EE\\u6807\\u670D\\u52A1\\u4E0D\\u80FD\\u4E3A\\u7A7A\\uFF01\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        id: \"service\",\n        value: this.state.experiment.service,\n        placeholder: \"Target Service\",\n        onChange: function onChange(value) {\n          _this5.changeExperiment('service', value);\n\n          var ns = _this5.state.experiment.namespace;\n\n          _this5.fetchWorkloads(ns, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 19\n        }\n      }, this.state.services.map(function (svc, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          label: svc,\n          key: 'service' + index,\n          value: svc,\n          __self: _this5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 23\n          }\n        });\n      })))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : '', this.renderBaselineSelect(), this.renderCandidateSelect());\n    }\n  }, {\n    key: \"renderDuration\",\n    value: function renderDuration() {\n      var _this6 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n        gutter: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: durationTimeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }\n      }, \"Total Experiment Duration: \", this.state.totalDuration)), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"interval\",\n        label: \"\\u5B9E\\u9A8C\\u95F4\\u9694\\uFF08\\u5355\\u4F4D: \\u79D2\\uFF09\",\n        isValid: this.state.experiment.duration.interval !== '' // helperText=\"Frequency with which the controller calls the analytics service\"\n        ,\n        helperTextInvalid: \"\\u5B9E\\u9A8C\\u95F4\\u9694\\u4E0D\\u80FD\\u4E3A\\u7A7A\\uFF01\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"interval\",\n        value: this.state.experiment.duration.intervalInSecond,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u65F6\\u95F4\\u95F4\\u9694\",\n        onChange: function onChange(value) {\n          return _this6.changeExperimentNumber('interval', Number(value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"maxIteration\",\n        label: \"\\u6700\\u5927\\u5B9E\\u9A8C\\u8F6E\\u6B21\",\n        isValid: this.state.experiment.duration.maxIterations > 0 // helperText=\"Maximum number of iterations for this experiment\"\n        ,\n        helperTextInvalid: \"\\u6700\\u5927\\u5B9E\\u9A8C\\u8F6E\\u6B21\\u4E0D\\u80FD\\u4E3A\\u7A7A\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"maxIteration\",\n        type: \"number\",\n        value: this.state.experiment.duration.maxIterations,\n        placeholder: \"Maximum Iteration\",\n        onChange: function onChange(value) {\n          return _this6.changeExperimentNumber('maxIteration', Number(value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }, {\n    key: \"renderTraffic\",\n    value: function renderTraffic() {\n      var _this7 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n        gutter: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"algorithm\",\n        label: \"Algorithm\",\n        helperText: \"Strategy used to analyze the candidate and shift the traffic\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.experiment.trafficControl.strategy,\n        id: \"algorithm\",\n        name: \"Algorithm\",\n        onChange: function onChange(value) {\n          return _this7.changeExperiment('algorithm', value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 15\n        }\n      }, algorithms.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          isDisabled: false,\n          key: 'p' + index,\n          value: option,\n          label: option,\n          __self: _this7,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 19\n          }\n        });\n      })))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"onTermination\",\n        label: \"onTermination\",\n        helperText: \"The traffic split behavior after the termination of the experiment.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.experiment.trafficControl.onTermination,\n        id: \"onTermination\",\n        name: \"On Termination\",\n        onChange: function onChange(value) {\n          return _this7.changeExperiment('onTermination', value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 15\n        }\n      }, onTermination.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          isDisabled: false,\n          key: 'ot' + index,\n          value: option,\n          label: option,\n          __self: _this7,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 19\n          }\n        });\n      })))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        style: this.state.showMaxIncrement ? {} : {\n          display: 'none'\n        },\n        fieldId: \"maxIncrement\",\n        label: \"Max Increment\",\n        isValid: this.state.experiment.trafficControl.maxIncrement > 0,\n        helperText: \"Maximum possible increase in traffic for a candidate in a single iteration (measured in percent). Default value: 2 (percent)\",\n        helperTextInvalid: \"Max Increment must be > 0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"maxIncrement\",\n        value: this.state.experiment.trafficControl.maxIncrement,\n        placeholder: \"Max Increment\",\n        onChange: function onChange(value) {\n          return _this7.changeExperimentNumber('maxIncrement', Number(value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.a,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 13\n        }\n      }, \"Number of Match Rules: \", this.state.experiment.trafficControl.match.http.length, /*#__PURE__*/React.createElement(Popover, {\n        position: 'right',\n        hideOnOutsideClick: true,\n        maxWidth: '40rem',\n        headerContent: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 32\n          }\n        }, \"Match Rules\"),\n        bodyContent: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 21\n          }\n        }, \"Specifies the portion of traffic which can be routed to candidates during the experiment. Traffic that does not match this clause will be sent to baseline and never to a candidate during an experiment. By default, if this field is left unspecified, all traffic is used for an experiment.\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 21\n          }\n        }, \"Currently, only http trafic is controlled. For each match rule, please specify one or both of\", ' ', /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 23\n          }\n        }, \"uri\"), \" and one or multiple \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 54\n          }\n        }, \"headers\"), \". Use \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 74\n          }\n        }, \"Add this Header\"), \" to add header to the rule, and use \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 37\n          }\n        }, \"Add Match Rule\"), \" to add match rule.\")),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InfoAltIcon, {\n        noVerticalAlign: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 19\n        }\n      }))))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ExperimentTrafficForm, {\n        matches: this.state.experiment.trafficControl.match.http,\n        onRemove: this.onRemoveFromList,\n        onAdd: this.onAddToList,\n        onMoveMatchRule: this.onMoveMatchRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"renderCriteria\",\n    value: function renderCriteria() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"\\u3010\\u8BBE\\u7F6E\\u6027\\u80FD\\u8BC4\\u4F30\\u6307\\u6807\\u3011\", /*#__PURE__*/React.createElement(ExperimentCriteriaForm, {\n        iter8Info: this.state.iter8Info,\n        criterias: this.state.experiment.criterias,\n        metricNames: this.state.metricNames,\n        onAdd: this.onAddToList,\n        onRemove: this.onRemoveFromList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"renderHost\",\n    value: function renderHost() {\n      var _this8 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n        gutter: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"routerID\",\n        label: \"Router ID\",\n        isValid: this.state.experiment.routerID !== '',\n        helperText: \"Refers to the id of router used to handle traffic for the experiment. Default value: first entry of effective host.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"routerID\",\n        value: this.state.experiment.routerID,\n        placeholder: \"ID of router\",\n        onChange: function onChange(value) {\n          return _this8.changeExperiment('routerID', value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ExperimentHostForm, {\n        hosts: this.state.experiment.hosts,\n        hostsOfGateway: this.state.hostsOfGateway,\n        gateways: this.state.gateways,\n        onAdd: this.onAddToList,\n        onRemove: this.onRemoveFromList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"renderFullPage\",\n    value: function renderFullPage() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderCriteria(), /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"\\u8BBE\\u7F6E\\u5B9E\\u9A8C\\u5468\\u671F\",\n        fieldId: \"showDuration\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"showDuration\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.showDurationControl,\n        onChange: this.onChangeShowDurationControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 13\n        }\n      })), this.state.showDurationControl && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"\\u5B9E\\u9A8C\\u5468\\u671F\",\n        fieldId: \"drationControall\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 13\n        }\n      }, this.renderDuration()), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Show Traffic Control\",\n        fieldId: \"showTrafficControl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"showTrafficControl\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.showTrafficControl,\n        onChange: this.onChangeShowTrafficControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 13\n        }\n      })), this.state.showTrafficControl && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup\n      /* label=\"Traffic Control\"*/\n      , {\n        fieldId: \"trafficControl\",\n        label: /*#__PURE__*/React.createElement(Popover, {\n          position: 'right',\n          hideOnOutsideClick: true,\n          maxWidth: '40rem',\n          headerContent: /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1002,\n              columnNumber: 36\n            }\n          }, \"Traffic Control\"),\n          bodyContent: /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1004,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1005,\n              columnNumber: 25\n            }\n          }, \"Configuration that affect how application traffic is split across different versions of the service during and after the experiment.\"), ' ', /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1009,\n              columnNumber: 25\n            }\n          }, \"Traffic Control Strategies:\"), \" (reference\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            href: \"https://iter8.tools/reference/algorithms/#traffic-control-strategies\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1010,\n              columnNumber: 25\n            }\n          }, \"here\"), ' ', \"for detail )\", /*#__PURE__*/React.createElement(\"table\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            className: 'tr',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 29\n            }\n          }, \"Progressive:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 29\n            }\n          }, \"Progressively shift all traffic to the winner.\")), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1023,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1024,\n              columnNumber: 29\n            }\n          }, \"top_2:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1025,\n              columnNumber: 29\n            }\n          }, \"Converge towards a 50-50 traffic split between the best two versions\")), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 29\n            }\n          }, \"uniform:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 29\n            }\n          }, \"Converge towards a uniform traffic split across all versions.\"))), ' ', /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1032,\n              columnNumber: 25\n            }\n          }, \"On Termination: \"), /*#__PURE__*/React.createElement(\"table\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1033,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1034,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            valign: 'top',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 29\n            }\n          }, \"to_winner:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 29\n            }\n          }, \"If a winning version is found at the end of the experiment, all traffic will flow to this version after the experiment terminates.\")), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1041,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            valign: 'top',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 29\n            }\n          }, \"to_baseline:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 29\n            }\n          }, \"All traffic will flow to the baseline version, after the experiment terminates.\")), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1045,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            valign: 'top',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1046,\n              columnNumber: 29\n            }\n          }, \"keep_last:\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 29\n            }\n          }, \"Ensure that the traffic split used during the final iteration of the experiment continues even after the experiment has terminated\")))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          variant: \"link\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 21\n          }\n        }, \"Traffic Control \", /*#__PURE__*/React.createElement(InfoAltIcon, {\n          noVerticalAlign: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 39\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 15\n        }\n      }, this.renderTraffic())), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Show Networking Control\",\n        fieldId: \"addHostGateway\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"addHostGateway\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addHostGateway,\n        onChange: this.onChangeHostGateway,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1067,\n          columnNumber: 13\n        }\n      })), this.state.addHostGateway && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Networking\",\n        fieldId: \"hostsGateways\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 13\n        }\n      }, this.renderHost())));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      var isFormValid = this.isMainFormValid() && this.isSCFormValid();\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DefaultSecondaryMasthead, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(RenderContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: containerPadding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        className: formPadding,\n        isHorizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118,\n          columnNumber: 13\n        }\n      }, this.renderFullGeneral(), this.renderFullPage(), /*#__PURE__*/React.createElement(ActionGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          float: 'left',\n          paddingTop: '10px',\n          paddingBottom: '10px',\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          float: 'right',\n          paddingRight: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1130,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.primary,\n        isDisabled: !isFormValid,\n        onClick: function onClick() {\n          return _this9.createExperiment();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1131,\n          columnNumber: 21\n        }\n      }, \"Create\")), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          float: 'right',\n          paddingRight: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.secondary,\n        onClick: function onClick() {\n          _this9.goExperimentsPage();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 21\n        }\n      }, \"Cancel\"))))))));\n    }\n  }]);\n\n  return ExperimentCreatePage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    activeNamespaces: activeNamespacesSelector(state)\n  };\n};\n\nvar ExperimentCreatePageContainer = connect(mapStateToProps, null)(ExperimentCreatePage);\nexport default ExperimentCreatePageContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentCreatePage.tsx"],"names":["React","style","API","AlertUtils","ActionGroup","Button","ButtonVariant","Form","FormGroup","FormSelect","FormSelectOption","Grid","GridItem","Popover","Switch","Text","TextInputBase","TextInput","TextVariants","history","RenderContent","ExperimentCriteriaForm","ExperimentHostForm","initHost","ExperimentTrafficForm","PromisesRegistry","activeNamespacesSelector","connect","PFColors","InfoAltIcon","DefaultSecondaryMasthead","MOVE_TYPE","OnRemoveFromListOptions","containerPadding","padding","regex","formPadding","durationTimeStyle","paddingTop","color","Blue400","algorithms","onTermination","iter8oExpOptions","value","label","ExperimentCreatePage","props","promises","fetchNamespaces","register","getNamespaces","then","namespacesResponse","allNamespaces","data","map","nsInfo","name","setState","prevState","newExperiment","experiment","baseline","candidates","namespace","namespaces","reloadService","location","pathname","endsWith","fetchIter8Info","getIter8Info","result","iter8Info","metricNames","catch","infoerror","isCanceled","addError","fetchMetrics","getIter8Metrics","mresponse","metricsNames","concat","metricsError","fetchServices","selectedNS","_namespace","state","length","has","getServices","response","services","svc","getServiceDetail","responseDetail","workloads","w","service","cancel","svcDetailError","svcError","fetchGateways","getIstioConfig","gatewayhostpair","gateways","push","forEach","gt","spec","servers","metadata","hosts","hs","gateway","hostsOfGateway","hostState","fetchWorkloads","serviceName","onExperimentChange","newexperiment","onExperimentKindChange","_","experimentKind","goExperimentsPage","createExperiment","nsName","JSON","stringify","error","changeExperiment","field","trim","showMaxIncrement","trafficControl","strategy","split","el","apiversion","criterias","metric","toleranceType","routerID","onChange","isMainFormValid","changeExperimentNumber","duration","maxIterations","maxIncrement","tolerance","intervalInSecond","interval","totalSecond","hours","Math","floor","minutes","totalDuration","search","isTCFormValid","isSCFormValid","onAddToList","newCriteria","newHost","newMatch","match","http","onRemoveFromList","type","index","Criteria","splice","Host","Match","onMoveMatchRule","move","sourceRules","sourceRule","targetIndex","UP","targetRule","onChangeHostGateway","addHostGateway","onChangeShowTrafficControl","showTrafficControl","onChangeShowDurationControl","showDurationControl","enabled","supportedVersion","analyticsImgVersion","controllerImgVersion","showAdvanced","filename","cancelAll","undefined","namespacesError","_prevState","isDeployment","usingMap","wk","join","isNamespacesValid","option","ns","renderBaselineSelect","renderCandidateSelect","Number","display","a","renderCriteria","renderDuration","renderTraffic","renderHost","isFormValid","backgroundColor","renderFullGeneral","renderFullPage","float","paddingBottom","width","paddingRight","primary","secondary","Component","mapStateToProps","activeNamespaces","ExperimentCreatePageContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Criteria, ExperimentSpec, Host, Iter8Info } from '../../../../types/Iter8';\nimport { style } from 'typestyle';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport {\n  ActionGroup,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Grid,\n  GridItem,\n  Popover,\n  Switch,\n  Text,\n  TextInputBase as TextInput,\n  TextVariants\n} from '@patternfly/react-core';\nimport history from '../../../../app/History';\nimport { RenderContent } from '../../../../components/Nav/Page';\nimport Namespace from '../../../../types/Namespace';\nimport ExperimentCriteriaForm from './ExperimentCriteriaForm';\nimport ExperimentHostForm, { HostState, initHost } from './ExperimentHostForm';\nimport ExperimentTrafficForm from './ExperimentTrafficForm';\nimport { PromisesRegistry } from '../../../../utils/CancelablePromises';\nimport { KialiAppState } from '../../../../store/Store';\nimport { activeNamespacesSelector } from '../../../../store/Selectors';\nimport { connect } from 'react-redux';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport DefaultSecondaryMasthead from '../../../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport { MOVE_TYPE } from './ExperimentRules';\n\ninterface Props {\n  serviceName: string;\n  namespace: string;\n  onChange: (valid: boolean, experiment: ExperimentSpec) => void;\n  showAdvanced: boolean;\n}\n\ninterface State {\n  iter8Info: Iter8Info;\n  experiment: ExperimentSpec;\n  namespaces: string[];\n  services: string[];\n  workloads: string[];\n  gateways: string[];\n  hostsOfGateway: Host[];\n  metricNames: string[];\n  showAdvanced: boolean;\n  showMaxIncrement: boolean;\n  reloadService: boolean;\n  totalDuration: string;\n  hostState: HostState;\n  value: string;\n  filename: string;\n  addHostGateway: boolean;\n  showTrafficControl: boolean;\n  showDurationControl: boolean;\n}\n\nexport enum OnRemoveFromListOptions {\n  Criteria,\n  Host,\n  Match\n}\n\n// Style constants\nconst containerPadding = style({ padding: '20px 20px 20px 20px' });\nconst regex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[-a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst formPadding = style({ padding: '30px 20px 30px 20px' });\n\nconst durationTimeStyle = style({\n  paddingTop: 8,\n  color: PFColors.Blue400\n});\nconst algorithms = ['progressive', 'top_2', 'uniform'];\nconst onTermination = ['to_winner', 'to_baseline', 'keep_last'];\n\nconst iter8oExpOptions = [\n  { value: 'Deployment', label: 'Deployment' },\n  { value: 'Service', label: 'Service' }\n];\n\nclass ExperimentCreatePage extends React.Component<Props, State> {\n  private promises = new PromisesRegistry();\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        analyticsImgVersion: '',\n        controllerImgVersion: '',\n        namespace: 'iter8'\n      },\n      experiment: {\n        name: '',\n        namespace: this.props.namespace,\n        apiversion: 'v1',\n        service: this.props.serviceName,\n        baseline: '',\n        candidates: [],\n        experimentKind: 'Deployment',\n        trafficControl: {\n          strategy: 'progressive',\n          maxIncrement: 10,\n          onTermination: 'to_winner',\n          match: {\n            http: []\n          }\n        },\n        duration: {\n          interval: '30s',\n          intervalInSecond: 30,\n          maxIterations: 10\n        },\n        criterias: [],\n        hosts: [],\n        routerID: ''\n      },\n      namespaces: [],\n      services: [],\n      workloads: [],\n      gateways: [],\n      hostsOfGateway: [],\n      metricNames: [],\n      showAdvanced: history.location.pathname.endsWith('/new') ? true : this.props.showAdvanced,\n      showMaxIncrement: true,\n      reloadService: false,\n      totalDuration: '5 mins',\n      hostState: initHost(''),\n      value: '',\n      filename: '',\n      addHostGateway: false,\n      showTrafficControl: false,\n      showDurationControl: false\n    };\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  fetchNamespaces = () => {\n    this.promises.register('namespaces', API.getNamespaces()).then(namespacesResponse => {\n      let allNamespaces = namespacesResponse.data.map(nsInfo => {\n        return nsInfo.name;\n      });\n      this.setState(prevState => {\n        const newExperiment = prevState.experiment;\n        newExperiment.baseline = '';\n        newExperiment.candidates = [];\n        newExperiment.namespace = allNamespaces[0];\n        return {\n          experiment: newExperiment,\n          namespaces: allNamespaces,\n          reloadService: !history.location.pathname.endsWith('/new')\n        };\n      });\n    });\n  };\n\n  fetchIter8Info = () => {\n    this.promises\n      .register('iter8Metrics', API.getIter8Info())\n      .then(result => {\n        const iter8Info = result.data;\n        this.setState(prevState => {\n          return {\n            iter8Info: iter8Info,\n            experiment: prevState.experiment,\n            reloadService: prevState.reloadService,\n            metricNames: prevState.metricNames\n          };\n        });\n      })\n      .catch(infoerror => {\n        if (!infoerror.isCanceled) {\n          AlertUtils.addError('Could not fetch Iter8 Info Detail.', infoerror);\n        }\n      });\n  };\n\n  fetchMetrics = () => {\n    this.promises\n      .register('iter8Metrics', API.getIter8Metrics())\n      .then(mresponse => {\n        let metricsNames: string[] = ['-- 请选择 ---'];\n        metricsNames = metricsNames.concat(mresponse.data);\n        this.setState(prevState => {\n          return {\n            iter8Info: prevState.iter8Info,\n            experiment: prevState.experiment,\n            reloadService: prevState.reloadService,\n            metricNames: metricsNames\n          };\n        });\n      })\n      .catch(metricsError => {\n        if (!metricsError.isCanceled) {\n          AlertUtils.addError('Could not fetch Iter8 Metric  Detail.', metricsError);\n        }\n      });\n  };\n\n  fetchServices = (selectedNS: string) => {\n    let _namespace = '';\n    if (selectedNS !== '') {\n      _namespace = selectedNS;\n    } else if (this.state.experiment.namespace !== '') {\n      _namespace = this.state.experiment.namespace;\n    }\n\n    if (_namespace.length > 0) {\n      if (!this.promises.has('servicesByNamespace')) {\n        this.promises\n          .register('servicesByNamespace', API.getServices(_namespace))\n          .then(response => {\n            const services: string[] = response.data.services.map(svc => svc.name);\n            if (services.length > 0) {\n              this.promises\n                .register('firstServiceDetails', API.getServiceDetail(_namespace, services[0], false))\n                .then(responseDetail => {\n                  let workloads: string[] = [];\n                  if (responseDetail.workloads) {\n                    workloads = responseDetail.workloads.map(w => w.name);\n                  }\n                  this.setState(prevState => {\n                    prevState.experiment.service = services[0];\n                    if (workloads.length > 0) {\n                      prevState.experiment.baseline = workloads[0];\n                    }\n                    return {\n                      services: services,\n                      workloads: workloads,\n                      experiment: prevState.experiment,\n                      reloadService: false\n                    };\n                  });\n                  this.promises.cancel('firstServiceDetails');\n                })\n                .catch(svcDetailError => {\n                  if (!svcDetailError.isCanceled) {\n                    AlertUtils.addError('Could not fetch Service Detail.', svcDetailError);\n                  }\n                });\n            }\n            // Clean promise from register\n            this.promises.cancel('servicesByNamespace');\n          })\n          .catch(svcError => {\n            if (!svcError.isCanceled) {\n              AlertUtils.addError('Could not fetch Services list.', svcError);\n            }\n          });\n      }\n    }\n  };\n\n  fetchGateways = (namespace: string) => {\n    this.promises.register('gateways', API.getIstioConfig(namespace, ['gateways'], false, '', '')).then(response => {\n      let gatewayhostpair: Host[] = [];\n      let gateways: string[] = [];\n      gateways.push('-- select gateway --');\n      response.data.gateways.forEach(gt => {\n        gt.spec.servers?.forEach(svc => {\n          gateways.push(gt.metadata.name);\n          svc.hosts.forEach(hs => {\n            gatewayhostpair.push({\n              name: hs,\n              gateway: gt.metadata.name\n            });\n          });\n        });\n      });\n      this.setState(prevState => {\n        return {\n          services: prevState.services,\n          workloads: prevState.workloads,\n          gateways: gateways,\n          hostsOfGateway: gatewayhostpair,\n          experiment: prevState.experiment,\n          reloadService: false,\n          hostState: initHost(gateways[0])\n        };\n      });\n    });\n  };\n\n  fetchWorkloads = (namespace, serviceName: string) => {\n    this.promises\n      .register('serviceDetails', API.getServiceDetail(namespace, serviceName, false))\n      .then(responseDetail => {\n        let workloads: string[] = [];\n        if (responseDetail.workloads) {\n          workloads = responseDetail.workloads.map(w => w.name);\n        }\n        this.setState(prevState => {\n          if (workloads.length > 0) {\n            prevState.experiment.baseline = workloads[0];\n          }\n          return {\n            workloads: workloads,\n            experiment: prevState.experiment\n          };\n        });\n      })\n      .catch(svcDetailError => {\n        if (!svcDetailError.isCanceled) {\n          AlertUtils.addError('Could not fetch Service Detail.', svcDetailError);\n        }\n      });\n  };\n\n  componentDidMount() {\n    if (this.state.namespaces.length === 0 && this.props.namespace === undefined) {\n      this.promises\n        .register('namespaces', API.getNamespaces())\n        .then(namespacesResponse => {\n          const namespace: Namespace[] = namespacesResponse.data;\n          let allNamespaces = namespace.map(nsInfo => {\n            return nsInfo.name;\n          });\n          this.setState(prevState => {\n            const newExperiment = prevState.experiment;\n            newExperiment.namespace = allNamespaces[0];\n            return {\n              experiment: newExperiment,\n              namespaces: allNamespaces,\n              reloadService: false\n            };\n          });\n        })\n        .then(() => {\n          this.fetchIter8Info();\n        })\n        .then(() => {\n          this.fetchServices(this.state.experiment.namespace);\n        })\n        .then(() => {\n          this.fetchGateways(this.state.experiment.namespace);\n        })\n        .then(() => {\n          this.fetchMetrics();\n        })\n        .catch(namespacesError => {\n          if (!namespacesError.isCanceled) {\n            AlertUtils.addError('Could not fetch namespace list', namespacesError);\n          }\n        });\n    } else if (this.props.namespace !== undefined && this.props.serviceName !== undefined) {\n      this.fetchWorkloads(this.props.namespace, this.props.serviceName);\n      this.fetchGateways(this.props.namespace);\n      this.fetchMetrics();\n    }\n  }\n\n  componentDidUpdate(_: Props, _prevState: State) {\n    if (this.state.reloadService) {\n      this.fetchServices('');\n    }\n  }\n\n  onExperimentChange = (newexperiment: ExperimentSpec) => {\n    this.setState({\n      experiment: newexperiment\n    });\n  };\n\n  onExperimentKindChange = (value, _) => {\n    this.setState(prevState => {\n      const newExperiment = prevState.experiment;\n      newExperiment.experimentKind = value;\n      return {\n        experiment: newExperiment\n      };\n    });\n  };\n\n  // Invoke the history object to update and URL and start a routing\n  goExperimentsPage = () => {\n    history.push('/extensions/iter8');\n  };\n\n  // It invokes backend to create  a new experiment\n  createExperiment = () => {\n    const nsName = this.state.experiment.namespace;\n    this.promises\n      .register('Create Iter8 Experiment', API.createExperiment(nsName, JSON.stringify(this.state.experiment), {}))\n      .then(_ => this.goExperimentsPage())\n      .catch(error => AlertUtils.addError('Could not create Experiment.', error));\n  };\n\n  // Updates state with modifications of the new/editing handler\n  changeExperiment = (field: string, value: string) => {\n    this.setState(\n      prevState => {\n        let reloadService = prevState.reloadService;\n        const newExperiment = prevState.experiment;\n        switch (field) {\n          case 'name':\n            newExperiment.name = value.trim();\n            break;\n          case 'namespace':\n            newExperiment.namespace = value.trim();\n            reloadService = true;\n            break;\n          case 'service':\n            newExperiment.service = value.trim();\n            break;\n          case 'algorithm':\n            if (value.trim() === 'progressive') {\n              this.setState({\n                showMaxIncrement: true\n              });\n            } else {\n              this.setState({\n                showMaxIncrement: false\n              });\n            }\n            newExperiment.trafficControl.strategy = value.trim();\n            break;\n          case 'onTermination':\n            newExperiment.trafficControl.onTermination = value.trim();\n            break;\n          case 'baseline':\n            newExperiment.baseline = value.trim();\n            break;\n          case 'candidate':\n            let candidates = value.trim().split(',');\n            candidates = candidates.map(function (el) {\n              return el.trim();\n            });\n            newExperiment.candidates = candidates;\n            break;\n          case 'kubernets':\n            newExperiment.apiversion = 'v1';\n            break;\n          case 'knative':\n            newExperiment.apiversion = 'serving.knative.dev/v1alpha1';\n            break;\n          case 'metricName':\n            newExperiment.criterias[0].metric = value.trim();\n            break;\n          case 'toleranceType':\n            newExperiment.criterias[0].toleranceType = value.trim();\n            break;\n          case 'routerID':\n            newExperiment.routerID = value.trim();\n            break;\n          default:\n        }\n        return {\n          experiment: newExperiment,\n          reloadService: reloadService\n        };\n      },\n      () => {\n        history.location.pathname.endsWith('/new')\n          ? this.onExperimentChange(this.state.experiment)\n          : this.props.onChange(this.isMainFormValid(), this.state.experiment);\n      }\n    );\n  };\n\n  // Updates state with modifications of the new/editing handler\n  changeExperimentNumber = (field: string, value: number) => {\n    this.setState(\n      prevState => {\n        const newExperiment = prevState.experiment;\n        switch (field) {\n          case 'maxIteration':\n            newExperiment.duration.maxIterations = value;\n            break;\n          case 'maxIncrement':\n            newExperiment.trafficControl.maxIncrement = value;\n            break;\n          case 'tolerance':\n            newExperiment.criterias[0].tolerance = value;\n            break;\n          case 'interval':\n            newExperiment.duration.intervalInSecond = value;\n            newExperiment.duration.interval = newExperiment.duration.intervalInSecond + 's';\n            break;\n          default:\n        }\n        const totalSecond = newExperiment.duration.maxIterations * newExperiment.duration.intervalInSecond;\n        const hours = Math.floor(totalSecond / 60 / 60);\n        const minutes = Math.floor(totalSecond / 60) - hours * 60;\n        return {\n          experiment: newExperiment,\n          totalDuration: hours + ' hours ' + minutes + ' minutes ' + (totalSecond % 60) + ' seconds'\n        };\n      },\n      () => {\n        history.location.pathname.endsWith('/new')\n          ? this.onExperimentChange(this.state.experiment)\n          : this.props.onChange(this.isMainFormValid(), this.state.experiment);\n      }\n    );\n  };\n\n  isMainFormValid = (): boolean => {\n    return (\n      this.state.experiment.name !== '' &&\n      this.state.experiment.name.search(regex) === 0 &&\n      ((this.state.experiment.experimentKind === 'Deployment' && this.state.experiment.service !== '') ||\n        this.state.experiment.experimentKind === 'Service') &&\n      this.state.experiment.namespace !== '' &&\n      this.state.experiment.baseline !== '' &&\n      this.state.experiment.candidates.length !== 0\n    );\n  };\n\n  isTCFormValid = (): boolean => {\n    return this.state.experiment.duration.interval !== '' && this.state.experiment.duration.maxIterations > 0;\n  };\n\n  isSCFormValid = (): boolean => {\n    return this.state.experiment.criterias.length !== 0;\n  };\n\n  renderBaselineSelect() {\n    const isDeployment = this.state.experiment.experimentKind === 'Deployment';\n    const usingMap = isDeployment ? this.state.workloads : this.state.services;\n    return [\n      <FormGroup\n        fieldId=\"baseline\"\n        label={isDeployment ? '基准版本' : '基准版本'}\n        isRequired={true}\n        isValid={this.state.experiment.baseline !== ''}\n        // helperText={\n        //   isDeployment\n        //     ? 'The baseline deployment of the target service (i.e. reviews-v1)'\n        //     : 'The baseline service (i.e. reviews)'\n        // }\n        helperTextInvalid={isDeployment ? '基准版本不能为空！' : '基准版本不能为空！'}\n      >\n        <FormSelect\n          id=\"baseline\"\n          value={this.state.experiment.baseline}\n          placeholder={isDeployment ? 'Baseline Deployment' : 'Baseline Service'}\n          onChange={value => this.changeExperiment('baseline', value)}\n        >\n          {usingMap.map((wk, index) => (\n            <FormSelectOption label={wk} key={'workloadBaseline' + index} value={wk} />\n          ))}\n        </FormSelect>\n      </FormGroup>\n    ];\n  }\n\n  renderCandidateSelect() {\n    const isDeployment = this.state.experiment.experimentKind === 'Deployment';\n    const usingMap = this.state.experiment.experimentKind === 'Deployment' ? this.state.workloads : this.state.services;\n    return [\n      <FormGroup\n        fieldId=\"candidates\"\n        label={isDeployment ? '候选版本' : '候选版本'}\n        isRequired={true}\n        isValid={this.state.experiment.candidates.length !== 0}\n        // helperText={\n        //   isDeployment\n        //     ? 'Name or a List of names of candidate deployment of the target service (i.e. reviews-v2, or reviews-v2,reviews-v3)'\n        //     : 'Name or a List of names of candidate service (i.e. reviews)'\n        // }\n        helperTextInvalid={isDeployment ? '候选版本不能为空！' : '候选版本不能为空！'}\n      >\n        <TextInput\n          id=\"candidate\"\n          value={this.state.experiment.candidates.join(',')}\n          placeholder=\"从列表中选择获胜自定义输入\"\n          onChange={value => this.changeExperiment('candidate', value)}\n          list={'candidateName'}\n          autoComplete={'off'}\n        />\n        <datalist id=\"candidateName\">\n          {usingMap.map((wk, index) =>\n            wk !== this.state.experiment.baseline ? (\n              <option label={wk} key={'workloadCandidate' + index} value={wk}>\n                {wk}\n              </option>\n            ) : (\n              ''\n            )\n          )}\n        </datalist>\n      </FormGroup>\n    ];\n  }\n\n  renderFullGeneral() {\n    const isNamespacesValid = false;\n\n    return (\n      <>\n        <FormGroup\n          fieldId=\"name\"\n          label=\"实验名称\"\n          isRequired={true}\n          isValid={this.state.experiment.name !== '' && this.state.experiment.name.search(regex) === 0}\n          helperTextInvalid=\"实验名称不能为空！\"\n        >\n          <TextInput\n            id=\"name\"\n            value={this.state.experiment.name}\n            placeholder=\"请输入实验名称\"\n            onChange={value => this.changeExperiment('name', value)}\n          />\n        </FormGroup>\n        <FormGroup\n          fieldId=\"experimentKind\"\n          label=\"目标类型\"\n          isRequired={true}\n          helperTextInvalid=\"实验目标为Deployment或者Service\"\n        >\n          <FormSelect\n            value={this.state.experiment.experimentKind}\n            onChange={this.onExperimentKindChange}\n            id=\"targetKind\"\n            name=\"targetKinde\"\n          >\n            {iter8oExpOptions.map((option, index) => (\n              <FormSelectOption key={index} value={option.value} label={option.label} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        {history.location.pathname.endsWith('/new') ? (\n          <>\n            <FormGroup\n              label=\"命名空间\"\n              isRequired={true}\n              fieldId=\"namespaces\"\n              // helperText={'指定实验所在的命名空间'}\n              isValid={isNamespacesValid}\n            >\n              <FormSelect\n                id=\"namespaces\"\n                value={this.state.experiment.namespace}\n                placeholder=\"Namespace\"\n                onChange={value => {\n                  this.changeExperiment('namespace', value);\n                  this.fetchServices(value);\n                  this.fetchGateways(value);\n                }}\n              >\n                {this.state.namespaces.map((svc, index) => (\n                  <FormSelectOption label={svc} key={'namespace' + index} value={svc} />\n                ))}\n              </FormSelect>\n            </FormGroup>\n\n            {this.state.experiment.experimentKind === 'Deployment' ? (\n              <>\n                <FormGroup\n                  fieldId=\"service\"\n                  label=\"目标服务\"\n                  isRequired={true}\n                  isValid={this.state.experiment.service !== ''}\n                  // helperText=\"Target Service specifies the reference to experiment targets (i.e. reviews)\"\n                  helperTextInvalid=\"目标服务不能为空！\"\n                >\n                  <FormSelect\n                    id=\"service\"\n                    value={this.state.experiment.service}\n                    placeholder=\"Target Service\"\n                    onChange={value => {\n                      this.changeExperiment('service', value);\n                      const ns = this.state.experiment.namespace;\n                      this.fetchWorkloads(ns, value);\n                    }}\n                  >\n                    {this.state.services.map((svc, index) => (\n                      <FormSelectOption label={svc} key={'service' + index} value={svc} />\n                    ))}\n                  </FormSelect>\n                </FormGroup>\n              </>\n            ) : (\n              <></>\n            )}\n          </>\n        ) : (\n          ''\n        )}\n        {this.renderBaselineSelect()}\n        {this.renderCandidateSelect()}\n      </>\n    );\n  }\n\n  onAddToList = (newCriteria: Criteria, newHost: Host, newMatch: any) => {\n    this.setState(prevState => {\n      if (newHost != null && newHost.name !== '') {\n        prevState.experiment.hosts.push(newHost);\n      } else if (newCriteria != null && newCriteria.metric !== '') {\n        prevState.experiment.criterias.push(newCriteria);\n      } else if (newMatch != null) {\n        prevState.experiment.trafficControl.match.http.push(newMatch);\n      }\n      return {\n        iter8Info: prevState.iter8Info,\n        experiment: {\n          name: prevState.experiment.name,\n          namespace: prevState.experiment.namespace,\n          service: prevState.experiment.service,\n          apiversion: prevState.experiment.apiversion,\n          baseline: prevState.experiment.baseline,\n          candidates: prevState.experiment.candidates,\n          trafficControl: prevState.experiment.trafficControl,\n          criterias: prevState.experiment.criterias,\n          hosts: prevState.experiment.hosts,\n          duration: prevState.experiment.duration,\n          experimentKind: prevState.experiment.experimentKind,\n          routerID: prevState.experiment.routerID\n        }\n      };\n    });\n  };\n\n  renderDuration() {\n    return (\n      <>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <div className={durationTimeStyle}>Total Experiment Duration: {this.state.totalDuration}</div>\n          </GridItem>\n          <GridItem span={6}>\n            <FormGroup\n              fieldId=\"interval\"\n              label=\"实验间隔（单位: 秒）\"\n              isValid={this.state.experiment.duration.interval !== ''}\n              // helperText=\"Frequency with which the controller calls the analytics service\"\n              helperTextInvalid=\"实验间隔不能为空！\"\n            >\n              <TextInput\n                id=\"interval\"\n                value={this.state.experiment.duration.intervalInSecond}\n                placeholder=\"请输入时间间隔\"\n                onChange={value => this.changeExperimentNumber('interval', Number(value))}\n              />\n            </FormGroup>\n          </GridItem>\n          <GridItem span={6}>\n            <FormGroup\n              fieldId=\"maxIteration\"\n              label=\"最大实验轮次\"\n              isValid={this.state.experiment.duration.maxIterations > 0}\n              // helperText=\"Maximum number of iterations for this experiment\"\n              helperTextInvalid=\"最大实验轮次不能为空\"\n            >\n              <TextInput\n                id=\"maxIteration\"\n                type=\"number\"\n                value={this.state.experiment.duration.maxIterations}\n                placeholder=\"Maximum Iteration\"\n                onChange={value => this.changeExperimentNumber('maxIteration', Number(value))}\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </>\n    );\n  }\n\n  renderTraffic() {\n    return (\n      <>\n        <Grid gutter=\"md\">\n          <GridItem span={6}>\n            <FormGroup\n              fieldId=\"algorithm\"\n              label=\"Algorithm\"\n              helperText=\"Strategy used to analyze the candidate and shift the traffic\"\n            >\n              <FormSelect\n                value={this.state.experiment.trafficControl.strategy}\n                id=\"algorithm\"\n                name=\"Algorithm\"\n                onChange={value => this.changeExperiment('algorithm', value)}\n              >\n                {algorithms.map((option, index) => (\n                  <FormSelectOption isDisabled={false} key={'p' + index} value={option} label={option} />\n                ))}\n              </FormSelect>\n            </FormGroup>\n          </GridItem>\n          <GridItem span={6}>\n            <FormGroup\n              fieldId=\"onTermination\"\n              label=\"onTermination\"\n              helperText=\"The traffic split behavior after the termination of the experiment.\"\n            >\n              <FormSelect\n                value={this.state.experiment.trafficControl.onTermination}\n                id=\"onTermination\"\n                name=\"On Termination\"\n                onChange={value => this.changeExperiment('onTermination', value)}\n              >\n                {onTermination.map((option, index) => (\n                  <FormSelectOption isDisabled={false} key={'ot' + index} value={option} label={option} />\n                ))}\n              </FormSelect>\n            </FormGroup>\n          </GridItem>\n\n          <GridItem span={12}>\n            <FormGroup\n              style={this.state.showMaxIncrement ? {} : { display: 'none' }}\n              fieldId=\"maxIncrement\"\n              label=\"Max Increment\"\n              isValid={this.state.experiment.trafficControl.maxIncrement > 0}\n              helperText=\"Maximum possible increase in traffic for a candidate in a single iteration (measured in percent). Default value: 2 (percent)\"\n              helperTextInvalid=\"Max Increment must be > 0\"\n            >\n              <TextInput\n                id=\"maxIncrement\"\n                value={this.state.experiment.trafficControl.maxIncrement}\n                placeholder=\"Max Increment\"\n                onChange={value => this.changeExperimentNumber('maxIncrement', Number(value))}\n              />\n            </FormGroup>\n          </GridItem>\n          <GridItem span={12}>\n            <Text component={TextVariants.a}>\n              Number of Match Rules: {this.state.experiment.trafficControl.match.http.length}\n              <Popover\n                position={'right'}\n                hideOnOutsideClick={true}\n                maxWidth={'40rem'}\n                headerContent={<div>Match Rules</div>}\n                bodyContent={\n                  <div>\n                    <p>\n                      Specifies the portion of traffic which can be routed to candidates during the experiment. Traffic\n                      that does not match this clause will be sent to baseline and never to a candidate during an\n                      experiment. By default, if this field is left unspecified, all traffic is used for an experiment.\n                    </p>\n                    <p>\n                      Currently, only http trafic is controlled. For each match rule, please specify one or both of{' '}\n                      <b>uri</b> and one or multiple <b>headers</b>. Use <b>Add this Header</b> to add header to the\n                      rule, and use <b>Add Match Rule</b> to add match rule.\n                    </p>\n                  </div>\n                }\n              >\n                <Button variant=\"link\">\n                  <InfoAltIcon noVerticalAlign />\n                </Button>\n              </Popover>\n            </Text>\n          </GridItem>\n          <GridItem span={12}>\n            <ExperimentTrafficForm\n              matches={this.state.experiment.trafficControl.match.http}\n              onRemove={this.onRemoveFromList}\n              onAdd={this.onAddToList}\n              onMoveMatchRule={this.onMoveMatchRule}\n            />\n          </GridItem>\n        </Grid>\n      </>\n    );\n  }\n\n  onRemoveFromList = (type: OnRemoveFromListOptions, index: number) => {\n    this.setState(prevState => {\n      if (type === OnRemoveFromListOptions.Criteria) {\n        prevState.experiment.criterias.splice(index, 1);\n      } else if (type === OnRemoveFromListOptions.Host) {\n        prevState.experiment.hosts.splice(index, 1);\n      } else if (type === OnRemoveFromListOptions.Match) {\n        prevState.experiment.trafficControl.match.http.splice(index, 1);\n      }\n\n      return {\n        iter8Info: prevState.iter8Info,\n        experiment: {\n          name: prevState.experiment.name,\n          namespace: prevState.experiment.namespace,\n          service: prevState.experiment.service,\n          apiversion: prevState.experiment.apiversion,\n          baseline: prevState.experiment.baseline,\n          candidates: prevState.experiment.candidates,\n          trafficControl: prevState.experiment.trafficControl,\n          criterias: prevState.experiment.criterias,\n          hosts: prevState.experiment.hosts,\n          duration: prevState.experiment.duration,\n          experimentKind: prevState.experiment.experimentKind,\n          routerID: prevState.experiment.routerID\n        }\n      };\n    });\n  };\n\n  onMoveMatchRule = (index: number, move: MOVE_TYPE) => {\n    this.setState(prevState => {\n      const sourceRules = prevState.experiment.trafficControl.match.http;\n      const sourceRule = sourceRules[index];\n      const targetIndex = move === MOVE_TYPE.UP ? index - 1 : index + 1;\n      const targetRule = sourceRules[targetIndex];\n      sourceRules[targetIndex] = sourceRule;\n      sourceRules[index] = targetRule;\n      return {\n        ...prevState\n      };\n    });\n  };\n\n  renderCriteria() {\n    return (\n      <>\n        【设置性能评估指标】\n        <ExperimentCriteriaForm\n          iter8Info={this.state.iter8Info}\n          criterias={this.state.experiment.criterias}\n          metricNames={this.state.metricNames}\n          onAdd={this.onAddToList}\n          onRemove={this.onRemoveFromList}\n        />\n      </>\n    );\n  }\n\n  renderHost() {\n    return (\n      <>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <FormGroup\n              fieldId=\"routerID\"\n              label=\"Router ID\"\n              isValid={this.state.experiment.routerID !== ''}\n              helperText=\"Refers to the id of router used to handle traffic for the experiment. Default value: first entry of effective host.\"\n            >\n              <TextInput\n                id=\"routerID\"\n                value={this.state.experiment.routerID}\n                placeholder=\"ID of router\"\n                onChange={value => this.changeExperiment('routerID', value)}\n              />\n            </FormGroup>\n          </GridItem>\n          <GridItem span={12}>\n            <ExperimentHostForm\n              hosts={this.state.experiment.hosts}\n              hostsOfGateway={this.state.hostsOfGateway}\n              gateways={this.state.gateways}\n              onAdd={this.onAddToList}\n              onRemove={this.onRemoveFromList}\n            />\n          </GridItem>\n        </Grid>\n      </>\n    );\n  }\n\n  renderFullPage() {\n    return (\n      <>\n        {this.renderCriteria()}\n        <Form>\n          <FormGroup label=\"设置实验周期\" fieldId=\"showDuration\">\n            <Switch\n              id=\"showDuration\"\n              label={' '}\n              labelOff={' '}\n              isChecked={this.state.showDurationControl}\n              onChange={this.onChangeShowDurationControl}\n            />\n          </FormGroup>\n          {this.state.showDurationControl && (\n            <FormGroup label=\"实验周期\" fieldId=\"drationControall\">\n              {this.renderDuration()}\n            </FormGroup>\n          )}\n          <FormGroup label=\"Show Traffic Control\" fieldId=\"showTrafficControl\">\n            <Switch\n              id=\"showTrafficControl\"\n              label={' '}\n              labelOff={' '}\n              isChecked={this.state.showTrafficControl}\n              onChange={this.onChangeShowTrafficControl}\n            />\n          </FormGroup>\n          {this.state.showTrafficControl && (\n            <>\n              <FormGroup\n                /* label=\"Traffic Control\"*/\n                fieldId=\"trafficControl\"\n                label={\n                  <Popover\n                    position={'right'}\n                    hideOnOutsideClick={true}\n                    maxWidth={'40rem'}\n                    headerContent={<div>Traffic Control</div>}\n                    bodyContent={\n                      <div>\n                        <p>\n                          Configuration that affect how application traffic is split across different versions of the\n                          service during and after the experiment.\n                        </p>{' '}\n                        <b>Traffic Control Strategies:</b> (reference{' '}\n                        <a\n                          href=\"https://iter8.tools/reference/algorithms/#traffic-control-strategies\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          here\n                        </a>{' '}\n                        for detail )\n                        <table>\n                          <tr className={'tr'}>\n                            <td>Progressive:&nbsp;</td>\n                            <td>Progressively shift all traffic to the winner.</td>\n                          </tr>\n                          <tr>\n                            <td>top_2:&nbsp;</td>\n                            <td>Converge towards a 50-50 traffic split between the best two versions</td>\n                          </tr>\n                          <tr>\n                            <td>uniform:&nbsp;</td>\n                            <td>Converge towards a uniform traffic split across all versions.</td>\n                          </tr>\n                        </table>{' '}\n                        <b>On Termination: </b>\n                        <table>\n                          <tr>\n                            <td valign={'top'}>to_winner:&nbsp;</td>\n                            <td>\n                              If a winning version is found at the end of the experiment, all traffic will flow to this\n                              version after the experiment terminates.\n                            </td>\n                          </tr>\n                          <tr>\n                            <td valign={'top'}>to_baseline:&nbsp;</td>\n                            <td>All traffic will flow to the baseline version, after the experiment terminates.</td>\n                          </tr>\n                          <tr>\n                            <td valign={'top'}>keep_last:&nbsp;</td>\n                            <td>\n                              Ensure that the traffic split used during the final iteration of the experiment continues\n                              even after the experiment has terminated\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n                    }\n                  >\n                    <Button variant=\"link\">\n                      Traffic Control <InfoAltIcon noVerticalAlign />\n                    </Button>\n                  </Popover>\n                }\n              >\n                {this.renderTraffic()}\n              </FormGroup>\n            </>\n          )}\n          <FormGroup label=\"Show Networking Control\" fieldId=\"addHostGateway\">\n            <Switch\n              id=\"addHostGateway\"\n              label={' '}\n              labelOff={' '}\n              isChecked={this.state.addHostGateway}\n              onChange={this.onChangeHostGateway}\n            />\n          </FormGroup>\n          {this.state.addHostGateway && (\n            <FormGroup label=\"Networking\" fieldId=\"hostsGateways\">\n              {this.renderHost()}\n            </FormGroup>\n          )}\n        </Form>\n      </>\n    );\n  }\n\n  onChangeHostGateway = () => {\n    this.setState(prevState => {\n      return {\n        addHostGateway: !prevState.addHostGateway\n      };\n    });\n  };\n\n  onChangeShowTrafficControl = () => {\n    this.setState(prevState => {\n      return {\n        showTrafficControl: !prevState.showTrafficControl\n      };\n    });\n  };\n\n  onChangeShowDurationControl = () => {\n    this.setState(prevState => {\n      return {\n        showDurationControl: !prevState.showDurationControl\n      };\n    });\n  };\n\n  render() {\n    const isFormValid = this.isMainFormValid() && this.isSCFormValid();\n    return (\n      <>\n        <div style={{ backgroundColor: '#fff' }}>\n          <DefaultSecondaryMasthead />\n        </div>\n        <RenderContent>\n          <div className={containerPadding}>\n            <Form className={formPadding} isHorizontal={true}>\n              {this.renderFullGeneral()}\n              {this.renderFullPage()}\n              <ActionGroup>\n                <span\n                  style={{\n                    float: 'left',\n                    paddingTop: '10px',\n                    paddingBottom: '10px',\n                    width: '100%'\n                  }}\n                >\n                  <span style={{ float: 'right', paddingRight: '5px' }}>\n                    <Button\n                      variant={ButtonVariant.primary}\n                      isDisabled={!isFormValid}\n                      onClick={() => this.createExperiment()}\n                    >\n                      Create\n                    </Button>\n                  </span>\n                  <span style={{ float: 'right', paddingRight: '5px' }}>\n                    <Button\n                      variant={ButtonVariant.secondary}\n                      onClick={() => {\n                        this.goExperimentsPage();\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </span>\n                </span>\n              </ActionGroup>\n            </Form>\n          </div>\n        </RenderContent>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  activeNamespaces: activeNamespacesSelector(state)\n});\n\nconst ExperimentCreatePageContainer = connect(mapStateToProps, null)(ExperimentCreatePage);\n\nexport default ExperimentCreatePageContainer;\n"]},"metadata":{},"sourceType":"module"}
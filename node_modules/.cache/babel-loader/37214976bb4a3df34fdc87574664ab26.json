{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Validations/ValidationStack.tsx\";\nimport React from 'react';\nimport { ValidationTypes } from '../../types/IstioObjects';\nimport Validation from './Validation';\nimport { highestSeverity } from '../../types/ServiceInfo';\nimport { Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { PFColors } from '../Pf/PfColors';\nvar colorStyle = style({\n  color: PFColors.White\n});\nvar titleStyle = style({\n  color: PFColors.White,\n  fontSize: '1.1rem'\n});\n\nvar ValidationStack = /*#__PURE__*/function (_React$Component) {\n  _inherits(ValidationStack, _React$Component);\n\n  var _super = _createSuper(ValidationStack);\n\n  function ValidationStack() {\n    _classCallCheck(this, ValidationStack);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ValidationStack, [{\n    key: \"validationList\",\n    value: function validationList() {\n      var _this = this;\n\n      return (this.props.checks || []).map(function (check, index) {\n        return /*#__PURE__*/React.createElement(StackItem, {\n          key: 'validation-check-item-' + index,\n          className: colorStyle,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Validation, {\n          key: 'validation-check-' + index,\n          severity: check.severity,\n          message: (check.code ? check.code + ' ' : '') + check.message,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 11\n          }\n        }));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var severity = highestSeverity(this.props.checks || []);\n      var isValid = severity === ValidationTypes.Correct;\n\n      if (!isValid) {\n        return /*#__PURE__*/React.createElement(Stack, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(StackItem, {\n          className: titleStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Text, {\n          component: TextVariants.h1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }\n        }, \"Istio validations\")), this.validationList());\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return ValidationStack;\n}(React.Component);\n\nexport default ValidationStack;","map":{"version":3,"sources":["/root/kiali-ui/src/components/Validations/ValidationStack.tsx"],"names":["React","ValidationTypes","Validation","highestSeverity","Stack","StackItem","Text","TextVariants","style","PFColors","colorStyle","color","White","titleStyle","fontSize","ValidationStack","props","checks","map","check","index","severity","code","message","isValid","Correct","h1","validationList","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAsBC,eAAtB,QAA6C,0BAA7C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,YAAjC,QAAqD,wBAArD;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAMA,IAAMC,UAAU,GAAGF,KAAK,CAAC;AAAEG,EAAAA,KAAK,EAAEF,QAAQ,CAACG;AAAlB,CAAD,CAAxB;AACA,IAAMC,UAAU,GAAGL,KAAK,CAAC;AAAEG,EAAAA,KAAK,EAAEF,QAAQ,CAACG,KAAlB;AAAyBE,EAAAA,QAAQ,EAAE;AAAnC,CAAD,CAAxB;;IAEMC,e;;;;;;;;;;;;;WACJ,0BAAiB;AAAA;;AACf,aAAO,CAAC,KAAKC,KAAL,CAAWC,MAAX,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACrD,4BACE,oBAAC,SAAD;AAAW,UAAA,GAAG,EAAE,2BAA2BA,KAA3C;AAAkD,UAAA,SAAS,EAAEV,UAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAE,sBAAsBU,KAD7B;AAEE,UAAA,QAAQ,EAAED,KAAK,CAACE,QAFlB;AAGE,UAAA,OAAO,EAAE,CAACF,KAAK,CAACG,IAAN,GAAaH,KAAK,CAACG,IAAN,GAAa,GAA1B,GAAgC,EAAjC,IAAuCH,KAAK,CAACI,OAHxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AASD,OAVM,CAAP;AAWD;;;WAED,kBAAS;AACP,UAAMF,QAAQ,GAAGlB,eAAe,CAAC,KAAKa,KAAL,CAAWC,MAAX,IAAqB,EAAtB,CAAhC;AACA,UAAMO,OAAO,GAAGH,QAAQ,KAAKpB,eAAe,CAACwB,OAA7C;;AACA,UAAI,CAACD,OAAL,EAAc;AACZ,4BACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAEX,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAEN,YAAY,CAACmB,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CADF,EAIG,KAAKC,cAAL,EAJH,CADF;AAQD,OATD,MASO;AACL,eAAO,IAAP;AACD;AACF;;;;EA9B2B3B,KAAK,CAAC4B,S;;AAiCpC,eAAeb,eAAf","sourcesContent":["import React from 'react';\nimport { ObjectCheck, ValidationTypes } from '../../types/IstioObjects';\nimport Validation from './Validation';\nimport { highestSeverity } from '../../types/ServiceInfo';\nimport { Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { PFColors } from '../Pf/PfColors';\n\ntype Props = {\n  checks?: ObjectCheck[];\n};\n\nconst colorStyle = style({ color: PFColors.White });\nconst titleStyle = style({ color: PFColors.White, fontSize: '1.1rem' });\n\nclass ValidationStack extends React.Component<Props> {\n  validationList() {\n    return (this.props.checks || []).map((check, index) => {\n      return (\n        <StackItem key={'validation-check-item-' + index} className={colorStyle}>\n          <Validation\n            key={'validation-check-' + index}\n            severity={check.severity}\n            message={(check.code ? check.code + ' ' : '') + check.message}\n          />\n        </StackItem>\n      );\n    });\n  }\n\n  render() {\n    const severity = highestSeverity(this.props.checks || []);\n    const isValid = severity === ValidationTypes.Correct;\n    if (!isValid) {\n      return (\n        <Stack>\n          <StackItem className={titleStyle}>\n            <Text component={TextVariants.h1}>Istio validations</Text>\n          </StackItem>\n          {this.validationList()}\n        </Stack>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ValidationStack;\n"]},"metadata":{},"sourceType":"module"}
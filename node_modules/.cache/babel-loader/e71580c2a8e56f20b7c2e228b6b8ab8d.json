{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { persistFilter } from 'redux-persist-transform-filter';\nimport { createTransform } from 'redux-persist';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk'; // defaults to localStorage for web and AsyncStorage for react-native\n\nimport storage from 'redux-persist/lib/storage';\nimport { INITIAL_GLOBAL_STATE } from '../reducers/GlobalState';\nimport { INITIAL_LOGIN_STATE } from '../reducers/LoginState';\nimport { INITIAL_GRAPH_STATE } from '../reducers/GraphDataState';\nimport { INITIAL_USER_SETTINGS_STATE } from '../reducers/UserSettingsState';\nimport { INITIAL_MESSAGE_CENTER_STATE } from '../reducers/MessageCenter';\nimport { INITIAL_STATUS_STATE } from '../reducers/HelpDropdownState';\nimport { INITIAL_NAMESPACE_STATE } from '../reducers/NamespaceState';\nimport { INITIAL_JAEGER_STATE } from '../reducers/JaegerState';\nimport { INITIAL_MESH_TLS_STATE } from '../reducers/MeshTlsState';\nimport { INITIAL_TOUR_STATE } from '../reducers/TourState';\nimport { INITIAL_ISTIO_STATUS_STATE } from '../reducers/IstioStatusState';\nimport { INITIAL_METRICS_STATS_STATE } from '../reducers/MetricsStatsState';\nimport { INITIAL_ISTIO_CERTS_INFO_STATE } from 'reducers/IstioCertsInfoState';\nvar webRoot = window.WEB_ROOT ? window.WEB_ROOT : undefined;\nvar persistKey = 'kiali-' + (webRoot && webRoot !== '/' ? webRoot.substring(1) : 'root'); // Needed to be able to whitelist fields but allowing to keep an initialState\n\nvar whitelistInputWithInitialState = function whitelistInputWithInitialState(reducerName, inboundPaths, initialState) {\n  return createTransform(function (inboundState) {\n    return persistFilter(inboundState, inboundPaths, 'whitelist');\n  }, function (outboundState) {\n    return _objectSpread(_objectSpread({}, initialState), outboundState);\n  }, {\n    whitelist: [reducerName]\n  });\n};\n\nvar authenticationPersistFilter = whitelistInputWithInitialState('authentication', ['landingRoute'], INITIAL_LOGIN_STATE);\nvar namespacePersistFilter = whitelistInputWithInitialState('namespaces', ['activeNamespaces'], INITIAL_NAMESPACE_STATE);\nvar graphPersistFilter = whitelistInputWithInitialState('graph', ['filterState', 'layout'], INITIAL_GRAPH_STATE);\nvar userSettingsPersitFilter = whitelistInputWithInitialState('userSettings', ['duration', 'refreshInterval', 'timeRange'], INITIAL_USER_SETTINGS_STATE);\nvar persistConfig = {\n  key: persistKey,\n  storage: storage,\n  whitelist: ['authentication', 'graph', 'jaegerState', 'namespaces', 'statusState', 'userSettings'],\n  transforms: [authenticationPersistFilter, graphPersistFilter, namespacePersistFilter, userSettingsPersitFilter]\n};\nvar composeEnhancers = process.env.NODE_ENV === 'development' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nvar configureStore = function configureStore(initialState) {\n  // configure middlewares\n  var middlewares = [thunk]; // compose enhancers\n\n  var enhancer = composeEnhancers(applyMiddleware.apply(void 0, middlewares)); // persist reducers\n\n  var persistentReducer = persistReducer(persistConfig, rootReducer);\n  return createStore(persistentReducer, initialState, enhancer);\n}; // Setup the initial state of the Redux store with defaults\n// (instead of having things be undefined until they are populated by query)\n// Redux 4.0 actually required this\n\n\nvar initialStore = {\n  globalState: INITIAL_GLOBAL_STATE,\n  statusState: INITIAL_STATUS_STATE,\n  namespaces: INITIAL_NAMESPACE_STATE,\n  authentication: INITIAL_LOGIN_STATE,\n  messageCenter: INITIAL_MESSAGE_CENTER_STATE,\n  graph: INITIAL_GRAPH_STATE,\n  userSettings: INITIAL_USER_SETTINGS_STATE,\n  jaegerState: INITIAL_JAEGER_STATE,\n  meshTLSStatus: INITIAL_MESH_TLS_STATE,\n  metricsStats: INITIAL_METRICS_STATS_STATE,\n  istioStatus: INITIAL_ISTIO_STATUS_STATE,\n  istioCertsInfo: INITIAL_ISTIO_CERTS_INFO_STATE,\n  tourState: INITIAL_TOUR_STATE\n}; // pass an optional param to rehydrate state on app start\n\nexport var store = configureStore(initialStore);\nexport var persistor = persistStore(store);","map":{"version":3,"sources":["/root/GraduateProject/src/store/ConfigStore.ts"],"names":["createStore","applyMiddleware","compose","persistStore","persistReducer","persistFilter","createTransform","rootReducer","thunk","storage","INITIAL_GLOBAL_STATE","INITIAL_LOGIN_STATE","INITIAL_GRAPH_STATE","INITIAL_USER_SETTINGS_STATE","INITIAL_MESSAGE_CENTER_STATE","INITIAL_STATUS_STATE","INITIAL_NAMESPACE_STATE","INITIAL_JAEGER_STATE","INITIAL_MESH_TLS_STATE","INITIAL_TOUR_STATE","INITIAL_ISTIO_STATUS_STATE","INITIAL_METRICS_STATS_STATE","INITIAL_ISTIO_CERTS_INFO_STATE","webRoot","window","WEB_ROOT","undefined","persistKey","substring","whitelistInputWithInitialState","reducerName","inboundPaths","initialState","inboundState","outboundState","whitelist","authenticationPersistFilter","namespacePersistFilter","graphPersistFilter","userSettingsPersitFilter","persistConfig","key","transforms","composeEnhancers","process","env","NODE_ENV","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","middlewares","enhancer","persistentReducer","initialStore","globalState","statusState","namespaces","authentication","messageCenter","graph","userSettings","jaegerState","meshTLSStatus","metricsStats","istioStatus","istioCertsInfo","tourState","store","persistor"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,8BAAT,QAA+C,8BAA/C;AAIA,IAAMC,OAAO,GAAIC,MAAD,CAAgBC,QAAhB,GAA4BD,MAAD,CAAgBC,QAA3C,GAAsDC,SAAtE;AACA,IAAMC,UAAU,GAAG,YAAYJ,OAAO,IAAIA,OAAO,KAAK,GAAvB,GAA6BA,OAAO,CAACK,SAAR,CAAkB,CAAlB,CAA7B,GAAoD,MAAhE,CAAnB,C,CAEA;;AACA,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,WAAD,EAAsBC,YAAtB,EAA8CC,YAA9C;AAAA,SACrC1B,eAAe,CACb,UAAA2B,YAAY;AAAA,WAAI5B,aAAa,CAAC4B,YAAD,EAAeF,YAAf,EAA6B,WAA7B,CAAjB;AAAA,GADC,EAEb,UAAAG,aAAa;AAAA,2CAAUF,YAAV,GAA2BE,aAA3B;AAAA,GAFA,EAGb;AAAEC,IAAAA,SAAS,EAAE,CAACL,WAAD;AAAb,GAHa,CADsB;AAAA,CAAvC;;AAOA,IAAMM,2BAA2B,GAAGP,8BAA8B,CAChE,gBADgE,EAEhE,CAAC,cAAD,CAFgE,EAGhElB,mBAHgE,CAAlE;AAMA,IAAM0B,sBAAsB,GAAGR,8BAA8B,CAC3D,YAD2D,EAE3D,CAAC,kBAAD,CAF2D,EAG3Db,uBAH2D,CAA7D;AAMA,IAAMsB,kBAAkB,GAAGT,8BAA8B,CAAC,OAAD,EAAU,CAAC,aAAD,EAAgB,QAAhB,CAAV,EAAqCjB,mBAArC,CAAzD;AAEA,IAAM2B,wBAAwB,GAAGV,8BAA8B,CAC7D,cAD6D,EAE7D,CAAC,UAAD,EAAa,iBAAb,EAAgC,WAAhC,CAF6D,EAG7DhB,2BAH6D,CAA/D;AAMA,IAAM2B,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAEd,UADe;AAEpBlB,EAAAA,OAAO,EAAEA,OAFW;AAGpB0B,EAAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,OAAnB,EAA4B,aAA5B,EAA2C,YAA3C,EAAyD,aAAzD,EAAwE,cAAxE,CAHS;AAIpBO,EAAAA,UAAU,EAAE,CAACN,2BAAD,EAA8BE,kBAA9B,EAAkDD,sBAAlD,EAA0EE,wBAA1E;AAJQ,CAAtB;AAOA,IAAMI,gBAAgB,GACnBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CtB,MAA1C,IAAoDA,MAAM,CAACuB,oCAA5D,IAAqG7C,OADvG;;AAGA,IAAM8C,cAAc,GAAG,SAAjBA,cAAiB,CAAChB,YAAD,EAAiC;AACtD;AACA,MAAMiB,WAAW,GAAG,CAACzC,KAAD,CAApB,CAFsD,CAGtD;;AACA,MAAM0C,QAAQ,GAAGP,gBAAgB,CAAC1C,eAAe,MAAf,SAAmBgD,WAAnB,CAAD,CAAjC,CAJsD,CAKtD;;AACA,MAAME,iBAAiB,GAAG/C,cAAc,CAACoC,aAAD,EAAgBjC,WAAhB,CAAxC;AAEA,SAAOP,WAAW,CAACmD,iBAAD,EAAoBnB,YAApB,EAAkCkB,QAAlC,CAAlB;AACD,CATD,C,CAWA;AACA;AACA;;;AACA,IAAME,YAA2B,GAAG;AAClCC,EAAAA,WAAW,EAAE3C,oBADqB;AAElC4C,EAAAA,WAAW,EAAEvC,oBAFqB;AAGlCwC,EAAAA,UAAU,EAAEvC,uBAHsB;AAIlCwC,EAAAA,cAAc,EAAE7C,mBAJkB;AAKlC8C,EAAAA,aAAa,EAAE3C,4BALmB;AAMlC4C,EAAAA,KAAK,EAAE9C,mBAN2B;AAOlC+C,EAAAA,YAAY,EAAE9C,2BAPoB;AAQlC+C,EAAAA,WAAW,EAAE3C,oBARqB;AASlC4C,EAAAA,aAAa,EAAE3C,sBATmB;AAUlC4C,EAAAA,YAAY,EAAEzC,2BAVoB;AAWlC0C,EAAAA,WAAW,EAAE3C,0BAXqB;AAYlC4C,EAAAA,cAAc,EAAE1C,8BAZkB;AAalC2C,EAAAA,SAAS,EAAE9C;AAbuB,CAApC,C,CAgBA;;AACA,OAAO,IAAM+C,KAAK,GAAGlB,cAAc,CAACI,YAAD,CAA5B;AACP,OAAO,IAAMe,SAAS,GAAGhE,YAAY,CAAC+D,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { KialiAppState } from './Store';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { persistFilter } from 'redux-persist-transform-filter';\nimport { createTransform } from 'redux-persist';\n\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\n\n// defaults to localStorage for web and AsyncStorage for react-native\nimport storage from 'redux-persist/lib/storage';\nimport { INITIAL_GLOBAL_STATE } from '../reducers/GlobalState';\nimport { INITIAL_LOGIN_STATE } from '../reducers/LoginState';\nimport { INITIAL_GRAPH_STATE } from '../reducers/GraphDataState';\nimport { INITIAL_USER_SETTINGS_STATE } from '../reducers/UserSettingsState';\nimport { INITIAL_MESSAGE_CENTER_STATE } from '../reducers/MessageCenter';\nimport { INITIAL_STATUS_STATE } from '../reducers/HelpDropdownState';\nimport { INITIAL_NAMESPACE_STATE } from '../reducers/NamespaceState';\nimport { INITIAL_JAEGER_STATE } from '../reducers/JaegerState';\nimport { INITIAL_MESH_TLS_STATE } from '../reducers/MeshTlsState';\nimport { INITIAL_TOUR_STATE } from '../reducers/TourState';\nimport { INITIAL_ISTIO_STATUS_STATE } from '../reducers/IstioStatusState';\nimport { INITIAL_METRICS_STATS_STATE } from '../reducers/MetricsStatsState';\nimport { INITIAL_ISTIO_CERTS_INFO_STATE } from 'reducers/IstioCertsInfoState';\n\ndeclare const window;\n\nconst webRoot = (window as any).WEB_ROOT ? (window as any).WEB_ROOT : undefined;\nconst persistKey = 'kiali-' + (webRoot && webRoot !== '/' ? webRoot.substring(1) : 'root');\n\n// Needed to be able to whitelist fields but allowing to keep an initialState\nconst whitelistInputWithInitialState = (reducerName: string, inboundPaths: string[], initialState: any) =>\n  createTransform(\n    inboundState => persistFilter(inboundState, inboundPaths, 'whitelist'),\n    outboundState => ({ ...initialState, ...outboundState }),\n    { whitelist: [reducerName] }\n  );\n\nconst authenticationPersistFilter = whitelistInputWithInitialState(\n  'authentication',\n  ['landingRoute'],\n  INITIAL_LOGIN_STATE\n);\n\nconst namespacePersistFilter = whitelistInputWithInitialState(\n  'namespaces',\n  ['activeNamespaces'],\n  INITIAL_NAMESPACE_STATE\n);\n\nconst graphPersistFilter = whitelistInputWithInitialState('graph', ['filterState', 'layout'], INITIAL_GRAPH_STATE);\n\nconst userSettingsPersitFilter = whitelistInputWithInitialState(\n  'userSettings',\n  ['duration', 'refreshInterval', 'timeRange'],\n  INITIAL_USER_SETTINGS_STATE\n);\n\nconst persistConfig = {\n  key: persistKey,\n  storage: storage,\n  whitelist: ['authentication', 'graph', 'jaegerState', 'namespaces', 'statusState', 'userSettings'],\n  transforms: [authenticationPersistFilter, graphPersistFilter, namespacePersistFilter, userSettingsPersitFilter]\n};\n\nconst composeEnhancers =\n  (process.env.NODE_ENV === 'development' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst configureStore = (initialState: KialiAppState) => {\n  // configure middlewares\n  const middlewares = [thunk];\n  // compose enhancers\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n  // persist reducers\n  const persistentReducer = persistReducer(persistConfig, rootReducer);\n\n  return createStore(persistentReducer, initialState, enhancer);\n};\n\n// Setup the initial state of the Redux store with defaults\n// (instead of having things be undefined until they are populated by query)\n// Redux 4.0 actually required this\nconst initialStore: KialiAppState = {\n  globalState: INITIAL_GLOBAL_STATE,\n  statusState: INITIAL_STATUS_STATE,\n  namespaces: INITIAL_NAMESPACE_STATE,\n  authentication: INITIAL_LOGIN_STATE,\n  messageCenter: INITIAL_MESSAGE_CENTER_STATE,\n  graph: INITIAL_GRAPH_STATE,\n  userSettings: INITIAL_USER_SETTINGS_STATE,\n  jaegerState: INITIAL_JAEGER_STATE,\n  meshTLSStatus: INITIAL_MESH_TLS_STATE,\n  metricsStats: INITIAL_METRICS_STATS_STATE,\n  istioStatus: INITIAL_ISTIO_STATUS_STATE,\n  istioCertsInfo: INITIAL_ISTIO_CERTS_INFO_STATE,\n  tourState: INITIAL_TOUR_STATE\n};\n\n// pass an optional param to rehydrate state on app start\nexport const store = configureStore(initialStore);\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}
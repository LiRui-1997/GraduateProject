{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/GraduateProject/src/pages/Graph/SummaryLink.tsx\";\n\nimport * as React from 'react';\nimport { NodeType, BoxByType, CLUSTER_DEFAULT } from '../../types/Graph';\nimport { CyNode, decoratedNodeData } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { Badge, PopoverPosition } from '@patternfly/react-core';\nimport { HealthIndicator } from 'components/Health/HealthIndicator';\nimport { getPFBadge, PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport KialiPageLink from 'components/Link/KialiPageLink';\nimport { serverConfig } from 'config';\n\nvar getTooltip = function getTooltip(tooltip, nodeData) {\n  var _serverConfig$cluster;\n\n  var addNamespace = nodeData.isBox !== BoxByType.NAMESPACE;\n  var addCluster = nodeData.isBox !== BoxByType.CLUSTER && nodeData.cluster !== CLUSTER_DEFAULT && (serverConfig === null || serverConfig === void 0 ? void 0 : (_serverConfig$cluster = serverConfig.clusterInfo) === null || _serverConfig$cluster === void 0 ? void 0 : _serverConfig$cluster.name) !== nodeData.cluster;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'left'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, tooltip), addNamespace && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 24\n    }\n  }, \"Namespace: \".concat(nodeData.namespace)), addCluster && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 22\n    }\n  }, \"Cluster: \".concat(nodeData.cluster)));\n};\n\nexport var getBadge = function getBadge(nodeData, nodeType) {\n  switch (nodeType || nodeData.nodeType) {\n    case NodeType.AGGREGATE:\n      return getPFBadge(PFBadges.Operation.badge, getTooltip(\"Operation: \".concat(nodeData.aggregate), nodeData));\n\n    case NodeType.APP:\n      return getPFBadge(PFBadges.App.badge, getTooltip(PFBadges.App.tt, nodeData));\n\n    case NodeType.BOX:\n      switch (nodeData.isBox) {\n        case BoxByType.APP:\n          return getPFBadge(PFBadges.App.badge, getTooltip(PFBadges.App.tt, nodeData));\n\n        case BoxByType.CLUSTER:\n          return getPFBadge(PFBadges.Cluster.badge, getTooltip(PFBadges.Cluster.tt, nodeData));\n\n        case BoxByType.NAMESPACE:\n          return getPFBadge(PFBadges.Namespace.badge, getTooltip(PFBadges.Namespace.tt, nodeData));\n\n        default:\n          return /*#__PURE__*/React.createElement(PFBadge, {\n            badge: PFBadges.Unknown,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 18\n            }\n          });\n      }\n\n    case NodeType.SERVICE:\n      return !!nodeData.isServiceEntry ? getPFBadge(PFBadges.ServiceEntry.badge, getTooltip(nodeData.isServiceEntry.location === 'MESH_EXTERNAL' ? 'External Service Entry' : 'Internal Service Entry', nodeData)) : getPFBadge(PFBadges.Service.badge, getTooltip(PFBadges.Service.tt, nodeData));\n\n    case NodeType.WORKLOAD:\n      return nodeData.hasWorkloadEntry ? getPFBadge(PFBadges.WorkloadEntry.badge, getTooltip(PFBadges.WorkloadEntry.tt, nodeData)) : getPFBadge(PFBadges.Workload.badge, getTooltip(PFBadges.Workload.tt, nodeData));\n\n    default:\n      return /*#__PURE__*/React.createElement(PFBadge, {\n        badge: PFBadges.Unknown,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }\n      });\n  }\n};\nexport var getLink = function getLink(nodeData, nodeType, linkGenerator) {\n  var app = nodeData.app,\n      cluster = nodeData.cluster,\n      namespace = nodeData.namespace,\n      service = nodeData.service,\n      workload = nodeData.workload;\n\n  if (!nodeType || nodeData.nodeType === NodeType.UNKNOWN) {\n    nodeType = nodeData.nodeType;\n  }\n\n  var displayName = 'unknown';\n  var link;\n  var key;\n\n  if (linkGenerator) {\n    var _linkGenerator = linkGenerator();\n\n    displayName = _linkGenerator.displayName;\n    link = _linkGenerator.link;\n    key = _linkGenerator.key;\n  } else {\n    switch (nodeType) {\n      case NodeType.AGGREGATE:\n        displayName = nodeData.aggregateValue;\n        break;\n\n      case NodeType.APP:\n        link = \"/namespaces/\".concat(encodeURIComponent(namespace), \"/applications/\").concat(encodeURIComponent(app));\n        key = \"\".concat(namespace, \".app.\").concat(app);\n        displayName = app;\n        break;\n\n      case NodeType.BOX:\n        switch (nodeData.isBox) {\n          case BoxByType.APP:\n            link = \"/namespaces/\".concat(encodeURIComponent(namespace), \"/applications/\").concat(encodeURIComponent(app));\n            key = \"\".concat(namespace, \".app.\").concat(app);\n            displayName = app;\n            break;\n\n          case BoxByType.CLUSTER:\n            displayName = cluster;\n            break;\n\n          case BoxByType.NAMESPACE:\n            displayName = namespace;\n            break;\n        }\n\n        break;\n\n      case NodeType.SERVICE:\n        if (nodeData.isServiceEntry) {\n          link = \"/namespaces/\".concat(encodeURIComponent(nodeData.isServiceEntry.namespace), \"/istio/serviceentries/\").concat(encodeURIComponent(service));\n        } else {\n          link = \"/namespaces/\".concat(encodeURIComponent(namespace), \"/services/\").concat(encodeURIComponent(service));\n        }\n\n        key = \"\".concat(namespace, \".svc.\").concat(service);\n        displayName = service;\n        break;\n\n      case NodeType.WORKLOAD:\n        link = \"/namespaces/\".concat(encodeURIComponent(namespace), \"/workloads/\").concat(encodeURIComponent(workload));\n        key = \"\".concat(namespace, \".wl.\").concat(workload);\n        displayName = workload;\n        break;\n\n      default:\n        // NOOP\n        break;\n    }\n  }\n\n  if (link && !nodeData.isInaccessible) {\n    return /*#__PURE__*/React.createElement(KialiPageLink, {\n      key: key,\n      href: link,\n      cluster: cluster,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, displayName);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    key: key,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 10\n    }\n  }, displayName);\n};\nexport var renderBadgedHost = function renderBadgedHost(host) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PFBadge, {\n    badge: PFBadges.Host,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), host === '*' ? '* (all hosts)' : host);\n};\nexport var renderBadgedLink = function renderBadgedLink(nodeData, nodeType, label, linkGenerator) {\n  var link = getLink(nodeData, nodeType, linkGenerator);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginRight: '1em',\n      marginBottom: '3px',\n      display: 'inline-block'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, label && /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'pre'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, label)), getBadge(nodeData, nodeType), link), nodeData.isInaccessible && /*#__PURE__*/React.createElement(KialiIcon.MtlsLock, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 35\n    }\n  }));\n};\nexport var renderHealth = function renderHealth(health) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Badge, {\n    style: {\n      fontWeight: 'normal',\n      marginTop: '4px',\n      marginBottom: '4px'\n    },\n    isRead: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      margin: '3px 3px 1px 0'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, health ? /*#__PURE__*/React.createElement(HealthIndicator, {\n    id: \"graph-health-indicator\",\n    health: health,\n    tooltipPlacement: PopoverPosition.left,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }) : 'n/a'), \"health\"));\n};\nexport var renderDestServicesLinks = function renderDestServicesLinks(node) {\n  var nodeData = decoratedNodeData(node);\n  var destServices = node.data(CyNode.destServices);\n  var links = [];\n\n  if (!destServices) {\n    return links;\n  }\n\n  destServices.forEach(function (ds) {\n    var serviceNodeData = {\n      id: nodeData.id,\n      app: '',\n      cluster: ds.cluster,\n      isInaccessible: nodeData.isInaccessible,\n      isOutside: nodeData.isOutside,\n      isRoot: nodeData.isRoot,\n      isServiceEntry: nodeData.isServiceEntry,\n      namespace: nodeData.isServiceEntry ? nodeData.isServiceEntry.namespace : nodeData.namespace,\n      nodeType: NodeType.SERVICE,\n      service: ds.name,\n      version: '',\n      workload: ''\n    };\n    links.push(renderBadgedLink(serviceNodeData));\n  });\n  return links;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Graph/SummaryLink.tsx"],"names":["React","NodeType","BoxByType","CLUSTER_DEFAULT","CyNode","decoratedNodeData","KialiIcon","Badge","PopoverPosition","HealthIndicator","getPFBadge","PFBadge","PFBadges","KialiPageLink","serverConfig","getTooltip","tooltip","nodeData","addNamespace","isBox","NAMESPACE","addCluster","CLUSTER","cluster","clusterInfo","name","textAlign","namespace","getBadge","nodeType","AGGREGATE","Operation","badge","aggregate","APP","App","tt","BOX","Cluster","Namespace","Unknown","SERVICE","isServiceEntry","ServiceEntry","location","Service","WORKLOAD","hasWorkloadEntry","WorkloadEntry","Workload","getLink","linkGenerator","app","service","workload","UNKNOWN","displayName","link","key","aggregateValue","encodeURIComponent","isInaccessible","renderBadgedHost","host","Host","renderBadgedLink","label","marginRight","marginBottom","display","whiteSpace","renderHealth","health","fontWeight","marginTop","margin","left","renderDestServicesLinks","node","destServices","data","links","forEach","ds","serviceNodeData","id","isOutside","isRoot","version","push"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { NodeType, GraphNodeData, DestService, BoxByType, CLUSTER_DEFAULT } from '../../types/Graph';\nimport { CyNode, decoratedNodeData } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { Badge, PopoverPosition } from '@patternfly/react-core';\nimport { Health } from 'types/Health';\nimport { HealthIndicator } from 'components/Health/HealthIndicator';\nimport { getPFBadge, PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport KialiPageLink from 'components/Link/KialiPageLink';\nimport { serverConfig } from 'config';\n\ninterface LinkInfo {\n  link: string;\n  displayName: string;\n  key: string;\n}\n\nconst getTooltip = (tooltip: React.ReactFragment, nodeData: GraphNodeData): React.ReactFragment => {\n  const addNamespace = nodeData.isBox !== BoxByType.NAMESPACE;\n  const addCluster =\n    nodeData.isBox !== BoxByType.CLUSTER &&\n    nodeData.cluster !== CLUSTER_DEFAULT &&\n    serverConfig?.clusterInfo?.name !== nodeData.cluster;\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <span>{tooltip}</span>\n      {addNamespace && <div>{`Namespace: ${nodeData.namespace}`}</div>}\n      {addCluster && <div>{`Cluster: ${nodeData.cluster}`}</div>}\n    </div>\n  );\n};\n\nexport const getBadge = (nodeData: GraphNodeData, nodeType?: NodeType) => {\n  switch (nodeType || nodeData.nodeType) {\n    case NodeType.AGGREGATE:\n      return getPFBadge(PFBadges.Operation.badge, getTooltip(`Operation: ${nodeData.aggregate!}`, nodeData));\n    case NodeType.APP:\n      return getPFBadge(PFBadges.App.badge, getTooltip(PFBadges.App.tt!, nodeData));\n    case NodeType.BOX:\n      switch (nodeData.isBox) {\n        case BoxByType.APP:\n          return getPFBadge(PFBadges.App.badge, getTooltip(PFBadges.App.tt!, nodeData));\n        case BoxByType.CLUSTER:\n          return getPFBadge(PFBadges.Cluster.badge, getTooltip(PFBadges.Cluster.tt!, nodeData));\n        case BoxByType.NAMESPACE:\n          return getPFBadge(PFBadges.Namespace.badge, getTooltip(PFBadges.Namespace.tt!, nodeData));\n        default:\n          return <PFBadge badge={PFBadges.Unknown} />;\n      }\n    case NodeType.SERVICE:\n      return !!nodeData.isServiceEntry\n        ? getPFBadge(\n            PFBadges.ServiceEntry.badge,\n            getTooltip(\n              nodeData.isServiceEntry.location === 'MESH_EXTERNAL'\n                ? 'External Service Entry'\n                : 'Internal Service Entry',\n              nodeData\n            )\n          )\n        : getPFBadge(PFBadges.Service.badge, getTooltip(PFBadges.Service.tt!, nodeData));\n    case NodeType.WORKLOAD:\n      return nodeData.hasWorkloadEntry\n        ? getPFBadge(PFBadges.WorkloadEntry.badge, getTooltip(PFBadges.WorkloadEntry.tt!, nodeData))\n        : getPFBadge(PFBadges.Workload.badge, getTooltip(PFBadges.Workload.tt!, nodeData));\n    default:\n      return <PFBadge badge={PFBadges.Unknown} />;\n  }\n};\n\nexport const getLink = (nodeData: GraphNodeData, nodeType?: NodeType, linkGenerator?: () => LinkInfo) => {\n  const { app, cluster, namespace, service, workload } = nodeData;\n  if (!nodeType || nodeData.nodeType === NodeType.UNKNOWN) {\n    nodeType = nodeData.nodeType;\n  }\n  let displayName: string = 'unknown';\n  let link: string | undefined;\n  let key: string | undefined;\n\n  if (linkGenerator) {\n    ({ displayName, link, key } = linkGenerator());\n  } else {\n    switch (nodeType) {\n      case NodeType.AGGREGATE:\n        displayName = nodeData.aggregateValue!;\n        break;\n      case NodeType.APP:\n        link = `/namespaces/${encodeURIComponent(namespace)}/applications/${encodeURIComponent(app!)}`;\n        key = `${namespace}.app.${app}`;\n        displayName = app!;\n        break;\n      case NodeType.BOX:\n        switch (nodeData.isBox) {\n          case BoxByType.APP:\n            link = `/namespaces/${encodeURIComponent(namespace)}/applications/${encodeURIComponent(app!)}`;\n            key = `${namespace}.app.${app}`;\n            displayName = app!;\n            break;\n          case BoxByType.CLUSTER:\n            displayName = cluster;\n            break;\n          case BoxByType.NAMESPACE:\n            displayName = namespace;\n            break;\n        }\n        break;\n      case NodeType.SERVICE:\n        if (nodeData.isServiceEntry) {\n          link = `/namespaces/${encodeURIComponent(\n            nodeData.isServiceEntry.namespace\n          )}/istio/serviceentries/${encodeURIComponent(service!)}`;\n        } else {\n          link = `/namespaces/${encodeURIComponent(namespace)}/services/${encodeURIComponent(service!)}`;\n        }\n        key = `${namespace}.svc.${service}`;\n        displayName = service!;\n        break;\n      case NodeType.WORKLOAD:\n        link = `/namespaces/${encodeURIComponent(namespace)}/workloads/${encodeURIComponent(workload!)}`;\n        key = `${namespace}.wl.${workload}`;\n        displayName = workload!;\n        break;\n      default:\n        // NOOP\n        break;\n    }\n  }\n\n  if (link && !nodeData.isInaccessible) {\n    return (\n      <KialiPageLink key={key} href={link} cluster={cluster}>\n        {displayName}\n      </KialiPageLink>\n    );\n  }\n\n  return <span key={key}>{displayName}</span>;\n};\n\nexport const renderBadgedHost = (host: string) => {\n  return (\n    <div>\n      <PFBadge badge={PFBadges.Host} />\n      {host === '*' ? '* (all hosts)' : host}\n    </div>\n  );\n};\n\nexport const renderBadgedLink = (\n  nodeData: GraphNodeData,\n  nodeType?: NodeType,\n  label?: string,\n  linkGenerator?: () => LinkInfo\n) => {\n  const link = getLink(nodeData, nodeType, linkGenerator);\n\n  return (\n    <>\n      <span style={{ marginRight: '1em', marginBottom: '3px', display: 'inline-block' }}>\n        {label && (\n          <span style={{ whiteSpace: 'pre' }}>\n            <b>{label}</b>\n          </span>\n        )}\n        {getBadge(nodeData, nodeType)}\n        {link}\n      </span>\n      {nodeData.isInaccessible && <KialiIcon.MtlsLock />}\n    </>\n  );\n};\n\nexport const renderHealth = (health?: Health) => {\n  return (\n    <>\n      <Badge style={{ fontWeight: 'normal', marginTop: '4px', marginBottom: '4px' }} isRead={true}>\n        <span style={{ margin: '3px 3px 1px 0' }}>\n          {health ? (\n            <HealthIndicator id=\"graph-health-indicator\" health={health} tooltipPlacement={PopoverPosition.left} />\n          ) : (\n            'n/a'\n          )}\n        </span>\n        health\n      </Badge>\n    </>\n  );\n};\n\nexport const renderDestServicesLinks = (node: any) => {\n  const nodeData = decoratedNodeData(node);\n  const destServices: DestService[] = node.data(CyNode.destServices);\n\n  const links: any[] = [];\n  if (!destServices) {\n    return links;\n  }\n\n  destServices.forEach(ds => {\n    const serviceNodeData: GraphNodeData = {\n      id: nodeData.id,\n      app: '',\n      cluster: ds.cluster,\n      isInaccessible: nodeData.isInaccessible,\n      isOutside: nodeData.isOutside,\n      isRoot: nodeData.isRoot,\n      isServiceEntry: nodeData.isServiceEntry,\n      namespace: nodeData.isServiceEntry ? nodeData.isServiceEntry.namespace : nodeData.namespace,\n      nodeType: NodeType.SERVICE,\n      service: ds.name,\n      version: '',\n      workload: ''\n    };\n    links.push(renderBadgedLink(serviceNodeData));\n  });\n\n  return links;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioWizards/RequestRouting.tsx\";\nimport * as React from 'react';\nimport Rules, { MOVE_TYPE } from './RequestRouting/Rules';\nimport RuleBuilder from './RequestRouting/RuleBuilder';\nimport { ANYTHING, EXACT, HEADERS, PRESENCE, REGEX } from './RequestRouting/MatchBuilder';\nimport { MSG_WEIGHTS_NOT_VALID } from './TrafficShifting';\nimport { getDefaultWeights } from './WizardActions';\nvar MSG_SAME_MATCHING = 'A Rule with same matching criteria is already added.';\nvar MSG_HEADER_NAME_NON_EMPTY = 'Header name must be non empty';\nvar MSG_HEADER_VALUE_NON_EMPTY = 'Header value must be non empty';\n\nvar RequestRouting = /*#__PURE__*/function (_React$Component) {\n  _inherits(RequestRouting, _React$Component);\n\n  var _super = _createSuper(RequestRouting);\n\n  function RequestRouting(props) {\n    var _this;\n\n    _classCallCheck(this, RequestRouting);\n\n    _this = _super.call(this, props);\n\n    _this.isMatchesIncluded = function (rules, rule) {\n      var found = false;\n\n      for (var i = 0; i < rules.length; i++) {\n        var item = rules[i];\n\n        if (item.matches.length !== rule.matches.length) {\n          continue;\n        }\n\n        found = item.matches.every(function (value) {\n          return rule.matches.includes(value);\n        });\n\n        if (found) {\n          break;\n        }\n      }\n\n      return found;\n    };\n\n    _this.isValid = function (rules) {\n      // Corner case, an empty rules shouldn't be a valid scenario to create a VS/DR\n      if (rules.length === 0) {\n        return false;\n      }\n\n      var matchAll = _this.matchAllIndex(rules);\n\n      var isValid = true;\n\n      for (var index = 0; index < _this.state.rules.length; index++) {\n        isValid = matchAll === -1 || index <= matchAll;\n\n        if (!isValid) {\n          return isValid;\n        }\n      }\n\n      return isValid;\n    };\n\n    _this.onAddMatch = function () {\n      _this.setState(function (prevState) {\n        var newMatch;\n\n        if (_this.state.matchValue !== '') {\n          newMatch = prevState.category + (prevState.category === HEADERS ? ' [' + prevState.headerName + '] ' : ' ') + prevState.operator + ' ' + prevState.matchValue;\n        } else {\n          newMatch = prevState.category + ' [' + prevState.headerName + '] ' + REGEX + ' ' + ANYTHING;\n        }\n\n        if (!prevState.matches.includes(newMatch)) {\n          prevState.matches.push(newMatch);\n        }\n\n        return {\n          matches: prevState.matches,\n          headerName: '',\n          matchValue: ''\n        };\n      });\n    };\n\n    _this.onAddRule = function () {\n      _this.setState(function (prevState) {\n        var newWorkloadWeights = [];\n        prevState.workloadWeights.forEach(function (ww) {\n          return newWorkloadWeights.push({\n            name: ww.name,\n            weight: ww.weight,\n            locked: ww.locked,\n            maxWeight: ww.maxWeight,\n            mirrored: ww.mirrored\n          });\n        });\n        var newRule = {\n          matches: Object.assign([], prevState.matches),\n          workloadWeights: newWorkloadWeights\n        };\n\n        if (prevState.faultInjectionRoute.delayed && prevState.faultInjectionRoute.isValidDelay) {\n          newRule.delay = prevState.faultInjectionRoute.delay;\n        }\n\n        if (prevState.faultInjectionRoute.aborted && prevState.faultInjectionRoute.isValidAbort) {\n          newRule.abort = prevState.faultInjectionRoute.abort;\n        }\n\n        if (prevState.timeoutRetryRoute.isTimeout && prevState.timeoutRetryRoute.isValidTimeout) {\n          newRule.timeout = prevState.timeoutRetryRoute.timeout;\n        }\n\n        if (prevState.timeoutRetryRoute.isRetry && prevState.timeoutRetryRoute.isValidRetry) {\n          newRule.retries = prevState.timeoutRetryRoute.retries;\n        }\n\n        if (!_this.isMatchesIncluded(prevState.rules, newRule)) {\n          prevState.rules.push(newRule);\n          return {\n            matches: prevState.matches,\n            headerName: prevState.headerName,\n            matchValue: prevState.matchValue,\n            rules: prevState.rules,\n            validationMsg: '',\n            faultInjectionRoute: prevState.faultInjectionRoute,\n            timeoutRetryRoute: prevState.timeoutRetryRoute\n          };\n        } else {\n          return {\n            matches: prevState.matches,\n            headerName: prevState.headerName,\n            matchValue: prevState.matchValue,\n            rules: prevState.rules,\n            validationMsg: MSG_SAME_MATCHING,\n            faultInjectionRoute: prevState.faultInjectionRoute,\n            timeoutRetryRoute: prevState.timeoutRetryRoute\n          };\n        }\n      }, function () {\n        return _this.props.onChange(_this.isValid(_this.state.rules), _this.state.rules);\n      });\n    };\n\n    _this.onRemoveMatch = function (matchToRemove) {\n      _this.setState(function (prevState) {\n        return {\n          matches: prevState.matches.filter(function (m) {\n            return matchToRemove !== m;\n          }),\n          validationMsg: prevState.validationMsg === MSG_SAME_MATCHING ? '' : prevState.validationMsg\n        };\n      });\n    };\n\n    _this.onRemoveRule = function (index) {\n      _this.setState(function (prevState) {\n        prevState.rules.splice(index, 1);\n        return {\n          rules: prevState.rules,\n          validationMsg: ''\n        };\n      }, function () {\n        return _this.props.onChange(_this.isValid(_this.state.rules), _this.state.rules);\n      });\n    };\n\n    _this.onHeaderNameChange = function (headerName) {\n      var validationMsg = '';\n\n      if (_this.state.matchValue !== '' && headerName === '') {\n        validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n      }\n\n      if (_this.state.matchValue === '' && headerName !== '' && _this.state.operator !== PRESENCE) {\n        validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n      }\n\n      _this.setState({\n        headerName: headerName,\n        validationMsg: validationMsg\n      });\n    };\n\n    _this.onMatchValueChange = function (matchValue) {\n      var validationMsg = '';\n\n      if (_this.state.category === HEADERS) {\n        if (_this.state.headerName === '' && matchValue !== '') {\n          validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n        }\n\n        if (_this.state.headerName !== '' && matchValue === '') {\n          validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n        }\n      }\n\n      if (matchValue === '') {\n        validationMsg = '';\n      }\n\n      _this.setState({\n        matchValue: matchValue,\n        validationMsg: validationMsg\n      });\n    };\n\n    _this.onSelectWeights = function (valid, workloads) {\n      _this.setState({\n        workloadWeights: workloads,\n        validationMsg: !valid ? MSG_WEIGHTS_NOT_VALID : ''\n      });\n    };\n\n    _this.onMoveRule = function (index, move) {\n      _this.setState(function (prevState) {\n        var sourceRule = prevState.rules[index];\n        var targetIndex = move === MOVE_TYPE.UP ? index - 1 : index + 1;\n        var targetRule = prevState.rules[targetIndex];\n        prevState.rules[targetIndex] = sourceRule;\n        prevState.rules[index] = targetRule;\n        return {\n          rules: prevState.rules\n        };\n      }, function () {\n        return _this.props.onChange(_this.isValid(_this.state.rules), _this.state.rules);\n      });\n    };\n\n    _this.matchAllIndex = function (rules) {\n      var matchAll = -1;\n\n      for (var index = 0; index < rules.length; index++) {\n        var rule = rules[index];\n\n        if (rule.matches.length === 0) {\n          matchAll = index;\n          break;\n        }\n      }\n\n      return matchAll;\n    };\n\n    _this.state = {\n      category: HEADERS,\n      operator: PRESENCE,\n      workloadWeights: getDefaultWeights(_this.props.workloads),\n      faultInjectionRoute: {\n        workloads: [],\n        delayed: false,\n        delay: {\n          percentage: {\n            value: 100\n          },\n          fixedDelay: '5s'\n        },\n        isValidDelay: true,\n        aborted: false,\n        abort: {\n          percentage: {\n            value: 100\n          },\n          httpStatus: 503\n        },\n        isValidAbort: true\n      },\n      timeoutRetryRoute: {\n        workloads: [],\n        isTimeout: false,\n        timeout: '2s',\n        isValidTimeout: true,\n        isRetry: false,\n        retries: {\n          attempts: 3,\n          perTryTimeout: '2s',\n          retryOn: 'gateway-error,connect-failure,refused-stream'\n        },\n        isValidRetry: true\n      },\n      matches: [],\n      headerName: '',\n      matchValue: '',\n      rules: _this.props.initRules,\n      validationMsg: ''\n    };\n    return _this;\n  }\n\n  _createClass(RequestRouting, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.initRules.length > 0) {\n        this.setState({\n          rules: this.props.initRules\n        }, function () {\n          return _this2.props.onChange(_this2.isValid(_this2.state.rules), _this2.state.rules);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RuleBuilder, {\n        category: this.state.category,\n        operator: this.state.operator,\n        headerName: this.state.headerName,\n        matchValue: this.state.matchValue,\n        isValid: this.state.validationMsg === '',\n        onSelectCategory: function onSelectCategory(category) {\n          _this3.setState(function (prevState) {\n            // PRESENCE operator only applies to HEADERS\n            return {\n              category: category,\n              operator: prevState.operator === PRESENCE && category !== HEADERS ? EXACT : prevState.operator\n            };\n          });\n        },\n        onHeaderNameChange: this.onHeaderNameChange,\n        onSelectOperator: function onSelectOperator(operator) {\n          return _this3.setState({\n            operator: operator\n          });\n        },\n        onMatchValueChange: this.onMatchValueChange,\n        onAddMatch: this.onAddMatch,\n        matches: this.state.matches,\n        onRemoveMatch: this.onRemoveMatch,\n        workloads: this.props.workloads,\n        weights: this.state.workloadWeights,\n        onSelectWeights: this.onSelectWeights,\n        faultInjectionRoute: this.state.faultInjectionRoute,\n        onSelectFaultInjection: function onSelectFaultInjection(valid, faultInjectionRoute) {\n          _this3.setState(function (_prevState) {\n            return {\n              faultInjectionRoute: faultInjectionRoute,\n              validationMsg: !valid ? 'Fault Injection not valid' : ''\n            };\n          });\n        },\n        timeoutRetryRoute: this.state.timeoutRetryRoute,\n        onSelectTimeoutRetry: function onSelectTimeoutRetry(valid, timeoutRetryRoute) {\n          _this3.setState(function (_prevState) {\n            return {\n              timeoutRetryRoute: timeoutRetryRoute,\n              validationMsg: !valid ? 'Request Timeout not valid' : ''\n            };\n          });\n        },\n        validationMsg: this.state.validationMsg,\n        onAddRule: this.onAddRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Rules, {\n        rules: this.state.rules,\n        onRemoveRule: this.onRemoveRule,\n        onMoveRule: this.onMoveRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return RequestRouting;\n}(React.Component);\n\nexport default RequestRouting;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioWizards/RequestRouting.tsx"],"names":["React","Rules","MOVE_TYPE","RuleBuilder","ANYTHING","EXACT","HEADERS","PRESENCE","REGEX","MSG_WEIGHTS_NOT_VALID","getDefaultWeights","MSG_SAME_MATCHING","MSG_HEADER_NAME_NON_EMPTY","MSG_HEADER_VALUE_NON_EMPTY","RequestRouting","props","isMatchesIncluded","rules","rule","found","i","length","item","matches","every","value","includes","isValid","matchAll","matchAllIndex","index","state","onAddMatch","setState","prevState","newMatch","matchValue","category","headerName","operator","push","onAddRule","newWorkloadWeights","workloadWeights","forEach","ww","name","weight","locked","maxWeight","mirrored","newRule","Object","assign","faultInjectionRoute","delayed","isValidDelay","delay","aborted","isValidAbort","abort","timeoutRetryRoute","isTimeout","isValidTimeout","timeout","isRetry","isValidRetry","retries","validationMsg","onChange","onRemoveMatch","matchToRemove","filter","m","onRemoveRule","splice","onHeaderNameChange","onMatchValueChange","onSelectWeights","valid","workloads","onMoveRule","move","sourceRule","targetIndex","UP","targetRule","percentage","fixedDelay","httpStatus","attempts","perTryTimeout","retryOn","initRules","_prevState","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { WorkloadOverview } from '../../types/ServiceInfo';\nimport Rules, { MOVE_TYPE, Rule } from './RequestRouting/Rules';\nimport RuleBuilder from './RequestRouting/RuleBuilder';\nimport { ANYTHING, EXACT, HEADERS, PRESENCE, REGEX } from './RequestRouting/MatchBuilder';\nimport { MSG_WEIGHTS_NOT_VALID, WorkloadWeight } from './TrafficShifting';\nimport { getDefaultWeights } from './WizardActions';\nimport { FaultInjectionRoute } from './FaultInjection';\nimport { TimeoutRetryRoute } from './RequestTimeouts';\n\ntype Props = {\n  serviceName: string;\n  workloads: WorkloadOverview[];\n  initRules: Rule[];\n  onChange: (valid: boolean, rules: Rule[]) => void;\n};\n\ntype State = {\n  category: string;\n  operator: string;\n  workloadWeights: WorkloadWeight[];\n  matches: string[];\n  headerName: string;\n  matchValue: string;\n  faultInjectionRoute: FaultInjectionRoute;\n  timeoutRetryRoute: TimeoutRetryRoute;\n  rules: Rule[];\n  validationMsg: string;\n};\n\nconst MSG_SAME_MATCHING = 'A Rule with same matching criteria is already added.';\nconst MSG_HEADER_NAME_NON_EMPTY = 'Header name must be non empty';\nconst MSG_HEADER_VALUE_NON_EMPTY = 'Header value must be non empty';\n\nclass RequestRouting extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      category: HEADERS,\n      operator: PRESENCE,\n      workloadWeights: getDefaultWeights(this.props.workloads),\n      faultInjectionRoute: {\n        workloads: [],\n        delayed: false,\n        delay: {\n          percentage: {\n            value: 100\n          },\n          fixedDelay: '5s'\n        },\n        isValidDelay: true,\n        aborted: false,\n        abort: {\n          percentage: {\n            value: 100\n          },\n          httpStatus: 503\n        },\n        isValidAbort: true\n      },\n      timeoutRetryRoute: {\n        workloads: [],\n        isTimeout: false,\n        timeout: '2s',\n        isValidTimeout: true,\n        isRetry: false,\n        retries: {\n          attempts: 3,\n          perTryTimeout: '2s',\n          retryOn: 'gateway-error,connect-failure,refused-stream'\n        },\n        isValidRetry: true\n      },\n      matches: [],\n      headerName: '',\n      matchValue: '',\n      rules: this.props.initRules,\n      validationMsg: ''\n    };\n  }\n\n  isMatchesIncluded = (rules: Rule[], rule: Rule) => {\n    let found = false;\n    for (let i = 0; i < rules.length; i++) {\n      const item = rules[i];\n      if (item.matches.length !== rule.matches.length) {\n        continue;\n      }\n      found = item.matches.every(value => rule.matches.includes(value));\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  };\n\n  isValid = (rules: Rule[]): boolean => {\n    // Corner case, an empty rules shouldn't be a valid scenario to create a VS/DR\n    if (rules.length === 0) {\n      return false;\n    }\n    const matchAll: number = this.matchAllIndex(rules);\n    let isValid: boolean = true;\n    for (let index = 0; index < this.state.rules.length; index++) {\n      isValid = matchAll === -1 || index <= matchAll;\n      if (!isValid) {\n        return isValid;\n      }\n    }\n    return isValid;\n  };\n\n  onAddMatch = () => {\n    this.setState(prevState => {\n      let newMatch: string;\n      if (this.state.matchValue !== '') {\n        newMatch =\n          prevState.category +\n          (prevState.category === HEADERS ? ' [' + prevState.headerName + '] ' : ' ') +\n          prevState.operator +\n          ' ' +\n          prevState.matchValue;\n      } else {\n        newMatch = prevState.category + ' [' + prevState.headerName + '] ' + REGEX + ' ' + ANYTHING;\n      }\n      if (!prevState.matches.includes(newMatch)) {\n        prevState.matches.push(newMatch);\n      }\n      return {\n        matches: prevState.matches,\n        headerName: '',\n        matchValue: ''\n      };\n    });\n  };\n\n  onAddRule = () => {\n    this.setState(\n      prevState => {\n        const newWorkloadWeights: WorkloadWeight[] = [];\n        prevState.workloadWeights.forEach(ww =>\n          newWorkloadWeights.push({\n            name: ww.name,\n            weight: ww.weight,\n            locked: ww.locked,\n            maxWeight: ww.maxWeight,\n            mirrored: ww.mirrored\n          })\n        );\n        const newRule: Rule = {\n          matches: Object.assign([], prevState.matches),\n          workloadWeights: newWorkloadWeights\n        };\n        if (prevState.faultInjectionRoute.delayed && prevState.faultInjectionRoute.isValidDelay) {\n          newRule.delay = prevState.faultInjectionRoute.delay;\n        }\n        if (prevState.faultInjectionRoute.aborted && prevState.faultInjectionRoute.isValidAbort) {\n          newRule.abort = prevState.faultInjectionRoute.abort;\n        }\n        if (prevState.timeoutRetryRoute.isTimeout && prevState.timeoutRetryRoute.isValidTimeout) {\n          newRule.timeout = prevState.timeoutRetryRoute.timeout;\n        }\n        if (prevState.timeoutRetryRoute.isRetry && prevState.timeoutRetryRoute.isValidRetry) {\n          newRule.retries = prevState.timeoutRetryRoute.retries;\n        }\n        if (!this.isMatchesIncluded(prevState.rules, newRule)) {\n          prevState.rules.push(newRule);\n          return {\n            matches: prevState.matches,\n            headerName: prevState.headerName,\n            matchValue: prevState.matchValue,\n            rules: prevState.rules,\n            validationMsg: '',\n            faultInjectionRoute: prevState.faultInjectionRoute,\n            timeoutRetryRoute: prevState.timeoutRetryRoute\n          };\n        } else {\n          return {\n            matches: prevState.matches,\n            headerName: prevState.headerName,\n            matchValue: prevState.matchValue,\n            rules: prevState.rules,\n            validationMsg: MSG_SAME_MATCHING,\n            faultInjectionRoute: prevState.faultInjectionRoute,\n            timeoutRetryRoute: prevState.timeoutRetryRoute\n          };\n        }\n      },\n      () => this.props.onChange(this.isValid(this.state.rules), this.state.rules)\n    );\n  };\n\n  onRemoveMatch = (matchToRemove: string) => {\n    this.setState(prevState => {\n      return {\n        matches: prevState.matches.filter(m => matchToRemove !== m),\n        validationMsg: prevState.validationMsg === MSG_SAME_MATCHING ? '' : prevState.validationMsg\n      };\n    });\n  };\n\n  onRemoveRule = (index: number) => {\n    this.setState(\n      prevState => {\n        prevState.rules.splice(index, 1);\n        return {\n          rules: prevState.rules,\n          validationMsg: ''\n        };\n      },\n      () => this.props.onChange(this.isValid(this.state.rules), this.state.rules)\n    );\n  };\n\n  onHeaderNameChange = (headerName: string) => {\n    let validationMsg = '';\n    if (this.state.matchValue !== '' && headerName === '') {\n      validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n    }\n    if (this.state.matchValue === '' && headerName !== '' && this.state.operator !== PRESENCE) {\n      validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n    }\n    this.setState({\n      headerName: headerName,\n      validationMsg: validationMsg\n    });\n  };\n\n  onMatchValueChange = (matchValue: string) => {\n    let validationMsg = '';\n    if (this.state.category === HEADERS) {\n      if (this.state.headerName === '' && matchValue !== '') {\n        validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n      }\n      if (this.state.headerName !== '' && matchValue === '') {\n        validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n      }\n    }\n    if (matchValue === '') {\n      validationMsg = '';\n    }\n    this.setState({\n      matchValue: matchValue,\n      validationMsg: validationMsg\n    });\n  };\n\n  onSelectWeights = (valid: boolean, workloads: WorkloadWeight[]) => {\n    this.setState({\n      workloadWeights: workloads,\n      validationMsg: !valid ? MSG_WEIGHTS_NOT_VALID : ''\n    });\n  };\n\n  onMoveRule = (index: number, move: MOVE_TYPE) => {\n    this.setState(\n      prevState => {\n        const sourceRule = prevState.rules[index];\n        const targetIndex = move === MOVE_TYPE.UP ? index - 1 : index + 1;\n        const targetRule = prevState.rules[targetIndex];\n        prevState.rules[targetIndex] = sourceRule;\n        prevState.rules[index] = targetRule;\n        return {\n          rules: prevState.rules\n        };\n      },\n      () => this.props.onChange(this.isValid(this.state.rules), this.state.rules)\n    );\n  };\n\n  matchAllIndex = (rules: Rule[]): number => {\n    let matchAll: number = -1;\n    for (let index = 0; index < rules.length; index++) {\n      const rule = rules[index];\n      if (rule.matches.length === 0) {\n        matchAll = index;\n        break;\n      }\n    }\n    return matchAll;\n  };\n\n  componentDidMount() {\n    if (this.props.initRules.length > 0) {\n      this.setState(\n        {\n          rules: this.props.initRules\n        },\n        () => this.props.onChange(this.isValid(this.state.rules), this.state.rules)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <RuleBuilder\n          category={this.state.category}\n          operator={this.state.operator}\n          headerName={this.state.headerName}\n          matchValue={this.state.matchValue}\n          isValid={this.state.validationMsg === ''}\n          onSelectCategory={(category: string) => {\n            this.setState(prevState => {\n              // PRESENCE operator only applies to HEADERS\n              return {\n                category: category,\n                operator: prevState.operator === PRESENCE && category !== HEADERS ? EXACT : prevState.operator\n              };\n            });\n          }}\n          onHeaderNameChange={this.onHeaderNameChange}\n          onSelectOperator={(operator: string) => this.setState({ operator: operator })}\n          onMatchValueChange={this.onMatchValueChange}\n          onAddMatch={this.onAddMatch}\n          matches={this.state.matches}\n          onRemoveMatch={this.onRemoveMatch}\n          workloads={this.props.workloads}\n          weights={this.state.workloadWeights}\n          onSelectWeights={this.onSelectWeights}\n          faultInjectionRoute={this.state.faultInjectionRoute}\n          onSelectFaultInjection={(valid, faultInjectionRoute) => {\n            this.setState(_prevState => {\n              return {\n                faultInjectionRoute: faultInjectionRoute,\n                validationMsg: !valid ? 'Fault Injection not valid' : ''\n              };\n            });\n          }}\n          timeoutRetryRoute={this.state.timeoutRetryRoute}\n          onSelectTimeoutRetry={(valid, timeoutRetryRoute) => {\n            this.setState(_prevState => {\n              return {\n                timeoutRetryRoute: timeoutRetryRoute,\n                validationMsg: !valid ? 'Request Timeout not valid' : ''\n              };\n            });\n          }}\n          validationMsg={this.state.validationMsg}\n          onAddRule={this.onAddRule}\n        />\n        <Rules rules={this.state.rules} onRemoveRule={this.onRemoveRule} onMoveRule={this.onMoveRule} />\n      </>\n    );\n  }\n}\n\nexport default RequestRouting;\n"]},"metadata":{},"sourceType":"module"}
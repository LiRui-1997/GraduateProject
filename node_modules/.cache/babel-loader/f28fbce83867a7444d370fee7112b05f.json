{"ast":null,"code":"import { serverConfig } from '../config/ServerConfig'; // The step needs to minimally cover 2 datapoints to get any sort of average. So 2*scrape is the bare\n// minimum.  We set rateInterval=step which basically gives us the rate() of each disjoint set.\n// (note, another approach could be to set rateInterval=step+scrape, the overlap could produce some\n// smoothing). The rateInterval should typically not be < step or you're just omitting datapoints.\n\nvar defaultDataPoints = 50;\nvar defaultScrapeInterval = 15; // seconds\n\nvar minDataPoints = 2;\nexport var computePrometheusRateParams = function computePrometheusRateParams(duration, dataPoints, scrapeInterval) {\n  var actualDataPoints = dataPoints || defaultDataPoints;\n\n  if (actualDataPoints < minDataPoints) {\n    actualDataPoints = defaultDataPoints;\n  }\n\n  var configuredScrapeInterval = serverConfig && serverConfig.prometheus.globalScrapeInterval;\n  var actualScrapeInterval = scrapeInterval || configuredScrapeInterval || defaultScrapeInterval;\n  var minStep = 2 * actualScrapeInterval;\n  var step = Math.floor(duration / actualDataPoints);\n  step = step < minStep ? minStep : step;\n  return {\n    step: step,\n    rateInterval: step + 's'\n  };\n};","map":{"version":3,"sources":["/root/GraduateProject/src/services/Prometheus.ts"],"names":["serverConfig","defaultDataPoints","defaultScrapeInterval","minDataPoints","computePrometheusRateParams","duration","dataPoints","scrapeInterval","actualDataPoints","configuredScrapeInterval","prometheus","globalScrapeInterval","actualScrapeInterval","minStep","step","Math","floor","rateInterval"],"mappings":"AACA,SAASA,YAAT,QAA6B,wBAA7B,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,EAA1B;AACA,IAAMC,qBAAqB,GAAG,EAA9B,C,CAAkC;;AAClC,IAAMC,aAAa,GAAG,CAAtB;AAOA,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CACzCC,QADyC,EAEzCC,UAFyC,EAGzCC,cAHyC,EAIhB;AACzB,MAAIC,gBAAgB,GAAGF,UAAU,IAAIL,iBAArC;;AACA,MAAIO,gBAAgB,GAAGL,aAAvB,EAAsC;AACpCK,IAAAA,gBAAgB,GAAGP,iBAAnB;AACD;;AAED,MAAMQ,wBAAwB,GAAGT,YAAY,IAAIA,YAAY,CAACU,UAAb,CAAwBC,oBAAzE;AACA,MAAMC,oBAAoB,GAAGL,cAAc,IAAIE,wBAAlB,IAA8CP,qBAA3E;AACA,MAAMW,OAAO,GAAG,IAAID,oBAApB;AACA,MAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWX,QAAQ,GAAGG,gBAAtB,CAAX;AACAM,EAAAA,IAAI,GAAGA,IAAI,GAAGD,OAAP,GAAiBA,OAAjB,GAA2BC,IAAlC;AACA,SAAO;AACLA,IAAAA,IAAI,EAAEA,IADD;AAELG,IAAAA,YAAY,EAAEH,IAAI,GAAG;AAFhB,GAAP;AAID,CAnBM","sourcesContent":["import { DurationInSeconds } from '../types/Common';\nimport { serverConfig } from '../config/ServerConfig';\n\n// The step needs to minimally cover 2 datapoints to get any sort of average. So 2*scrape is the bare\n// minimum.  We set rateInterval=step which basically gives us the rate() of each disjoint set.\n// (note, another approach could be to set rateInterval=step+scrape, the overlap could produce some\n// smoothing). The rateInterval should typically not be < step or you're just omitting datapoints.\nconst defaultDataPoints = 50;\nconst defaultScrapeInterval = 15; // seconds\nconst minDataPoints = 2;\n\nexport interface PrometheusRateParams {\n  rateInterval: string;\n  step: number;\n}\n\nexport const computePrometheusRateParams = (\n  duration: DurationInSeconds,\n  dataPoints?: number,\n  scrapeInterval?: DurationInSeconds\n): PrometheusRateParams => {\n  let actualDataPoints = dataPoints || defaultDataPoints;\n  if (actualDataPoints < minDataPoints) {\n    actualDataPoints = defaultDataPoints;\n  }\n\n  const configuredScrapeInterval = serverConfig && serverConfig.prometheus.globalScrapeInterval;\n  const actualScrapeInterval = scrapeInterval || configuredScrapeInterval || defaultScrapeInterval;\n  const minStep = 2 * actualScrapeInterval;\n  let step = Math.floor(duration / actualDataPoints);\n  step = step < minStep ? minStep : step;\n  return {\n    step: step,\n    rateInterval: step + 's'\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export var aceOptions = {\n  showPrintMargin: false,\n  autoScrollEditorIntoView: true\n};\nexport var safeDumpOptions = {\n  styles: {\n    '!!null': 'canonical' // dump null as ~\n\n  }\n};\n// Helper function to compare two IstioConfigDetails iterating over its IstioObject children.\n// When an IstioObject child has changed (resourceVersion is different) it will return a tuple with\n//  boolean: true if resourceVersion has changed in newer version\n//  string: IstioObject child\n//  string: resourceVersion of newer version\nexport var compareResourceVersion = function compareResourceVersion(oldIstioConfigDetails, newIstioConfigDetails) {\n  var keys = Object.keys(oldIstioConfigDetails);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var oldIstioObject = oldIstioConfigDetails[key];\n    var newIstioObject = newIstioConfigDetails[key];\n\n    if (oldIstioObject && newIstioObject && oldIstioObject.metadata && newIstioObject.metadata && oldIstioObject.metadata.resourceVersion && newIstioObject.metadata.resourceVersion && oldIstioObject.metadata.resourceVersion !== newIstioObject.metadata.resourceVersion) {\n      return [true, key, newIstioObject.metadata.resourceVersion];\n    }\n  }\n\n  return [false, '', ''];\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/IstioConfigDetails.ts"],"names":["aceOptions","showPrintMargin","autoScrollEditorIntoView","safeDumpOptions","styles","compareResourceVersion","oldIstioConfigDetails","newIstioConfigDetails","keys","Object","i","length","key","oldIstioObject","newIstioObject","metadata","resourceVersion"],"mappings":"AA0CA,OAAO,IAAMA,UAAsB,GAAG;AACpCC,EAAAA,eAAe,EAAE,KADmB;AAEpCC,EAAAA,wBAAwB,EAAE;AAFU,CAA/B;AAKP,OAAO,IAAMC,eAAe,GAAG;AAC7BC,EAAAA,MAAM,EAAE;AACN,cAAU,WADJ,CACgB;;AADhB;AADqB,CAAxB;AAiBP;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCC,qBADoC,EAEpCC,qBAFoC,EAGN;AAC9B,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,qBAAZ,CAAb;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAME,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAhB;AACA,QAAMG,cAAc,GAAGP,qBAAqB,CAACM,GAAD,CAA5C;AACA,QAAME,cAAc,GAAGP,qBAAqB,CAACK,GAAD,CAA5C;;AACA,QACEC,cAAc,IACdC,cADA,IAEAD,cAAc,CAACE,QAFf,IAGAD,cAAc,CAACC,QAHf,IAIAF,cAAc,CAACE,QAAf,CAAwBC,eAJxB,IAKAF,cAAc,CAACC,QAAf,CAAwBC,eALxB,IAMAH,cAAc,CAACE,QAAf,CAAwBC,eAAxB,KAA4CF,cAAc,CAACC,QAAf,CAAwBC,eAPtE,EAQE;AACA,aAAO,CAAC,IAAD,EAAOJ,GAAP,EAAYE,cAAc,CAACC,QAAf,CAAwBC,eAApC,CAAP;AACD;AACF;;AACD,SAAO,CAAC,KAAD,EAAQ,EAAR,EAAY,EAAZ,CAAP;AACD,CAtBM","sourcesContent":["import Namespace from './Namespace';\nimport { ResourcePermissions } from './Permissions';\nimport {\n  AuthorizationPolicy,\n  DestinationRule,\n  Gateway,\n  ServiceEntry,\n  VirtualService,\n  ObjectValidation,\n  Sidecar,\n  IstioObject,\n  PeerAuthentication,\n  RequestAuthentication,\n  WorkloadEntry,\n  EnvoyFilter,\n  WorkloadGroup\n} from './IstioObjects';\nimport { AceOptions } from 'react-ace/types';\n\nexport interface IstioConfigId {\n  namespace: string;\n  objectType: string;\n  object: string;\n}\n\nexport interface IstioConfigDetails {\n  namespace: Namespace;\n  gateway: Gateway;\n  virtualService: VirtualService;\n  destinationRule: DestinationRule;\n  serviceEntry: ServiceEntry;\n  sidecar: Sidecar;\n  workloadEntry: WorkloadEntry;\n  workloadGroup: WorkloadGroup;\n  envoyFilter: EnvoyFilter;\n  authorizationPolicy: AuthorizationPolicy;\n  peerAuthentication: PeerAuthentication;\n  requestAuthentication: RequestAuthentication;\n  permissions: ResourcePermissions;\n  validation: ObjectValidation;\n}\n\nexport const aceOptions: AceOptions = {\n  showPrintMargin: false,\n  autoScrollEditorIntoView: true\n};\n\nexport const safeDumpOptions = {\n  styles: {\n    '!!null': 'canonical' // dump null as ~\n  }\n};\n\nexport interface ParsedSearch {\n  type?: string;\n  name?: string;\n}\n\nexport interface IstioPermissions {\n  [namespace: string]: {\n    [type: string]: ResourcePermissions;\n  };\n}\n\n// Helper function to compare two IstioConfigDetails iterating over its IstioObject children.\n// When an IstioObject child has changed (resourceVersion is different) it will return a tuple with\n//  boolean: true if resourceVersion has changed in newer version\n//  string: IstioObject child\n//  string: resourceVersion of newer version\nexport const compareResourceVersion = (\n  oldIstioConfigDetails,\n  newIstioConfigDetails: IstioConfigDetails\n): [boolean, string, string] => {\n  const keys = Object.keys(oldIstioConfigDetails);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const oldIstioObject = oldIstioConfigDetails[key] as IstioObject;\n    const newIstioObject = newIstioConfigDetails[key] as IstioObject;\n    if (\n      oldIstioObject &&\n      newIstioObject &&\n      oldIstioObject.metadata &&\n      newIstioObject.metadata &&\n      oldIstioObject.metadata.resourceVersion &&\n      newIstioObject.metadata.resourceVersion &&\n      oldIstioObject.metadata.resourceVersion !== newIstioObject.metadata.resourceVersion\n    ) {\n      return [true, key, newIstioObject.metadata.resourceVersion];\n    }\n  }\n  return [false, '', ''];\n};\n"]},"metadata":{},"sourceType":"module"}
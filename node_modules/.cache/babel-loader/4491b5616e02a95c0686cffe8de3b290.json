{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/ServiceDetails/ServiceDetailsPage.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Tab } from '@patternfly/react-core';\nimport IstioMetricsContainer from '../../components/Metrics/IstioMetrics';\nimport { RenderHeader } from '../../components/Nav/Page';\nimport { MetricsObjectTypes } from '../../types/Metrics';\nimport ParameterizedTabs, { activeTab } from '../../components/Tab/Tabs';\nimport ServiceInfo from './ServiceInfo';\nimport TracesComponent from 'components/JaegerIntegration/TracesComponent';\nimport TrafficDetails from 'components/TrafficList/TrafficDetails';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport ServiceWizardDropdown from '../../components/IstioWizards/ServiceWizardDropdown';\nimport TimeControl from '../../components/Time/TimeControl';\nvar tabName = 'tab';\nvar defaultTab = 'info';\nvar trafficTabName = 'traffic';\nvar tabIndex = {\n  info: 0,\n  traffic: 1,\n  metrics: 2,\n  traces: 3\n};\n\nvar ServiceDetails = /*#__PURE__*/function (_React$Component) {\n  _inherits(ServiceDetails, _React$Component);\n\n  var _super = _createSuper(ServiceDetails);\n\n  function ServiceDetails(props) {\n    var _this;\n\n    _classCallCheck(this, ServiceDetails);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n\n    _this.fetchService = function () {\n      _this.promises.cancelAll();\n\n      _this.promises.register('namespaces', API.getNamespaces()).then(function (namespacesResponse) {\n        var namespaces = namespacesResponse.data;\n\n        _this.promises.registerAll('gateways', namespaces.map(function (ns) {\n          return API.getIstioConfig(ns.name, ['gateways'], false, '', '');\n        })).then(function (responses) {\n          _this.setState({\n            gateways: responses.map(function (response) {\n              return response.data.gateways;\n            }).flat()\n          });\n        }).catch(function (gwError) {\n          AlertUtils.addError('Could not fetch Gateways list.', gwError);\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch Namespaces list.', error);\n      });\n\n      API.getServiceDetail(_this.props.match.params.namespace, _this.props.match.params.service, true, _this.props.duration).then(function (results) {\n        _this.setState({\n          serviceDetails: results,\n          validations: results.validations\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch Service Details.', error);\n      });\n      API.getIstioConfig(_this.props.match.params.namespace, ['peerauthentications'], false, '', '').then(function (results) {\n        _this.setState({\n          peerAuthentications: results.data.peerAuthentications\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch PeerAuthentications.', error);\n      });\n    };\n\n    _this.state = {\n      currentTab: activeTab(tabName, defaultTab),\n      gateways: [],\n      validations: {},\n      peerAuthentications: []\n    };\n    return _this;\n  }\n\n  _createClass(ServiceDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchService();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState) {\n      var currentTab = activeTab(tabName, defaultTab);\n\n      if (prevProps.match.params.namespace !== this.props.match.params.namespace || prevProps.match.params.service !== this.props.match.params.service || prevProps.lastRefreshAt !== this.props.lastRefreshAt) {\n        if (currentTab === 'info') {\n          this.fetchService();\n        }\n\n        if (currentTab !== this.state.currentTab) {\n          this.setState({\n            currentTab: currentTab\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getGatewaysAsList\",\n    value: function getGatewaysAsList() {\n      return this.state.gateways.map(function (gateway) {\n        return gateway.metadata.namespace + '/' + gateway.metadata.name;\n      });\n    }\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var overTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 0,\n        title: \"Overview\",\n        key: \"Overview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ServiceInfo, {\n        namespace: this.props.match.params.namespace,\n        service: this.props.match.params.service,\n        serviceDetails: this.state.serviceDetails,\n        gateways: this.state.gateways,\n        peerAuthentications: this.state.peerAuthentications,\n        validations: this.state.validations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }));\n      var trafficTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 1,\n        title: \"Traffic\",\n        key: trafficTabName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TrafficDetails, {\n        itemName: this.props.match.params.service,\n        itemType: MetricsObjectTypes.SERVICE,\n        namespace: this.props.match.params.namespace,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }));\n      var inTab = /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 2,\n        title: \"Inbound Metrics\",\n        key: \"Inbound Metrics\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(IstioMetricsContainer, {\n        namespace: this.props.match.params.namespace,\n        object: this.props.match.params.service,\n        objectType: MetricsObjectTypes.SERVICE,\n        direction: 'inbound',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }));\n      var tabsArray = [overTab, trafficTab, inTab];\n\n      if (this.props.jaegerInfo && this.props.jaegerInfo.enabled && this.props.jaegerInfo.integration) {\n        tabsArray.push( /*#__PURE__*/React.createElement(Tab, {\n          eventKey: 3,\n          title: \"Traces\",\n          key: \"Traces\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(TracesComponent, {\n          namespace: this.props.match.params.namespace,\n          target: this.props.match.params.service,\n          targetKind: 'service',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 11\n          }\n        })));\n      }\n\n      return tabsArray;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var useCustomTime = false;\n\n      switch (this.state.currentTab) {\n        case 'info':\n        case 'traffic':\n          useCustomTime = false;\n          break;\n\n        case 'metrics':\n        case 'traces':\n          useCustomTime = true;\n          break;\n      }\n\n      var actionsToolbar = this.state.serviceDetails ? /*#__PURE__*/React.createElement(ServiceWizardDropdown, {\n        namespace: this.props.match.params.namespace,\n        serviceName: this.state.serviceDetails.service.name,\n        show: false,\n        workloads: this.state.serviceDetails.workloads || [],\n        virtualServices: this.state.serviceDetails.virtualServices,\n        destinationRules: this.state.serviceDetails.destinationRules,\n        gateways: this.getGatewaysAsList(),\n        peerAuthentications: this.state.peerAuthentications,\n        tlsStatus: this.state.serviceDetails.namespaceMTLS,\n        onChange: this.fetchService,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }) : undefined;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderHeader, {\n        location: this.props.location,\n        rightToolbar: /*#__PURE__*/React.createElement(TimeControl, {\n          customDuration: useCustomTime,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }\n        }),\n        actionsToolbar: actionsToolbar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ParameterizedTabs, {\n        id: \"basic-tabs\",\n        onSelect: function onSelect(tabValue) {\n          _this2.setState({\n            currentTab: tabValue\n          });\n        },\n        tabMap: tabIndex,\n        tabName: tabName,\n        defaultTab: defaultTab,\n        activeTab: this.state.currentTab,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 9\n        }\n      }, this.renderTabs()));\n    }\n  }]);\n\n  return ServiceDetails;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jaegerInfo: state.jaegerState.info,\n    lastRefreshAt: state.globalState.lastRefreshAt\n  };\n};\n\nvar ServiceDetailsPageContainer = connect(mapStateToProps)(ServiceDetails);\nexport default ServiceDetailsPageContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/ServiceDetails/ServiceDetailsPage.tsx"],"names":["React","connect","Tab","IstioMetricsContainer","RenderHeader","MetricsObjectTypes","ParameterizedTabs","activeTab","ServiceInfo","TracesComponent","TrafficDetails","API","AlertUtils","PromisesRegistry","ServiceWizardDropdown","TimeControl","tabName","defaultTab","trafficTabName","tabIndex","info","traffic","metrics","traces","ServiceDetails","props","promises","fetchService","cancelAll","register","getNamespaces","then","namespacesResponse","namespaces","data","registerAll","map","ns","getIstioConfig","name","responses","setState","gateways","response","flat","catch","gwError","addError","error","getServiceDetail","match","params","namespace","service","duration","results","serviceDetails","validations","peerAuthentications","state","currentTab","prevProps","_prevState","lastRefreshAt","gateway","metadata","overTab","trafficTab","SERVICE","inTab","tabsArray","jaegerInfo","enabled","integration","push","useCustomTime","actionsToolbar","workloads","virtualServices","destinationRules","getGatewaysAsList","namespaceMTLS","undefined","location","tabValue","renderTabs","Component","mapStateToProps","jaegerState","globalState","ServiceDetailsPageContainer"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,GAAT,QAAoB,wBAApB;AAGA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AAGA,OAAOC,iBAAP,IAA4BC,SAA5B,QAA6C,2BAA7C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AAEA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AAEA,OAAO,KAAKC,UAAZ,MAA4B,wBAA5B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAGA,OAAOC,qBAAP,MAAkC,qDAAlC;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAgBA,IAAMC,OAAO,GAAG,KAAhB;AACA,IAAMC,UAAU,GAAG,MAAnB;AACA,IAAMC,cAAc,GAAG,SAAvB;AAEA,IAAMC,QAAmC,GAAG;AAC1CC,EAAAA,IAAI,EAAE,CADoC;AAE1CC,EAAAA,OAAO,EAAE,CAFiC;AAG1CC,EAAAA,OAAO,EAAE,CAHiC;AAI1CC,EAAAA,MAAM,EAAE;AAJkC,CAA5C;;IAOMC,c;;;;;AAGJ,0BAAYC,KAAZ,EAAwC;AAAA;;AAAA;;AACtC,8BAAMA,KAAN;AADsC,UAFhCC,QAEgC,GAFrB,IAAIb,gBAAJ,EAEqB;;AAAA,UA8BhCc,YA9BgC,GA8BjB,YAAM;AAC3B,YAAKD,QAAL,CAAcE,SAAd;;AACA,YAAKF,QAAL,CACGG,QADH,CACY,YADZ,EAC0BlB,GAAG,CAACmB,aAAJ,EAD1B,EAEGC,IAFH,CAEQ,UAAAC,kBAAkB,EAAI;AAC1B,YAAMC,UAAuB,GAAGD,kBAAkB,CAACE,IAAnD;;AACA,cAAKR,QAAL,CACGS,WADH,CAEI,UAFJ,EAGIF,UAAU,CAACG,GAAX,CAAe,UAAAC,EAAE;AAAA,iBAAI1B,GAAG,CAAC2B,cAAJ,CAAmBD,EAAE,CAACE,IAAtB,EAA4B,CAAC,UAAD,CAA5B,EAA0C,KAA1C,EAAiD,EAAjD,EAAqD,EAArD,CAAJ;AAAA,SAAjB,CAHJ,EAKGR,IALH,CAKQ,UAAAS,SAAS,EAAI;AACjB,gBAAKC,QAAL,CAAc;AAAEC,YAAAA,QAAQ,EAAEF,SAAS,CAACJ,GAAV,CAAc,UAAAO,QAAQ;AAAA,qBAAIA,QAAQ,CAACT,IAAT,CAAcQ,QAAlB;AAAA,aAAtB,EAAkDE,IAAlD;AAAZ,WAAd;AACD,SAPH,EAQGC,KARH,CAQS,UAAAC,OAAO,EAAI;AAChBlC,UAAAA,UAAU,CAACmC,QAAX,CAAoB,gCAApB,EAAsDD,OAAtD;AACD,SAVH;AAWD,OAfH,EAgBGD,KAhBH,CAgBS,UAAAG,KAAK,EAAI;AACdpC,QAAAA,UAAU,CAACmC,QAAX,CAAoB,kCAApB,EAAwDC,KAAxD;AACD,OAlBH;;AAoBArC,MAAAA,GAAG,CAACsC,gBAAJ,CAAqB,MAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SAA7C,EAAwD,MAAK3B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OAAhF,EAAyF,IAAzF,EAA+F,MAAK5B,KAAL,CAAW6B,QAA1G,EACGvB,IADH,CACQ,UAAAwB,OAAO,EAAI;AACf,cAAKd,QAAL,CAAc;AACZe,UAAAA,cAAc,EAAED,OADJ;AAEZE,UAAAA,WAAW,EAAEF,OAAO,CAACE;AAFT,SAAd;AAID,OANH,EAOGZ,KAPH,CAOS,UAAAG,KAAK,EAAI;AACdpC,QAAAA,UAAU,CAACmC,QAAX,CAAoB,kCAApB,EAAwDC,KAAxD;AACD,OATH;AAWArC,MAAAA,GAAG,CAAC2B,cAAJ,CAAmB,MAAKb,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SAA3C,EAAsD,CAAC,qBAAD,CAAtD,EAA+E,KAA/E,EAAsF,EAAtF,EAA0F,EAA1F,EACGrB,IADH,CACQ,UAAAwB,OAAO,EAAI;AACf,cAAKd,QAAL,CAAc;AACZiB,UAAAA,mBAAmB,EAAEH,OAAO,CAACrB,IAAR,CAAawB;AADtB,SAAd;AAGD,OALH,EAMGb,KANH,CAMS,UAAAG,KAAK,EAAI;AACdpC,QAAAA,UAAU,CAACmC,QAAX,CAAoB,sCAApB,EAA4DC,KAA5D;AACD,OARH;AASD,KAxEuC;;AAEtC,UAAKW,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAErD,SAAS,CAACS,OAAD,EAAUC,UAAV,CADV;AAEXyB,MAAAA,QAAQ,EAAE,EAFC;AAGXe,MAAAA,WAAW,EAAE,EAHF;AAIXC,MAAAA,mBAAmB,EAAE;AAJV,KAAb;AAFsC;AAQvC;;;;WAED,6BAA0B;AACxB,WAAK/B,YAAL;AACD;;;WAED,4BAAmBkC,SAAnB,EAAmDC,UAAnD,EAAoF;AAClF,UAAMF,UAAU,GAAGrD,SAAS,CAACS,OAAD,EAAUC,UAAV,CAA5B;;AACA,UACE4C,SAAS,CAACX,KAAV,CAAgBC,MAAhB,CAAuBC,SAAvB,KAAqC,KAAK3B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SAA7D,IACAS,SAAS,CAACX,KAAV,CAAgBC,MAAhB,CAAuBE,OAAvB,KAAmC,KAAK5B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OAD3D,IAEAQ,SAAS,CAACE,aAAV,KAA4B,KAAKtC,KAAL,CAAWsC,aAHzC,EAIE;AACA,YAAIH,UAAU,KAAK,MAAnB,EAA2B;AACzB,eAAKjC,YAAL;AACD;;AACD,YAAIiC,UAAU,KAAK,KAAKD,KAAL,CAAWC,UAA9B,EAA0C;AACxC,eAAKnB,QAAL,CAAc;AAAEmB,YAAAA,UAAU,EAAEA;AAAd,WAAd;AACD;AACF;AACF;;;WA8CD,6BAAsC;AACpC,aAAO,KAAKD,KAAL,CAAWjB,QAAX,CAAoBN,GAApB,CAAwB,UAAA4B,OAAO;AAAA,eAAIA,OAAO,CAACC,QAAR,CAAiBb,SAAjB,GAA6B,GAA7B,GAAmCY,OAAO,CAACC,QAAR,CAAiB1B,IAAxD;AAAA,OAA/B,CAAP;AACD;;;WAED,sBAAqB;AACnB,UAAM2B,OAAO,gBACX,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,KAAK,EAAC,UAAxB;AAAmC,QAAA,GAAG,EAAC,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAE,KAAKzC,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SADrC;AAEE,QAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OAFnC;AAGE,QAAA,cAAc,EAAE,KAAKM,KAAL,CAAWH,cAH7B;AAIE,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWjB,QAJvB;AAKE,QAAA,mBAAmB,EAAE,KAAKiB,KAAL,CAAWD,mBALlC;AAME,QAAA,WAAW,EAAE,KAAKC,KAAL,CAAWF,WAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYA,UAAMU,UAAU,gBACd,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,KAAK,EAAC,SAAxB;AAAkC,QAAA,GAAG,EAAEjD,cAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,cAAD;AACE,QAAA,QAAQ,EAAE,KAAKO,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OADpC;AAEE,QAAA,QAAQ,EAAEhD,kBAAkB,CAAC+D,OAF/B;AAGE,QAAA,SAAS,EAAE,KAAK3C,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUA,UAAMiB,KAAK,gBACT,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,KAAK,EAAC,iBAAxB;AAA0C,QAAA,GAAG,EAAC,iBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,qBAAD;AACE,QAAA,SAAS,EAAE,KAAK5C,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SADrC;AAEE,QAAA,MAAM,EAAE,KAAK3B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OAFlC;AAGE,QAAA,UAAU,EAAEhD,kBAAkB,CAAC+D,OAHjC;AAIE,QAAA,SAAS,EAAE,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAWA,UAAME,SAAwB,GAAG,CAACJ,OAAD,EAAUC,UAAV,EAAsBE,KAAtB,CAAjC;;AAEA,UAAI,KAAK5C,KAAL,CAAW8C,UAAX,IAAyB,KAAK9C,KAAL,CAAW8C,UAAX,CAAsBC,OAA/C,IAA0D,KAAK/C,KAAL,CAAW8C,UAAX,CAAsBE,WAApF,EAAiG;AAC/FH,QAAAA,SAAS,CAACI,IAAV,eACE,oBAAC,GAAD;AAAK,UAAA,QAAQ,EAAE,CAAf;AAAkB,UAAA,KAAK,EAAC,QAAxB;AAAiC,UAAA,GAAG,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,eAAD;AACE,UAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SADrC;AAEE,UAAA,MAAM,EAAE,KAAK3B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBE,OAFlC;AAGE,UAAA,UAAU,EAAE,SAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AASD;;AAED,aAAOiB,SAAP;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAIK,aAAa,GAAG,KAApB;;AACA,cAAQ,KAAKhB,KAAL,CAAWC,UAAnB;AACE,aAAK,MAAL;AACA,aAAK,SAAL;AACEe,UAAAA,aAAa,GAAG,KAAhB;AACA;;AACF,aAAK,SAAL;AACA,aAAK,QAAL;AACEA,UAAAA,aAAa,GAAG,IAAhB;AACA;AARJ;;AAUA,UAAMC,cAAc,GAAG,KAAKjB,KAAL,CAAWH,cAAX,gBACrB,oBAAC,qBAAD;AACE,QAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,SADrC;AAEE,QAAA,WAAW,EAAE,KAAKO,KAAL,CAAWH,cAAX,CAA0BH,OAA1B,CAAkCd,IAFjD;AAGE,QAAA,IAAI,EAAE,KAHR;AAIE,QAAA,SAAS,EAAE,KAAKoB,KAAL,CAAWH,cAAX,CAA0BqB,SAA1B,IAAuC,EAJpD;AAKE,QAAA,eAAe,EAAE,KAAKlB,KAAL,CAAWH,cAAX,CAA0BsB,eAL7C;AAME,QAAA,gBAAgB,EAAE,KAAKnB,KAAL,CAAWH,cAAX,CAA0BuB,gBAN9C;AAOE,QAAA,QAAQ,EAAE,KAAKC,iBAAL,EAPZ;AAQE,QAAA,mBAAmB,EAAE,KAAKrB,KAAL,CAAWD,mBARlC;AASE,QAAA,SAAS,EAAE,KAAKC,KAAL,CAAWH,cAAX,CAA0ByB,aATvC;AAUE,QAAA,QAAQ,EAAE,KAAKtD,YAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqB,GAanBuD,SAbJ;AAeA,0BACE,uDACE,oBAAC,YAAD;AACE,QAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAW0D,QADvB;AAEE,QAAA,YAAY,eAAE,oBAAC,WAAD;AAAa,UAAA,cAAc,EAAER,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFhB;AAGE,QAAA,cAAc,EAAEC,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAME,oBAAC,iBAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,QAAQ,EAAE,kBAAAQ,QAAQ,EAAI;AACpB,UAAA,MAAI,CAAC3C,QAAL,CAAc;AAAEmB,YAAAA,UAAU,EAAEwB;AAAd,WAAd;AACD,SAJH;AAKE,QAAA,MAAM,EAAEjE,QALV;AAME,QAAA,OAAO,EAAEH,OANX;AAOE,QAAA,UAAU,EAAEC,UAPd;AAQE,QAAA,SAAS,EAAE,KAAK0C,KAAL,CAAWC,UARxB;AASE,QAAA,YAAY,EAAE,IAThB;AAUE,QAAA,aAAa,EAAE,IAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYG,KAAKyB,UAAL,EAZH,CANF,CADF;AAuBD;;;;EAtL0BrF,KAAK,CAACsF,S;;AAyLnC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAC5B,KAAD;AAAA,SAA2B;AACjDY,IAAAA,UAAU,EAAEZ,KAAK,CAAC6B,WAAN,CAAkBpE,IADmB;AAEjD2C,IAAAA,aAAa,EAAEJ,KAAK,CAAC8B,WAAN,CAAkB1B;AAFgB,GAA3B;AAAA,CAAxB;;AAKA,IAAM2B,2BAA2B,GAAGzF,OAAO,CAACsF,eAAD,CAAP,CAAyB/D,cAAzB,CAApC;AACA,eAAekE,2BAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Tab } from '@patternfly/react-core';\n\nimport ServiceId from '../../types/ServiceId';\nimport IstioMetricsContainer from '../../components/Metrics/IstioMetrics';\nimport { RenderHeader } from '../../components/Nav/Page';\nimport { MetricsObjectTypes } from '../../types/Metrics';\nimport { KialiAppState } from '../../store/Store';\nimport { DurationInSeconds, TimeInMilliseconds } from '../../types/Common';\nimport ParameterizedTabs, { activeTab } from '../../components/Tab/Tabs';\nimport ServiceInfo from './ServiceInfo';\nimport TracesComponent from 'components/JaegerIntegration/TracesComponent';\nimport { JaegerInfo } from 'types/JaegerInfo';\nimport TrafficDetails from 'components/TrafficList/TrafficDetails';\nimport * as API from '../../services/Api';\nimport Namespace from '../../types/Namespace';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { ServiceDetailsInfo } from '../../types/ServiceInfo';\nimport { Gateway, PeerAuthentication, Validations } from '../../types/IstioObjects';\nimport ServiceWizardDropdown from '../../components/IstioWizards/ServiceWizardDropdown';\nimport TimeControl from '../../components/Time/TimeControl';\n\ntype ServiceDetailsState = {\n  currentTab: string;\n  gateways: Gateway[];\n  serviceDetails?: ServiceDetailsInfo;\n  peerAuthentications: PeerAuthentication[];\n  validations: Validations;\n};\n\ninterface ServiceDetailsProps extends RouteComponentProps<ServiceId> {\n  duration: DurationInSeconds;\n  jaegerInfo?: JaegerInfo;\n  lastRefreshAt: TimeInMilliseconds;\n}\n\nconst tabName = 'tab';\nconst defaultTab = 'info';\nconst trafficTabName = 'traffic';\n\nconst tabIndex: { [tab: string]: number } = {\n  info: 0,\n  traffic: 1,\n  metrics: 2,\n  traces: 3\n};\n\nclass ServiceDetails extends React.Component<ServiceDetailsProps, ServiceDetailsState> {\n  private promises = new PromisesRegistry();\n\n  constructor(props: ServiceDetailsProps) {\n    super(props);\n    this.state = {\n      currentTab: activeTab(tabName, defaultTab),\n      gateways: [],\n      validations: {},\n      peerAuthentications: []\n    };\n  }\n\n  componentDidMount(): void {\n    this.fetchService();\n  }\n\n  componentDidUpdate(prevProps: ServiceDetailsProps, _prevState: ServiceDetailsState) {\n    const currentTab = activeTab(tabName, defaultTab);\n    if (\n      prevProps.match.params.namespace !== this.props.match.params.namespace ||\n      prevProps.match.params.service !== this.props.match.params.service ||\n      prevProps.lastRefreshAt !== this.props.lastRefreshAt\n    ) {\n      if (currentTab === 'info') {\n        this.fetchService();\n      }\n      if (currentTab !== this.state.currentTab) {\n        this.setState({ currentTab: currentTab });\n      }\n    }\n  }\n\n  private fetchService = () => {\n    this.promises.cancelAll();\n    this.promises\n      .register('namespaces', API.getNamespaces())\n      .then(namespacesResponse => {\n        const namespaces: Namespace[] = namespacesResponse.data;\n        this.promises\n          .registerAll(\n            'gateways',\n            namespaces.map(ns => API.getIstioConfig(ns.name, ['gateways'], false, '', ''))\n          )\n          .then(responses => {\n            this.setState({ gateways: responses.map(response => response.data.gateways).flat() });\n          })\n          .catch(gwError => {\n            AlertUtils.addError('Could not fetch Gateways list.', gwError);\n          });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch Namespaces list.', error);\n      });\n\n    API.getServiceDetail(this.props.match.params.namespace, this.props.match.params.service, true, this.props.duration)\n      .then(results => {\n        this.setState({\n          serviceDetails: results,\n          validations: results.validations\n        });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch Service Details.', error);\n      });\n\n    API.getIstioConfig(this.props.match.params.namespace, ['peerauthentications'], false, '', '')\n      .then(results => {\n        this.setState({\n          peerAuthentications: results.data.peerAuthentications\n        });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch PeerAuthentications.', error);\n      });\n  };\n\n  private getGatewaysAsList(): string[] {\n    return this.state.gateways.map(gateway => gateway.metadata.namespace + '/' + gateway.metadata.name);\n  }\n\n  private renderTabs() {\n    const overTab = (\n      <Tab eventKey={0} title=\"Overview\" key=\"Overview\">\n        <ServiceInfo\n          namespace={this.props.match.params.namespace}\n          service={this.props.match.params.service}\n          serviceDetails={this.state.serviceDetails}\n          gateways={this.state.gateways}\n          peerAuthentications={this.state.peerAuthentications}\n          validations={this.state.validations}\n        />\n      </Tab>\n    );\n    const trafficTab = (\n      <Tab eventKey={1} title=\"Traffic\" key={trafficTabName}>\n        <TrafficDetails\n          itemName={this.props.match.params.service}\n          itemType={MetricsObjectTypes.SERVICE}\n          namespace={this.props.match.params.namespace}\n        />\n      </Tab>\n    );\n\n    const inTab = (\n      <Tab eventKey={2} title=\"Inbound Metrics\" key=\"Inbound Metrics\">\n        <IstioMetricsContainer\n          namespace={this.props.match.params.namespace}\n          object={this.props.match.params.service}\n          objectType={MetricsObjectTypes.SERVICE}\n          direction={'inbound'}\n        />\n      </Tab>\n    );\n\n    const tabsArray: JSX.Element[] = [overTab, trafficTab, inTab];\n\n    if (this.props.jaegerInfo && this.props.jaegerInfo.enabled && this.props.jaegerInfo.integration) {\n      tabsArray.push(\n        <Tab eventKey={3} title=\"Traces\" key=\"Traces\">\n          <TracesComponent\n            namespace={this.props.match.params.namespace}\n            target={this.props.match.params.service}\n            targetKind={'service'}\n          />\n        </Tab>\n      );\n    }\n\n    return tabsArray;\n  }\n\n  render() {\n    let useCustomTime = false;\n    switch (this.state.currentTab) {\n      case 'info':\n      case 'traffic':\n        useCustomTime = false;\n        break;\n      case 'metrics':\n      case 'traces':\n        useCustomTime = true;\n        break;\n    }\n    const actionsToolbar = this.state.serviceDetails ? (\n      <ServiceWizardDropdown\n        namespace={this.props.match.params.namespace}\n        serviceName={this.state.serviceDetails.service.name}\n        show={false}\n        workloads={this.state.serviceDetails.workloads || []}\n        virtualServices={this.state.serviceDetails.virtualServices}\n        destinationRules={this.state.serviceDetails.destinationRules}\n        gateways={this.getGatewaysAsList()}\n        peerAuthentications={this.state.peerAuthentications}\n        tlsStatus={this.state.serviceDetails.namespaceMTLS}\n        onChange={this.fetchService}\n      />\n    ) : undefined;\n\n    return (\n      <>\n        <RenderHeader\n          location={this.props.location}\n          rightToolbar={<TimeControl customDuration={useCustomTime} />}\n          actionsToolbar={actionsToolbar}\n        />\n        <ParameterizedTabs\n          id=\"basic-tabs\"\n          onSelect={tabValue => {\n            this.setState({ currentTab: tabValue });\n          }}\n          tabMap={tabIndex}\n          tabName={tabName}\n          defaultTab={defaultTab}\n          activeTab={this.state.currentTab}\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          {this.renderTabs()}\n        </ParameterizedTabs>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  jaegerInfo: state.jaegerState.info,\n  lastRefreshAt: state.globalState.lastRefreshAt\n});\n\nconst ServiceDetailsPageContainer = connect(mapStateToProps)(ServiceDetails);\nexport default ServiceDetailsPageContainer;\n"]},"metadata":{},"sourceType":"module"}
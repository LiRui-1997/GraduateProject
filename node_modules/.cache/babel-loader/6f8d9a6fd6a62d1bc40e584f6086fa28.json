{"ast":null,"code":"import _regeneratorRuntime from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport moment from 'moment';\nimport { LoginActions } from './LoginActions';\nimport * as API from '../services/Api';\nimport * as Login from '../services/Login';\nimport { AuthResult } from '../types/Auth';\nimport { isAuthStrategyOAuth } from '../config/AuthenticationConfig';\nimport * as AlertUtils from '../utils/AlertUtils';\nvar Dispatcher = new Login.LoginDispatcher();\n\nvar shouldRelogin = function shouldRelogin(state) {\n  return !state || !state.session || moment(state.session.expiresOn).diff(moment()) > 0;\n};\n\nvar loginSuccess = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, session) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(LoginActions.loginSuccess(session));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loginSuccess(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Performs the user login, dispatching to the proper login implementations.\n// The `data` argument is defined as `any` because the dispatchers receive\n// different kinds of data (such as e-mail/password, tokens).\n\n\nvar performLogin = function performLogin(dispatch, state, data) {\n  var bail = function bail(loginResult) {\n    if (isAuthStrategyOAuth()) {\n      dispatch(LoginActions.loginFailure(loginResult.error));\n    } else {\n      data ? dispatch(LoginActions.loginFailure(loginResult.error)) : dispatch(LoginActions.logoutSuccess());\n    }\n  };\n\n  Dispatcher.prepare().then(function (result) {\n    if (result === AuthResult.CONTINUE) {\n      Dispatcher.perform({\n        dispatch: dispatch,\n        state: state,\n        data: data\n      }).then(function (loginResult) {\n        return loginSuccess(dispatch, loginResult.session);\n      }, function (error) {\n        return bail(error);\n      });\n    } else {\n      bail({\n        status: AuthResult.FAILURE,\n        error: 'Preparation for login failed, try again.'\n      });\n    }\n  });\n};\n\nvar LoginThunkActions = {\n  authenticate: function authenticate(username, password) {\n    return function (dispatch, getState) {\n      dispatch(LoginActions.loginRequest());\n      performLogin(dispatch, getState(), {\n        username: username,\n        password: password\n      });\n    };\n  },\n  checkCredentials: function checkCredentials() {\n    return function (dispatch, getState) {\n      var state = getState();\n      dispatch(LoginActions.loginRequest());\n\n      if (shouldRelogin(state.authentication)) {\n        performLogin(dispatch, state);\n      } else {\n        loginSuccess(dispatch, state.authentication.session);\n      }\n    };\n  },\n  extendSession: function extendSession(session) {\n    return function (dispatch) {\n      dispatch(LoginActions.loginExtend(session));\n    };\n  },\n  logout: function logout() {\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return API.logout();\n\n              case 3:\n                response = _context2.sent;\n\n                if (response.status === 204) {\n                  dispatch(LoginActions.logoutSuccess());\n                }\n\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                AlertUtils.addError('Logout failed', _context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n};\nexport default LoginThunkActions;","map":{"version":3,"sources":["/root/kiali-ui/src/actions/LoginThunkActions.ts"],"names":["moment","LoginActions","API","Login","AuthResult","isAuthStrategyOAuth","AlertUtils","Dispatcher","LoginDispatcher","shouldRelogin","state","session","expiresOn","diff","loginSuccess","dispatch","performLogin","data","bail","loginResult","loginFailure","error","logoutSuccess","prepare","then","result","CONTINUE","perform","status","FAILURE","LoginThunkActions","authenticate","username","password","getState","loginRequest","checkCredentials","authentication","extendSession","loginExtend","logout","response","addError"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { KialiAppState, LoginSession, LoginState } from '../store/Store';\nimport { LoginActions } from './LoginActions';\nimport * as API from '../services/Api';\nimport * as Login from '../services/Login';\nimport { AuthResult } from '../types/Auth';\nimport { KialiDispatch } from '../types/Redux';\nimport { isAuthStrategyOAuth } from '../config/AuthenticationConfig';\nimport * as AlertUtils from '../utils/AlertUtils';\n\nconst Dispatcher = new Login.LoginDispatcher();\n\nconst shouldRelogin = (state?: LoginState): boolean =>\n  !state || !state.session || moment(state.session!.expiresOn).diff(moment()) > 0;\n\nconst loginSuccess = async (dispatch: KialiDispatch, session: LoginSession) => {\n  dispatch(LoginActions.loginSuccess(session));\n};\n\n// Performs the user login, dispatching to the proper login implementations.\n// The `data` argument is defined as `any` because the dispatchers receive\n// different kinds of data (such as e-mail/password, tokens).\nconst performLogin = (dispatch: KialiDispatch, state: KialiAppState, data?: any) => {\n  const bail = (loginResult: Login.LoginResult) => {\n    if (isAuthStrategyOAuth()) {\n      dispatch(LoginActions.loginFailure(loginResult.error));\n    } else {\n      data ? dispatch(LoginActions.loginFailure(loginResult.error)) : dispatch(LoginActions.logoutSuccess());\n    }\n  };\n\n  Dispatcher.prepare().then((result: AuthResult) => {\n    if (result === AuthResult.CONTINUE) {\n      Dispatcher.perform({ dispatch, state, data }).then(\n        loginResult => loginSuccess(dispatch, loginResult.session!),\n        error => bail(error)\n      );\n    } else {\n      bail({ status: AuthResult.FAILURE, error: 'Preparation for login failed, try again.' });\n    }\n  });\n};\n\nconst LoginThunkActions = {\n  authenticate: (username: string, password: string) => {\n    return (dispatch: KialiDispatch, getState: () => KialiAppState) => {\n      dispatch(LoginActions.loginRequest());\n      performLogin(dispatch, getState(), { username, password });\n    };\n  },\n  checkCredentials: () => {\n    return (dispatch: KialiDispatch, getState: () => KialiAppState) => {\n      const state: KialiAppState = getState();\n\n      dispatch(LoginActions.loginRequest());\n\n      if (shouldRelogin(state.authentication)) {\n        performLogin(dispatch, state);\n      } else {\n        loginSuccess(dispatch, state.authentication!.session!);\n      }\n    };\n  },\n  extendSession: (session: LoginSession) => {\n    return (dispatch: KialiDispatch) => {\n      dispatch(LoginActions.loginExtend(session));\n    };\n  },\n  logout: () => {\n    return async (dispatch: KialiDispatch) => {\n      try {\n        const response = await API.logout();\n\n        if (response.status === 204) {\n          dispatch(LoginActions.logoutSuccess());\n        }\n      } catch (err) {\n        AlertUtils.addError('Logout failed', err);\n      }\n    };\n  }\n};\n\nexport default LoginThunkActions;\n"]},"metadata":{},"sourceType":"module"}
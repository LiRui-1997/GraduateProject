{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphHelpFind.tsx\";\nimport * as React from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { Tab, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { Table, TableBody, TableHeader, TableVariant, cellWidth } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nvar tabFont = {\n  fontSize: '14px'\n};\nvar contentWidth = '540px';\n\nvar GraphHelpFind = /*#__PURE__*/function (_React$Component) {\n  _inherits(GraphHelpFind, _React$Component);\n\n  var _super = _createSuper(GraphHelpFind);\n\n  function GraphHelpFind() {\n    var _this;\n\n    _classCallCheck(this, GraphHelpFind);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onResize = function () {\n      _this.forceUpdate();\n    };\n\n    _this.edgeColumns = function () {\n      return [{\n        title: 'Expression'\n      }, {\n        title: 'Notes'\n      }];\n    };\n\n    _this.edgeRows = function () {\n      return [['destprincipal <op> <principal>'], ['grpc <op> <number>', 'unit: requests per second'], ['%grpcerr <op> <number>', 'range: [0..100]'], ['%grpctraffic <op> <number>', 'range: [0..100]'], ['http <op> <number>', 'unit: requests per second'], ['%httperr <op> <number>', 'range: [0..100]'], ['%httptraffic <op> <number>', 'range: [0..100]'], ['mtls', \"will auto-enable 'security' display option\"], ['protocol <op> <protocol>', 'grpc, http, tcp, etc..'], ['responsetime <op> <number>', \"unit: millis, will auto-enable 'P95 response time' edge labels\"], ['sourceprincipal <op> <principal>'], ['tcp <op> <number>', 'unit: bytes per second'], ['throughput <op> <number>', \"unit: bytes per second, will auto-enable 'request throughput' edge labels\"], ['traffic', 'any traffic for any protocol']];\n    };\n\n    _this.exampleColumns = function () {\n      return [{\n        title: 'Expression'\n      }, {\n        title: 'Description'\n      }];\n    };\n\n    _this.exampleRows = function () {\n      return [['name = reviews', \"\\\"by name\\\": nodes with app label, service name or workload name equal to 'reviews'\"], ['name not contains rev', \"\\\"by name\\\": nodes with app label, service name and workload name not containing 'rev'\"], ['app startswith product', \"nodes with app label starting with 'product'\"], ['app != details and version=v1', \"nodes with app label not equal to 'details' and with version equal to 'v1'\"], ['!sc', \"nodes without a sidecar\"], ['httpin > 0.5', \"nodes with inbound http rate > 0.5 rps\"], ['tcpout >= 1000', \"nodes with outbound tcp rates >= 1000 bps\"], ['!traffic', 'edges with no traffic'], ['http > 0.5', \"edges with http rate > 0.5 rps\"], ['rt > 500', \"edges with response time > 500ms. (requires response time edge labels)\"], ['%httptraffic >= 50.0', \"edges with >= 50% of the outbound http request traffic of the parent\"], ['node = svc and svc startswith det or !traffic', 'service node starting with \"det\" or edges with no traffic']];\n    };\n\n    _this.nodeColumns = function () {\n      return [{\n        title: 'Expression'\n      }, {\n        title: 'Notes'\n      }];\n    };\n\n    _this.nodeRows = function () {\n      return [['grpcin <op> <number>', 'unit: requests per second'], ['grpcout <op> <number>', 'unit: requests per second'], ['httpin <op> <number>', 'unit: requests per second'], ['httpout <op> <number>', 'unit: requests per second'], ['app <op> <appName>'], ['cluster <op> <clusterName>'], ['name <op> <string>', 'tests against app label, operation, service and workload names'], ['namespace <op> <namespaceName>'], ['node <op> <nodeType>', 'nodeType: app | operation | service | workload | unknown'], ['operation <op> <operationName>'], ['service <op> <serviceName>'], ['version <op> <string>'], ['tcpin <op> <number>', 'unit: bytes per second'], ['tcpout <op> <number>', 'unit: bytes per second'], ['workload <op> <workloadName>'], ['circuitbreaker'], ['faultinjection'], ['healthy', 'is not degraded or failing.'], ['idle', \"will auto-enable 'idle nodes' display option\"], ['outside', 'is outside of requested namespaces'], ['requestrouting'], ['requesttimeout'], ['sidecar'], ['serviceentry'], ['tcptrafficshifting'], ['trafficshifting'], ['trafficsource', \"has only outbound edges\"], ['virtualservice'], ['workloadentry']];\n    };\n\n    _this.noteColumns = function () {\n      return [{\n        title: 'Usage Note',\n        transforms: [cellWidth(10)],\n        props: {\n          style: {\n            align: 'text-left'\n          }\n        }\n      }];\n    };\n\n    _this.noteRows = function () {\n      return [['Press Tab key to autocomplete operands.'], ['OR has precedence over AND.  Parentheses are not supported.'], ['Use OR to combine node and edge criteria.'], ['Use \"<operand> = NaN\" to test for no activity. Use \"!= NaN\" for any activity. (e.g. httpout = NaN)'], [\"Unary operands may optionally be prefixed with \\\"is\\\" or \\\"has\\\". (i.e. \\\"has mtls\\\")\"], ['The \"name\" operand expands internally to an \"OR\" expression (an \"AND\" when negated).'], ['Abbreviate: ns|namespace, svc|service, se|serviceentry, wl|workload, we|workloadentry, op|operation'], ['Abbreviate: rt|responsetime, sc|sidecar, vs|virtualservice'], ['Abbreviate: cb|circuitbreaker, fi|faultinjection, rr|requestrouting, rto|requesttimeout, ts|trafficshifting'], ['Hiding nodes will automatically hide connected edges.'], ['Hiding edges will automatically hide nodes left with no visible edges.'], ['Hiding \"healthy\" nodes may still leave valid, healthy edges in the graph.']];\n    };\n\n    _this.operatorColumns = function () {\n      return [{\n        title: 'Operator'\n      }, {\n        title: 'Description'\n      }];\n    };\n\n    _this.operatorRows = function () {\n      return [['! | not <unary expression>', \"negation\"], ['=', \"equals\"], ['!=', \"not equals\"], ['endswith | $=', \"ends with, strings only\"], ['!endswith | !$=', \"not ends with, strings only\"], ['startswith | ^=', \"starts with, strings only\"], ['!startswith | !^=', \"not starts with, strings only\"], ['contains | *=', 'contains, strings only'], ['!contains | !*=', 'not contains, strings only'], ['>', \"greater than\"], ['>=', \"greater than or equals\"], ['<', \"less than\"], ['<=', \"less than or equals\"]];\n    };\n\n    return _this;\n  }\n\n  _createClass(GraphHelpFind, [{\n    key: \"render\",\n    value: function render() {\n      var width = '600px';\n      var maxWidth = '604px';\n      var popoverStyle = style({\n        width: width,\n        maxWidth: maxWidth,\n        height: '550px',\n        overflow: 'hidden',\n        overflowX: 'auto',\n        overflowY: 'auto'\n      });\n      var prefaceStyle = style({\n        fontSize: '12px',\n        color: '#fff',\n        backgroundColor: '#003145',\n        width: contentWidth,\n        height: '80px',\n        padding: '5px',\n        resize: 'none',\n        overflowY: 'hidden'\n      });\n      var preface = 'You can use the Find and Hide fields to highlight or hide graph edges and nodes. Each field accepts ' + 'expressions using the language described below. Preset expressions are available via the dropdown. ' + 'Hide takes precedence when using Find and Hide together. Uncheck the \"Compressed Hide\" Display ' + 'option for hidden elements to retain their space.';\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n        refreshMode: 'debounce',\n        refreshRate: 100,\n        skipOnMount: true,\n        handleWidth: true,\n        handleHeight: true,\n        onResize: this.onResize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Popover, {\n        className: popoverStyle,\n        position: PopoverPosition.auto,\n        isVisible: true,\n        hideOnOutsideClick: false,\n        shouldClose: this.props.onClose,\n        headerContent: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }\n        }, \"Graph Find/Hide\")),\n        bodyContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", {\n          className: \"\".concat(prefaceStyle),\n          readOnly: true,\n          value: preface,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(SimpleTabs, {\n          id: \"graph_find_help_tabs\",\n          defaultTab: 0,\n          style: {\n            width: contentWidth\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Tab, {\n          style: tabFont,\n          eventKey: 0,\n          title: \"Examples\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, {\n          header: /*#__PURE__*/React.createElement(React.Fragment, null),\n          variant: TableVariant.compact,\n          cells: this.exampleColumns(),\n          rows: this.exampleRows(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(TableHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(TableBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }\n        }))), /*#__PURE__*/React.createElement(Tab, {\n          style: tabFont,\n          eventKey: 1,\n          title: \"Nodes\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, {\n          header: /*#__PURE__*/React.createElement(React.Fragment, null),\n          variant: TableVariant.compact,\n          cells: this.nodeColumns(),\n          rows: this.nodeRows(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(TableHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(TableBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }\n        }))), /*#__PURE__*/React.createElement(Tab, {\n          style: tabFont,\n          eventKey: 2,\n          title: \"Edges\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, {\n          header: /*#__PURE__*/React.createElement(React.Fragment, null),\n          variant: TableVariant.compact,\n          cells: this.edgeColumns(),\n          rows: this.edgeRows(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(TableHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(TableBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }\n        }))), /*#__PURE__*/React.createElement(Tab, {\n          style: tabFont,\n          eventKey: 3,\n          title: \"Operators\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, {\n          header: /*#__PURE__*/React.createElement(React.Fragment, null),\n          variant: TableVariant.compact,\n          cells: this.operatorColumns(),\n          rows: this.operatorRows(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(TableHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(TableBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }))), /*#__PURE__*/React.createElement(Tab, {\n          style: tabFont,\n          eventKey: 4,\n          title: \"Usage Notes\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, {\n          header: /*#__PURE__*/React.createElement(React.Fragment, null),\n          variant: TableVariant.compact,\n          cells: this.noteColumns(),\n          rows: this.noteRows(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(TableHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(TableBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }\n        }))))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children)));\n    }\n  }]);\n\n  return GraphHelpFind;\n}(React.Component);\n\nexport { GraphHelpFind as default };","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphHelpFind.tsx"],"names":["React","ReactResizeDetector","Tab","Popover","PopoverPosition","Table","TableBody","TableHeader","TableVariant","cellWidth","style","SimpleTabs","tabFont","fontSize","contentWidth","GraphHelpFind","onResize","forceUpdate","edgeColumns","title","edgeRows","exampleColumns","exampleRows","nodeColumns","nodeRows","noteColumns","transforms","props","align","noteRows","operatorColumns","operatorRows","width","maxWidth","popoverStyle","height","overflow","overflowX","overflowY","prefaceStyle","color","backgroundColor","padding","resize","preface","auto","onClose","compact","children","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { Tab, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { ICell, Table, TableBody, TableHeader, TableVariant, cellWidth } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\n\nexport interface GraphHelpFindProps {\n  onClose: () => void;\n  className?: string;\n}\n\nconst tabFont: React.CSSProperties = {\n  fontSize: '14px'\n};\n\nconst contentWidth = '540px';\n\nexport default class GraphHelpFind extends React.Component<GraphHelpFindProps> {\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  render() {\n    const width = '600px';\n    const maxWidth = '604px';\n    const popoverStyle = style({\n      width: width,\n      maxWidth: maxWidth,\n      height: '550px',\n      overflow: 'hidden',\n      overflowX: 'auto',\n      overflowY: 'auto'\n    });\n    const prefaceStyle = style({\n      fontSize: '12px',\n      color: '#fff',\n      backgroundColor: '#003145',\n      width: contentWidth,\n      height: '80px',\n      padding: '5px',\n      resize: 'none',\n      overflowY: 'hidden'\n    });\n    const preface =\n      'You can use the Find and Hide fields to highlight or hide graph edges and nodes. Each field accepts ' +\n      'expressions using the language described below. Preset expressions are available via the dropdown. ' +\n      'Hide takes precedence when using Find and Hide together. Uncheck the \"Compressed Hide\" Display ' +\n      'option for hidden elements to retain their space.';\n\n    return (\n      <>\n        <ReactResizeDetector\n          refreshMode={'debounce'}\n          refreshRate={100}\n          skipOnMount={true}\n          handleWidth={true}\n          handleHeight={true}\n          onResize={this.onResize}\n        />\n        <Popover\n          className={popoverStyle}\n          position={PopoverPosition.auto}\n          isVisible={true}\n          hideOnOutsideClick={false}\n          shouldClose={this.props.onClose}\n          headerContent={\n            <div>\n              <span>Graph Find/Hide</span>\n            </div>\n          }\n          bodyContent={\n            <>\n              <textarea className={`${prefaceStyle}`} readOnly={true} value={preface} />\n              <SimpleTabs id=\"graph_find_help_tabs\" defaultTab={0} style={{ width: contentWidth }}>\n                <Tab style={tabFont} eventKey={0} title=\"Examples\">\n                  <Table\n                    header={<></>}\n                    variant={TableVariant.compact}\n                    cells={this.exampleColumns()}\n                    rows={this.exampleRows()}\n                  >\n                    <TableHeader />\n                    <TableBody />\n                  </Table>\n                </Tab>\n                <Tab style={tabFont} eventKey={1} title=\"Nodes\">\n                  <Table\n                    header={<></>}\n                    variant={TableVariant.compact}\n                    cells={this.nodeColumns()}\n                    rows={this.nodeRows()}\n                  >\n                    <TableHeader />\n                    <TableBody />\n                  </Table>\n                </Tab>\n                <Tab style={tabFont} eventKey={2} title=\"Edges\">\n                  <Table\n                    header={<></>}\n                    variant={TableVariant.compact}\n                    cells={this.edgeColumns()}\n                    rows={this.edgeRows()}\n                  >\n                    <TableHeader />\n                    <TableBody />\n                  </Table>\n                </Tab>\n                <Tab style={tabFont} eventKey={3} title=\"Operators\">\n                  <Table\n                    header={<></>}\n                    variant={TableVariant.compact}\n                    cells={this.operatorColumns()}\n                    rows={this.operatorRows()}\n                  >\n                    <TableHeader />\n                    <TableBody />\n                  </Table>\n                </Tab>\n                <Tab style={tabFont} eventKey={4} title=\"Usage Notes\">\n                  <Table\n                    header={<></>}\n                    variant={TableVariant.compact}\n                    cells={this.noteColumns()}\n                    rows={this.noteRows()}\n                  >\n                    <TableHeader />\n                    <TableBody />\n                  </Table>\n                </Tab>\n              </SimpleTabs>\n            </>\n          }\n        >\n          <>{this.props.children}</>\n        </Popover>\n      </>\n    );\n  }\n\n  private edgeColumns = (): ICell[] => {\n    return [{ title: 'Expression' }, { title: 'Notes' }];\n  };\n  private edgeRows = (): string[][] => {\n    return [\n      ['destprincipal <op> <principal>'],\n      ['grpc <op> <number>', 'unit: requests per second'],\n      ['%grpcerr <op> <number>', 'range: [0..100]'],\n      ['%grpctraffic <op> <number>', 'range: [0..100]'],\n      ['http <op> <number>', 'unit: requests per second'],\n      ['%httperr <op> <number>', 'range: [0..100]'],\n      ['%httptraffic <op> <number>', 'range: [0..100]'],\n      ['mtls', `will auto-enable 'security' display option`],\n      ['protocol <op> <protocol>', 'grpc, http, tcp, etc..'],\n      ['responsetime <op> <number>', `unit: millis, will auto-enable 'P95 response time' edge labels`],\n      ['sourceprincipal <op> <principal>'],\n      ['tcp <op> <number>', 'unit: bytes per second'],\n      ['throughput <op> <number>', `unit: bytes per second, will auto-enable 'request throughput' edge labels`],\n      ['traffic', 'any traffic for any protocol']\n    ];\n  };\n\n  private exampleColumns = (): ICell[] => {\n    return [{ title: 'Expression' }, { title: 'Description' }];\n  };\n  private exampleRows = (): string[][] => {\n    return [\n      ['name = reviews', `\"by name\": nodes with app label, service name or workload name equal to 'reviews'`],\n      ['name not contains rev', `\"by name\": nodes with app label, service name and workload name not containing 'rev'`],\n      ['app startswith product', `nodes with app label starting with 'product'`],\n      ['app != details and version=v1', `nodes with app label not equal to 'details' and with version equal to 'v1'`],\n      ['!sc', `nodes without a sidecar`],\n      ['httpin > 0.5', `nodes with inbound http rate > 0.5 rps`],\n      ['tcpout >= 1000', `nodes with outbound tcp rates >= 1000 bps`],\n      ['!traffic', 'edges with no traffic'],\n      ['http > 0.5', `edges with http rate > 0.5 rps`],\n      ['rt > 500', `edges with response time > 500ms. (requires response time edge labels)`],\n      ['%httptraffic >= 50.0', `edges with >= 50% of the outbound http request traffic of the parent`],\n      ['node = svc and svc startswith det or !traffic', 'service node starting with \"det\" or edges with no traffic']\n    ];\n  };\n\n  private nodeColumns = (): ICell[] => {\n    return [{ title: 'Expression' }, { title: 'Notes' }];\n  };\n  private nodeRows = (): string[][] => {\n    return [\n      ['grpcin <op> <number>', 'unit: requests per second'],\n      ['grpcout <op> <number>', 'unit: requests per second'],\n      ['httpin <op> <number>', 'unit: requests per second'],\n      ['httpout <op> <number>', 'unit: requests per second'],\n      ['app <op> <appName>'],\n      ['cluster <op> <clusterName>'],\n      ['name <op> <string>', 'tests against app label, operation, service and workload names'],\n      ['namespace <op> <namespaceName>'],\n      ['node <op> <nodeType>', 'nodeType: app | operation | service | workload | unknown'],\n      ['operation <op> <operationName>'],\n      ['service <op> <serviceName>'],\n      ['version <op> <string>'],\n      ['tcpin <op> <number>', 'unit: bytes per second'],\n      ['tcpout <op> <number>', 'unit: bytes per second'],\n      ['workload <op> <workloadName>'],\n      ['circuitbreaker'],\n      ['faultinjection'],\n      ['healthy', 'is not degraded or failing.'],\n      ['idle', `will auto-enable 'idle nodes' display option`],\n      ['outside', 'is outside of requested namespaces'],\n      ['requestrouting'],\n      ['requesttimeout'],\n      ['sidecar'],\n      ['serviceentry'],\n      ['tcptrafficshifting'],\n      ['trafficshifting'],\n      ['trafficsource', `has only outbound edges`],\n      ['virtualservice'],\n      ['workloadentry']\n    ];\n  };\n\n  private noteColumns = (): ICell[] => {\n    return [{ title: 'Usage Note', transforms: [cellWidth(10) as any], props: { style: { align: 'text-left' } } }];\n  };\n  private noteRows = (): string[][] => {\n    return [\n      ['Press Tab key to autocomplete operands.'],\n      ['OR has precedence over AND.  Parentheses are not supported.'],\n      ['Use OR to combine node and edge criteria.'],\n      ['Use \"<operand> = NaN\" to test for no activity. Use \"!= NaN\" for any activity. (e.g. httpout = NaN)'],\n      [`Unary operands may optionally be prefixed with \"is\" or \"has\". (i.e. \"has mtls\")`],\n      ['The \"name\" operand expands internally to an \"OR\" expression (an \"AND\" when negated).'],\n      ['Abbreviate: ns|namespace, svc|service, se|serviceentry, wl|workload, we|workloadentry, op|operation'],\n      ['Abbreviate: rt|responsetime, sc|sidecar, vs|virtualservice'],\n      ['Abbreviate: cb|circuitbreaker, fi|faultinjection, rr|requestrouting, rto|requesttimeout, ts|trafficshifting'],\n      ['Hiding nodes will automatically hide connected edges.'],\n      ['Hiding edges will automatically hide nodes left with no visible edges.'],\n      ['Hiding \"healthy\" nodes may still leave valid, healthy edges in the graph.']\n    ];\n  };\n\n  private operatorColumns = (): ICell[] => {\n    return [{ title: 'Operator' }, { title: 'Description' }];\n  };\n  private operatorRows = (): string[][] => {\n    return [\n      ['! | not <unary expression>', `negation`],\n      ['=', `equals`],\n      ['!=', `not equals`],\n      ['endswith | $=', `ends with, strings only`],\n      ['!endswith | !$=', `not ends with, strings only`],\n      ['startswith | ^=', `starts with, strings only`],\n      ['!startswith | !^=', `not starts with, strings only`],\n      ['contains | *=', 'contains, strings only'],\n      ['!contains | !*=', 'not contains, strings only'],\n      ['>', `greater than`],\n      ['>=', `greater than or equals`],\n      ['<', `less than`],\n      ['<=', `less than or equals`]\n    ];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
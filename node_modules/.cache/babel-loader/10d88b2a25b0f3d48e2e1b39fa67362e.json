{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelNamespaceBox.tsx\";\nimport * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { NodeType, TrafficRate, Protocol, UNKNOWN } from '../../types/Graph';\nimport { getAccumulatedTrafficRateGrpc, getAccumulatedTrafficRateHttp, getAccumulatedTrafficRateTcp } from '../../utils/TrafficRate';\nimport * as API from '../../services/Api';\nimport { shouldRefreshData, getFirstDatapoints, summaryFont, summaryHeader, summaryBodyTabs, hr, getDatapoints } from './SummaryPanelCommon';\nimport { makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { CyNode } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport ValidationSummary from 'components/Validations/ValidationSummary';\nimport ValidationSummaryLink from '../../components/Link/ValidationSummaryLink';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nvar defaultMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nvar defaultState = _objectSpread({\n  loading: false,\n  metricsLoadError: null,\n  namespaceBox: null,\n  validation: undefined\n}, defaultMetricsState);\n\nvar topologyStyle = style({\n  margin: '0 1em'\n});\n\nvar SummaryPanelNamespaceBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelNamespaceBox, _React$Component);\n\n  var _super = _createSuper(SummaryPanelNamespaceBox);\n\n  function SummaryPanelNamespaceBox(_props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelNamespaceBox);\n\n    _this = _super.call(this, _props);\n    _this.boxTraffic = void 0;\n    _this.metricsPromise = void 0;\n    _this.validationPromise = void 0;\n\n    _this.getBoxTraffic = function () {\n      var namespaceBox = _this.props.data.summaryTarget;\n      var boxed = namespaceBox.descendants();\n      var namespace = namespaceBox.data(CyNode.namespace);\n      var cluster = namespaceBox.data(CyNode.cluster); // inbound edges are from a different namespace or a different cluster\n\n      var inboundEdges = namespaceBox.cy().nodes(\"[\".concat(CyNode.namespace, \" != \\\"\").concat(namespace, \"\\\"],[\").concat(CyNode.cluster, \" != \\\"\").concat(cluster, \"\\\"]\")).edgesTo(boxed); // outbound edges are to a different namespace or a different cluster\n\n      var outboundEdges = boxed.edgesTo(\"[\".concat(CyNode.namespace, \" != \\\"\").concat(namespace, \"\\\"],[\").concat(CyNode.cluster, \" != \\\"\").concat(cluster, \"\\\"]\")); // total edges are inbound + edges from boxed workload|app|root nodes (i.e. not injected service nodes or box nodes)\n\n      var totalEdges = inboundEdges.add(boxed.filter(\"[?\".concat(CyNode.workload, \"]\")).edgesTo('*'));\n      return {\n        grpcIn: getAccumulatedTrafficRateGrpc(inboundEdges),\n        grpcOut: getAccumulatedTrafficRateGrpc(outboundEdges),\n        grpcTotal: getAccumulatedTrafficRateGrpc(totalEdges),\n        httpIn: getAccumulatedTrafficRateHttp(inboundEdges),\n        httpOut: getAccumulatedTrafficRateHttp(outboundEdges),\n        httpTotal: getAccumulatedTrafficRateHttp(totalEdges),\n        isGrpcRequests: _this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST),\n        tcpIn: getAccumulatedTrafficRateTcp(inboundEdges),\n        tcpOut: getAccumulatedTrafficRateTcp(outboundEdges),\n        tcpTotal: getAccumulatedTrafficRateTcp(totalEdges)\n      };\n    };\n\n    _this.countApps = function (boxed) {\n      var appVersions = {};\n      boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.APP, \"\\\"]\")).forEach(function (node) {\n        var app = node.data(CyNode.app);\n\n        if (appVersions[app] === undefined) {\n          appVersions[app] = new Set();\n        }\n\n        appVersions[app].add(node.data(CyNode.version));\n      });\n      return {\n        numApps: Object.getOwnPropertyNames(appVersions).length,\n        numVersions: Object.getOwnPropertyNames(appVersions).reduce(function (totalCount, version) {\n          return totalCount + appVersions[version].size;\n        }, 0)\n      };\n    };\n\n    _this.renderNamespace = function (ns) {\n      var validation = _this.state.validation;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: ns,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: PFBadges.Namespace,\n        style: {\n          marginBottom: '2px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }\n      }), ns, ' ', !!validation && /*#__PURE__*/React.createElement(ValidationSummaryLink, {\n        namespace: ns,\n        objectCount: validation.objectCount,\n        errors: validation.errors,\n        warnings: validation.warnings,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ValidationSummary, {\n        id: 'ns-val-' + ns,\n        errors: validation.errors,\n        warnings: validation.warnings,\n        objectCount: validation.objectCount,\n        style: {\n          marginLeft: '5px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderTopologySummary = function (numSvc, numWorkloads, numApps, numVersions, numEdges) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, numApps > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Applications, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }\n      }), numApps.toString(), \" \", numApps === 1 ? 'app ' : 'apps ', numVersions > 0 && \"(\".concat(numVersions, \" versions)\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }\n      })), numSvc > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Services, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }\n      }), numSvc.toString(), \" \", numSvc === 1 ? 'service' : 'services', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }\n      })), numWorkloads > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Workloads, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }\n      }), numWorkloads.toString(), \" \", numWorkloads === 1 ? 'workload' : 'workloads', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }\n      })), numEdges > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Topology, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }\n      }), numEdges.toString(), \" \", numEdges === 1 ? 'edge' : 'edges'));\n    };\n\n    _this.renderCharts = function () {\n      var props = _this.props;\n      var namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n      if (_this.state.loading) {\n        return /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 14\n          }\n        }, \"Loading chart...\");\n      } else if (_this.state.metricsLoadError) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 11\n          }\n        }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 33\n          }\n        }, \"Error loading metrics: \"), _this.state.metricsLoadError);\n      } else if (namespace === UNKNOWN) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n      } // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n      // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n      // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n      // includes traffic within the namespace.\n\n\n      var _ref = _this.boxTraffic,\n          grpcTotal = _ref.grpcTotal,\n          httpTotal = _ref.httpTotal,\n          isGrpcRequests = _ref.isGrpcRequests,\n          tcpTotal = _ref.tcpTotal;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, grpcTotal.rate > 0 && isGrpcRequests && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"gRPC - Inbound Request Traffic\",\n        dataRps: _this.state.grpcRequestIn,\n        dataErrors: _this.state.grpcRequestErrIn,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"gRPC - Outbound Request Traffic\",\n        dataRps: _this.state.grpcRequestOut,\n        dataErrors: _this.state.grpcRequestErrOut,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }\n      })), grpcTotal.rate > 0 && !isGrpcRequests && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"gRPC - Inbound Traffic\",\n        receivedRates: _this.state.grpcReceivedIn,\n        sentRates: _this.state.grpcSentIn,\n        unit: \"messages\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"gRPC - Outbound Traffic\",\n        receivedRates: _this.state.grpcReceivedOut,\n        sentRates: _this.state.grpcSentOut,\n        unit: \"messages\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }\n      })), httpTotal.rate > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"HTTP - Inbound Request Traffic\",\n        dataRps: _this.state.httpRequestIn,\n        dataErrors: _this.state.httpRequestErrIn,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"HTTP - Outbound Request Traffic\",\n        dataRps: _this.state.httpRequestOut,\n        dataErrors: _this.state.httpRequestErrOut,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }\n      })), tcpTotal.rate > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"TCP - Inbound Traffic\",\n        receivedRates: _this.state.tcpReceivedIn,\n        sentRates: _this.state.tcpSentIn,\n        unit: \"bytes\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"TCP - Outbound Traffic\",\n        receivedRates: _this.state.tcpReceivedOut,\n        sentRates: _this.state.tcpSentOut,\n        unit: \"bytes\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }\n      })));\n    };\n\n    _this.updateCharts = function () {\n      var props = _this.props;\n      var namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n      if (namespace === UNKNOWN) {\n        _this.setState({\n          loading: false\n        });\n\n        return;\n      } // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n      // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n      // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n      // includes traffic within the namespace.\n\n\n      var _ref2 = _this.boxTraffic,\n          grpcTotal = _ref2.grpcTotal,\n          httpTotal = _ref2.httpTotal,\n          isGrpcRequests = _ref2.isGrpcRequests,\n          tcpTotal = _ref2.tcpTotal;\n\n      if (_this.metricsPromise) {\n        _this.metricsPromise.cancel();\n\n        _this.metricsPromise = undefined;\n      }\n\n      var promiseIn = Promise.resolve({\n        data: {}\n      });\n      var promiseOut = Promise.resolve({\n        data: {}\n      });\n      var filters = [];\n\n      if (grpcTotal.rate > 0 && !isGrpcRequests) {\n        filters.push('grpc_sent', 'grpc_received');\n      }\n\n      if (httpTotal.rate > 0 || grpcTotal.rate > 0 && isGrpcRequests) {\n        filters.push('request_count', 'request_error_count');\n      }\n\n      if (tcpTotal.rate > 0) {\n        filters.push('tcp_sent', 'tcp_received');\n      }\n\n      if (filters.length > 0) {\n        promiseIn = API.getNamespaceMetrics(namespace, {\n          byLabels: ['request_protocol'],\n          // ignored by prom if it doesn't exist\n          direction: 'inbound',\n          duration: props.duration,\n          filters: filters,\n          queryTime: props.queryTime,\n          rateInterval: props.rateInterval,\n          reporter: 'destination',\n          step: props.step\n        });\n        promiseOut = API.getNamespaceMetrics(namespace, {\n          byLabels: ['request_protocol'],\n          // ignored by prom if it doesn't exist\n          direction: 'outbound',\n          duration: props.duration,\n          filters: filters,\n          queryTime: props.queryTime,\n          rateInterval: props.rateInterval,\n          reporter: 'source',\n          step: props.step\n        });\n      }\n\n      _this.metricsPromise = makeCancelablePromise(Promise.all([promiseIn, promiseOut]));\n\n      _this.metricsPromise.promise.then(function (responses) {\n        var comparator = function comparator(labels, protocol) {\n          return protocol ? labels.request_protocol === protocol : true;\n        };\n\n        var metricsIn = responses[0].data;\n        var metricsOut = responses[1].data;\n\n        _this.setState({\n          loading: false,\n          grpcReceivedIn: getFirstDatapoints(metricsIn.grpc_received),\n          grpcReceivedOut: getFirstDatapoints(metricsOut.grpc_received),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcSentIn: getFirstDatapoints(metricsIn.grpc_sent),\n          grpcSentOut: getFirstDatapoints(metricsOut.grpc_sent),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          tcpReceivedIn: getFirstDatapoints(metricsIn.tcp_received),\n          tcpReceivedOut: getFirstDatapoints(metricsOut.tcp_received),\n          tcpSentIn: getFirstDatapoints(metricsIn.tcp_sent),\n          tcpSentOut: getFirstDatapoints(metricsOut.tcp_sent)\n        });\n      }).catch(function (error) {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelGraph: Ignore fetch error (canceled).');\n          return;\n        }\n\n        var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n\n        _this.setState(_objectSpread({\n          loading: false,\n          metricsLoadError: errorMsg\n        }, defaultMetricsState));\n      });\n\n      _this.setState({\n        loading: true,\n        metricsLoadError: null\n      });\n    };\n\n    _this.updateValidation = function () {\n      var namespace = _this.props.data.summaryTarget.data(CyNode.namespace);\n\n      _this.validationPromise = makeCancelablePromise(API.getNamespaceValidations(namespace));\n\n      _this.validationPromise.promise.then(function (rs) {\n        _this.setState({\n          validation: rs.data\n        });\n      }).catch(function (err) {\n        if (!err.isCanceled) {\n          console.log(\"SummaryPanelNamespaceBox: Error fetching validation status: \".concat(API.getErrorString(err)));\n        }\n      });\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    return _this;\n  }\n\n  _createClass(SummaryPanelNamespaceBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.boxTraffic = this.getBoxTraffic();\n      this.updateCharts();\n      this.updateValidation();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (shouldRefreshData(prevProps, this.props)) {\n        this.boxTraffic = this.getBoxTraffic();\n        this.updateCharts();\n        this.updateValidation();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.metricsPromise) {\n        this.metricsPromise.cancel();\n      }\n\n      if (this.validationPromise) {\n        this.validationPromise.cancel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var namespaceBox = this.props.data.summaryTarget;\n      var boxed = namespaceBox.descendants();\n      var namespace = namespaceBox.data(CyNode.namespace);\n      var numSvc = boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.SERVICE, \"\\\"]\")).size();\n      var numWorkloads = boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.WORKLOAD, \"\\\"]\")).size();\n\n      var _this$countApps = this.countApps(boxed),\n          numApps = _this$countApps.numApps,\n          numVersions = _this$countApps.numVersions;\n\n      var numEdges = boxed.connectedEdges().size();\n\n      var _ref3 = this.boxTraffic || this.getBoxTraffic(),\n          grpcIn = _ref3.grpcIn,\n          grpcOut = _ref3.grpcOut,\n          grpcTotal = _ref3.grpcTotal,\n          httpIn = _ref3.httpIn,\n          httpOut = _ref3.httpOut,\n          httpTotal = _ref3.httpTotal,\n          isGrpcRequests = _ref3.isGrpcRequests,\n          tcpIn = _ref3.tcpIn,\n          tcpOut = _ref3.tcpOut,\n          tcpTotal = _ref3.tcpTotal;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel panel-default\",\n        style: SummaryPanelNamespaceBox.panelStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-heading\",\n        style: summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      }, this.renderNamespace(namespace), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }), this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)), /*#__PURE__*/React.createElement(\"div\", {\n        className: summaryBodyTabs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SimpleTabs, {\n        id: \"graph_summary_tabs\",\n        defaultTab: 0,\n        style: {\n          paddingBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Inbound\",\n        eventKey: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }\n      }, grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }\n      }), \" No inbound traffic.\"), grpcIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcIn.rate,\n        rateGrpcErr: grpcIn.rateGrpcErr,\n        rateNR: grpcIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 19\n        }\n      }), httpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpIn.rate,\n        rate3xx: httpIn.rate3xx,\n        rate4xx: httpIn.rate4xx,\n        rate5xx: httpIn.rate5xx,\n        rateNR: httpIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 19\n        }\n      }), tcpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpIn.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 36\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Outbound\",\n        eventKey: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }\n      }, grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }), \" No outbound traffic.\"), grpcOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcOut.rate,\n        rateGrpcErr: grpcOut.rateGrpcErr,\n        rateNR: grpcOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 19\n        }\n      }), httpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpOut.rate,\n        rate3xx: httpOut.rate3xx,\n        rate4xx: httpOut.rate4xx,\n        rate5xx: httpOut.rate5xx,\n        rateNR: httpOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 19\n        }\n      }), tcpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpOut.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Total\",\n        eventKey: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      }, grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }\n      }), \" No traffic.\"), grpcTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcTotal.rate,\n        rateGrpcErr: grpcTotal.rateGrpcErr,\n        rateNR: grpcTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 19\n        }\n      }), httpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpTotal.rate,\n        rate3xx: httpTotal.rate3xx,\n        rate4xx: httpTotal.rate4xx,\n        rate5xx: httpTotal.rate5xx,\n        rateNR: httpTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 19\n        }\n      }), tcpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpTotal.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 39\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }\n      }, hr(), this.renderCharts()))))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // if the summaryTarget (i.e. namespaceBox) has changed, then init the state and set to loading. The loading\n      // will actually be kicked off after the render (in componentDidMount/Update).\n      return props.data.summaryTarget !== state.namespaceBox ? _objectSpread({\n        namespaceBox: props.data.summaryTarget,\n        loading: true\n      }, defaultMetricsState) : null;\n    }\n  }]);\n\n  return SummaryPanelNamespaceBox;\n}(React.Component);\n\nSummaryPanelNamespaceBox.panelStyle = {\n  height: '100%',\n  margin: 0,\n  minWidth: '25em',\n  overflowY: 'auto',\n  backgroundColor: PFColors.White,\n  width: '25em'\n};\nexport { SummaryPanelNamespaceBox as default };","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelNamespaceBox.tsx"],"names":["React","Tab","style","RateTableGrpc","RateTableHttp","RateTableTcp","RequestChart","StreamChart","NodeType","TrafficRate","Protocol","UNKNOWN","getAccumulatedTrafficRateGrpc","getAccumulatedTrafficRateHttp","getAccumulatedTrafficRateTcp","API","shouldRefreshData","getFirstDatapoints","summaryFont","summaryHeader","summaryBodyTabs","hr","getDatapoints","makeCancelablePromise","CyNode","KialiIcon","SimpleTabs","PFColors","ValidationSummary","ValidationSummaryLink","PFBadge","PFBadges","defaultMetricsState","grpcRequestIn","grpcRequestOut","grpcRequestErrIn","grpcRequestErrOut","grpcSentIn","grpcSentOut","grpcReceivedIn","grpcReceivedOut","httpRequestIn","httpRequestOut","httpRequestErrIn","httpRequestErrOut","tcpSentIn","tcpSentOut","tcpReceivedIn","tcpReceivedOut","defaultState","loading","metricsLoadError","namespaceBox","validation","undefined","topologyStyle","margin","SummaryPanelNamespaceBox","props","boxTraffic","metricsPromise","validationPromise","getBoxTraffic","data","summaryTarget","boxed","descendants","namespace","cluster","inboundEdges","cy","nodes","edgesTo","outboundEdges","totalEdges","add","filter","workload","grpcIn","grpcOut","grpcTotal","httpIn","httpOut","httpTotal","isGrpcRequests","trafficRates","includes","GRPC_REQUEST","tcpIn","tcpOut","tcpTotal","countApps","appVersions","APP","forEach","node","app","Set","version","numApps","Object","getOwnPropertyNames","length","numVersions","reduce","totalCount","size","renderNamespace","ns","state","Namespace","marginBottom","objectCount","errors","warnings","marginLeft","renderTopologySummary","numSvc","numWorkloads","numEdges","toString","renderCharts","rate","updateCharts","setState","cancel","promiseIn","Promise","resolve","promiseOut","filters","push","getNamespaceMetrics","byLabels","direction","duration","queryTime","rateInterval","reporter","step","all","promise","then","responses","comparator","labels","protocol","request_protocol","metricsIn","metricsOut","grpc_received","request_count","GRPC","request_error_count","grpc_sent","HTTP","tcp_received","tcp_sent","catch","error","isCanceled","console","debug","errorMsg","response","message","updateValidation","getNamespaceValidations","rs","err","log","getErrorString","prevProps","SERVICE","WORKLOAD","connectedEdges","panelStyle","paddingBottom","rateGrpcErr","rateNoResponse","rate3xx","rate4xx","rate5xx","Component","height","minWidth","overflowY","backgroundColor","White","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { SummaryPanelPropType, NodeType, TrafficRate, Protocol, UNKNOWN } from '../../types/Graph';\nimport {\n  getAccumulatedTrafficRateGrpc,\n  getAccumulatedTrafficRateHttp,\n  getAccumulatedTrafficRateTcp,\n  TrafficRateGrpc,\n  TrafficRateHttp,\n  TrafficRateTcp\n} from '../../utils/TrafficRate';\nimport * as API from '../../services/Api';\nimport {\n  shouldRefreshData,\n  getFirstDatapoints,\n  summaryFont,\n  summaryHeader,\n  summaryBodyTabs,\n  hr,\n  getDatapoints\n} from './SummaryPanelCommon';\nimport { Response } from '../../services/Api';\nimport { IstioMetricsMap, Datapoint, Labels } from '../../types/Metrics';\nimport { IstioMetricsOptions } from '../../types/MetricsOptions';\nimport { CancelablePromise, makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { CyNode } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { ValidationStatus } from 'types/IstioObjects';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport ValidationSummary from 'components/Validations/ValidationSummary';\nimport ValidationSummaryLink from '../../components/Link/ValidationSummaryLink';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\n\ntype SummaryPanelNamespaceBoxMetricsState = {\n  grpcRequestIn: Datapoint[];\n  grpcRequestOut: Datapoint[];\n  grpcRequestErrIn: Datapoint[];\n  grpcRequestErrOut: Datapoint[];\n  grpcSentIn: Datapoint[];\n  grpcSentOut: Datapoint[];\n  grpcReceivedIn: Datapoint[];\n  grpcReceivedOut: Datapoint[];\n  httpRequestIn: Datapoint[];\n  httpRequestOut: Datapoint[];\n  httpRequestErrIn: Datapoint[];\n  httpRequestErrOut: Datapoint[];\n  tcpSentIn: Datapoint[];\n  tcpSentOut: Datapoint[];\n  tcpReceivedIn: Datapoint[];\n  tcpReceivedOut: Datapoint[];\n};\n\ntype SummaryPanelNamespaceBoxState = SummaryPanelNamespaceBoxMetricsState & {\n  loading: boolean;\n  metricsLoadError: string | null;\n  namespaceBox: any;\n  validation: ValidationStatus | undefined;\n};\n\ntype SummaryPanelNamespaceBoxTraffic = {\n  grpcIn: TrafficRateGrpc;\n  grpcOut: TrafficRateGrpc;\n  grpcTotal: TrafficRateGrpc;\n  httpIn: TrafficRateHttp;\n  httpOut: TrafficRateHttp;\n  httpTotal: TrafficRateHttp;\n  isGrpcRequests: boolean;\n  tcpIn: TrafficRateTcp;\n  tcpOut: TrafficRateTcp;\n  tcpTotal: TrafficRateTcp;\n};\n\nconst defaultMetricsState: SummaryPanelNamespaceBoxMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nconst defaultState: SummaryPanelNamespaceBoxState = {\n  loading: false,\n  metricsLoadError: null,\n  namespaceBox: null,\n  validation: undefined,\n  ...defaultMetricsState\n};\n\nconst topologyStyle = style({\n  margin: '0 1em'\n});\n\nexport default class SummaryPanelNamespaceBox extends React.Component<\n  SummaryPanelPropType,\n  SummaryPanelNamespaceBoxState\n> {\n  static readonly panelStyle = {\n    height: '100%',\n    margin: 0,\n    minWidth: '25em',\n    overflowY: 'auto' as 'auto',\n    backgroundColor: PFColors.White,\n    width: '25em'\n  };\n\n  private boxTraffic?: SummaryPanelNamespaceBoxTraffic;\n  private metricsPromise?: CancelablePromise<Response<IstioMetricsMap>[]>;\n  private validationPromise?: CancelablePromise<Response<ValidationStatus>>;\n\n  constructor(props: SummaryPanelPropType) {\n    super(props);\n\n    this.state = { ...defaultState };\n  }\n\n  static getDerivedStateFromProps(props: SummaryPanelPropType, state: SummaryPanelNamespaceBoxState) {\n    // if the summaryTarget (i.e. namespaceBox) has changed, then init the state and set to loading. The loading\n    // will actually be kicked off after the render (in componentDidMount/Update).\n    return props.data.summaryTarget !== state.namespaceBox\n      ? { namespaceBox: props.data.summaryTarget, loading: true, ...defaultMetricsState }\n      : null;\n  }\n\n  componentDidMount() {\n    this.boxTraffic = this.getBoxTraffic();\n    this.updateCharts();\n    this.updateValidation();\n  }\n\n  componentDidUpdate(prevProps: SummaryPanelPropType) {\n    if (shouldRefreshData(prevProps, this.props)) {\n      this.boxTraffic = this.getBoxTraffic();\n      this.updateCharts();\n      this.updateValidation();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n    }\n    if (this.validationPromise) {\n      this.validationPromise.cancel();\n    }\n  }\n\n  render() {\n    const namespaceBox = this.props.data.summaryTarget;\n    const boxed = namespaceBox.descendants();\n    const namespace = namespaceBox.data(CyNode.namespace);\n\n    const numSvc = boxed.filter(`node[nodeType = \"${NodeType.SERVICE}\"]`).size();\n    const numWorkloads = boxed.filter(`node[nodeType = \"${NodeType.WORKLOAD}\"]`).size();\n    const { numApps, numVersions } = this.countApps(boxed);\n    const numEdges = boxed.connectedEdges().size();\n\n    const { grpcIn, grpcOut, grpcTotal, httpIn, httpOut, httpTotal, isGrpcRequests, tcpIn, tcpOut, tcpTotal } =\n      this.boxTraffic || this.getBoxTraffic();\n\n    return (\n      <div className=\"panel panel-default\" style={SummaryPanelNamespaceBox.panelStyle}>\n        <div className=\"panel-heading\" style={summaryHeader}>\n          {this.renderNamespace(namespace)}\n          <br />\n          {this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)}\n        </div>\n        <div className={summaryBodyTabs}>\n          <SimpleTabs id=\"graph_summary_tabs\" defaultTab={0} style={{ paddingBottom: '10px' }}>\n            <Tab style={summaryFont} title=\"Inbound\" eventKey={0}>\n              <div style={summaryFont}>\n                {grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No inbound traffic.\n                  </>\n                )}\n                {grpcIn.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcIn.rate}\n                    rateGrpcErr={grpcIn.rateGrpcErr}\n                    rateNR={grpcIn.rateNoResponse}\n                  />\n                )}\n                {httpIn.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpIn.rate}\n                    rate3xx={httpIn.rate3xx}\n                    rate4xx={httpIn.rate4xx}\n                    rate5xx={httpIn.rate5xx}\n                    rateNR={httpIn.rateNoResponse}\n                  />\n                )}\n                {tcpIn.rate > 0 && <RateTableTcp rate={tcpIn.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Outbound\" eventKey={1}>\n              <div style={summaryFont}>\n                {grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No outbound traffic.\n                  </>\n                )}\n                {grpcOut.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcOut.rate}\n                    rateGrpcErr={grpcOut.rateGrpcErr}\n                    rateNR={grpcOut.rateNoResponse}\n                  />\n                )}\n                {httpOut.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpOut.rate}\n                    rate3xx={httpOut.rate3xx}\n                    rate4xx={httpOut.rate4xx}\n                    rate5xx={httpOut.rate5xx}\n                    rateNR={httpOut.rateNoResponse}\n                  />\n                )}\n                {tcpOut.rate > 0 && <RateTableTcp rate={tcpOut.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Total\" eventKey={2}>\n              <div style={summaryFont}>\n                {grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No traffic.\n                  </>\n                )}\n                {grpcTotal.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcTotal.rate}\n                    rateGrpcErr={grpcTotal.rateGrpcErr}\n                    rateNR={grpcTotal.rateNoResponse}\n                  />\n                )}\n                {httpTotal.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpTotal.rate}\n                    rate3xx={httpTotal.rate3xx}\n                    rate4xx={httpTotal.rate4xx}\n                    rate5xx={httpTotal.rate5xx}\n                    rateNR={httpTotal.rateNoResponse}\n                  />\n                )}\n                {tcpTotal.rate > 0 && <RateTableTcp rate={tcpTotal.rate} />}\n                <div>\n                  {hr()}\n                  {this.renderCharts()}\n                </div>\n              </div>\n            </Tab>\n          </SimpleTabs>\n        </div>\n      </div>\n    );\n  }\n\n  private getBoxTraffic = (): SummaryPanelNamespaceBoxTraffic => {\n    const namespaceBox = this.props.data.summaryTarget;\n    const boxed = namespaceBox.descendants();\n    const namespace = namespaceBox.data(CyNode.namespace);\n    const cluster = namespaceBox.data(CyNode.cluster);\n\n    // inbound edges are from a different namespace or a different cluster\n    const inboundEdges = namespaceBox\n      .cy()\n      .nodes(`[${CyNode.namespace} != \"${namespace}\"],[${CyNode.cluster} != \"${cluster}\"]`)\n      .edgesTo(boxed);\n    // outbound edges are to a different namespace or a different cluster\n    const outboundEdges = boxed.edgesTo(`[${CyNode.namespace} != \"${namespace}\"],[${CyNode.cluster} != \"${cluster}\"]`);\n    // total edges are inbound + edges from boxed workload|app|root nodes (i.e. not injected service nodes or box nodes)\n    const totalEdges = inboundEdges.add(boxed.filter(`[?${CyNode.workload}]`).edgesTo('*'));\n\n    return {\n      grpcIn: getAccumulatedTrafficRateGrpc(inboundEdges),\n      grpcOut: getAccumulatedTrafficRateGrpc(outboundEdges),\n      grpcTotal: getAccumulatedTrafficRateGrpc(totalEdges),\n      httpIn: getAccumulatedTrafficRateHttp(inboundEdges),\n      httpOut: getAccumulatedTrafficRateHttp(outboundEdges),\n      httpTotal: getAccumulatedTrafficRateHttp(totalEdges),\n      isGrpcRequests: this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST),\n      tcpIn: getAccumulatedTrafficRateTcp(inboundEdges),\n      tcpOut: getAccumulatedTrafficRateTcp(outboundEdges),\n      tcpTotal: getAccumulatedTrafficRateTcp(totalEdges)\n    };\n  };\n\n  private countApps = (boxed): { numApps: number; numVersions: number } => {\n    const appVersions: { [key: string]: Set<string> } = {};\n\n    boxed.filter(`node[nodeType = \"${NodeType.APP}\"]`).forEach(node => {\n      const app = node.data(CyNode.app);\n      if (appVersions[app] === undefined) {\n        appVersions[app] = new Set();\n      }\n      appVersions[app].add(node.data(CyNode.version));\n    });\n\n    return {\n      numApps: Object.getOwnPropertyNames(appVersions).length,\n      numVersions: Object.getOwnPropertyNames(appVersions).reduce((totalCount: number, version: string) => {\n        return totalCount + appVersions[version].size;\n      }, 0)\n    };\n  };\n\n  private renderNamespace = (ns: string) => {\n    const validation = this.state.validation;\n    return (\n      <React.Fragment key={ns}>\n        <span>\n          <PFBadge badge={PFBadges.Namespace} style={{ marginBottom: '2px' }} />\n          {ns}{' '}\n          {!!validation && (\n            <ValidationSummaryLink\n              namespace={ns}\n              objectCount={validation.objectCount}\n              errors={validation.errors}\n              warnings={validation.warnings}\n            >\n              <ValidationSummary\n                id={'ns-val-' + ns}\n                errors={validation.errors}\n                warnings={validation.warnings}\n                objectCount={validation.objectCount}\n                style={{ marginLeft: '5px' }}\n              />\n            </ValidationSummaryLink>\n          )}\n        </span>\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  private renderTopologySummary = (\n    numSvc: number,\n    numWorkloads: number,\n    numApps: number,\n    numVersions: number,\n    numEdges: number\n  ) => (\n    <>\n      {numApps > 0 && (\n        <>\n          <KialiIcon.Applications className={topologyStyle} />\n          {numApps.toString()} {numApps === 1 ? 'app ' : 'apps '}\n          {numVersions > 0 && `(${numVersions} versions)`}\n          <br />\n        </>\n      )}\n      {numSvc > 0 && (\n        <>\n          <KialiIcon.Services className={topologyStyle} />\n          {numSvc.toString()} {numSvc === 1 ? 'service' : 'services'}\n          <br />\n        </>\n      )}\n      {numWorkloads > 0 && (\n        <>\n          <KialiIcon.Workloads className={topologyStyle} />\n          {numWorkloads.toString()} {numWorkloads === 1 ? 'workload' : 'workloads'}\n          <br />\n        </>\n      )}\n      {numEdges > 0 && (\n        <>\n          <KialiIcon.Topology className={topologyStyle} />\n          {numEdges.toString()} {numEdges === 1 ? 'edge' : 'edges'}\n        </>\n      )}\n    </>\n  );\n\n  private renderCharts = () => {\n    const props: SummaryPanelPropType = this.props;\n    const namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n    if (this.state.loading) {\n      return <strong>Loading chart...</strong>;\n    } else if (this.state.metricsLoadError) {\n      return (\n        <div>\n          <KialiIcon.Warning /> <strong>Error loading metrics: </strong>\n          {this.state.metricsLoadError}\n        </div>\n      );\n    } else if (namespace === UNKNOWN) {\n      return <></>;\n    }\n\n    // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n    // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n    // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n    // includes traffic within the namespace.\n    const { grpcTotal, httpTotal, isGrpcRequests, tcpTotal } = this.boxTraffic!;\n\n    return (\n      <>\n        {grpcTotal.rate > 0 && isGrpcRequests && (\n          <>\n            <RequestChart\n              label=\"gRPC - Inbound Request Traffic\"\n              dataRps={this.state.grpcRequestIn}\n              dataErrors={this.state.grpcRequestErrIn}\n            />\n            <RequestChart\n              label=\"gRPC - Outbound Request Traffic\"\n              dataRps={this.state.grpcRequestOut}\n              dataErrors={this.state.grpcRequestErrOut}\n            />\n          </>\n        )}\n        {grpcTotal.rate > 0 && !isGrpcRequests && (\n          <>\n            <StreamChart\n              label=\"gRPC - Inbound Traffic\"\n              receivedRates={this.state.grpcReceivedIn}\n              sentRates={this.state.grpcSentIn}\n              unit=\"messages\"\n            />\n            <StreamChart\n              label=\"gRPC - Outbound Traffic\"\n              receivedRates={this.state.grpcReceivedOut}\n              sentRates={this.state.grpcSentOut}\n              unit=\"messages\"\n            />\n          </>\n        )}\n        {httpTotal.rate > 0 && (\n          <>\n            <RequestChart\n              label=\"HTTP - Inbound Request Traffic\"\n              dataRps={this.state.httpRequestIn}\n              dataErrors={this.state.httpRequestErrIn}\n            />\n            <RequestChart\n              label=\"HTTP - Outbound Request Traffic\"\n              dataRps={this.state.httpRequestOut}\n              dataErrors={this.state.httpRequestErrOut}\n            />\n          </>\n        )}\n        {tcpTotal.rate > 0 && (\n          <>\n            <StreamChart\n              label=\"TCP - Inbound Traffic\"\n              receivedRates={this.state.tcpReceivedIn}\n              sentRates={this.state.tcpSentIn}\n              unit=\"bytes\"\n            />\n            <StreamChart\n              label=\"TCP - Outbound Traffic\"\n              receivedRates={this.state.tcpReceivedOut}\n              sentRates={this.state.tcpSentOut}\n              unit=\"bytes\"\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  private updateCharts = () => {\n    const props: SummaryPanelPropType = this.props;\n    const namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n    if (namespace === UNKNOWN) {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n    // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n    // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n    // includes traffic within the namespace.\n    const { grpcTotal, httpTotal, isGrpcRequests, tcpTotal } = this.boxTraffic!;\n\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n      this.metricsPromise = undefined;\n    }\n\n    let promiseIn: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n    let promiseOut: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n\n    let filters: string[] = [];\n    if (grpcTotal.rate > 0 && !isGrpcRequests) {\n      filters.push('grpc_sent', 'grpc_received');\n    }\n    if (httpTotal.rate > 0 || (grpcTotal.rate > 0 && isGrpcRequests)) {\n      filters.push('request_count', 'request_error_count');\n    }\n    if (tcpTotal.rate > 0) {\n      filters.push('tcp_sent', 'tcp_received');\n    }\n\n    if (filters.length > 0) {\n      promiseIn = API.getNamespaceMetrics(namespace, {\n        byLabels: ['request_protocol'], // ignored by prom if it doesn't exist\n        direction: 'inbound',\n        duration: props.duration,\n        filters: filters,\n        queryTime: props.queryTime,\n        rateInterval: props.rateInterval,\n        reporter: 'destination',\n        step: props.step\n      } as IstioMetricsOptions);\n      promiseOut = API.getNamespaceMetrics(namespace, {\n        byLabels: ['request_protocol'], // ignored by prom if it doesn't exist\n        direction: 'outbound',\n        duration: props.duration,\n        filters: filters,\n        queryTime: props.queryTime,\n        rateInterval: props.rateInterval,\n        reporter: 'source',\n        step: props.step\n      } as IstioMetricsOptions);\n    }\n\n    this.metricsPromise = makeCancelablePromise(Promise.all([promiseIn, promiseOut]));\n\n    this.metricsPromise.promise\n      .then(responses => {\n        const comparator = (labels: Labels, protocol?: Protocol) => {\n          return protocol ? labels.request_protocol === protocol : true;\n        };\n        const metricsIn = responses[0].data;\n        const metricsOut = responses[1].data;\n\n        this.setState({\n          loading: false,\n          grpcReceivedIn: getFirstDatapoints(metricsIn.grpc_received),\n          grpcReceivedOut: getFirstDatapoints(metricsOut.grpc_received),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcSentIn: getFirstDatapoints(metricsIn.grpc_sent),\n          grpcSentOut: getFirstDatapoints(metricsOut.grpc_sent),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          tcpReceivedIn: getFirstDatapoints(metricsIn.tcp_received),\n          tcpReceivedOut: getFirstDatapoints(metricsOut.tcp_received),\n          tcpSentIn: getFirstDatapoints(metricsIn.tcp_sent),\n          tcpSentOut: getFirstDatapoints(metricsOut.tcp_sent)\n        });\n      })\n      .catch(error => {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelGraph: Ignore fetch error (canceled).');\n          return;\n        }\n        const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        this.setState({\n          loading: false,\n          metricsLoadError: errorMsg,\n          ...defaultMetricsState\n        });\n      });\n\n    this.setState({ loading: true, metricsLoadError: null });\n  };\n\n  private updateValidation = () => {\n    const namespace = this.props.data.summaryTarget.data(CyNode.namespace);\n    this.validationPromise = makeCancelablePromise(API.getNamespaceValidations(namespace));\n    this.validationPromise.promise\n      .then(rs => {\n        this.setState({ validation: rs.data });\n      })\n      .catch(err => {\n        if (!err.isCanceled) {\n          console.log(`SummaryPanelNamespaceBox: Error fetching validation status: ${API.getErrorString(err)}`);\n        }\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
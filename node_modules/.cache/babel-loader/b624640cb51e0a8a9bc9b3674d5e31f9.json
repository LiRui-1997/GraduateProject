{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SummaryTableRenderer } from './BaseTable';\nimport { sortable, SortByDirection } from '@patternfly/react-table';\nimport { ClusterSummary } from '../../../types/IstioObjects';\nimport { ActiveFilter, FILTER_ACTION_APPEND, FilterTypes } from '../../../types/Filters';\nimport { defaultFilter, istioConfigLink, serviceLink } from '../../../helpers/EnvoyHelpers';\nexport var ClusterTable = /*#__PURE__*/function () {\n  function ClusterTable(summaries, sortBy, namespaces, namespace) {\n    var _this = this;\n\n    _classCallCheck(this, ClusterTable);\n\n    this.summaries = void 0;\n    this.sortingIndex = void 0;\n    this.sortingDirection = void 0;\n    this.namespaces = void 0;\n    this.namespace = void 0;\n\n    this.availableFilters = function () {\n      return [{\n        id: 'fqdn',\n        title: 'FQDN',\n        placeholder: 'FQDN',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      }, {\n        id: 'port',\n        title: 'Port',\n        placeholder: 'Port',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      }, {\n        id: 'subset',\n        title: 'Subset',\n        placeholder: 'Subset',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      }, {\n        id: 'direction',\n        title: 'Direction',\n        placeholder: 'Direction',\n        filterType: FilterTypes.select,\n        action: FILTER_ACTION_APPEND,\n        filterValues: [{\n          id: 'inbound',\n          title: 'inbound'\n        }, {\n          id: 'outbound',\n          title: 'outbound'\n        }]\n      }];\n    };\n\n    this.filterMethods = function () {\n      return {\n        fqdn: function fqdn(entry, filter) {\n          return [entry.service_fqdn.service, entry.service_fqdn.namespace, entry.service_fqdn.cluster].join('.').includes(filter.value);\n        },\n        port: function port(entry, filter) {\n          return entry.port.toString().includes(filter.value);\n        },\n        subset: function subset(entry, filter) {\n          return entry.subset.toString().includes(filter.value);\n        },\n        direction: function direction(entry, filter) {\n          return entry.direction.toString().includes(filter.value);\n        }\n      };\n    };\n\n    this.sortFields = function () {\n      return [{\n        id: 'fqdn',\n        title: 'FQDN',\n        isNumeric: false,\n        param: 'fqdn',\n        compare: function compare(a, b) {\n          return [a.service_fqdn.service, a.service_fqdn.namespace, a.service_fqdn.cluster].join('.').localeCompare([b.service_fqdn.service, b.service_fqdn.namespace, b.service_fqdn.cluster].join('.'));\n        }\n      }, {\n        id: 'port',\n        title: 'Port',\n        isNumeric: true,\n        param: 'port',\n        compare: function compare(a, b) {\n          return a.port - b.port;\n        }\n      }, {\n        id: 'subset',\n        title: 'Subset',\n        isNumeric: false,\n        param: 'subset',\n        compare: function compare(a, b) {\n          return a.subset.localeCompare(b.subset);\n        }\n      }, {\n        id: 'direction',\n        title: 'Direction',\n        isNumeric: false,\n        param: 'direction',\n        compare: function compare(a, b) {\n          return a.direction.localeCompare(b.direction);\n        }\n      }, {\n        id: 'type',\n        title: 'Type',\n        isNumeric: true,\n        param: 'type',\n        compare: function compare(a, b) {\n          return a.type - b.type;\n        }\n      }, {\n        id: 'dr',\n        title: 'Destination Rule',\n        isNumeric: true,\n        param: 'dr',\n        compare: function compare(a, b) {\n          return a.destination_rule.localeCompare(b.destination_rule);\n        }\n      }];\n    };\n\n    this.head = function () {\n      return [{\n        title: 'Service FQDN',\n        transforms: [sortable]\n      }, {\n        title: 'Port',\n        transforms: [sortable]\n      }, {\n        title: 'Subset',\n        transforms: [sortable]\n      }, {\n        title: 'Direction',\n        transforms: [sortable]\n      }, {\n        title: 'Type',\n        transforms: [sortable]\n      }, {\n        title: 'DestinationRule',\n        transforms: [sortable]\n      }];\n    };\n\n    this.resource = function () {\n      return 'clusters';\n    };\n\n    this.setSorting = function (columnIndex, direction) {\n      _this.sortingIndex = columnIndex;\n      _this.sortingDirection = direction;\n    };\n\n    this.sortBy = function () {\n      return {\n        index: _this.sortingIndex,\n        direction: _this.sortingDirection || 'asc'\n      };\n    };\n\n    this.summaries = summaries;\n    this.sortingIndex = sortBy.index || 0;\n    this.sortingDirection = sortBy.direction || SortByDirection.asc;\n    this.namespaces = namespaces;\n    this.namespace = namespace;\n  }\n\n  _createClass(ClusterTable, [{\n    key: \"rows\",\n    value: function rows() {\n      var _this2 = this;\n\n      return this.summaries.filter(function (value) {\n        return defaultFilter(value, _this2.filterMethods());\n      }).sort(function (a, b) {\n        var sortField = _this2.sortFields().find(function (value) {\n          return value.id === _this2.sortFields()[_this2.sortingIndex].id;\n        });\n\n        return _this2.sortingDirection === 'asc' ? sortField.compare(a, b) : sortField.compare(b, a);\n      }).map(function (value) {\n        return [serviceLink(value.service_fqdn, _this2.namespaces, _this2.namespace), value.port, value.subset, value.direction, value.type, istioConfigLink(value.destination_rule, 'destinationrule')];\n      });\n    }\n  }]);\n\n  return ClusterTable;\n}();\nexport var ClusterSummaryTable = SummaryTableRenderer();","map":{"version":3,"sources":["/root/GraduateProject/src/components/Envoy/tables/ClusterTable.ts"],"names":["SummaryTableRenderer","sortable","SortByDirection","ClusterSummary","ActiveFilter","FILTER_ACTION_APPEND","FilterTypes","defaultFilter","istioConfigLink","serviceLink","ClusterTable","summaries","sortBy","namespaces","namespace","sortingIndex","sortingDirection","availableFilters","id","title","placeholder","filterType","text","action","filterValues","select","filterMethods","fqdn","entry","filter","service_fqdn","service","cluster","join","includes","value","port","toString","subset","direction","sortFields","isNumeric","param","compare","a","b","localeCompare","type","destination_rule","head","transforms","resource","setSorting","columnIndex","index","asc","sort","sortField","find","map","ClusterSummaryTable"],"mappings":"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","sourcesContent":["import { SummaryTable, SummaryTableRenderer } from './BaseTable';\nimport { ICell, ISortBy, sortable, SortByDirection } from '@patternfly/react-table';\nimport { ClusterSummary } from '../../../types/IstioObjects';\nimport { ActiveFilter, FILTER_ACTION_APPEND, FilterType, FilterTypes } from '../../../types/Filters';\nimport { SortField } from '../../../types/SortFilters';\nimport Namespace from '../../../types/Namespace';\nimport { defaultFilter, istioConfigLink, serviceLink } from '../../../helpers/EnvoyHelpers';\n\nexport class ClusterTable implements SummaryTable {\n  summaries: ClusterSummary[];\n  sortingIndex: number;\n  sortingDirection: 'asc' | 'desc';\n  namespaces: Namespace[] | undefined;\n  namespace: string;\n\n  constructor(summaries: ClusterSummary[], sortBy: ISortBy, namespaces: Namespace[], namespace: string) {\n    this.summaries = summaries;\n    this.sortingIndex = sortBy.index || 0;\n    this.sortingDirection = sortBy.direction || SortByDirection.asc;\n    this.namespaces = namespaces;\n    this.namespace = namespace;\n  }\n\n  availableFilters = (): FilterType[] => {\n    return [\n      {\n        id: 'fqdn',\n        title: 'FQDN',\n        placeholder: 'FQDN',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      },\n      {\n        id: 'port',\n        title: 'Port',\n        placeholder: 'Port',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      },\n      {\n        id: 'subset',\n        title: 'Subset',\n        placeholder: 'Subset',\n        filterType: FilterTypes.text,\n        action: FILTER_ACTION_APPEND,\n        filterValues: []\n      },\n      {\n        id: 'direction',\n        title: 'Direction',\n        placeholder: 'Direction',\n        filterType: FilterTypes.select,\n        action: FILTER_ACTION_APPEND,\n        filterValues: [\n          { id: 'inbound', title: 'inbound' },\n          { id: 'outbound', title: 'outbound' }\n        ]\n      }\n    ];\n  };\n\n  filterMethods = (): { [filter_id: string]: (ClusterSummary, ActiveFilter) => boolean } => {\n    return {\n      fqdn: (entry: ClusterSummary, filter: ActiveFilter): boolean => {\n        return [entry.service_fqdn.service, entry.service_fqdn.namespace, entry.service_fqdn.cluster]\n          .join('.')\n          .includes(filter.value);\n      },\n      port: (entry: ClusterSummary, filter: ActiveFilter): boolean => {\n        return entry.port.toString().includes(filter.value);\n      },\n      subset: (entry: ClusterSummary, filter: ActiveFilter): boolean => {\n        return entry.subset.toString().includes(filter.value);\n      },\n      direction: (entry: ClusterSummary, filter: ActiveFilter): boolean => {\n        return entry.direction.toString().includes(filter.value);\n      }\n    };\n  };\n\n  sortFields = (): SortField<ClusterSummary>[] => {\n    return [\n      {\n        id: 'fqdn',\n        title: 'FQDN',\n        isNumeric: false,\n        param: 'fqdn',\n        compare: (a, b) => {\n          return [a.service_fqdn.service, a.service_fqdn.namespace, a.service_fqdn.cluster]\n            .join('.')\n            .localeCompare([b.service_fqdn.service, b.service_fqdn.namespace, b.service_fqdn.cluster].join('.'));\n        }\n      },\n      {\n        id: 'port',\n        title: 'Port',\n        isNumeric: true,\n        param: 'port',\n        compare: (a, b) => {\n          return a.port - b.port;\n        }\n      },\n      {\n        id: 'subset',\n        title: 'Subset',\n        isNumeric: false,\n        param: 'subset',\n        compare: (a, b) => {\n          return a.subset.localeCompare(b.subset);\n        }\n      },\n      {\n        id: 'direction',\n        title: 'Direction',\n        isNumeric: false,\n        param: 'direction',\n        compare: (a, b) => {\n          return a.direction.localeCompare(b.direction);\n        }\n      },\n      {\n        id: 'type',\n        title: 'Type',\n        isNumeric: true,\n        param: 'type',\n        compare: (a, b) => {\n          return a.type - b.type;\n        }\n      },\n      {\n        id: 'dr',\n        title: 'Destination Rule',\n        isNumeric: true,\n        param: 'dr',\n        compare: (a, b) => {\n          return a.destination_rule.localeCompare(b.destination_rule);\n        }\n      }\n    ];\n  };\n\n  head = (): ICell[] => {\n    return [\n      { title: 'Service FQDN', transforms: [sortable] },\n      { title: 'Port', transforms: [sortable] },\n      { title: 'Subset', transforms: [sortable] },\n      { title: 'Direction', transforms: [sortable] },\n      { title: 'Type', transforms: [sortable] },\n      { title: 'DestinationRule', transforms: [sortable] }\n    ];\n  };\n\n  resource = (): string => 'clusters';\n\n  setSorting = (columnIndex: number, direction: 'asc' | 'desc') => {\n    this.sortingIndex = columnIndex;\n    this.sortingDirection = direction;\n  };\n\n  sortBy = (): ISortBy => {\n    return {\n      index: this.sortingIndex,\n      direction: this.sortingDirection || 'asc'\n    };\n  };\n\n  rows(): (string | number | JSX.Element)[][] {\n    return this.summaries\n      .filter((value: ClusterSummary): boolean => {\n        return defaultFilter(value, this.filterMethods());\n      })\n      .sort((a: ClusterSummary, b: ClusterSummary): number => {\n        const sortField = this.sortFields().find((value: SortField<ClusterSummary>): boolean => {\n          return value.id === this.sortFields()[this.sortingIndex].id;\n        });\n        return this.sortingDirection === 'asc' ? sortField!.compare(a, b) : sortField!.compare(b, a);\n      })\n      .map((value: ClusterSummary): (string | number | JSX.Element)[] => {\n        return [\n          serviceLink(value.service_fqdn, this.namespaces, this.namespace),\n          value.port,\n          value.subset,\n          value.direction,\n          value.type,\n          istioConfigLink(value.destination_rule, 'destinationrule')\n        ];\n      });\n  }\n}\n\nexport const ClusterSummaryTable = SummaryTableRenderer<ClusterTable>();\n"]},"metadata":{},"sourceType":"module"}
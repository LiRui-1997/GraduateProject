{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/JaegerIntegration/TracesDisplayOptions.tsx\";\nimport * as React from 'react';\nimport { Checkbox, Dropdown, DropdownToggle, Radio, Tooltip } from '@patternfly/react-core';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport { itemStyleWithoutInfo, menuStyle, titleStyle } from 'styles/DropdownStyles';\nimport { HistoryManager, URLParam } from 'app/History';\nexport var percentilesOptions = [{\n  id: 'all',\n  labelText: 'All'\n}, {\n  id: '0.75',\n  labelText: 'p75'\n}, {\n  id: '0.9',\n  labelText: 'p90'\n}, {\n  id: '0.99',\n  labelText: 'p99'\n}];\nexport var TracesDisplayOptions = /*#__PURE__*/function (_React$Component) {\n  _inherits(TracesDisplayOptions, _React$Component);\n\n  var _super = _createSuper(TracesDisplayOptions);\n\n  function TracesDisplayOptions(props) {\n    var _this;\n\n    _classCallCheck(this, TracesDisplayOptions);\n\n    _this = _super.call(this, props);\n    _this.computedPercentiles = void 0;\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.onPercentileChanged = function (id, checked) {\n      if (checked) {\n        _this.saveValue(URLParam.JAEGER_PERCENTILE, id);\n\n        _this.setState({\n          percentile: id\n        }, function () {\n          return _this.props.onQuerySettingsChanged(_this.state);\n        });\n      }\n    };\n\n    _this.onErrorsOnlyChanged = function (checked) {\n      _this.saveValue(URLParam.JAEGER_ERRORS_ONLY, String(checked));\n\n      _this.setState({\n        errorsOnly: checked\n      }, function () {\n        return _this.props.onQuerySettingsChanged(_this.state);\n      });\n    };\n\n    _this.onLimitChanged = function (limit, checked) {\n      if (checked) {\n        _this.saveValue(URLParam.JAEGER_LIMIT_TRACES, String(limit));\n\n        _this.setState({\n          limit: limit\n        }, function () {\n          return _this.props.onQuerySettingsChanged(_this.state);\n        });\n      }\n    };\n\n    _this.onValueAxisChanged = function (showSpansAverage) {\n      _this.saveValue(URLParam.JAEGER_SHOW_SPANS_AVG, String(showSpansAverage));\n\n      _this.setState({\n        showSpansAverage: showSpansAverage\n      }, function () {\n        return _this.props.onDisplaySettingsChanged(_this.state);\n      });\n    };\n\n    _this.saveValue = function (key, value) {\n      sessionStorage.setItem(key, value);\n      HistoryManager.setParam(key, value);\n    };\n\n    var displaySettings = TracesDisplayOptions.retrieveDisplaySettings();\n    var querySettings = TracesDisplayOptions.retrieveQuerySettings();\n    _this.state = _objectSpread(_objectSpread(_objectSpread({}, displaySettings), querySettings), {}, {\n      isOpen: false\n    });\n    props.percentilesPromise.then(function (p) {\n      return _this.computedPercentiles = p;\n    });\n    return _this;\n  }\n\n  _createClass(TracesDisplayOptions, [{\n    key: \"render\",\n    value: function render() {\n      var isOpen = this.state.isOpen;\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          id: 'traces-display-settings',\n          isDisabled: this.props.disabled,\n          onToggle: this.onToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }\n        }, \"Display\"),\n        isOpen: isOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, this.getPopoverContent());\n    }\n  }, {\n    key: \"getPopoverContent\",\n    value: function getPopoverContent() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"traces-display-menu\",\n        className: menuStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"\\n          These percentiles are computed from metrics. To refresh them, reload the page.\\n          The filter applies on span durations.\\n          Thus, the filtered traces are the ones where at least one span for the service satisfies the duration criteria.\\n        \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, \"Filter by percentile \", /*#__PURE__*/React.createElement(InfoAltIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 34\n        }\n      }))), percentilesOptions.map(function (item) {\n        var label = item.labelText;\n\n        if (_this2.computedPercentiles) {\n          var val = _this2.computedPercentiles.get(item.id);\n\n          if (val) {\n            label += \" (\".concat(val.toFixed(2), \"ms+)\");\n          }\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: item.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: item.id,\n          className: itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Radio, {\n          id: item.id,\n          name: 'percentiles' + item.id,\n          isChecked: item.id === _this2.state.percentile || item.id === 'all' && !_this2.state.percentile,\n          label: label,\n          onChange: function onChange(checked) {\n            return _this2.onPercentileChanged(item.id, checked);\n          },\n          value: item.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }\n        })));\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, \"Errors\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: itemStyleWithoutInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        id: \"errors-only\",\n        name: \"errors-only\",\n        isChecked: this.state.errorsOnly,\n        label: \"Show only traces with errors\",\n        onChange: this.onErrorsOnlyChanged,\n        value: \"errors-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }, \"Limit per query\"), [20, 100, 500, 1000].map(function (limit) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'limit-' + limit,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: 'limit-' + limit,\n          className: itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Radio, {\n          id: 'limit-' + limit,\n          name: 'limit-' + limit,\n          isChecked: _this2.state.limit === limit,\n          label: String(limit),\n          onChange: function onChange(checked) {\n            return _this2.onLimitChanged(limit, checked);\n          },\n          value: String(limit),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }\n        })));\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: titleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }, \"Value axis\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: itemStyleWithoutInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: \"yaxis-full\",\n        name: \"yaxis-full\",\n        isChecked: !this.state.showSpansAverage,\n        label: \"Full trace duration\",\n        onChange: function onChange() {\n          return _this2.onValueAxisChanged(false);\n        },\n        value: \"yaxis-full\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: itemStyleWithoutInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: \"yaxis-avg\",\n        name: \"yaxis-avg\",\n        isChecked: this.state.showSpansAverage,\n        label: \"Spans average duration\",\n        onChange: function onChange() {\n          return _this2.onValueAxisChanged(true);\n        },\n        value: \"yaxis-avg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }], [{\n    key: \"retrieveDisplaySettings\",\n    value: function retrieveDisplaySettings() {\n      var spansAverage = HistoryManager.getParam(URLParam.JAEGER_SHOW_SPANS_AVG) || sessionStorage.getItem(URLParam.JAEGER_SHOW_SPANS_AVG) || 'false';\n      return {\n        showSpansAverage: spansAverage === 'true'\n      };\n    }\n  }, {\n    key: \"retrieveQuerySettings\",\n    value: function retrieveQuerySettings() {\n      var limit = HistoryManager.getParam(URLParam.JAEGER_LIMIT_TRACES) || sessionStorage.getItem(URLParam.JAEGER_LIMIT_TRACES) || '100';\n      var errorsOnly = HistoryManager.getParam(URLParam.JAEGER_ERRORS_ONLY) || sessionStorage.getItem(URLParam.JAEGER_ERRORS_ONLY) || 'false';\n      var percentile = HistoryManager.getParam(URLParam.JAEGER_PERCENTILE) || sessionStorage.getItem(URLParam.JAEGER_PERCENTILE) || undefined;\n      return {\n        errorsOnly: errorsOnly === 'true',\n        limit: Number(limit),\n        percentile: percentile\n      };\n    }\n  }]);\n\n  return TracesDisplayOptions;\n}(React.Component);","map":{"version":3,"sources":["/root/kiali-ui/src/components/JaegerIntegration/TracesDisplayOptions.tsx"],"names":["React","Checkbox","Dropdown","DropdownToggle","Radio","Tooltip","InfoAltIcon","itemStyleWithoutInfo","menuStyle","titleStyle","HistoryManager","URLParam","percentilesOptions","id","labelText","TracesDisplayOptions","props","computedPercentiles","onToggle","isOpen","setState","onPercentileChanged","checked","saveValue","JAEGER_PERCENTILE","percentile","onQuerySettingsChanged","state","onErrorsOnlyChanged","JAEGER_ERRORS_ONLY","String","errorsOnly","onLimitChanged","limit","JAEGER_LIMIT_TRACES","onValueAxisChanged","showSpansAverage","JAEGER_SHOW_SPANS_AVG","onDisplaySettingsChanged","key","value","sessionStorage","setItem","setParam","displaySettings","retrieveDisplaySettings","querySettings","retrieveQuerySettings","percentilesPromise","then","p","disabled","getPopoverContent","map","item","label","val","get","toFixed","spansAverage","getParam","getItem","undefined","Number","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Checkbox, Dropdown, DropdownToggle, Radio, Tooltip } from '@patternfly/react-core';\nimport { InfoAltIcon } from '@patternfly/react-icons';\n\nimport { itemStyleWithoutInfo, menuStyle, titleStyle } from 'styles/DropdownStyles';\nimport { HistoryManager, URLParam } from 'app/History';\n\nexport interface QuerySettings {\n  percentile?: string;\n  errorsOnly: boolean;\n  limit: number;\n}\n\nexport interface DisplaySettings {\n  showSpansAverage: boolean;\n}\n\nexport const percentilesOptions: DisplayOptionType[] = [\n  { id: 'all', labelText: 'All' },\n  { id: '0.75', labelText: 'p75' },\n  { id: '0.9', labelText: 'p90' },\n  { id: '0.99', labelText: 'p99' }\n];\n\ninterface Props {\n  disabled: boolean;\n  onQuerySettingsChanged: (settings: QuerySettings) => void;\n  onDisplaySettingsChanged: (settings: DisplaySettings) => void;\n  percentilesPromise: Promise<Map<string, number>>;\n}\n\ntype State = QuerySettings &\n  DisplaySettings & {\n    isOpen: boolean;\n  };\n\ninterface DisplayOptionType {\n  id: string;\n  labelText: string;\n}\n\nexport class TracesDisplayOptions extends React.Component<Props, State> {\n  private computedPercentiles: Map<string, number> | undefined;\n\n  constructor(props: Props) {\n    super(props);\n    const displaySettings = TracesDisplayOptions.retrieveDisplaySettings();\n    const querySettings = TracesDisplayOptions.retrieveQuerySettings();\n    this.state = { ...displaySettings, ...querySettings, isOpen: false };\n    props.percentilesPromise.then(p => (this.computedPercentiles = p));\n  }\n\n  public static retrieveDisplaySettings(): DisplaySettings {\n    const spansAverage =\n      HistoryManager.getParam(URLParam.JAEGER_SHOW_SPANS_AVG) ||\n      sessionStorage.getItem(URLParam.JAEGER_SHOW_SPANS_AVG) ||\n      'false';\n    return {\n      showSpansAverage: spansAverage === 'true'\n    };\n  }\n\n  public static retrieveQuerySettings(): QuerySettings {\n    const limit =\n      HistoryManager.getParam(URLParam.JAEGER_LIMIT_TRACES) ||\n      sessionStorage.getItem(URLParam.JAEGER_LIMIT_TRACES) ||\n      '100';\n    const errorsOnly =\n      HistoryManager.getParam(URLParam.JAEGER_ERRORS_ONLY) ||\n      sessionStorage.getItem(URLParam.JAEGER_ERRORS_ONLY) ||\n      'false';\n    const percentile =\n      HistoryManager.getParam(URLParam.JAEGER_PERCENTILE) ||\n      sessionStorage.getItem(URLParam.JAEGER_PERCENTILE) ||\n      undefined;\n    return {\n      errorsOnly: errorsOnly === 'true',\n      limit: Number(limit),\n      percentile: percentile\n    };\n  }\n\n  private onToggle = isOpen => {\n    this.setState({ isOpen: isOpen });\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return (\n      <Dropdown\n        toggle={\n          <DropdownToggle id={'traces-display-settings'} isDisabled={this.props.disabled} onToggle={this.onToggle}>\n            Display\n          </DropdownToggle>\n        }\n        isOpen={isOpen}\n      >\n        {this.getPopoverContent()}\n      </Dropdown>\n    );\n  }\n\n  private getPopoverContent() {\n    return (\n      <div id=\"traces-display-menu\" className={menuStyle}>\n        <Tooltip\n          content={`\n          These percentiles are computed from metrics. To refresh them, reload the page.\n          The filter applies on span durations.\n          Thus, the filtered traces are the ones where at least one span for the service satisfies the duration criteria.\n        `}\n        >\n          <div className={titleStyle}>\n            Filter by percentile <InfoAltIcon />\n          </div>\n        </Tooltip>\n        {percentilesOptions.map(item => {\n          let label = item.labelText;\n          if (this.computedPercentiles) {\n            const val = this.computedPercentiles!.get(item.id);\n            if (val) {\n              label += ` (${val.toFixed(2)}ms+)`;\n            }\n          }\n          return (\n            <div key={item.id}>\n              <label key={item.id} className={itemStyleWithoutInfo}>\n                <Radio\n                  id={item.id}\n                  name={'percentiles' + item.id}\n                  isChecked={item.id === this.state.percentile || (item.id === 'all' && !this.state.percentile)}\n                  label={label}\n                  onChange={checked => this.onPercentileChanged(item.id, checked)}\n                  value={item.id}\n                />\n              </label>\n            </div>\n          );\n        })}\n        <div className={titleStyle}>Errors</div>\n        <div>\n          <label className={itemStyleWithoutInfo}>\n            <Checkbox\n              id=\"errors-only\"\n              name=\"errors-only\"\n              isChecked={this.state.errorsOnly}\n              label=\"Show only traces with errors\"\n              onChange={this.onErrorsOnlyChanged}\n              value=\"errors-only\"\n            />\n          </label>\n        </div>\n        <div className={titleStyle}>Limit per query</div>\n        {[20, 100, 500, 1000].map(limit => (\n          <div key={'limit-' + limit}>\n            <label key={'limit-' + limit} className={itemStyleWithoutInfo}>\n              <Radio\n                id={'limit-' + limit}\n                name={'limit-' + limit}\n                isChecked={this.state.limit === limit}\n                label={String(limit)}\n                onChange={checked => this.onLimitChanged(limit, checked)}\n                value={String(limit)}\n              />\n            </label>\n          </div>\n        ))}\n        <div className={titleStyle}>Value axis</div>\n        <div>\n          <label className={itemStyleWithoutInfo}>\n            <Radio\n              id=\"yaxis-full\"\n              name=\"yaxis-full\"\n              isChecked={!this.state.showSpansAverage}\n              label=\"Full trace duration\"\n              onChange={() => this.onValueAxisChanged(false)}\n              value=\"yaxis-full\"\n            />\n          </label>\n        </div>\n        <div>\n          <label className={itemStyleWithoutInfo}>\n            <Radio\n              id=\"yaxis-avg\"\n              name=\"yaxis-avg\"\n              isChecked={this.state.showSpansAverage}\n              label=\"Spans average duration\"\n              onChange={() => this.onValueAxisChanged(true)}\n              value=\"yaxis-avg\"\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n\n  private onPercentileChanged = (id: string, checked: boolean) => {\n    if (checked) {\n      this.saveValue(URLParam.JAEGER_PERCENTILE, id);\n      this.setState({ percentile: id }, () => this.props.onQuerySettingsChanged(this.state));\n    }\n  };\n\n  private onErrorsOnlyChanged = (checked: boolean) => {\n    this.saveValue(URLParam.JAEGER_ERRORS_ONLY, String(checked));\n    this.setState({ errorsOnly: checked }, () => this.props.onQuerySettingsChanged(this.state));\n  };\n\n  private onLimitChanged = (limit: number, checked: boolean) => {\n    if (checked) {\n      this.saveValue(URLParam.JAEGER_LIMIT_TRACES, String(limit));\n      this.setState({ limit: limit }, () => this.props.onQuerySettingsChanged(this.state));\n    }\n  };\n\n  private onValueAxisChanged = (showSpansAverage: boolean) => {\n    this.saveValue(URLParam.JAEGER_SHOW_SPANS_AVG, String(showSpansAverage));\n    this.setState({ showSpansAverage: showSpansAverage }, () => this.props.onDisplaySettingsChanged(this.state));\n  };\n\n  private saveValue = (key: URLParam, value: string) => {\n    sessionStorage.setItem(key, value);\n    HistoryManager.setParam(key, value);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar defaultOptions = {\n  month: 'short',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n};\nexport var toString = function toString(time, options) {\n  var formatOptions = _objectSpread({}, defaultOptions);\n\n  var date = new Date(time);\n\n  if (date.getFullYear() !== new Date().getFullYear()) {\n    formatOptions.year = 'numeric';\n  }\n\n  return date.toLocaleString('en-US', _objectSpread(_objectSpread({}, formatOptions), options));\n};\nexport var toRangeString = function toRangeString(start, end, startOptions, endOptions) {\n  var options = _objectSpread({}, defaultOptions);\n\n  var startDate = new Date(start);\n  var currentYear = new Date().getFullYear();\n  var startYear = startDate.getFullYear();\n\n  if (startYear !== currentYear) {\n    options.year = 'numeric';\n  }\n\n  startOptions = !!startOptions ? startOptions : {};\n  var startStr = startDate.toLocaleString('en-US', _objectSpread(_objectSpread({}, options), startOptions));\n  options = _objectSpread({}, defaultOptions);\n  var endDate = new Date(end);\n  var endYear = endDate.getFullYear();\n\n  if (startYear !== endYear) {\n    options.year = 'numeric';\n  }\n\n  var startMonth = startDate.getMonth();\n  var endMonth = endDate.getMonth();\n  var startDay = startDate.getDay();\n  var endDay = endDate.getDay();\n\n  if (startMonth === endMonth && startDay === endDay) {\n    delete options.month;\n    delete options.day;\n  }\n\n  endOptions = !!endOptions ? endOptions : {};\n  var endStr = endDate.toLocaleString('en-US', _objectSpread(_objectSpread({}, options), endOptions));\n  return \"\".concat(startStr, \" ... \").concat(endStr);\n};","map":{"version":3,"sources":["/root/kiali-ui/src/components/Time/Utils.tsx"],"names":["defaultOptions","month","day","hour","minute","toString","time","options","formatOptions","date","Date","getFullYear","year","toLocaleString","toRangeString","start","end","startOptions","endOptions","startDate","currentYear","startYear","startStr","endDate","endYear","startMonth","getMonth","endMonth","startDay","getDay","endDay","endStr"],"mappings":";AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,GAAG,EAAE,SAFgB;AAGrBC,EAAAA,IAAI,EAAE,SAHe;AAIrBC,EAAAA,MAAM,EAAE;AAJa,CAAvB;AAOA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAA2BC,OAA3B,EAAqD;AAC3E,MAAMC,aAAa,qBAAQR,cAAR,CAAnB;;AACA,MAAMS,IAAI,GAAG,IAAIC,IAAJ,CAASJ,IAAT,CAAb;;AACA,MAAIG,IAAI,CAACE,WAAL,OAAuB,IAAID,IAAJ,GAAWC,WAAX,EAA3B,EAAqD;AACnDH,IAAAA,aAAa,CAACI,IAAd,GAAqB,SAArB;AACD;;AACD,SAAOH,IAAI,CAACI,cAAL,CAAoB,OAApB,kCAAkCL,aAAlC,GAAoDD,OAApD,EAAP;AACD,CAPM;AASP,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,KAD2B,EAE3BC,GAF2B,EAG3BC,YAH2B,EAI3BC,UAJ2B,EAKhB;AACX,MAAIX,OAAO,qBAAQP,cAAR,CAAX;;AACA,MAAMmB,SAAS,GAAG,IAAIT,IAAJ,CAASK,KAAT,CAAlB;AACA,MAAMK,WAAW,GAAG,IAAIV,IAAJ,GAAWC,WAAX,EAApB;AACA,MAAMU,SAAS,GAAGF,SAAS,CAACR,WAAV,EAAlB;;AACA,MAAIU,SAAS,KAAKD,WAAlB,EAA+B;AAC7Bb,IAAAA,OAAO,CAACK,IAAR,GAAe,SAAf;AACD;;AACDK,EAAAA,YAAY,GAAG,CAAC,CAACA,YAAF,GAAiBA,YAAjB,GAAgC,EAA/C;AACA,MAAMK,QAAQ,GAAGH,SAAS,CAACN,cAAV,CAAyB,OAAzB,kCAAuCN,OAAvC,GAAmDU,YAAnD,EAAjB;AAEAV,EAAAA,OAAO,qBAAQP,cAAR,CAAP;AACA,MAAMuB,OAAO,GAAG,IAAIb,IAAJ,CAASM,GAAT,CAAhB;AACA,MAAMQ,OAAO,GAAGD,OAAO,CAACZ,WAAR,EAAhB;;AACA,MAAIU,SAAS,KAAKG,OAAlB,EAA2B;AACzBjB,IAAAA,OAAO,CAACK,IAAR,GAAe,SAAf;AACD;;AACD,MAAMa,UAAU,GAAGN,SAAS,CAACO,QAAV,EAAnB;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACG,QAAR,EAAjB;AACA,MAAME,QAAQ,GAAGT,SAAS,CAACU,MAAV,EAAjB;AACA,MAAMC,MAAM,GAAGP,OAAO,CAACM,MAAR,EAAf;;AACA,MAAIJ,UAAU,KAAKE,QAAf,IAA2BC,QAAQ,KAAKE,MAA5C,EAAoD;AAClD,WAAOvB,OAAO,CAACN,KAAf;AACA,WAAOM,OAAO,CAACL,GAAf;AACD;;AACDgB,EAAAA,UAAU,GAAG,CAAC,CAACA,UAAF,GAAeA,UAAf,GAA4B,EAAzC;AACA,MAAMa,MAAM,GAAGR,OAAO,CAACV,cAAR,CAAuB,OAAvB,kCAAqCN,OAArC,GAAiDW,UAAjD,EAAf;AACA,mBAAUI,QAAV,kBAA0BS,MAA1B;AACD,CAjCM","sourcesContent":["import { TimeInMilliseconds } from 'types/Common';\n\nconst defaultOptions = {\n  month: 'short',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n} as any;\n\nexport const toString = (time: TimeInMilliseconds, options?: any): string => {\n  const formatOptions = { ...defaultOptions };\n  const date = new Date(time);\n  if (date.getFullYear() !== new Date().getFullYear()) {\n    formatOptions.year = 'numeric';\n  }\n  return date.toLocaleString('en-US', { ...formatOptions, ...options });\n};\n\nexport const toRangeString = (\n  start: TimeInMilliseconds,\n  end: TimeInMilliseconds,\n  startOptions?: any,\n  endOptions?: any\n): string => {\n  let options = { ...defaultOptions };\n  const startDate = new Date(start);\n  const currentYear = new Date().getFullYear();\n  const startYear = startDate.getFullYear();\n  if (startYear !== currentYear) {\n    options.year = 'numeric';\n  }\n  startOptions = !!startOptions ? startOptions : {};\n  const startStr = startDate.toLocaleString('en-US', { ...options, ...startOptions });\n\n  options = { ...defaultOptions };\n  const endDate = new Date(end);\n  const endYear = endDate.getFullYear();\n  if (startYear !== endYear) {\n    options.year = 'numeric';\n  }\n  const startMonth = startDate.getMonth();\n  const endMonth = endDate.getMonth();\n  const startDay = startDate.getDay();\n  const endDay = endDate.getDay();\n  if (startMonth === endMonth && startDay === endDay) {\n    delete options.month;\n    delete options.day;\n  }\n  endOptions = !!endOptions ? endOptions : {};\n  const endStr = endDate.toLocaleString('en-US', { ...options, ...endOptions });\n  return `${startStr} ... ${endStr}`;\n};\n"]},"metadata":{},"sourceType":"module"}
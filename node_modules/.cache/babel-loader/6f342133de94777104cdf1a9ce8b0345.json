{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioWizards/TrafficPolicy.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, FormSelect, FormSelectOption, Radio, Switch, TextInput } from '@patternfly/react-core';\nimport { MTLSStatuses, nsWideMTLSStatus } from '../../types/TLSStatus';\nimport { meshWideMTLSStatusSelector } from '../../store/Selectors';\nimport { PeerAuthenticationMutualTLSMode } from '../../types/IstioObjects';\nimport { LOAD_BALANCER_TOOLTIP, PEER_AUTHENTICATION_TOOLTIP, wizardTooltip } from './WizardHelp';\nexport var UNSET = 'UNSET';\nexport var DISABLE = 'DISABLE';\nexport var ISTIO_MUTUAL = 'ISTIO_MUTUAL';\nexport var SIMPLE = 'SIMPLE';\nexport var MUTUAL = 'MUTUAL';\nexport var ROUND_ROBIN = 'ROUND_ROBIN';\nexport var loadBalancerSimple = [ROUND_ROBIN, 'LEAST_CONN', 'RANDOM', 'PASSTHROUGH'];\nexport var mTLSMode = [UNSET, DISABLE, ISTIO_MUTUAL, SIMPLE, MUTUAL];\nexport var ConsistentHashType;\n\n(function (ConsistentHashType) {\n  ConsistentHashType[\"HTTP_HEADER_NAME\"] = \"HTTP_HEADER_NAME\";\n  ConsistentHashType[\"HTTP_COOKIE\"] = \"HTTP_COOKIE\";\n  ConsistentHashType[\"USE_SOURCE_IP\"] = \"USE_SOURCE_IP\";\n})(ConsistentHashType || (ConsistentHashType = {}));\n\nvar durationRegex = /^[0-9]*(\\.[0-9]+)?s?$/;\nvar TrafficPolicyForm;\n\n(function (TrafficPolicyForm) {\n  TrafficPolicyForm[TrafficPolicyForm[\"TLS\"] = 0] = \"TLS\";\n  TrafficPolicyForm[TrafficPolicyForm[\"TLS_CLIENT_CERTIFICATE\"] = 1] = \"TLS_CLIENT_CERTIFICATE\";\n  TrafficPolicyForm[TrafficPolicyForm[\"TLS_PRIVATE_KEY\"] = 2] = \"TLS_PRIVATE_KEY\";\n  TrafficPolicyForm[TrafficPolicyForm[\"TLS_CA_CERTIFICATES\"] = 3] = \"TLS_CA_CERTIFICATES\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_SWITCH\"] = 4] = \"LB_SWITCH\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_SIMPLE\"] = 5] = \"LB_SIMPLE\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_SELECT\"] = 6] = \"LB_SELECT\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_CONSISTENT_HASH\"] = 7] = \"LB_CONSISTENT_HASH\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_HTTP_HEADER_NAME\"] = 8] = \"LB_HTTP_HEADER_NAME\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_HTTP_COOKIE_NAME\"] = 9] = \"LB_HTTP_COOKIE_NAME\";\n  TrafficPolicyForm[TrafficPolicyForm[\"LB_HTTP_COOKIE_TTL\"] = 10] = \"LB_HTTP_COOKIE_TTL\";\n  TrafficPolicyForm[TrafficPolicyForm[\"PA_SWITCH\"] = 11] = \"PA_SWITCH\";\n  TrafficPolicyForm[TrafficPolicyForm[\"PA_MODE\"] = 12] = \"PA_MODE\";\n})(TrafficPolicyForm || (TrafficPolicyForm = {}));\n\nvar TrafficPolicy = /*#__PURE__*/function (_React$Component) {\n  _inherits(TrafficPolicy, _React$Component);\n\n  var _super = _createSuper(TrafficPolicy);\n\n  function TrafficPolicy(props) {\n    var _this;\n\n    _classCallCheck(this, TrafficPolicy);\n\n    _this = _super.call(this, props);\n\n    _this.isValidDuration = function (ttl) {\n      if (ttl.length === 0) {\n        return false;\n      }\n\n      return ttl.search(durationRegex) === 0;\n    };\n\n    _this.isValidCookie = function (cookie) {\n      if (!cookie.name || cookie.name.length === 0 || !cookie.ttl || cookie.ttl.length === 0 || !_this.isValidDuration(cookie.ttl)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.isValidLB = function (state) {\n      if (!state.addLoadBalancer) {\n        return true;\n      }\n\n      if (state.simpleLB) {\n        // No need to check more as user select the simple LB from a list\n        return true;\n      } // No need to enter to check inside consistentHash\n\n\n      if (state.consistentHashType === ConsistentHashType.USE_SOURCE_IP) {\n        return true;\n      }\n\n      if (!state.loadBalancer.consistentHash) {\n        return false;\n      }\n\n      switch (state.consistentHashType) {\n        case ConsistentHashType.HTTP_HEADER_NAME:\n          return state.loadBalancer.consistentHash && state.loadBalancer.consistentHash.httpHeaderName ? state.loadBalancer.consistentHash.httpHeaderName.length > 0 : false;\n\n        case ConsistentHashType.HTTP_COOKIE:\n          return state.loadBalancer.consistentHash && state.loadBalancer.consistentHash.httpCookie ? _this.isValidCookie(state.loadBalancer.consistentHash.httpCookie) : false;\n\n        default:\n          return true;\n      }\n    };\n\n    _this.isValidTLS = function (state) {\n      return state.mtlsMode !== undefined;\n    };\n\n    _this.onFormChange = function (component, value) {\n      switch (component) {\n        case TrafficPolicyForm.TLS:\n          _this.setState({\n            tlsModified: true,\n            mtlsMode: value\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.state.mtlsMode === MUTUAL ? _this.state.clientCertificate.length > 0 && _this.state.privateKey.length > 0 : true, _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.TLS_CLIENT_CERTIFICATE:\n          _this.setState({\n            tlsModified: true,\n            clientCertificate: value\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.state.mtlsMode === MUTUAL && _this.state.clientCertificate.length > 0 && _this.state.privateKey.length > 0, _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.TLS_PRIVATE_KEY:\n          _this.setState({\n            tlsModified: true,\n            privateKey: value\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.state.mtlsMode === MUTUAL && _this.state.clientCertificate.length > 0 && _this.state.privateKey.length > 0, _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.TLS_CA_CERTIFICATES:\n          _this.setState({\n            tlsModified: true,\n            caCertificates: value\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.state.mtlsMode === MUTUAL && _this.state.clientCertificate.length > 0 && _this.state.privateKey.length > 0, _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_SWITCH:\n          _this.setState(function (prevState) {\n            return {\n              addLoadBalancer: !prevState.addLoadBalancer\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_SIMPLE:\n          _this.setState(function (prevState) {\n            var loadBalancer = prevState.loadBalancer;\n            loadBalancer.simple = value;\n            return {\n              loadBalancer: loadBalancer\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_SELECT:\n          _this.setState(function (prevState) {\n            // Set a LB simple default value if not present\n            if (!prevState.loadBalancer || !prevState.loadBalancer.simple) {\n              prevState.loadBalancer.simple = ROUND_ROBIN;\n            }\n\n            return {\n              simpleLB: value === 'true'\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_CONSISTENT_HASH:\n          _this.setState(function (prevState) {\n            var loadBalancer = prevState.loadBalancer;\n\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            }\n\n            if (ConsistentHashType[value] === ConsistentHashType.USE_SOURCE_IP) {\n              loadBalancer.consistentHash.useSourceIp = true;\n            }\n\n            return {\n              consistentHashType: ConsistentHashType[value]\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_HTTP_HEADER_NAME:\n          _this.setState(function (prevState) {\n            var loadBalancer = prevState.loadBalancer;\n\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            }\n\n            loadBalancer.consistentHash.httpHeaderName = value;\n            return {\n              loadBalancer: loadBalancer\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_HTTP_COOKIE_NAME:\n          _this.setState(function (prevState) {\n            var loadBalancer = prevState.loadBalancer;\n\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            } else {\n              if (!loadBalancer.consistentHash.httpCookie) {\n                loadBalancer.consistentHash.httpCookie = {\n                  name: '',\n                  ttl: ''\n                };\n              } else {\n                loadBalancer.consistentHash.httpCookie.name = value;\n              }\n            }\n\n            return {\n              loadBalancer: loadBalancer\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.LB_HTTP_COOKIE_TTL:\n          _this.setState(function (prevState) {\n            var consistentHash = prevState.loadBalancer ? prevState.loadBalancer.consistentHash : {};\n\n            if (consistentHash) {\n              if (!consistentHash.httpCookie) {\n                consistentHash.httpCookie = {\n                  name: '',\n                  ttl: ''\n                };\n              } else {\n                consistentHash.httpCookie.ttl = value;\n              }\n            }\n\n            return {\n              loadBalancer: {\n                consistentHash: consistentHash\n              }\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidLB(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.PA_SWITCH:\n          _this.setState(function (prevState) {\n            return {\n              peerAuthnSelector: {\n                addPeerAuthentication: !prevState.peerAuthnSelector.addPeerAuthentication,\n                addPeerAuthnModified: !prevState.peerAuthnSelector.addPeerAuthnModified,\n                mode: prevState.peerAuthnSelector.mode\n              }\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidTLS(_this.state), _this.state);\n          });\n\n          break;\n\n        case TrafficPolicyForm.PA_MODE:\n          _this.setState(function (prevState) {\n            return {\n              peerAuthnSelector: {\n                addPeerAuthentication: prevState.peerAuthnSelector.addPeerAuthentication,\n                addPeerAuthnModified: prevState.peerAuthnSelector.addPeerAuthnModified,\n                mode: value\n              }\n            };\n          }, function () {\n            return _this.props.onTrafficPolicyChange(_this.isValidTLS(_this.state), _this.state);\n          });\n\n          break;\n\n        default: // No default action\n\n      }\n    };\n\n    var consistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n\n    if (props.loadBalancer.consistentHash) {\n      if (props.loadBalancer.consistentHash.httpHeaderName) {\n        consistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n      } else if (props.loadBalancer.consistentHash.httpCookie) {\n        consistentHashType = ConsistentHashType.HTTP_COOKIE;\n      } else if (props.loadBalancer.consistentHash.useSourceIp) {\n        consistentHashType = ConsistentHashType.USE_SOURCE_IP;\n      }\n    }\n\n    _this.state = {\n      tlsModified: false,\n      mtlsMode: props.mtlsMode,\n      clientCertificate: props.clientCertificate,\n      privateKey: props.privateKey,\n      caCertificates: props.caCertificates,\n      addLoadBalancer: props.hasLoadBalancer,\n      simpleLB: props.loadBalancer && props.loadBalancer.simple !== undefined && props.loadBalancer.simple !== null,\n      consistentHashType: consistentHashType,\n      loadBalancer: props.loadBalancer,\n      peerAuthnSelector: {\n        addPeerAuthentication: props.hasPeerAuthentication,\n        addPeerAuthnModified: false,\n        mode: props.peerAuthenticationMode\n      },\n      addConnectionPool: props.addConnectionPool,\n      connectionPool: props.connectionPool,\n      addOutlierDetection: props.addOutlierDetection,\n      outlierDetection: props.outlierDetection\n    };\n    return _this;\n  }\n\n  _createClass(TrafficPolicy, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var meshWideStatus = this.props.meshWideStatus || MTLSStatuses.NOT_ENABLED;\n      var nsWideStatus = this.props.nsWideStatus ? this.props.nsWideStatus.status : MTLSStatuses.NOT_ENABLED;\n      var isMtlsEnabled = nsWideMTLSStatus(nsWideStatus, meshWideStatus); // If there is a previous value, use it\n\n      if (this.props.mtlsMode !== '' && this.props.mtlsMode !== UNSET) {\n        // Don't forget to update the mtlsMode\n        this.setState({\n          tlsModified: true,\n          mtlsMode: this.props.mtlsMode\n        }, function () {\n          return _this2.props.onTrafficPolicyChange(true, _this2.state);\n        }); // otherwise, if there is MTLS enabled, use ISTIO_MUTUAL\n      } else if (isMtlsEnabled === MTLSStatuses.ENABLED) {\n        this.setState({\n          tlsModified: true,\n          mtlsMode: ISTIO_MUTUAL\n        }, function () {\n          return _this2.props.onTrafficPolicyChange(true, _this2.state);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var isValidLB = this.isValidLB(this.state);\n      return /*#__PURE__*/React.createElement(Form, {\n        isHorizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"TLS\",\n        fieldId: \"advanced-tls\",\n        helperText: \"TLS related settings for connections to the upstream service.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.mtlsMode,\n        onChange: function onChange(mtlsMode) {\n          return _this3.onFormChange(TrafficPolicyForm.TLS, mtlsMode);\n        },\n        id: \"advanced-tls\",\n        name: \"advanced-tls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }\n      }, mTLSMode.map(function (mode) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: mode,\n          value: mode,\n          label: mode,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }\n        });\n      }))), this.state.mtlsMode === MUTUAL && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Client Certificate\",\n        fieldId: \"clientCertificate\",\n        isValid: this.state.clientCertificate.length > 0,\n        helperTextInvalid: \"Client Certificate must be non empty\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.clientCertificate,\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.TLS_CLIENT_CERTIFICATE, value);\n        },\n        id: \"clientCertificate\",\n        name: \"clientCertificate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Private Key\",\n        fieldId: \"privateKey\",\n        isValid: this.state.privateKey.length > 0,\n        helperTextInvalid: \"Private Key must be non empty\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.privateKey,\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.TLS_PRIVATE_KEY, value);\n        },\n        id: \"privateKey\",\n        name: \"privateKey\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"CA Certificates\",\n        fieldId: \"caCertificates\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.caCertificates,\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.TLS_CA_CERTIFICATES, value);\n        },\n        id: \"caCertificates\",\n        name: \"caCertificates\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Add PeerAuthentication\",\n        fieldId: \"advanced-paSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"advanced-paSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.peerAuthnSelector.addPeerAuthentication,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.PA_SWITCH, '');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }\n      }, wizardTooltip(PEER_AUTHENTICATION_TOOLTIP))), this.state.peerAuthnSelector.addPeerAuthentication && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"advanced-pa-mode\",\n        label: \"Mode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.peerAuthnSelector.mode,\n        onChange: function onChange(mode) {\n          return _this3.onFormChange(TrafficPolicyForm.PA_MODE, mode);\n        },\n        id: \"trafficPolicy-pa-mode\",\n        name: \"trafficPolicy-pa-mode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }\n      }, Object.keys(PeerAuthenticationMutualTLSMode).map(function (mode) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: mode,\n          value: mode,\n          label: mode,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 17\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Add LoadBalancer\",\n        fieldId: \"advanced-lbSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"advanced-lbSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addLoadBalancer,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_SWITCH, '');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }\n      }), wizardTooltip(LOAD_BALANCER_TOOLTIP)), this.state.addLoadBalancer && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"selectLBType\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: \"selectLBTypeSimple\",\n        name: \"selectLBType\",\n        label: \"Simple\",\n        isDisabled: !this.state.addLoadBalancer,\n        isChecked: this.state.simpleLB,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_SELECT, 'true');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        id: \"selectLBTypeConsistentHash\",\n        name: \"selectLBType\",\n        label: \"Consistent Hash\",\n        isDisabled: !this.state.addLoadBalancer,\n        isChecked: !this.state.simpleLB,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_SELECT, 'false');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 15\n        }\n      })), this.state.simpleLB && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"advanced-loadbalancer\",\n        label: \"LoadBalancer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.loadBalancer.simple,\n        onChange: function onChange(simple) {\n          return _this3.onFormChange(TrafficPolicyForm.LB_SIMPLE, simple);\n        },\n        id: \"trafficPolicy-lb\",\n        name: \"trafficPolicy-lb\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 17\n        }\n      }, loadBalancerSimple.map(function (simple) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: simple,\n          value: simple,\n          label: simple,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 21\n          }\n        });\n      }))), !this.state.simpleLB && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"selectConsistentHashType\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: \"httpHeaderName\",\n        name: \"selectConsistentHashType\",\n        label: \"HTTP Header Name\",\n        isDisabled: !this.state.addLoadBalancer,\n        isChecked: this.state.consistentHashType === ConsistentHashType.HTTP_HEADER_NAME,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.HTTP_HEADER_NAME);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        id: \"httpCookie\",\n        name: \"selectConsistentHashType\",\n        label: \"HTTP Cookie\",\n        isDisabled: !this.state.addLoadBalancer,\n        checked: this.state.consistentHashType === ConsistentHashType.HTTP_COOKIE,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.HTTP_COOKIE);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        id: \"sourceIp\",\n        name: \"selectConsistentHashType\",\n        label: \"Source IP\",\n        isDisabled: !this.state.addLoadBalancer,\n        isChecked: this.state.consistentHashType === ConsistentHashType.USE_SOURCE_IP,\n        onChange: function onChange() {\n          return _this3.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.USE_SOURCE_IP);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 17\n        }\n      })), !this.state.simpleLB && this.state.consistentHashType === ConsistentHashType.HTTP_HEADER_NAME && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"HTTP Header Name\",\n        fieldId: \"httpHeaderName\",\n        isValid: isValidLB,\n        disabled: !this.state.addLoadBalancer,\n        helperTextInvalid: \"HTTP Header Name must be non empty\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpHeaderName ? this.state.loadBalancer.consistentHash.httpHeaderName : '',\n        id: \"httpHeaderName\",\n        name: \"httpHeaderName\",\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.LB_HTTP_HEADER_NAME, value);\n        },\n        isValid: isValidLB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 17\n        }\n      })), !this.state.simpleLB && this.state.consistentHashType === ConsistentHashType.HTTP_COOKIE && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"HTTP Cookie Name\",\n        fieldId: \"httpCookieName\",\n        isValid: isValidLB,\n        disabled: !this.state.addLoadBalancer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpCookie ? this.state.loadBalancer.consistentHash.httpCookie.name : '',\n        id: \"httpCookieName\",\n        name: \"httpCookieName\",\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.LB_HTTP_COOKIE_NAME, value);\n        },\n        isValid: isValidLB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"HTTP Cookie TTL\",\n        fieldId: \"httpCookieTtl\",\n        isValid: isValidLB,\n        disabled: !this.state.addLoadBalancer,\n        helperText: \"TTL is expressed in nanoseconds (i.e. 1000, 2000, etc) or seconds (i.e. 10s, 1.5s, etc).\",\n        helperTextInvalid: \"HTTP Cookie Name must be non empty and TTL must be expressed in in nanoseconds (i.e. 1000, 2000, etc) or seconds (i.e. 10s, 1.5s, etc).\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpCookie ? this.state.loadBalancer.consistentHash.httpCookie.ttl : '',\n        id: \"httpCookieTtl\",\n        name: \"httpCookieTtl\",\n        onChange: function onChange(value) {\n          return _this3.onFormChange(TrafficPolicyForm.LB_HTTP_COOKIE_TTL, value);\n        },\n        isValid: isValidLB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 19\n        }\n      })))));\n    }\n  }]);\n\n  return TrafficPolicy;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    meshWideStatus: meshWideMTLSStatusSelector(state)\n  };\n};\n\nvar TraffiPolicyContainer = connect(mapStateToProps)(TrafficPolicy);\nexport default TraffiPolicyContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioWizards/TrafficPolicy.tsx"],"names":["React","connect","Form","FormGroup","FormSelect","FormSelectOption","Radio","Switch","TextInput","MTLSStatuses","nsWideMTLSStatus","meshWideMTLSStatusSelector","PeerAuthenticationMutualTLSMode","LOAD_BALANCER_TOOLTIP","PEER_AUTHENTICATION_TOOLTIP","wizardTooltip","UNSET","DISABLE","ISTIO_MUTUAL","SIMPLE","MUTUAL","ROUND_ROBIN","loadBalancerSimple","mTLSMode","ConsistentHashType","durationRegex","TrafficPolicyForm","TrafficPolicy","props","isValidDuration","ttl","length","search","isValidCookie","cookie","name","isValidLB","state","addLoadBalancer","simpleLB","consistentHashType","USE_SOURCE_IP","loadBalancer","consistentHash","HTTP_HEADER_NAME","httpHeaderName","HTTP_COOKIE","httpCookie","isValidTLS","mtlsMode","undefined","onFormChange","component","value","TLS","setState","tlsModified","onTrafficPolicyChange","clientCertificate","privateKey","TLS_CLIENT_CERTIFICATE","TLS_PRIVATE_KEY","TLS_CA_CERTIFICATES","caCertificates","LB_SWITCH","prevState","LB_SIMPLE","simple","LB_SELECT","LB_CONSISTENT_HASH","useSourceIp","LB_HTTP_HEADER_NAME","LB_HTTP_COOKIE_NAME","LB_HTTP_COOKIE_TTL","PA_SWITCH","peerAuthnSelector","addPeerAuthentication","addPeerAuthnModified","mode","PA_MODE","hasLoadBalancer","hasPeerAuthentication","peerAuthenticationMode","addConnectionPool","connectionPool","addOutlierDetection","outlierDetection","meshWideStatus","NOT_ENABLED","nsWideStatus","status","isMtlsEnabled","ENABLED","map","Object","keys","Component","mapStateToProps","TraffiPolicyContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, FormSelect, FormSelectOption, Radio, Switch, TextInput } from '@patternfly/react-core';\nimport { MTLSStatuses, nsWideMTLSStatus, TLSStatus } from '../../types/TLSStatus';\nimport { KialiAppState } from '../../store/Store';\nimport { meshWideMTLSStatusSelector } from '../../store/Selectors';\nimport {\n  ConnectionPoolSettings,\n  HTTPCookie,\n  LoadBalancerSettings,\n  OutlierDetection as OutlierDetectionProps,\n  PeerAuthenticationMutualTLSMode\n} from '../../types/IstioObjects';\nimport { LOAD_BALANCER_TOOLTIP, PEER_AUTHENTICATION_TOOLTIP, wizardTooltip } from './WizardHelp';\n\nexport const UNSET = 'UNSET';\nexport const DISABLE = 'DISABLE';\nexport const ISTIO_MUTUAL = 'ISTIO_MUTUAL';\nexport const SIMPLE = 'SIMPLE';\nexport const MUTUAL = 'MUTUAL';\nexport const ROUND_ROBIN = 'ROUND_ROBIN';\n\nexport const loadBalancerSimple: string[] = [ROUND_ROBIN, 'LEAST_CONN', 'RANDOM', 'PASSTHROUGH'];\n\nexport const mTLSMode: string[] = [UNSET, DISABLE, ISTIO_MUTUAL, SIMPLE, MUTUAL];\n\ntype ReduxProps = {\n  meshWideStatus: string;\n};\n\ntype Props = ReduxProps & {\n  mtlsMode: string;\n  clientCertificate: string;\n  privateKey: string;\n  caCertificates: string;\n  hasLoadBalancer: boolean;\n  loadBalancer: LoadBalancerSettings;\n  onTrafficPolicyChange: (valid: boolean, trafficPolicy: TrafficPolicyState) => void;\n  nsWideStatus?: TLSStatus;\n  hasPeerAuthentication: boolean;\n  peerAuthenticationMode: PeerAuthenticationMutualTLSMode;\n  addConnectionPool: boolean;\n  connectionPool: ConnectionPoolSettings;\n  addOutlierDetection: boolean;\n  outlierDetection: OutlierDetectionProps;\n};\n\nexport enum ConsistentHashType {\n  HTTP_HEADER_NAME = 'HTTP_HEADER_NAME',\n  HTTP_COOKIE = 'HTTP_COOKIE',\n  USE_SOURCE_IP = 'USE_SOURCE_IP'\n}\n\nexport type TrafficPolicyState = {\n  tlsModified: boolean;\n  mtlsMode: string;\n  clientCertificate: string;\n  privateKey: string;\n  caCertificates: string;\n  addLoadBalancer: boolean;\n  simpleLB: boolean;\n  consistentHashType: ConsistentHashType;\n  loadBalancer: LoadBalancerSettings;\n  peerAuthnSelector: PeerAuthenticationSelectorState;\n  addConnectionPool: boolean;\n  connectionPool: ConnectionPoolSettings;\n  addOutlierDetection: boolean;\n  outlierDetection: OutlierDetectionProps;\n};\n\nexport type PeerAuthenticationSelectorState = {\n  addPeerAuthentication: boolean;\n  addPeerAuthnModified: boolean;\n  mode: PeerAuthenticationMutualTLSMode;\n};\n\nconst durationRegex = /^[0-9]*(\\.[0-9]+)?s?$/;\n\nenum TrafficPolicyForm {\n  TLS,\n  TLS_CLIENT_CERTIFICATE,\n  TLS_PRIVATE_KEY,\n  TLS_CA_CERTIFICATES,\n  LB_SWITCH,\n  LB_SIMPLE,\n  LB_SELECT,\n  LB_CONSISTENT_HASH,\n  LB_HTTP_HEADER_NAME,\n  LB_HTTP_COOKIE_NAME,\n  LB_HTTP_COOKIE_TTL,\n  PA_SWITCH,\n  PA_MODE\n}\n\nclass TrafficPolicy extends React.Component<Props, TrafficPolicyState> {\n  constructor(props: Props) {\n    super(props);\n    let consistentHashType: ConsistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n    if (props.loadBalancer.consistentHash) {\n      if (props.loadBalancer.consistentHash.httpHeaderName) {\n        consistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n      } else if (props.loadBalancer.consistentHash.httpCookie) {\n        consistentHashType = ConsistentHashType.HTTP_COOKIE;\n      } else if (props.loadBalancer.consistentHash.useSourceIp) {\n        consistentHashType = ConsistentHashType.USE_SOURCE_IP;\n      }\n    }\n    this.state = {\n      tlsModified: false,\n      mtlsMode: props.mtlsMode,\n      clientCertificate: props.clientCertificate,\n      privateKey: props.privateKey,\n      caCertificates: props.caCertificates,\n      addLoadBalancer: props.hasLoadBalancer,\n      simpleLB: props.loadBalancer && props.loadBalancer.simple !== undefined && props.loadBalancer.simple !== null,\n      consistentHashType: consistentHashType,\n      loadBalancer: props.loadBalancer,\n      peerAuthnSelector: {\n        addPeerAuthentication: props.hasPeerAuthentication,\n        addPeerAuthnModified: false,\n        mode: props.peerAuthenticationMode\n      },\n      addConnectionPool: props.addConnectionPool,\n      connectionPool: props.connectionPool,\n      addOutlierDetection: props.addOutlierDetection,\n      outlierDetection: props.outlierDetection\n    };\n  }\n\n  componentDidMount(): void {\n    const meshWideStatus = this.props.meshWideStatus || MTLSStatuses.NOT_ENABLED;\n    const nsWideStatus = this.props.nsWideStatus ? this.props.nsWideStatus.status : MTLSStatuses.NOT_ENABLED;\n    const isMtlsEnabled = nsWideMTLSStatus(nsWideStatus, meshWideStatus);\n    // If there is a previous value, use it\n    if (this.props.mtlsMode !== '' && this.props.mtlsMode !== UNSET) {\n      // Don't forget to update the mtlsMode\n      this.setState(\n        {\n          tlsModified: true,\n          mtlsMode: this.props.mtlsMode\n        },\n        () => this.props.onTrafficPolicyChange(true, this.state)\n      );\n      // otherwise, if there is MTLS enabled, use ISTIO_MUTUAL\n    } else if (isMtlsEnabled === MTLSStatuses.ENABLED) {\n      this.setState(\n        {\n          tlsModified: true,\n          mtlsMode: ISTIO_MUTUAL\n        },\n        () => this.props.onTrafficPolicyChange(true, this.state)\n      );\n    }\n  }\n\n  isValidDuration = (ttl: string): boolean => {\n    if (ttl.length === 0) {\n      return false;\n    }\n    return ttl.search(durationRegex) === 0;\n  };\n\n  isValidCookie = (cookie: HTTPCookie): boolean => {\n    if (\n      !cookie.name ||\n      cookie.name.length === 0 ||\n      !cookie.ttl ||\n      cookie.ttl.length === 0 ||\n      !this.isValidDuration(cookie.ttl)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  isValidLB = (state: TrafficPolicyState): boolean => {\n    if (!state.addLoadBalancer) {\n      return true;\n    }\n    if (state.simpleLB) {\n      // No need to check more as user select the simple LB from a list\n      return true;\n    }\n    // No need to enter to check inside consistentHash\n    if (state.consistentHashType === ConsistentHashType.USE_SOURCE_IP) {\n      return true;\n    }\n    if (!state.loadBalancer.consistentHash) {\n      return false;\n    }\n    switch (state.consistentHashType) {\n      case ConsistentHashType.HTTP_HEADER_NAME:\n        return state.loadBalancer.consistentHash && state.loadBalancer.consistentHash.httpHeaderName\n          ? state.loadBalancer.consistentHash.httpHeaderName.length > 0\n          : false;\n      case ConsistentHashType.HTTP_COOKIE:\n        return state.loadBalancer.consistentHash && state.loadBalancer.consistentHash.httpCookie\n          ? this.isValidCookie(state.loadBalancer.consistentHash.httpCookie)\n          : false;\n      default:\n        return true;\n    }\n  };\n\n  isValidTLS = (state: TrafficPolicyState): boolean => {\n    return state.mtlsMode !== undefined;\n  };\n\n  onFormChange = (component: TrafficPolicyForm, value: string) => {\n    switch (component) {\n      case TrafficPolicyForm.TLS:\n        this.setState(\n          {\n            tlsModified: true,\n            mtlsMode: value\n          },\n          () =>\n            this.props.onTrafficPolicyChange(\n              this.state.mtlsMode === MUTUAL\n                ? this.state.clientCertificate.length > 0 && this.state.privateKey.length > 0\n                : true,\n              this.state\n            )\n        );\n        break;\n      case TrafficPolicyForm.TLS_CLIENT_CERTIFICATE:\n        this.setState(\n          {\n            tlsModified: true,\n            clientCertificate: value\n          },\n          () =>\n            this.props.onTrafficPolicyChange(\n              this.state.mtlsMode === MUTUAL &&\n                this.state.clientCertificate.length > 0 &&\n                this.state.privateKey.length > 0,\n              this.state\n            )\n        );\n        break;\n      case TrafficPolicyForm.TLS_PRIVATE_KEY:\n        this.setState(\n          {\n            tlsModified: true,\n            privateKey: value\n          },\n          () =>\n            this.props.onTrafficPolicyChange(\n              this.state.mtlsMode === MUTUAL &&\n                this.state.clientCertificate.length > 0 &&\n                this.state.privateKey.length > 0,\n              this.state\n            )\n        );\n        break;\n      case TrafficPolicyForm.TLS_CA_CERTIFICATES:\n        this.setState(\n          {\n            tlsModified: true,\n            caCertificates: value\n          },\n          () =>\n            this.props.onTrafficPolicyChange(\n              this.state.mtlsMode === MUTUAL &&\n                this.state.clientCertificate.length > 0 &&\n                this.state.privateKey.length > 0,\n              this.state\n            )\n        );\n        break;\n      case TrafficPolicyForm.LB_SWITCH:\n        this.setState(\n          prevState => {\n            return {\n              addLoadBalancer: !prevState.addLoadBalancer\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_SIMPLE:\n        this.setState(\n          prevState => {\n            const loadBalancer = prevState.loadBalancer;\n            loadBalancer.simple = value;\n            return {\n              loadBalancer: loadBalancer\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_SELECT:\n        this.setState(\n          prevState => {\n            // Set a LB simple default value if not present\n            if (!prevState.loadBalancer || !prevState.loadBalancer.simple) {\n              prevState.loadBalancer.simple = ROUND_ROBIN;\n            }\n            return {\n              simpleLB: value === 'true'\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_CONSISTENT_HASH:\n        this.setState(\n          prevState => {\n            const loadBalancer = prevState.loadBalancer;\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            }\n            if (ConsistentHashType[value] === ConsistentHashType.USE_SOURCE_IP) {\n              loadBalancer.consistentHash.useSourceIp = true;\n            }\n            return {\n              consistentHashType: ConsistentHashType[value]\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_HTTP_HEADER_NAME:\n        this.setState(\n          prevState => {\n            const loadBalancer = prevState.loadBalancer;\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            }\n            loadBalancer.consistentHash.httpHeaderName = value;\n            return {\n              loadBalancer: loadBalancer\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_HTTP_COOKIE_NAME:\n        this.setState(\n          prevState => {\n            const loadBalancer = prevState.loadBalancer;\n            if (!loadBalancer.consistentHash) {\n              loadBalancer.consistentHash = {};\n            } else {\n              if (!loadBalancer.consistentHash.httpCookie) {\n                loadBalancer.consistentHash.httpCookie = {\n                  name: '',\n                  ttl: ''\n                };\n              } else {\n                loadBalancer.consistentHash.httpCookie.name = value;\n              }\n            }\n            return {\n              loadBalancer: loadBalancer\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.LB_HTTP_COOKIE_TTL:\n        this.setState(\n          prevState => {\n            const consistentHash = prevState.loadBalancer ? prevState.loadBalancer.consistentHash : {};\n            if (consistentHash) {\n              if (!consistentHash.httpCookie) {\n                consistentHash.httpCookie = {\n                  name: '',\n                  ttl: ''\n                };\n              } else {\n                consistentHash.httpCookie.ttl = value;\n              }\n            }\n            return {\n              loadBalancer: {\n                consistentHash: consistentHash\n              }\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidLB(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.PA_SWITCH:\n        this.setState(\n          prevState => {\n            return {\n              peerAuthnSelector: {\n                addPeerAuthentication: !prevState.peerAuthnSelector.addPeerAuthentication,\n                addPeerAuthnModified: !prevState.peerAuthnSelector.addPeerAuthnModified,\n                mode: prevState.peerAuthnSelector.mode\n              }\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidTLS(this.state), this.state)\n        );\n        break;\n      case TrafficPolicyForm.PA_MODE:\n        this.setState(\n          prevState => {\n            return {\n              peerAuthnSelector: {\n                addPeerAuthentication: prevState.peerAuthnSelector.addPeerAuthentication,\n                addPeerAuthnModified: prevState.peerAuthnSelector.addPeerAuthnModified,\n                mode: value as PeerAuthenticationMutualTLSMode\n              }\n            };\n          },\n          () => this.props.onTrafficPolicyChange(this.isValidTLS(this.state), this.state)\n        );\n        break;\n      default:\n      // No default action\n    }\n  };\n\n  render() {\n    const isValidLB = this.isValidLB(this.state);\n    return (\n      <Form isHorizontal={true}>\n        <FormGroup\n          label=\"TLS\"\n          fieldId=\"advanced-tls\"\n          helperText=\"TLS related settings for connections to the upstream service.\"\n        >\n          <FormSelect\n            value={this.state.mtlsMode}\n            onChange={(mtlsMode: string) => this.onFormChange(TrafficPolicyForm.TLS, mtlsMode)}\n            id=\"advanced-tls\"\n            name=\"advanced-tls\"\n          >\n            {mTLSMode.map(mode => (\n              <FormSelectOption key={mode} value={mode} label={mode} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        {this.state.mtlsMode === MUTUAL && (\n          <>\n            <FormGroup\n              label=\"Client Certificate\"\n              fieldId=\"clientCertificate\"\n              isValid={this.state.clientCertificate.length > 0}\n              helperTextInvalid=\"Client Certificate must be non empty\"\n            >\n              <TextInput\n                value={this.state.clientCertificate}\n                onChange={value => this.onFormChange(TrafficPolicyForm.TLS_CLIENT_CERTIFICATE, value)}\n                id=\"clientCertificate\"\n                name=\"clientCertificate\"\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Private Key\"\n              fieldId=\"privateKey\"\n              isValid={this.state.privateKey.length > 0}\n              helperTextInvalid=\"Private Key must be non empty\"\n            >\n              <TextInput\n                value={this.state.privateKey}\n                onChange={value => this.onFormChange(TrafficPolicyForm.TLS_PRIVATE_KEY, value)}\n                id=\"privateKey\"\n                name=\"privateKey\"\n              />\n            </FormGroup>\n            <FormGroup label=\"CA Certificates\" fieldId=\"caCertificates\">\n              <TextInput\n                value={this.state.caCertificates}\n                onChange={value => this.onFormChange(TrafficPolicyForm.TLS_CA_CERTIFICATES, value)}\n                id=\"caCertificates\"\n                name=\"caCertificates\"\n              />\n            </FormGroup>\n          </>\n        )}\n        <FormGroup label=\"Add PeerAuthentication\" fieldId=\"advanced-paSwitch\">\n          <Switch\n            id=\"advanced-paSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.peerAuthnSelector.addPeerAuthentication}\n            onChange={() => this.onFormChange(TrafficPolicyForm.PA_SWITCH, '')}\n          />\n          <span>{wizardTooltip(PEER_AUTHENTICATION_TOOLTIP)}</span>\n        </FormGroup>\n        {this.state.peerAuthnSelector.addPeerAuthentication && (\n          <FormGroup fieldId=\"advanced-pa-mode\" label=\"Mode\">\n            <FormSelect\n              value={this.state.peerAuthnSelector.mode}\n              onChange={(mode: string) => this.onFormChange(TrafficPolicyForm.PA_MODE, mode)}\n              id=\"trafficPolicy-pa-mode\"\n              name=\"trafficPolicy-pa-mode\"\n            >\n              {Object.keys(PeerAuthenticationMutualTLSMode).map(mode => (\n                <FormSelectOption key={mode} value={mode} label={mode} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n        )}\n        <FormGroup label=\"Add LoadBalancer\" fieldId=\"advanced-lbSwitch\">\n          <Switch\n            id=\"advanced-lbSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addLoadBalancer}\n            onChange={() => this.onFormChange(TrafficPolicyForm.LB_SWITCH, '')}\n          />\n          {wizardTooltip(LOAD_BALANCER_TOOLTIP)}\n        </FormGroup>\n        {this.state.addLoadBalancer && (\n          <>\n            <FormGroup fieldId=\"selectLBType\">\n              <Radio\n                id=\"selectLBTypeSimple\"\n                name=\"selectLBType\"\n                label=\"Simple\"\n                isDisabled={!this.state.addLoadBalancer}\n                isChecked={this.state.simpleLB}\n                onChange={() => this.onFormChange(TrafficPolicyForm.LB_SELECT, 'true')}\n              />\n              <Radio\n                id=\"selectLBTypeConsistentHash\"\n                name=\"selectLBType\"\n                label=\"Consistent Hash\"\n                isDisabled={!this.state.addLoadBalancer}\n                isChecked={!this.state.simpleLB}\n                onChange={() => this.onFormChange(TrafficPolicyForm.LB_SELECT, 'false')}\n              />\n            </FormGroup>\n            {this.state.simpleLB && (\n              <FormGroup fieldId=\"advanced-loadbalancer\" label=\"LoadBalancer\">\n                <FormSelect\n                  value={this.state.loadBalancer.simple}\n                  onChange={(simple: string) => this.onFormChange(TrafficPolicyForm.LB_SIMPLE, simple)}\n                  id=\"trafficPolicy-lb\"\n                  name=\"trafficPolicy-lb\"\n                >\n                  {loadBalancerSimple.map(simple => (\n                    <FormSelectOption key={simple} value={simple} label={simple} />\n                  ))}\n                </FormSelect>\n              </FormGroup>\n            )}\n            {!this.state.simpleLB && (\n              <FormGroup fieldId=\"selectConsistentHashType\">\n                <Radio\n                  id=\"httpHeaderName\"\n                  name=\"selectConsistentHashType\"\n                  label=\"HTTP Header Name\"\n                  isDisabled={!this.state.addLoadBalancer}\n                  isChecked={this.state.consistentHashType === ConsistentHashType.HTTP_HEADER_NAME}\n                  onChange={() =>\n                    this.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.HTTP_HEADER_NAME)\n                  }\n                />\n                <Radio\n                  id=\"httpCookie\"\n                  name=\"selectConsistentHashType\"\n                  label=\"HTTP Cookie\"\n                  isDisabled={!this.state.addLoadBalancer}\n                  checked={this.state.consistentHashType === ConsistentHashType.HTTP_COOKIE}\n                  onChange={() =>\n                    this.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.HTTP_COOKIE)\n                  }\n                />\n                <Radio\n                  id=\"sourceIp\"\n                  name=\"selectConsistentHashType\"\n                  label=\"Source IP\"\n                  isDisabled={!this.state.addLoadBalancer}\n                  isChecked={this.state.consistentHashType === ConsistentHashType.USE_SOURCE_IP}\n                  onChange={() =>\n                    this.onFormChange(TrafficPolicyForm.LB_CONSISTENT_HASH, ConsistentHashType.USE_SOURCE_IP)\n                  }\n                />\n              </FormGroup>\n            )}\n            {!this.state.simpleLB && this.state.consistentHashType === ConsistentHashType.HTTP_HEADER_NAME && (\n              <FormGroup\n                label=\"HTTP Header Name\"\n                fieldId=\"httpHeaderName\"\n                isValid={isValidLB}\n                disabled={!this.state.addLoadBalancer}\n                helperTextInvalid=\"HTTP Header Name must be non empty\"\n              >\n                <TextInput\n                  value={\n                    this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpHeaderName\n                      ? this.state.loadBalancer.consistentHash.httpHeaderName\n                      : ''\n                  }\n                  id=\"httpHeaderName\"\n                  name=\"httpHeaderName\"\n                  onChange={value => this.onFormChange(TrafficPolicyForm.LB_HTTP_HEADER_NAME, value)}\n                  isValid={isValidLB}\n                />\n              </FormGroup>\n            )}\n            {!this.state.simpleLB && this.state.consistentHashType === ConsistentHashType.HTTP_COOKIE && (\n              <>\n                <FormGroup\n                  label=\"HTTP Cookie Name\"\n                  fieldId=\"httpCookieName\"\n                  isValid={isValidLB}\n                  disabled={!this.state.addLoadBalancer}\n                >\n                  <TextInput\n                    value={\n                      this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpCookie\n                        ? this.state.loadBalancer.consistentHash.httpCookie.name\n                        : ''\n                    }\n                    id=\"httpCookieName\"\n                    name=\"httpCookieName\"\n                    onChange={value => this.onFormChange(TrafficPolicyForm.LB_HTTP_COOKIE_NAME, value)}\n                    isValid={isValidLB}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label=\"HTTP Cookie TTL\"\n                  fieldId=\"httpCookieTtl\"\n                  isValid={isValidLB}\n                  disabled={!this.state.addLoadBalancer}\n                  helperText=\"TTL is expressed in nanoseconds (i.e. 1000, 2000, etc) or seconds (i.e. 10s, 1.5s, etc).\"\n                  helperTextInvalid=\"HTTP Cookie Name must be non empty and TTL must be expressed in in nanoseconds (i.e. 1000, 2000, etc) or seconds (i.e. 10s, 1.5s, etc).\"\n                >\n                  <TextInput\n                    value={\n                      this.state.loadBalancer.consistentHash && this.state.loadBalancer.consistentHash.httpCookie\n                        ? this.state.loadBalancer.consistentHash.httpCookie.ttl\n                        : ''\n                    }\n                    id=\"httpCookieTtl\"\n                    name=\"httpCookieTtl\"\n                    onChange={value => this.onFormChange(TrafficPolicyForm.LB_HTTP_COOKIE_TTL, value)}\n                    isValid={isValidLB}\n                  />\n                </FormGroup>\n              </>\n            )}\n          </>\n        )}\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  meshWideStatus: meshWideMTLSStatusSelector(state)\n});\n\nconst TraffiPolicyContainer = connect(mapStateToProps)(TrafficPolicy);\nexport default TraffiPolicyContainer;\n"]},"metadata":{},"sourceType":"module"}
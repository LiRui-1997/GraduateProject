{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getComputedStyle } from '../utils';\n\nvar SvgDraw = /*#__PURE__*/function () {\n  //CSSStyleDeclaration;\n  function SvgDraw(_value, _key) {\n    var _this = this;\n\n    _classCallCheck(this, SvgDraw);\n\n    this.value = void 0;\n    this.key = void 0;\n    this.computedStyle = void 0;\n    this.root = void 0;\n    this.index = void 0;\n    this.style = {};\n    this.start = {};\n    this.startAt = {};\n    this.target = void 0;\n    this.length = 0;\n\n    this.getAnimStart = function () {\n      var target = _this.target,\n          startAt = _this.startAt,\n          key = _this.key;\n\n      if (!target) {\n        return;\n      }\n\n      if (!_this.computedStyle) {\n        _this.computedStyle = getComputedStyle(target);\n      }\n\n      var computedStyle = _this.computedStyle;\n      var tagName = target.tagName;\n\n      var getAttribute = function getAttribute(str) {\n        return target.getAttribute(str);\n      };\n\n      switch (tagName) {\n        case 'circle':\n          _this.length = Math.PI * 2 * getAttribute('r');\n          break;\n\n        case 'line':\n          _this.length = _this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n          break;\n\n        case 'polyline':\n        case 'polygon':\n          _this.length = _this.getPolyLength(tagName);\n          break;\n\n        case 'ellipse':\n          _this.length = _this.getEllipseLength();\n          break;\n\n        case 'rect':\n          _this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n          break;\n\n        case 'path':\n          _this.length = target.getTotalLength();\n          break;\n\n        default:\n          throw new Error('The label is not a label in the SVG.');\n      }\n\n      _this.length = parseFloat(_this.length.toFixed(3));\n      var strokeDasharray;\n      var strokeDashoffset;\n\n      if (startAt[key] || startAt[key] === 0) {\n        strokeDasharray = _this.setVars(startAt[key]);\n        strokeDashoffset = -strokeDasharray.start;\n      } else {\n        strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n        strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n        strokeDasharray = strokeDasharray.split(' ')[0].replace(/\\,/i, '');\n        strokeDasharray = strokeDasharray.indexOf('%') >= 0 ? parseFloat(strokeDasharray) / 100 * _this.length : parseFloat(strokeDasharray);\n        strokeDasharray = _this.setVars(\"\".concat(-strokeDashoffset, \" \").concat(strokeDasharray - strokeDashoffset));\n      }\n\n      _this.start.strokeDasharray = strokeDasharray;\n      _this.start.strokeDashoffset = strokeDashoffset;\n      _this.value = _this.setVars(_this.value);\n      return _this.start;\n    };\n\n    this.render = function (r) {\n      var value = _this.value,\n          start = _this.start,\n          length = _this.length;\n      var s = start.strokeDasharray,\n          sdf = start.strokeDashoffset;\n      var v = s.end - s.start + (value.end - s.end - (value.start - s.start)) * r;\n      return {\n        strokeDasharray: \"\".concat(v, \"px, \").concat(length, \"px\"),\n        strokeDashoffset: -((value.start + sdf) * r - sdf)\n      };\n    };\n\n    this.value = _value;\n    this.key = _key;\n  }\n\n  _createClass(SvgDraw, [{\n    key: \"setVars\",\n    value: function setVars(value) {\n      var v = {\n        start: 0\n      };\n\n      if (typeof value === 'number') {\n        v.end = value;\n        return v;\n      }\n\n      var data = value.split(' ');\n\n      if (data.length > 1) {\n        v.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n        v.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n      } else if (parseFloat(value)) {\n        v.end = value.indexOf('%') >= 0 ? parseFloat(value) / 100 * this.length : parseFloat(value);\n      } else {\n        throw new Error(\"SVGDraw data[\".concat(value, \"] error.\"));\n      }\n\n      return v;\n    }\n  }, {\n    key: \"getPolyLength\",\n    value: function getPolyLength(name) {\n      var _this2 = this; // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n\n\n      var pointsArray = [];\n      (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n        var arr = pointsArray[Math.floor(i / 2)] || [];\n        arr.push(parseFloat(item));\n\n        if (!(i % 2)) {\n          pointsArray.push(arr);\n        }\n      });\n\n      if (name === 'polygon') {\n        pointsArray.push(pointsArray[0]);\n      }\n\n      var length = 0;\n      pointsArray.forEach(function (item, i) {\n        if (i < pointsArray.length - 1) {\n          var nextPoint = pointsArray[i + 1];\n          length += _this2.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n        }\n      });\n      return length;\n    }\n  }, {\n    key: \"getEllipseLength\",\n    value: function getEllipseLength() {\n      var rx = parseFloat(this.target.getAttribute('rx'));\n      var ry = parseFloat(this.target.getAttribute('ry'));\n\n      if (!rx || !ry) {\n        throw new Error(\"ellipse rx or ry error.\");\n      }\n\n      return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(x1, y1, x2, y2) {\n      var x = parseFloat(x2) - parseFloat(x1);\n      var y = parseFloat(y2) - parseFloat(y1);\n      return Math.sqrt(x * x + y * y);\n    }\n  }]);\n\n  return SvgDraw;\n}();\n\nSvgDraw.key = 'style';\nSvgDraw.className = 'SVGDraw';\nexport { SvgDraw as default };","map":{"version":3,"sources":["/root/GraduateProject/node_modules/tween-one/es/plugins/SvgDrawPlugin.js"],"names":["_classCallCheck","_createClass","getComputedStyle","SvgDraw","_value","_key","_this","value","key","computedStyle","root","index","style","start","startAt","target","length","getAnimStart","tagName","getAttribute","str","Math","PI","getLineLength","getPolyLength","getEllipseLength","getTotalLength","Error","parseFloat","toFixed","strokeDasharray","strokeDashoffset","setVars","split","replace","indexOf","concat","render","r","s","sdf","v","end","data","name","_this2","pointsArray","forEach","item","i","arr","floor","push","nextPoint","rx","ry","sqrt","x1","y1","x2","y2","x","y","className","default"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,SAASC,gBAAT,QAAiC,UAAjC;;AAEA,IAAIC,OAAO,GAAG,aAAa,YAAY;AACrC;AACA,WAASA,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAIC,KAAK,GAAG,IAAZ;;AAEAN,IAAAA,eAAe,CAAC,IAAD,EAAOG,OAAP,CAAf;;AAEA,SAAKI,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,GAAL,GAAW,KAAK,CAAhB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKC,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,MAAL,GAAc,CAAd;;AAEA,SAAKC,YAAL,GAAoB,YAAY;AAC9B,UAAIF,MAAM,GAAGT,KAAK,CAACS,MAAnB;AAAA,UACID,OAAO,GAAGR,KAAK,CAACQ,OADpB;AAAA,UAEIN,GAAG,GAAGF,KAAK,CAACE,GAFhB;;AAIA,UAAI,CAACO,MAAL,EAAa;AACX;AACD;;AAED,UAAI,CAACT,KAAK,CAACG,aAAX,EAA0B;AACxBH,QAAAA,KAAK,CAACG,aAAN,GAAsBP,gBAAgB,CAACa,MAAD,CAAtC;AACD;;AAED,UAAIN,aAAa,GAAGH,KAAK,CAACG,aAA1B;AACA,UAAIS,OAAO,GAAGH,MAAM,CAACG,OAArB;;AAEA,UAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC5C,eAAOL,MAAM,CAACI,YAAP,CAAoBC,GAApB,CAAP;AACD,OAFD;;AAIA,cAAQF,OAAR;AACE,aAAK,QAAL;AACEZ,UAAAA,KAAK,CAACU,MAAN,GAAeK,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcH,YAAY,CAAC,GAAD,CAAzC;AACA;;AAEF,aAAK,MAAL;AACEb,UAAAA,KAAK,CAACU,MAAN,GAAeV,KAAK,CAACiB,aAAN,CAAoBJ,YAAY,CAAC,IAAD,CAAhC,EAAwCA,YAAY,CAAC,IAAD,CAApD,EAA4DA,YAAY,CAAC,IAAD,CAAxE,EAAgFA,YAAY,CAAC,IAAD,CAA5F,CAAf;AACA;;AAEF,aAAK,UAAL;AACA,aAAK,SAAL;AACEb,UAAAA,KAAK,CAACU,MAAN,GAAeV,KAAK,CAACkB,aAAN,CAAoBN,OAApB,CAAf;AACA;;AAEF,aAAK,SAAL;AACEZ,UAAAA,KAAK,CAACU,MAAN,GAAeV,KAAK,CAACmB,gBAAN,EAAf;AACA;;AAEF,aAAK,MAAL;AACEnB,UAAAA,KAAK,CAACU,MAAN,GAAeG,YAAY,CAAC,OAAD,CAAZ,GAAwB,CAAxB,GAA4BA,YAAY,CAAC,QAAD,CAAZ,GAAyB,CAApE;AACA;;AAEF,aAAK,MAAL;AACEb,UAAAA,KAAK,CAACU,MAAN,GAAeD,MAAM,CAACW,cAAP,EAAf;AACA;;AAEF;AACE,gBAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AA3BJ;;AA8BArB,MAAAA,KAAK,CAACU,MAAN,GAAeY,UAAU,CAACtB,KAAK,CAACU,MAAN,CAAaa,OAAb,CAAqB,CAArB,CAAD,CAAzB;AACA,UAAIC,eAAJ;AACA,UAAIC,gBAAJ;;AAEA,UAAIjB,OAAO,CAACN,GAAD,CAAP,IAAgBM,OAAO,CAACN,GAAD,CAAP,KAAiB,CAArC,EAAwC;AACtCsB,QAAAA,eAAe,GAAGxB,KAAK,CAAC0B,OAAN,CAAclB,OAAO,CAACN,GAAD,CAArB,CAAlB;AACAuB,QAAAA,gBAAgB,GAAG,CAACD,eAAe,CAACjB,KAApC;AACD,OAHD,MAGO;AACLiB,QAAAA,eAAe,GAAGrB,aAAa,CAACqB,eAAd,KAAkC,MAAlC,IAA4C,CAACrB,aAAa,CAACqB,eAA3D,GAA6E,WAA7E,GAA2FrB,aAAa,CAACqB,eAA3H;AACAC,QAAAA,gBAAgB,GAAGH,UAAU,CAACnB,aAAa,CAACsB,gBAAf,CAA7B;AACAD,QAAAA,eAAe,GAAGA,eAAe,CAACG,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,EAA8BC,OAA9B,CAAsC,KAAtC,EAA6C,EAA7C,CAAlB;AACAJ,QAAAA,eAAe,GAAGA,eAAe,CAACK,OAAhB,CAAwB,GAAxB,KAAgC,CAAhC,GAAoCP,UAAU,CAACE,eAAD,CAAV,GAA8B,GAA9B,GAAoCxB,KAAK,CAACU,MAA9E,GAAuFY,UAAU,CAACE,eAAD,CAAnH;AACAA,QAAAA,eAAe,GAAGxB,KAAK,CAAC0B,OAAN,CAAc,GAAGI,MAAH,CAAU,CAACL,gBAAX,EAA6B,GAA7B,EAAkCK,MAAlC,CAAyCN,eAAe,GAAGC,gBAA3D,CAAd,CAAlB;AACD;;AAEDzB,MAAAA,KAAK,CAACO,KAAN,CAAYiB,eAAZ,GAA8BA,eAA9B;AACAxB,MAAAA,KAAK,CAACO,KAAN,CAAYkB,gBAAZ,GAA+BA,gBAA/B;AACAzB,MAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAAC0B,OAAN,CAAc1B,KAAK,CAACC,KAApB,CAAd;AACA,aAAOD,KAAK,CAACO,KAAb;AACD,KArED;;AAuEA,SAAKwB,MAAL,GAAc,UAAUC,CAAV,EAAa;AACzB,UAAI/B,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,UACIM,KAAK,GAAGP,KAAK,CAACO,KADlB;AAAA,UAEIG,MAAM,GAAGV,KAAK,CAACU,MAFnB;AAGA,UAAIuB,CAAC,GAAG1B,KAAK,CAACiB,eAAd;AAAA,UACIU,GAAG,GAAG3B,KAAK,CAACkB,gBADhB;AAEA,UAAIU,CAAC,GAAGF,CAAC,CAACG,GAAF,GAAQH,CAAC,CAAC1B,KAAV,GAAkB,CAACN,KAAK,CAACmC,GAAN,GAAYH,CAAC,CAACG,GAAd,IAAqBnC,KAAK,CAACM,KAAN,GAAc0B,CAAC,CAAC1B,KAArC,CAAD,IAAgDyB,CAA1E;AACA,aAAO;AACLR,QAAAA,eAAe,EAAE,GAAGM,MAAH,CAAUK,CAAV,EAAa,MAAb,EAAqBL,MAArB,CAA4BpB,MAA5B,EAAoC,IAApC,CADZ;AAELe,QAAAA,gBAAgB,EAAE,EAAE,CAACxB,KAAK,CAACM,KAAN,GAAc2B,GAAf,IAAsBF,CAAtB,GAA0BE,GAA5B;AAFb,OAAP;AAID,KAXD;;AAaA,SAAKjC,KAAL,GAAaH,MAAb;AACA,SAAKI,GAAL,GAAWH,IAAX;AACD;;AAEDJ,EAAAA,YAAY,CAACE,OAAD,EAAU,CAAC;AACrBK,IAAAA,GAAG,EAAE,SADgB;AAErBD,IAAAA,KAAK,EAAE,SAASyB,OAAT,CAAiBzB,KAAjB,EAAwB;AAC7B,UAAIkC,CAAC,GAAG;AACN5B,QAAAA,KAAK,EAAE;AADD,OAAR;;AAIA,UAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAC7BkC,QAAAA,CAAC,CAACC,GAAF,GAAQnC,KAAR;AACA,eAAOkC,CAAP;AACD;;AAED,UAAIE,IAAI,GAAGpC,KAAK,CAAC0B,KAAN,CAAY,GAAZ,CAAX;;AAEA,UAAIU,IAAI,CAAC3B,MAAL,GAAc,CAAlB,EAAqB;AACnByB,QAAAA,CAAC,CAAC5B,KAAF,GAAU8B,IAAI,CAAC,CAAD,CAAJ,CAAQR,OAAR,CAAgB,GAAhB,KAAwB,CAAxB,GAA4BP,UAAU,CAACe,IAAI,CAAC,CAAD,CAAL,CAAV,GAAsB,GAAtB,GAA4B,KAAK3B,MAA7D,GAAsEY,UAAU,CAACe,IAAI,CAAC,CAAD,CAAL,CAA1F;AACAF,QAAAA,CAAC,CAACC,GAAF,GAAQC,IAAI,CAAC,CAAD,CAAJ,CAAQR,OAAR,CAAgB,GAAhB,KAAwB,CAAxB,GAA4BP,UAAU,CAACe,IAAI,CAAC,CAAD,CAAL,CAAV,GAAsB,GAAtB,GAA4B,KAAK3B,MAA7D,GAAsEY,UAAU,CAACe,IAAI,CAAC,CAAD,CAAL,CAAxF;AACD,OAHD,MAGO,IAAIf,UAAU,CAACrB,KAAD,CAAd,EAAuB;AAC5BkC,QAAAA,CAAC,CAACC,GAAF,GAAQnC,KAAK,CAAC4B,OAAN,CAAc,GAAd,KAAsB,CAAtB,GAA0BP,UAAU,CAACrB,KAAD,CAAV,GAAoB,GAApB,GAA0B,KAAKS,MAAzD,GAAkEY,UAAU,CAACrB,KAAD,CAApF;AACD,OAFM,MAEA;AACL,cAAM,IAAIoB,KAAJ,CAAU,gBAAgBS,MAAhB,CAAuB7B,KAAvB,EAA8B,UAA9B,CAAV,CAAN;AACD;;AAED,aAAOkC,CAAP;AACD;AAxBoB,GAAD,EAyBnB;AACDjC,IAAAA,GAAG,EAAE,eADJ;AAEDD,IAAAA,KAAK,EAAE,SAASiB,aAAT,CAAuBoB,IAAvB,EAA6B;AAClC,UAAIC,MAAM,GAAG,IAAb,CADkC,CAGlC;;;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,OAAC,KAAK/B,MAAL,CAAYI,YAAZ,CAAyB,QAAzB,KAAsC,EAAvC,EAA2Cc,KAA3C,CAAiD,SAAjD,EAA4Dc,OAA5D,CAAoE,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACrF,YAAIC,GAAG,GAAGJ,WAAW,CAACzB,IAAI,CAAC8B,KAAL,CAAWF,CAAC,GAAG,CAAf,CAAD,CAAX,IAAkC,EAA5C;AACAC,QAAAA,GAAG,CAACE,IAAJ,CAASxB,UAAU,CAACoB,IAAD,CAAnB;;AAEA,YAAI,EAAEC,CAAC,GAAG,CAAN,CAAJ,EAAc;AACZH,UAAAA,WAAW,CAACM,IAAZ,CAAiBF,GAAjB;AACD;AACF,OAPD;;AASA,UAAIN,IAAI,KAAK,SAAb,EAAwB;AACtBE,QAAAA,WAAW,CAACM,IAAZ,CAAiBN,WAAW,CAAC,CAAD,CAA5B;AACD;;AAED,UAAI9B,MAAM,GAAG,CAAb;AACA8B,MAAAA,WAAW,CAACC,OAAZ,CAAoB,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACrC,YAAIA,CAAC,GAAGH,WAAW,CAAC9B,MAAZ,GAAqB,CAA7B,EAAgC;AAC9B,cAAIqC,SAAS,GAAGP,WAAW,CAACG,CAAC,GAAG,CAAL,CAA3B;AACAjC,UAAAA,MAAM,IAAI6B,MAAM,CAACtB,aAAP,CAAqByB,IAAI,CAAC,CAAD,CAAzB,EAA8BA,IAAI,CAAC,CAAD,CAAlC,EAAuCK,SAAS,CAAC,CAAD,CAAhD,EAAqDA,SAAS,CAAC,CAAD,CAA9D,CAAV;AACD;AACF,OALD;AAMA,aAAOrC,MAAP;AACD;AA5BA,GAzBmB,EAsDnB;AACDR,IAAAA,GAAG,EAAE,kBADJ;AAEDD,IAAAA,KAAK,EAAE,SAASkB,gBAAT,GAA4B;AACjC,UAAI6B,EAAE,GAAG1B,UAAU,CAAC,KAAKb,MAAL,CAAYI,YAAZ,CAAyB,IAAzB,CAAD,CAAnB;AACA,UAAIoC,EAAE,GAAG3B,UAAU,CAAC,KAAKb,MAAL,CAAYI,YAAZ,CAAyB,IAAzB,CAAD,CAAnB;;AAEA,UAAI,CAACmC,EAAD,IAAO,CAACC,EAAZ,EAAgB;AACd,cAAM,IAAI5B,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,aAAON,IAAI,CAACC,EAAL,IAAW,KAAKgC,EAAE,GAAGC,EAAV,IAAgBlC,IAAI,CAACmC,IAAL,CAAU,CAAC,IAAIF,EAAJ,GAASC,EAAV,KAAiB,IAAIA,EAAJ,GAASD,EAA1B,CAAV,CAA3B,CAAP;AACD;AAXA,GAtDmB,EAkEnB;AACD9C,IAAAA,GAAG,EAAE,eADJ;AAEDD,IAAAA,KAAK,EAAE,SAASgB,aAAT,CAAuBkC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuC;AAC5C,UAAIC,CAAC,GAAGjC,UAAU,CAAC+B,EAAD,CAAV,GAAiB/B,UAAU,CAAC6B,EAAD,CAAnC;AACA,UAAIK,CAAC,GAAGlC,UAAU,CAACgC,EAAD,CAAV,GAAiBhC,UAAU,CAAC8B,EAAD,CAAnC;AACA,aAAOrC,IAAI,CAACmC,IAAL,CAAUK,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAtB,CAAP;AACD;AANA,GAlEmB,CAAV,CAAZ;;AA2EA,SAAO3D,OAAP;AACD,CAtL0B,EAA3B;;AAwLAA,OAAO,CAACK,GAAR,GAAc,OAAd;AACAL,OAAO,CAAC4D,SAAR,GAAoB,SAApB;AACA,SAAS5D,OAAO,IAAI6D,OAApB","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getComputedStyle } from '../utils';\n\nvar SvgDraw = /*#__PURE__*/function () {\n  //CSSStyleDeclaration;\n  function SvgDraw(_value, _key) {\n    var _this = this;\n\n    _classCallCheck(this, SvgDraw);\n\n    this.value = void 0;\n    this.key = void 0;\n    this.computedStyle = void 0;\n    this.root = void 0;\n    this.index = void 0;\n    this.style = {};\n    this.start = {};\n    this.startAt = {};\n    this.target = void 0;\n    this.length = 0;\n\n    this.getAnimStart = function () {\n      var target = _this.target,\n          startAt = _this.startAt,\n          key = _this.key;\n\n      if (!target) {\n        return;\n      }\n\n      if (!_this.computedStyle) {\n        _this.computedStyle = getComputedStyle(target);\n      }\n\n      var computedStyle = _this.computedStyle;\n      var tagName = target.tagName;\n\n      var getAttribute = function getAttribute(str) {\n        return target.getAttribute(str);\n      };\n\n      switch (tagName) {\n        case 'circle':\n          _this.length = Math.PI * 2 * getAttribute('r');\n          break;\n\n        case 'line':\n          _this.length = _this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n          break;\n\n        case 'polyline':\n        case 'polygon':\n          _this.length = _this.getPolyLength(tagName);\n          break;\n\n        case 'ellipse':\n          _this.length = _this.getEllipseLength();\n          break;\n\n        case 'rect':\n          _this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n          break;\n\n        case 'path':\n          _this.length = target.getTotalLength();\n          break;\n\n        default:\n          throw new Error('The label is not a label in the SVG.');\n      }\n\n      _this.length = parseFloat(_this.length.toFixed(3));\n      var strokeDasharray;\n      var strokeDashoffset;\n\n      if (startAt[key] || startAt[key] === 0) {\n        strokeDasharray = _this.setVars(startAt[key]);\n        strokeDashoffset = -strokeDasharray.start;\n      } else {\n        strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n        strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n        strokeDasharray = strokeDasharray.split(' ')[0].replace(/\\,/i, '');\n        strokeDasharray = strokeDasharray.indexOf('%') >= 0 ? parseFloat(strokeDasharray) / 100 * _this.length : parseFloat(strokeDasharray);\n        strokeDasharray = _this.setVars(\"\".concat(-strokeDashoffset, \" \").concat(strokeDasharray - strokeDashoffset));\n      }\n\n      _this.start.strokeDasharray = strokeDasharray;\n      _this.start.strokeDashoffset = strokeDashoffset;\n      _this.value = _this.setVars(_this.value);\n      return _this.start;\n    };\n\n    this.render = function (r) {\n      var value = _this.value,\n          start = _this.start,\n          length = _this.length;\n      var s = start.strokeDasharray,\n          sdf = start.strokeDashoffset;\n      var v = s.end - s.start + (value.end - s.end - (value.start - s.start)) * r;\n      return {\n        strokeDasharray: \"\".concat(v, \"px, \").concat(length, \"px\"),\n        strokeDashoffset: -((value.start + sdf) * r - sdf)\n      };\n    };\n\n    this.value = _value;\n    this.key = _key;\n  }\n\n  _createClass(SvgDraw, [{\n    key: \"setVars\",\n    value: function setVars(value) {\n      var v = {\n        start: 0\n      };\n\n      if (typeof value === 'number') {\n        v.end = value;\n        return v;\n      }\n\n      var data = value.split(' ');\n\n      if (data.length > 1) {\n        v.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n        v.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n      } else if (parseFloat(value)) {\n        v.end = value.indexOf('%') >= 0 ? parseFloat(value) / 100 * this.length : parseFloat(value);\n      } else {\n        throw new Error(\"SVGDraw data[\".concat(value, \"] error.\"));\n      }\n\n      return v;\n    }\n  }, {\n    key: \"getPolyLength\",\n    value: function getPolyLength(name) {\n      var _this2 = this;\n\n      // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n      var pointsArray = [];\n      (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n        var arr = pointsArray[Math.floor(i / 2)] || [];\n        arr.push(parseFloat(item));\n\n        if (!(i % 2)) {\n          pointsArray.push(arr);\n        }\n      });\n\n      if (name === 'polygon') {\n        pointsArray.push(pointsArray[0]);\n      }\n\n      var length = 0;\n      pointsArray.forEach(function (item, i) {\n        if (i < pointsArray.length - 1) {\n          var nextPoint = pointsArray[i + 1];\n          length += _this2.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n        }\n      });\n      return length;\n    }\n  }, {\n    key: \"getEllipseLength\",\n    value: function getEllipseLength() {\n      var rx = parseFloat(this.target.getAttribute('rx'));\n      var ry = parseFloat(this.target.getAttribute('ry'));\n\n      if (!rx || !ry) {\n        throw new Error(\"ellipse rx or ry error.\");\n      }\n\n      return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(x1, y1, x2, y2) {\n      var x = parseFloat(x2) - parseFloat(x1);\n      var y = parseFloat(y2) - parseFloat(y1);\n      return Math.sqrt(x * x + y * y);\n    }\n  }]);\n\n  return SvgDraw;\n}();\n\nSvgDraw.key = 'style';\nSvgDraw.className = 'SVGDraw';\nexport { SvgDraw as default };"]},"metadata":{},"sourceType":"module"}
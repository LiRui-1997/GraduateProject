{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelCommon.tsx\";\n\nimport * as React from 'react';\nimport { style } from 'typestyle';\nimport { NodeType, BoxByType } from '../../types/Graph';\nimport * as API from '../../services/Api';\nimport { decoratedNodeData } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\nexport var NodeMetricType;\n\n(function (NodeMetricType) {\n  NodeMetricType[NodeMetricType[\"APP\"] = 1] = \"APP\";\n  NodeMetricType[NodeMetricType[\"WORKLOAD\"] = 2] = \"WORKLOAD\";\n  NodeMetricType[NodeMetricType[\"SERVICE\"] = 3] = \"SERVICE\";\n  NodeMetricType[NodeMetricType[\"AGGREGATE\"] = 4] = \"AGGREGATE\";\n  NodeMetricType[NodeMetricType[\"CLUSTER\"] = 5] = \"CLUSTER\";\n  NodeMetricType[NodeMetricType[\"NAMESPACE\"] = 6] = \"NAMESPACE\";\n})(NodeMetricType || (NodeMetricType = {}));\n\nexport var summaryBodyTabs = style({\n  padding: '10px 15px 0 15px'\n});\nexport var summaryHeader = {\n  backgroundColor: PFColors.White\n};\nexport var summaryPanel = style({\n  height: '100%',\n  margin: 0,\n  minWidth: '25em',\n  overflowY: 'scroll',\n  backgroundColor: PFColors.White,\n  width: '25em',\n  fontSize: 'var(--graph-side-panel--font-size)',\n  padding: 0,\n  position: 'relative'\n});\nexport var summaryFont = {\n  fontSize: 'var(--graph-side-panel--font-size)'\n};\nexport var hr = function hr() {\n  return /*#__PURE__*/React.createElement(\"hr\", {\n    style: {\n      margin: '10px 0'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  });\n};\nexport var shouldRefreshData = function shouldRefreshData(prevProps, nextProps) {\n  return (// Verify the time of the last request\n    prevProps.queryTime !== nextProps.queryTime || // Check if going from no data to data\n    !prevProps.data.summaryTarget && nextProps.data.summaryTarget || // Check if the target changed\n    prevProps.data.summaryTarget !== nextProps.data.summaryTarget\n  );\n};\nexport var getNodeMetricType = function getNodeMetricType(nodeData) {\n  switch (nodeData.nodeType) {\n    case NodeType.AGGREGATE:\n      return NodeMetricType.AGGREGATE;\n\n    case NodeType.APP:\n      // treat versioned app like a workload to narrow to the specific version\n      return nodeData.workload ? NodeMetricType.WORKLOAD : NodeMetricType.APP;\n\n    case NodeType.BOX:\n      switch (nodeData.isBox) {\n        case BoxByType.APP:\n          return NodeMetricType.APP;\n\n        case BoxByType.CLUSTER:\n          return NodeMetricType.CLUSTER;\n\n        case BoxByType.NAMESPACE:\n        default:\n          return NodeMetricType.NAMESPACE;\n      }\n\n    case NodeType.SERVICE:\n      return NodeMetricType.SERVICE;\n\n    default:\n      // treat UNKNOWN as a workload with name=\"unknown\"\n      return NodeMetricType.WORKLOAD;\n  }\n};\nexport var getNodeMetrics = function getNodeMetrics(nodeMetricType, node, props, filters, direction, reporter, requestProtocol, quantiles, byLabels) {\n  var nodeData = decoratedNodeData(node);\n  var options = {\n    queryTime: props.queryTime,\n    duration: props.duration,\n    step: props.step,\n    rateInterval: props.rateInterval,\n    filters: filters,\n    quantiles: quantiles,\n    byLabels: byLabels,\n    direction: direction,\n    reporter: reporter,\n    requestProtocol: requestProtocol\n  };\n\n  switch (nodeMetricType) {\n    case NodeMetricType.AGGREGATE:\n      return API.getAggregateMetrics(nodeData.namespace, nodeData.aggregate, nodeData.aggregateValue, options);\n\n    case NodeMetricType.APP:\n      return API.getAppMetrics(nodeData.namespace, nodeData.app, options);\n\n    case NodeMetricType.SERVICE:\n      return API.getServiceMetrics(nodeData.namespace, nodeData.service, options);\n\n    case NodeMetricType.WORKLOAD:\n      return API.getWorkloadMetrics(nodeData.namespace, nodeData.workload, options);\n\n    default:\n      return Promise.reject(new Error(\"Unknown NodeMetricType: \".concat(nodeMetricType)));\n  }\n};\nexport var mergeMetricsResponses = function mergeMetricsResponses(promises) {\n  return Promise.all(promises).then(function (responses) {\n    var metrics = {};\n    responses.forEach(function (r) {\n      Object.keys(r.data).forEach(function (k) {\n        metrics[k] = r.data[k];\n      });\n    });\n    return {\n      data: metrics\n    };\n  });\n};\nexport var getFirstDatapoints = function getFirstDatapoints(metric) {\n  return metric && metric.length > 0 ? metric[0].datapoints : [];\n};\nexport var getDatapoints = function getDatapoints(metrics, comparator, protocol) {\n  var dpsMap = new Map();\n\n  if (metrics) {\n    for (var i = 0; i < metrics.length; ++i) {\n      var ts = metrics[i];\n\n      if (comparator(ts.labels, protocol)) {\n        // Sum values, because several metrics can satisfy the comparator\n        // E.g. with multiple active namespaces and node being an outsider, we need to sum datapoints for every active namespace\n        ts.datapoints.forEach(function (dp) {\n          var val = Number(dp[1]);\n\n          if (!isNaN(val)) {\n            var current = dpsMap.get(dp[0]);\n            dpsMap.set(dp[0], current ? [dp[0], current[1] + val] : [dp[0], val]);\n          }\n        });\n      }\n    }\n  }\n\n  return Array.from(dpsMap.values());\n};\nexport var renderNoTraffic = function renderNoTraffic(protocol) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), \" No \", protocol ? protocol : '', \" traffic logged.\"));\n};","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelCommon.tsx"],"names":["React","style","NodeType","BoxByType","API","decoratedNodeData","PFColors","KialiIcon","NodeMetricType","summaryBodyTabs","padding","summaryHeader","backgroundColor","White","summaryPanel","height","margin","minWidth","overflowY","width","fontSize","position","summaryFont","hr","shouldRefreshData","prevProps","nextProps","queryTime","data","summaryTarget","getNodeMetricType","nodeData","nodeType","AGGREGATE","APP","workload","WORKLOAD","BOX","isBox","CLUSTER","NAMESPACE","SERVICE","getNodeMetrics","nodeMetricType","node","props","filters","direction","reporter","requestProtocol","quantiles","byLabels","options","duration","step","rateInterval","getAggregateMetrics","namespace","aggregate","aggregateValue","getAppMetrics","app","getServiceMetrics","service","getWorkloadMetrics","Promise","reject","Error","mergeMetricsResponses","promises","all","then","responses","metrics","forEach","r","Object","keys","k","getFirstDatapoints","metric","length","datapoints","getDatapoints","comparator","protocol","dpsMap","Map","i","ts","labels","dp","val","Number","isNaN","current","get","set","Array","from","values","renderNoTraffic"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,EAA2EC,SAA3E,QAA4F,mBAA5F;AAEA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AAGA,SAASC,iBAAT,QAAkC,+CAAlC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AASZ,OAAO,IAAMC,eAAe,GAAGR,KAAK,CAAC;AACnCS,EAAAA,OAAO,EAAE;AAD0B,CAAD,CAA7B;AAIP,OAAO,IAAMC,aAAkC,GAAG;AAChDC,EAAAA,eAAe,EAAEN,QAAQ,CAACO;AADsB,CAA3C;AAIP,OAAO,IAAMC,YAAY,GAAGb,KAAK,CAAC;AAChCc,EAAAA,MAAM,EAAE,MADwB;AAEhCC,EAAAA,MAAM,EAAE,CAFwB;AAGhCC,EAAAA,QAAQ,EAAE,MAHsB;AAIhCC,EAAAA,SAAS,EAAE,QAJqB;AAKhCN,EAAAA,eAAe,EAAEN,QAAQ,CAACO,KALM;AAMhCM,EAAAA,KAAK,EAAE,MANyB;AAOhCC,EAAAA,QAAQ,EAAE,oCAPsB;AAQhCV,EAAAA,OAAO,EAAE,CARuB;AAShCW,EAAAA,QAAQ,EAAE;AATsB,CAAD,CAA1B;AAYP,OAAO,IAAMC,WAAgC,GAAG;AAC9CF,EAAAA,QAAQ,EAAE;AADoC,CAAzC;AAIP,OAAO,IAAMG,EAAE,GAAG,SAALA,EAAK,GAAM;AACtB,sBAAO;AAAI,IAAA,KAAK,EAAE;AAAEP,MAAAA,MAAM,EAAE;AAAV,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFM;AAIP,OAAO,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAkCC,SAAlC,EAAsE;AACrG,SACE;AACAD,IAAAA,SAAS,CAACE,SAAV,KAAwBD,SAAS,CAACC,SAAlC,IACA;AACC,KAACF,SAAS,CAACG,IAAV,CAAeC,aAAhB,IAAiCH,SAAS,CAACE,IAAV,CAAeC,aAFjD,IAGA;AACAJ,IAAAA,SAAS,CAACG,IAAV,CAAeC,aAAf,KAAiCH,SAAS,CAACE,IAAV,CAAeC;AANlD;AAQD,CATM;AAWP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAsD;AACrF,UAAQA,QAAQ,CAACC,QAAjB;AACE,SAAK9B,QAAQ,CAAC+B,SAAd;AACE,aAAOzB,cAAc,CAACyB,SAAtB;;AACF,SAAK/B,QAAQ,CAACgC,GAAd;AACE;AACA,aAAOH,QAAQ,CAACI,QAAT,GAAoB3B,cAAc,CAAC4B,QAAnC,GAA8C5B,cAAc,CAAC0B,GAApE;;AACF,SAAKhC,QAAQ,CAACmC,GAAd;AACE,cAAQN,QAAQ,CAACO,KAAjB;AACE,aAAKnC,SAAS,CAAC+B,GAAf;AACE,iBAAO1B,cAAc,CAAC0B,GAAtB;;AACF,aAAK/B,SAAS,CAACoC,OAAf;AACE,iBAAO/B,cAAc,CAAC+B,OAAtB;;AACF,aAAKpC,SAAS,CAACqC,SAAf;AACA;AACE,iBAAOhC,cAAc,CAACgC,SAAtB;AAPJ;;AASF,SAAKtC,QAAQ,CAACuC,OAAd;AACE,aAAOjC,cAAc,CAACiC,OAAtB;;AACF;AACE;AACA,aAAOjC,cAAc,CAAC4B,QAAtB;AApBJ;AAsBD,CAvBM;AAyBP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,cAD4B,EAE5BC,IAF4B,EAG5BC,KAH4B,EAI5BC,OAJ4B,EAK5BC,SAL4B,EAM5BC,QAN4B,EAO5BC,eAP4B,EAQ5BC,SAR4B,EAS5BC,QAT4B,EAUa;AACzC,MAAMpB,QAAQ,GAAG1B,iBAAiB,CAACuC,IAAD,CAAlC;AACA,MAAMQ,OAA4B,GAAG;AACnCzB,IAAAA,SAAS,EAAEkB,KAAK,CAAClB,SADkB;AAEnC0B,IAAAA,QAAQ,EAAER,KAAK,CAACQ,QAFmB;AAGnCC,IAAAA,IAAI,EAAET,KAAK,CAACS,IAHuB;AAInCC,IAAAA,YAAY,EAAEV,KAAK,CAACU,YAJe;AAKnCT,IAAAA,OAAO,EAAEA,OAL0B;AAMnCI,IAAAA,SAAS,EAAEA,SANwB;AAOnCC,IAAAA,QAAQ,EAAEA,QAPyB;AAQnCJ,IAAAA,SAAS,EAAEA,SARwB;AASnCC,IAAAA,QAAQ,EAAEA,QATyB;AAUnCC,IAAAA,eAAe,EAAEA;AAVkB,GAArC;;AAaA,UAAQN,cAAR;AACE,SAAKnC,cAAc,CAACyB,SAApB;AACE,aAAO7B,GAAG,CAACoD,mBAAJ,CAAwBzB,QAAQ,CAAC0B,SAAjC,EAA4C1B,QAAQ,CAAC2B,SAArD,EAAiE3B,QAAQ,CAAC4B,cAA1E,EAA2FP,OAA3F,CAAP;;AACF,SAAK5C,cAAc,CAAC0B,GAApB;AACE,aAAO9B,GAAG,CAACwD,aAAJ,CAAkB7B,QAAQ,CAAC0B,SAA3B,EAAsC1B,QAAQ,CAAC8B,GAA/C,EAAqDT,OAArD,CAAP;;AACF,SAAK5C,cAAc,CAACiC,OAApB;AACE,aAAOrC,GAAG,CAAC0D,iBAAJ,CAAsB/B,QAAQ,CAAC0B,SAA/B,EAA0C1B,QAAQ,CAACgC,OAAnD,EAA6DX,OAA7D,CAAP;;AACF,SAAK5C,cAAc,CAAC4B,QAApB;AACE,aAAOhC,GAAG,CAAC4D,kBAAJ,CAAuBjC,QAAQ,CAAC0B,SAAhC,EAA2C1B,QAAQ,CAACI,QAApD,EAA+DiB,OAA/D,CAAP;;AACF;AACE,aAAOa,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,mCAAqCxB,cAArC,EAAf,CAAP;AAVJ;AAYD,CArCM;AAuCP,OAAO,IAAMyB,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,QADmC,EAEM;AACzC,SAAOJ,OAAO,CAACK,GAAR,CAAYD,QAAZ,EAAsBE,IAAtB,CAA2B,UAAAC,SAAS,EAAI;AAC7C,QAAMC,OAA0B,GAAG,EAAnC;AACAD,IAAAA,SAAS,CAACE,OAAV,CAAkB,UAAAC,CAAC,EAAI;AACrBC,MAAAA,MAAM,CAACC,IAAP,CAAYF,CAAC,CAAC/C,IAAd,EAAoB8C,OAApB,CAA4B,UAAAI,CAAC,EAAI;AAC/BL,QAAAA,OAAO,CAACK,CAAD,CAAP,GAAaH,CAAC,CAAC/C,IAAF,CAAOkD,CAAP,CAAb;AACD,OAFD;AAGD,KAJD;AAKA,WAAO;AACLlD,MAAAA,IAAI,EAAE6C;AADD,KAAP;AAGD,GAVM,CAAP;AAWD,CAdM;AAgBP,OAAO,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAwC;AACxE,SAAOA,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAA1B,GAA8BD,MAAM,CAAC,CAAD,CAAN,CAAUE,UAAxC,GAAqD,EAA5D;AACD,CAFM;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BV,OAD2B,EAE3BW,UAF2B,EAG3BC,QAH2B,EAIT;AAClB,MAAIC,MAAM,GAAG,IAAIC,GAAJ,EAAb;;AACA,MAAId,OAAJ,EAAa;AACX,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,OAAO,CAACQ,MAA5B,EAAoC,EAAEO,CAAtC,EAAyC;AACvC,UAAMC,EAAE,GAAGhB,OAAO,CAACe,CAAD,CAAlB;;AACA,UAAIJ,UAAU,CAACK,EAAE,CAACC,MAAJ,EAAYL,QAAZ,CAAd,EAAqC;AACnC;AACA;AACAI,QAAAA,EAAE,CAACP,UAAH,CAAcR,OAAd,CAAsB,UAAAiB,EAAE,EAAI;AAC1B,cAAMC,GAAG,GAAGC,MAAM,CAACF,EAAE,CAAC,CAAD,CAAH,CAAlB;;AACA,cAAI,CAACG,KAAK,CAACF,GAAD,CAAV,EAAiB;AACf,gBAAMG,OAAO,GAAGT,MAAM,CAACU,GAAP,CAAWL,EAAE,CAAC,CAAD,CAAb,CAAhB;AACAL,YAAAA,MAAM,CAACW,GAAP,CAAWN,EAAE,CAAC,CAAD,CAAb,EAAkBI,OAAO,GAAG,CAACJ,EAAE,CAAC,CAAD,CAAH,EAAQI,OAAO,CAAC,CAAD,CAAP,GAAaH,GAArB,CAAH,GAA+B,CAACD,EAAE,CAAC,CAAD,CAAH,EAAQC,GAAR,CAAxD;AACD;AACF,SAND;AAOD;AACF;AACF;;AACD,SAAOM,KAAK,CAACC,IAAN,CAAWb,MAAM,CAACc,MAAP,EAAX,CAAP;AACD,CAvBM;AAyBP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAChB,QAAD,EAAuB;AACpD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,UACyBA,QAAQ,GAAGA,QAAH,GAAc,EAD/C,qBADF,CADF;AAOD,CARM","sourcesContent":["import * as React from 'react';\nimport { style } from 'typestyle';\nimport { NodeType, SummaryPanelPropType, Protocol, DecoratedGraphNodeData, BoxByType } from '../../types/Graph';\nimport { IstioMetricsOptions, Reporter, Direction } from '../../types/MetricsOptions';\nimport * as API from '../../services/Api';\nimport * as M from '../../types/Metrics';\nimport { Response } from '../../services/Api';\nimport { decoratedNodeData } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\n\nexport enum NodeMetricType {\n  APP = 1,\n  WORKLOAD = 2,\n  SERVICE = 3,\n  AGGREGATE = 4,\n  CLUSTER = 5,\n  NAMESPACE = 6\n}\n\nexport const summaryBodyTabs = style({\n  padding: '10px 15px 0 15px'\n});\n\nexport const summaryHeader: React.CSSProperties = {\n  backgroundColor: PFColors.White\n};\n\nexport const summaryPanel = style({\n  height: '100%',\n  margin: 0,\n  minWidth: '25em',\n  overflowY: 'scroll',\n  backgroundColor: PFColors.White,\n  width: '25em',\n  fontSize: 'var(--graph-side-panel--font-size)',\n  padding: 0,\n  position: 'relative'\n});\n\nexport const summaryFont: React.CSSProperties = {\n  fontSize: 'var(--graph-side-panel--font-size)'\n};\n\nexport const hr = () => {\n  return <hr style={{ margin: '10px 0' }} />;\n};\n\nexport const shouldRefreshData = (prevProps: SummaryPanelPropType, nextProps: SummaryPanelPropType) => {\n  return (\n    // Verify the time of the last request\n    prevProps.queryTime !== nextProps.queryTime ||\n    // Check if going from no data to data\n    (!prevProps.data.summaryTarget && nextProps.data.summaryTarget) ||\n    // Check if the target changed\n    prevProps.data.summaryTarget !== nextProps.data.summaryTarget\n  );\n};\n\nexport const getNodeMetricType = (nodeData: DecoratedGraphNodeData): NodeMetricType => {\n  switch (nodeData.nodeType) {\n    case NodeType.AGGREGATE:\n      return NodeMetricType.AGGREGATE;\n    case NodeType.APP:\n      // treat versioned app like a workload to narrow to the specific version\n      return nodeData.workload ? NodeMetricType.WORKLOAD : NodeMetricType.APP;\n    case NodeType.BOX:\n      switch (nodeData.isBox) {\n        case BoxByType.APP:\n          return NodeMetricType.APP;\n        case BoxByType.CLUSTER:\n          return NodeMetricType.CLUSTER;\n        case BoxByType.NAMESPACE:\n        default:\n          return NodeMetricType.NAMESPACE;\n      }\n    case NodeType.SERVICE:\n      return NodeMetricType.SERVICE;\n    default:\n      // treat UNKNOWN as a workload with name=\"unknown\"\n      return NodeMetricType.WORKLOAD;\n  }\n};\n\nexport const getNodeMetrics = (\n  nodeMetricType: NodeMetricType,\n  node: any,\n  props: SummaryPanelPropType,\n  filters: Array<string>,\n  direction: Direction,\n  reporter: Reporter,\n  requestProtocol?: string,\n  quantiles?: Array<string>,\n  byLabels?: Array<string>\n): Promise<Response<M.IstioMetricsMap>> => {\n  const nodeData = decoratedNodeData(node);\n  const options: IstioMetricsOptions = {\n    queryTime: props.queryTime,\n    duration: props.duration,\n    step: props.step,\n    rateInterval: props.rateInterval,\n    filters: filters,\n    quantiles: quantiles,\n    byLabels: byLabels,\n    direction: direction,\n    reporter: reporter,\n    requestProtocol: requestProtocol\n  };\n\n  switch (nodeMetricType) {\n    case NodeMetricType.AGGREGATE:\n      return API.getAggregateMetrics(nodeData.namespace, nodeData.aggregate!, nodeData.aggregateValue!, options);\n    case NodeMetricType.APP:\n      return API.getAppMetrics(nodeData.namespace, nodeData.app!, options);\n    case NodeMetricType.SERVICE:\n      return API.getServiceMetrics(nodeData.namespace, nodeData.service!, options);\n    case NodeMetricType.WORKLOAD:\n      return API.getWorkloadMetrics(nodeData.namespace, nodeData.workload!, options);\n    default:\n      return Promise.reject(new Error(`Unknown NodeMetricType: ${nodeMetricType}`));\n  }\n};\n\nexport const mergeMetricsResponses = (\n  promises: Promise<Response<M.IstioMetricsMap>>[]\n): Promise<Response<M.IstioMetricsMap>> => {\n  return Promise.all(promises).then(responses => {\n    const metrics: M.IstioMetricsMap = {};\n    responses.forEach(r => {\n      Object.keys(r.data).forEach(k => {\n        metrics[k] = r.data[k];\n      });\n    });\n    return {\n      data: metrics\n    };\n  });\n};\n\nexport const getFirstDatapoints = (metric?: M.Metric[]): M.Datapoint[] => {\n  return metric && metric.length > 0 ? metric[0].datapoints : [];\n};\n\nexport const getDatapoints = (\n  metrics: M.Metric[] | undefined,\n  comparator: (metric: M.Labels, protocol?: Protocol) => boolean,\n  protocol?: Protocol\n): M.Datapoint[] => {\n  let dpsMap = new Map<number, M.Datapoint>();\n  if (metrics) {\n    for (let i = 0; i < metrics.length; ++i) {\n      const ts = metrics[i];\n      if (comparator(ts.labels, protocol)) {\n        // Sum values, because several metrics can satisfy the comparator\n        // E.g. with multiple active namespaces and node being an outsider, we need to sum datapoints for every active namespace\n        ts.datapoints.forEach(dp => {\n          const val = Number(dp[1]);\n          if (!isNaN(val)) {\n            const current = dpsMap.get(dp[0]);\n            dpsMap.set(dp[0], current ? [dp[0], current[1] + val] : [dp[0], val]);\n          }\n        });\n      }\n    }\n  }\n  return Array.from(dpsMap.values());\n};\n\nexport const renderNoTraffic = (protocol?: string) => {\n  return (\n    <>\n      <div>\n        <KialiIcon.Info /> No {protocol ? protocol : ''} traffic logged.\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { getType } from 'typesafe-actions';\nimport { LoginStatus } from '../store/Store';\nimport { LoginActions } from '../actions/LoginActions';\nimport { updateState } from '../utils/Reducer';\nexport var INITIAL_LOGIN_STATE = {\n  landingRoute: undefined,\n  message: '',\n  session: undefined,\n  status: LoginStatus.loggedOut\n}; // This Reducer allows changes to the 'loginState' portion of Redux Store\n\nvar loginState = function loginState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_LOGIN_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case getType(LoginActions.loginRequest):\n      return _objectSpread(_objectSpread({}, INITIAL_LOGIN_STATE), {}, {\n        landingRoute: state.landingRoute,\n        status: LoginStatus.logging\n      });\n\n    case getType(LoginActions.loginSuccess):\n      return _objectSpread(_objectSpread(_objectSpread({}, INITIAL_LOGIN_STATE), action.payload), {}, {\n        landingRoute: state.landingRoute\n      });\n\n    case getType(LoginActions.loginExtend):\n      return _objectSpread(_objectSpread({}, INITIAL_LOGIN_STATE), {}, {\n        landingRoute: state.landingRoute,\n        status: LoginStatus.loggedIn,\n        session: action.payload.session\n      });\n\n    case getType(LoginActions.loginFailure):\n      var message = 'Error connecting to Kiali';\n      var response_data = action.payload.error.response.data;\n\n      if (response_data && typeof response_data.error == 'string' && response_data.error.length > 0) {\n        message = \"Login unsuccessful: \".concat(response_data.error);\n      } else if (action.payload.error.response.status === 401) {\n        message = 'Unauthorized. The provided credentials are not valid to access Kiali. Please check your credentials and try again.';\n      }\n\n      return _objectSpread(_objectSpread({}, INITIAL_LOGIN_STATE), {}, {\n        landingRoute: state.landingRoute,\n        message: message,\n        status: LoginStatus.error\n      });\n\n    case getType(LoginActions.logoutSuccess):\n      return INITIAL_LOGIN_STATE;\n\n    case getType(LoginActions.sessionExpired):\n      return _objectSpread(_objectSpread({}, INITIAL_LOGIN_STATE), {}, {\n        status: LoginStatus.expired,\n        message: 'Your session has expired or was terminated in another window.'\n      });\n\n    case getType(LoginActions.setLandingRoute):\n      return updateState(state, {\n        landingRoute: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default loginState;","map":{"version":3,"sources":["/root/GraduateProject/src/reducers/LoginState.ts"],"names":["getType","LoginStatus","LoginActions","updateState","INITIAL_LOGIN_STATE","landingRoute","undefined","message","session","status","loggedOut","loginState","state","action","type","loginRequest","logging","loginSuccess","payload","loginExtend","loggedIn","loginFailure","response_data","error","response","data","length","logoutSuccess","sessionExpired","expired","setLandingRoute"],"mappings":";AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAA4CC,WAA5C,QAA+D,gBAA/D;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,IAAMC,mBAAwC,GAAG;AACtDC,EAAAA,YAAY,EAAEC,SADwC;AAEtDC,EAAAA,OAAO,EAAE,EAF6C;AAGtDC,EAAAA,OAAO,EAAEF,SAH6C;AAItDG,EAAAA,MAAM,EAAER,WAAW,CAACS;AAJkC,CAAjD,C,CAOP;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAmG;AAAA,MAAlGC,KAAkG,uEAArER,mBAAqE;AAAA,MAAhDS,MAAgD;;AACpH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,OAAO,CAACE,YAAY,CAACa,YAAd,CAAZ;AACE,6CACKX,mBADL;AAEEC,QAAAA,YAAY,EAAEO,KAAK,CAACP,YAFtB;AAGEI,QAAAA,MAAM,EAAER,WAAW,CAACe;AAHtB;;AAKF,SAAKhB,OAAO,CAACE,YAAY,CAACe,YAAd,CAAZ;AACE,2DACKb,mBADL,GAEKS,MAAM,CAACK,OAFZ;AAGEb,QAAAA,YAAY,EAAEO,KAAK,CAACP;AAHtB;;AAKF,SAAKL,OAAO,CAACE,YAAY,CAACiB,WAAd,CAAZ;AACE,6CACKf,mBADL;AAEEC,QAAAA,YAAY,EAAEO,KAAK,CAACP,YAFtB;AAGEI,QAAAA,MAAM,EAAER,WAAW,CAACmB,QAHtB;AAIEZ,QAAAA,OAAO,EAAEK,MAAM,CAACK,OAAP,CAAeV;AAJ1B;;AAMF,SAAKR,OAAO,CAACE,YAAY,CAACmB,YAAd,CAAZ;AACE,UAAId,OAAO,GAAG,2BAAd;AAEA,UAAMe,aAAa,GAAGT,MAAM,CAACK,OAAP,CAAeK,KAAf,CAAqBC,QAArB,CAA8BC,IAApD;;AACA,UAAIH,aAAa,IAAI,OAAOA,aAAa,CAACC,KAArB,IAA8B,QAA/C,IAA2DD,aAAa,CAACC,KAAd,CAAoBG,MAApB,GAA6B,CAA5F,EAA+F;AAC7FnB,QAAAA,OAAO,iCAA0Be,aAAa,CAACC,KAAxC,CAAP;AACD,OAFD,MAEO,IAAIV,MAAM,CAACK,OAAP,CAAeK,KAAf,CAAqBC,QAArB,CAA8Bf,MAA9B,KAAyC,GAA7C,EAAkD;AACvDF,QAAAA,OAAO,GACL,oHADF;AAED;;AAED,6CACKH,mBADL;AAEEC,QAAAA,YAAY,EAAEO,KAAK,CAACP,YAFtB;AAGEE,QAAAA,OAAO,EAAEA,OAHX;AAIEE,QAAAA,MAAM,EAAER,WAAW,CAACsB;AAJtB;;AAMF,SAAKvB,OAAO,CAACE,YAAY,CAACyB,aAAd,CAAZ;AACE,aAAOvB,mBAAP;;AACF,SAAKJ,OAAO,CAACE,YAAY,CAAC0B,cAAd,CAAZ;AACE,6CACKxB,mBADL;AAEEK,QAAAA,MAAM,EAAER,WAAW,CAAC4B,OAFtB;AAGEtB,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,OAAO,CAACE,YAAY,CAAC4B,eAAd,CAAZ;AACE,aAAO3B,WAAW,CAACS,KAAD,EAAQ;AACxBP,QAAAA,YAAY,EAAEQ,MAAM,CAACK;AADG,OAAR,CAAlB;;AAGF;AACE,aAAON,KAAP;AAlDJ;AAoDD,CArDD;;AAuDA,eAAeD,UAAf","sourcesContent":["import { getType } from 'typesafe-actions';\nimport { LoginState as LoginStateInterface, LoginStatus } from '../store/Store';\nimport { KialiAppAction } from '../actions/KialiAppAction';\nimport { LoginActions } from '../actions/LoginActions';\nimport { updateState } from '../utils/Reducer';\n\nexport const INITIAL_LOGIN_STATE: LoginStateInterface = {\n  landingRoute: undefined,\n  message: '',\n  session: undefined,\n  status: LoginStatus.loggedOut\n};\n\n// This Reducer allows changes to the 'loginState' portion of Redux Store\nconst loginState = (state: LoginStateInterface = INITIAL_LOGIN_STATE, action: KialiAppAction): LoginStateInterface => {\n  switch (action.type) {\n    case getType(LoginActions.loginRequest):\n      return {\n        ...INITIAL_LOGIN_STATE,\n        landingRoute: state.landingRoute,\n        status: LoginStatus.logging\n      };\n    case getType(LoginActions.loginSuccess):\n      return {\n        ...INITIAL_LOGIN_STATE,\n        ...action.payload,\n        landingRoute: state.landingRoute\n      };\n    case getType(LoginActions.loginExtend):\n      return {\n        ...INITIAL_LOGIN_STATE,\n        landingRoute: state.landingRoute,\n        status: LoginStatus.loggedIn,\n        session: action.payload.session\n      };\n    case getType(LoginActions.loginFailure):\n      let message = 'Error connecting to Kiali';\n\n      const response_data = action.payload.error.response.data;\n      if (response_data && typeof response_data.error == 'string' && response_data.error.length > 0) {\n        message = `Login unsuccessful: ${response_data.error}`;\n      } else if (action.payload.error.response.status === 401) {\n        message =\n          'Unauthorized. The provided credentials are not valid to access Kiali. Please check your credentials and try again.';\n      }\n\n      return {\n        ...INITIAL_LOGIN_STATE,\n        landingRoute: state.landingRoute,\n        message: message,\n        status: LoginStatus.error\n      };\n    case getType(LoginActions.logoutSuccess):\n      return INITIAL_LOGIN_STATE;\n    case getType(LoginActions.sessionExpired):\n      return {\n        ...INITIAL_LOGIN_STATE,\n        status: LoginStatus.expired,\n        message: 'Your session has expired or was terminated in another window.'\n      };\n    case getType(LoginActions.setLandingRoute):\n      return updateState(state, {\n        landingRoute: action.payload\n      });\n    default:\n      return state;\n  }\n};\n\nexport default loginState;\n"]},"metadata":{},"sourceType":"module"}
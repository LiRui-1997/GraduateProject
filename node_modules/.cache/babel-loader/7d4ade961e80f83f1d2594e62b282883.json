{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport var collapsible = function collapsible(value, _ref) {\n  var rowIndex = _ref.rowIndex,\n      columnIndex = _ref.columnIndex,\n      rowData = _ref.rowData,\n      column = _ref.column,\n      property = _ref.property;\n  var _column$extraParams = column.extraParams,\n      onCollapse = _column$extraParams.onCollapse,\n      _column$extraParams$r = _column$extraParams.rowLabeledBy,\n      rowLabeledBy = _column$extraParams$r === void 0 ? 'simple-node' : _column$extraParams$r,\n      _column$extraParams$e = _column$extraParams.expandId,\n      expandId = _column$extraParams$e === void 0 ? 'expand-toggle' : _column$extraParams$e;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n\n  function onToggle(event) {\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen, rowData, extraData);\n  }\n\n  return {\n    className: rowData.isOpen !== undefined && css(styles.tableToggle),\n    isVisible: !rowData.fullWidth,\n    children: React.createElement(CollapseColumn, {\n      \"aria-labelledby\": \"\".concat(rowLabeledBy).concat(rowIndex, \" \").concat(expandId).concat(rowIndex),\n      onToggle: onToggle,\n      id: expandId + rowIndex,\n      isOpen: rowData && rowData.isOpen\n    }, value)\n  };\n};\nexport var expandable = function expandable(value, _ref2) {\n  var rowData = _ref2.rowData;\n  return rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\n};\nexport var expandedRow = function expandedRow(colSpan) {\n  var expandedRowFormatter = function expandedRowFormatter(value, _ref3) {\n    var rowIndex = _ref3.rowIndex,\n        rowData = _ref3.rowData,\n        _ref3$column$extraPar = _ref3.column.extraParams.contentId,\n        contentId = _ref3$column$extraPar === void 0 ? 'expanded-content' : _ref3$column$extraPar;\n    return rowData.hasOwnProperty('parent') && {\n      // todo: rewrite this logic, it is not type safe\n      colSpan: colSpan + !!rowData.fullWidth,\n      id: contentId + rowIndex,\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  };\n\n  return expandedRowFormatter;\n};","map":{"version":3,"sources":["/root/GraduateProject/node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/collapsible.js"],"names":["React","css","styles","CollapseColumn","ExpandableRowContent","collapsible","value","rowIndex","columnIndex","rowData","column","property","extraParams","onCollapse","rowLabeledBy","expandId","extraData","onToggle","event","isOpen","className","undefined","tableToggle","isVisible","fullWidth","children","createElement","id","expandable","hasOwnProperty","expandedRow","colSpan","expandedRowFormatter","contentId","noPadding","modifiers"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport const collapsible = (value, {\n  rowIndex,\n  columnIndex,\n  rowData,\n  column,\n  property\n}) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle'\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n\n  function onToggle(event) {\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen, rowData, extraData);\n  }\n\n  return {\n    className: rowData.isOpen !== undefined && css(styles.tableToggle),\n    isVisible: !rowData.fullWidth,\n    children: React.createElement(CollapseColumn, {\n      \"aria-labelledby\": `${rowLabeledBy}${rowIndex} ${expandId}${rowIndex}`,\n      onToggle: onToggle,\n      id: expandId + rowIndex,\n      isOpen: rowData && rowData.isOpen\n    }, value)\n  };\n};\nexport const expandable = (value, {\n  rowData\n}) => rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\nexport const expandedRow = colSpan => {\n  const expandedRowFormatter = (value, {\n    rowIndex,\n    rowData,\n    column: {\n      extraParams: {\n        contentId = 'expanded-content'\n      }\n    }\n  }) => rowData.hasOwnProperty('parent') && {\n    // todo: rewrite this logic, it is not type safe\n    colSpan: colSpan + !!rowData.fullWidth,\n    id: contentId + rowIndex,\n    className: rowData.noPadding && css(styles.modifiers.noPadding)\n  };\n\n  return expandedRowFormatter;\n};\n//# sourceMappingURL=collapsible.js.map"]},"metadata":{},"sourceType":"module"}
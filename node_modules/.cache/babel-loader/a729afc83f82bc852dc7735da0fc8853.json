{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/GraduateProject/src/components/JaegerIntegration/JaegerResults/TraceLabels.tsx\";\n\nimport * as React from 'react';\nimport { Label, pluralize } from '@patternfly/react-core';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { isErrorTag } from 'utils/tracing/TracingHelper';\n\nvar countServices = function countServices(spans) {\n  var services = new Set();\n  spans.forEach(function (s) {\n    return services.add(s.process.serviceName);\n  });\n  return services.size;\n};\n\nvar countErrors = function countErrors(spans) {\n  return spans.filter(function (sp) {\n    return sp.tags.some(isErrorTag);\n  }).length;\n};\n\nexport var TraceLabels = function TraceLabels(p) {\n  var errors = countErrors(p.spans);\n  var filteredErrors = p.filteredSpans ? countErrors(p.filteredSpans) : undefined;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n    style: {\n      margin: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, p.filteredSpans && \"\".concat(p.filteredSpans.length, \" / \"), pluralize(p.spans.length, 'Span')), /*#__PURE__*/React.createElement(Label, {\n    style: {\n      margin: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, p.filteredSpans && \"\".concat(countServices(p.filteredSpans), \" / \"), pluralize(countServices(p.spans), 'App'), \" involved\"), !p.oneline && /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }\n  }), errors === 0 ? /*#__PURE__*/React.createElement(Label, {\n    style: {\n      margin: 10,\n      backgroundColor: PFColors.Success\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"0 Spans with error\") : /*#__PURE__*/React.createElement(Label, {\n    style: {\n      margin: 10,\n      backgroundColor: filteredErrors === 0 ? PFColors.Warning : PFColors.Danger\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, p.filteredSpans && \"\".concat(filteredErrors, \" / \"), pluralize(errors, 'Span'), \" with error\"));\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/JaegerIntegration/JaegerResults/TraceLabels.tsx"],"names":["React","Label","pluralize","PFColors","isErrorTag","countServices","spans","services","Set","forEach","s","add","process","serviceName","size","countErrors","filter","sp","tags","some","length","TraceLabels","p","errors","filteredErrors","filteredSpans","undefined","margin","oneline","backgroundColor","Success","Warning","Danger"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,wBAAjC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,SAASC,UAAT,QAA2B,6BAA3B;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAmB;AACvC,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,CAAC;AAAA,WAAIH,QAAQ,CAACI,GAAT,CAAaD,CAAC,CAACE,OAAF,CAAUC,WAAvB,CAAJ;AAAA,GAAf;AACA,SAAON,QAAQ,CAACO,IAAhB;AACD,CAJD;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACT,KAAD,EAAmB;AACrC,SAAOA,KAAK,CAACU,MAAN,CAAa,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,IAAH,CAAQC,IAAR,CAAaf,UAAb,CAAJ;AAAA,GAAf,EAA6CgB,MAApD;AACD,CAFD;;AAIA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAc;AACvC,MAAMC,MAAM,GAAGR,WAAW,CAACO,CAAC,CAAChB,KAAH,CAA1B;AACA,MAAMkB,cAAc,GAAGF,CAAC,CAACG,aAAF,GAAkBV,WAAW,CAACO,CAAC,CAACG,aAAH,CAA7B,GAAiDC,SAAxE;AACA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,CAAC,CAACG,aAAF,cAAsBH,CAAC,CAACG,aAAF,CAAgBL,MAAtC,QADH,EAEGlB,SAAS,CAACoB,CAAC,CAAChB,KAAF,CAAQc,MAAT,EAAiB,MAAjB,CAFZ,CADF,eAKE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,CAAC,CAACG,aAAF,cAAsBpB,aAAa,CAACiB,CAAC,CAACG,aAAH,CAAnC,QADH,EAEGvB,SAAS,CAACG,aAAa,CAACiB,CAAC,CAAChB,KAAH,CAAd,EAAyB,KAAzB,CAFZ,cALF,EASG,CAACgB,CAAC,CAACM,OAAH,iBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATjB,EAUGL,MAAM,KAAK,CAAX,gBACC,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE,EAAV;AAAcE,MAAAA,eAAe,EAAE1B,QAAQ,CAAC2B;AAAxC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,gBAGC,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAM,EAAE,EAAV;AAAcE,MAAAA,eAAe,EAAEL,cAAc,KAAK,CAAnB,GAAuBrB,QAAQ,CAAC4B,OAAhC,GAA0C5B,QAAQ,CAAC6B;AAAlF,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,CAAC,CAACG,aAAF,cAAsBD,cAAtB,QADH,EAEGtB,SAAS,CAACqB,MAAD,EAAS,MAAT,CAFZ,gBAbJ,CADF;AAqBD,CAxBM","sourcesContent":["import * as React from 'react';\nimport { Label, pluralize } from '@patternfly/react-core';\n\nimport { PFColors } from 'components/Pf/PfColors';\nimport { Span } from 'types/JaegerInfo';\nimport { isErrorTag } from 'utils/tracing/TracingHelper';\n\ntype Props = {\n  spans: Span[];\n  filteredSpans?: Span[];\n  oneline: boolean;\n};\n\nconst countServices = (spans: Span[]) => {\n  const services = new Set();\n  spans.forEach(s => services.add(s.process.serviceName));\n  return services.size;\n};\n\nconst countErrors = (spans: Span[]) => {\n  return spans.filter(sp => sp.tags.some(isErrorTag)).length;\n};\n\nexport const TraceLabels = (p: Props) => {\n  const errors = countErrors(p.spans);\n  const filteredErrors = p.filteredSpans ? countErrors(p.filteredSpans) : undefined;\n  return (\n    <>\n      <Label style={{ margin: 10 }}>\n        {p.filteredSpans && `${p.filteredSpans.length} / `}\n        {pluralize(p.spans.length, 'Span')}\n      </Label>\n      <Label style={{ margin: 10 }}>\n        {p.filteredSpans && `${countServices(p.filteredSpans)} / `}\n        {pluralize(countServices(p.spans), 'App')} involved\n      </Label>\n      {!p.oneline && <br />}\n      {errors === 0 ? (\n        <Label style={{ margin: 10, backgroundColor: PFColors.Success }}>0 Spans with error</Label>\n      ) : (\n        <Label style={{ margin: 10, backgroundColor: filteredErrors === 0 ? PFColors.Warning : PFColors.Danger }}>\n          {p.filteredSpans && `${filteredErrors} / `}\n          {pluralize(errors, 'Span')} with error\n        </Label>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
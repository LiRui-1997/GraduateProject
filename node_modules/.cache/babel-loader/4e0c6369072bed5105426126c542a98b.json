{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphToolbar.tsx\";\nimport * as React from 'react'; // import { Button, ButtonVariant, Toolbar, ToolbarGroup, Tooltip, TooltipPosition } from '@patternfly/react-core';\n\nimport { Button, Toolbar, ToolbarGroup, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { activeNamespacesSelector, edgeLabelsSelector, graphTypeSelector, showIdleNodesSelector, replayActiveSelector, trafficRatesSelector } from '../../../store/Selectors';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport GraphFindContainer from './GraphFind'; // import GraphSettingsContainer from './GraphSettings';\n\nimport history, { HistoryManager, URLParam } from '../../../app/History';\nimport { namespacesFromString, namespacesToString } from '../../../types/Namespace';\nimport { NamespaceActions } from '../../../actions/NamespaceAction';\nimport { GraphActions } from '../../../actions/GraphActions';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport TourStopContainer from 'components/Tour/TourStop';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport ReplayContainer from 'components/Time/Replay';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport GraphSecondaryMasthead from './GraphSecondaryMasthead'; // import { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\n\nimport { INITIAL_USER_SETTINGS_STATE } from 'reducers/UserSettingsState';\nimport GraphResetContainer from './GraphReset';\nvar toolbarStyle = style({\n  marginBottom: '20px',\n  marginTop: '20px'\n});\nvar rightToolbarStyle = style({\n  marginLeft: 'auto'\n});\nexport var GraphToolbar = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(GraphToolbar, _React$PureComponent);\n\n  var _super = _createSuper(GraphToolbar);\n\n  function GraphToolbar(props) {\n    var _this;\n\n    _classCallCheck(this, GraphToolbar);\n\n    _this = _super.call(this, props); // Let URL override current redux state at construction time. Update URL as needed.\n\n    _this.handleRefresh = function () {\n      if (_this.props.onRefresh) {\n        _this.props.onRefresh();\n      }\n    };\n\n    var urlParams = new URLSearchParams(history.location.search);\n    var urlEdgeLabels = HistoryManager.getParam(URLParam.GRAPH_EDGE_LABEL, urlParams);\n\n    if (!!urlEdgeLabels) {\n      if (urlEdgeLabels !== props.edgeLabels.join(',')) {\n        props.setEdgeLabels(urlEdgeLabels.split(','));\n      }\n    } else if (props.setEdgeLabels.length > 0) {\n      HistoryManager.setParam(URLParam.GRAPH_EDGE_LABEL, props.edgeLabels.join(','));\n    }\n\n    var urlReplayActive = HistoryManager.getBooleanParam(URLParam.GRAPH_REPLAY_ACTIVE);\n\n    if (urlReplayActive !== undefined) {\n      if (urlReplayActive !== _this.props.replayActive) {\n        _this.props.toggleReplayActive();\n      }\n    } else if (_this.props.replayActive !== INITIAL_USER_SETTINGS_STATE.replayActive) {\n      HistoryManager.setParam(URLParam.GRAPH_REPLAY_ACTIVE, String(_this.props.replayActive));\n    }\n\n    var urlGraphTraffic = HistoryManager.getParam(URLParam.GRAPH_TRAFFIC, urlParams);\n\n    if (!!urlGraphTraffic) {\n      if (urlGraphTraffic !== props.trafficRates.join(',')) {\n        props.setTrafficRates(urlGraphTraffic.split(','));\n      }\n    } else if (props.trafficRates.length > 0) {\n      HistoryManager.setParam(URLParam.GRAPH_TRAFFIC, props.trafficRates.join(','));\n    }\n\n    var urlGraphType = HistoryManager.getParam(URLParam.GRAPH_TYPE, urlParams);\n\n    if (!!urlGraphType) {\n      if (urlGraphType !== props.graphType) {\n        props.setGraphType(urlGraphType);\n      }\n    } else {\n      HistoryManager.setParam(URLParam.GRAPH_TYPE, String(_this.props.graphType));\n    }\n\n    var urlNamespaces = HistoryManager.getParam(URLParam.NAMESPACES, urlParams);\n\n    if (!!urlNamespaces) {\n      if (urlNamespaces !== namespacesToString(props.activeNamespaces)) {\n        props.setActiveNamespaces(namespacesFromString(urlNamespaces));\n      }\n    } else if (props.activeNamespaces.length > 0) {\n      HistoryManager.setParam(URLParam.NAMESPACES, namespacesToString(props.activeNamespaces));\n    }\n\n    return _this;\n  }\n\n  _createClass(GraphToolbar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props$edgeLabel, _this$props$activeNam, _this$props$trafficRa;\n\n      // ensure redux state and URL are aligned\n      if (((_this$props$edgeLabel = this.props.edgeLabels) === null || _this$props$edgeLabel === void 0 ? void 0 : _this$props$edgeLabel.length) === 0) {\n        HistoryManager.deleteParam(URLParam.GRAPH_EDGE_LABEL, true);\n      } else {\n        HistoryManager.setParam(URLParam.GRAPH_EDGE_LABEL, String(this.props.edgeLabels));\n      }\n\n      if (((_this$props$activeNam = this.props.activeNamespaces) === null || _this$props$activeNam === void 0 ? void 0 : _this$props$activeNam.length) === 0) {\n        HistoryManager.deleteParam(URLParam.NAMESPACES, true);\n      } else {\n        HistoryManager.setParam(URLParam.NAMESPACES, namespacesToString(this.props.activeNamespaces));\n      }\n\n      if (this.props.replayActive === INITIAL_USER_SETTINGS_STATE.replayActive) {\n        HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_ACTIVE, true);\n      } else {\n        HistoryManager.setParam(URLParam.GRAPH_REPLAY_ACTIVE, String(this.props.replayActive));\n      }\n\n      if (((_this$props$trafficRa = this.props.trafficRates) === null || _this$props$trafficRa === void 0 ? void 0 : _this$props$trafficRa.length) === 0) {\n        HistoryManager.deleteParam(URLParam.GRAPH_TRAFFIC, true);\n      } else {\n        HistoryManager.setParam(URLParam.GRAPH_TRAFFIC, String(this.props.trafficRates));\n      }\n\n      HistoryManager.setParam(URLParam.GRAPH_TYPE, String(this.props.graphType));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // If replay was left active then turn it off\n      if (this.props.replayActive) {\n        this.props.toggleReplayActive();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GraphSecondaryMasthead, {\n        disabled: this.props.disabled,\n        graphType: this.props.graphType,\n        isNodeGraph: !!this.props.node,\n        onToggleHelp: this.props.onToggleHelp,\n        onGraphTypeChange: this.props.setGraphType,\n        onHandleRefresh: this.handleRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Toolbar, {\n        className: toolbarStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GraphFindContainer, {\n        cy: this.props.cy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(TourStopContainer, {\n        info: GraphTourStops.Shortcuts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarGroup, {\n        className: rightToolbarStyle,\n        \"aria-label\": \"graph_refresh_toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        key: 'graph-tour-help-ot',\n        position: TooltipPosition.right,\n        content: \"Shortcuts and tips...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: rightToolbarStyle,\n        variant: \"link\",\n        style: {\n          paddingLeft: '6px',\n          paddingRight: '0px'\n        },\n        onClick: this.props.onToggleHelp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Help, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(GraphResetContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }\n      })))), this.props.replayActive && /*#__PURE__*/React.createElement(ReplayContainer, {\n        id: \"time-range-replay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 37\n        }\n      }));\n    } // private handleNamespaceReturn = () => {\n    //   if (\n    //     !this.props.summaryData ||\n    //     (this.props.summaryData.summaryType !== 'node' && this.props.summaryData.summaryType !== 'box')\n    //   ) {\n    //     history.push(`/graph/namespaces`);\n    //     return;\n    //   }\n    //   const selector = `node[id = \"${this.props.summaryData!.summaryTarget.data(CyNode.id)}\"]`;\n    //   this.props.setNode(undefined);\n    //   history.push(`/graph/namespaces?focusSelector=${encodeURI(selector)}`);\n    // };\n\n  }]);\n\n  return GraphToolbar;\n}(React.PureComponent);\nGraphToolbar.contextTypes = {\n  router: function router() {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    activeNamespaces: activeNamespacesSelector(state),\n    edgeLabels: edgeLabelsSelector(state),\n    graphType: graphTypeSelector(state),\n    node: state.graph.node,\n    replayActive: replayActiveSelector(state),\n    showIdleNodes: showIdleNodesSelector(state),\n    summaryData: state.graph.summaryData,\n    trafficRates: trafficRatesSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setActiveNamespaces: bindActionCreators(NamespaceActions.setActiveNamespaces, dispatch),\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    setGraphType: bindActionCreators(GraphToolbarActions.setGraphType, dispatch),\n    setIdleNodes: bindActionCreators(GraphToolbarActions.setIdleNodes, dispatch),\n    setNode: bindActionCreators(GraphActions.setNode, dispatch),\n    setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch),\n    toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n  };\n};\n\nvar GraphToolbarContainer = connect(mapStateToProps, mapDispatchToProps)(GraphToolbar);\nexport default GraphToolbarContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphToolbar.tsx"],"names":["React","Button","Toolbar","ToolbarGroup","Tooltip","TooltipPosition","style","connect","bindActionCreators","activeNamespacesSelector","edgeLabelsSelector","graphTypeSelector","showIdleNodesSelector","replayActiveSelector","trafficRatesSelector","GraphToolbarActions","GraphFindContainer","history","HistoryManager","URLParam","namespacesFromString","namespacesToString","NamespaceActions","GraphActions","GraphTourStops","TourStopContainer","KialiIcon","defaultIconStyle","ReplayContainer","UserSettingsActions","GraphSecondaryMasthead","INITIAL_USER_SETTINGS_STATE","GraphResetContainer","toolbarStyle","marginBottom","marginTop","rightToolbarStyle","marginLeft","GraphToolbar","props","handleRefresh","onRefresh","urlParams","URLSearchParams","location","search","urlEdgeLabels","getParam","GRAPH_EDGE_LABEL","edgeLabels","join","setEdgeLabels","split","length","setParam","urlReplayActive","getBooleanParam","GRAPH_REPLAY_ACTIVE","undefined","replayActive","toggleReplayActive","String","urlGraphTraffic","GRAPH_TRAFFIC","trafficRates","setTrafficRates","urlGraphType","GRAPH_TYPE","graphType","setGraphType","urlNamespaces","NAMESPACES","activeNamespaces","setActiveNamespaces","deleteParam","disabled","node","onToggleHelp","cy","Shortcuts","right","paddingLeft","paddingRight","PureComponent","contextTypes","router","mapStateToProps","state","graph","showIdleNodes","summaryData","mapDispatchToProps","dispatch","setIdleNodes","setNode","GraphToolbarContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\n// import { Button, ButtonVariant, Toolbar, ToolbarGroup, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { Button, Toolbar, ToolbarGroup, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { bindActionCreators } from 'redux';\nimport { KialiAppState } from '../../../store/Store';\nimport {\n  activeNamespacesSelector,\n  edgeLabelsSelector,\n  graphTypeSelector,\n  showIdleNodesSelector,\n  replayActiveSelector,\n  trafficRatesSelector\n} from '../../../store/Selectors';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { GraphType, NodeParamsType, EdgeLabelMode, SummaryData, TrafficRate } from '../../../types/Graph';\nimport GraphFindContainer from './GraphFind';\n// import GraphSettingsContainer from './GraphSettings';\nimport history, { HistoryManager, URLParam } from '../../../app/History';\nimport Namespace, { namespacesFromString, namespacesToString } from '../../../types/Namespace';\nimport { NamespaceActions } from '../../../actions/NamespaceAction';\nimport { GraphActions } from '../../../actions/GraphActions';\nimport { KialiAppAction } from '../../../actions/KialiAppAction';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport TourStopContainer from 'components/Tour/TourStop';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport ReplayContainer from 'components/Time/Replay';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport GraphSecondaryMasthead from './GraphSecondaryMasthead';\n// import { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { INITIAL_USER_SETTINGS_STATE } from 'reducers/UserSettingsState';\nimport GraphResetContainer from './GraphReset';\n\ntype ReduxProps = {\n  activeNamespaces: Namespace[];\n  edgeLabels: EdgeLabelMode[];\n  graphType: GraphType;\n  node?: NodeParamsType;\n  replayActive: boolean;\n  showIdleNodes: boolean;\n  summaryData: SummaryData | null;\n  trafficRates: TrafficRate[];\n\n  setActiveNamespaces: (activeNamespaces: Namespace[]) => void;\n  setEdgeLabels: (edgeLabels: EdgeLabelMode[]) => void;\n  setGraphType: (graphType: GraphType) => void;\n  setIdleNodes: (idleNodes: boolean) => void;\n  setNode: (node?: NodeParamsType) => void;\n  setTrafficRates: (rates: TrafficRate[]) => void;\n  toggleReplayActive: () => void;\n};\n\ntype GraphToolbarProps = ReduxProps & {\n  cy: any;\n  disabled: boolean;\n  onToggleHelp: () => void;\n  onRefresh?: () => void;\n};\n\nconst toolbarStyle = style({\n  marginBottom: '20px',\n  marginTop: '20px'\n});\n\nconst rightToolbarStyle = style({\n  marginLeft: 'auto'\n});\n\nexport class GraphToolbar extends React.PureComponent<GraphToolbarProps> {\n  static contextTypes = {\n    router: () => null\n  };\n\n  constructor(props: GraphToolbarProps) {\n    super(props);\n    // Let URL override current redux state at construction time. Update URL as needed.\n    const urlParams = new URLSearchParams(history.location.search);\n\n    const urlEdgeLabels = HistoryManager.getParam(URLParam.GRAPH_EDGE_LABEL, urlParams);\n    if (!!urlEdgeLabels) {\n      if (urlEdgeLabels !== props.edgeLabels.join(',')) {\n        props.setEdgeLabels(urlEdgeLabels.split(',') as EdgeLabelMode[]);\n      }\n    } else if (props.setEdgeLabels.length > 0) {\n      HistoryManager.setParam(URLParam.GRAPH_EDGE_LABEL, props.edgeLabels.join(','));\n    }\n\n    const urlReplayActive = HistoryManager.getBooleanParam(URLParam.GRAPH_REPLAY_ACTIVE);\n    if (urlReplayActive !== undefined) {\n      if (urlReplayActive !== this.props.replayActive) {\n        this.props.toggleReplayActive();\n      }\n    } else if (this.props.replayActive !== INITIAL_USER_SETTINGS_STATE.replayActive) {\n      HistoryManager.setParam(URLParam.GRAPH_REPLAY_ACTIVE, String(this.props.replayActive));\n    }\n\n    const urlGraphTraffic = HistoryManager.getParam(URLParam.GRAPH_TRAFFIC, urlParams);\n    if (!!urlGraphTraffic) {\n      if (urlGraphTraffic !== props.trafficRates.join(',')) {\n        props.setTrafficRates(urlGraphTraffic.split(',') as TrafficRate[]);\n      }\n    } else if (props.trafficRates.length > 0) {\n      HistoryManager.setParam(URLParam.GRAPH_TRAFFIC, props.trafficRates.join(','));\n    }\n\n    const urlGraphType = HistoryManager.getParam(URLParam.GRAPH_TYPE, urlParams) as GraphType;\n    if (!!urlGraphType) {\n      if (urlGraphType !== props.graphType) {\n        props.setGraphType(urlGraphType);\n      }\n    } else {\n      HistoryManager.setParam(URLParam.GRAPH_TYPE, String(this.props.graphType));\n    }\n\n    const urlNamespaces = HistoryManager.getParam(URLParam.NAMESPACES, urlParams);\n    if (!!urlNamespaces) {\n      if (urlNamespaces !== namespacesToString(props.activeNamespaces)) {\n        props.setActiveNamespaces(namespacesFromString(urlNamespaces));\n      }\n    } else if (props.activeNamespaces.length > 0) {\n      HistoryManager.setParam(URLParam.NAMESPACES, namespacesToString(props.activeNamespaces));\n    }\n  }\n\n  componentDidUpdate() {\n    // ensure redux state and URL are aligned\n    if (this.props.edgeLabels?.length === 0) {\n      HistoryManager.deleteParam(URLParam.GRAPH_EDGE_LABEL, true);\n    } else {\n      HistoryManager.setParam(URLParam.GRAPH_EDGE_LABEL, String(this.props.edgeLabels));\n    }\n\n    if (this.props.activeNamespaces?.length === 0) {\n      HistoryManager.deleteParam(URLParam.NAMESPACES, true);\n    } else {\n      HistoryManager.setParam(URLParam.NAMESPACES, namespacesToString(this.props.activeNamespaces));\n    }\n\n    if (this.props.replayActive === INITIAL_USER_SETTINGS_STATE.replayActive) {\n      HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_ACTIVE, true);\n    } else {\n      HistoryManager.setParam(URLParam.GRAPH_REPLAY_ACTIVE, String(this.props.replayActive));\n    }\n\n    if (this.props.trafficRates?.length === 0) {\n      HistoryManager.deleteParam(URLParam.GRAPH_TRAFFIC, true);\n    } else {\n      HistoryManager.setParam(URLParam.GRAPH_TRAFFIC, String(this.props.trafficRates));\n    }\n\n    HistoryManager.setParam(URLParam.GRAPH_TYPE, String(this.props.graphType));\n  }\n\n  componentWillUnmount() {\n    // If replay was left active then turn it off\n    if (this.props.replayActive) {\n      this.props.toggleReplayActive();\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <GraphSecondaryMasthead\n          disabled={this.props.disabled}\n          graphType={this.props.graphType}\n          isNodeGraph={!!this.props.node}\n          onToggleHelp={this.props.onToggleHelp}\n          onGraphTypeChange={this.props.setGraphType}\n          onHandleRefresh={this.handleRefresh}\n        />\n        <Toolbar className={toolbarStyle}>\n          {/* <div style={{ display: 'flex' }}>\n            {this.props.node && (\n              <Tooltip key={'graph-tour-help-ot'} position={TooltipPosition.right} content={'Back to full graph'}>\n                <Button variant={ButtonVariant.link} onClick={this.handleNamespaceReturn}>\n                  <KialiIcon.Back className={defaultIconStyle} />\n                </Button>\n              </Tooltip>\n            )}\n            <TourStopContainer info={GraphTourStops.Display}>\n              <GraphSettingsContainer graphType={this.props.graphType} />\n            </TourStopContainer>\n          </div> */}\n          <GraphFindContainer cy={this.props.cy} />\n\n          <TourStopContainer info={GraphTourStops.Shortcuts}>\n            <ToolbarGroup className={rightToolbarStyle} aria-label=\"graph_refresh_toolbar\">\n              <Tooltip key={'graph-tour-help-ot'} position={TooltipPosition.right} content=\"Shortcuts and tips...\">\n                <Button\n                  className={rightToolbarStyle}\n                  variant=\"link\"\n                  style={{ paddingLeft: '6px', paddingRight: '0px' }}\n                  onClick={this.props.onToggleHelp}\n                >\n                  <KialiIcon.Help className={defaultIconStyle} />\n                </Button>\n              </Tooltip>\n              <GraphResetContainer />\n            </ToolbarGroup>\n          </TourStopContainer>\n        </Toolbar>\n        {this.props.replayActive && <ReplayContainer id=\"time-range-replay\" />}\n      </>\n    );\n  }\n\n  private handleRefresh = () => {\n    if (this.props.onRefresh) {\n      this.props.onRefresh();\n    }\n  };\n\n  // private handleNamespaceReturn = () => {\n  //   if (\n  //     !this.props.summaryData ||\n  //     (this.props.summaryData.summaryType !== 'node' && this.props.summaryData.summaryType !== 'box')\n  //   ) {\n  //     history.push(`/graph/namespaces`);\n  //     return;\n  //   }\n\n  //   const selector = `node[id = \"${this.props.summaryData!.summaryTarget.data(CyNode.id)}\"]`;\n  //   this.props.setNode(undefined);\n  //   history.push(`/graph/namespaces?focusSelector=${encodeURI(selector)}`);\n  // };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  activeNamespaces: activeNamespacesSelector(state),\n  edgeLabels: edgeLabelsSelector(state),\n  graphType: graphTypeSelector(state),\n  node: state.graph.node,\n  replayActive: replayActiveSelector(state),\n  showIdleNodes: showIdleNodesSelector(state),\n  summaryData: state.graph.summaryData,\n  trafficRates: trafficRatesSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setActiveNamespaces: bindActionCreators(NamespaceActions.setActiveNamespaces, dispatch),\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    setGraphType: bindActionCreators(GraphToolbarActions.setGraphType, dispatch),\n    setIdleNodes: bindActionCreators(GraphToolbarActions.setIdleNodes, dispatch),\n    setNode: bindActionCreators(GraphActions.setNode, dispatch),\n    setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch),\n    toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n  };\n};\n\nconst GraphToolbarContainer = connect(mapStateToProps, mapDispatchToProps)(GraphToolbar);\n\nexport default GraphToolbarContainer;\n"]},"metadata":{},"sourceType":"module"}
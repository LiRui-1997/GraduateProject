{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _jsxFileName = \"/root/GraduateProject/src/components/Pf/PfBadges.tsx\",\n    _this = this;\n\nimport { Badge, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport React from 'react';\nimport { style } from 'typestyle';\nimport { PFColors } from './PfColors';\n// PF Badges used by Kiali, keep alphabetized\n// avoid duplicate badge letters, especially if they may appear on the same page\nexport var PFBadges = Object.freeze({\n  App: {\n    badge: 'A',\n    tt: 'Application'\n  },\n  Adapter: {\n    badge: 'A',\n    tt: 'Adapter'\n  },\n  AttributeManifest: {\n    badge: 'AM',\n    tt: 'Attribute Manifest'\n  },\n  AuthorizationPolicy: {\n    badge: 'AP',\n    tt: 'Authorization Policy'\n  },\n  Cluster: {\n    badge: 'CL',\n    tt: 'Cluster'\n  },\n  ClusterRBACConfig: {\n    badge: 'CRC',\n    tt: 'Cluster RBAC Configuration'\n  },\n  Container: {\n    badge: 'C',\n    tt: 'Container'\n  },\n  DestinationRule: {\n    badge: 'DR',\n    tt: 'Destination Rule'\n  },\n  EnvoyFilter: {\n    badge: 'EF',\n    tt: 'Envoy Filter'\n  },\n  Gateway: {\n    badge: 'G',\n    tt: 'Gateway'\n  },\n  Handler: {\n    badge: 'H',\n    tt: 'Handler'\n  },\n  Host: {\n    badge: 'H',\n    tt: 'Host'\n  },\n  Instance: {\n    badge: 'I',\n    tt: 'Instance'\n  },\n  Iter8: {\n    badge: 'EXP',\n    tt: 'Experiment'\n  },\n  MeshPolicy: {\n    badge: 'MP',\n    tt: 'Mesh Policy'\n  },\n  Namespace: {\n    badge: 'NS',\n    tt: 'Namespace'\n  },\n  Operation: {\n    badge: 'O',\n    tt: 'Operation'\n  },\n  PeerAuthentication: {\n    badge: 'PA',\n    tt: 'Peer Authentication'\n  },\n  Pod: {\n    badge: 'P',\n    tt: 'Pod'\n  },\n  Policy: {\n    badge: 'P',\n    tt: 'Policy'\n  },\n  RBACConfig: {\n    badge: 'RC',\n    tt: 'RBAC Configuration'\n  },\n  RequestAuthentication: {\n    badge: 'RA',\n    tt: 'Request Authentication'\n  },\n  Rule: {\n    badge: 'R',\n    tt: 'Rule'\n  },\n  Service: {\n    badge: 'S',\n    tt: 'Service'\n  },\n  ServiceEntry: {\n    badge: 'SE',\n    tt: 'Service Entry'\n  },\n  ServiceRole: {\n    badge: 'SR',\n    tt: 'Service Role'\n  },\n  ServiceRoleBinding: {\n    badge: 'SRB',\n    tt: 'Service Role Binding'\n  },\n  Sidecar: {\n    badge: 'SC',\n    tt: 'Istio Sidecar Proxy'\n  },\n  Template: {\n    badge: 'T',\n    tt: 'Template'\n  },\n  Unknown: {\n    badge: 'U',\n    tt: 'Unknown'\n  },\n  VirtualService: {\n    badge: 'VS',\n    tt: 'Virtual Service'\n  },\n  Workload: {\n    badge: 'W',\n    tt: 'Workload'\n  },\n  WorkloadEntry: {\n    badge: 'WE',\n    tt: 'Workload Entry'\n  },\n  WorkloadGroup: {\n    badge: 'WG',\n    tt: 'Workload Group'\n  }\n});\nexport var kialiBadge = style({\n  backgroundColor: PFColors.Badge,\n  borderRadius: '30em',\n  marginRight: '10px'\n});\nexport var PFBadge = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PFBadge, _React$PureComponent);\n\n  var _super = _createSuper(PFBadge);\n\n  function PFBadge() {\n    _classCallCheck(this, PFBadge);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PFBadge, [{\n    key: \"render\",\n    value: function render() {\n      var key = \"pfbadge-\".concat(this.props.badge.badge);\n      var badge = /*#__PURE__*/React.createElement(Badge, {\n        className: this.props.className || kialiBadge,\n        id: this.props.id || key,\n        isRead: this.props.isRead || false,\n        key: this.props.key || key,\n        style: this.props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }, this.props.badge.badge);\n      return !this.props.badge.tt ? badge : /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, this.props.badge.tt),\n        id: \"tt-\".concat(this.props.id || key),\n        key: \"tt-\".concat(this.props.key || key),\n        position: this.props.position || TooltipPosition.auto,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, badge);\n    }\n  }]);\n\n  return PFBadge;\n}(React.PureComponent);\nexport var getPFBadge = function getPFBadge(badge, tt) {\n  return /*#__PURE__*/React.createElement(PFBadge, {\n    badge: {\n      badge: badge,\n      tt: tt\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/Pf/PfBadges.tsx"],"names":["Badge","Tooltip","TooltipPosition","React","style","PFColors","PFBadges","Object","freeze","App","badge","tt","Adapter","AttributeManifest","AuthorizationPolicy","Cluster","ClusterRBACConfig","Container","DestinationRule","EnvoyFilter","Gateway","Handler","Host","Instance","Iter8","MeshPolicy","Namespace","Operation","PeerAuthentication","Pod","Policy","RBACConfig","RequestAuthentication","Rule","Service","ServiceEntry","ServiceRole","ServiceRoleBinding","Sidecar","Template","Unknown","VirtualService","Workload","WorkloadEntry","WorkloadGroup","kialiBadge","backgroundColor","borderRadius","marginRight","PFBadge","key","props","className","id","isRead","position","auto","PureComponent","getPFBadge"],"mappings":";;;;;;;;AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,eAAzB,QAAgD,wBAAhD;AACA,OAAOC,KAAP,MAAqC,OAArC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAOA;AACA;AACA,OAAO,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc;AACpCC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAD+B;AAEpCC,EAAAA,OAAO,EAAE;AAAEF,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAF2B;AAGpCE,EAAAA,iBAAiB,EAAE;AAAEH,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAHiB;AAIpCG,EAAAA,mBAAmB,EAAE;AAAEJ,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAJe;AAKpCI,EAAAA,OAAO,EAAE;AAAEL,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAL2B;AAMpCK,EAAAA,iBAAiB,EAAE;AAAEN,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,EAAE,EAAE;AAApB,GANiB;AAOpCM,EAAAA,SAAS,EAAE;AAAEP,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAPyB;AAQpCO,EAAAA,eAAe,EAAE;AAAER,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GARmB;AASpCQ,EAAAA,WAAW,EAAE;AAAET,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GATuB;AAUpCS,EAAAA,OAAO,EAAE;AAAEV,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAV2B;AAWpCU,EAAAA,OAAO,EAAE;AAAEX,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAX2B;AAYpCW,EAAAA,IAAI,EAAE;AAAEZ,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAZ8B;AAapCY,EAAAA,QAAQ,EAAE;AAAEb,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAb0B;AAcpCa,EAAAA,KAAK,EAAE;AAAEd,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,EAAE,EAAE;AAApB,GAd6B;AAepCc,EAAAA,UAAU,EAAE;AAAEf,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAfwB;AAgBpCe,EAAAA,SAAS,EAAE;AAAEhB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAhByB;AAiBpCgB,EAAAA,SAAS,EAAE;AAAEjB,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAjByB;AAkBpCiB,EAAAA,kBAAkB,EAAE;AAAElB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAlBgB;AAmBpCkB,EAAAA,GAAG,EAAE;AAAEnB,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAnB+B;AAoBpCmB,EAAAA,MAAM,EAAE;AAAEpB,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GApB4B;AAqBpCoB,EAAAA,UAAU,EAAE;AAAErB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GArBwB;AAsBpCqB,EAAAA,qBAAqB,EAAE;AAAEtB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAtBa;AAuBpCsB,EAAAA,IAAI,EAAE;AAAEvB,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAvB8B;AAwBpCuB,EAAAA,OAAO,EAAE;AAAExB,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAxB2B;AAyBpCwB,EAAAA,YAAY,EAAE;AAAEzB,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAzBsB;AA0BpCyB,EAAAA,WAAW,EAAE;AAAE1B,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GA1BuB;AA2BpC0B,EAAAA,kBAAkB,EAAE;AAAE3B,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,EAAE,EAAE;AAApB,GA3BgB;AA4BpC2B,EAAAA,OAAO,EAAE;AAAE5B,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GA5B2B;AA6BpC4B,EAAAA,QAAQ,EAAE;AAAE7B,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GA7B0B;AA8BpC6B,EAAAA,OAAO,EAAE;AAAE9B,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GA9B2B;AA+BpC8B,EAAAA,cAAc,EAAE;AAAE/B,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GA/BoB;AAgCpC+B,EAAAA,QAAQ,EAAE;AAAEhC,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAhC0B;AAiCpCgC,EAAAA,aAAa,EAAE;AAAEjC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB,GAjCqB;AAkCpCiC,EAAAA,aAAa,EAAE;AAAElC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,EAAE,EAAE;AAAnB;AAlCqB,CAAd,CAAjB;AAqCP,OAAO,IAAMkC,UAAU,GAAGzC,KAAK,CAAC;AAC9B0C,EAAAA,eAAe,EAAEzC,QAAQ,CAACL,KADI;AAE9B+C,EAAAA,YAAY,EAAE,MAFgB;AAG9BC,EAAAA,WAAW,EAAE;AAHiB,CAAD,CAAxB;AAgBP,WAAaC,OAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,kBAAS;AACP,UAAMC,GAAG,qBAAc,KAAKC,KAAL,CAAWzC,KAAX,CAAiBA,KAA/B,CAAT;AACA,UAAMA,KAAK,gBACT,oBAAC,KAAD;AACE,QAAA,SAAS,EAAE,KAAKyC,KAAL,CAAWC,SAAX,IAAwBP,UADrC;AAEE,QAAA,EAAE,EAAE,KAAKM,KAAL,CAAWE,EAAX,IAAiBH,GAFvB;AAGE,QAAA,MAAM,EAAE,KAAKC,KAAL,CAAWG,MAAX,IAAqB,KAH/B;AAIE,QAAA,GAAG,EAAE,KAAKH,KAAL,CAAWD,GAAX,IAAkBA,GAJzB;AAKE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAW/C,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAK+C,KAAL,CAAWzC,KAAX,CAAiBA,KAPpB,CADF;AAYA,aAAO,CAAC,KAAKyC,KAAL,CAAWzC,KAAX,CAAiBC,EAAlB,GACLD,KADK,gBAGL,oBAAC,OAAD;AACE,QAAA,OAAO,eAAE,0CAAG,KAAKyC,KAAL,CAAWzC,KAAX,CAAiBC,EAApB,CADX;AAEE,QAAA,EAAE,eAAQ,KAAKwC,KAAL,CAAWE,EAAX,IAAiBH,GAAzB,CAFJ;AAGE,QAAA,GAAG,eAAQ,KAAKC,KAAL,CAAWD,GAAX,IAAkBA,GAA1B,CAHL;AAIE,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWI,QAAX,IAAuBrD,eAAe,CAACsD,IAJnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG9C,KANH,CAHF;AAYD;AA3BH;;AAAA;AAAA,EAA6BP,KAAK,CAACsD,aAAnC;AA8BA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAChD,KAAD,EAAgBC,EAAhB,EAAkE;AAC1F,sBAAO,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAEA,KAAT;AAAgBC,MAAAA,EAAE,EAAEA;AAApB,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFM","sourcesContent":["import { Badge, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport React, { CSSProperties } from 'react';\nimport { style } from 'typestyle';\nimport { PFColors } from './PfColors';\n\nexport type PFBadgeType = {\n  badge: string;\n  tt?: React.ReactFragment;\n};\n\n// PF Badges used by Kiali, keep alphabetized\n// avoid duplicate badge letters, especially if they may appear on the same page\nexport const PFBadges = Object.freeze({\n  App: { badge: 'A', tt: 'Application' } as PFBadgeType,\n  Adapter: { badge: 'A', tt: 'Adapter' } as PFBadgeType,\n  AttributeManifest: { badge: 'AM', tt: 'Attribute Manifest' } as PFBadgeType,\n  AuthorizationPolicy: { badge: 'AP', tt: 'Authorization Policy' } as PFBadgeType,\n  Cluster: { badge: 'CL', tt: 'Cluster' } as PFBadgeType,\n  ClusterRBACConfig: { badge: 'CRC', tt: 'Cluster RBAC Configuration' } as PFBadgeType,\n  Container: { badge: 'C', tt: 'Container' } as PFBadgeType,\n  DestinationRule: { badge: 'DR', tt: 'Destination Rule' } as PFBadgeType,\n  EnvoyFilter: { badge: 'EF', tt: 'Envoy Filter' } as PFBadgeType,\n  Gateway: { badge: 'G', tt: 'Gateway' } as PFBadgeType,\n  Handler: { badge: 'H', tt: 'Handler' },\n  Host: { badge: 'H', tt: 'Host' },\n  Instance: { badge: 'I', tt: 'Instance' },\n  Iter8: { badge: 'EXP', tt: 'Experiment' },\n  MeshPolicy: { badge: 'MP', tt: 'Mesh Policy' } as PFBadgeType,\n  Namespace: { badge: 'NS', tt: 'Namespace' } as PFBadgeType,\n  Operation: { badge: 'O', tt: 'Operation' } as PFBadgeType,\n  PeerAuthentication: { badge: 'PA', tt: 'Peer Authentication' } as PFBadgeType,\n  Pod: { badge: 'P', tt: 'Pod' } as PFBadgeType,\n  Policy: { badge: 'P', tt: 'Policy' } as PFBadgeType,\n  RBACConfig: { badge: 'RC', tt: 'RBAC Configuration' } as PFBadgeType,\n  RequestAuthentication: { badge: 'RA', tt: 'Request Authentication' } as PFBadgeType,\n  Rule: { badge: 'R', tt: 'Rule' } as PFBadgeType,\n  Service: { badge: 'S', tt: 'Service' } as PFBadgeType,\n  ServiceEntry: { badge: 'SE', tt: 'Service Entry' } as PFBadgeType,\n  ServiceRole: { badge: 'SR', tt: 'Service Role' } as PFBadgeType,\n  ServiceRoleBinding: { badge: 'SRB', tt: 'Service Role Binding' } as PFBadgeType,\n  Sidecar: { badge: 'SC', tt: 'Istio Sidecar Proxy' } as PFBadgeType,\n  Template: { badge: 'T', tt: 'Template' } as PFBadgeType,\n  Unknown: { badge: 'U', tt: 'Unknown' } as PFBadgeType,\n  VirtualService: { badge: 'VS', tt: 'Virtual Service' } as PFBadgeType,\n  Workload: { badge: 'W', tt: 'Workload' } as PFBadgeType,\n  WorkloadEntry: { badge: 'WE', tt: 'Workload Entry' } as PFBadgeType,\n  WorkloadGroup: { badge: 'WG', tt: 'Workload Group' } as PFBadgeType\n});\n\nexport const kialiBadge = style({\n  backgroundColor: PFColors.Badge,\n  borderRadius: '30em',\n  marginRight: '10px'\n});\n\ntype PFBadgeProps = {\n  badge: PFBadgeType;\n  className?: string; // default=kialiBadge\n  id?: string;\n  isRead?: boolean;\n  key?: string;\n  position?: TooltipPosition; // default=auto\n  style?: CSSProperties;\n};\n\nexport class PFBadge extends React.PureComponent<PFBadgeProps> {\n  render() {\n    const key = `pfbadge-${this.props.badge.badge}`;\n    const badge = (\n      <Badge\n        className={this.props.className || kialiBadge}\n        id={this.props.id || key}\n        isRead={this.props.isRead || false}\n        key={this.props.key || key}\n        style={this.props.style}\n      >\n        {this.props.badge.badge}\n      </Badge>\n    );\n\n    return !this.props.badge.tt ? (\n      badge\n    ) : (\n      <Tooltip\n        content={<>{this.props.badge.tt}</>}\n        id={`tt-${this.props.id || key}`}\n        key={`tt-${this.props.key || key}`}\n        position={this.props.position || TooltipPosition.auto}\n      >\n        {badge}\n      </Tooltip>\n    );\n  }\n}\n\nexport const getPFBadge = (badge: string, tt?: React.ReactFragment): React.ReactFragment => {\n  return <PFBadge badge={{ badge: badge, tt: tt }} />;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Restricts value x to [min, max], if outside, moves to the nearest available value.\nexport var clamp = function clamp(x, min, max) {\n  return x < min ? min : x > max ? max : x;\n}; // Computes the quadratic bezier value at time t [0,1]\n\nexport var quadraticBezier = function quadraticBezier(p0, p1, p2, t) {\n  var k0 = Math.pow(1 - t, 2);\n  var k1 = 2 * (1 - t) * t;\n  var k2 = t * t;\n  return {\n    x: k0 * p0.x + k1 * p1.x + k2 * p2.x,\n    y: k0 * p0.y + k1 * p1.y + k2 * p2.y\n  };\n}; // Computes a linear interpolation between 2 points at time t [0,1]\n\nexport var linearInterpolation = function linearInterpolation(p0, p1, t) {\n  return {\n    x: p0.x + t * (p1.x - p0.x),\n    y: p0.y + t * (p1.y - p0.y)\n  };\n}; // Computes the length of a bezier path\n// https://stackoverflow.com/questions/11854907/calculate-the-length-of-a-segment-of-a-quadratic-bezier\n// http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/\n\nexport var bezierLength = function bezierLength(p0, p1, p2) {\n  var a = {\n    x: p0.x - 2 * p1.x + p2.x,\n    y: p0.y - 2 * p1.y + p2.y\n  };\n  var b = {\n    x: 2 * p1.x - 2 * p0.x,\n    y: 2 * p1.y - 2 * p0.y\n  };\n  var A = 4 * (a.x * a.x + a.y * a.y);\n  var B = 4 * (a.x * b.x + a.y * b.y);\n  var C = b.x * b.x + b.y * b.y;\n  var Sabc = 2 * Math.sqrt(A + B + C);\n  var A_2 = Math.sqrt(A);\n  var A_32 = 2 * A * A_2;\n  var C_2 = 2 * Math.sqrt(C);\n  var BA = B / A_2;\n  return (A_32 * Sabc + A_2 * B * (Sabc - C_2) + (4 * C * A - B * B) * Math.log((2 * A_2 + BA + Sabc) / (BA + C_2))) / (4 * A_32);\n};\nexport var distance = function distance(p0, p1) {\n  return Math.sqrt(Math.pow(p0.x - p1.x, 2) + Math.pow(p0.y - p1.y, 2));\n};\nexport var squaredDistance = function squaredDistance(p0, p1) {\n  return Math.pow(p0.x - p1.x, 2) + Math.pow(p0.y - p1.y, 2);\n};\nexport var normalize = function normalize(v1) {\n  var norm = Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n  return {\n    x: v1.x / norm,\n    y: v1.y / norm\n  };\n}; // http://www.euclideanspace.com/maths/algebra/vectors/angleBetween/index.htm\n\nexport var angleBetweenVectors = function angleBetweenVectors(v1, v2) {\n  return Math.atan2(v2.y, v2.x) - Math.atan2(v1.y, v1.x);\n};\nexport var average = function average(arr, f) {\n  return arr.length > 0 ? arr.reduce(function (agg, cur) {\n    return agg + f(cur);\n  }, 0) / arr.length : undefined;\n};","map":{"version":3,"sources":["/root/kiali-ui/src/utils/MathUtils.ts"],"names":["clamp","x","min","max","quadraticBezier","p0","p1","p2","t","k0","Math","pow","k1","k2","y","linearInterpolation","bezierLength","a","b","A","B","C","Sabc","sqrt","A_2","A_32","C_2","BA","log","distance","squaredDistance","normalize","v1","norm","angleBetweenVectors","v2","atan2","average","arr","f","length","reduce","agg","cur","undefined"],"mappings":"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","sourcesContent":["export interface Point {\n  x: number;\n  y: number;\n}\n\ntype Vector = Point;\n\n// Restricts value x to [min, max], if outside, moves to the nearest available value.\nexport const clamp = (x, min, max) => {\n  return x < min ? min : x > max ? max : x;\n};\n\n// Computes the quadratic bezier value at time t [0,1]\nexport const quadraticBezier = (p0: Point, p1: Point, p2: Point, t: number) => {\n  const k0 = Math.pow(1 - t, 2);\n  const k1 = 2 * (1 - t) * t;\n  const k2 = t * t;\n  return {\n    x: k0 * p0.x + k1 * p1.x + k2 * p2.x,\n    y: k0 * p0.y + k1 * p1.y + k2 * p2.y\n  };\n};\n\n// Computes a linear interpolation between 2 points at time t [0,1]\nexport const linearInterpolation = (p0: Point, p1: Point, t: number) => {\n  return {\n    x: p0.x + t * (p1.x - p0.x),\n    y: p0.y + t * (p1.y - p0.y)\n  };\n};\n\n// Computes the length of a bezier path\n// https://stackoverflow.com/questions/11854907/calculate-the-length-of-a-segment-of-a-quadratic-bezier\n// http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/\nexport const bezierLength = (p0: Point, p1: Point, p2: Point) => {\n  const a: Point = {\n    x: p0.x - 2 * p1.x + p2.x,\n    y: p0.y - 2 * p1.y + p2.y\n  };\n  const b: Point = {\n    x: 2 * p1.x - 2 * p0.x,\n    y: 2 * p1.y - 2 * p0.y\n  };\n  const A = 4 * (a.x * a.x + a.y * a.y);\n  const B = 4 * (a.x * b.x + a.y * b.y);\n  const C = b.x * b.x + b.y * b.y;\n\n  const Sabc = 2 * Math.sqrt(A + B + C);\n  const A_2 = Math.sqrt(A);\n  const A_32 = 2 * A * A_2;\n  const C_2 = 2 * Math.sqrt(C);\n  const BA = B / A_2;\n  return (\n    (A_32 * Sabc + A_2 * B * (Sabc - C_2) + (4 * C * A - B * B) * Math.log((2 * A_2 + BA + Sabc) / (BA + C_2))) /\n    (4 * A_32)\n  );\n};\n\nexport const distance = (p0: Point, p1: Point) => {\n  return Math.sqrt(Math.pow(p0.x - p1.x, 2) + Math.pow(p0.y - p1.y, 2));\n};\n\nexport const squaredDistance = (p0: Point, p1: Point) => {\n  return Math.pow(p0.x - p1.x, 2) + Math.pow(p0.y - p1.y, 2);\n};\n\nexport const normalize = (v1: Vector): Vector => {\n  const norm = Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n  return {\n    x: v1.x / norm,\n    y: v1.y / norm\n  };\n};\n\n// http://www.euclideanspace.com/maths/algebra/vectors/angleBetween/index.htm\nexport const angleBetweenVectors = (v1: Vector, v2: Vector) => {\n  return Math.atan2(v2.y, v2.x) - Math.atan2(v1.y, v1.x);\n};\n\nexport const average = <U>(arr: U[], f: (u: U) => number): number | undefined => {\n  return arr.length > 0 ? arr.reduce((agg, cur) => agg + f(cur), 0) / arr.length : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}
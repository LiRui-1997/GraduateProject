{"ast":null,"code":"import _regeneratorRuntime from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios';\nimport { config } from '../config';\nimport { HTTP_VERBS } from '../types/Common';\nimport { NodeType } from '../types/Graph';\nimport { AppHealth, ServiceHealth, WorkloadHealth } from '../types/Health';\nexport var ANONYMOUS_USER = 'anonymous';\n\n/** API URLs */\nvar urls = config.api.urls;\n/**  Headers Definitions */\n\nvar loginHeaders = config.login.headers;\n/**  Helpers to Requests */\n\nvar getHeaders = function getHeaders() {\n  return _objectSpread({}, loginHeaders);\n};\n/** Create content type correctly for a given request type */\n\n\nvar getHeadersWithMethod = function getHeadersWithMethod(method) {\n  var allHeaders = getHeaders();\n\n  if (method === HTTP_VERBS.PATCH) {\n    allHeaders['Content-Type'] = 'application/json';\n  }\n\n  return allHeaders;\n};\n\nvar basicAuth = function basicAuth(username, password) {\n  return {\n    username: username,\n    password: password\n  };\n};\n\nvar newRequest = function newRequest(method, url, queryParams, data) {\n  return axios.request({\n    method: method,\n    url: url,\n    data: data,\n    headers: getHeadersWithMethod(method),\n    params: queryParams\n  });\n};\n\n/** Requests */\nexport var extendSession = function extendSession() {\n  return newRequest(HTTP_VERBS.GET, urls.authenticate, {}, {});\n};\nexport var login = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var request,\n        params,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            request = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n              username: ANONYMOUS_USER,\n              password: 'anonymous',\n              token: ''\n            };\n            params = new URLSearchParams();\n            params.append('token', request.token);\n            return _context.abrupt(\"return\", axios({\n              method: HTTP_VERBS.POST,\n              url: urls.authenticate,\n              headers: getHeaders(),\n              auth: basicAuth(request.username, request.password),\n              data: params\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function login() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var logout = function logout() {\n  return newRequest(HTTP_VERBS.GET, urls.logout, {}, {});\n};\nexport var getAuthInfo = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", newRequest(HTTP_VERBS.GET, urls.authInfo, {}, {}));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAuthInfo() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var checkOpenshiftAuth = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", newRequest(HTTP_VERBS.POST, urls.authenticate, {}, data));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function checkOpenshiftAuth(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getStatus = function getStatus() {\n  return newRequest(HTTP_VERBS.GET, urls.status, {}, {});\n};\nexport var getNamespaces = function getNamespaces() {\n  return newRequest(HTTP_VERBS.GET, urls.namespaces, {}, {});\n};\nexport var getNamespaceMetrics = function getNamespaceMetrics(namespace, params) {\n  return newRequest(HTTP_VERBS.GET, urls.namespaceMetrics(namespace), params, {});\n};\nexport var getMeshTls = function getMeshTls() {\n  return newRequest(HTTP_VERBS.GET, urls.meshTls(), {}, {});\n};\nexport var getIstioStatus = function getIstioStatus() {\n  return newRequest(HTTP_VERBS.GET, urls.istioStatus(), {}, {});\n};\nexport var getIstioCertsInfo = function getIstioCertsInfo() {\n  return newRequest(HTTP_VERBS.GET, urls.istioCertsInfo(), {}, {});\n};\nexport var getNamespaceTls = function getNamespaceTls(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.namespaceTls(namespace), {}, {});\n};\nexport var getNamespaceValidations = function getNamespaceValidations(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.namespaceValidations(namespace), {}, {});\n};\nexport var updateNamespace = function updateNamespace(namespace, jsonPatch) {\n  return newRequest(HTTP_VERBS.PATCH, urls.namespace(namespace), {}, jsonPatch);\n};\nexport var getIstioConfig = function getIstioConfig(namespace, objects, validate, labelSelector, workloadSelector) {\n  var params = objects && objects.length > 0 ? {\n    objects: objects.join(',')\n  } : {};\n\n  if (validate) {\n    params.validate = validate;\n  }\n\n  if (labelSelector) {\n    params.labelSelector = labelSelector;\n  }\n\n  if (workloadSelector) {\n    params.workloadSelector = workloadSelector;\n  }\n\n  return newRequest(HTTP_VERBS.GET, urls.istioConfig(namespace), params, {});\n};\nexport var getIstioConfigDetail = function getIstioConfigDetail(namespace, objectType, object, validate) {\n  return newRequest(HTTP_VERBS.GET, urls.istioConfigDetail(namespace, objectType, object), validate ? {\n    validate: true\n  } : {}, {});\n};\nexport var deleteIstioConfigDetail = function deleteIstioConfigDetail(namespace, objectType, object) {\n  return newRequest(HTTP_VERBS.DELETE, urls.istioConfigDetail(namespace, objectType, object), {}, {});\n};\nexport var updateIstioConfigDetail = function updateIstioConfigDetail(namespace, objectType, object, jsonPatch) {\n  return newRequest(HTTP_VERBS.PATCH, urls.istioConfigDetail(namespace, objectType, object), {}, jsonPatch);\n};\nexport var createIstioConfigDetail = function createIstioConfigDetail(namespace, objectType, json) {\n  return newRequest(HTTP_VERBS.POST, urls.istioConfigCreate(namespace, objectType), {}, json);\n};\nexport var getServices = function getServices(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.services(namespace), {}, {});\n};\nexport var getServiceMetrics = function getServiceMetrics(namespace, service, params) {\n  return newRequest(HTTP_VERBS.GET, urls.serviceMetrics(namespace, service), params, {});\n};\nexport var getServiceDashboard = function getServiceDashboard(namespace, service, params) {\n  return newRequest(HTTP_VERBS.GET, urls.serviceDashboard(namespace, service), params, {});\n};\nexport var getAggregateMetrics = function getAggregateMetrics(namespace, aggregate, aggregateValue, params) {\n  return newRequest(HTTP_VERBS.GET, urls.aggregateMetrics(namespace, aggregate, aggregateValue), params, {});\n};\nexport var getApp = function getApp(namespace, app) {\n  return newRequest(HTTP_VERBS.GET, urls.app(namespace, app), {}, {});\n};\nexport var getApps = function getApps(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.apps(namespace), {}, {});\n};\nexport var getAppMetrics = function getAppMetrics(namespace, app, params) {\n  return newRequest(HTTP_VERBS.GET, urls.appMetrics(namespace, app), params, {});\n};\nexport var getAppDashboard = function getAppDashboard(namespace, app, params) {\n  return newRequest(HTTP_VERBS.GET, urls.appDashboard(namespace, app), params, {});\n};\nexport var getWorkloadMetrics = function getWorkloadMetrics(namespace, workload, params) {\n  return newRequest(HTTP_VERBS.GET, urls.workloadMetrics(namespace, workload), params, {});\n};\nexport var getWorkloadDashboard = function getWorkloadDashboard(namespace, workload, params) {\n  return newRequest(HTTP_VERBS.GET, urls.workloadDashboard(namespace, workload), params, {});\n};\nexport var getCustomDashboard = function getCustomDashboard(ns, tpl, params) {\n  return newRequest(HTTP_VERBS.GET, urls.customDashboard(ns, tpl), params, {});\n};\nexport var getServiceHealth = function getServiceHealth(namespace, service, duration, hasSidecar) {\n  var params = duration ? {\n    rateInterval: String(duration) + 's'\n  } : {};\n  return newRequest(HTTP_VERBS.GET, urls.serviceHealth(namespace, service), params, {}).then(function (response) {\n    return ServiceHealth.fromJson(namespace, service, response.data, {\n      rateInterval: duration,\n      hasSidecar: hasSidecar\n    });\n  });\n};\nexport var getAppHealth = function getAppHealth(namespace, app, duration, hasSidecar) {\n  var params = duration ? {\n    rateInterval: String(duration) + 's'\n  } : {};\n  return newRequest(HTTP_VERBS.GET, urls.appHealth(namespace, app), params, {}).then(function (response) {\n    return AppHealth.fromJson(namespace, app, response.data, {\n      rateInterval: duration,\n      hasSidecar: hasSidecar\n    });\n  });\n};\nexport var getWorkloadHealth = function getWorkloadHealth(namespace, workload, workloadType, durationSec, hasSidecar) {\n  var params = durationSec ? {\n    rateInterval: String(durationSec) + 's'\n  } : {};\n  params['type'] = workloadType;\n  return newRequest(HTTP_VERBS.GET, urls.workloadHealth(namespace, workload), params, {}).then(function (response) {\n    return WorkloadHealth.fromJson(namespace, workload, response.data, {\n      rateInterval: durationSec,\n      hasSidecar: hasSidecar\n    });\n  });\n};\nexport var getNamespaceAppHealth = function getNamespaceAppHealth(namespace, duration, queryTime) {\n  var params = {\n    type: 'app'\n  };\n\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n\n  return newRequest(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(function (response) {\n    var ret = {};\n    Object.keys(response.data).forEach(function (k) {\n      ret[k] = AppHealth.fromJson(namespace, k, response.data[k], {\n        rateInterval: duration,\n        hasSidecar: true\n      });\n    });\n    return ret;\n  });\n};\nexport var getNamespaceServiceHealth = function getNamespaceServiceHealth(namespace, duration, queryTime) {\n  var params = {\n    type: 'service'\n  };\n\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n\n  return newRequest(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(function (response) {\n    var ret = {};\n    Object.keys(response.data).forEach(function (k) {\n      ret[k] = ServiceHealth.fromJson(namespace, k, response.data[k], {\n        rateInterval: duration,\n        hasSidecar: true\n      });\n    });\n    return ret;\n  });\n};\nexport var getNamespaceWorkloadHealth = function getNamespaceWorkloadHealth(namespace, duration, queryTime) {\n  var params = {\n    type: 'workload'\n  };\n\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n\n  return newRequest(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(function (response) {\n    var ret = {};\n    Object.keys(response.data).forEach(function (k) {\n      ret[k] = WorkloadHealth.fromJson(namespace, k, response.data[k], {\n        rateInterval: duration,\n        hasSidecar: true\n      });\n    });\n    return ret;\n  });\n};\nexport var getGrafanaInfo = function getGrafanaInfo() {\n  return newRequest(HTTP_VERBS.GET, urls.grafana, {}, {});\n};\nexport var getJaegerInfo = function getJaegerInfo() {\n  return newRequest(HTTP_VERBS.GET, urls.jaeger, {}, {});\n};\nexport var getAppTraces = function getAppTraces(namespace, app, params) {\n  return newRequest(HTTP_VERBS.GET, urls.appTraces(namespace, app), params, {});\n};\nexport var getServiceTraces = function getServiceTraces(namespace, service, params) {\n  return newRequest(HTTP_VERBS.GET, urls.serviceTraces(namespace, service), params, {});\n};\nexport var getWorkloadTraces = function getWorkloadTraces(namespace, workload, params) {\n  return newRequest(HTTP_VERBS.GET, urls.workloadTraces(namespace, workload), params, {});\n};\nexport var getJaegerErrorTraces = function getJaegerErrorTraces(namespace, service, duration) {\n  return newRequest(HTTP_VERBS.GET, urls.jaegerErrorTraces(namespace, service), {\n    duration: duration\n  }, {});\n};\nexport var getJaegerTrace = function getJaegerTrace(idTrace) {\n  return newRequest(HTTP_VERBS.GET, urls.jaegerTrace(idTrace), {}, {});\n};\nexport var getGraphElements = function getGraphElements(params) {\n  return newRequest(HTTP_VERBS.GET, urls.namespacesGraphElements, params, {});\n};\nexport var getNodeGraphElements = function getNodeGraphElements(node, params) {\n  switch (node.nodeType) {\n    case NodeType.AGGREGATE:\n      return !node.service ? newRequest(HTTP_VERBS.GET, urls.aggregateGraphElements(node.namespace.name, node.aggregate, node.aggregateValue), params, {}) : newRequest(HTTP_VERBS.GET, urls.aggregateByServiceGraphElements(node.namespace.name, node.aggregate, node.aggregateValue, node.service), params, {});\n\n    case NodeType.APP:\n    case NodeType.BOX:\n      // we only support app box node graphs, so treat like app\n      return newRequest(HTTP_VERBS.GET, urls.appGraphElements(node.namespace.name, node.app, node.version), params, {});\n\n    case NodeType.SERVICE:\n      return newRequest(HTTP_VERBS.GET, urls.serviceGraphElements(node.namespace.name, node.service), params, {});\n\n    case NodeType.WORKLOAD:\n      return newRequest(HTTP_VERBS.GET, urls.workloadGraphElements(node.namespace.name, node.workload), params, {});\n\n    default:\n      // default to namespace graph\n      return getGraphElements(_objectSpread({\n        namespaces: node.namespace.name\n      }, params));\n  }\n};\nexport var getServerConfig = function getServerConfig() {\n  return newRequest(HTTP_VERBS.GET, urls.serverConfig, {}, {});\n};\nexport var getServiceDetail = function getServiceDetail(namespace, service, validate, rateInterval) {\n  var params = {};\n\n  if (validate) {\n    params.validate = true;\n  }\n\n  if (rateInterval) {\n    params.rateInterval = \"\".concat(rateInterval, \"s\");\n  }\n\n  return newRequest(HTTP_VERBS.GET, urls.service(namespace, service), params, {}).then(function (r) {\n    var info = r.data;\n\n    if (info.health) {\n      // Default rate interval in backend = 600s\n      info.health = ServiceHealth.fromJson(namespace, service, info.health, {\n        rateInterval: rateInterval || 600,\n        hasSidecar: info.istioSidecar\n      });\n    }\n\n    return info;\n  });\n};\nexport var getWorkloads = function getWorkloads(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.workloads(namespace), {}, {});\n};\nexport var getWorkload = function getWorkload(namespace, name) {\n  return newRequest(HTTP_VERBS.GET, urls.workload(namespace, name), {}, {});\n};\nexport var updateWorkload = function updateWorkload(namespace, name, type, jsonPatch) {\n  return newRequest(HTTP_VERBS.PATCH, urls.workload(namespace, name), {\n    type: type\n  }, jsonPatch);\n};\nexport var getPod = function getPod(namespace, name) {\n  return newRequest(HTTP_VERBS.GET, urls.pod(namespace, name), {}, {});\n};\nexport var getPodLogs = function getPodLogs(namespace, name, container, tailLines, sinceTime, duration, isProxy) {\n  var params = {};\n\n  if (container) {\n    params.container = container;\n  }\n\n  if (sinceTime) {\n    params.sinceTime = sinceTime;\n  }\n\n  if (tailLines && tailLines > 0) {\n    params.tailLines = tailLines;\n  }\n\n  if (duration && duration > 0) {\n    params.duration = \"\".concat(duration, \"s\");\n  }\n\n  params.isProxy = !!isProxy;\n  return newRequest(HTTP_VERBS.GET, urls.podLogs(namespace, name), params, {});\n};\nexport var setPodEnvoyProxyLogLevel = function setPodEnvoyProxyLogLevel(namespace, name, level) {\n  var params = {};\n  params.level = level;\n  return newRequest(HTTP_VERBS.POST, urls.podEnvoyProxyLogging(namespace, name), params, {});\n};\nexport var getPodEnvoyProxy = function getPodEnvoyProxy(namespace, pod) {\n  return newRequest(HTTP_VERBS.GET, urls.podEnvoyProxy(namespace, pod), {}, {});\n};\nexport var getPodEnvoyProxyResourceEntries = function getPodEnvoyProxyResourceEntries(namespace, pod, resource) {\n  return newRequest(HTTP_VERBS.GET, urls.podEnvoyProxyResourceEntries(namespace, pod, resource), {}, {});\n};\nexport var getErrorString = function getErrorString(error) {\n  if (error && error.response) {\n    if (error.response.data && error.response.data.error) {\n      return error.response.data.error;\n    }\n\n    if (error.response.statusText) {\n      var errorString = error.response.statusText;\n\n      if (error.response.status === 401) {\n        errorString += ': Has your session expired? Try logging in again.';\n      }\n\n      return errorString;\n    }\n  }\n\n  return '';\n};\nexport var getErrorDetail = function getErrorDetail(error) {\n  if (error && error.response) {\n    if (error.response.data && error.response.data.detail) {\n      return error.response.data.detail;\n    }\n  }\n\n  return '';\n};\nexport var getAppSpans = function getAppSpans(namespace, app, params) {\n  return newRequest(HTTP_VERBS.GET, urls.appSpans(namespace, app), params, {});\n};\nexport var getServiceSpans = function getServiceSpans(namespace, service, params) {\n  return newRequest(HTTP_VERBS.GET, urls.serviceSpans(namespace, service), params, {});\n};\nexport var getWorkloadSpans = function getWorkloadSpans(namespace, workload, params) {\n  return newRequest(HTTP_VERBS.GET, urls.workloadSpans(namespace, workload), params, {});\n};\nexport var getIstioPermissions = function getIstioPermissions(namespaces) {\n  return newRequest(HTTP_VERBS.GET, urls.istioPermissions, {\n    namespaces: namespaces.join(',')\n  }, {});\n};\nexport var getIter8Info = function getIter8Info() {\n  return newRequest(HTTP_VERBS.GET, urls.iter8, {}, {});\n};\nexport var getIter8Metrics = function getIter8Metrics() {\n  return newRequest(HTTP_VERBS.GET, urls.iter8Metrics, {}, {});\n};\nexport var getExperiments = function getExperiments(namespaces) {\n  return newRequest(HTTP_VERBS.GET, urls.iter8Experiments, {\n    namespaces: namespaces.join(',')\n  }, {});\n};\nexport var getExperimentsByNamespace = function getExperimentsByNamespace(namespace) {\n  return newRequest(HTTP_VERBS.GET, urls.iter8ExperimentsByNamespace(namespace), {}, {});\n};\nexport var getExperiment = function getExperiment(namespace, name) {\n  return newRequest(HTTP_VERBS.GET, urls.iter8Experiment(namespace, name), {}, {});\n};\nexport var getExperimentYAML = function getExperimentYAML(namespace, name) {\n  return newRequest(HTTP_VERBS.GET, urls.iter8ExperimentYAML(namespace, name), {}, {});\n};\nexport var deleteExperiment = function deleteExperiment(namespace, name) {\n  return newRequest(HTTP_VERBS.DELETE, urls.iter8Experiment(namespace, name), {}, {});\n};\nexport var createExperiment = function createExperiment(namespace, specBody, params) {\n  return newRequest(HTTP_VERBS.POST, urls.iter8ExperimentsByNamespace(namespace), params, specBody);\n};\nexport var updateExperiment = function updateExperiment(namespace, name, specBody) {\n  return newRequest(HTTP_VERBS.PATCH, urls.iter8Experiment(namespace, name), {}, specBody);\n};\nexport var getMetricsStats = function getMetricsStats(queries) {\n  return newRequest(HTTP_VERBS.POST, urls.metricsStats, {}, {\n    queries: queries\n  });\n};\nexport var getClusters = function getClusters() {\n  return newRequest(HTTP_VERBS.GET, urls.clusters, {}, {});\n};","map":{"version":3,"sources":["/root/kiali-ui/src/services/Api.ts"],"names":["axios","config","HTTP_VERBS","NodeType","AppHealth","ServiceHealth","WorkloadHealth","ANONYMOUS_USER","urls","api","loginHeaders","login","headers","getHeaders","getHeadersWithMethod","method","allHeaders","PATCH","basicAuth","username","password","newRequest","url","queryParams","data","request","params","extendSession","GET","authenticate","token","URLSearchParams","append","POST","auth","logout","getAuthInfo","authInfo","checkOpenshiftAuth","getStatus","status","getNamespaces","namespaces","getNamespaceMetrics","namespace","namespaceMetrics","getMeshTls","meshTls","getIstioStatus","istioStatus","getIstioCertsInfo","istioCertsInfo","getNamespaceTls","namespaceTls","getNamespaceValidations","namespaceValidations","updateNamespace","jsonPatch","getIstioConfig","objects","validate","labelSelector","workloadSelector","length","join","istioConfig","getIstioConfigDetail","objectType","object","istioConfigDetail","deleteIstioConfigDetail","DELETE","updateIstioConfigDetail","createIstioConfigDetail","json","istioConfigCreate","getServices","services","getServiceMetrics","service","serviceMetrics","getServiceDashboard","serviceDashboard","getAggregateMetrics","aggregate","aggregateValue","aggregateMetrics","getApp","app","getApps","apps","getAppMetrics","appMetrics","getAppDashboard","appDashboard","getWorkloadMetrics","workload","workloadMetrics","getWorkloadDashboard","workloadDashboard","getCustomDashboard","ns","tpl","customDashboard","getServiceHealth","duration","hasSidecar","rateInterval","String","serviceHealth","then","response","fromJson","getAppHealth","appHealth","getWorkloadHealth","workloadType","durationSec","workloadHealth","getNamespaceAppHealth","queryTime","type","namespaceHealth","ret","Object","keys","forEach","k","getNamespaceServiceHealth","getNamespaceWorkloadHealth","getGrafanaInfo","grafana","getJaegerInfo","jaeger","getAppTraces","appTraces","getServiceTraces","serviceTraces","getWorkloadTraces","workloadTraces","getJaegerErrorTraces","jaegerErrorTraces","getJaegerTrace","idTrace","jaegerTrace","getGraphElements","namespacesGraphElements","getNodeGraphElements","node","nodeType","AGGREGATE","aggregateGraphElements","name","aggregateByServiceGraphElements","APP","BOX","appGraphElements","version","SERVICE","serviceGraphElements","WORKLOAD","workloadGraphElements","getServerConfig","serverConfig","getServiceDetail","r","info","health","istioSidecar","getWorkloads","workloads","getWorkload","updateWorkload","getPod","pod","getPodLogs","container","tailLines","sinceTime","isProxy","podLogs","setPodEnvoyProxyLogLevel","level","podEnvoyProxyLogging","getPodEnvoyProxy","podEnvoyProxy","getPodEnvoyProxyResourceEntries","resource","podEnvoyProxyResourceEntries","getErrorString","error","statusText","errorString","getErrorDetail","detail","getAppSpans","appSpans","getServiceSpans","serviceSpans","getWorkloadSpans","workloadSpans","getIstioPermissions","istioPermissions","getIter8Info","iter8","getIter8Metrics","iter8Metrics","getExperiments","iter8Experiments","getExperimentsByNamespace","iter8ExperimentsByNamespace","getExperiment","iter8Experiment","getExperimentYAML","iter8ExperimentYAML","deleteExperiment","createExperiment","specBody","updateExperiment","getMetricsStats","queries","metricsStats","getClusters","clusters"],"mappings":"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","sourcesContent":["import axios, { AxiosError } from 'axios';\n\nimport { config } from '../config';\nimport { LoginSession } from '../store/Store';\n\nimport { App } from '../types/App';\nimport { AppList } from '../types/AppList';\nimport { AuthInfo } from '../types/Auth';\nimport { DurationInSeconds, HTTP_VERBS, Password, TimeInSeconds, UserName } from '../types/Common';\nimport { DashboardModel } from 'types/Dashboards';\nimport { GrafanaInfo } from '../types/GrafanaInfo';\nimport { GraphDefinition, NodeParamsType, NodeType } from '../types/Graph';\nimport {\n  AppHealth,\n  NamespaceAppHealth,\n  NamespaceServiceHealth,\n  NamespaceWorkloadHealth,\n  ServiceHealth,\n  WorkloadHealth\n} from '../types/Health';\nimport { IstioConfigDetails, IstioPermissions } from '../types/IstioConfigDetails';\nimport { IstioConfigList } from '../types/IstioConfigList';\nimport { Pod, PodLogs, ValidationStatus, EnvoyProxyDump } from '../types/IstioObjects';\nimport { ComponentStatus } from '../types/IstioStatus';\nimport { Iter8ExpDetailsInfo, Iter8Experiment, Iter8Info, ExperimentSpec } from '../types/Iter8';\nimport { JaegerInfo, JaegerResponse, JaegerSingleResponse } from '../types/JaegerInfo';\nimport { MeshClusters } from '../types/Mesh';\nimport { DashboardQuery, IstioMetricsOptions, MetricsStatsQuery } from '../types/MetricsOptions';\nimport { IstioMetricsMap, MetricsStatsResult } from '../types/Metrics';\nimport Namespace from '../types/Namespace';\nimport { ServerConfig } from '../types/ServerConfig';\nimport { StatusState } from '../types/StatusState';\nimport { ServiceDetailsInfo } from '../types/ServiceInfo';\nimport { ServiceList } from '../types/ServiceList';\nimport { Span, TracingQuery } from 'types/Tracing';\nimport { TLSStatus } from '../types/TLSStatus';\nimport { Workload, WorkloadNamespaceResponse } from '../types/Workload';\nimport { CertsInfo } from 'types/CertsInfo';\nexport const ANONYMOUS_USER = 'anonymous';\n\nexport interface Response<T> {\n  data: T;\n}\n\n/** API URLs */\n\nconst urls = config.api.urls;\n\n/**  Headers Definitions */\n\nconst loginHeaders = config.login.headers;\n\n/**  Helpers to Requests */\n\nconst getHeaders = () => {\n  return { ...loginHeaders };\n};\n\n/** Create content type correctly for a given request type */\nconst getHeadersWithMethod = method => {\n  var allHeaders = getHeaders();\n  if (method === HTTP_VERBS.PATCH) {\n    allHeaders['Content-Type'] = 'application/json';\n  }\n\n  return allHeaders;\n};\n\nconst basicAuth = (username: UserName, password: Password) => {\n  return { username: username, password: password };\n};\n\nconst newRequest = <P>(method: HTTP_VERBS, url: string, queryParams: any, data: any) =>\n  axios.request<P>({\n    method: method,\n    url: url,\n    data: data,\n    headers: getHeadersWithMethod(method),\n    params: queryParams\n  });\n\ninterface LoginRequest {\n  username: UserName;\n  password: Password;\n  token: Password;\n}\n\n/** Requests */\nexport const extendSession = () => {\n  return newRequest<LoginSession>(HTTP_VERBS.GET, urls.authenticate, {}, {});\n};\n\nexport const login = async (\n  request: LoginRequest = { username: ANONYMOUS_USER, password: 'anonymous', token: '' }\n): Promise<Response<LoginSession>> => {\n  const params = new URLSearchParams();\n  params.append('token', request.token);\n\n  return axios({\n    method: HTTP_VERBS.POST,\n    url: urls.authenticate,\n    headers: getHeaders(),\n    auth: basicAuth(request.username, request.password),\n    data: params\n  });\n};\n\nexport const logout = () => {\n  return newRequest<undefined>(HTTP_VERBS.GET, urls.logout, {}, {});\n};\n\nexport const getAuthInfo = async () => {\n  return newRequest<AuthInfo>(HTTP_VERBS.GET, urls.authInfo, {}, {});\n};\n\nexport const checkOpenshiftAuth = async (data: any): Promise<Response<LoginSession>> => {\n  return newRequest<LoginSession>(HTTP_VERBS.POST, urls.authenticate, {}, data);\n};\n\nexport const getStatus = () => {\n  return newRequest<StatusState>(HTTP_VERBS.GET, urls.status, {}, {});\n};\n\nexport const getNamespaces = () => {\n  return newRequest<Namespace[]>(HTTP_VERBS.GET, urls.namespaces, {}, {});\n};\n\nexport const getNamespaceMetrics = (namespace: string, params: IstioMetricsOptions) => {\n  return newRequest<Readonly<IstioMetricsMap>>(HTTP_VERBS.GET, urls.namespaceMetrics(namespace), params, {});\n};\n\nexport const getMeshTls = () => {\n  return newRequest<TLSStatus>(HTTP_VERBS.GET, urls.meshTls(), {}, {});\n};\n\nexport const getIstioStatus = () => {\n  return newRequest<ComponentStatus[]>(HTTP_VERBS.GET, urls.istioStatus(), {}, {});\n};\n\nexport const getIstioCertsInfo = () => {\n  return newRequest<CertsInfo[]>(HTTP_VERBS.GET, urls.istioCertsInfo(), {}, {});\n};\n\nexport const getNamespaceTls = (namespace: string) => {\n  return newRequest<TLSStatus>(HTTP_VERBS.GET, urls.namespaceTls(namespace), {}, {});\n};\n\nexport const getNamespaceValidations = (namespace: string) => {\n  return newRequest<ValidationStatus>(HTTP_VERBS.GET, urls.namespaceValidations(namespace), {}, {});\n};\n\nexport const updateNamespace = (namespace: string, jsonPatch: string): Promise<Response<string>> => {\n  return newRequest(HTTP_VERBS.PATCH, urls.namespace(namespace), {}, jsonPatch);\n};\n\nexport const getIstioConfig = (\n  namespace: string,\n  objects: string[],\n  validate: boolean,\n  labelSelector: string,\n  workloadSelector: string\n) => {\n  const params: any = objects && objects.length > 0 ? { objects: objects.join(',') } : {};\n  if (validate) {\n    params.validate = validate;\n  }\n  if (labelSelector) {\n    params.labelSelector = labelSelector;\n  }\n  if (workloadSelector) {\n    params.workloadSelector = workloadSelector;\n  }\n  return newRequest<IstioConfigList>(HTTP_VERBS.GET, urls.istioConfig(namespace), params, {});\n};\n\nexport const getIstioConfigDetail = (namespace: string, objectType: string, object: string, validate: boolean) => {\n  return newRequest<IstioConfigDetails>(\n    HTTP_VERBS.GET,\n    urls.istioConfigDetail(namespace, objectType, object),\n    validate ? { validate: true } : {},\n    {}\n  );\n};\n\nexport const deleteIstioConfigDetail = (namespace: string, objectType: string, object: string) => {\n  return newRequest<string>(HTTP_VERBS.DELETE, urls.istioConfigDetail(namespace, objectType, object), {}, {});\n};\n\nexport const updateIstioConfigDetail = (\n  namespace: string,\n  objectType: string,\n  object: string,\n  jsonPatch: string\n): Promise<Response<string>> => {\n  return newRequest(HTTP_VERBS.PATCH, urls.istioConfigDetail(namespace, objectType, object), {}, jsonPatch);\n};\n\nexport const createIstioConfigDetail = (\n  namespace: string,\n  objectType: string,\n  json: string\n): Promise<Response<string>> => {\n  return newRequest(HTTP_VERBS.POST, urls.istioConfigCreate(namespace, objectType), {}, json);\n};\n\nexport const getServices = (namespace: string) => {\n  return newRequest<ServiceList>(HTTP_VERBS.GET, urls.services(namespace), {}, {});\n};\n\nexport const getServiceMetrics = (namespace: string, service: string, params: IstioMetricsOptions) => {\n  return newRequest<IstioMetricsMap>(HTTP_VERBS.GET, urls.serviceMetrics(namespace, service), params, {});\n};\n\nexport const getServiceDashboard = (namespace: string, service: string, params: IstioMetricsOptions) => {\n  return newRequest<DashboardModel>(HTTP_VERBS.GET, urls.serviceDashboard(namespace, service), params, {});\n};\n\nexport const getAggregateMetrics = (\n  namespace: string,\n  aggregate: string,\n  aggregateValue: string,\n  params: IstioMetricsOptions\n) => {\n  return newRequest<IstioMetricsMap>(\n    HTTP_VERBS.GET,\n    urls.aggregateMetrics(namespace, aggregate, aggregateValue),\n    params,\n    {}\n  );\n};\n\nexport const getApp = (namespace: string, app: string) => {\n  return newRequest<App>(HTTP_VERBS.GET, urls.app(namespace, app), {}, {});\n};\n\nexport const getApps = (namespace: string) => {\n  return newRequest<AppList>(HTTP_VERBS.GET, urls.apps(namespace), {}, {});\n};\n\nexport const getAppMetrics = (namespace: string, app: string, params: IstioMetricsOptions) => {\n  return newRequest<IstioMetricsMap>(HTTP_VERBS.GET, urls.appMetrics(namespace, app), params, {});\n};\n\nexport const getAppDashboard = (namespace: string, app: string, params: IstioMetricsOptions) => {\n  return newRequest<DashboardModel>(HTTP_VERBS.GET, urls.appDashboard(namespace, app), params, {});\n};\n\nexport const getWorkloadMetrics = (namespace: string, workload: string, params: IstioMetricsOptions) => {\n  return newRequest<IstioMetricsMap>(HTTP_VERBS.GET, urls.workloadMetrics(namespace, workload), params, {});\n};\n\nexport const getWorkloadDashboard = (namespace: string, workload: string, params: IstioMetricsOptions) => {\n  return newRequest<DashboardModel>(HTTP_VERBS.GET, urls.workloadDashboard(namespace, workload), params, {});\n};\n\nexport const getCustomDashboard = (ns: string, tpl: string, params: DashboardQuery) => {\n  return newRequest<DashboardModel>(HTTP_VERBS.GET, urls.customDashboard(ns, tpl), params, {});\n};\n\nexport const getServiceHealth = (\n  namespace: string,\n  service: string,\n  duration: DurationInSeconds,\n  hasSidecar: boolean\n): Promise<ServiceHealth> => {\n  const params = duration ? { rateInterval: String(duration) + 's' } : {};\n  return newRequest(HTTP_VERBS.GET, urls.serviceHealth(namespace, service), params, {}).then(response =>\n    ServiceHealth.fromJson(namespace, service, response.data, { rateInterval: duration, hasSidecar: hasSidecar })\n  );\n};\n\nexport const getAppHealth = (\n  namespace: string,\n  app: string,\n  duration: DurationInSeconds,\n  hasSidecar: boolean\n): Promise<AppHealth> => {\n  const params = duration ? { rateInterval: String(duration) + 's' } : {};\n  return newRequest(HTTP_VERBS.GET, urls.appHealth(namespace, app), params, {}).then(response =>\n    AppHealth.fromJson(namespace, app, response.data, { rateInterval: duration, hasSidecar: hasSidecar })\n  );\n};\n\nexport const getWorkloadHealth = (\n  namespace: string,\n  workload: string,\n  workloadType: string,\n  durationSec: number,\n  hasSidecar: boolean\n): Promise<WorkloadHealth> => {\n  const params = durationSec ? { rateInterval: String(durationSec) + 's' } : {};\n  params['type'] = workloadType;\n  return newRequest(HTTP_VERBS.GET, urls.workloadHealth(namespace, workload), params, {}).then(response =>\n    WorkloadHealth.fromJson(namespace, workload, response.data, { rateInterval: durationSec, hasSidecar: hasSidecar })\n  );\n};\n\nexport const getNamespaceAppHealth = (\n  namespace: string,\n  duration: DurationInSeconds,\n  queryTime?: TimeInSeconds\n): Promise<NamespaceAppHealth> => {\n  const params: any = {\n    type: 'app'\n  };\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n  return newRequest<NamespaceAppHealth>(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(response => {\n    const ret: NamespaceAppHealth = {};\n    Object.keys(response.data).forEach(k => {\n      ret[k] = AppHealth.fromJson(namespace, k, response.data[k], { rateInterval: duration, hasSidecar: true });\n    });\n    return ret;\n  });\n};\n\nexport const getNamespaceServiceHealth = (\n  namespace: string,\n  duration: DurationInSeconds,\n  queryTime?: TimeInSeconds\n): Promise<NamespaceServiceHealth> => {\n  const params: any = {\n    type: 'service'\n  };\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n  return newRequest<NamespaceServiceHealth>(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(\n    response => {\n      const ret: NamespaceServiceHealth = {};\n      Object.keys(response.data).forEach(k => {\n        ret[k] = ServiceHealth.fromJson(namespace, k, response.data[k], {\n          rateInterval: duration,\n          hasSidecar: true\n        });\n      });\n      return ret;\n    }\n  );\n};\n\nexport const getNamespaceWorkloadHealth = (\n  namespace: string,\n  duration: DurationInSeconds,\n  queryTime?: TimeInSeconds\n): Promise<NamespaceWorkloadHealth> => {\n  const params: any = {\n    type: 'workload'\n  };\n  if (duration) {\n    params.rateInterval = String(duration) + 's';\n  }\n  if (queryTime) {\n    params.queryTime = String(queryTime);\n  }\n  return newRequest<NamespaceWorkloadHealth>(HTTP_VERBS.GET, urls.namespaceHealth(namespace), params, {}).then(\n    response => {\n      const ret: NamespaceWorkloadHealth = {};\n      Object.keys(response.data).forEach(k => {\n        ret[k] = WorkloadHealth.fromJson(namespace, k, response.data[k], {\n          rateInterval: duration,\n          hasSidecar: true\n        });\n      });\n      return ret;\n    }\n  );\n};\n\nexport const getGrafanaInfo = () => {\n  return newRequest<GrafanaInfo>(HTTP_VERBS.GET, urls.grafana, {}, {});\n};\n\nexport const getJaegerInfo = () => {\n  return newRequest<JaegerInfo>(HTTP_VERBS.GET, urls.jaeger, {}, {});\n};\n\nexport const getAppTraces = (namespace: string, app: string, params: TracingQuery) => {\n  return newRequest<JaegerResponse>(HTTP_VERBS.GET, urls.appTraces(namespace, app), params, {});\n};\n\nexport const getServiceTraces = (namespace: string, service: string, params: TracingQuery) => {\n  return newRequest<JaegerResponse>(HTTP_VERBS.GET, urls.serviceTraces(namespace, service), params, {});\n};\n\nexport const getWorkloadTraces = (namespace: string, workload: string, params: TracingQuery) => {\n  return newRequest<JaegerResponse>(HTTP_VERBS.GET, urls.workloadTraces(namespace, workload), params, {});\n};\n\nexport const getJaegerErrorTraces = (namespace: string, service: string, duration: DurationInSeconds) => {\n  return newRequest<number>(HTTP_VERBS.GET, urls.jaegerErrorTraces(namespace, service), { duration: duration }, {});\n};\n\nexport const getJaegerTrace = (idTrace: string) => {\n  return newRequest<JaegerSingleResponse>(HTTP_VERBS.GET, urls.jaegerTrace(idTrace), {}, {});\n};\n\nexport const getGraphElements = (params: any) => {\n  return newRequest<GraphDefinition>(HTTP_VERBS.GET, urls.namespacesGraphElements, params, {});\n};\n\nexport const getNodeGraphElements = (node: NodeParamsType, params: any) => {\n  switch (node.nodeType) {\n    case NodeType.AGGREGATE:\n      return !node.service\n        ? newRequest<GraphDefinition>(\n            HTTP_VERBS.GET,\n            urls.aggregateGraphElements(node.namespace.name, node.aggregate!, node.aggregateValue!),\n            params,\n            {}\n          )\n        : newRequest<GraphDefinition>(\n            HTTP_VERBS.GET,\n            urls.aggregateByServiceGraphElements(\n              node.namespace.name,\n              node.aggregate!,\n              node.aggregateValue!,\n              node.service\n            ),\n            params,\n            {}\n          );\n    case NodeType.APP:\n    case NodeType.BOX: // we only support app box node graphs, so treat like app\n      return newRequest<GraphDefinition>(\n        HTTP_VERBS.GET,\n        urls.appGraphElements(node.namespace.name, node.app, node.version),\n        params,\n        {}\n      );\n    case NodeType.SERVICE:\n      return newRequest<GraphDefinition>(\n        HTTP_VERBS.GET,\n        urls.serviceGraphElements(node.namespace.name, node.service),\n        params,\n        {}\n      );\n    case NodeType.WORKLOAD:\n      return newRequest<GraphDefinition>(\n        HTTP_VERBS.GET,\n        urls.workloadGraphElements(node.namespace.name, node.workload),\n        params,\n        {}\n      );\n    default:\n      // default to namespace graph\n      return getGraphElements({ namespaces: node.namespace.name, ...params });\n  }\n};\n\nexport const getServerConfig = () => {\n  return newRequest<ServerConfig>(HTTP_VERBS.GET, urls.serverConfig, {}, {});\n};\n\nexport const getServiceDetail = (\n  namespace: string,\n  service: string,\n  validate: boolean,\n  rateInterval?: DurationInSeconds\n): Promise<ServiceDetailsInfo> => {\n  const params: any = {};\n  if (validate) {\n    params.validate = true;\n  }\n  if (rateInterval) {\n    params.rateInterval = `${rateInterval}s`;\n  }\n  return newRequest<ServiceDetailsInfo>(HTTP_VERBS.GET, urls.service(namespace, service), params, {}).then(r => {\n    const info: ServiceDetailsInfo = r.data;\n    if (info.health) {\n      // Default rate interval in backend = 600s\n      info.health = ServiceHealth.fromJson(namespace, service, info.health, {\n        rateInterval: rateInterval || 600,\n        hasSidecar: info.istioSidecar\n      });\n    }\n    return info;\n  });\n};\n\nexport const getWorkloads = (namespace: string) => {\n  return newRequest<WorkloadNamespaceResponse>(HTTP_VERBS.GET, urls.workloads(namespace), {}, {});\n};\n\nexport const getWorkload = (namespace: string, name: string) => {\n  return newRequest<Workload>(HTTP_VERBS.GET, urls.workload(namespace, name), {}, {});\n};\n\nexport const updateWorkload = (\n  namespace: string,\n  name: string,\n  type: string,\n  jsonPatch: string\n): Promise<Response<string>> => {\n  return newRequest(HTTP_VERBS.PATCH, urls.workload(namespace, name), { type: type }, jsonPatch);\n};\n\nexport const getPod = (namespace: string, name: string) => {\n  return newRequest<Pod>(HTTP_VERBS.GET, urls.pod(namespace, name), {}, {});\n};\n\nexport const getPodLogs = (\n  namespace: string,\n  name: string,\n  container?: string,\n  tailLines?: number,\n  sinceTime?: number,\n  duration?: DurationInSeconds,\n  isProxy?: boolean\n) => {\n  const params: any = {};\n  if (container) {\n    params.container = container;\n  }\n  if (sinceTime) {\n    params.sinceTime = sinceTime;\n  }\n  if (tailLines && tailLines > 0) {\n    params.tailLines = tailLines;\n  }\n  if (duration && duration > 0) {\n    params.duration = `${duration}s`;\n  }\n  params.isProxy = !!isProxy;\n\n  return newRequest<PodLogs>(HTTP_VERBS.GET, urls.podLogs(namespace, name), params, {});\n};\n\nexport const setPodEnvoyProxyLogLevel = (namespace: string, name: string, level: string) => {\n  const params: any = {};\n  params.level = level;\n\n  return newRequest<undefined>(HTTP_VERBS.POST, urls.podEnvoyProxyLogging(namespace, name), params, {});\n};\n\nexport const getPodEnvoyProxy = (namespace: string, pod: string) => {\n  return newRequest<EnvoyProxyDump>(HTTP_VERBS.GET, urls.podEnvoyProxy(namespace, pod), {}, {});\n};\n\nexport const getPodEnvoyProxyResourceEntries = (namespace: string, pod: string, resource: string) => {\n  return newRequest<EnvoyProxyDump>(\n    HTTP_VERBS.GET,\n    urls.podEnvoyProxyResourceEntries(namespace, pod, resource),\n    {},\n    {}\n  );\n};\n\nexport const getErrorString = (error: AxiosError): string => {\n  if (error && error.response) {\n    if (error.response.data && error.response.data.error) {\n      return error.response.data.error;\n    }\n    if (error.response.statusText) {\n      let errorString = error.response.statusText;\n      if (error.response.status === 401) {\n        errorString += ': Has your session expired? Try logging in again.';\n      }\n      return errorString;\n    }\n  }\n  return '';\n};\n\nexport const getErrorDetail = (error: AxiosError): string => {\n  if (error && error.response) {\n    if (error.response.data && error.response.data.detail) {\n      return error.response.data.detail;\n    }\n  }\n  return '';\n};\n\nexport const getAppSpans = (namespace: string, app: string, params: TracingQuery) => {\n  return newRequest<Span[]>(HTTP_VERBS.GET, urls.appSpans(namespace, app), params, {});\n};\n\nexport const getServiceSpans = (namespace: string, service: string, params: TracingQuery) => {\n  return newRequest<Span[]>(HTTP_VERBS.GET, urls.serviceSpans(namespace, service), params, {});\n};\n\nexport const getWorkloadSpans = (namespace: string, workload: string, params: TracingQuery) => {\n  return newRequest<Span[]>(HTTP_VERBS.GET, urls.workloadSpans(namespace, workload), params, {});\n};\n\nexport const getIstioPermissions = (namespaces: string[]) => {\n  return newRequest<IstioPermissions>(HTTP_VERBS.GET, urls.istioPermissions, { namespaces: namespaces.join(',') }, {});\n};\n\nexport const getIter8Info = () => {\n  return newRequest<Iter8Info>(HTTP_VERBS.GET, urls.iter8, {}, {});\n};\n\nexport const getIter8Metrics = () => {\n  return newRequest<string[]>(HTTP_VERBS.GET, urls.iter8Metrics, {}, {});\n};\n\nexport const getExperiments = (namespaces: string[]) => {\n  return newRequest<Iter8Experiment[]>(HTTP_VERBS.GET, urls.iter8Experiments, { namespaces: namespaces.join(',') }, {});\n};\n\nexport const getExperimentsByNamespace = (namespace: string) => {\n  return newRequest<Iter8Experiment>(HTTP_VERBS.GET, urls.iter8ExperimentsByNamespace(namespace), {}, {});\n};\n\nexport const getExperiment = (namespace: string, name: string) => {\n  return newRequest<Iter8ExpDetailsInfo>(HTTP_VERBS.GET, urls.iter8Experiment(namespace, name), {}, {});\n};\n\nexport const getExperimentYAML = (namespace: string, name: string) => {\n  return newRequest<ExperimentSpec>(HTTP_VERBS.GET, urls.iter8ExperimentYAML(namespace, name), {}, {});\n};\n\nexport const deleteExperiment = (namespace: string, name: string) => {\n  return newRequest<Iter8Experiment>(HTTP_VERBS.DELETE, urls.iter8Experiment(namespace, name), {}, {});\n};\n\nexport const createExperiment = (namespace: string, specBody: string, params) => {\n  return newRequest<string>(HTTP_VERBS.POST, urls.iter8ExperimentsByNamespace(namespace), params, specBody);\n};\n\nexport const updateExperiment = (namespace: string, name: string, specBody: string) => {\n  return newRequest<Iter8Experiment>(HTTP_VERBS.PATCH, urls.iter8Experiment(namespace, name), {}, specBody);\n};\n\nexport const getMetricsStats = (queries: MetricsStatsQuery[]) => {\n  return newRequest<MetricsStatsResult>(HTTP_VERBS.POST, urls.metricsStats, {}, { queries: queries });\n};\n\nexport const getClusters = () => {\n  return newRequest<MeshClusters>(HTTP_VERBS.GET, urls.clusters, {}, {});\n};\n"]},"metadata":{},"sourceType":"module"}
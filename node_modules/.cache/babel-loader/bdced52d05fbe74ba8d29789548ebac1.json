{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelClusterBox.tsx\";\nimport * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { summaryFont, summaryHeader, summaryBodyTabs } from './SummaryPanelCommon';\nimport { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport KialiPageLink from 'components/Link/KialiPageLink';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from 'components/SummaryPanel/RateTable';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { NodeType, TrafficRate } from 'types/Graph';\nimport { getAccumulatedTrafficRateGrpc, getAccumulatedTrafficRateHttp, getAccumulatedTrafficRateTcp } from 'utils/TrafficRate';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nvar defaultState = {\n  clusterBox: null\n};\nvar topologyStyle = style({\n  margin: '0 1em'\n});\n\nvar SummaryPanelClusterBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelClusterBox, _React$Component);\n\n  var _super = _createSuper(SummaryPanelClusterBox);\n\n  function SummaryPanelClusterBox(props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelClusterBox);\n\n    _this = _super.call(this, props);\n\n    _this.countApps = function (boxed) {\n      var appVersions = {};\n      boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.APP, \"\\\"]\")).forEach(function (node) {\n        var app = node.data(CyNode.app);\n\n        if (appVersions[app] === undefined) {\n          appVersions[app] = new Set();\n        }\n\n        appVersions[app].add(node.data(CyNode.version));\n      });\n      return {\n        numApps: Object.getOwnPropertyNames(appVersions).length,\n        numVersions: Object.getOwnPropertyNames(appVersions).reduce(function (totalCount, version) {\n          return totalCount + appVersions[version].size;\n        }, 0)\n      };\n    };\n\n    _this.renderCluster = function (cluster) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: cluster,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: PFBadges.Cluster,\n        style: {\n          marginBottom: '2px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(KialiPageLink, {\n        href: \"/\",\n        cluster: cluster,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }\n      }, cluster), ' '), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderTopologySummary = function (numSvc, numWorkloads, numApps, numVersions, numEdges) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(\"strong\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }\n      }, \"Current Graph:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 7\n        }\n      }), numApps > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Applications, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }\n      }), numApps.toString(), \" \", numApps === 1 ? 'app ' : 'apps ', numVersions > 0 && \"(\".concat(numVersions, \" versions)\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }\n      })), numSvc > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Services, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }), numSvc.toString(), \" \", numSvc === 1 ? 'service' : 'services', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      })), numWorkloads > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Workloads, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }), numWorkloads.toString(), \" \", numWorkloads === 1 ? 'workload' : 'workloads', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      })), numEdges > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Topology, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }), numEdges.toString(), \" \", numEdges === 1 ? 'edge' : 'edges'));\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    return _this;\n  }\n\n  _createClass(SummaryPanelClusterBox, [{\n    key: \"render\",\n    value: function render() {\n      var clusterBox = this.props.data.summaryTarget;\n      var boxed = clusterBox.descendants();\n      var cluster = clusterBox.data(CyNode.cluster);\n      var numSvc = boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.SERVICE, \"\\\"]\")).size();\n      var numWorkloads = boxed.filter(\"node[nodeType = \\\"\".concat(NodeType.WORKLOAD, \"\\\"]\")).size();\n\n      var _this$countApps = this.countApps(boxed),\n          numApps = _this$countApps.numApps,\n          numVersions = _this$countApps.numVersions;\n\n      var numEdges = boxed.connectedEdges().size(); // inbound edges are from a different cluster\n\n      var inboundEdges = clusterBox.cy().nodes(\"[\".concat(CyNode.cluster, \" != \\\"\").concat(cluster, \"\\\"]\")).edgesTo(boxed); // outbound edges are to a different cluster\n\n      var outboundEdges = boxed.edgesTo(\"[\".concat(CyNode.cluster, \" != \\\"\").concat(cluster, \"\\\"]\")); // total edges are inbound + edges from boxed workload|app|root nodes (i.e. not injected service nodes or box nodes)\n\n      var totalEdges = inboundEdges.add(boxed.filter(\"[?\".concat(CyNode.workload, \"]\")).edgesTo('*'));\n      var grpcIn = getAccumulatedTrafficRateGrpc(inboundEdges);\n      var grpcOut = getAccumulatedTrafficRateGrpc(outboundEdges);\n      var grpcTotal = getAccumulatedTrafficRateGrpc(totalEdges);\n      var httpIn = getAccumulatedTrafficRateHttp(inboundEdges);\n      var httpOut = getAccumulatedTrafficRateHttp(outboundEdges);\n      var httpTotal = getAccumulatedTrafficRateHttp(totalEdges);\n      var isGrpcRequests = this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n      var tcpIn = getAccumulatedTrafficRateTcp(inboundEdges);\n      var tcpOut = getAccumulatedTrafficRateTcp(outboundEdges);\n      var tcpTotal = getAccumulatedTrafficRateTcp(totalEdges);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel panel-default\",\n        style: SummaryPanelClusterBox.panelStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-heading\",\n        style: summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, this.renderCluster(cluster), this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)), /*#__PURE__*/React.createElement(\"div\", {\n        className: summaryBodyTabs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SimpleTabs, {\n        id: \"graph_summary_tabs\",\n        defaultTab: 0,\n        style: {\n          paddingBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Inbound\",\n        eventKey: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      }, grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }), \" No inbound traffic.\"), grpcIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcIn.rate,\n        rateGrpcErr: grpcIn.rateGrpcErr,\n        rateNR: grpcIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }\n      }), httpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpIn.rate,\n        rate3xx: httpIn.rate3xx,\n        rate4xx: httpIn.rate4xx,\n        rate5xx: httpIn.rate5xx,\n        rateNR: httpIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }\n      }), tcpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpIn.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 36\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Outbound\",\n        eventKey: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }, grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }), \" No outbound traffic.\"), grpcOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcOut.rate,\n        rateGrpcErr: grpcOut.rateGrpcErr,\n        rateNR: grpcOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 19\n        }\n      }), httpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpOut.rate,\n        rate3xx: httpOut.rate3xx,\n        rate4xx: httpOut.rate4xx,\n        rate5xx: httpOut.rate5xx,\n        rateNR: httpOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      }), tcpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpOut.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Total\",\n        eventKey: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }\n      }, grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }), \" No traffic.\"), grpcTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcTotal.rate,\n        rateGrpcErr: grpcTotal.rateGrpcErr,\n        rateNR: grpcTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 19\n        }\n      }), httpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpTotal.rate,\n        rate3xx: httpTotal.rate3xx,\n        rate4xx: httpTotal.rate4xx,\n        rate5xx: httpTotal.rate5xx,\n        rateNR: httpTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 19\n        }\n      }), tcpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpTotal.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 39\n        }\n      }))))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // if the summaryTarget (i.e. graph) has changed, then init the state\n      return props.data.summaryTarget !== state.clusterBox ? {\n        clusterBox: props.data.summaryTarget\n      } : null;\n    }\n  }]);\n\n  return SummaryPanelClusterBox;\n}(React.Component);\n\nSummaryPanelClusterBox.panelStyle = {\n  height: '100%',\n  margin: 0,\n  minWidth: '25em',\n  overflowY: 'auto',\n  backgroundColor: PFColors.White,\n  width: '25em'\n};\nexport { SummaryPanelClusterBox as default };","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelClusterBox.tsx"],"names":["React","Tab","style","summaryFont","summaryHeader","summaryBodyTabs","CyNode","KialiPageLink","RateTableGrpc","RateTableHttp","RateTableTcp","SimpleTabs","PFColors","KialiIcon","NodeType","TrafficRate","getAccumulatedTrafficRateGrpc","getAccumulatedTrafficRateHttp","getAccumulatedTrafficRateTcp","PFBadge","PFBadges","defaultState","clusterBox","topologyStyle","margin","SummaryPanelClusterBox","props","countApps","boxed","appVersions","filter","APP","forEach","node","app","data","undefined","Set","add","version","numApps","Object","getOwnPropertyNames","length","numVersions","reduce","totalCount","size","renderCluster","cluster","Cluster","marginBottom","renderTopologySummary","numSvc","numWorkloads","numEdges","toString","state","summaryTarget","descendants","SERVICE","WORKLOAD","connectedEdges","inboundEdges","cy","nodes","edgesTo","outboundEdges","totalEdges","workload","grpcIn","grpcOut","grpcTotal","httpIn","httpOut","httpTotal","isGrpcRequests","trafficRates","includes","GRPC_REQUEST","tcpIn","tcpOut","tcpTotal","panelStyle","paddingBottom","rate","rateGrpcErr","rateNoResponse","rate3xx","rate4xx","rate5xx","Component","height","minWidth","overflowY","backgroundColor","White","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { summaryFont, summaryHeader, summaryBodyTabs } from './SummaryPanelCommon';\nimport { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport KialiPageLink from 'components/Link/KialiPageLink';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from 'components/SummaryPanel/RateTable';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { SummaryPanelPropType, NodeType, TrafficRate } from 'types/Graph';\nimport {\n  getAccumulatedTrafficRateGrpc,\n  getAccumulatedTrafficRateHttp,\n  getAccumulatedTrafficRateTcp\n} from 'utils/TrafficRate';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\n\ntype SummaryPanelClusterBoxState = {\n  clusterBox: any;\n};\n\nconst defaultState: SummaryPanelClusterBoxState = {\n  clusterBox: null\n};\n\nconst topologyStyle = style({\n  margin: '0 1em'\n});\n\nexport default class SummaryPanelClusterBox extends React.Component<SummaryPanelPropType, SummaryPanelClusterBoxState> {\n  static readonly panelStyle = {\n    height: '100%',\n    margin: 0,\n    minWidth: '25em',\n    overflowY: 'auto' as 'auto',\n    backgroundColor: PFColors.White,\n    width: '25em'\n  };\n\n  constructor(props: SummaryPanelPropType) {\n    super(props);\n\n    this.state = { ...defaultState };\n  }\n\n  static getDerivedStateFromProps(props: SummaryPanelPropType, state: SummaryPanelClusterBoxState) {\n    // if the summaryTarget (i.e. graph) has changed, then init the state\n    return props.data.summaryTarget !== state.clusterBox ? { clusterBox: props.data.summaryTarget } : null;\n  }\n\n  render() {\n    const clusterBox = this.props.data.summaryTarget;\n    const boxed = clusterBox.descendants();\n    const cluster = clusterBox.data(CyNode.cluster);\n\n    const numSvc = boxed.filter(`node[nodeType = \"${NodeType.SERVICE}\"]`).size();\n    const numWorkloads = boxed.filter(`node[nodeType = \"${NodeType.WORKLOAD}\"]`).size();\n    const { numApps, numVersions } = this.countApps(boxed);\n    const numEdges = boxed.connectedEdges().size();\n    // inbound edges are from a different cluster\n    const inboundEdges = clusterBox.cy().nodes(`[${CyNode.cluster} != \"${cluster}\"]`).edgesTo(boxed);\n    // outbound edges are to a different cluster\n    const outboundEdges = boxed.edgesTo(`[${CyNode.cluster} != \"${cluster}\"]`);\n    // total edges are inbound + edges from boxed workload|app|root nodes (i.e. not injected service nodes or box nodes)\n    const totalEdges = inboundEdges.add(boxed.filter(`[?${CyNode.workload}]`).edgesTo('*'));\n    const grpcIn = getAccumulatedTrafficRateGrpc(inboundEdges);\n    const grpcOut = getAccumulatedTrafficRateGrpc(outboundEdges);\n    const grpcTotal = getAccumulatedTrafficRateGrpc(totalEdges);\n    const httpIn = getAccumulatedTrafficRateHttp(inboundEdges);\n    const httpOut = getAccumulatedTrafficRateHttp(outboundEdges);\n    const httpTotal = getAccumulatedTrafficRateHttp(totalEdges);\n    const isGrpcRequests = this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n    const tcpIn = getAccumulatedTrafficRateTcp(inboundEdges);\n    const tcpOut = getAccumulatedTrafficRateTcp(outboundEdges);\n    const tcpTotal = getAccumulatedTrafficRateTcp(totalEdges);\n\n    return (\n      <div className=\"panel panel-default\" style={SummaryPanelClusterBox.panelStyle}>\n        <div className=\"panel-heading\" style={summaryHeader}>\n          {this.renderCluster(cluster)}\n          {this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)}\n        </div>\n        <div className={summaryBodyTabs}>\n          <SimpleTabs id=\"graph_summary_tabs\" defaultTab={0} style={{ paddingBottom: '10px' }}>\n            <Tab style={summaryFont} title=\"Inbound\" eventKey={0}>\n              <div style={summaryFont}>\n                {grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No inbound traffic.\n                  </>\n                )}\n                {grpcIn.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcIn.rate}\n                    rateGrpcErr={grpcIn.rateGrpcErr}\n                    rateNR={grpcIn.rateNoResponse}\n                  />\n                )}\n                {httpIn.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpIn.rate}\n                    rate3xx={httpIn.rate3xx}\n                    rate4xx={httpIn.rate4xx}\n                    rate5xx={httpIn.rate5xx}\n                    rateNR={httpIn.rateNoResponse}\n                  />\n                )}\n                {tcpIn.rate > 0 && <RateTableTcp rate={tcpIn.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Outbound\" eventKey={1}>\n              <div style={summaryFont}>\n                {grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No outbound traffic.\n                  </>\n                )}\n                {grpcOut.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcOut.rate}\n                    rateGrpcErr={grpcOut.rateGrpcErr}\n                    rateNR={grpcOut.rateNoResponse}\n                  />\n                )}\n                {httpOut.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpOut.rate}\n                    rate3xx={httpOut.rate3xx}\n                    rate4xx={httpOut.rate4xx}\n                    rate5xx={httpOut.rate5xx}\n                    rateNR={httpOut.rateNoResponse}\n                  />\n                )}\n                {tcpOut.rate > 0 && <RateTableTcp rate={tcpOut.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Total\" eventKey={2}>\n              <div style={summaryFont}>\n                {grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No traffic.\n                  </>\n                )}\n                {grpcTotal.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcTotal.rate}\n                    rateGrpcErr={grpcTotal.rateGrpcErr}\n                    rateNR={grpcTotal.rateNoResponse}\n                  />\n                )}\n                {httpTotal.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpTotal.rate}\n                    rate3xx={httpTotal.rate3xx}\n                    rate4xx={httpTotal.rate4xx}\n                    rate5xx={httpTotal.rate5xx}\n                    rateNR={httpTotal.rateNoResponse}\n                  />\n                )}\n                {tcpTotal.rate > 0 && <RateTableTcp rate={tcpTotal.rate} />}\n              </div>\n            </Tab>\n          </SimpleTabs>\n        </div>\n      </div>\n    );\n  }\n\n  private countApps = (boxed): { numApps: number; numVersions: number } => {\n    const appVersions: { [key: string]: Set<string> } = {};\n\n    boxed.filter(`node[nodeType = \"${NodeType.APP}\"]`).forEach(node => {\n      const app = node.data(CyNode.app);\n      if (appVersions[app] === undefined) {\n        appVersions[app] = new Set();\n      }\n      appVersions[app].add(node.data(CyNode.version));\n    });\n\n    return {\n      numApps: Object.getOwnPropertyNames(appVersions).length,\n      numVersions: Object.getOwnPropertyNames(appVersions).reduce((totalCount: number, version: string) => {\n        return totalCount + appVersions[version].size;\n      }, 0)\n    };\n  };\n\n  private renderCluster = (cluster: string) => {\n    return (\n      <React.Fragment key={cluster}>\n        <span>\n          <PFBadge badge={PFBadges.Cluster} style={{ marginBottom: '2px' }} />\n          <KialiPageLink href=\"/\" cluster={cluster}>\n            {cluster}\n          </KialiPageLink>{' '}\n        </span>\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  private renderTopologySummary = (\n    numSvc: number,\n    numWorkloads: number,\n    numApps: number,\n    numVersions: number,\n    numEdges: number\n  ) => (\n    <>\n      <br />\n      <strong>Current Graph:</strong>\n      <br />\n      {numApps > 0 && (\n        <>\n          <KialiIcon.Applications className={topologyStyle} />\n          {numApps.toString()} {numApps === 1 ? 'app ' : 'apps '}\n          {numVersions > 0 && `(${numVersions} versions)`}\n          <br />\n        </>\n      )}\n      {numSvc > 0 && (\n        <>\n          <KialiIcon.Services className={topologyStyle} />\n          {numSvc.toString()} {numSvc === 1 ? 'service' : 'services'}\n          <br />\n        </>\n      )}\n      {numWorkloads > 0 && (\n        <>\n          <KialiIcon.Workloads className={topologyStyle} />\n          {numWorkloads.toString()} {numWorkloads === 1 ? 'workload' : 'workloads'}\n          <br />\n        </>\n      )}\n      {numEdges > 0 && (\n        <>\n          <KialiIcon.Topology className={topologyStyle} />\n          {numEdges.toString()} {numEdges === 1 ? 'edge' : 'edges'}\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
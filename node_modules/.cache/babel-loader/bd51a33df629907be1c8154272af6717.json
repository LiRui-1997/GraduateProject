{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PowerEdge = function () {\n  function PowerEdge(source, target, type) {\n    this.source = source;\n    this.target = target;\n    this.type = type;\n  }\n\n  return PowerEdge;\n}();\n\nexports.PowerEdge = PowerEdge;\n\nvar Configuration = function () {\n  function Configuration(n, edges, linkAccessor, rootGroup) {\n    var _this = this;\n\n    this.linkAccessor = linkAccessor;\n    this.modules = new Array(n);\n    this.roots = [];\n\n    if (rootGroup) {\n      this.initModulesFromGroup(rootGroup);\n    } else {\n      this.roots.push(new ModuleSet());\n\n      for (var i = 0; i < n; ++i) {\n        this.roots[0].add(this.modules[i] = new Module(i));\n      }\n    }\n\n    this.R = edges.length;\n    edges.forEach(function (e) {\n      var s = _this.modules[linkAccessor.getSourceIndex(e)],\n          t = _this.modules[linkAccessor.getTargetIndex(e)],\n          type = linkAccessor.getType(e);\n\n      s.outgoing.add(type, t);\n      t.incoming.add(type, s);\n    });\n  }\n\n  Configuration.prototype.initModulesFromGroup = function (group) {\n    var moduleSet = new ModuleSet();\n    this.roots.push(moduleSet);\n\n    for (var i = 0; i < group.leaves.length; ++i) {\n      var node = group.leaves[i];\n      var module = new Module(node.id);\n      this.modules[node.id] = module;\n      moduleSet.add(module);\n    }\n\n    if (group.groups) {\n      for (var j = 0; j < group.groups.length; ++j) {\n        var child = group.groups[j];\n        var definition = {};\n\n        for (var prop in child) {\n          if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop)) definition[prop] = child[prop];\n        }\n\n        moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n      }\n    }\n\n    return moduleSet;\n  };\n\n  Configuration.prototype.merge = function (a, b, k) {\n    if (k === void 0) {\n      k = 0;\n    }\n\n    var inInt = a.incoming.intersection(b.incoming),\n        outInt = a.outgoing.intersection(b.outgoing);\n    var children = new ModuleSet();\n    children.add(a);\n    children.add(b);\n    var m = new Module(this.modules.length, outInt, inInt, children);\n    this.modules.push(m);\n\n    var update = function update(s, i, o) {\n      s.forAll(function (ms, linktype) {\n        ms.forAll(function (n) {\n          var nls = n[i];\n          nls.add(linktype, m);\n          nls.remove(linktype, a);\n          nls.remove(linktype, b);\n          a[o].remove(linktype, n);\n          b[o].remove(linktype, n);\n        });\n      });\n    };\n\n    update(outInt, \"incoming\", \"outgoing\");\n    update(inInt, \"outgoing\", \"incoming\");\n    this.R -= inInt.count() + outInt.count();\n    this.roots[k].remove(a);\n    this.roots[k].remove(b);\n    this.roots[k].add(m);\n    return m;\n  };\n\n  Configuration.prototype.rootMerges = function (k) {\n    if (k === void 0) {\n      k = 0;\n    }\n\n    var rs = this.roots[k].modules();\n    var n = rs.length;\n    var merges = new Array(n * (n - 1));\n    var ctr = 0;\n\n    for (var i = 0, i_ = n - 1; i < i_; ++i) {\n      for (var j = i + 1; j < n; ++j) {\n        var a = rs[i],\n            b = rs[j];\n        merges[ctr] = {\n          id: ctr,\n          nEdges: this.nEdges(a, b),\n          a: a,\n          b: b\n        };\n        ctr++;\n      }\n    }\n\n    return merges;\n  };\n\n  Configuration.prototype.greedyMerge = function () {\n    for (var i = 0; i < this.roots.length; ++i) {\n      if (this.roots[i].modules().length < 2) continue;\n      var ms = this.rootMerges(i).sort(function (a, b) {\n        return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges;\n      });\n      var m = ms[0];\n      if (m.nEdges >= this.R) continue;\n      this.merge(m.a, m.b, i);\n      return true;\n    }\n  };\n\n  Configuration.prototype.nEdges = function (a, b) {\n    var inInt = a.incoming.intersection(b.incoming),\n        outInt = a.outgoing.intersection(b.outgoing);\n    return this.R - inInt.count() - outInt.count();\n  };\n\n  Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n    var _this = this;\n\n    var groups = [];\n    var root = {};\n    toGroups(this.roots[0], root, groups);\n    var es = this.allEdges();\n    es.forEach(function (e) {\n      var a = _this.modules[e.source];\n      var b = _this.modules[e.target];\n      retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\n    });\n    return groups;\n  };\n\n  Configuration.prototype.allEdges = function () {\n    var es = [];\n    Configuration.getEdges(this.roots[0], es);\n    return es;\n  };\n\n  Configuration.getEdges = function (modules, es) {\n    modules.forAll(function (m) {\n      m.getEdges(es);\n      Configuration.getEdges(m.children, es);\n    });\n  };\n\n  return Configuration;\n}();\n\nexports.Configuration = Configuration;\n\nfunction toGroups(modules, group, groups) {\n  modules.forAll(function (m) {\n    if (m.isLeaf()) {\n      if (!group.leaves) group.leaves = [];\n      group.leaves.push(m.id);\n    } else {\n      var g = group;\n      m.gid = groups.length;\n\n      if (!m.isIsland() || m.isPredefined()) {\n        g = {\n          id: m.gid\n        };\n        if (m.isPredefined()) for (var prop in m.definition) {\n          g[prop] = m.definition[prop];\n        }\n        if (!group.groups) group.groups = [];\n        group.groups.push(m.gid);\n        groups.push(g);\n      }\n\n      toGroups(m.children, g, groups);\n    }\n  });\n}\n\nvar Module = function () {\n  function Module(id, outgoing, incoming, children, definition) {\n    if (outgoing === void 0) {\n      outgoing = new LinkSets();\n    }\n\n    if (incoming === void 0) {\n      incoming = new LinkSets();\n    }\n\n    if (children === void 0) {\n      children = new ModuleSet();\n    }\n\n    this.id = id;\n    this.outgoing = outgoing;\n    this.incoming = incoming;\n    this.children = children;\n    this.definition = definition;\n  }\n\n  Module.prototype.getEdges = function (es) {\n    var _this = this;\n\n    this.outgoing.forAll(function (ms, edgetype) {\n      ms.forAll(function (target) {\n        es.push(new PowerEdge(_this.id, target.id, edgetype));\n      });\n    });\n  };\n\n  Module.prototype.isLeaf = function () {\n    return this.children.count() === 0;\n  };\n\n  Module.prototype.isIsland = function () {\n    return this.outgoing.count() === 0 && this.incoming.count() === 0;\n  };\n\n  Module.prototype.isPredefined = function () {\n    return typeof this.definition !== \"undefined\";\n  };\n\n  return Module;\n}();\n\nexports.Module = Module;\n\nfunction intersection(m, n) {\n  var i = {};\n\n  for (var v in m) {\n    if (v in n) i[v] = m[v];\n  }\n\n  return i;\n}\n\nvar ModuleSet = function () {\n  function ModuleSet() {\n    this.table = {};\n  }\n\n  ModuleSet.prototype.count = function () {\n    return Object.keys(this.table).length;\n  };\n\n  ModuleSet.prototype.intersection = function (other) {\n    var result = new ModuleSet();\n    result.table = intersection(this.table, other.table);\n    return result;\n  };\n\n  ModuleSet.prototype.intersectionCount = function (other) {\n    return this.intersection(other).count();\n  };\n\n  ModuleSet.prototype.contains = function (id) {\n    return id in this.table;\n  };\n\n  ModuleSet.prototype.add = function (m) {\n    this.table[m.id] = m;\n  };\n\n  ModuleSet.prototype.remove = function (m) {\n    delete this.table[m.id];\n  };\n\n  ModuleSet.prototype.forAll = function (f) {\n    for (var mid in this.table) {\n      f(this.table[mid]);\n    }\n  };\n\n  ModuleSet.prototype.modules = function () {\n    var vs = [];\n    this.forAll(function (m) {\n      if (!m.isPredefined()) vs.push(m);\n    });\n    return vs;\n  };\n\n  return ModuleSet;\n}();\n\nexports.ModuleSet = ModuleSet;\n\nvar LinkSets = function () {\n  function LinkSets() {\n    this.sets = {};\n    this.n = 0;\n  }\n\n  LinkSets.prototype.count = function () {\n    return this.n;\n  };\n\n  LinkSets.prototype.contains = function (id) {\n    var result = false;\n    this.forAllModules(function (m) {\n      if (!result && m.id == id) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  LinkSets.prototype.add = function (linktype, m) {\n    var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n    s.add(m);\n    ++this.n;\n  };\n\n  LinkSets.prototype.remove = function (linktype, m) {\n    var ms = this.sets[linktype];\n    ms.remove(m);\n\n    if (ms.count() === 0) {\n      delete this.sets[linktype];\n    }\n\n    --this.n;\n  };\n\n  LinkSets.prototype.forAll = function (f) {\n    for (var linktype in this.sets) {\n      f(this.sets[linktype], Number(linktype));\n    }\n  };\n\n  LinkSets.prototype.forAllModules = function (f) {\n    this.forAll(function (ms, lt) {\n      return ms.forAll(f);\n    });\n  };\n\n  LinkSets.prototype.intersection = function (other) {\n    var result = new LinkSets();\n    this.forAll(function (ms, lt) {\n      if (lt in other.sets) {\n        var i = ms.intersection(other.sets[lt]),\n            n = i.count();\n\n        if (n > 0) {\n          result.sets[lt] = i;\n          result.n += n;\n        }\n      }\n    });\n    return result;\n  };\n\n  return LinkSets;\n}();\n\nexports.LinkSets = LinkSets;\n\nfunction intersectionCount(m, n) {\n  return Object.keys(intersection(m, n)).length;\n}\n\nfunction getGroups(nodes, links, la, rootGroup) {\n  var n = nodes.length,\n      c = new Configuration(n, links, la, rootGroup);\n\n  while (c.greedyMerge()) {\n    ;\n  }\n\n  var powerEdges = [];\n  var g = c.getGroupHierarchy(powerEdges);\n  powerEdges.forEach(function (e) {\n    var f = function f(end) {\n      var g = e[end];\n      if (typeof g == \"number\") e[end] = nodes[g];\n    };\n\n    f(\"source\");\n    f(\"target\");\n  });\n  return {\n    groups: g,\n    powerEdges: powerEdges\n  };\n}\n\nexports.getGroups = getGroups;","map":{"version":3,"sources":["../../WebCola/src/powergraph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PowerEdge = (function () {\r\n    function PowerEdge(source, target, type) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return PowerEdge;\r\n}());\r\nexports.PowerEdge = PowerEdge;\r\nvar Configuration = (function () {\r\n    function Configuration(n, edges, linkAccessor, rootGroup) {\r\n        var _this = this;\r\n        this.linkAccessor = linkAccessor;\r\n        this.modules = new Array(n);\r\n        this.roots = [];\r\n        if (rootGroup) {\r\n            this.initModulesFromGroup(rootGroup);\r\n        }\r\n        else {\r\n            this.roots.push(new ModuleSet());\r\n            for (var i = 0; i < n; ++i)\r\n                this.roots[0].add(this.modules[i] = new Module(i));\r\n        }\r\n        this.R = edges.length;\r\n        edges.forEach(function (e) {\r\n            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\r\n            s.outgoing.add(type, t);\r\n            t.incoming.add(type, s);\r\n        });\r\n    }\r\n    Configuration.prototype.initModulesFromGroup = function (group) {\r\n        var moduleSet = new ModuleSet();\r\n        this.roots.push(moduleSet);\r\n        for (var i = 0; i < group.leaves.length; ++i) {\r\n            var node = group.leaves[i];\r\n            var module = new Module(node.id);\r\n            this.modules[node.id] = module;\r\n            moduleSet.add(module);\r\n        }\r\n        if (group.groups) {\r\n            for (var j = 0; j < group.groups.length; ++j) {\r\n                var child = group.groups[j];\r\n                var definition = {};\r\n                for (var prop in child)\r\n                    if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\r\n                        definition[prop] = child[prop];\r\n                moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\r\n            }\r\n        }\r\n        return moduleSet;\r\n    };\r\n    Configuration.prototype.merge = function (a, b, k) {\r\n        if (k === void 0) { k = 0; }\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        var children = new ModuleSet();\r\n        children.add(a);\r\n        children.add(b);\r\n        var m = new Module(this.modules.length, outInt, inInt, children);\r\n        this.modules.push(m);\r\n        var update = function (s, i, o) {\r\n            s.forAll(function (ms, linktype) {\r\n                ms.forAll(function (n) {\r\n                    var nls = n[i];\r\n                    nls.add(linktype, m);\r\n                    nls.remove(linktype, a);\r\n                    nls.remove(linktype, b);\r\n                    a[o].remove(linktype, n);\r\n                    b[o].remove(linktype, n);\r\n                });\r\n            });\r\n        };\r\n        update(outInt, \"incoming\", \"outgoing\");\r\n        update(inInt, \"outgoing\", \"incoming\");\r\n        this.R -= inInt.count() + outInt.count();\r\n        this.roots[k].remove(a);\r\n        this.roots[k].remove(b);\r\n        this.roots[k].add(m);\r\n        return m;\r\n    };\r\n    Configuration.prototype.rootMerges = function (k) {\r\n        if (k === void 0) { k = 0; }\r\n        var rs = this.roots[k].modules();\r\n        var n = rs.length;\r\n        var merges = new Array(n * (n - 1));\r\n        var ctr = 0;\r\n        for (var i = 0, i_ = n - 1; i < i_; ++i) {\r\n            for (var j = i + 1; j < n; ++j) {\r\n                var a = rs[i], b = rs[j];\r\n                merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\r\n                ctr++;\r\n            }\r\n        }\r\n        return merges;\r\n    };\r\n    Configuration.prototype.greedyMerge = function () {\r\n        for (var i = 0; i < this.roots.length; ++i) {\r\n            if (this.roots[i].modules().length < 2)\r\n                continue;\r\n            var ms = this.rootMerges(i).sort(function (a, b) { return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges; });\r\n            var m = ms[0];\r\n            if (m.nEdges >= this.R)\r\n                continue;\r\n            this.merge(m.a, m.b, i);\r\n            return true;\r\n        }\r\n    };\r\n    Configuration.prototype.nEdges = function (a, b) {\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        return this.R - inInt.count() - outInt.count();\r\n    };\r\n    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\r\n        var _this = this;\r\n        var groups = [];\r\n        var root = {};\r\n        toGroups(this.roots[0], root, groups);\r\n        var es = this.allEdges();\r\n        es.forEach(function (e) {\r\n            var a = _this.modules[e.source];\r\n            var b = _this.modules[e.target];\r\n            retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\r\n        });\r\n        return groups;\r\n    };\r\n    Configuration.prototype.allEdges = function () {\r\n        var es = [];\r\n        Configuration.getEdges(this.roots[0], es);\r\n        return es;\r\n    };\r\n    Configuration.getEdges = function (modules, es) {\r\n        modules.forAll(function (m) {\r\n            m.getEdges(es);\r\n            Configuration.getEdges(m.children, es);\r\n        });\r\n    };\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\nfunction toGroups(modules, group, groups) {\r\n    modules.forAll(function (m) {\r\n        if (m.isLeaf()) {\r\n            if (!group.leaves)\r\n                group.leaves = [];\r\n            group.leaves.push(m.id);\r\n        }\r\n        else {\r\n            var g = group;\r\n            m.gid = groups.length;\r\n            if (!m.isIsland() || m.isPredefined()) {\r\n                g = { id: m.gid };\r\n                if (m.isPredefined())\r\n                    for (var prop in m.definition)\r\n                        g[prop] = m.definition[prop];\r\n                if (!group.groups)\r\n                    group.groups = [];\r\n                group.groups.push(m.gid);\r\n                groups.push(g);\r\n            }\r\n            toGroups(m.children, g, groups);\r\n        }\r\n    });\r\n}\r\nvar Module = (function () {\r\n    function Module(id, outgoing, incoming, children, definition) {\r\n        if (outgoing === void 0) { outgoing = new LinkSets(); }\r\n        if (incoming === void 0) { incoming = new LinkSets(); }\r\n        if (children === void 0) { children = new ModuleSet(); }\r\n        this.id = id;\r\n        this.outgoing = outgoing;\r\n        this.incoming = incoming;\r\n        this.children = children;\r\n        this.definition = definition;\r\n    }\r\n    Module.prototype.getEdges = function (es) {\r\n        var _this = this;\r\n        this.outgoing.forAll(function (ms, edgetype) {\r\n            ms.forAll(function (target) {\r\n                es.push(new PowerEdge(_this.id, target.id, edgetype));\r\n            });\r\n        });\r\n    };\r\n    Module.prototype.isLeaf = function () {\r\n        return this.children.count() === 0;\r\n    };\r\n    Module.prototype.isIsland = function () {\r\n        return this.outgoing.count() === 0 && this.incoming.count() === 0;\r\n    };\r\n    Module.prototype.isPredefined = function () {\r\n        return typeof this.definition !== \"undefined\";\r\n    };\r\n    return Module;\r\n}());\r\nexports.Module = Module;\r\nfunction intersection(m, n) {\r\n    var i = {};\r\n    for (var v in m)\r\n        if (v in n)\r\n            i[v] = m[v];\r\n    return i;\r\n}\r\nvar ModuleSet = (function () {\r\n    function ModuleSet() {\r\n        this.table = {};\r\n    }\r\n    ModuleSet.prototype.count = function () {\r\n        return Object.keys(this.table).length;\r\n    };\r\n    ModuleSet.prototype.intersection = function (other) {\r\n        var result = new ModuleSet();\r\n        result.table = intersection(this.table, other.table);\r\n        return result;\r\n    };\r\n    ModuleSet.prototype.intersectionCount = function (other) {\r\n        return this.intersection(other).count();\r\n    };\r\n    ModuleSet.prototype.contains = function (id) {\r\n        return id in this.table;\r\n    };\r\n    ModuleSet.prototype.add = function (m) {\r\n        this.table[m.id] = m;\r\n    };\r\n    ModuleSet.prototype.remove = function (m) {\r\n        delete this.table[m.id];\r\n    };\r\n    ModuleSet.prototype.forAll = function (f) {\r\n        for (var mid in this.table) {\r\n            f(this.table[mid]);\r\n        }\r\n    };\r\n    ModuleSet.prototype.modules = function () {\r\n        var vs = [];\r\n        this.forAll(function (m) {\r\n            if (!m.isPredefined())\r\n                vs.push(m);\r\n        });\r\n        return vs;\r\n    };\r\n    return ModuleSet;\r\n}());\r\nexports.ModuleSet = ModuleSet;\r\nvar LinkSets = (function () {\r\n    function LinkSets() {\r\n        this.sets = {};\r\n        this.n = 0;\r\n    }\r\n    LinkSets.prototype.count = function () {\r\n        return this.n;\r\n    };\r\n    LinkSets.prototype.contains = function (id) {\r\n        var result = false;\r\n        this.forAllModules(function (m) {\r\n            if (!result && m.id == id) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    LinkSets.prototype.add = function (linktype, m) {\r\n        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\r\n        s.add(m);\r\n        ++this.n;\r\n    };\r\n    LinkSets.prototype.remove = function (linktype, m) {\r\n        var ms = this.sets[linktype];\r\n        ms.remove(m);\r\n        if (ms.count() === 0) {\r\n            delete this.sets[linktype];\r\n        }\r\n        --this.n;\r\n    };\r\n    LinkSets.prototype.forAll = function (f) {\r\n        for (var linktype in this.sets) {\r\n            f(this.sets[linktype], Number(linktype));\r\n        }\r\n    };\r\n    LinkSets.prototype.forAllModules = function (f) {\r\n        this.forAll(function (ms, lt) { return ms.forAll(f); });\r\n    };\r\n    LinkSets.prototype.intersection = function (other) {\r\n        var result = new LinkSets();\r\n        this.forAll(function (ms, lt) {\r\n            if (lt in other.sets) {\r\n                var i = ms.intersection(other.sets[lt]), n = i.count();\r\n                if (n > 0) {\r\n                    result.sets[lt] = i;\r\n                    result.n += n;\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    return LinkSets;\r\n}());\r\nexports.LinkSets = LinkSets;\r\nfunction intersectionCount(m, n) {\r\n    return Object.keys(intersection(m, n)).length;\r\n}\r\nfunction getGroups(nodes, links, la, rootGroup) {\r\n    var n = nodes.length, c = new Configuration(n, links, la, rootGroup);\r\n    while (c.greedyMerge())\r\n        ;\r\n    var powerEdges = [];\r\n    var g = c.getGroupHierarchy(powerEdges);\r\n    powerEdges.forEach(function (e) {\r\n        var f = function (end) {\r\n            var g = e[end];\r\n            if (typeof g == \"number\")\r\n                e[end] = nodes[g];\r\n        };\r\n        f(\"source\");\r\n        f(\"target\");\r\n    });\r\n    return { groups: g, powerEdges: powerEdges };\r\n}\r\nexports.getGroups = getGroups;\r\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Metrics/CustomMetrics.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Card, CardBody } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { serverConfig } from '../../config/ServerConfig';\nimport history, { URLParam } from '../../app/History';\nimport * as API from '../../services/Api';\nimport { evalTimeRange, isEqualTimeRange } from '../../types/Common';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { RenderComponentScroll } from '../../components/Nav/Page';\nimport * as MetricsHelper from './Helper';\nimport { MetricsSettingsDropdown } from '../MetricsOptions/MetricsSettingsDropdown';\nimport MetricsRawAggregation from '../MetricsOptions/MetricsRawAggregation';\nimport { GrafanaLinks } from './GrafanaLinks';\nimport { MetricsObjectTypes } from 'types/Metrics';\nimport { SpanOverlay } from './SpanOverlay';\nimport { Dashboard } from 'components/Charts/Dashboard';\nimport { bindActionCreators } from 'redux';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { timeRangeSelector } from '../../store/Selectors';\nvar displayFlex = style({\n  display: 'flex'\n});\nvar fullHeightStyle = style({\n  height: '100%'\n});\n\nvar CustomMetrics = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomMetrics, _React$Component);\n\n  var _super = _createSuper(CustomMetrics);\n\n  function CustomMetrics(props) {\n    var _this;\n\n    _classCallCheck(this, CustomMetrics);\n\n    _this = _super.call(this, props);\n    _this.toolbarRef = void 0;\n    _this.options = void 0;\n    _this.spanOverlay = void 0;\n\n    _this.refresh = function () {\n      _this.fetchMetrics();\n\n      if (_this.props.jaegerIntegration) {\n        _this.spanOverlay.fetch({\n          namespace: _this.props.namespace,\n          target: _this.props.workload || _this.props.app,\n          targetKind: _this.props.workload ? MetricsObjectTypes.WORKLOAD : MetricsObjectTypes.APP,\n          range: _this.props.timeRange\n        });\n      }\n    };\n\n    _this.fetchMetrics = function () {\n      // Time range needs to be reevaluated everytime fetching\n      MetricsHelper.timeRangeToOptions(_this.props.timeRange, _this.options); // Workload name can be used to find personalized dashboards defined at workload level\n\n      _this.options.workload = _this.props.workload;\n      _this.options.workloadType = _this.props.workloadType;\n      API.getCustomDashboard(_this.props.namespace, _this.props.template, _this.options).then(function (response) {\n        var labelsSettings = MetricsHelper.extractLabelsSettings(response.data, _this.state.labelsSettings);\n\n        _this.setState({\n          dashboard: response.data,\n          labelsSettings: labelsSettings,\n          grafanaLinks: response.data.externalLinks\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch custom dashboard.', error);\n      });\n    };\n\n    _this.onMetricsSettingsChanged = function (settings) {\n      MetricsHelper.settingsToOptions(settings, _this.options, []);\n\n      _this.fetchMetrics();\n    };\n\n    _this.onLabelsFiltersChanged = function (labelsFilters) {\n      _this.setState({\n        labelsSettings: labelsFilters\n      });\n    };\n\n    _this.onRawAggregationChanged = function (aggregator) {\n      _this.options.rawDataAggregator = aggregator;\n\n      _this.fetchMetrics();\n    };\n\n    _this.onClickDataPoint = function (_, datum) {\n      if ('start' in datum && 'end' in datum) {\n        // Zoom-in bucket\n        _this.onDomainChange([datum.start, datum.end]);\n      } else if ('traceId' in datum) {\n        var traceId = datum.traceId;\n        var spanId = datum.spanId;\n        history.push(\"/namespaces/\".concat(_this.props.namespace, \"/applications/\").concat(_this.props.app, \"?tab=traces&\").concat(URLParam.JAEGER_TRACE_ID, \"=\").concat(traceId, \"&\").concat(URLParam.JAEGER_SPAN_ID, \"=\").concat(spanId));\n      }\n    };\n\n    _this.onSpans = function (checked) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.set(URLParam.SHOW_SPANS, String(checked));\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n\n      _this.setState({\n        showSpans: !_this.state.showSpans\n      });\n    };\n\n    _this.expandHandler = function (expandedChart) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.delete('expand');\n\n      if (expandedChart) {\n        urlParams.set('expand', expandedChart);\n      }\n\n      history.push(history.location.pathname + '?' + urlParams.toString());\n    };\n\n    _this.toolbarRef = React.createRef();\n\n    var _settings = MetricsHelper.retrieveMetricsSettings();\n\n    _this.options = _this.initOptions(_settings); // Initialize active filters from URL\n\n    _this.state = {\n      labelsSettings: _settings.labelsSettings,\n      grafanaLinks: [],\n      tabHeight: 300,\n      showSpans: _settings.showSpans\n    };\n    _this.spanOverlay = new SpanOverlay(function (changed) {\n      return _this.setState({\n        spanOverlay: changed\n      });\n    });\n    return _this;\n  }\n\n  _createClass(CustomMetrics, [{\n    key: \"initOptions\",\n    value: function initOptions(settings) {\n      var filters = \"\".concat(serverConfig.istioLabels.appLabelName, \":\").concat(this.props.app);\n      var options = this.props.version ? {\n        labelsFilters: \"\".concat(filters, \",\").concat(serverConfig.istioLabels.versionLabelName, \":\").concat(this.props.version)\n      } : {\n        labelsFilters: filters,\n        additionalLabels: 'version:Version'\n      };\n      MetricsHelper.settingsToOptions(settings, options, []);\n      return options;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.refresh();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.namespace !== prevProps.namespace || this.props.app !== prevProps.app || this.props.workload !== prevProps.workload || this.props.version !== prevProps.version || this.props.template !== prevProps.template || this.props.lastRefreshAt !== prevProps.lastRefreshAt || !isEqualTimeRange(this.props.timeRange, prevProps.timeRange)) {\n        var settings = MetricsHelper.retrieveMetricsSettings();\n        this.options = this.initOptions(settings);\n        this.spanOverlay.reset();\n        this.refresh();\n      }\n    }\n  }, {\n    key: \"onDomainChange\",\n    value: function onDomainChange(dates) {\n      if (dates && dates[0] && dates[1]) {\n        var _range = {\n          from: dates[0].getTime(),\n          to: dates[1].getTime()\n        };\n        this.props.setTimeRange(_range);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var urlParams = new URLSearchParams(history.location.search);\n      var expandedChart = urlParams.get('expand') || undefined; // 20px (card margin) + 24px (card padding) + 51px (toolbar) + 15px (toolbar padding) + 24px (card padding) + 20px (card margin)\n\n      var toolbarHeight = this.toolbarRef.current ? this.toolbarRef.current.clientHeight : 51;\n      var toolbarSpace = 20 + 24 + toolbarHeight + 15 + 24 + 20;\n      var dashboardHeight = (this.props.height ? this.props.height : this.state.tabHeight) - toolbarSpace;\n      var dashboard = this.state.dashboard && /*#__PURE__*/React.createElement(Dashboard, {\n        dashboard: this.state.dashboard,\n        customMetric: true,\n        template: this.props.template,\n        labelValues: MetricsHelper.convertAsPromLabels(this.state.labelsSettings),\n        maximizedChart: expandedChart,\n        expandHandler: this.expandHandler,\n        onClick: this.onClickDataPoint,\n        showSpans: this.state.showSpans,\n        dashboardHeight: dashboardHeight,\n        overlay: this.state.spanOverlay,\n        timeWindow: evalTimeRange(this.props.timeRange),\n        brushHandlers: {\n          onDomainChangeEnd: function onDomainChangeEnd(_, props) {\n            return _this2.onDomainChange(props.currentDomain.x);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 7\n        }\n      });\n      var content = /*#__PURE__*/React.createElement(React.Fragment, null, this.renderOptionsBar(), this.state.dashboard && dashboard);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.embedded ? /*#__PURE__*/React.createElement(React.Fragment, null, content) : /*#__PURE__*/React.createElement(RenderComponentScroll, {\n        onResize: function onResize(height) {\n          return _this2.setState({\n            tabHeight: height\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: fullHeightStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }\n      }, content))));\n    }\n  }, {\n    key: \"renderOptionsBar\",\n    value: function renderOptionsBar() {\n      var _this$state$dashboard,\n          _this3 = this;\n\n      var hasHistograms = this.state.dashboard !== undefined && this.state.dashboard.charts.some(function (chart) {\n        return chart.metrics.some(function (m) {\n          return m.stat;\n        });\n      });\n      var hasLabels = this.state.labelsSettings.size > 0;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbarRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Toolbar, {\n        style: {\n          paddingBottom: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }\n      }, (hasHistograms || hasLabels) && /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MetricsSettingsDropdown, {\n        onChanged: this.onMetricsSettingsChanged,\n        onLabelsFiltersChanged: this.onLabelsFiltersChanged,\n        direction: ((_this$state$dashboard = this.state.dashboard) === null || _this$state$dashboard === void 0 ? void 0 : _this$state$dashboard.title) || 'dashboard',\n        labelsSettings: this.state.labelsSettings,\n        hasHistograms: hasHistograms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MetricsRawAggregation, {\n        onChanged: this.onRawAggregationChanged,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pf-c-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        key: \"spans-show-chart\",\n        id: \"spans-show-\",\n        className: \"pf-c-check__input\",\n        style: {\n          marginBottom: '3px'\n        },\n        type: \"checkbox\",\n        checked: this.state.showSpans,\n        onChange: function onChange(event) {\n          return _this3.onSpans(event.target.checked);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"pf-c-check__label\",\n        style: {\n          paddingLeft: '5px',\n          paddingRight: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }\n      }, \"Spans\")))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        style: {\n          marginLeft: 'auto',\n          paddingRight: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GrafanaLinks, {\n        links: this.state.grafanaLinks,\n        namespace: this.props.namespace,\n        object: this.props.app,\n        objectType: MetricsObjectTypes.APP,\n        version: this.props.version,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return CustomMetrics;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jaegerIntegration: state.jaegerState.info ? state.jaegerState.info.integration : false,\n    lastRefreshAt: state.globalState.lastRefreshAt,\n    timeRange: timeRangeSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setTimeRange: bindActionCreators(UserSettingsActions.setTimeRange, dispatch)\n  };\n};\n\nvar CustomMetricsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomMetrics));\nexport default CustomMetricsContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/Metrics/CustomMetrics.tsx"],"names":["React","connect","withRouter","Toolbar","ToolbarGroup","ToolbarItem","Card","CardBody","style","serverConfig","history","URLParam","API","evalTimeRange","isEqualTimeRange","AlertUtils","RenderComponentScroll","MetricsHelper","MetricsSettingsDropdown","MetricsRawAggregation","GrafanaLinks","MetricsObjectTypes","SpanOverlay","Dashboard","bindActionCreators","UserSettingsActions","timeRangeSelector","displayFlex","display","fullHeightStyle","height","CustomMetrics","props","toolbarRef","options","spanOverlay","refresh","fetchMetrics","jaegerIntegration","fetch","namespace","target","workload","app","targetKind","WORKLOAD","APP","range","timeRange","timeRangeToOptions","workloadType","getCustomDashboard","template","then","response","labelsSettings","extractLabelsSettings","data","state","setState","dashboard","grafanaLinks","externalLinks","catch","error","addError","onMetricsSettingsChanged","settings","settingsToOptions","onLabelsFiltersChanged","labelsFilters","onRawAggregationChanged","aggregator","rawDataAggregator","onClickDataPoint","_","datum","onDomainChange","start","end","traceId","spanId","push","JAEGER_TRACE_ID","JAEGER_SPAN_ID","onSpans","checked","urlParams","URLSearchParams","location","search","set","SHOW_SPANS","String","replace","pathname","toString","showSpans","expandHandler","expandedChart","delete","createRef","retrieveMetricsSettings","initOptions","tabHeight","changed","filters","istioLabels","appLabelName","version","versionLabelName","additionalLabels","prevProps","lastRefreshAt","reset","dates","from","getTime","to","setTimeRange","get","undefined","toolbarHeight","current","clientHeight","toolbarSpace","dashboardHeight","convertAsPromLabels","onDomainChangeEnd","currentDomain","x","content","renderOptionsBar","embedded","hasHistograms","charts","some","chart","metrics","m","stat","hasLabels","size","paddingBottom","title","marginBottom","event","paddingLeft","paddingRight","marginLeft","Component","mapStateToProps","jaegerState","info","integration","globalState","mapDispatchToProps","dispatch","CustomMetricsContainer"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAA8BC,UAA9B,QAAgD,cAAhD;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,WAAhC,EAA6CC,IAA7C,EAAmDC,QAAnD,QAAmE,wBAAnE;AACA,SAASC,KAAT,QAAsB,WAAtB;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,OAAP,IAAkBC,QAAlB,QAAkC,mBAAlC;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AAEA,SAAoBC,aAApB,EAAuDC,gBAAvD,QAA+E,oBAA/E;AACA,OAAO,KAAKC,UAAZ,MAA4B,wBAA5B;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,OAAO,KAAKC,aAAZ,MAA+B,UAA/B;AAEA,SAASC,uBAAT,QAAwC,2CAAxC;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,WAAT,QAA4C,eAA5C;AAKA,SAASC,SAAT,QAA0B,6BAA1B;AAGA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AA8BA,IAAMC,WAAW,GAAGnB,KAAK,CAAC;AACxBoB,EAAAA,OAAO,EAAE;AADe,CAAD,CAAzB;AAIA,IAAMC,eAAe,GAAGrB,KAAK,CAAC;AAC5BsB,EAAAA,MAAM,EAAE;AADoB,CAAD,CAA7B;;IAIMC,a;;;;;AAKJ,yBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;AADwB,UAJ1BC,UAI0B;AAAA,UAH1BC,OAG0B;AAAA,UAF1BC,WAE0B;;AAAA,UAkDlBC,OAlDkB,GAkDR,YAAM;AACtB,YAAKC,YAAL;;AACA,UAAI,MAAKL,KAAL,CAAWM,iBAAf,EAAkC;AAChC,cAAKH,WAAL,CAAiBI,KAAjB,CAAuB;AACrBC,UAAAA,SAAS,EAAE,MAAKR,KAAL,CAAWQ,SADD;AAErBC,UAAAA,MAAM,EAAE,MAAKT,KAAL,CAAWU,QAAX,IAAuB,MAAKV,KAAL,CAAWW,GAFrB;AAGrBC,UAAAA,UAAU,EAAE,MAAKZ,KAAL,CAAWU,QAAX,GAAsBrB,kBAAkB,CAACwB,QAAzC,GAAoDxB,kBAAkB,CAACyB,GAH9D;AAIrBC,UAAAA,KAAK,EAAE,MAAKf,KAAL,CAAWgB;AAJG,SAAvB;AAMD;AACF,KA5DyB;;AAAA,UA8DlBX,YA9DkB,GA8DH,YAAM;AAC3B;AACApB,MAAAA,aAAa,CAACgC,kBAAd,CAAiC,MAAKjB,KAAL,CAAWgB,SAA5C,EAAuD,MAAKd,OAA5D,EAF2B,CAG3B;;AACA,YAAKA,OAAL,CAAaQ,QAAb,GAAwB,MAAKV,KAAL,CAAWU,QAAnC;AACA,YAAKR,OAAL,CAAagB,YAAb,GAA4B,MAAKlB,KAAL,CAAWkB,YAAvC;AACAtC,MAAAA,GAAG,CAACuC,kBAAJ,CAAuB,MAAKnB,KAAL,CAAWQ,SAAlC,EAA6C,MAAKR,KAAL,CAAWoB,QAAxD,EAAkE,MAAKlB,OAAvE,EACGmB,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,YAAMC,cAAc,GAAGtC,aAAa,CAACuC,qBAAd,CAAoCF,QAAQ,CAACG,IAA7C,EAAmD,MAAKC,KAAL,CAAWH,cAA9D,CAAvB;;AACA,cAAKI,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAEN,QAAQ,CAACG,IADR;AAEZF,UAAAA,cAAc,EAAEA,cAFJ;AAGZM,UAAAA,YAAY,EAAEP,QAAQ,CAACG,IAAT,CAAcK;AAHhB,SAAd;AAKD,OARH,EASGC,KATH,CASS,UAAAC,KAAK,EAAI;AACdjD,QAAAA,UAAU,CAACkD,QAAX,CAAoB,mCAApB,EAAyDD,KAAzD;AACD,OAXH;AAYD,KAhFyB;;AAAA,UAkFlBE,wBAlFkB,GAkFS,UAACC,QAAD,EAA+B;AAChElD,MAAAA,aAAa,CAACmD,iBAAd,CAAgCD,QAAhC,EAA0C,MAAKjC,OAA/C,EAAwD,EAAxD;;AACA,YAAKG,YAAL;AACD,KArFyB;;AAAA,UAuFlBgC,sBAvFkB,GAuFO,UAACC,aAAD,EAAmC;AAClE,YAAKX,QAAL,CAAc;AAAEJ,QAAAA,cAAc,EAAEe;AAAlB,OAAd;AACD,KAzFyB;;AAAA,UA2FlBC,uBA3FkB,GA2FQ,UAACC,UAAD,EAA4B;AAC5D,YAAKtC,OAAL,CAAauC,iBAAb,GAAiCD,UAAjC;;AACA,YAAKnC,YAAL;AACD,KA9FyB;;AAAA,UAgGlBqC,gBAhGkB,GAgGC,UAACC,CAAD,EAAIC,KAAJ,EAA2C;AACpE,UAAI,WAAWA,KAAX,IAAoB,SAASA,KAAjC,EAAwC;AACtC;AACA,cAAKC,cAAL,CAAoB,CAACD,KAAK,CAACE,KAAP,EAAsBF,KAAK,CAACG,GAA5B,CAApB;AACD,OAHD,MAGO,IAAI,aAAaH,KAAjB,EAAwB;AAC7B,YAAMI,OAAO,GAAGJ,KAAK,CAACI,OAAtB;AACA,YAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB;AACAvE,QAAAA,OAAO,CAACwE,IAAR,uBACiB,MAAKlD,KAAL,CAAWQ,SAD5B,2BACsD,MAAKR,KAAL,CAAWW,GADjE,yBACmFhC,QAAQ,CAACwE,eAD5F,cAC+GH,OAD/G,cAC0HrE,QAAQ,CAACyE,cADnI,cACqJH,MADrJ;AAGD;AACF,KA3GyB;;AAAA,UAsKlBI,OAtKkB,GAsKR,UAACC,OAAD,EAAsB;AACtC,UAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB9E,OAAO,CAAC+E,QAAR,CAAiBC,MAArC,CAAlB;AACAH,MAAAA,SAAS,CAACI,GAAV,CAAchF,QAAQ,CAACiF,UAAvB,EAAmCC,MAAM,CAACP,OAAD,CAAzC;AACA5E,MAAAA,OAAO,CAACoF,OAAR,CAAgBpF,OAAO,CAAC+E,QAAR,CAAiBM,QAAjB,GAA4B,GAA5B,GAAkCR,SAAS,CAACS,QAAV,EAAlD;;AACA,YAAKrC,QAAL,CAAc;AAAEsC,QAAAA,SAAS,EAAE,CAAC,MAAKvC,KAAL,CAAWuC;AAAzB,OAAd;AACD,KA3KyB;;AAAA,UA4OlBC,aA5OkB,GA4OF,UAACC,aAAD,EAA4B;AAClD,UAAMZ,SAAS,GAAG,IAAIC,eAAJ,CAAoB9E,OAAO,CAAC+E,QAAR,CAAiBC,MAArC,CAAlB;AACAH,MAAAA,SAAS,CAACa,MAAV,CAAiB,QAAjB;;AACA,UAAID,aAAJ,EAAmB;AACjBZ,QAAAA,SAAS,CAACI,GAAV,CAAc,QAAd,EAAwBQ,aAAxB;AACD;;AACDzF,MAAAA,OAAO,CAACwE,IAAR,CAAaxE,OAAO,CAAC+E,QAAR,CAAiBM,QAAjB,GAA4B,GAA5B,GAAkCR,SAAS,CAACS,QAAV,EAA/C;AACD,KAnPyB;;AAExB,UAAK/D,UAAL,GAAkBjC,KAAK,CAACqG,SAAN,EAAlB;;AACA,QAAMlC,SAAQ,GAAGlD,aAAa,CAACqF,uBAAd,EAAjB;;AACA,UAAKpE,OAAL,GAAe,MAAKqE,WAAL,CAAiBpC,SAAjB,CAAf,CAJwB,CAKxB;;AACA,UAAKT,KAAL,GAAa;AACXH,MAAAA,cAAc,EAAEY,SAAQ,CAACZ,cADd;AAEXM,MAAAA,YAAY,EAAE,EAFH;AAGX2C,MAAAA,SAAS,EAAE,GAHA;AAIXP,MAAAA,SAAS,EAAE9B,SAAQ,CAAC8B;AAJT,KAAb;AAMA,UAAK9D,WAAL,GAAmB,IAAIb,WAAJ,CAAgB,UAAAmF,OAAO;AAAA,aAAI,MAAK9C,QAAL,CAAc;AAAExB,QAAAA,WAAW,EAAEsE;AAAf,OAAd,CAAJ;AAAA,KAAvB,CAAnB;AAZwB;AAazB;;;;WAED,qBAAoBtC,QAApB,EAA+D;AAC7D,UAAMuC,OAAO,aAAMjG,YAAY,CAACkG,WAAb,CAAyBC,YAA/B,cAA+C,KAAK5E,KAAL,CAAWW,GAA1D,CAAb;AACA,UAAMT,OAAuB,GAAG,KAAKF,KAAL,CAAW6E,OAAX,GAC5B;AACEvC,QAAAA,aAAa,YAAKoC,OAAL,cAAgBjG,YAAY,CAACkG,WAAb,CAAyBG,gBAAzC,cAA6D,KAAK9E,KAAL,CAAW6E,OAAxE;AADf,OAD4B,GAI5B;AACEvC,QAAAA,aAAa,EAAEoC,OADjB;AAEEK,QAAAA,gBAAgB,EAAE;AAFpB,OAJJ;AAQA9F,MAAAA,aAAa,CAACmD,iBAAd,CAAgCD,QAAhC,EAA0CjC,OAA1C,EAAmD,EAAnD;AACA,aAAOA,OAAP;AACD;;;WAED,6BAAoB;AAClB,WAAKE,OAAL;AACD;;;WAED,4BAAmB4E,SAAnB,EAAqC;AACnC,UACE,KAAKhF,KAAL,CAAWQ,SAAX,KAAyBwE,SAAS,CAACxE,SAAnC,IACA,KAAKR,KAAL,CAAWW,GAAX,KAAmBqE,SAAS,CAACrE,GAD7B,IAEA,KAAKX,KAAL,CAAWU,QAAX,KAAwBsE,SAAS,CAACtE,QAFlC,IAGA,KAAKV,KAAL,CAAW6E,OAAX,KAAuBG,SAAS,CAACH,OAHjC,IAIA,KAAK7E,KAAL,CAAWoB,QAAX,KAAwB4D,SAAS,CAAC5D,QAJlC,IAKA,KAAKpB,KAAL,CAAWiF,aAAX,KAA6BD,SAAS,CAACC,aALvC,IAMA,CAACnG,gBAAgB,CAAC,KAAKkB,KAAL,CAAWgB,SAAZ,EAAuBgE,SAAS,CAAChE,SAAjC,CAPnB,EAQE;AACA,YAAMmB,QAAQ,GAAGlD,aAAa,CAACqF,uBAAd,EAAjB;AACA,aAAKpE,OAAL,GAAe,KAAKqE,WAAL,CAAiBpC,QAAjB,CAAf;AACA,aAAKhC,WAAL,CAAiB+E,KAAjB;AACA,aAAK9E,OAAL;AACD;AACF;;;WA6DD,wBAAuB+E,KAAvB,EAA4C;AAC1C,UAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAA9B,EAAmC;AACjC,YAAMpE,MAAgB,GAAG;AACvBqE,UAAAA,IAAI,EAAED,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,EADiB;AAEvBC,UAAAA,EAAE,EAAEH,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT;AAFmB,SAAzB;AAIA,aAAKrF,KAAL,CAAWuF,YAAX,CAAwBxE,MAAxB;AACD;AACF;;;WAED,kBAAS;AAAA;;AACP,UAAMwC,SAAS,GAAG,IAAIC,eAAJ,CAAoB9E,OAAO,CAAC+E,QAAR,CAAiBC,MAArC,CAAlB;AACA,UAAMS,aAAa,GAAGZ,SAAS,CAACiC,GAAV,CAAc,QAAd,KAA2BC,SAAjD,CAFO,CAGP;;AACA,UAAMC,aAAa,GAAG,KAAKzF,UAAL,CAAgB0F,OAAhB,GAA0B,KAAK1F,UAAL,CAAgB0F,OAAhB,CAAwBC,YAAlD,GAAiE,EAAvF;AACA,UAAMC,YAAY,GAAG,KAAK,EAAL,GAAUH,aAAV,GAA0B,EAA1B,GAA+B,EAA/B,GAAoC,EAAzD;AACA,UAAMI,eAAe,GAAG,CAAC,KAAK9F,KAAL,CAAWF,MAAX,GAAoB,KAAKE,KAAL,CAAWF,MAA/B,GAAwC,KAAK4B,KAAL,CAAW8C,SAApD,IAAiEqB,YAAzF;AAEA,UAAMjE,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAAX,iBAChB,oBAAC,SAAD;AACE,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SADxB;AAEE,QAAA,YAAY,EAAE,IAFhB;AAGE,QAAA,QAAQ,EAAE,KAAK5B,KAAL,CAAWoB,QAHvB;AAIE,QAAA,WAAW,EAAEnC,aAAa,CAAC8G,mBAAd,CAAkC,KAAKrE,KAAL,CAAWH,cAA7C,CAJf;AAKE,QAAA,cAAc,EAAE4C,aALlB;AAME,QAAA,aAAa,EAAE,KAAKD,aANtB;AAOE,QAAA,OAAO,EAAE,KAAKxB,gBAPhB;AAQE,QAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWuC,SARxB;AASE,QAAA,eAAe,EAAE6B,eATnB;AAUE,QAAA,OAAO,EAAE,KAAKpE,KAAL,CAAWvB,WAVtB;AAWE,QAAA,UAAU,EAAEtB,aAAa,CAAC,KAAKmB,KAAL,CAAWgB,SAAZ,CAX3B;AAYE,QAAA,aAAa,EAAE;AAAEgF,UAAAA,iBAAiB,EAAE,2BAACrD,CAAD,EAAI3C,KAAJ;AAAA,mBAAc,MAAI,CAAC6C,cAAL,CAAoB7C,KAAK,CAACiG,aAAN,CAAoBC,CAAxC,CAAd;AAAA;AAArB,SAZjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiBA,UAAMC,OAAO,gBACX,0CACG,KAAKC,gBAAL,EADH,EAEG,KAAK1E,KAAL,CAAWE,SAAX,IAAwBA,SAF3B,CADF;AAOA,0BACE,0CACG,KAAK5B,KAAL,CAAWqG,QAAX,gBACC,0CAAGF,OAAH,CADD,gBAGC,oBAAC,qBAAD;AAAuB,QAAA,QAAQ,EAAE,kBAAArG,MAAM;AAAA,iBAAI,MAAI,CAAC6B,QAAL,CAAc;AAAE6C,YAAAA,SAAS,EAAE1E;AAAb,WAAd,CAAJ;AAAA,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAED,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAWsG,OAAX,CADF,CADF,CAJJ,CADF;AAaD;;;WASD,4BAA2B;AAAA;AAAA;;AACzB,UAAMG,aAAa,GACjB,KAAK5E,KAAL,CAAWE,SAAX,KAAyB6D,SAAzB,IAAsC,KAAK/D,KAAL,CAAWE,SAAX,CAAqB2E,MAArB,CAA4BC,IAA5B,CAAiC,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAmB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAACC,IAAN;AAAA,SAApB,CAAJ;AAAA,OAAtC,CADxC;AAEA,UAAMC,SAAS,GAAG,KAAKnF,KAAL,CAAWH,cAAX,CAA0BuF,IAA1B,GAAiC,CAAnD;AACA,0BACE;AAAK,QAAA,GAAG,EAAE,KAAK7G,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE;AAAE8G,UAAAA,aAAa,EAAE;AAAjB,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACT,aAAa,IAAIO,SAAlB,kBACC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,uBAAD;AACE,QAAA,SAAS,EAAE,KAAK3E,wBADlB;AAEE,QAAA,sBAAsB,EAAE,KAAKG,sBAF/B;AAGE,QAAA,SAAS,EAAE,+BAAKX,KAAL,CAAWE,SAAX,gFAAsBoF,KAAtB,KAA+B,WAH5C;AAIE,QAAA,cAAc,EAAE,KAAKtF,KAAL,CAAWH,cAJ7B;AAKE,QAAA,aAAa,EAAE+E,aALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAFJ,eAcE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE3G,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,qBAAD;AAAuB,QAAA,SAAS,EAAE,KAAK4C,uBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAdF,eAmBE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE5C,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,GAAG,oBADL;AAEE,QAAA,EAAE,eAFJ;AAGE,QAAA,SAAS,EAAC,mBAHZ;AAIE,QAAA,KAAK,EAAE;AAAEsH,UAAAA,YAAY,EAAE;AAAhB,SAJT;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,OAAO,EAAE,KAAKvF,KAAL,CAAWuC,SANtB;AAOE,QAAA,QAAQ,EAAE,kBAAAiD,KAAK;AAAA,iBAAI,MAAI,CAAC7D,OAAL,CAAa6D,KAAK,CAACzG,MAAN,CAAa6C,OAA1B,CAAJ;AAAA,SAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAUE;AACE,QAAA,SAAS,EAAC,mBADZ;AAEE,QAAA,KAAK,EAAE;AACL6D,UAAAA,WAAW,EAAE,KADR;AAELC,UAAAA,YAAY,EAAE;AAFT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVF,CADF,CADF,CAnBF,eA2CE,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE,MAAd;AAAsBD,UAAAA,YAAY,EAAE;AAApC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAWG,YADpB;AAEE,QAAA,SAAS,EAAE,KAAK7B,KAAL,CAAWQ,SAFxB;AAGE,QAAA,MAAM,EAAE,KAAKR,KAAL,CAAWW,GAHrB;AAIE,QAAA,UAAU,EAAEtB,kBAAkB,CAACyB,GAJjC;AAKE,QAAA,OAAO,EAAE,KAAKd,KAAL,CAAW6E,OALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA3CF,CADF,CADF;AAyDD;;;;EA/OyB7G,KAAK,CAACsJ,S;;AA2PlC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAC7F,KAAD,EAA0B;AAChD,SAAO;AACLpB,IAAAA,iBAAiB,EAAEoB,KAAK,CAAC8F,WAAN,CAAkBC,IAAlB,GAAyB/F,KAAK,CAAC8F,WAAN,CAAkBC,IAAlB,CAAuBC,WAAhD,GAA8D,KAD5E;AAELzC,IAAAA,aAAa,EAAEvD,KAAK,CAACiG,WAAN,CAAkB1C,aAF5B;AAGLjE,IAAAA,SAAS,EAAEtB,iBAAiB,CAACgC,KAAD;AAHvB,GAAP;AAKD,CAND;;AAQA,IAAMkG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAkE;AAC3F,SAAO;AACLtC,IAAAA,YAAY,EAAE/F,kBAAkB,CAACC,mBAAmB,CAAC8F,YAArB,EAAmCsC,QAAnC;AAD3B,GAAP;AAGD,CAJD;;AAMA,IAAMC,sBAAsB,GAAG5J,UAAU,CACvCD,OAAO,CAACsJ,eAAD,EAAkBK,kBAAlB,CAAP,CAA6C7H,aAA7C,CADuC,CAAzC;AAIA,eAAe+H,sBAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Card, CardBody } from '@patternfly/react-core';\nimport { style } from 'typestyle';\n\nimport { serverConfig } from '../../config/ServerConfig';\nimport history, { URLParam } from '../../app/History';\nimport * as API from '../../services/Api';\nimport { KialiAppState } from '../../store/Store';\nimport { TimeRange, evalTimeRange, TimeInMilliseconds, isEqualTimeRange } from '../../types/Common';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { RenderComponentScroll } from '../../components/Nav/Page';\nimport * as MetricsHelper from './Helper';\nimport { MetricsSettings, LabelsSettings } from '../MetricsOptions/MetricsSettings';\nimport { MetricsSettingsDropdown } from '../MetricsOptions/MetricsSettingsDropdown';\nimport MetricsRawAggregation from '../MetricsOptions/MetricsRawAggregation';\nimport { GrafanaLinks } from './GrafanaLinks';\nimport { MetricsObjectTypes } from 'types/Metrics';\nimport { SpanOverlay, JaegerLineInfo } from './SpanOverlay';\nimport { DashboardModel, ExternalLink } from 'types/Dashboards';\nimport { Overlay } from 'types/Overlay';\nimport { Aggregator, DashboardQuery } from 'types/MetricsOptions';\nimport { RawOrBucket } from 'types/VictoryChartInfo';\nimport { Dashboard } from 'components/Charts/Dashboard';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport { bindActionCreators } from 'redux';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { timeRangeSelector } from '../../store/Selectors';\n\ntype MetricsState = {\n  dashboard?: DashboardModel;\n  labelsSettings: LabelsSettings;\n  grafanaLinks: ExternalLink[];\n  spanOverlay?: Overlay<JaegerLineInfo>;\n  tabHeight: number;\n  showSpans: boolean;\n};\n\ntype CustomMetricsProps = RouteComponentProps<{}> & {\n  namespace: string;\n  app: string;\n  version?: string;\n  workload?: string;\n  workloadType?: string;\n  template: string;\n  embedded?: boolean;\n  height?: number;\n};\n\ntype Props = CustomMetricsProps & {\n  // Redux props\n  jaegerIntegration: boolean;\n  lastRefreshAt: TimeInMilliseconds;\n  timeRange: TimeRange;\n  setTimeRange: (range: TimeRange) => void;\n};\n\nconst displayFlex = style({\n  display: 'flex'\n});\n\nconst fullHeightStyle = style({\n  height: '100%'\n});\n\nclass CustomMetrics extends React.Component<Props, MetricsState> {\n  toolbarRef: React.RefObject<HTMLDivElement>;\n  options: DashboardQuery;\n  spanOverlay: SpanOverlay;\n\n  constructor(props: Props) {\n    super(props);\n    this.toolbarRef = React.createRef<HTMLDivElement>();\n    const settings = MetricsHelper.retrieveMetricsSettings();\n    this.options = this.initOptions(settings);\n    // Initialize active filters from URL\n    this.state = {\n      labelsSettings: settings.labelsSettings,\n      grafanaLinks: [],\n      tabHeight: 300,\n      showSpans: settings.showSpans\n    };\n    this.spanOverlay = new SpanOverlay(changed => this.setState({ spanOverlay: changed }));\n  }\n\n  private initOptions(settings: MetricsSettings): DashboardQuery {\n    const filters = `${serverConfig.istioLabels.appLabelName}:${this.props.app}`;\n    const options: DashboardQuery = this.props.version\n      ? {\n          labelsFilters: `${filters},${serverConfig.istioLabels.versionLabelName}:${this.props.version}`\n        }\n      : {\n          labelsFilters: filters,\n          additionalLabels: 'version:Version'\n        };\n    MetricsHelper.settingsToOptions(settings, options, []);\n    return options;\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.namespace !== prevProps.namespace ||\n      this.props.app !== prevProps.app ||\n      this.props.workload !== prevProps.workload ||\n      this.props.version !== prevProps.version ||\n      this.props.template !== prevProps.template ||\n      this.props.lastRefreshAt !== prevProps.lastRefreshAt ||\n      !isEqualTimeRange(this.props.timeRange, prevProps.timeRange)\n    ) {\n      const settings = MetricsHelper.retrieveMetricsSettings();\n      this.options = this.initOptions(settings);\n      this.spanOverlay.reset();\n      this.refresh();\n    }\n  }\n\n  private refresh = () => {\n    this.fetchMetrics();\n    if (this.props.jaegerIntegration) {\n      this.spanOverlay.fetch({\n        namespace: this.props.namespace,\n        target: this.props.workload || this.props.app,\n        targetKind: this.props.workload ? MetricsObjectTypes.WORKLOAD : MetricsObjectTypes.APP,\n        range: this.props.timeRange\n      });\n    }\n  };\n\n  private fetchMetrics = () => {\n    // Time range needs to be reevaluated everytime fetching\n    MetricsHelper.timeRangeToOptions(this.props.timeRange, this.options);\n    // Workload name can be used to find personalized dashboards defined at workload level\n    this.options.workload = this.props.workload;\n    this.options.workloadType = this.props.workloadType;\n    API.getCustomDashboard(this.props.namespace, this.props.template, this.options)\n      .then(response => {\n        const labelsSettings = MetricsHelper.extractLabelsSettings(response.data, this.state.labelsSettings);\n        this.setState({\n          dashboard: response.data,\n          labelsSettings: labelsSettings,\n          grafanaLinks: response.data.externalLinks\n        });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch custom dashboard.', error);\n      });\n  };\n\n  private onMetricsSettingsChanged = (settings: MetricsSettings) => {\n    MetricsHelper.settingsToOptions(settings, this.options, []);\n    this.fetchMetrics();\n  };\n\n  private onLabelsFiltersChanged = (labelsFilters: LabelsSettings) => {\n    this.setState({ labelsSettings: labelsFilters });\n  };\n\n  private onRawAggregationChanged = (aggregator: Aggregator) => {\n    this.options.rawDataAggregator = aggregator;\n    this.fetchMetrics();\n  };\n\n  private onClickDataPoint = (_, datum: RawOrBucket<JaegerLineInfo>) => {\n    if ('start' in datum && 'end' in datum) {\n      // Zoom-in bucket\n      this.onDomainChange([datum.start as Date, datum.end as Date]);\n    } else if ('traceId' in datum) {\n      const traceId = datum.traceId;\n      const spanId = datum.spanId;\n      history.push(\n        `/namespaces/${this.props.namespace}/applications/${this.props.app}?tab=traces&${URLParam.JAEGER_TRACE_ID}=${traceId}&${URLParam.JAEGER_SPAN_ID}=${spanId}`\n      );\n    }\n  };\n\n  private onDomainChange(dates: [Date, Date]) {\n    if (dates && dates[0] && dates[1]) {\n      const range: TimeRange = {\n        from: dates[0].getTime(),\n        to: dates[1].getTime()\n      };\n      this.props.setTimeRange(range);\n    }\n  }\n\n  render() {\n    const urlParams = new URLSearchParams(history.location.search);\n    const expandedChart = urlParams.get('expand') || undefined;\n    // 20px (card margin) + 24px (card padding) + 51px (toolbar) + 15px (toolbar padding) + 24px (card padding) + 20px (card margin)\n    const toolbarHeight = this.toolbarRef.current ? this.toolbarRef.current.clientHeight : 51;\n    const toolbarSpace = 20 + 24 + toolbarHeight + 15 + 24 + 20;\n    const dashboardHeight = (this.props.height ? this.props.height : this.state.tabHeight) - toolbarSpace;\n\n    const dashboard = this.state.dashboard && (\n      <Dashboard\n        dashboard={this.state.dashboard}\n        customMetric={true}\n        template={this.props.template}\n        labelValues={MetricsHelper.convertAsPromLabels(this.state.labelsSettings)}\n        maximizedChart={expandedChart}\n        expandHandler={this.expandHandler}\n        onClick={this.onClickDataPoint}\n        showSpans={this.state.showSpans}\n        dashboardHeight={dashboardHeight}\n        overlay={this.state.spanOverlay}\n        timeWindow={evalTimeRange(this.props.timeRange)}\n        brushHandlers={{ onDomainChangeEnd: (_, props) => this.onDomainChange(props.currentDomain.x) }}\n      />\n    );\n\n    const content = (\n      <>\n        {this.renderOptionsBar()}\n        {this.state.dashboard && dashboard}\n      </>\n    );\n\n    return (\n      <>\n        {this.props.embedded ? (\n          <>{content}</>\n        ) : (\n          <RenderComponentScroll onResize={height => this.setState({ tabHeight: height })}>\n            <Card className={fullHeightStyle}>\n              <CardBody>{content}</CardBody>\n            </Card>\n          </RenderComponentScroll>\n        )}\n      </>\n    );\n  }\n\n  private onSpans = (checked: boolean) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.set(URLParam.SHOW_SPANS, String(checked));\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n    this.setState({ showSpans: !this.state.showSpans });\n  };\n\n  private renderOptionsBar() {\n    const hasHistograms =\n      this.state.dashboard !== undefined && this.state.dashboard.charts.some(chart => chart.metrics.some(m => m.stat));\n    const hasLabels = this.state.labelsSettings.size > 0;\n    return (\n      <div ref={this.toolbarRef}>\n        <Toolbar style={{ paddingBottom: 15 }}>\n          {(hasHistograms || hasLabels) && (\n            <ToolbarGroup>\n              <ToolbarItem>\n                <MetricsSettingsDropdown\n                  onChanged={this.onMetricsSettingsChanged}\n                  onLabelsFiltersChanged={this.onLabelsFiltersChanged}\n                  direction={this.state.dashboard?.title || 'dashboard'}\n                  labelsSettings={this.state.labelsSettings}\n                  hasHistograms={hasHistograms}\n                />\n              </ToolbarItem>\n            </ToolbarGroup>\n          )}\n          <ToolbarGroup>\n            <ToolbarItem className={displayFlex}>\n              <MetricsRawAggregation onChanged={this.onRawAggregationChanged} />\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup>\n            <ToolbarItem className={displayFlex}>\n              <div className=\"pf-c-check\">\n                <input\n                  key={`spans-show-chart`}\n                  id={`spans-show-`}\n                  className=\"pf-c-check__input\"\n                  style={{ marginBottom: '3px' }}\n                  type=\"checkbox\"\n                  checked={this.state.showSpans}\n                  onChange={event => this.onSpans(event.target.checked)}\n                />\n                <label\n                  className=\"pf-c-check__label\"\n                  style={{\n                    paddingLeft: '5px',\n                    paddingRight: '5px'\n                  }}\n                >\n                  Spans\n                </label>\n              </div>\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup style={{ marginLeft: 'auto', paddingRight: '20px' }}>\n            <GrafanaLinks\n              links={this.state.grafanaLinks}\n              namespace={this.props.namespace}\n              object={this.props.app}\n              objectType={MetricsObjectTypes.APP}\n              version={this.props.version}\n            />\n          </ToolbarGroup>\n        </Toolbar>\n      </div>\n    );\n  }\n\n  private expandHandler = (expandedChart?: string) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.delete('expand');\n    if (expandedChart) {\n      urlParams.set('expand', expandedChart);\n    }\n    history.push(history.location.pathname + '?' + urlParams.toString());\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => {\n  return {\n    jaegerIntegration: state.jaegerState.info ? state.jaegerState.info.integration : false,\n    lastRefreshAt: state.globalState.lastRefreshAt,\n    timeRange: timeRangeSelector(state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setTimeRange: bindActionCreators(UserSettingsActions.setTimeRange, dispatch)\n  };\n};\n\nconst CustomMetricsContainer = withRouter<RouteComponentProps<{}> & CustomMetricsProps, any>(\n  connect(mapStateToProps, mapDispatchToProps)(CustomMetrics)\n);\n\nexport default CustomMetricsContainer;\n"]},"metadata":{},"sourceType":"module"}
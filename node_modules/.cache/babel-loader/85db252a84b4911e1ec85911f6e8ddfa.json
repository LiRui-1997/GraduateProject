{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/IstioConfigNew/ServiceEntryForm.tsx\";\nimport * as React from 'react';\nimport { Button, FormGroup, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { isGatewayHostValid } from '../../utils/IstioConfigUtils';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\nexport var SERVICE_ENTRY = 'ServiceEntry';\nexport var SERVICE_ENTRIES = 'serviceentries';\nvar MESH_EXTERNAL = 'MESH_EXTERNAL';\nvar MESH_INTERNAL = 'MESH_INTERNAL';\nvar location = [MESH_EXTERNAL, MESH_INTERNAL];\nvar NONE = 'NONE';\nvar STATIC = 'STATIC';\nvar DNS = 'DNS';\nvar resolution = [NONE, STATIC, DNS];\nvar protocols = ['HTTP', 'HTTPS', 'GRPC', 'HTTP2', 'MONGO', 'TCP', 'TLS'];\nvar headerCells = [{\n  title: 'Port Number',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Port Name',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Protocol',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Target Port',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: '',\n  props: {}\n}];\nvar noPortsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\nexport var initServiceEntry = function initServiceEntry() {\n  return {\n    serviceEntry: {\n      location: location[0],\n      // MESH_EXTERNAL\n      resolution: resolution[0] // NONE\n\n    },\n    validHosts: false,\n    addNewPortNumber: '80',\n    addNewPortName: '',\n    addNewPortProtocol: protocols[0],\n    addNewTargetPort: ''\n  };\n};\nexport var isServiceEntryValid = function isServiceEntryValid(se) {\n  return se.validHosts && se.serviceEntry.ports !== undefined && se.serviceEntry.ports.length > 0;\n};\n\nvar ServiceEntryForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(ServiceEntryForm, _React$Component);\n\n  var _super = _createSuper(ServiceEntryForm);\n\n  function ServiceEntryForm(props) {\n    var _this;\n\n    _classCallCheck(this, ServiceEntryForm);\n\n    _this = _super.call(this, props);\n\n    _this.actionResolver = function (rowData, _ref) {\n      var rowIndex = _ref.rowIndex;\n      var removeAction = {\n        title: 'Remove Port',\n        // @ts-ignore\n        onClick: function onClick(event, rowIndex, rowData, extraData) {\n          _this.setState(function (prevState) {\n            var _prevState$serviceEnt;\n\n            (_prevState$serviceEnt = prevState.serviceEntry.ports) === null || _prevState$serviceEnt === void 0 ? void 0 : _prevState$serviceEnt.splice(rowIndex, 1);\n            return {\n              serviceEntry: prevState.serviceEntry\n            };\n          }, function () {\n            return _this.props.onChange(_this.state);\n          });\n        }\n      };\n\n      if (_this.state.serviceEntry.ports && rowIndex < _this.state.serviceEntry.ports.length) {\n        return [removeAction];\n      }\n\n      return [];\n    };\n\n    _this.areValidHosts = function (hosts) {\n      if (hosts.length === 0) {\n        return false;\n      }\n\n      var isValid = true;\n\n      for (var i = 0; i < hosts.length; i++) {\n        if (!isGatewayHostValid(hosts[i])) {\n          isValid = false;\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    _this.isValidPort = function () {\n      var validPortNumber = _this.state.addNewPortNumber.length > 0 && !isNaN(Number(_this.state.addNewPortNumber));\n      var validPortName = _this.state.addNewPortName.length > 0;\n      var validTargetPort = _this.state.addNewTargetPort.length === 0 || _this.state.addNewTargetPort.length > 0 && !isNaN(Number(_this.state.addNewTargetPort));\n      return validPortNumber && validPortName && validTargetPort;\n    };\n\n    _this.onAddHosts = function (value, _) {\n      var hosts = value.trim().length === 0 ? [] : value.split(',').map(function (host) {\n        return host.trim();\n      });\n\n      _this.setState(function (prevState) {\n        prevState.serviceEntry.hosts = hosts;\n        return {\n          serviceEntry: prevState.serviceEntry,\n          validHosts: _this.areValidHosts(hosts)\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.onAddLocation = function (value, _) {\n      _this.setState(function (prevState) {\n        prevState.serviceEntry.location = value;\n        return {\n          serviceEntry: prevState.serviceEntry\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.onAddResolution = function (value, _) {\n      _this.setState(function (prevState) {\n        prevState.serviceEntry.resolution = value;\n        return {\n          serviceEntry: prevState.serviceEntry\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.onAddPortNumber = function (value, _) {\n      _this.setState({\n        addNewPortNumber: value\n      });\n    };\n\n    _this.onAddPortName = function (value, _) {\n      _this.setState({\n        addNewPortName: value\n      });\n    };\n\n    _this.onAddPortProtocol = function (value, _) {\n      _this.setState({\n        addNewPortProtocol: value\n      });\n    };\n\n    _this.onAddTargetPort = function (value, _) {\n      _this.setState({\n        addNewTargetPort: value\n      });\n    };\n\n    _this.onAddNewPort = function () {\n      // @ts-ignore\n      _this.setState(function (prevState) {\n        var newPort = {\n          number: +_this.state.addNewPortNumber,\n          name: _this.state.addNewPortName,\n          protocol: _this.state.addNewPortProtocol\n        };\n\n        if (_this.state.addNewTargetPort.length > 0) {\n          newPort.targetPort = +_this.state.addNewTargetPort;\n        }\n\n        if (!prevState.serviceEntry.ports) {\n          prevState.serviceEntry.ports = [];\n        }\n\n        prevState.serviceEntry.ports.push(newPort);\n        return {\n          serviceEntry: prevState.serviceEntry,\n          addNewPortNumber: '80',\n          addNewPortName: '',\n          addNewPortProtocol: protocols[0],\n          addNewTargetPort: ''\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.state = initServiceEntry();\n    return _this;\n  } // @ts-ignore\n\n\n  _createClass(ServiceEntryForm, [{\n    key: \"rows\",\n    value: function rows() {\n      var _this2 = this;\n\n      return (this.state.serviceEntry.ports || []).map(function (p, i) {\n        return {\n          key: 'port_' + i,\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, p.number), /*#__PURE__*/React.createElement(React.Fragment, null, p.name), /*#__PURE__*/React.createElement(React.Fragment, null, p.protocol), /*#__PURE__*/React.createElement(React.Fragment, null, p.targetPort), '']\n        };\n      }).concat([{\n        key: 'portNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.addNewPortNumber,\n          id: \"addPortNumber\",\n          \"aria-describedby\": \"add port number\",\n          name: \"addPortNumber\",\n          onChange: this.onAddPortNumber,\n          isValid: this.state.addNewPortNumber.length > 0 && !isNaN(Number(this.state.addNewPortNumber)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.addNewPortName,\n          id: \"addPortName\",\n          \"aria-describedby\": \"add port name\",\n          name: \"addPortName\",\n          onChange: this.onAddPortName,\n          isValid: this.state.addNewPortName.length > 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n          value: this.state.addNewPortProtocol,\n          id: \"addPortProtocol\",\n          name: \"addPortProtocol\",\n          onChange: this.onAddPortProtocol,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }\n        }, protocols.map(function (option, index) {\n          return /*#__PURE__*/React.createElement(FormSelectOption, {\n            key: 'p' + index,\n            value: option,\n            label: option,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }\n          });\n        }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.addNewTargetPort,\n          id: \"addTargetPort\",\n          \"aria-describedby\": \"add target port\",\n          name: \"addTargetPort\",\n          onChange: this.onAddTargetPort,\n          isValid: this.state.addNewTargetPort.length === 0 || this.state.addNewTargetPort.length > 0 && !isNaN(Number(this.state.addNewTargetPort)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          id: \"addServerBtn\",\n          variant: \"link\",\n          icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 23\n            }\n          }),\n          isDisabled: !this.isValidPort(),\n          onClick: this.onAddNewPort,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }\n        }))]\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$serviceEn,\n          _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Hosts\",\n        isRequired: true,\n        fieldId: \"hosts\",\n        helperText: \"The hosts associated with the ServiceEntry.\",\n        helperTextInvalid: \"Invalid hosts for this ServiceEntry. Enter one or hosts separated by comma.\",\n        isValid: this.state.validHosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: (_this$state$serviceEn = this.state.serviceEntry.hosts) === null || _this$state$serviceEn === void 0 ? void 0 : _this$state$serviceEn.join(','),\n        isRequired: true,\n        type: \"text\",\n        id: \"hosts\",\n        \"aria-describedby\": \"hosts\",\n        name: \"hosts\",\n        onChange: this.onAddHosts,\n        isValid: this.state.validHosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Location\",\n        isRequired: true,\n        fieldId: \"location\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.serviceEntry.location,\n        id: \"location\",\n        name: \"location\",\n        onChange: this.onAddLocation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }\n      }, location.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          isDisabled: false,\n          key: 'p' + index,\n          value: option,\n          label: option,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Ports\",\n        fieldId: \"ports\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Ports\",\n        cells: headerCells,\n        rows: this.rows() // @ts-ignore\n        ,\n        actionResolver: this.actionResolver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }\n      })), (!this.state.serviceEntry.ports || this.state.serviceEntry.ports.length === 0) && /*#__PURE__*/React.createElement(\"div\", {\n        className: noPortsStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }\n      }, \"ServiceEntry has no Ports defined\")), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Resolution\",\n        isRequired: true,\n        fieldId: \"resolution\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.serviceEntry.resolution,\n        id: \"resolution\",\n        name: \"resolution\",\n        onChange: this.onAddResolution,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }\n      }, resolution.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          isDisabled: false,\n          key: 'p' + index,\n          value: option,\n          label: option,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return ServiceEntryForm;\n}(React.Component);\n\nexport default ServiceEntryForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/IstioConfigNew/ServiceEntryForm.tsx"],"names":["React","Button","FormGroup","FormSelect","FormSelectOption","TextInputBase","TextInput","isGatewayHostValid","cellWidth","Table","TableBody","TableHeader","PlusCircleIcon","style","PFColors","SERVICE_ENTRY","SERVICE_ENTRIES","MESH_EXTERNAL","MESH_INTERNAL","location","NONE","STATIC","DNS","resolution","protocols","headerCells","title","transforms","props","noPortsStyle","marginTop","color","Red100","initServiceEntry","serviceEntry","validHosts","addNewPortNumber","addNewPortName","addNewPortProtocol","addNewTargetPort","isServiceEntryValid","se","ports","undefined","length","ServiceEntryForm","actionResolver","rowData","rowIndex","removeAction","onClick","event","extraData","setState","prevState","splice","onChange","state","areValidHosts","hosts","isValid","i","isValidPort","validPortNumber","isNaN","Number","validPortName","validTargetPort","onAddHosts","value","_","trim","split","map","host","onAddLocation","onAddResolution","onAddPortNumber","onAddPortName","onAddPortProtocol","onAddTargetPort","onAddNewPort","newPort","number","name","protocol","targetPort","push","p","key","cells","concat","option","index","join","rows","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Port, ServiceEntrySpec } from '../../types/IstioObjects';\nimport { Button, FormGroup, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { isGatewayHostValid } from '../../utils/IstioConfigUtils';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\n\nexport const SERVICE_ENTRY = 'ServiceEntry';\nexport const SERVICE_ENTRIES = 'serviceentries';\n\nconst MESH_EXTERNAL = 'MESH_EXTERNAL';\nconst MESH_INTERNAL = 'MESH_INTERNAL';\n\nconst location = [MESH_EXTERNAL, MESH_INTERNAL];\n\nconst NONE = 'NONE';\nconst STATIC = 'STATIC';\nconst DNS = 'DNS';\n\nconst resolution = [NONE, STATIC, DNS];\n\nconst protocols = ['HTTP', 'HTTPS', 'GRPC', 'HTTP2', 'MONGO', 'TCP', 'TLS'];\n\nconst headerCells: ICell[] = [\n  {\n    title: 'Port Number',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Port Name',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Protocol',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Target Port',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: '',\n    props: {}\n  }\n];\n\nconst noPortsStyle = style({\n  marginTop: 15,\n  color: PFColors.Red100\n});\n\ntype Props = {\n  serviceEntry: ServiceEntryState;\n  onChange: (serviceEntry: ServiceEntryState) => void;\n};\n\nexport type ServiceEntryState = {\n  serviceEntry: ServiceEntrySpec;\n  validHosts: boolean;\n  addNewPortNumber: string;\n  addNewPortName: string;\n  addNewPortProtocol: string;\n  addNewTargetPort: string;\n};\n\nexport const initServiceEntry = (): ServiceEntryState => ({\n  serviceEntry: {\n    location: location[0], // MESH_EXTERNAL\n    resolution: resolution[0] // NONE\n  },\n  validHosts: false,\n  addNewPortNumber: '80',\n  addNewPortName: '',\n  addNewPortProtocol: protocols[0],\n  addNewTargetPort: ''\n});\n\nexport const isServiceEntryValid = (se: ServiceEntryState): boolean => {\n  return se.validHosts && se.serviceEntry.ports !== undefined && se.serviceEntry.ports.length > 0;\n};\n\nclass ServiceEntryForm extends React.Component<Props, ServiceEntryState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initServiceEntry();\n  }\n\n  // @ts-ignore\n  actionResolver = (rowData, { rowIndex }) => {\n    const removeAction = {\n      title: 'Remove Port',\n      // @ts-ignore\n      onClick: (event, rowIndex, rowData, extraData) => {\n        this.setState(\n          prevState => {\n            prevState.serviceEntry.ports?.splice(rowIndex, 1);\n            return {\n              serviceEntry: prevState.serviceEntry\n            };\n          },\n          () => this.props.onChange(this.state)\n        );\n      }\n    };\n    if (this.state.serviceEntry.ports && rowIndex < this.state.serviceEntry.ports.length) {\n      return [removeAction];\n    }\n    return [];\n  };\n\n  areValidHosts = (hosts: string[]): boolean => {\n    if (hosts.length === 0) {\n      return false;\n    }\n    let isValid = true;\n    for (let i = 0; i < hosts.length; i++) {\n      if (!isGatewayHostValid(hosts[i])) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  };\n\n  isValidPort = () => {\n    const validPortNumber = this.state.addNewPortNumber.length > 0 && !isNaN(Number(this.state.addNewPortNumber));\n    const validPortName = this.state.addNewPortName.length > 0;\n    const validTargetPort =\n      this.state.addNewTargetPort.length === 0 ||\n      (this.state.addNewTargetPort.length > 0 && !isNaN(Number(this.state.addNewTargetPort)));\n    return validPortNumber && validPortName && validTargetPort;\n  };\n\n  onAddHosts = (value: string, _) => {\n    const hosts = value.trim().length === 0 ? [] : value.split(',').map(host => host.trim());\n    this.setState(\n      prevState => {\n        prevState.serviceEntry.hosts = hosts;\n        return {\n          serviceEntry: prevState.serviceEntry,\n          validHosts: this.areValidHosts(hosts)\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  onAddLocation = (value: string, _) => {\n    this.setState(\n      prevState => {\n        prevState.serviceEntry.location = value;\n        return {\n          serviceEntry: prevState.serviceEntry\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  onAddResolution = (value: string, _) => {\n    this.setState(\n      prevState => {\n        prevState.serviceEntry.resolution = value;\n        return {\n          serviceEntry: prevState.serviceEntry\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  onAddPortNumber = (value: string, _) => {\n    this.setState({\n      addNewPortNumber: value\n    });\n  };\n\n  onAddPortName = (value: string, _) => {\n    this.setState({\n      addNewPortName: value\n    });\n  };\n\n  onAddPortProtocol = (value: string, _) => {\n    this.setState({\n      addNewPortProtocol: value\n    });\n  };\n\n  onAddTargetPort = (value: string, _) => {\n    this.setState({\n      addNewTargetPort: value\n    });\n  };\n\n  onAddNewPort = () => {\n    // @ts-ignore\n    this.setState(\n      prevState => {\n        const newPort: Port = {\n          number: +this.state.addNewPortNumber,\n          name: this.state.addNewPortName,\n          protocol: this.state.addNewPortProtocol\n        };\n        if (this.state.addNewTargetPort.length > 0) {\n          newPort.targetPort = +this.state.addNewTargetPort;\n        }\n        if (!prevState.serviceEntry.ports) {\n          prevState.serviceEntry.ports = [];\n        }\n        prevState.serviceEntry.ports.push(newPort);\n        return {\n          serviceEntry: prevState.serviceEntry,\n          addNewPortNumber: '80',\n          addNewPortName: '',\n          addNewPortProtocol: protocols[0],\n          addNewTargetPort: ''\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  rows() {\n    return (this.state.serviceEntry.ports || [])\n      .map((p, i) => ({\n        key: 'port_' + i,\n        cells: [<>{p.number}</>, <>{p.name}</>, <>{p.protocol}</>, <>{p.targetPort}</>, '']\n      }))\n      .concat([\n        {\n          key: 'portNew',\n          cells: [\n            <>\n              <TextInput\n                value={this.state.addNewPortNumber}\n                id=\"addPortNumber\"\n                aria-describedby=\"add port number\"\n                name=\"addPortNumber\"\n                onChange={this.onAddPortNumber}\n                isValid={this.state.addNewPortNumber.length > 0 && !isNaN(Number(this.state.addNewPortNumber))}\n              />\n            </>,\n            <>\n              <TextInput\n                value={this.state.addNewPortName}\n                id=\"addPortName\"\n                aria-describedby=\"add port name\"\n                name=\"addPortName\"\n                onChange={this.onAddPortName}\n                isValid={this.state.addNewPortName.length > 0}\n              />\n            </>,\n            <>\n              <FormSelect\n                value={this.state.addNewPortProtocol}\n                id=\"addPortProtocol\"\n                name=\"addPortProtocol\"\n                onChange={this.onAddPortProtocol}\n              >\n                {protocols.map((option, index) => (\n                  <FormSelectOption key={'p' + index} value={option} label={option} />\n                ))}\n              </FormSelect>\n            </>,\n            <>\n              <TextInput\n                value={this.state.addNewTargetPort}\n                id=\"addTargetPort\"\n                aria-describedby=\"add target port\"\n                name=\"addTargetPort\"\n                onChange={this.onAddTargetPort}\n                isValid={\n                  this.state.addNewTargetPort.length === 0 ||\n                  (this.state.addNewTargetPort.length > 0 && !isNaN(Number(this.state.addNewTargetPort)))\n                }\n              />\n            </>,\n            <>\n              <Button\n                id=\"addServerBtn\"\n                variant=\"link\"\n                icon={<PlusCircleIcon />}\n                isDisabled={!this.isValidPort()}\n                onClick={this.onAddNewPort}\n              />\n            </>\n          ]\n        }\n      ]);\n  }\n\n  render() {\n    return (\n      <>\n        <FormGroup\n          label=\"Hosts\"\n          isRequired={true}\n          fieldId=\"hosts\"\n          helperText=\"The hosts associated with the ServiceEntry.\"\n          helperTextInvalid=\"Invalid hosts for this ServiceEntry. Enter one or hosts separated by comma.\"\n          isValid={this.state.validHosts}\n        >\n          <TextInput\n            value={this.state.serviceEntry.hosts?.join(',')}\n            isRequired={true}\n            type=\"text\"\n            id=\"hosts\"\n            aria-describedby=\"hosts\"\n            name=\"hosts\"\n            onChange={this.onAddHosts}\n            isValid={this.state.validHosts}\n          />\n        </FormGroup>\n        <FormGroup label=\"Location\" isRequired={true} fieldId=\"location\">\n          <FormSelect\n            value={this.state.serviceEntry.location}\n            id=\"location\"\n            name=\"location\"\n            onChange={this.onAddLocation}\n          >\n            {location.map((option, index) => (\n              <FormSelectOption isDisabled={false} key={'p' + index} value={option} label={option} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label=\"Ports\" fieldId=\"ports\">\n          <Table\n            aria-label=\"Ports\"\n            cells={headerCells}\n            rows={this.rows()}\n            // @ts-ignore\n            actionResolver={this.actionResolver}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {(!this.state.serviceEntry.ports || this.state.serviceEntry.ports.length === 0) && (\n            <div className={noPortsStyle}>ServiceEntry has no Ports defined</div>\n          )}\n        </FormGroup>\n        <FormGroup label=\"Resolution\" isRequired={true} fieldId=\"resolution\">\n          <FormSelect\n            value={this.state.serviceEntry.resolution}\n            id=\"resolution\"\n            name=\"resolution\"\n            onChange={this.onAddResolution}\n          >\n            {resolution.map((option, index) => (\n              <FormSelectOption isDisabled={false} key={'p' + index} value={option} label={option} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n      </>\n    );\n  }\n}\n\nexport default ServiceEntryForm;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/Refresh/Refresh.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { refreshIntervalSelector } from '../../store/Selectors';\nimport { config } from '../../config';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\nimport RefreshButtonContainer from './RefreshButton';\nimport { GlobalActions } from '../../actions/GlobalActions';\nimport { HistoryManager, URLParam } from 'app/History';\nvar REFRESH_INTERVALS = config.toolbar.refreshInterval;\n\nvar Refresh = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Refresh, _React$PureComponent);\n\n  var _super = _createSuper(Refresh);\n\n  function Refresh(props) {\n    var _this;\n\n    _classCallCheck(this, Refresh);\n\n    _this = _super.call(this, props); // Let URL override current redux state at construction time\n\n    _this.updateRefresher = function () {\n      if (_this.state.refresherRef) {\n        clearInterval(_this.state.refresherRef);\n      }\n\n      var refresherRef = undefined;\n\n      if (_this.props.refreshInterval > 0) {\n        refresherRef = window.setInterval(_this.handleRefresh, _this.props.refreshInterval);\n\n        _this.setState({\n          refresherRef: refresherRef\n        });\n      }\n    };\n\n    _this.updateRefreshInterval = function (refreshInterval) {\n      _this.props.setRefreshInterval(refreshInterval); // notify redux of the change\n\n    };\n\n    _this.handleRefresh = function () {\n      _this.props.setLastRefreshAt(Date.now()); // Components may connect to the lastRefreshAt property instead to pass a refreshMethod\n\n\n      if (_this.props.handleRefresh) {\n        _this.props.handleRefresh();\n      }\n    };\n\n    if (props.manageURL) {\n      var _refreshInterval = HistoryManager.getNumericParam(URLParam.REFRESH_INTERVAL);\n\n      if (_refreshInterval === undefined) {\n        _refreshInterval = props.refreshInterval;\n      }\n\n      if (_refreshInterval !== props.refreshInterval) {\n        props.setRefreshInterval(_refreshInterval);\n      }\n\n      HistoryManager.setParam(URLParam.REFRESH_INTERVAL, String(_refreshInterval));\n    }\n\n    _this.state = {\n      refresherRef: undefined\n    };\n    return _this;\n  }\n\n  _createClass(Refresh, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateRefresher();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // ensure redux state and URL are aligned\n      if (this.props.manageURL) {\n        HistoryManager.setParam(URLParam.REFRESH_INTERVAL, String(this.props.refreshInterval));\n      }\n\n      if (prevProps.refreshInterval !== this.props.refreshInterval) {\n        this.updateRefresher();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.refresherRef) {\n        clearInterval(this.state.refresherRef);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.props.refreshInterval !== undefined) {\n        var hideLabel = this.props.hideLabel;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, !hideLabel && /*#__PURE__*/React.createElement(\"label\", {\n          style: {\n            paddingRight: '0.5em',\n            marginLeft: '1.5em'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 26\n          }\n        }, \"Refreshing\"), /*#__PURE__*/React.createElement(ToolbarDropdown, {\n          id: this.props.id,\n          handleSelect: function handleSelect(value) {\n            return _this2.updateRefreshInterval(Number(value));\n          },\n          value: String(this.props.refreshInterval),\n          label: REFRESH_INTERVALS[this.props.refreshInterval],\n          options: REFRESH_INTERVALS,\n          tooltip: 'Refresh interval',\n          tooltipBottom: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(RefreshButtonContainer, {\n          handleRefresh: this.handleRefresh,\n          disabled: this.props.disabled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(RefreshButtonContainer, {\n          handleRefresh: this.handleRefresh,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return Refresh;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    refreshInterval: refreshIntervalSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setRefreshInterval: function setRefreshInterval(refresh) {\n      dispatch(UserSettingsActions.setRefreshInterval(refresh));\n    },\n    setLastRefreshAt: function setLastRefreshAt(lastRefreshAt) {\n      dispatch(GlobalActions.setLastRefreshAt(lastRefreshAt));\n    }\n  };\n};\n\nvar RefreshContainer = connect(mapStateToProps, mapDispatchToProps)(Refresh);\nexport default RefreshContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/components/Refresh/Refresh.tsx"],"names":["React","connect","refreshIntervalSelector","config","UserSettingsActions","ToolbarDropdown","RefreshButtonContainer","GlobalActions","HistoryManager","URLParam","REFRESH_INTERVALS","toolbar","refreshInterval","Refresh","props","updateRefresher","state","refresherRef","clearInterval","undefined","window","setInterval","handleRefresh","setState","updateRefreshInterval","setRefreshInterval","setLastRefreshAt","Date","now","manageURL","getNumericParam","REFRESH_INTERVAL","setParam","String","prevProps","hideLabel","paddingRight","marginLeft","id","value","Number","disabled","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","refresh","lastRefreshAt","RefreshContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppState } from '../../store/Store';\nimport { refreshIntervalSelector } from '../../store/Selectors';\nimport { config } from '../../config';\nimport { IntervalInMilliseconds, TimeInMilliseconds } from '../../types/Common';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\nimport RefreshButtonContainer from './RefreshButton';\nimport { GlobalActions } from '../../actions/GlobalActions';\nimport { HistoryManager, URLParam } from 'app/History';\n\ntype ReduxProps = {\n  refreshInterval: IntervalInMilliseconds;\n  setRefreshInterval: (refreshInterval: IntervalInMilliseconds) => void;\n  setLastRefreshAt: (lastRefreshAt: TimeInMilliseconds) => void;\n};\n\ntype ComponentProps = {\n  id: string;\n  disabled?: boolean;\n  hideLabel?: boolean;\n  manageURL?: boolean;\n\n  handleRefresh?: () => void;\n};\n\ntype Props = ComponentProps & ReduxProps;\n\ntype State = {\n  refresherRef?: number;\n};\n\nconst REFRESH_INTERVALS = config.toolbar.refreshInterval;\n\nclass Refresh extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    // Let URL override current redux state at construction time\n    if (props.manageURL) {\n      let refreshInterval = HistoryManager.getNumericParam(URLParam.REFRESH_INTERVAL);\n      if (refreshInterval === undefined) {\n        refreshInterval = props.refreshInterval;\n      }\n      if (refreshInterval !== props.refreshInterval) {\n        props.setRefreshInterval(refreshInterval);\n      }\n      HistoryManager.setParam(URLParam.REFRESH_INTERVAL, String(refreshInterval));\n    }\n\n    this.state = {\n      refresherRef: undefined\n    };\n  }\n\n  componentDidMount() {\n    this.updateRefresher();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    // ensure redux state and URL are aligned\n    if (this.props.manageURL) {\n      HistoryManager.setParam(URLParam.REFRESH_INTERVAL, String(this.props.refreshInterval));\n    }\n    if (prevProps.refreshInterval !== this.props.refreshInterval) {\n      this.updateRefresher();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.refresherRef) {\n      clearInterval(this.state.refresherRef);\n    }\n  }\n\n  render() {\n    if (this.props.refreshInterval !== undefined) {\n      const { hideLabel } = this.props;\n      return (\n        <>\n          {!hideLabel && <label style={{ paddingRight: '0.5em', marginLeft: '1.5em' }}>Refreshing</label>}\n          <ToolbarDropdown\n            id={this.props.id}\n            handleSelect={value => this.updateRefreshInterval(Number(value))}\n            value={String(this.props.refreshInterval)}\n            label={REFRESH_INTERVALS[this.props.refreshInterval]}\n            options={REFRESH_INTERVALS}\n            tooltip={'Refresh interval'}\n            tooltipBottom={true}\n          />\n          <RefreshButtonContainer handleRefresh={this.handleRefresh} disabled={this.props.disabled} />\n        </>\n      );\n    } else {\n      return <RefreshButtonContainer handleRefresh={this.handleRefresh} />;\n    }\n  }\n\n  private updateRefresher = () => {\n    if (this.state.refresherRef) {\n      clearInterval(this.state.refresherRef);\n    }\n    let refresherRef: number | undefined = undefined;\n    if (this.props.refreshInterval > 0) {\n      refresherRef = window.setInterval(this.handleRefresh, this.props.refreshInterval);\n      this.setState({ refresherRef: refresherRef });\n    }\n  };\n\n  private updateRefreshInterval = (refreshInterval: IntervalInMilliseconds) => {\n    this.props.setRefreshInterval(refreshInterval); // notify redux of the change\n  };\n\n  private handleRefresh = () => {\n    this.props.setLastRefreshAt(Date.now());\n    // Components may connect to the lastRefreshAt property instead to pass a refreshMethod\n    if (this.props.handleRefresh) {\n      this.props.handleRefresh();\n    }\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  refreshInterval: refreshIntervalSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setRefreshInterval: (refresh: IntervalInMilliseconds) => {\n      dispatch(UserSettingsActions.setRefreshInterval(refresh));\n    },\n    setLastRefreshAt: (lastRefreshAt: TimeInMilliseconds) => {\n      dispatch(GlobalActions.setLastRefreshAt(lastRefreshAt));\n    }\n  };\n};\n\nconst RefreshContainer = connect(mapStateToProps, mapDispatchToProps)(Refresh);\n\nexport default RefreshContainer;\n"]},"metadata":{},"sourceType":"module"}
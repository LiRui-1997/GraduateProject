{"ast":null,"code":"import { MessageCenterActions } from './MessageCenterActions';\nvar MessageCenterThunkActions = {\n  toggleMessageCenter: function toggleMessageCenter() {\n    return function (dispatch, getState) {\n      var state = getState();\n\n      if (state.messageCenter.hidden) {\n        dispatch(MessageCenterActions.showMessageCenter());\n        dispatch(MessageCenterActions.expandGroup('default'));\n      } else {\n        dispatch(MessageCenterActions.hideMessageCenter());\n      }\n\n      return Promise.resolve();\n    };\n  },\n  toggleSystemErrorsCenter: function toggleSystemErrorsCenter() {\n    return function (dispatch, getState) {\n      var state = getState();\n\n      if (state.messageCenter.hidden) {\n        dispatch(MessageCenterActions.showMessageCenter());\n        dispatch(MessageCenterActions.expandGroup('systemErrors'));\n      } else {\n        dispatch(MessageCenterActions.hideMessageCenter());\n      }\n\n      return Promise.resolve();\n    };\n  },\n  markGroupAsRead: function markGroupAsRead(groupId) {\n    return function (dispatch, getState) {\n      var state = getState();\n      var foundGroup = state.messageCenter.groups.find(function (group) {\n        return group.id === groupId;\n      });\n\n      if (foundGroup) {\n        dispatch(MessageCenterActions.markAsRead(foundGroup.messages.map(function (message) {\n          return message.id;\n        })));\n      }\n\n      return Promise.resolve();\n    };\n  },\n  clearGroup: function clearGroup(groupId) {\n    return function (dispatch, getState) {\n      var state = getState();\n      var foundGroup = state.messageCenter.groups.find(function (group) {\n        return group.id === groupId;\n      });\n\n      if (foundGroup) {\n        dispatch(MessageCenterActions.removeMessage(foundGroup.messages.map(function (message) {\n          return message.id;\n        })));\n      }\n\n      return Promise.resolve();\n    };\n  }\n};\nexport default MessageCenterThunkActions;","map":{"version":3,"sources":["/root/GraduateProject/src/actions/MessageCenterThunkActions.ts"],"names":["MessageCenterActions","MessageCenterThunkActions","toggleMessageCenter","dispatch","getState","state","messageCenter","hidden","showMessageCenter","expandGroup","hideMessageCenter","Promise","resolve","toggleSystemErrorsCenter","markGroupAsRead","groupId","foundGroup","groups","find","group","id","markAsRead","messages","map","message","clearGroup","removeMessage"],"mappings":"AAEA,SAASA,oBAAT,QAAqC,wBAArC;AAGA,IAAMC,yBAAyB,GAAG;AAChCC,EAAAA,mBAAmB,EAAE,+BAAM;AACzB,WAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,UAAIC,KAAK,CAACC,aAAN,CAAoBC,MAAxB,EAAgC;AAC9BJ,QAAAA,QAAQ,CAACH,oBAAoB,CAACQ,iBAArB,EAAD,CAAR;AACAL,QAAAA,QAAQ,CAACH,oBAAoB,CAACS,WAArB,CAAiC,SAAjC,CAAD,CAAR;AACD,OAHD,MAGO;AACLN,QAAAA,QAAQ,CAACH,oBAAoB,CAACU,iBAArB,EAAD,CAAR;AACD;;AACD,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD,KATD;AAUD,GAZ+B;AAahCC,EAAAA,wBAAwB,EAAE,oCAAM;AAC9B,WAAO,UAACV,QAAD,EAAWC,QAAX,EAAwB;AAC7B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,UAAIC,KAAK,CAACC,aAAN,CAAoBC,MAAxB,EAAgC;AAC9BJ,QAAAA,QAAQ,CAACH,oBAAoB,CAACQ,iBAArB,EAAD,CAAR;AACAL,QAAAA,QAAQ,CAACH,oBAAoB,CAACS,WAArB,CAAiC,cAAjC,CAAD,CAAR;AACD,OAHD,MAGO;AACLN,QAAAA,QAAQ,CAACH,oBAAoB,CAACU,iBAArB,EAAD,CAAR;AACD;;AACD,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD,KATD;AAUD,GAxB+B;AAyBhCE,EAAAA,eAAe,EAAE,yBAACC,OAAD,EAAqB;AACpC,WAAO,UAACZ,QAAD,EAAWC,QAAX,EAAwB;AAC7B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAMY,UAAU,GAAGX,KAAK,CAACC,aAAN,CAAoBW,MAApB,CAA2BC,IAA3B,CAAgC,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,EAAN,KAAaL,OAAjB;AAAA,OAArC,CAAnB;;AACA,UAAIC,UAAJ,EAAgB;AACdb,QAAAA,QAAQ,CAACH,oBAAoB,CAACqB,UAArB,CAAgCL,UAAU,CAACM,QAAX,CAAoBC,GAApB,CAAwB,UAAAC,OAAO;AAAA,iBAAIA,OAAO,CAACJ,EAAZ;AAAA,SAA/B,CAAhC,CAAD,CAAR;AACD;;AACD,aAAOT,OAAO,CAACC,OAAR,EAAP;AACD,KAPD;AAQD,GAlC+B;AAmChCa,EAAAA,UAAU,EAAE,oBAACV,OAAD,EAAqB;AAC/B,WAAO,UAACZ,QAAD,EAA+DC,QAA/D,EAAiG;AACtG,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAMY,UAAU,GAAGX,KAAK,CAACC,aAAN,CAAoBW,MAApB,CAA2BC,IAA3B,CAAgC,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,EAAN,KAAaL,OAAjB;AAAA,OAArC,CAAnB;;AACA,UAAIC,UAAJ,EAAgB;AACdb,QAAAA,QAAQ,CAACH,oBAAoB,CAAC0B,aAArB,CAAmCV,UAAU,CAACM,QAAX,CAAoBC,GAApB,CAAwB,UAAAC,OAAO;AAAA,iBAAIA,OAAO,CAACJ,EAAZ;AAAA,SAA/B,CAAnC,CAAD,CAAR;AACD;;AACD,aAAOT,OAAO,CAACC,OAAR,EAAP;AACD,KAPD;AAQD;AA5C+B,CAAlC;AA+CA,eAAeX,yBAAf","sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from './KialiAppAction';\nimport { MessageCenterActions } from './MessageCenterActions';\nimport { KialiAppState } from '../store/Store';\n\nconst MessageCenterThunkActions = {\n  toggleMessageCenter: () => {\n    return (dispatch, getState) => {\n      const state = getState();\n      if (state.messageCenter.hidden) {\n        dispatch(MessageCenterActions.showMessageCenter());\n        dispatch(MessageCenterActions.expandGroup('default'));\n      } else {\n        dispatch(MessageCenterActions.hideMessageCenter());\n      }\n      return Promise.resolve();\n    };\n  },\n  toggleSystemErrorsCenter: () => {\n    return (dispatch, getState) => {\n      const state = getState();\n      if (state.messageCenter.hidden) {\n        dispatch(MessageCenterActions.showMessageCenter());\n        dispatch(MessageCenterActions.expandGroup('systemErrors'));\n      } else {\n        dispatch(MessageCenterActions.hideMessageCenter());\n      }\n      return Promise.resolve();\n    };\n  },\n  markGroupAsRead: (groupId: string) => {\n    return (dispatch, getState) => {\n      const state = getState();\n      const foundGroup = state.messageCenter.groups.find(group => group.id === groupId);\n      if (foundGroup) {\n        dispatch(MessageCenterActions.markAsRead(foundGroup.messages.map(message => message.id)));\n      }\n      return Promise.resolve();\n    };\n  },\n  clearGroup: (groupId: string) => {\n    return (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>, getState: () => KialiAppState) => {\n      const state = getState();\n      const foundGroup = state.messageCenter.groups.find(group => group.id === groupId);\n      if (foundGroup) {\n        dispatch(MessageCenterActions.removeMessage(foundGroup.messages.map(message => message.id)));\n      }\n      return Promise.resolve();\n    };\n  }\n};\n\nexport default MessageCenterThunkActions;\n"]},"metadata":{},"sourceType":"module"}
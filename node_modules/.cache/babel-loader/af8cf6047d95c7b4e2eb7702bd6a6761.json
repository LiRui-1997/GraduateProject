{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/Overview/OverviewToolbar.tsx\";\nimport * as React from 'react';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { ListIcon, ThIcon, ThLargeIcon } from '@patternfly/react-icons';\nimport { SortAlphaDownIcon, SortAlphaUpIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { HistoryManager, URLParam } from '../../app/History';\nimport { StatefulFilters } from '../../components/Filters/StatefulFilters';\nimport * as FilterHelper from '../../components/FilterList/FilterHelper';\nimport { ToolbarDropdown } from '../../components/ToolbarDropdown/ToolbarDropdown';\nimport { durationSelector, refreshIntervalSelector } from '../../store/Selectors';\nimport { ThinStyle } from '../../components/Filters/FilterStyles';\nimport * as Sorts from './Sorts';\nimport * as Filters from './Filters';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport TimeDurationContainer from '../../components/Time/TimeDurationComponent';\nexport var OverviewDisplayMode;\n\n(function (OverviewDisplayMode) {\n  OverviewDisplayMode[OverviewDisplayMode[\"COMPACT\"] = 0] = \"COMPACT\";\n  OverviewDisplayMode[OverviewDisplayMode[\"EXPAND\"] = 1] = \"EXPAND\";\n  OverviewDisplayMode[OverviewDisplayMode[\"LIST\"] = 2] = \"LIST\";\n})(OverviewDisplayMode || (OverviewDisplayMode = {}));\n\nvar overviewTypes = {\n  app: 'Apps',\n  workload: 'Workloads',\n  service: 'Services'\n}; // TODO Use Object.fromEntries when available\n\nvar sortTypes = function () {\n  var o = {};\n  Sorts.sortFields.forEach(function (sortType) {\n    var id = sortType.id;\n    Object.assign(o, _defineProperty({}, id, sortType.title));\n  });\n  return o;\n}();\n\nvar containerPadding = style({\n  backgroundColor: PFColors.White,\n  padding: '0px 20px 0px 20px'\n});\nvar containerFlex = style({\n  display: 'flex',\n  flexWrap: 'wrap'\n});\nvar filterToolbarStyle = style({\n  paddingTop: '10px'\n});\nvar rightToolbarStyle = style({\n  marginLeft: 'auto',\n  height: '118px',\n  padding: '10px 0px 0px 0px'\n});\nvar timeToolbarStyle = style({\n  textAlign: 'right'\n});\nvar actionsToolbarStyle = style({\n  paddingTop: '17px'\n});\nexport var OverviewToolbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(OverviewToolbar, _React$Component);\n\n  var _super = _createSuper(OverviewToolbar);\n\n  function OverviewToolbar(props) {\n    var _this;\n\n    _classCallCheck(this, OverviewToolbar);\n\n    _this = _super.call(this, props);\n\n    _this.updateSortField = function (sortField) {\n      _this.props.sort(sortField, _this.state.isSortAscending);\n\n      HistoryManager.setParam(URLParam.SORT, sortField.param);\n\n      _this.setState({\n        sortField: sortField\n      });\n    };\n\n    _this.updateSortDirection = function () {\n      var newDir = !_this.state.isSortAscending;\n\n      _this.props.sort(_this.state.sortField, newDir);\n\n      HistoryManager.setParam(URLParam.DIRECTION, newDir ? 'asc' : 'desc');\n\n      _this.setState({\n        isSortAscending: newDir\n      });\n    };\n\n    _this.updateOverviewType = function (otype) {\n      var isOverviewType = function isOverviewType(val) {\n        return val === 'app' || val === 'workload' || val === 'service';\n      };\n\n      if (isOverviewType(otype)) {\n        HistoryManager.setParam(URLParam.OVERVIEW_TYPE, otype);\n\n        _this.setState({\n          overviewType: otype\n        });\n\n        _this.props.onRefresh();\n      } else {\n        throw new Error('Overview type is not valid.');\n      }\n    };\n\n    _this.changeSortField = function (value) {\n      var sortField = Sorts.sortFields.filter(function (sort) {\n        return sort.id === value;\n      })[0];\n\n      _this.props.sort(sortField, _this.state.isSortAscending);\n\n      HistoryManager.setParam(URLParam.SORT, sortField.param);\n\n      _this.setState({\n        sortField: sortField\n      });\n    };\n\n    _this.state = {\n      isSortAscending: FilterHelper.isCurrentSortAscending(),\n      overviewType: OverviewToolbar.currentOverviewType(),\n      sortField: FilterHelper.currentSortField(Sorts.sortFields)\n    };\n    return _this;\n  }\n\n  _createClass(OverviewToolbar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var urlSortField = FilterHelper.currentSortField(Sorts.sortFields);\n      var urlIsSortAscending = FilterHelper.isCurrentSortAscending();\n\n      if (!this.paramsAreSynced(urlSortField, urlIsSortAscending)) {\n        this.setState({\n          sortField: urlSortField,\n          isSortAscending: urlIsSortAscending\n        });\n      }\n    }\n  }, {\n    key: \"paramsAreSynced\",\n    value: function paramsAreSynced(urlSortField, urlIsSortAscending) {\n      return urlIsSortAscending === this.state.isSortAscending && urlSortField.title === this.state.sortField.title;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var filterToolbar = /*#__PURE__*/React.createElement(StatefulFilters, {\n        initialFilters: Filters.availableFilters,\n        onFilterChange: this.props.onRefresh,\n        ref: this.props.statefulFilterRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 7\n        }\n      }, this.props.displayMode !== OverviewDisplayMode.LIST && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: \"sort_selector\",\n        handleSelect: this.changeSortField,\n        value: this.state.sortField.id,\n        label: sortTypes[this.state.overviewType],\n        options: sortTypes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"plain\",\n        onClick: this.updateSortDirection,\n        style: _objectSpread({}, ThinStyle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      }, this.state.isSortAscending ? /*#__PURE__*/React.createElement(SortAlphaDownIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(SortAlphaUpIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 69\n        }\n      }))));\n      var timeToolbar = /*#__PURE__*/React.createElement(\"div\", {\n        className: timeToolbarStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TimeDurationContainer, {\n        key: \"overview-time-range\",\n        id: \"overview-time-range\",\n        disabled: false,\n        handleRefresh: this.props.onRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }));\n      var actionsToolbar = /*#__PURE__*/React.createElement(\"div\", {\n        className: actionsToolbarStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: \"overview-type\",\n        disabled: false,\n        handleSelect: this.updateOverviewType,\n        nameDropdown: \"Health for\",\n        value: this.state.overviewType,\n        label: overviewTypes[this.state.overviewType],\n        options: overviewTypes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"Expand view\"),\n        position: TooltipPosition.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.props.setDisplayMode(OverviewDisplayMode.EXPAND);\n        },\n        variant: \"plain\",\n        isActive: this.props.displayMode === OverviewDisplayMode.EXPAND,\n        style: {\n          padding: '0 4px 0 16px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ThLargeIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"Compact view\"),\n        position: TooltipPosition.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.props.setDisplayMode(OverviewDisplayMode.COMPACT);\n        },\n        variant: \"plain\",\n        isActive: this.props.displayMode === OverviewDisplayMode.COMPACT,\n        style: {\n          padding: '0 4px 0 4px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ThIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"List view\"),\n        position: TooltipPosition.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.props.setDisplayMode(OverviewDisplayMode.LIST);\n        },\n        variant: \"plain\",\n        isActive: this.props.displayMode === OverviewDisplayMode.LIST,\n        style: {\n          padding: '0 4px 0 4px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ListIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }\n      }))));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: containerPadding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: containerFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: filterToolbarStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }\n      }, filterToolbar), /*#__PURE__*/React.createElement(\"div\", {\n        className: rightToolbarStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }\n      }, timeToolbar, actionsToolbar)));\n    }\n  }], [{\n    key: \"currentOverviewType\",\n    value: function currentOverviewType() {\n      var otype = HistoryManager.getParam(URLParam.OVERVIEW_TYPE);\n      return otype || 'app';\n    }\n  }]);\n\n  return OverviewToolbar;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    duration: durationSelector(state),\n    refreshInterval: refreshIntervalSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setRefreshInterval: function setRefreshInterval(refreshInterval) {\n      dispatch(UserSettingsActions.setRefreshInterval(refreshInterval));\n    }\n  };\n};\n\nvar OverviewToolbarContainer = connect(mapStateToProps, mapDispatchToProps)(OverviewToolbar);\nexport default OverviewToolbarContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Overview/OverviewToolbar.tsx"],"names":["React","Button","Tooltip","TooltipPosition","ListIcon","ThIcon","ThLargeIcon","SortAlphaDownIcon","SortAlphaUpIcon","connect","UserSettingsActions","HistoryManager","URLParam","StatefulFilters","FilterHelper","ToolbarDropdown","durationSelector","refreshIntervalSelector","ThinStyle","Sorts","Filters","style","PFColors","TimeDurationContainer","OverviewDisplayMode","overviewTypes","app","workload","service","sortTypes","o","sortFields","forEach","sortType","id","Object","assign","title","containerPadding","backgroundColor","White","padding","containerFlex","display","flexWrap","filterToolbarStyle","paddingTop","rightToolbarStyle","marginLeft","height","timeToolbarStyle","textAlign","actionsToolbarStyle","OverviewToolbar","props","updateSortField","sortField","sort","state","isSortAscending","setParam","SORT","param","setState","updateSortDirection","newDir","DIRECTION","updateOverviewType","otype","isOverviewType","val","OVERVIEW_TYPE","overviewType","onRefresh","Error","changeSortField","value","filter","isCurrentSortAscending","currentOverviewType","currentSortField","urlSortField","urlIsSortAscending","paramsAreSynced","filterToolbar","availableFilters","statefulFilterRef","displayMode","LIST","timeToolbar","actionsToolbar","top","setDisplayMode","EXPAND","COMPACT","getParam","Component","mapStateToProps","duration","refreshInterval","mapDispatchToProps","dispatch","setRefreshInterval","OverviewToolbarContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { ListIcon, ThIcon, ThLargeIcon } from '@patternfly/react-icons';\nimport { SortAlphaDownIcon, SortAlphaUpIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport { UserSettingsActions } from '../../actions/UserSettingsActions';\nimport { HistoryManager, URLParam } from '../../app/History';\nimport { StatefulFilters } from '../../components/Filters/StatefulFilters';\nimport * as FilterHelper from '../../components/FilterList/FilterHelper';\nimport { ToolbarDropdown } from '../../components/ToolbarDropdown/ToolbarDropdown';\nimport { KialiAppState } from '../../store/Store';\nimport { durationSelector, refreshIntervalSelector } from '../../store/Selectors';\nimport { IntervalInMilliseconds, DurationInSeconds } from '../../types/Common';\nimport { SortField } from '../../types/SortFilters';\nimport NamespaceInfo from './NamespaceInfo';\nimport { ThinStyle } from '../../components/Filters/FilterStyles';\nimport * as Sorts from './Sorts';\nimport * as Filters from './Filters';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport TimeDurationContainer from '../../components/Time/TimeDurationComponent';\n\ntype ReduxProps = {\n  duration: DurationInSeconds;\n  refreshInterval: IntervalInMilliseconds;\n  setRefreshInterval: (refresh: IntervalInMilliseconds) => void;\n};\n\ntype Props = ReduxProps & {\n  onError: (msg: string) => void;\n  onRefresh: () => void;\n  sort: (sortField: SortField<NamespaceInfo>, isAscending: boolean) => void;\n  displayMode: OverviewDisplayMode;\n  setDisplayMode: (mode: OverviewDisplayMode) => void;\n  statefulFilterRef: React.RefObject<StatefulFilters>;\n};\n\nexport enum OverviewDisplayMode {\n  COMPACT,\n  EXPAND,\n  LIST\n}\n\nconst overviewTypes = {\n  app: 'Apps',\n  workload: 'Workloads',\n  service: 'Services'\n};\n\n// TODO Use Object.fromEntries when available\nconst sortTypes = (function () {\n  let o = {};\n  Sorts.sortFields.forEach(sortType => {\n    let id: string = sortType.id;\n    Object.assign(o, { [id]: sortType.title });\n  });\n  return o;\n})();\n\nconst containerPadding = style({\n  backgroundColor: PFColors.White,\n  padding: '0px 20px 0px 20px'\n});\n\nconst containerFlex = style({\n  display: 'flex',\n  flexWrap: 'wrap'\n});\n\nconst filterToolbarStyle = style({\n  paddingTop: '10px'\n});\n\nconst rightToolbarStyle = style({\n  marginLeft: 'auto',\n  height: '118px',\n  padding: '10px 0px 0px 0px'\n});\n\nconst timeToolbarStyle = style({\n  textAlign: 'right'\n});\n\nconst actionsToolbarStyle = style({\n  paddingTop: '17px'\n});\n\nexport type OverviewType = keyof typeof overviewTypes;\n\ntype State = {\n  isSortAscending: boolean;\n  overviewType: OverviewType;\n  sortField: SortField<NamespaceInfo>;\n};\n\nexport class OverviewToolbar extends React.Component<Props, State> {\n  static currentOverviewType(): OverviewType {\n    const otype = HistoryManager.getParam(URLParam.OVERVIEW_TYPE);\n    return (otype as OverviewType) || 'app';\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isSortAscending: FilterHelper.isCurrentSortAscending(),\n      overviewType: OverviewToolbar.currentOverviewType(),\n      sortField: FilterHelper.currentSortField(Sorts.sortFields)\n    };\n  }\n\n  componentDidUpdate() {\n    const urlSortField = FilterHelper.currentSortField(Sorts.sortFields);\n    const urlIsSortAscending = FilterHelper.isCurrentSortAscending();\n    if (!this.paramsAreSynced(urlSortField, urlIsSortAscending)) {\n      this.setState({\n        sortField: urlSortField,\n        isSortAscending: urlIsSortAscending\n      });\n    }\n  }\n\n  paramsAreSynced(urlSortField: SortField<NamespaceInfo>, urlIsSortAscending: boolean) {\n    return urlIsSortAscending === this.state.isSortAscending && urlSortField.title === this.state.sortField.title;\n  }\n\n  updateSortField = (sortField: SortField<NamespaceInfo>) => {\n    this.props.sort(sortField, this.state.isSortAscending);\n    HistoryManager.setParam(URLParam.SORT, sortField.param);\n    this.setState({ sortField: sortField });\n  };\n\n  updateSortDirection = () => {\n    const newDir = !this.state.isSortAscending;\n    this.props.sort(this.state.sortField, newDir);\n    HistoryManager.setParam(URLParam.DIRECTION, newDir ? 'asc' : 'desc');\n    this.setState({ isSortAscending: newDir });\n  };\n\n  updateOverviewType = (otype: String) => {\n    const isOverviewType = (val: String): val is OverviewType =>\n      val === 'app' || val === 'workload' || val === 'service';\n\n    if (isOverviewType(otype)) {\n      HistoryManager.setParam(URLParam.OVERVIEW_TYPE, otype);\n      this.setState({ overviewType: otype });\n      this.props.onRefresh();\n    } else {\n      throw new Error('Overview type is not valid.');\n    }\n  };\n\n  changeSortField = value => {\n    const sortField: SortField<NamespaceInfo> = Sorts.sortFields.filter(sort => sort.id === value)[0];\n    this.props.sort(sortField, this.state.isSortAscending);\n    HistoryManager.setParam(URLParam.SORT, sortField.param);\n    this.setState({ sortField: sortField });\n  };\n\n  render() {\n    const filterToolbar = (\n      <StatefulFilters\n        initialFilters={Filters.availableFilters}\n        onFilterChange={this.props.onRefresh}\n        ref={this.props.statefulFilterRef}\n      >\n        {this.props.displayMode !== OverviewDisplayMode.LIST && (\n          <>\n            <ToolbarDropdown\n              id=\"sort_selector\"\n              handleSelect={this.changeSortField}\n              value={this.state.sortField.id}\n              label={sortTypes[this.state.overviewType]}\n              options={sortTypes}\n            />\n            <Button variant=\"plain\" onClick={this.updateSortDirection} style={{ ...ThinStyle }}>\n              {this.state.isSortAscending ? <SortAlphaDownIcon /> : <SortAlphaUpIcon />}\n            </Button>\n          </>\n        )}\n      </StatefulFilters>\n    );\n    const timeToolbar = (\n      <div className={timeToolbarStyle}>\n        <TimeDurationContainer\n          key=\"overview-time-range\"\n          id=\"overview-time-range\"\n          disabled={false}\n          handleRefresh={this.props.onRefresh}\n        />\n      </div>\n    );\n    const actionsToolbar = (\n      <div className={actionsToolbarStyle}>\n        <ToolbarDropdown\n          id=\"overview-type\"\n          disabled={false}\n          handleSelect={this.updateOverviewType}\n          nameDropdown=\"Health for\"\n          value={this.state.overviewType}\n          label={overviewTypes[this.state.overviewType]}\n          options={overviewTypes}\n        />\n        <Tooltip content={<>Expand view</>} position={TooltipPosition.top}>\n          <Button\n            onClick={() => this.props.setDisplayMode(OverviewDisplayMode.EXPAND)}\n            variant=\"plain\"\n            isActive={this.props.displayMode === OverviewDisplayMode.EXPAND}\n            style={{ padding: '0 4px 0 16px' }}\n          >\n            <ThLargeIcon />\n          </Button>\n        </Tooltip>\n        <Tooltip content={<>Compact view</>} position={TooltipPosition.top}>\n          <Button\n            onClick={() => this.props.setDisplayMode(OverviewDisplayMode.COMPACT)}\n            variant=\"plain\"\n            isActive={this.props.displayMode === OverviewDisplayMode.COMPACT}\n            style={{ padding: '0 4px 0 4px' }}\n          >\n            <ThIcon />\n          </Button>\n        </Tooltip>\n        <Tooltip content={<>List view</>} position={TooltipPosition.top}>\n          <Button\n            onClick={() => this.props.setDisplayMode(OverviewDisplayMode.LIST)}\n            variant=\"plain\"\n            isActive={this.props.displayMode === OverviewDisplayMode.LIST}\n            style={{ padding: '0 4px 0 4px' }}\n          >\n            <ListIcon />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n    return (\n      <div className={containerPadding}>\n        <div className={containerFlex}>\n          <div className={filterToolbarStyle}>{filterToolbar}</div>\n          <div className={rightToolbarStyle}>\n            {timeToolbar}\n            {actionsToolbar}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  duration: durationSelector(state),\n  refreshInterval: refreshIntervalSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setRefreshInterval: (refreshInterval: IntervalInMilliseconds) => {\n      dispatch(UserSettingsActions.setRefreshInterval(refreshInterval));\n    }\n  };\n};\n\nconst OverviewToolbarContainer = connect(mapStateToProps, mapDispatchToProps)(OverviewToolbar);\n\nexport default OverviewToolbarContainer;\n"]},"metadata":{},"sourceType":"module"}
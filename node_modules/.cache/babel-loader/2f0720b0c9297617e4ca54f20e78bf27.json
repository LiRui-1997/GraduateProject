{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/Time/Replay.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { replayQueryTimeSelector, durationSelector } from 'store/Selectors';\nimport { Tooltip, ButtonVariant, Button, Text } from '@patternfly/react-core';\nimport ToolbarDropdown from 'components/ToolbarDropdown/ToolbarDropdown';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport Slider from 'components/IstioWizards/Slider/Slider';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { style } from 'typestyle';\nimport { toString } from './Utils';\nimport { serverConfig } from 'config';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { DateTimePicker } from './DateTimePicker';\nimport _ from 'lodash';\nimport history, { HistoryManager, URLParam } from 'app/History';\nexport var replayBorder = style({\n  borderLeft: \"solid 5px \".concat(PFColors.Replay)\n}); // key represents replay interval in milliseconds\n\nvar replayIntervals = {\n  60000: '1 minute',\n  300000: '5 minutes',\n  600000: '10 minutes',\n  1800000: '30 minutes'\n};\n\nvar replayLastIntervals = _.mapValues(replayIntervals, function (i) {\n  return \"Last \".concat(i);\n}); // key represents speed in milliseconds (i.e. how long to wait before refreshing-the-frame (fetching new data)\n\n\nvar replaySpeeds = [{\n  speed: 5000,\n  text: 'slow'\n}, {\n  speed: 3000,\n  text: 'medium'\n}, {\n  speed: 1000,\n  text: 'fast'\n}];\nvar defaultReplayInterval = 300000; // 5 minutes\n\nvar defaultReplaySpeed = 3000; // medium\n\nvar frameInterval = 10000; // clock advances 10s per frame\n\nvar controlStyle = style({\n  display: 'flex',\n  margin: '5px 0 0 15px'\n});\nvar controlButtonStyle = style({\n  margin: '-5px -5px 0 33%',\n  height: '37px'\n});\nvar controlIconStyle = style({\n  fontSize: '1.5em'\n});\nvar frameStyle = style({\n  margin: '2px 20px 0 0'\n});\nvar isCustomStyle = style({\n  height: '36px'\n});\nvar isCustomActiveStyle = style({\n  color: PFColors.Active\n});\nvar replayStyle = style({\n  display: 'flex',\n  width: '100%',\n  padding: '5px 5px 0 10px',\n  marginTop: '-5px'\n});\nvar sliderStyle = style({\n  width: '100%',\n  margin: '0 -10px 0 20px'\n});\nvar speedStyle = style({\n  height: '1.5em',\n  margin: '1px 5px 0 5px',\n  padding: '0 2px 2px 2px'\n});\nvar speedActiveStyle = style({\n  color: PFColors.ActiveText,\n  fontWeight: 'bolder'\n});\nvar vrStyle = style({\n  border: '1px inset',\n  height: '20px',\n  marginTop: '4px',\n  width: '1px'\n});\nexport var Replay = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Replay, _React$PureComponent);\n\n  var _super = _createSuper(Replay);\n\n  function Replay(props) {\n    var _this;\n\n    _classCallCheck(this, Replay);\n\n    _this = _super.call(this, props); // Let URL set initial state at construction time.\n    // Note, URLParam.GRAPH_REPLAY_START is only set for custom start times\n\n    _this.formatTooltip = function (val) {\n      var time = toString(Replay.frameToQueryTime(val, _this.state.replayWindow), {\n        second: '2-digit'\n      });\n      return \"\".concat(time, \" [\").concat(val, \"/\").concat(_this.state.replayFrameCount, \"]\");\n    };\n\n    _this.formatFrame = function (frame) {\n      var elapsedTime = frame * frameInterval;\n      var elapsedSec = Math.floor(elapsedTime / 1000 % 60);\n      var elapsedMin = Math.floor((elapsedTime / 1000 - elapsedSec) / 60);\n      var zeroPadSec = elapsedSec < 10 ? '0' : '';\n      var zeroPadMin = elapsedMin < 10 ? '0' : '';\n      var elapsed = \"\".concat(zeroPadMin).concat(elapsedMin, \":\").concat(zeroPadSec).concat(elapsedSec);\n      return elapsed;\n    };\n\n    _this.toggleCustomStartTime = function () {\n      _this.setState({\n        isCustomStartTime: !_this.state.isCustomStartTime\n      });\n    };\n\n    _this.onPickerChange = function (date) {\n      _this.setReplayStartTime(date.getTime());\n    };\n\n    _this.initReplay = function () {\n      var interval = !!_this.state.replayWindow.interval ? _this.state.replayWindow.interval : defaultReplayInterval;\n      var startTime = _this.state.isCustomStartTime ? _this.state.replayWindow.startTime : new Date().getTime() - interval;\n\n      _this.setState({\n        status: 'initialized'\n      });\n\n      _this.setReplayWindow({\n        interval: interval,\n        startTime: startTime\n      });\n    };\n\n    _this.setReplayStartTime = function (startTime) {\n      _this.setReplayWindow({\n        interval: _this.state.replayWindow.interval,\n        startTime: startTime\n      });\n    };\n\n    _this.setReplayInterval = function (interval) {\n      _this.setReplayWindow({\n        interval: interval,\n        startTime: _this.state.replayWindow.startTime\n      });\n    };\n\n    _this.setReplayWindow = function (replayWindow) {\n      // For simplicity/readability, round custom start times to the minute.\n      if (_this.state.isCustomStartTime) {\n        replayWindow.startTime = new Date(replayWindow.startTime).setSeconds(0, 0);\n      } // ensure redux state and URL are aligned\n\n\n      if (replayWindow.interval === defaultReplayInterval) {\n        HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_INTERVAL, true);\n      } else if (replayWindow.interval !== _this.state.replayWindow.interval) {\n        HistoryManager.setParam(URLParam.GRAPH_REPLAY_INTERVAL, String(replayWindow.interval));\n      }\n\n      if (!_this.state.isCustomStartTime || !replayWindow.startTime) {\n        HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_START, true);\n      } else if (replayWindow.startTime !== _this.state.replayWindow.startTime) {\n        HistoryManager.setParam(URLParam.GRAPH_REPLAY_START, String(replayWindow.startTime));\n      }\n\n      var frameCount = Replay.getFrameCount(replayWindow.interval);\n\n      _this.setState({\n        replayFrame: 0,\n        replayFrameCount: frameCount,\n        replayWindow: replayWindow\n      });\n    };\n\n    _this.setReplaySpeed = function (replaySpeed) {\n      _this.setState({\n        replaySpeed: replaySpeed\n      });\n    };\n\n    _this.done = function () {\n      _this.setState({\n        status: 'done'\n      });\n    };\n\n    _this.pause = function () {\n      _this.setState({\n        status: 'paused'\n      });\n    };\n\n    _this.play = function () {\n      var atEnd = _this.state.replayFrame >= _this.state.replayFrameCount;\n\n      _this.setState({\n        replayFrame: atEnd ? 0 : _this.state.replayFrame,\n        status: 'playing'\n      });\n    };\n\n    _this.setReplayFrame = function (frame) {\n      if (frame !== _this.state.replayFrame) {\n        var status = _this.state.status === 'initialized' ? 'initialized' : 'paused';\n        status = frame === _this.state.replayFrameCount ? 'done' : status;\n\n        _this.setState({\n          replayFrame: frame,\n          status: status\n        });\n      }\n    };\n\n    _this.updateRefresher = function () {\n      if (_this.state.refresherRef) {\n        clearInterval(_this.state.refresherRef);\n      }\n\n      if (_this.state.status !== 'playing' || !_this.state.replayWindow.interval) {\n        return;\n      }\n\n      var refresherRef = undefined;\n      refresherRef = window.setInterval(_this.handleRefresh, _this.state.replaySpeed);\n\n      _this.setState({\n        refresherRef: refresherRef\n      });\n    };\n\n    _this.handleRefresh = function () {\n      var nextFrame = _this.state.replayFrame + 1;\n\n      if (nextFrame > _this.state.replayFrameCount) {\n        _this.done();\n      } else {\n        _this.setState({\n          replayFrame: nextFrame\n        });\n\n        _this.props.setReplayQueryTime(Replay.frameToQueryTime(nextFrame, _this.state.replayWindow));\n      }\n    };\n\n    _this.speedButton = function (replaySpeed, isLast) {\n      var isActive = _this.state.replaySpeed === replaySpeed.speed;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        key: \"speed-\".concat(replaySpeed.text),\n        className: speedStyle,\n        variant: ButtonVariant.plain,\n        isActive: isActive,\n        onClick: function onClick() {\n          return _this.setReplaySpeed(replaySpeed.speed);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        className: isActive ? speedActiveStyle : undefined,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }\n      }, replaySpeed.text)), !isLast && /*#__PURE__*/React.createElement(\"div\", {\n        className: vrStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }\n      }));\n    };\n\n    var _interval = defaultReplayInterval;\n    var urlParams = new URLSearchParams(history.location.search);\n    var urlReplayInterval = HistoryManager.getParam(URLParam.GRAPH_REPLAY_INTERVAL, urlParams);\n\n    if (!!urlReplayInterval) {\n      _interval = Number(urlReplayInterval);\n    }\n\n    var _startTime = new Date().getTime() - _interval;\n\n    var isCustomStartTime = false;\n    var urlReplayStart = HistoryManager.getParam(URLParam.GRAPH_REPLAY_START, urlParams);\n\n    if (!!urlReplayStart) {\n      _startTime = Number(urlReplayStart);\n      isCustomStartTime = true;\n    }\n\n    _this.state = {\n      isCustomStartTime: isCustomStartTime,\n      refresherRef: undefined,\n      replayFrame: Replay.queryTimeToFrame(0, _startTime),\n      replayFrameCount: Replay.getFrameCount(_interval),\n      replaySpeed: defaultReplaySpeed,\n      replayWindow: {\n        interval: _interval,\n        startTime: _startTime\n      },\n      status: 'initialized'\n    };\n    return _this;\n  }\n\n  _createClass(Replay, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      var isCustomStartChange = this.state.isCustomStartTime !== prevState.isCustomStartTime;\n      var isIntervalChange = this.state.replayWindow.interval !== prevState.replayWindow.interval;\n\n      if (isCustomStartChange || isIntervalChange) {\n        this.initReplay();\n        return;\n      }\n\n      var refresherChange = this.state.status !== prevState.status;\n      refresherChange = refresherChange || this.state.replaySpeed !== prevState.replaySpeed;\n\n      if (refresherChange) {\n        this.updateRefresher();\n      }\n\n      if (this.state.status !== 'initialized') {\n        var frameQueryTime = Replay.frameToQueryTime(this.state.replayFrame, this.state.replayWindow);\n\n        if (frameQueryTime !== this.props.replayQueryTime) {\n          this.props.setReplayQueryTime(frameQueryTime);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_INTERVAL, true);\n      HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_START, true);\n\n      if (this.state.refresherRef) {\n        clearInterval(this.state.refresherRef);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.replayWindow.startTime) {\n        return null;\n      }\n\n      var selectedTime = new Date(this.state.replayWindow.startTime);\n      var endTime = selectedTime.getTime() + this.state.replayWindow.interval;\n      var endString = toString(endTime, {\n        month: undefined,\n        day: undefined,\n        second: '2-digit'\n      });\n      var ticks = Array.from(Array(this.state.replayFrameCount).keys());\n      var now = Date.now();\n      var maxTime = new Date(now - this.state.replayWindow.interval);\n      var minTime = new Date(now - (serverConfig.prometheus.storageTsdbRetention * 1000 + this.state.replayWindow.interval));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(replayStyle, \" \").concat(replayBorder),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 7\n        }\n      }, this.state.isCustomStartTime && /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"Replay start time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, {\n        injectTimes: [maxTime],\n        maxDate: maxTime,\n        maxTime: maxTime,\n        minDate: minTime,\n        minTime: minTime,\n        onChange: function onChange(date) {\n          return _this2.onPickerChange(date);\n        },\n        selected: selectedTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: 'replay-interval',\n        handleSelect: function handleSelect(key) {\n          return _this2.setReplayInterval(Number(key));\n        },\n        value: String(this.state.replayWindow.interval),\n        label: replayIntervals[this.state.replayWindow.interval],\n        options: this.state.isCustomStartTime ? replayIntervals : replayLastIntervals,\n        tooltip: \"Replay length\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"toggle-is-custom\",\n        position: \"top\",\n        content: \"Set \".concat(this.state.isCustomStartTime ? 'simple' : 'custom', \" start time\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: isCustomStyle,\n        variant: ButtonVariant.control,\n        onClick: this.toggleCustomStartTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.UserClock, {\n        className: this.state.isCustomStartTime ? \"\".concat(defaultIconStyle, \" \").concat(isCustomActiveStyle) : defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        className: sliderStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"replay-slider-div\" // see _Time.scss\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Slider, {\n        key: endString // on new endTime force new slider because of bug updating tick labels\n        ,\n        id: \"replay-slider\",\n        orientation: \"horizontal\",\n        min: 0,\n        max: this.state.replayFrameCount,\n        maxLimit: this.state.replayFrameCount,\n        step: 1,\n        value: this.state.replayFrame,\n        ticks: ticks,\n        tooltip: true,\n        tooltipFormatter: this.formatTooltip,\n        onSlideStop: this.setReplayFrame,\n        input: false,\n        locked: false,\n        showLock: false,\n        mirrored: false,\n        showMirror: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: controlStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, this.state.status === 'playing' ? /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"replay-pause\",\n        position: \"top\",\n        content: \"Pause\",\n        entryDelay: 1000,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: controlButtonStyle,\n        variant: ButtonVariant.link,\n        onClick: this.pause,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.PauseCircle, {\n        className: controlIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 19\n        }\n      }))) : /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"replay-play\",\n        position: \"top\",\n        content: this.state.status === 'done' ? 'Play again' : 'Play',\n        entryDelay: 1000,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: controlButtonStyle,\n        variant: ButtonVariant.link,\n        onClick: this.play,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.PlayCircle, {\n        className: controlIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Text, {\n        className: frameStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }\n      }, this.formatFrame(this.state.replayFrame)), replaySpeeds.map(function (s, i, a) {\n        return _this2.speedButton(s, i === a.length - 1);\n      }))));\n    }\n  }]);\n\n  return Replay;\n}(React.PureComponent);\n\nReplay.getFrameCount = function (elapsedTime) {\n  return elapsedTime > 0 ? Math.floor(elapsedTime / frameInterval) : 0;\n};\n\nReplay.queryTimeToFrame = function (replayQueryTime, replayStartTime) {\n  var elapsedTime = replayQueryTime - replayStartTime;\n  var frame = Replay.getFrameCount(elapsedTime);\n  return frame;\n};\n\nReplay.frameToQueryTime = function (frame, replayWindow) {\n  return replayWindow.startTime + frame * frameInterval;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    duration: durationSelector(state),\n    replayQueryTime: replayQueryTimeSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setReplayQueryTime: bindActionCreators(UserSettingsActions.setReplayQueryTime, dispatch),\n    toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n  };\n};\n\nvar ReplayContainer = connect(mapStateToProps, mapDispatchToProps)(Replay);\nexport default ReplayContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/components/Time/Replay.tsx"],"names":["React","connect","bindActionCreators","replayQueryTimeSelector","durationSelector","Tooltip","ButtonVariant","Button","Text","ToolbarDropdown","UserSettingsActions","Slider","KialiIcon","defaultIconStyle","style","toString","serverConfig","PFColors","DateTimePicker","_","history","HistoryManager","URLParam","replayBorder","borderLeft","Replay","replayIntervals","replayLastIntervals","mapValues","i","replaySpeeds","speed","text","defaultReplayInterval","defaultReplaySpeed","frameInterval","controlStyle","display","margin","controlButtonStyle","height","controlIconStyle","fontSize","frameStyle","isCustomStyle","isCustomActiveStyle","color","Active","replayStyle","width","padding","marginTop","sliderStyle","speedStyle","speedActiveStyle","ActiveText","fontWeight","vrStyle","border","props","formatTooltip","val","time","frameToQueryTime","state","replayWindow","second","replayFrameCount","formatFrame","frame","elapsedTime","elapsedSec","Math","floor","elapsedMin","zeroPadSec","zeroPadMin","elapsed","toggleCustomStartTime","setState","isCustomStartTime","onPickerChange","date","setReplayStartTime","getTime","initReplay","interval","startTime","Date","status","setReplayWindow","setReplayInterval","setSeconds","deleteParam","GRAPH_REPLAY_INTERVAL","setParam","String","GRAPH_REPLAY_START","frameCount","getFrameCount","replayFrame","setReplaySpeed","replaySpeed","done","pause","play","atEnd","setReplayFrame","updateRefresher","refresherRef","clearInterval","undefined","window","setInterval","handleRefresh","nextFrame","setReplayQueryTime","speedButton","isLast","isActive","plain","urlParams","URLSearchParams","location","search","urlReplayInterval","getParam","Number","urlReplayStart","queryTimeToFrame","_prevProps","prevState","isCustomStartChange","isIntervalChange","refresherChange","frameQueryTime","replayQueryTime","selectedTime","endTime","endString","month","day","ticks","Array","from","keys","now","maxTime","minTime","prometheus","storageTsdbRetention","key","control","link","map","s","a","length","PureComponent","replayStartTime","mapStateToProps","duration","mapDispatchToProps","dispatch","toggleReplayActive","ReplayContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppState } from 'store/Store';\nimport { replayQueryTimeSelector, durationSelector } from 'store/Selectors';\nimport { Tooltip, ButtonVariant, Button, Text } from '@patternfly/react-core';\nimport { DurationInSeconds, IntervalInMilliseconds, TimeInMilliseconds } from 'types/Common';\nimport ToolbarDropdown from 'components/ToolbarDropdown/ToolbarDropdown';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport Slider from 'components/IstioWizards/Slider/Slider';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { style } from 'typestyle';\nimport { toString } from './Utils';\nimport { serverConfig } from 'config';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { DateTimePicker } from './DateTimePicker';\nimport _ from 'lodash';\nimport history, { HistoryManager, URLParam } from 'app/History';\n\ntype ReduxProps = {\n  duration: DurationInSeconds;\n  replayQueryTime: TimeInMilliseconds;\n\n  setReplayQueryTime: (replayQueryTime: TimeInMilliseconds) => void;\n  toggleReplayActive: () => void;\n};\n\ntype ReplayProps = ReduxProps & {\n  id: string;\n};\n\ntype ReplayWindow = {\n  interval: IntervalInMilliseconds;\n  startTime: TimeInMilliseconds;\n};\n\ntype ReplayStatus = 'initialized' | 'playing' | 'paused' | 'done';\ntype ReplayState = {\n  isCustomStartTime: boolean;\n  refresherRef?: number;\n  replayFrame: number;\n  replayFrameCount: number;\n  replaySpeed: IntervalInMilliseconds;\n  replayWindow: ReplayWindow;\n  status: ReplayStatus;\n};\n\ntype ReplaySpeed = {\n  speed: IntervalInMilliseconds;\n  text: string;\n};\n\nexport const replayBorder = style({\n  borderLeft: `solid 5px ${PFColors.Replay}`\n});\n\n// key represents replay interval in milliseconds\nconst replayIntervals = {\n  60000: '1 minute',\n  300000: '5 minutes',\n  600000: '10 minutes',\n  1800000: '30 minutes'\n};\n\nconst replayLastIntervals = _.mapValues(replayIntervals, i => `Last ${i}`);\n\n// key represents speed in milliseconds (i.e. how long to wait before refreshing-the-frame (fetching new data)\nconst replaySpeeds: ReplaySpeed[] = [\n  { speed: 5000, text: 'slow' },\n  { speed: 3000, text: 'medium' },\n  { speed: 1000, text: 'fast' }\n];\n\nconst defaultReplayInterval: IntervalInMilliseconds = 300000; // 5 minutes\nconst defaultReplaySpeed: IntervalInMilliseconds = 3000; // medium\nconst frameInterval: IntervalInMilliseconds = 10000; // clock advances 10s per frame\n\nconst controlStyle = style({\n  display: 'flex',\n  margin: '5px 0 0 15px'\n});\n\nconst controlButtonStyle = style({\n  margin: '-5px -5px 0 33%',\n  height: '37px'\n});\n\nconst controlIconStyle = style({\n  fontSize: '1.5em'\n});\n\nconst frameStyle = style({\n  margin: '2px 20px 0 0'\n});\n\nconst isCustomStyle = style({\n  height: '36px'\n});\n\nconst isCustomActiveStyle = style({\n  color: PFColors.Active\n});\n\nconst replayStyle = style({\n  display: 'flex',\n  width: '100%',\n  padding: '5px 5px 0 10px',\n  marginTop: '-5px'\n});\n\nconst sliderStyle = style({\n  width: '100%',\n  margin: '0 -10px 0 20px'\n});\n\nconst speedStyle = style({\n  height: '1.5em',\n  margin: '1px 5px 0 5px',\n  padding: '0 2px 2px 2px'\n});\n\nconst speedActiveStyle = style({\n  color: PFColors.ActiveText,\n  fontWeight: 'bolder'\n});\n\nconst vrStyle = style({\n  border: '1px inset',\n  height: '20px',\n  marginTop: '4px',\n  width: '1px'\n});\n\nexport class Replay extends React.PureComponent<ReplayProps, ReplayState> {\n  static getFrameCount = (elapsedTime: IntervalInMilliseconds): number => {\n    return elapsedTime > 0 ? Math.floor(elapsedTime / frameInterval) : 0;\n  };\n\n  static queryTimeToFrame = (replayQueryTime: TimeInMilliseconds, replayStartTime: TimeInMilliseconds): number => {\n    const elapsedTime: IntervalInMilliseconds = replayQueryTime - replayStartTime;\n    const frame: number = Replay.getFrameCount(elapsedTime);\n    return frame;\n  };\n\n  static frameToQueryTime = (frame: number, replayWindow: ReplayWindow): TimeInMilliseconds => {\n    return replayWindow.startTime + frame * frameInterval;\n  };\n\n  constructor(props: ReplayProps) {\n    super(props);\n\n    // Let URL set initial state at construction time.\n    // Note, URLParam.GRAPH_REPLAY_START is only set for custom start times\n    let interval = defaultReplayInterval;\n    const urlParams = new URLSearchParams(history.location.search);\n    const urlReplayInterval = HistoryManager.getParam(URLParam.GRAPH_REPLAY_INTERVAL, urlParams);\n\n    if (!!urlReplayInterval) {\n      interval = Number(urlReplayInterval);\n    }\n\n    let startTime = new Date().getTime() - interval;\n    let isCustomStartTime = false;\n    const urlReplayStart = HistoryManager.getParam(URLParam.GRAPH_REPLAY_START, urlParams);\n\n    if (!!urlReplayStart) {\n      startTime = Number(urlReplayStart);\n      isCustomStartTime = true;\n    }\n\n    this.state = {\n      isCustomStartTime: isCustomStartTime,\n      refresherRef: undefined,\n      replayFrame: Replay.queryTimeToFrame(0, startTime),\n      replayFrameCount: Replay.getFrameCount(interval),\n      replaySpeed: defaultReplaySpeed,\n      replayWindow: { interval: interval, startTime: startTime } as ReplayWindow,\n      status: 'initialized'\n    };\n  }\n\n  componentDidUpdate(_prevProps: ReplayProps, prevState: ReplayState) {\n    const isCustomStartChange = this.state.isCustomStartTime !== prevState.isCustomStartTime;\n    const isIntervalChange = this.state.replayWindow.interval !== prevState.replayWindow.interval;\n    if (isCustomStartChange || isIntervalChange) {\n      this.initReplay();\n      return;\n    }\n\n    let refresherChange = this.state.status !== prevState.status;\n    refresherChange = refresherChange || this.state.replaySpeed !== prevState.replaySpeed;\n    if (refresherChange) {\n      this.updateRefresher();\n    }\n\n    if (this.state.status !== 'initialized') {\n      const frameQueryTime = Replay.frameToQueryTime(this.state.replayFrame, this.state.replayWindow);\n      if (frameQueryTime !== this.props.replayQueryTime) {\n        this.props.setReplayQueryTime(frameQueryTime);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_INTERVAL, true);\n    HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_START, true);\n\n    if (this.state.refresherRef) {\n      clearInterval(this.state.refresherRef);\n    }\n  }\n\n  render() {\n    if (!this.state.replayWindow.startTime) {\n      return null;\n    }\n\n    const selectedTime: Date = new Date(this.state.replayWindow.startTime);\n    const endTime: TimeInMilliseconds = selectedTime.getTime() + this.state.replayWindow.interval;\n    const endString = toString(endTime, { month: undefined, day: undefined, second: '2-digit' });\n    const ticks: number[] = Array.from(Array(this.state.replayFrameCount).keys());\n    const now = Date.now();\n    const maxTime: Date = new Date(now - this.state.replayWindow.interval);\n    const minTime: Date = new Date(\n      now - (serverConfig.prometheus.storageTsdbRetention! * 1000 + this.state.replayWindow.interval)\n    );\n\n    return (\n      <div className={`${replayStyle} ${replayBorder}`}>\n        {this.state.isCustomStartTime && (\n          <Tooltip content=\"Replay start time\">\n            <DateTimePicker\n              injectTimes={[maxTime]}\n              maxDate={maxTime}\n              maxTime={maxTime}\n              minDate={minTime}\n              minTime={minTime}\n              onChange={date => this.onPickerChange(date)}\n              selected={selectedTime}\n            />\n          </Tooltip>\n        )}\n        <ToolbarDropdown\n          id={'replay-interval'}\n          handleSelect={key => this.setReplayInterval(Number(key))}\n          value={String(this.state.replayWindow.interval)}\n          label={replayIntervals[this.state.replayWindow.interval]}\n          options={this.state.isCustomStartTime ? replayIntervals : replayLastIntervals}\n          tooltip=\"Replay length\"\n        />\n        <Tooltip\n          key=\"toggle-is-custom\"\n          position=\"top\"\n          content={`Set ${this.state.isCustomStartTime ? 'simple' : 'custom'} start time`}\n        >\n          <Button className={isCustomStyle} variant={ButtonVariant.control} onClick={this.toggleCustomStartTime}>\n            <KialiIcon.UserClock\n              className={this.state.isCustomStartTime ? `${defaultIconStyle} ${isCustomActiveStyle}` : defaultIconStyle}\n            />\n          </Button>\n        </Tooltip>\n        <span className={sliderStyle}>\n          <div\n            id=\"replay-slider-div\" // see _Time.scss\n          >\n            <Slider\n              key={endString} // on new endTime force new slider because of bug updating tick labels\n              id=\"replay-slider\"\n              orientation=\"horizontal\"\n              min={0}\n              max={this.state.replayFrameCount}\n              maxLimit={this.state.replayFrameCount}\n              step={1}\n              value={this.state.replayFrame}\n              ticks={ticks}\n              tooltip={true}\n              tooltipFormatter={this.formatTooltip}\n              onSlideStop={this.setReplayFrame}\n              input={false}\n              locked={false}\n              showLock={false}\n              mirrored={false}\n              showMirror={false}\n            />\n          </div>\n          <span className={controlStyle}>\n            {this.state.status === 'playing' ? (\n              <Tooltip key=\"replay-pause\" position=\"top\" content=\"Pause\" entryDelay={1000}>\n                <Button className={controlButtonStyle} variant={ButtonVariant.link} onClick={this.pause}>\n                  <KialiIcon.PauseCircle className={controlIconStyle} />\n                </Button>\n              </Tooltip>\n            ) : (\n              <Tooltip\n                key=\"replay-play\"\n                position=\"top\"\n                content={this.state.status === 'done' ? 'Play again' : 'Play'}\n                entryDelay={1000}\n              >\n                <Button className={controlButtonStyle} variant={ButtonVariant.link} onClick={this.play}>\n                  <KialiIcon.PlayCircle className={controlIconStyle} />\n                </Button>\n              </Tooltip>\n            )}\n            <Text className={frameStyle}>{this.formatFrame(this.state.replayFrame)}</Text>\n            {replaySpeeds.map((s, i, a) => this.speedButton(s, i === a.length - 1))}\n          </span>\n        </span>\n      </div>\n    );\n  }\n\n  formatTooltip = (val: number): string => {\n    const time: string = toString(Replay.frameToQueryTime(val, this.state.replayWindow), { second: '2-digit' });\n    return `${time} [${val}/${this.state.replayFrameCount}]`;\n  };\n\n  formatFrame = (frame: number): string => {\n    const elapsedTime: IntervalInMilliseconds = frame * frameInterval;\n    const elapsedSec: number = Math.floor((elapsedTime / 1000) % 60);\n    const elapsedMin: number = Math.floor((elapsedTime / 1000 - elapsedSec) / 60);\n    const zeroPadSec: string = elapsedSec < 10 ? '0' : '';\n    const zeroPadMin: string = elapsedMin < 10 ? '0' : '';\n    const elapsed: string = `${zeroPadMin}${elapsedMin}:${zeroPadSec}${elapsedSec}`;\n    return elapsed;\n  };\n\n  private toggleCustomStartTime = () => {\n    this.setState({ isCustomStartTime: !this.state.isCustomStartTime });\n  };\n\n  private onPickerChange = (date: Date) => {\n    this.setReplayStartTime(date.getTime());\n  };\n\n  private initReplay = () => {\n    const interval: IntervalInMilliseconds = !!this.state.replayWindow.interval\n      ? this.state.replayWindow.interval\n      : defaultReplayInterval;\n\n    const startTime: TimeInMilliseconds = this.state.isCustomStartTime\n      ? this.state.replayWindow.startTime\n      : new Date().getTime() - interval;\n\n    this.setState({ status: 'initialized' });\n    this.setReplayWindow({ interval: interval, startTime: startTime } as ReplayWindow);\n  };\n\n  private setReplayStartTime = (startTime: TimeInMilliseconds) => {\n    this.setReplayWindow({ interval: this.state.replayWindow.interval, startTime: startTime });\n  };\n\n  private setReplayInterval = (interval: IntervalInMilliseconds) => {\n    this.setReplayWindow({ interval: interval, startTime: this.state.replayWindow.startTime });\n  };\n\n  private setReplayWindow = (replayWindow: ReplayWindow) => {\n    // For simplicity/readability, round custom start times to the minute.\n    if (this.state.isCustomStartTime) {\n      replayWindow.startTime = new Date(replayWindow.startTime).setSeconds(0, 0);\n    }\n\n    // ensure redux state and URL are aligned\n    if (replayWindow.interval === defaultReplayInterval) {\n      HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_INTERVAL, true);\n    } else if (replayWindow.interval !== this.state.replayWindow.interval) {\n      HistoryManager.setParam(URLParam.GRAPH_REPLAY_INTERVAL, String(replayWindow.interval));\n    }\n    if (!this.state.isCustomStartTime || !replayWindow.startTime) {\n      HistoryManager.deleteParam(URLParam.GRAPH_REPLAY_START, true);\n    } else if (replayWindow.startTime !== this.state.replayWindow.startTime) {\n      HistoryManager.setParam(URLParam.GRAPH_REPLAY_START, String(replayWindow.startTime));\n    }\n\n    const frameCount = Replay.getFrameCount(replayWindow.interval);\n    this.setState({\n      replayFrame: 0,\n      replayFrameCount: frameCount,\n      replayWindow: replayWindow\n    });\n  };\n\n  private setReplaySpeed = (replaySpeed: IntervalInMilliseconds) => {\n    this.setState({ replaySpeed: replaySpeed });\n  };\n\n  private done = () => {\n    this.setState({ status: 'done' });\n  };\n\n  private pause = () => {\n    this.setState({ status: 'paused' });\n  };\n\n  private play = () => {\n    const atEnd = this.state.replayFrame >= this.state.replayFrameCount;\n    this.setState({ replayFrame: atEnd ? 0 : this.state.replayFrame, status: 'playing' });\n  };\n\n  private setReplayFrame = (frame: number) => {\n    if (frame !== this.state.replayFrame) {\n      let status: ReplayStatus = this.state.status === 'initialized' ? 'initialized' : 'paused';\n      status = frame === this.state.replayFrameCount ? 'done' : status;\n      this.setState({ replayFrame: frame, status: status });\n    }\n  };\n\n  private updateRefresher = () => {\n    if (this.state.refresherRef) {\n      clearInterval(this.state.refresherRef);\n    }\n    if (this.state.status !== 'playing' || !this.state.replayWindow.interval) {\n      return;\n    }\n\n    let refresherRef: number | undefined = undefined;\n    refresherRef = window.setInterval(this.handleRefresh, this.state.replaySpeed);\n    this.setState({ refresherRef: refresherRef });\n  };\n\n  private handleRefresh = () => {\n    const nextFrame = this.state.replayFrame + 1;\n    if (nextFrame > this.state.replayFrameCount) {\n      this.done();\n    } else {\n      this.setState({ replayFrame: nextFrame });\n      this.props.setReplayQueryTime(Replay.frameToQueryTime(nextFrame, this.state.replayWindow));\n    }\n  };\n\n  private speedButton = (replaySpeed: ReplaySpeed, isLast: boolean): React.ReactFragment => {\n    const isActive = this.state.replaySpeed === replaySpeed.speed;\n    return (\n      <>\n        <Button\n          key={`speed-${replaySpeed.text}`}\n          className={speedStyle}\n          variant={ButtonVariant.plain}\n          isActive={isActive}\n          onClick={() => this.setReplaySpeed(replaySpeed.speed)}\n        >\n          <Text className={isActive ? speedActiveStyle : undefined}>{replaySpeed.text}</Text>\n        </Button>\n        {!isLast && <div className={vrStyle} />}\n      </>\n    );\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  duration: durationSelector(state),\n  replayQueryTime: replayQueryTimeSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  setReplayQueryTime: bindActionCreators(UserSettingsActions.setReplayQueryTime, dispatch),\n  toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n});\n\nconst ReplayContainer = connect(mapStateToProps, mapDispatchToProps)(Replay);\n\nexport default ReplayContainer;\n"]},"metadata":{},"sourceType":"module"}
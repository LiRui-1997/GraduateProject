{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/GraduateProject/src/components/JaegerIntegration/JaegerResults/SpanTableItem.tsx\";\n\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\nimport { Dropdown, DropdownGroup, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport history from 'app/History';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { renderMetricsComparison } from './StatsComparison';\nimport { createListeners, Expandable, renderExpandArrow } from 'components/Expandable';\nimport { formatDuration, isErrorTag } from 'utils/tracing/TracingHelper';\nimport responseFlags from 'utils/ResponseFlags';\nimport { getSpanId } from '../../../utils/SearchParamUtils';\nvar dangerErrorStyle = style({\n  borderLeft: '3px solid var(--pf-global--danger-color--100)'\n});\nvar selectedErrorStyle = style({\n  borderRight: '3px solid var(--pf-global--info-color--100)',\n  borderLeft: '3px solid var(--pf-global--danger-color--100)'\n});\nvar selectedStyle = style({\n  borderRight: '3px solid var(--pf-global--info-color--100)'\n});\nvar kebabDropwdownStyle = style({\n  whiteSpace: 'nowrap'\n});\nvar linkStyle = style({\n  fontSize: 14\n});\n\nvar getClassName = function getClassName(isError, isSpan) {\n  return isSpan ? isError ? selectedErrorStyle : selectedStyle : isError ? dangerErrorStyle : undefined;\n};\n\nexport var buildRow = function buildRow(props) {\n  var expandListeners = createListeners();\n  var isSpan = props.spanID === getSpanId();\n  expandListeners.push(props.onExpand);\n  return {\n    className: getClassName(props.tags.some(isErrorTag), isSpan),\n    isOpen: false,\n    cells: [{\n      title: /*#__PURE__*/React.createElement(React.Fragment, null, renderExpandArrow(expandListeners, props.isExpanded), \" \", formatDuration(props.relativeStartTime))\n    }, {\n      title: /*#__PURE__*/React.createElement(Expandable, Object.assign({}, props, {\n        clickToExpand: false,\n        listeners: expandListeners,\n        innerComponent: OriginCell,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 16\n        }\n      }))\n    }, {\n      title: /*#__PURE__*/React.createElement(Expandable, Object.assign({}, props, {\n        clickToExpand: true,\n        listeners: expandListeners,\n        innerComponent: SummaryCell,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }\n      }))\n    }, {\n      title: /*#__PURE__*/React.createElement(Expandable, Object.assign({}, props, {\n        clickToExpand: true,\n        listeners: expandListeners,\n        innerComponent: StatsCell,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }\n      }))\n    }, {\n      title: /*#__PURE__*/React.createElement(Expandable, Object.assign({}, props, {\n        clickToExpand: false,\n        listeners: expandListeners,\n        innerComponent: LinksCell,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 16\n        }\n      }))\n    }],\n    spanID: props.spanID\n  };\n};\n\nvar OriginCell = function OriginCell(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Application: \"), props.linkToApp && /*#__PURE__*/React.createElement(Link, {\n    to: props.linkToApp,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 28\n    }\n  }, props.app) || props.app, /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Workload: \"), props.linkToWorkload && /*#__PURE__*/React.createElement(Link, {\n    to: props.linkToWorkload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 33\n    }\n  }, props.workload) || 'unknown', props.isExpanded && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Pod: \"), props.pod || 'unknown', /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })));\n};\n\nvar SummaryCell = function SummaryCell(props) {\n  var flag = props.info.responseFlags;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.info.hasError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ExclamationCircleIcon, {\n    color: PFColors.Danger,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 61\n    }\n  }, \"This span reported an error\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Operation: \"), flag ? /*#__PURE__*/React.createElement(React.Fragment, null, props.operationName, \" (\", flag, \" \", /*#__PURE__*/React.createElement(ExclamationCircleIcon, {\n    color: PFColors.Danger,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 43\n    }\n  }), \")\") : /*#__PURE__*/React.createElement(React.Fragment, null, props.operationName)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Component: \"), props.component), props.isExpanded && (props.type === 'envoy' && renderEnvoySummary(props) || props.type === 'http' && renderHTTPSummary(props) || props.type === 'tcp' && renderTCPSummary(props)));\n};\n\nvar renderEnvoySummary = function renderEnvoySummary(props) {\n  var info = props.info;\n  var rqLabel = 'Request';\n  var peerLink = undefined;\n\n  if (info.direction === 'inbound') {\n    rqLabel = 'Received request';\n\n    if (info.peer) {\n      peerLink = /*#__PURE__*/React.createElement(React.Fragment, null, ' from ', /*#__PURE__*/React.createElement(Link, {\n        to: '/namespaces/' + info.peer.namespace + '/workloads/' + info.peer.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, info.peer.name));\n    }\n  } else if (info.direction === 'outbound') {\n    rqLabel = 'Sent request';\n\n    if (info.peer) {\n      peerLink = /*#__PURE__*/React.createElement(React.Fragment, null, ' to ', /*#__PURE__*/React.createElement(Link, {\n        to: '/namespaces/' + info.peer.namespace + '/services/' + info.peer.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, info.peer.name));\n    }\n  }\n\n  var rsDetails = [];\n\n  if (info.statusCode) {\n    rsDetails.push(String(info.statusCode));\n  }\n\n  var flagInfo = undefined;\n\n  if (info.responseFlags) {\n    var _responseFlags$info$r;\n\n    rsDetails.push(info.responseFlags);\n    flagInfo = ((_responseFlags$info$r = responseFlags[info.responseFlags]) === null || _responseFlags$info$r === void 0 ? void 0 : _responseFlags$info$r.help) || 'Unknown flag';\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, rqLabel, peerLink, \":\", ' '), info.method, \" \", info.url), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"Response status: \"), rsDetails.join(', ')), flagInfo);\n};\n\nvar renderHTTPSummary = function renderHTTPSummary(props) {\n  var info = props.info;\n  var rqLabel = info.direction === 'inbound' ? 'Received request' : info.direction === 'outbound' ? 'Sent request' : 'Request';\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, rqLabel, \": \"), info.method, \" \", info.url), info.statusCode && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"Response status: \"), info.statusCode));\n};\n\nvar renderTCPSummary = function renderTCPSummary(props) {\n  var info = props.info;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, info.topic && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, \"Topic: \"), info.topic));\n};\n\nvar StatsCell = function StatsCell(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, \"Duration: \"), formatDuration(props.duration)), props.type === 'envoy' && renderMetricsComparison(props, !props.isExpanded, props.metricsStats, props.onClickFetchStats));\n};\n\nvar LinksCell = function LinksCell(props) {\n  var links = [/*#__PURE__*/React.createElement(DropdownGroup, {\n    label: \"Application (\".concat(props.app, \")\"),\n    className: kebabDropwdownStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DropdownItem, {\n    className: linkStyle,\n    onClick: function onClick() {\n      return history.push(props.linkToApp + '?tab=in_metrics');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, \"Inbound metrics\"), /*#__PURE__*/React.createElement(DropdownItem, {\n    className: linkStyle,\n    onClick: function onClick() {\n      return history.push(props.linkToApp + '?tab=out_metrics');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, \"Outbound metrics\"))];\n\n  if (props.linkToWorkload) {\n    links.push( /*#__PURE__*/React.createElement(DropdownGroup, {\n      label: \"Workload (\".concat(props.workload, \")\"),\n      className: kebabDropwdownStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DropdownItem, {\n      className: linkStyle,\n      onClick: function onClick() {\n        return history.push(props.linkToWorkload + '?tab=logs');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }, \"Logs\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      className: linkStyle,\n      onClick: function onClick() {\n        return history.push(props.linkToWorkload + '?tab=in_metrics');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, \"Inbound metrics\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      className: linkStyle,\n      onClick: function onClick() {\n        return history.push(props.linkToWorkload + '?tab=out_metrics');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, \"Outbound metrics\")));\n  }\n\n  if (props.externalURL) {\n    var spanLink = \"\".concat(props.externalURL, \"/trace/\").concat(props.traceID, \"?uiFind=\").concat(props.spanID);\n    links.push( /*#__PURE__*/React.createElement(DropdownGroup, {\n      label: \"Tracing\",\n      className: kebabDropwdownStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DropdownItem, {\n      className: linkStyle,\n      onClick: function onClick() {\n        return window.open(spanLink, '_blank');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }\n    }, \"More span details \", /*#__PURE__*/React.createElement(ExternalLinkAltIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }))));\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    toggle: /*#__PURE__*/React.createElement(KebabToggle, {\n      onToggle: function onToggle() {\n        return props.setToggledLinks(props.spanID);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 15\n      }\n    }),\n    dropdownItems: links,\n    isPlain: true,\n    isOpen: props.toggledLinks === props.spanID,\n    position: 'right',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/JaegerIntegration/JaegerResults/SpanTableItem.tsx"],"names":["React","Link","style","Dropdown","DropdownGroup","DropdownItem","KebabToggle","ExternalLinkAltIcon","ExclamationCircleIcon","history","PFColors","renderMetricsComparison","createListeners","Expandable","renderExpandArrow","formatDuration","isErrorTag","responseFlags","getSpanId","dangerErrorStyle","borderLeft","selectedErrorStyle","borderRight","selectedStyle","kebabDropwdownStyle","whiteSpace","linkStyle","fontSize","getClassName","isError","isSpan","undefined","buildRow","props","expandListeners","spanID","push","onExpand","className","tags","some","isOpen","cells","title","isExpanded","relativeStartTime","OriginCell","SummaryCell","StatsCell","LinksCell","linkToApp","app","linkToWorkload","workload","pod","flag","info","hasError","Danger","operationName","component","type","renderEnvoySummary","renderHTTPSummary","renderTCPSummary","rqLabel","peerLink","direction","peer","namespace","name","rsDetails","statusCode","String","flagInfo","help","method","url","join","topic","duration","metricsStats","onClickFetchStats","links","externalURL","spanLink","traceID","window","open","setToggledLinks","toggledLinks"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,YAAlC,EAAgDC,WAAhD,QAAmE,wBAAnE;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,yBAA3D;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,SAASC,uBAAT,QAAwC,mBAAxC;AAEA,SAAoBC,eAApB,EAAqCC,UAArC,EAAiDC,iBAAjD,QAA0E,uBAA1E;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,6BAA3C;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,SAAT,QAA0B,iCAA1B;AAEA,IAAMC,gBAAgB,GAAGjB,KAAK,CAAC;AAC7BkB,EAAAA,UAAU,EAAE;AADiB,CAAD,CAA9B;AAIA,IAAMC,kBAAkB,GAAGnB,KAAK,CAAC;AAC/BoB,EAAAA,WAAW,EAAE,6CADkB;AAE/BF,EAAAA,UAAU,EAAE;AAFmB,CAAD,CAAhC;AAKA,IAAMG,aAAa,GAAGrB,KAAK,CAAC;AAC1BoB,EAAAA,WAAW,EAAE;AADa,CAAD,CAA3B;AAIA,IAAME,mBAAmB,GAAGtB,KAAK,CAAC;AAChCuB,EAAAA,UAAU,EAAE;AADoB,CAAD,CAAjC;AAIA,IAAMC,SAAS,GAAGxB,KAAK,CAAC;AACtByB,EAAAA,QAAQ,EAAE;AADY,CAAD,CAAvB;;AAeA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAmBC,MAAnB,EAA2D;AAC9E,SAAOA,MAAM,GAAID,OAAO,GAAGR,kBAAH,GAAwBE,aAAnC,GAAoDM,OAAO,GAAGV,gBAAH,GAAsBY,SAA9F;AACD,CAFD;;AAIA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqB;AAC3C,MAAMC,eAAe,GAAGtB,eAAe,EAAvC;AACA,MAAMkB,MAAM,GAAGG,KAAK,CAACE,MAAN,KAAiBjB,SAAS,EAAzC;AACAgB,EAAAA,eAAe,CAACE,IAAhB,CAAqBH,KAAK,CAACI,QAA3B;AACA,SAAO;AACLC,IAAAA,SAAS,EAAEV,YAAY,CAACK,KAAK,CAACM,IAAN,CAAWC,IAAX,CAAgBxB,UAAhB,CAAD,EAA8Bc,MAA9B,CADlB;AAELW,IAAAA,MAAM,EAAE,KAFH;AAGLC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,KAAK,eACH,0CACG7B,iBAAiB,CAACoB,eAAD,EAAkBD,KAAK,CAACW,UAAxB,CADpB,OAC0D7B,cAAc,CAACkB,KAAK,CAACY,iBAAP,CADxE;AAFJ,KADK,EAQL;AACEF,MAAAA,KAAK,eAAE,oBAAC,UAAD,oBAAgBV,KAAhB;AAAuB,QAAA,aAAa,EAAE,KAAtC;AAA6C,QAAA,SAAS,EAAEC,eAAxD;AAAyE,QAAA,cAAc,EAAEY,UAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT,KARK,EAWL;AACEH,MAAAA,KAAK,eAAE,oBAAC,UAAD,oBAAgBV,KAAhB;AAAuB,QAAA,aAAa,EAAE,IAAtC;AAA4C,QAAA,SAAS,EAAEC,eAAvD;AAAwE,QAAA,cAAc,EAAEa,WAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT,KAXK,EAcL;AACEJ,MAAAA,KAAK,eAAE,oBAAC,UAAD,oBAAgBV,KAAhB;AAAuB,QAAA,aAAa,EAAE,IAAtC;AAA4C,QAAA,SAAS,EAAEC,eAAvD;AAAwE,QAAA,cAAc,EAAEc,SAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT,KAdK,EAiBL;AACEL,MAAAA,KAAK,eAAE,oBAAC,UAAD,oBAAgBV,KAAhB;AAAuB,QAAA,aAAa,EAAE,KAAtC;AAA6C,QAAA,SAAS,EAAEC,eAAxD;AAAyE,QAAA,cAAc,EAAEe,SAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT,KAjBK,CAHF;AAwBLd,IAAAA,MAAM,EAAEF,KAAK,CAACE;AAxBT,GAAP;AA0BD,CA9BM;;AAgCP,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAACb,KAAD,EAAgC;AACjD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEIA,KAAK,CAACiB,SAAN,iBAAmB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEjB,KAAK,CAACiB,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BjB,KAAK,CAACkB,GAAlC,CAApB,IAAsElB,KAAK,CAACkB,GAF/E,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKIlB,KAAK,CAACmB,cAAN,iBAAwB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEnB,KAAK,CAACmB,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCnB,KAAK,CAACoB,QAAvC,CAAzB,IAAqF,SALxF,EAMGpB,KAAK,CAACW,UAAN,iBACC,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGGX,KAAK,CAACqB,GAAN,IAAa,SAHhB,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAPJ,CADF;AAiBD,CAlBD;;AAoBA,IAAMP,WAAW,GAAG,SAAdA,WAAc,CAACd,KAAD,EAAgC;AAClD,MAAMsB,IAAI,GAAItB,KAAK,CAACuB,IAAP,CAA8BvC,aAA3C;AACA,sBACE,0CACGgB,KAAK,CAACuB,IAAN,CAAWC,QAAX,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAE/C,QAAQ,CAACgD,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,oBACoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADpD,CAFJ,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGH,IAAI,gBACH,0CACGtB,KAAK,CAAC0B,aADT,QAC0BJ,IAD1B,oBACgC,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAE7C,QAAQ,CAACgD,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhC,MADG,gBAKH,0CAAGzB,KAAK,CAAC0B,aAAT,CAPJ,CANF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEG1B,KAAK,CAAC2B,SAFT,CAhBF,EAoBG3B,KAAK,CAACW,UAAN,KACGX,KAAK,CAAC4B,IAAN,KAAe,OAAf,IAA0BC,kBAAkB,CAAC7B,KAAD,CAA7C,IACEA,KAAK,CAAC4B,IAAN,KAAe,MAAf,IAAyBE,iBAAiB,CAAC9B,KAAD,CAD5C,IAEEA,KAAK,CAAC4B,IAAN,KAAe,KAAf,IAAwBG,gBAAgB,CAAC/B,KAAD,CAH5C,CApBH,CADF;AA2BD,CA7BD;;AA+BA,IAAM6B,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC7B,KAAD,EAAgC;AACzD,MAAMuB,IAAI,GAAGvB,KAAK,CAACuB,IAAnB;AACA,MAAIS,OAAO,GAAG,SAAd;AACA,MAAIC,QAAiC,GAAGnC,SAAxC;;AACA,MAAIyB,IAAI,CAACW,SAAL,KAAmB,SAAvB,EAAkC;AAChCF,IAAAA,OAAO,GAAG,kBAAV;;AACA,QAAIT,IAAI,CAACY,IAAT,EAAe;AACbF,MAAAA,QAAQ,gBACN,0CACG,QADH,eAEE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,iBAAiBV,IAAI,CAACY,IAAL,CAAUC,SAA3B,GAAuC,aAAvC,GAAuDb,IAAI,CAACY,IAAL,CAAUE,IAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkFd,IAAI,CAACY,IAAL,CAAUE,IAA5F,CAFF,CADF;AAMD;AACF,GAVD,MAUO,IAAId,IAAI,CAACW,SAAL,KAAmB,UAAvB,EAAmC;AACxCF,IAAAA,OAAO,GAAG,cAAV;;AACA,QAAIT,IAAI,CAACY,IAAT,EAAe;AACbF,MAAAA,QAAQ,gBACN,0CACG,MADH,eAEE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,iBAAiBV,IAAI,CAACY,IAAL,CAAUC,SAA3B,GAAuC,YAAvC,GAAsDb,IAAI,CAACY,IAAL,CAAUE,IAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiFd,IAAI,CAACY,IAAL,CAAUE,IAA3F,CAFF,CADF;AAMD;AACF;;AACD,MAAMC,SAAmB,GAAG,EAA5B;;AACA,MAAIf,IAAI,CAACgB,UAAT,EAAqB;AACnBD,IAAAA,SAAS,CAACnC,IAAV,CAAeqC,MAAM,CAACjB,IAAI,CAACgB,UAAN,CAArB;AACD;;AACD,MAAIE,QAA4B,GAAG3C,SAAnC;;AACA,MAAIyB,IAAI,CAACvC,aAAT,EAAwB;AAAA;;AACtBsD,IAAAA,SAAS,CAACnC,IAAV,CAAeoB,IAAI,CAACvC,aAApB;AACAyD,IAAAA,QAAQ,GAAG,0BAAAzD,aAAa,CAACuC,IAAI,CAACvC,aAAN,CAAb,gFAAmC0D,IAAnC,KAA2C,cAAtD;AACD;;AAED,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,OADH,EAEGC,QAFH,OAEc,GAFd,CADF,EAKGV,IAAI,CAACoB,MALR,OAKiBpB,IAAI,CAACqB,GALtB,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEGN,SAAS,CAACO,IAAV,CAAe,IAAf,CAFH,CARF,EAYGJ,QAZH,CADF;AAgBD,CAnDD;;AAqDA,IAAMX,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC9B,KAAD,EAAgC;AACxD,MAAMuB,IAAI,GAAGvB,KAAK,CAACuB,IAAnB;AACA,MAAMS,OAAO,GACXT,IAAI,CAACW,SAAL,KAAmB,SAAnB,GAA+B,kBAA/B,GAAoDX,IAAI,CAACW,SAAL,KAAmB,UAAnB,GAAgC,cAAhC,GAAiD,SADvG;AAEA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASF,OAAT,OADF,EAEGT,IAAI,CAACoB,MAFR,OAEiBpB,IAAI,CAACqB,GAFtB,CADF,EAKGrB,IAAI,CAACgB,UAAL,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEGhB,IAAI,CAACgB,UAFR,CANJ,CADF;AAcD,CAlBD;;AAoBA,IAAMR,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC/B,KAAD,EAAgC;AACvD,MAAMuB,IAAI,GAAGvB,KAAK,CAACuB,IAAnB;AACA,sBACE,0CACGA,IAAI,CAACuB,KAAL,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEGvB,IAAI,CAACuB,KAFR,CAFJ,CADF;AAUD,CAZD;;AAcA,IAAM/B,SAAS,GAAG,SAAZA,SAAY,CAACf,KAAD,EAAgC;AAChD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGlB,cAAc,CAACkB,KAAK,CAAC+C,QAAP,CAFjB,CADF,EAKG/C,KAAK,CAAC4B,IAAN,KAAe,OAAf,IACClD,uBAAuB,CAACsB,KAAD,EAAQ,CAACA,KAAK,CAACW,UAAf,EAA2BX,KAAK,CAACgD,YAAjC,EAA+ChD,KAAK,CAACiD,iBAArD,CAN3B,CADF;AAUD,CAXD;;AAaA,IAAMjC,SAAS,GAAG,SAAZA,SAAY,CAAChB,KAAD,EAAgC;AAChD,MAAMkD,KAAK,GAAG,cACZ,oBAAC,aAAD;AAAe,IAAA,KAAK,yBAAkBlD,KAAK,CAACkB,GAAxB,MAApB;AAAoD,IAAA,SAAS,EAAE3B,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAEE,SAAzB;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMjB,OAAO,CAAC2B,IAAR,CAAaH,KAAK,CAACiB,SAAN,GAAkB,iBAA/B,CAAN;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAIE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAExB,SAAzB;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMjB,OAAO,CAAC2B,IAAR,CAAaH,KAAK,CAACiB,SAAN,GAAkB,kBAA/B,CAAN;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,CADY,CAAd;;AAUA,MAAIjB,KAAK,CAACmB,cAAV,EAA0B;AACxB+B,IAAAA,KAAK,CAAC/C,IAAN,eACE,oBAAC,aAAD;AAAe,MAAA,KAAK,sBAAeH,KAAK,CAACoB,QAArB,MAApB;AAAsD,MAAA,SAAS,EAAE7B,mBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAEE,SAAzB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAMjB,OAAO,CAAC2B,IAAR,CAAaH,KAAK,CAACmB,cAAN,GAAuB,WAApC,CAAN;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAE1B,SAAzB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAMjB,OAAO,CAAC2B,IAAR,CAAaH,KAAK,CAACmB,cAAN,GAAuB,iBAApC,CAAN;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,eAOE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAE1B,SAAzB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAMjB,OAAO,CAAC2B,IAAR,CAAaH,KAAK,CAACmB,cAAN,GAAuB,kBAApC,CAAN;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPF,CADF;AAaD;;AACD,MAAInB,KAAK,CAACmD,WAAV,EAAuB;AACrB,QAAMC,QAAQ,aAAMpD,KAAK,CAACmD,WAAZ,oBAAiCnD,KAAK,CAACqD,OAAvC,qBAAyDrD,KAAK,CAACE,MAA/D,CAAd;AACAgD,IAAAA,KAAK,CAAC/C,IAAN,eACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAC,SAArB;AAA+B,MAAA,SAAS,EAAEZ,mBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAEE,SAAzB;AAAoC,MAAA,OAAO,EAAE;AAAA,eAAM6D,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsB,QAAtB,CAAN;AAAA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB,CADF,CADF;AAOD;;AACD,sBACE,oBAAC,QAAD;AACE,IAAA,MAAM,eAAE,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE;AAAA,eAAMpD,KAAK,CAACwD,eAAN,CAAsBxD,KAAK,CAACE,MAA5B,CAAN;AAAA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,aAAa,EAAEgD,KAFjB;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,MAAM,EAAElD,KAAK,CAACyD,YAAN,KAAuBzD,KAAK,CAACE,MAJvC;AAKE,IAAA,QAAQ,EAAE,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA7CD","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\nimport { Dropdown, DropdownGroup, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport history from 'app/History';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { EnvoySpanInfo, OpenTracingHTTPInfo, OpenTracingTCPInfo, RichSpanData } from 'types/JaegerInfo';\nimport { renderMetricsComparison } from './StatsComparison';\nimport { MetricsStats } from 'types/Metrics';\nimport { CellProps, createListeners, Expandable, renderExpandArrow } from 'components/Expandable';\nimport { formatDuration, isErrorTag } from 'utils/tracing/TracingHelper';\nimport responseFlags from 'utils/ResponseFlags';\nimport { getSpanId } from '../../../utils/SearchParamUtils';\n\nconst dangerErrorStyle = style({\n  borderLeft: '3px solid var(--pf-global--danger-color--100)'\n});\n\nconst selectedErrorStyle = style({\n  borderRight: '3px solid var(--pf-global--info-color--100)',\n  borderLeft: '3px solid var(--pf-global--danger-color--100)'\n});\n\nconst selectedStyle = style({\n  borderRight: '3px solid var(--pf-global--info-color--100)'\n});\n\nconst kebabDropwdownStyle = style({\n  whiteSpace: 'nowrap'\n});\n\nconst linkStyle = style({\n  fontSize: 14\n});\n\ntype RowProps = RichSpanData & {\n  toggledLinks?: string;\n  setToggledLinks: (key: string) => void;\n  externalURL?: string;\n  onClickFetchStats: () => void;\n  metricsStats: Map<string, MetricsStats>;\n  // onExpand and isExpandable are used to keep the extend state at an upper level\n  onExpand: (isExpanded: boolean) => void;\n  isExpanded: boolean;\n};\n\nconst getClassName = (isError: boolean, isSpan: boolean): string | undefined => {\n  return isSpan ? (isError ? selectedErrorStyle : selectedStyle) : isError ? dangerErrorStyle : undefined;\n};\n\nexport const buildRow = (props: RowProps) => {\n  const expandListeners = createListeners();\n  const isSpan = props.spanID === getSpanId();\n  expandListeners.push(props.onExpand);\n  return {\n    className: getClassName(props.tags.some(isErrorTag), isSpan),\n    isOpen: false,\n    cells: [\n      {\n        title: (\n          <>\n            {renderExpandArrow(expandListeners, props.isExpanded)} {formatDuration(props.relativeStartTime)}\n          </>\n        )\n      },\n      {\n        title: <Expandable {...props} clickToExpand={false} listeners={expandListeners} innerComponent={OriginCell} />\n      },\n      {\n        title: <Expandable {...props} clickToExpand={true} listeners={expandListeners} innerComponent={SummaryCell} />\n      },\n      {\n        title: <Expandable {...props} clickToExpand={true} listeners={expandListeners} innerComponent={StatsCell} />\n      },\n      {\n        title: <Expandable {...props} clickToExpand={false} listeners={expandListeners} innerComponent={LinksCell} />\n      }\n    ],\n    spanID: props.spanID\n  };\n};\n\nconst OriginCell = (props: CellProps<RowProps>) => {\n  return (\n    <>\n      <strong>Application: </strong>\n      {(props.linkToApp && <Link to={props.linkToApp}>{props.app}</Link>) || props.app}\n      <br />\n      <strong>Workload: </strong>\n      {(props.linkToWorkload && <Link to={props.linkToWorkload}>{props.workload}</Link>) || 'unknown'}\n      {props.isExpanded && (\n        <>\n          <br />\n          <strong>Pod: </strong>\n          {props.pod || 'unknown'}\n          <br />\n        </>\n      )}\n    </>\n  );\n};\n\nconst SummaryCell = (props: CellProps<RowProps>) => {\n  const flag = (props.info as EnvoySpanInfo).responseFlags;\n  return (\n    <>\n      {props.info.hasError && (\n        <div>\n          <ExclamationCircleIcon color={PFColors.Danger} /> <strong>This span reported an error</strong>\n        </div>\n      )}\n      <div>\n        <strong>Operation: </strong>\n        {flag ? (\n          <>\n            {props.operationName} ({flag} <ExclamationCircleIcon color={PFColors.Danger} />)\n          </>\n        ) : (\n          <>{props.operationName}</>\n        )}\n      </div>\n      <div>\n        <strong>Component: </strong>\n        {props.component}\n      </div>\n      {props.isExpanded &&\n        ((props.type === 'envoy' && renderEnvoySummary(props)) ||\n          (props.type === 'http' && renderHTTPSummary(props)) ||\n          (props.type === 'tcp' && renderTCPSummary(props)))}\n    </>\n  );\n};\n\nconst renderEnvoySummary = (props: CellProps<RowProps>) => {\n  const info = props.info as EnvoySpanInfo;\n  let rqLabel = 'Request';\n  let peerLink: JSX.Element | undefined = undefined;\n  if (info.direction === 'inbound') {\n    rqLabel = 'Received request';\n    if (info.peer) {\n      peerLink = (\n        <>\n          {' from '}\n          <Link to={'/namespaces/' + info.peer.namespace + '/workloads/' + info.peer.name}>{info.peer.name}</Link>\n        </>\n      );\n    }\n  } else if (info.direction === 'outbound') {\n    rqLabel = 'Sent request';\n    if (info.peer) {\n      peerLink = (\n        <>\n          {' to '}\n          <Link to={'/namespaces/' + info.peer.namespace + '/services/' + info.peer.name}>{info.peer.name}</Link>\n        </>\n      );\n    }\n  }\n  const rsDetails: string[] = [];\n  if (info.statusCode) {\n    rsDetails.push(String(info.statusCode));\n  }\n  let flagInfo: string | undefined = undefined;\n  if (info.responseFlags) {\n    rsDetails.push(info.responseFlags);\n    flagInfo = responseFlags[info.responseFlags]?.help || 'Unknown flag';\n  }\n\n  return (\n    <>\n      <div>\n        <strong>\n          {rqLabel}\n          {peerLink}:{' '}\n        </strong>\n        {info.method} {info.url}\n      </div>\n      <div>\n        <strong>Response status: </strong>\n        {rsDetails.join(', ')}\n      </div>\n      {flagInfo}\n    </>\n  );\n};\n\nconst renderHTTPSummary = (props: CellProps<RowProps>) => {\n  const info = props.info as OpenTracingHTTPInfo;\n  const rqLabel =\n    info.direction === 'inbound' ? 'Received request' : info.direction === 'outbound' ? 'Sent request' : 'Request';\n  return (\n    <>\n      <div>\n        <strong>{rqLabel}: </strong>\n        {info.method} {info.url}\n      </div>\n      {info.statusCode && (\n        <div>\n          <strong>Response status: </strong>\n          {info.statusCode}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst renderTCPSummary = (props: CellProps<RowProps>) => {\n  const info = props.info as OpenTracingTCPInfo;\n  return (\n    <>\n      {info.topic && (\n        <div>\n          <strong>Topic: </strong>\n          {info.topic}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst StatsCell = (props: CellProps<RowProps>) => {\n  return (\n    <>\n      <div>\n        <strong>Duration: </strong>\n        {formatDuration(props.duration)}\n      </div>\n      {props.type === 'envoy' &&\n        renderMetricsComparison(props, !props.isExpanded, props.metricsStats, props.onClickFetchStats)}\n    </>\n  );\n};\n\nconst LinksCell = (props: CellProps<RowProps>) => {\n  const links = [\n    <DropdownGroup label={`Application (${props.app})`} className={kebabDropwdownStyle}>\n      <DropdownItem className={linkStyle} onClick={() => history.push(props.linkToApp + '?tab=in_metrics')}>\n        Inbound metrics\n      </DropdownItem>\n      <DropdownItem className={linkStyle} onClick={() => history.push(props.linkToApp + '?tab=out_metrics')}>\n        Outbound metrics\n      </DropdownItem>\n    </DropdownGroup>\n  ];\n  if (props.linkToWorkload) {\n    links.push(\n      <DropdownGroup label={`Workload (${props.workload})`} className={kebabDropwdownStyle}>\n        <DropdownItem className={linkStyle} onClick={() => history.push(props.linkToWorkload + '?tab=logs')}>\n          Logs\n        </DropdownItem>\n        <DropdownItem className={linkStyle} onClick={() => history.push(props.linkToWorkload + '?tab=in_metrics')}>\n          Inbound metrics\n        </DropdownItem>\n        <DropdownItem className={linkStyle} onClick={() => history.push(props.linkToWorkload + '?tab=out_metrics')}>\n          Outbound metrics\n        </DropdownItem>\n      </DropdownGroup>\n    );\n  }\n  if (props.externalURL) {\n    const spanLink = `${props.externalURL}/trace/${props.traceID}?uiFind=${props.spanID}`;\n    links.push(\n      <DropdownGroup label=\"Tracing\" className={kebabDropwdownStyle}>\n        <DropdownItem className={linkStyle} onClick={() => window.open(spanLink, '_blank')}>\n          More span details <ExternalLinkAltIcon />\n        </DropdownItem>\n      </DropdownGroup>\n    );\n  }\n  return (\n    <Dropdown\n      toggle={<KebabToggle onToggle={() => props.setToggledLinks(props.spanID)} />}\n      dropdownItems={links}\n      isPlain={true}\n      isOpen={props.toggledLinks === props.spanID}\n      position={'right'}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { getType } from 'typesafe-actions';\nimport { MessageCenterActions } from '../actions/MessageCenterActions';\nimport { updateState } from '../utils/Reducer';\nimport { LoginActions } from '../actions/LoginActions';\nimport _ from 'lodash';\nexport var INITIAL_MESSAGE_CENTER_STATE = {\n  nextId: 0,\n  groups: [{\n    id: 'systemErrors',\n    title: 'Open issues',\n    messages: [],\n    showActions: false,\n    hideIfEmpty: true\n  }, {\n    id: 'default',\n    title: 'Notifications',\n    messages: [],\n    showActions: true,\n    hideIfEmpty: false\n  }],\n  hidden: true,\n  expanded: false,\n  expandedGroupId: 'default'\n};\n\nvar createMessage = function createMessage(id, content, detail, type, count, showNotification, created, showDetail, firstTriggered) {\n  return {\n    id: id,\n    content: content,\n    detail: detail,\n    type: type,\n    count: count,\n    show_notification: showNotification,\n    seen: false,\n    created: created,\n    showDetail: showDetail,\n    firstTriggered: firstTriggered\n  };\n}; // Updates several messages with the same payload, useful for marking messages\n// returns the updated state\n\n\nvar updateMessage = function updateMessage(state, messageIds, updater) {\n  var groups = state.groups.map(function (group) {\n    group = _objectSpread(_objectSpread({}, group), {}, {\n      messages: group.messages.map(function (message) {\n        if (messageIds.includes(message.id)) {\n          message = updater(message);\n        }\n\n        return message;\n      })\n    });\n    return group;\n  });\n  return updateState(state, {\n    groups: groups\n  });\n};\n\nvar Messages = function Messages() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MESSAGE_CENTER_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case getType(MessageCenterActions.addMessage):\n      {\n        var _action$payload = action.payload,\n            content = _action$payload.content,\n            detail = _action$payload.detail,\n            groupId = _action$payload.groupId,\n            messageType = _action$payload.messageType,\n            showNotification = _action$payload.showNotification;\n        var groups = state.groups.map(function (group) {\n          if (group.id === groupId) {\n            var existingMessage = group.messages.find(function (message) {\n              // Note, we don't include detail when determining same-ness, just the main content.  This is to avoid\n              // trivial detail differences (like a timestamp).  If changing this approach apply the same change below\n              // for message removal.\n              return message.content === content;\n            });\n            var newMessage;\n\n            if (existingMessage) {\n              // it is in the list already\n              var firstTriggered = existingMessage.firstTriggered ? existingMessage.firstTriggered : existingMessage.created;\n              newMessage = createMessage(state.nextId, existingMessage.content, existingMessage.detail, messageType, existingMessage.count + 1, existingMessage.show_notification, new Date(), existingMessage.showDetail, firstTriggered); // remove the old message from the list\n\n              var filteredArray = _.remove(group.messages, function (message) {\n                return message.content !== content;\n              });\n\n              group = _objectSpread(_objectSpread({}, group), {}, {\n                messages: filteredArray.concat(newMessage)\n              });\n            } else {\n              newMessage = createMessage(state.nextId, content, detail, messageType, 1, showNotification, new Date(), false, undefined);\n              group = _objectSpread(_objectSpread({}, group), {}, {\n                messages: group.messages.concat(newMessage)\n              });\n            }\n\n            return group;\n          }\n\n          return group;\n        });\n        return updateState(state, {\n          groups: groups,\n          nextId: state.nextId + 1\n        });\n      }\n\n    case getType(MessageCenterActions.removeMessage):\n      {\n        var messageId = action.payload.messageId;\n\n        var _groups = state.groups.map(function (group) {\n          group = _objectSpread(_objectSpread({}, group), {}, {\n            messages: group.messages.filter(function (message) {\n              return !messageId.includes(message.id);\n            })\n          });\n          return group;\n        });\n\n        return updateState(state, {\n          groups: _groups\n        });\n      }\n\n    case getType(MessageCenterActions.toggleMessageDetail):\n      {\n        return updateMessage(state, action.payload.messageId, function (message) {\n          return _objectSpread(_objectSpread({}, message), {}, {\n            showDetail: !message.showDetail\n          });\n        });\n      }\n\n    case getType(MessageCenterActions.markAsRead):\n      {\n        return updateMessage(state, action.payload.messageId, function (message) {\n          return _objectSpread(_objectSpread({}, message), {}, {\n            seen: true,\n            show_notification: false\n          });\n        });\n      }\n\n    case getType(MessageCenterActions.hideNotification):\n      {\n        return updateMessage(state, action.payload.messageId, function (message) {\n          return _objectSpread(_objectSpread({}, message), {}, {\n            show_notification: false\n          });\n        });\n      }\n\n    case getType(MessageCenterActions.showMessageCenter):\n      if (state.hidden) {\n        return updateState(state, {\n          hidden: false\n        });\n      }\n\n      return state;\n\n    case getType(MessageCenterActions.hideMessageCenter):\n      if (!state.hidden) {\n        return updateState(state, {\n          hidden: true\n        });\n      }\n\n      return state;\n\n    case getType(MessageCenterActions.toggleExpandedMessageCenter):\n      return updateState(state, {\n        expanded: !state.expanded\n      });\n\n    case getType(MessageCenterActions.toggleGroup):\n      {\n        var _groupId = action.payload.groupId;\n\n        if (state.expandedGroupId === _groupId) {\n          return updateState(state, {\n            expandedGroupId: undefined\n          });\n        }\n\n        return updateState(state, {\n          expandedGroupId: _groupId\n        });\n      }\n\n    case getType(MessageCenterActions.expandGroup):\n      {\n        var _groupId2 = action.payload.groupId;\n        return updateState(state, {\n          expandedGroupId: _groupId2\n        });\n      }\n\n    case getType(LoginActions.loginRequest):\n      {\n        // Let's clear the message center quen user is loggin-in. This ensures\n        // that messages from a past session won't persist because may be obsolete.\n        return INITIAL_MESSAGE_CENTER_STATE;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default Messages;","map":{"version":3,"sources":["/root/kiali-ui/src/reducers/MessageCenter.ts"],"names":["getType","MessageCenterActions","updateState","LoginActions","_","INITIAL_MESSAGE_CENTER_STATE","nextId","groups","id","title","messages","showActions","hideIfEmpty","hidden","expanded","expandedGroupId","createMessage","content","detail","type","count","showNotification","created","showDetail","firstTriggered","show_notification","seen","updateMessage","state","messageIds","updater","map","group","message","includes","Messages","action","addMessage","payload","groupId","messageType","existingMessage","find","newMessage","Date","filteredArray","remove","concat","undefined","removeMessage","messageId","filter","toggleMessageDetail","markAsRead","hideNotification","showMessageCenter","hideMessageCenter","toggleExpandedMessageCenter","toggleGroup","expandGroup","loginRequest"],"mappings":"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","sourcesContent":["import { MessageType, NotificationMessage } from '../types/MessageCenter';\nimport { MessageCenterState } from '../store/Store';\nimport { KialiAppAction } from '../actions/KialiAppAction';\nimport { getType } from 'typesafe-actions';\nimport { MessageCenterActions } from '../actions/MessageCenterActions';\nimport { updateState } from '../utils/Reducer';\nimport { LoginActions } from '../actions/LoginActions';\nimport _ from 'lodash';\n\nexport const INITIAL_MESSAGE_CENTER_STATE: MessageCenterState = {\n  nextId: 0,\n  groups: [\n    {\n      id: 'systemErrors',\n      title: 'Open issues',\n      messages: [],\n      showActions: false,\n      hideIfEmpty: true\n    },\n    {\n      id: 'default',\n      title: 'Notifications',\n      messages: [],\n      showActions: true,\n      hideIfEmpty: false\n    }\n  ],\n  hidden: true,\n  expanded: false,\n  expandedGroupId: 'default'\n};\n\nconst createMessage = (\n  id: number,\n  content: string,\n  detail: string,\n  type: MessageType,\n  count: number,\n  showNotification: boolean,\n  created: Date,\n  showDetail: boolean,\n  firstTriggered?: Date\n) => {\n  return {\n    id,\n    content,\n    detail,\n    type,\n    count,\n    show_notification: showNotification,\n    seen: false,\n    created: created,\n    showDetail: showDetail,\n    firstTriggered\n  };\n};\n\n// Updates several messages with the same payload, useful for marking messages\n// returns the updated state\nconst updateMessage = (state: MessageCenterState, messageIds: number[], updater) => {\n  const groups = state.groups.map(group => {\n    group = {\n      ...group,\n      messages: group.messages.map(message => {\n        if (messageIds.includes(message.id)) {\n          message = updater(message);\n        }\n        return message;\n      })\n    };\n    return group;\n  });\n  return updateState(state, { groups });\n};\n\nconst Messages = (\n  state: MessageCenterState = INITIAL_MESSAGE_CENTER_STATE,\n  action: KialiAppAction\n): MessageCenterState => {\n  switch (action.type) {\n    case getType(MessageCenterActions.addMessage): {\n      const { content, detail, groupId, messageType, showNotification } = action.payload;\n\n      const groups = state.groups.map(group => {\n        if (group.id === groupId) {\n          const existingMessage = group.messages.find(message => {\n            // Note, we don't include detail when determining same-ness, just the main content.  This is to avoid\n            // trivial detail differences (like a timestamp).  If changing this approach apply the same change below\n            // for message removal.\n            return message.content === content;\n          });\n\n          let newMessage: NotificationMessage;\n\n          if (existingMessage) {\n            // it is in the list already\n            const firstTriggered = existingMessage.firstTriggered\n              ? existingMessage.firstTriggered\n              : existingMessage.created;\n\n            newMessage = createMessage(\n              state.nextId,\n              existingMessage.content,\n              existingMessage.detail,\n              messageType,\n              existingMessage.count + 1,\n              existingMessage.show_notification,\n              new Date(),\n              existingMessage.showDetail,\n              firstTriggered\n            );\n\n            // remove the old message from the list\n            const filteredArray = _.remove(group.messages, message => {\n              return message.content !== content;\n            });\n\n            group = { ...group, messages: filteredArray.concat(newMessage) };\n          } else {\n            newMessage = createMessage(\n              state.nextId,\n              content,\n              detail,\n              messageType,\n              1,\n              showNotification,\n              new Date(),\n              false,\n              undefined\n            );\n            group = { ...group, messages: group.messages.concat(newMessage) };\n          }\n\n          return group;\n        }\n        return group;\n      });\n      return updateState(state, { groups: groups, nextId: state.nextId + 1 });\n    }\n\n    case getType(MessageCenterActions.removeMessage): {\n      const messageId = action.payload.messageId;\n      const groups = state.groups.map(group => {\n        group = {\n          ...group,\n          messages: group.messages.filter(message => {\n            return !messageId.includes(message.id);\n          })\n        };\n        return group;\n      });\n      return updateState(state, { groups });\n    }\n\n    case getType(MessageCenterActions.toggleMessageDetail): {\n      return updateMessage(state, action.payload.messageId, message => ({\n        ...message,\n        showDetail: !message.showDetail\n      }));\n    }\n\n    case getType(MessageCenterActions.markAsRead): {\n      return updateMessage(state, action.payload.messageId, message => ({\n        ...message,\n        seen: true,\n        show_notification: false\n      }));\n    }\n\n    case getType(MessageCenterActions.hideNotification): {\n      return updateMessage(state, action.payload.messageId, message => ({ ...message, show_notification: false }));\n    }\n\n    case getType(MessageCenterActions.showMessageCenter):\n      if (state.hidden) {\n        return updateState(state, { hidden: false });\n      }\n      return state;\n\n    case getType(MessageCenterActions.hideMessageCenter):\n      if (!state.hidden) {\n        return updateState(state, { hidden: true });\n      }\n      return state;\n\n    case getType(MessageCenterActions.toggleExpandedMessageCenter):\n      return updateState(state, { expanded: !state.expanded });\n\n    case getType(MessageCenterActions.toggleGroup): {\n      const { groupId } = action.payload;\n      if (state.expandedGroupId === groupId) {\n        return updateState(state, { expandedGroupId: undefined });\n      }\n      return updateState(state, { expandedGroupId: groupId });\n    }\n\n    case getType(MessageCenterActions.expandGroup): {\n      const { groupId } = action.payload;\n      return updateState(state, { expandedGroupId: groupId });\n    }\n    case getType(LoginActions.loginRequest): {\n      // Let's clear the message center quen user is loggin-in. This ensures\n      // that messages from a past session won't persist because may be obsolete.\n      return INITIAL_MESSAGE_CENTER_STATE;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}
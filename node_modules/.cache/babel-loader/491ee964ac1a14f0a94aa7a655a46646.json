{"ast":null,"code":"import _classCallCheck from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{connect}from'react-redux';import{ActionGroup,Button,Form,FormGroup,FormHelperText,ListItem,ListVariant,LoginFooterItem,LoginPage as LoginNext,TextInput}from'@patternfly/react-core';import{ExclamationCircleIcon,ExclamationTriangleIcon}from'@patternfly/react-icons';import{LoginStatus}from'../../store/Store';import{AuthStrategy}from'../../types/Auth';import{authenticationConfig,kialiLogo}from'../../config';import LoginThunkActions from'../../actions/LoginThunkActions';import{isAuthStrategyOAuth}from'../../config/AuthenticationConfig';//import { c_wizard__nav_BoxShadow } from '@patternfly/react-tokens';\nexport var LoginPage=/*#__PURE__*/function(_React$Component){_inherits(LoginPage,_React$Component);var _super=_createSuper(LoginPage);function LoginPage(props){var _this;_classCallCheck(this,LoginPage);_this=_super.call(this,props);_this.handlePasswordChange=function(passwordValue){_this.setState({password:passwordValue});};_this.handleSubmit=function(e){e.preventDefault();if(isAuthStrategyOAuth()){// If we are using OpenShift or OpenId strategy, take the user back to the authorization endpoint\nwindow.location.href=authenticationConfig.authorizationEndpoint;}else if(authenticationConfig.strategy===AuthStrategy.header){window.location.href=window.WEB_ROOT?window.WEB_ROOT:'/';}else if(authenticationConfig.strategy===AuthStrategy.token){if(_this.state.password.trim().length!==0&&_this.props.authenticate){_this.props.authenticate('',_this.state.password);_this.setState({showHelperText:false,errorInput:'',isValidToken:true,filledInputs:true});}else{var message='Please, provide a Service Account token.';_this.setState({showHelperText:true,errorInput:message,isValidToken:false,filledInputs:false});}}};_this.renderMessage=function(message,type,key){if(!message){return'';}var variant=type?type:_this.props.status===LoginStatus.error||_this.state.filledInputs?'danger':'warning';var icon=variant==='danger'?/*#__PURE__*/React.createElement(ExclamationCircleIcon,null):/*#__PURE__*/React.createElement(ExclamationTriangleIcon,null);return/*#__PURE__*/React.createElement(\"span\",{key:key,style:{color:variant==='danger'?'#c00':'#f0ab00',fontWeight:'bold',fontSize:16}},icon,\"\\xA0 \",message);};_this.getHelperMessage=function(){var messages=[];if(_this.state.showHelperText){messages.push(_this.renderMessage(_this.state.errorInput,undefined,'helperText'));}if(_this.props.status===LoginStatus.expired){messages.push(_this.renderMessage('Your session has expired or was terminated in another window.','warning','sessionExpired'));}if(_this.props.status===LoginStatus.error){messages.push(_this.props.message);}if(_this.props.postLoginErrorMsg){messages.push(_this.renderMessage(_this.props.postLoginErrorMsg,undefined,'postLoginError'));}// Get error messages passed on the URL\nvar pageParams=window.location.search;var urlParams=new URLSearchParams(pageParams);// When using OpenId auth, the IdP can redirect back with `error` and `error_description`\n// as url parameters. If these params are set, show them as errors.\n// Reference: https://openid.net/specs/openid-connect-core-1_0-final.html#AuthError\nif(urlParams.get('error')){if(urlParams.get('error_description')){messages.push(_this.renderMessage(\"Authentication error: \".concat(urlParams.get('error_description')),'danger','idp-err'));}else{messages.push(_this.renderMessage(\"The OpenID provider returned the following error code: \".concat(urlParams.get('error')),'danger','idp-err'));}}// Also, when using OpenId auth, the IdP can return with success. However, in the \"authorization code\" flow,\n// the Kiali backend still needs to do some extra negotiation with the IdP, which can fail.\n// The backend will set an \"openid_error\" url parameter when there is some failure.\nif(urlParams.get('openid_error')){messages.push(_this.renderMessage(\"Authentication failed: \".concat(urlParams.get('openid_error')),'danger','openid-err'));}return messages;};_this.state={username:'',password:'',isValidUsername:true,isValidPassword:true,isValidToken:true,filledInputs:false,showHelperText:false,errorInput:''};return _this;}_createClass(LoginPage,[{key:\"componentDidMount\",value:function componentDidMount(){var loginInput=document.getElementById('pf-login-username-id');if(loginInput){loginInput.focus();}}},{key:\"render\",value:function render(){var loginLabel='Log In';if(authenticationConfig.strategy===AuthStrategy.openshift){loginLabel='Log In With OpenShift';}else if(authenticationConfig.strategy===AuthStrategy.openid){loginLabel='Log In With OpenID';}var messages=this.getHelperMessage();var isLoggingIn=this.props.isPostLoginPerforming||this.props.status===LoginStatus.logging;var isLoginButtonDisabled=isLoggingIn||this.props.status===LoginStatus.loggedIn;var listItem=/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(LoginFooterItem,{href:\"https://www.kiali.io/\"},\"Documentation\")),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(LoginFooterItem,{href:\"https://github.com/kiali/kiali\"},\"Contribute\")));var loginPane;if(authenticationConfig.strategy===AuthStrategy.token){loginPane=/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormHelperText,{isError:!this.state.isValidToken||this.props.status===LoginStatus.error,isHidden:!this.state.showHelperText&&this.props.message===''&&messages.length===0},messages),/*#__PURE__*/React.createElement(FormGroup,{fieldId:\"token\",label:\"Token\",isRequired:true},/*#__PURE__*/React.createElement(TextInput,{id:\"token\",type:\"password\",onChange:this.handlePasswordChange,isRequired:true})),/*#__PURE__*/React.createElement(ActionGroup,null,/*#__PURE__*/React.createElement(Button,{type:\"submit\",onClick:this.handleSubmit,isDisabled:isLoginButtonDisabled,style:{width:'100%'},variant:\"primary\"},\"Log In\")));}else{loginPane=/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormHelperText,{isError:this.props.status===LoginStatus.error,isHidden:this.props.status!==LoginStatus.error&&this.props.message===''&&messages.length===0},messages),/*#__PURE__*/React.createElement(ActionGroup,null,/*#__PURE__*/React.createElement(Button,{type:\"submit\",onClick:this.handleSubmit,style:{width:'100%'},variant:\"primary\"},loginLabel)));}return/*#__PURE__*/React.createElement(LoginNext,{footerListVariants:ListVariant.inline,brandImgSrc:kialiLogo,brandImgAlt:\"Kiali logo\",footerListItems:listItem,textContent:\"Service mesh management for Istio.\",loginTitle:\"Log in Kiali\"},loginPane);}}]);return LoginPage;}(React.Component);LoginPage.contextTypes={store:function store(){return null;}};var mapStateToProps=function mapStateToProps(state){return{status:state.authentication.status,message:state.authentication.message};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{authenticate:function authenticate(username,password){return dispatch(LoginThunkActions.authenticate(username,password));}};};var LoginPageContainer=connect(mapStateToProps,mapDispatchToProps)(LoginPage);export default LoginPageContainer;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"/root/GraduateProject/src/components/SummaryPanel/RpsChart.tsx\";\n\nimport * as React from 'react';\nimport { style } from 'typestyle';\nimport { InfoAltIcon, SquareFullIcon } from '@patternfly/react-icons';\nimport { SparklineChart } from 'components/Charts/SparklineChart';\nimport { PFColors } from '../Pf/PfColors';\nimport { SUMMARY_PANEL_CHART_WIDTH } from '../../types/Graph';\nimport { toVCLine } from 'utils/VictoryChartsUtils';\nimport 'components/Charts/Charts.css';\nvar blockStyle = style({\n  marginTop: '0.5em',\n  marginBottom: '0.5em'\n});\n\nvar renderNoTrafficLegend = function renderNoTrafficLegend() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfoAltIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), \" Not enough traffic to generate chart.\");\n};\n\nvar thereIsTrafficData = function thereIsTrafficData(seriesData) {\n  return seriesData.datapoints.reduce(function (accum, val) {\n    return accum + val.y;\n  }, 0) > 0;\n};\n\nvar renderSparklines = function renderSparklines(series, yTickFormat) {\n  var yFormat = yTickFormat ? yTickFormat : function (y) {\n    return \"\".concat(y, \" rps\");\n  };\n  return /*#__PURE__*/React.createElement(SparklineChart, {\n    name: \"rps\",\n    height: 41,\n    width: SUMMARY_PANEL_CHART_WIDTH,\n    showLegend: false,\n    padding: {\n      top: 5\n    },\n    tooltipFormat: function tooltipFormat(dp) {\n      return \"\".concat(dp.x.toLocaleTimeString(), \"\\n\").concat(yFormat(dp.y));\n    },\n    series: series,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  });\n};\n\nexport var RequestChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(RequestChart, _React$Component);\n\n  var _super = _createSuper(RequestChart);\n\n  function RequestChart() {\n    var _this2;\n\n    _classCallCheck(this, RequestChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n\n    _this2.renderContent = function () {\n      var rpsLine = toVCLine(_this2.props.dataRps, 'RPS', PFColors.Info);\n      var errLine = toVCLine(_this2.props.dataErrors, 'Error', PFColors.Danger);\n\n      if (thereIsTrafficData(rpsLine)) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, _this2.renderMinMaxStats(rpsLine.datapoints, errLine.datapoints), renderSparklines([rpsLine, errLine]));\n      } else {\n        return renderNoTrafficLegend();\n      }\n    };\n\n    _this2.renderMinMaxStats = function (dataRps, dataErrors) {\n      var minRps = dataRps.length > 0 ? dataRps[0].y : 0;\n      var maxRps = minRps;\n      var errSample = dataErrors.length > 0 ? dataErrors[0].y : 0;\n      var minPctErr = 100 * errSample / minRps;\n      var maxPctErr = minPctErr;\n\n      for (var i = 1; i < dataRps.length; ++i) {\n        var sample = dataRps[i].y;\n        minRps = sample < minRps ? sample : minRps;\n        maxRps = sample > maxRps ? sample : maxRps;\n\n        if (sample !== 0) {\n          errSample = i < dataErrors.length ? dataErrors[i].y : 0;\n          var errPct = 100 * errSample / sample;\n\n          if (isNaN(minPctErr) || errPct < minPctErr) {\n            minPctErr = errPct;\n          }\n\n          if (isNaN(maxPctErr) || errPct > maxPctErr) {\n            maxPctErr = errPct;\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, \"RPS: \", minRps.toFixed(2), \" / \", maxRps.toFixed(2), \" , %Error \", minPctErr.toFixed(2), \" / \", maxPctErr.toFixed(2));\n    };\n\n    return _this2;\n  }\n\n  _createClass(RequestChart, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !this.props.hide && /*#__PURE__*/React.createElement(\"div\", {\n        className: blockStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, this.props.label, \" min / max:\")), this.renderContent()));\n    }\n  }]);\n\n  return RequestChart;\n}(React.Component);\nexport var StreamChart = /*#__PURE__*/function (_React$Component2) {\n  _inherits(StreamChart, _React$Component2);\n\n  var _super2 = _createSuper(StreamChart);\n\n  function StreamChart() {\n    var _this3;\n\n    _classCallCheck(this, StreamChart);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _super2.call.apply(_super2, [this].concat(args));\n\n    _this3.renderContent = function () {\n      var sentLine = toVCLine(_this3.props.sentRates, 'Sent', PFColors.Blue400);\n      var receivedLine = toVCLine(_this3.props.receivedRates, 'Received', PFColors.Green400);\n\n      if (thereIsTrafficData(sentLine) || thereIsTrafficData(receivedLine)) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, _this3.renderMinMaxStats(sentLine.datapoints.map(function (dp) {\n          return dp.y;\n        }), receivedLine.datapoints.map(function (dp) {\n          return dp.y;\n        })), renderSparklines([sentLine, receivedLine], function (val) {\n          return _this3.props.unit === 'bytes' ? _this3.abbreviateBytes(val).format(true) + '/s' : \"\".concat(val.toFixed(2), \" msg/s\");\n        }));\n      } else {\n        return renderNoTrafficLegend();\n      }\n    };\n\n    _this3.renderMinMaxStats = function (dataSent, dataReceived) {\n      var minSent = 0,\n          maxSent = 0,\n          minReceived = 0,\n          maxReceived = 0;\n\n      if (dataSent.length > 0) {\n        minSent = Math.min.apply(Math, _toConsumableArray(dataSent));\n        maxSent = Math.max.apply(Math, _toConsumableArray(dataSent));\n      }\n\n      if (dataReceived.length > 0) {\n        minReceived = Math.min.apply(Math, _toConsumableArray(dataReceived));\n        maxReceived = Math.max.apply(Math, _toConsumableArray(dataReceived));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SquareFullIcon, {\n        style: {\n          color: PFColors.Blue400\n        },\n        __self: _assertThisInitialized(_this3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }\n      }), \" Sent: \", _this3.formatMinMaxStats(minSent, maxSent), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SquareFullIcon, {\n        style: {\n          color: PFColors.Green400\n        },\n        __self: _assertThisInitialized(_this3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }), \" Received:\", ' ', _this3.formatMinMaxStats(minReceived, maxReceived));\n    };\n\n    _this3.abbreviateBytes = function (bytes) {\n      var abbreviation = {\n        originalValue: bytes,\n        multiplier: 1,\n        unit: 'B',\n        abbreviatedValue: function abbreviatedValue() {\n          return abbreviation.originalValue / abbreviation.multiplier;\n        },\n        format: function format(includeUnit) {\n          var rVal = abbreviation.abbreviatedValue().toFixed(2);\n\n          if (includeUnit) {\n            rVal += ' ' + abbreviation.unit;\n          }\n\n          return rVal;\n        }\n      };\n\n      if (bytes >= 1e9) {\n        abbreviation.multiplier = 1e9;\n        abbreviation.unit = 'G';\n      } else if (bytes >= 1e6) {\n        abbreviation.multiplier = 1e6;\n        abbreviation.unit = 'M';\n      } else if (bytes >= 1e3) {\n        abbreviation.multiplier = 1e3;\n        abbreviation.unit = 'K';\n      }\n\n      return abbreviation;\n    };\n\n    _this3.formatMinMaxStats = function (min, max) {\n      if (_this3.props.unit === 'bytes') {\n        var minAbbr = _this3.abbreviateBytes(min);\n\n        var maxAbbr = _this3.abbreviateBytes(max);\n\n        if (minAbbr.multiplier > maxAbbr.multiplier) {\n          maxAbbr.unit = minAbbr.unit;\n          maxAbbr.multiplier = minAbbr.multiplier;\n        } else {\n          minAbbr.unit = maxAbbr.unit;\n          minAbbr.multiplier = maxAbbr.multiplier;\n        }\n\n        return minAbbr.format(false) + ' / ' + maxAbbr.format(true) + '/s';\n      }\n\n      return min.toFixed(2) + ' / ' + max.toFixed(2) + ' msg/s';\n    };\n\n    return _this3;\n  }\n\n  _createClass(StreamChart, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !this.props.hide && /*#__PURE__*/React.createElement(\"div\", {\n        className: blockStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, this.props.label, \" - min / max:\")), this.renderContent()));\n    }\n  }]);\n\n  return StreamChart;\n}(React.Component);","map":{"version":3,"sources":["/root/GraduateProject/src/components/SummaryPanel/RpsChart.tsx"],"names":["React","style","InfoAltIcon","SquareFullIcon","SparklineChart","PFColors","SUMMARY_PANEL_CHART_WIDTH","toVCLine","blockStyle","marginTop","marginBottom","renderNoTrafficLegend","thereIsTrafficData","seriesData","datapoints","reduce","accum","val","y","renderSparklines","series","yTickFormat","yFormat","top","dp","x","toLocaleTimeString","RequestChart","renderContent","rpsLine","props","dataRps","Info","errLine","dataErrors","Danger","renderMinMaxStats","minRps","length","maxRps","errSample","minPctErr","maxPctErr","i","sample","errPct","isNaN","toFixed","hide","label","Component","StreamChart","sentLine","sentRates","Blue400","receivedLine","receivedRates","Green400","map","unit","abbreviateBytes","format","dataSent","dataReceived","minSent","maxSent","minReceived","maxReceived","Math","min","max","color","formatMinMaxStats","bytes","abbreviation","originalValue","multiplier","abbreviatedValue","includeUnit","rVal","minAbbr","maxAbbr"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { style } from 'typestyle';\nimport { InfoAltIcon, SquareFullIcon } from '@patternfly/react-icons';\n\nimport { SparklineChart } from 'components/Charts/SparklineChart';\nimport { PFColors } from '../Pf/PfColors';\nimport { SUMMARY_PANEL_CHART_WIDTH } from '../../types/Graph';\nimport { Datapoint } from '../../types/Metrics';\nimport { toVCLine } from 'utils/VictoryChartsUtils';\nimport { RichDataPoint, VCDataPoint, VCLine, VCLines } from 'types/VictoryChartInfo';\n\nimport 'components/Charts/Charts.css';\n\ntype RequestChartProp = {\n  label: string;\n  dataRps: Datapoint[];\n  dataErrors: Datapoint[];\n  hide?: boolean;\n};\n\ntype StreamChartProp = {\n  hide?: boolean;\n  label: string;\n  receivedRates: Datapoint[];\n  sentRates: Datapoint[];\n  unit: 'bytes' | 'messages';\n};\n\ntype BytesAbbreviation = {\n  originalValue: number;\n  multiplier: number;\n  unit: string;\n  abbreviatedValue: () => number;\n  format: (includeUnit: boolean) => string;\n};\n\nconst blockStyle = style({\n  marginTop: '0.5em',\n  marginBottom: '0.5em'\n});\n\nconst renderNoTrafficLegend = () => {\n  return (\n    <div>\n      <InfoAltIcon /> Not enough traffic to generate chart.\n    </div>\n  );\n};\n\nconst thereIsTrafficData = (seriesData: VCLine<RichDataPoint>) => {\n  return seriesData.datapoints.reduce((accum, val) => accum + val.y, 0) > 0;\n};\n\nconst renderSparklines = (series: VCLines<RichDataPoint>, yTickFormat?: (val: number) => string) => {\n  const yFormat = yTickFormat ? yTickFormat : y => `${y} rps`;\n  return (\n    <SparklineChart\n      name=\"rps\"\n      height={41}\n      width={SUMMARY_PANEL_CHART_WIDTH}\n      showLegend={false}\n      padding={{ top: 5 }}\n      tooltipFormat={dp => `${(dp.x as Date).toLocaleTimeString()}\\n${yFormat(dp.y)}`}\n      series={series}\n    />\n  );\n};\n\nexport class RequestChart extends React.Component<RequestChartProp, {}> {\n  render() {\n    return (\n      <>\n        {!this.props.hide && (\n          <div className={blockStyle}>\n            <div>\n              <strong>{this.props.label} min / max:</strong>\n            </div>\n            {this.renderContent()}\n          </div>\n        )}\n      </>\n    );\n  }\n\n  private renderContent = () => {\n    const rpsLine = toVCLine(this.props.dataRps, 'RPS', PFColors.Info);\n    const errLine = toVCLine(this.props.dataErrors, 'Error', PFColors.Danger);\n    if (thereIsTrafficData(rpsLine)) {\n      return (\n        <>\n          {this.renderMinMaxStats(rpsLine.datapoints, errLine.datapoints)}\n          {renderSparklines([rpsLine, errLine])}\n        </>\n      );\n    } else {\n      return renderNoTrafficLegend();\n    }\n  };\n\n  private renderMinMaxStats = (dataRps: VCDataPoint[], dataErrors: VCDataPoint[]) => {\n    let minRps = dataRps.length > 0 ? dataRps[0].y : 0;\n    let maxRps = minRps;\n    let errSample = dataErrors.length > 0 ? dataErrors[0].y : 0;\n    let minPctErr = (100 * errSample) / minRps;\n    let maxPctErr = minPctErr;\n    for (let i = 1; i < dataRps.length; ++i) {\n      const sample = dataRps[i].y;\n      minRps = sample < minRps ? sample : minRps;\n      maxRps = sample > maxRps ? sample : maxRps;\n      if (sample !== 0) {\n        errSample = i < dataErrors.length ? dataErrors[i].y : 0;\n        const errPct = (100 * errSample) / sample;\n        if (isNaN(minPctErr) || errPct < minPctErr) {\n          minPctErr = errPct;\n        }\n        if (isNaN(maxPctErr) || errPct > maxPctErr) {\n          maxPctErr = errPct;\n        }\n      }\n    }\n\n    return (\n      <div>\n        RPS: {minRps.toFixed(2)} / {maxRps.toFixed(2)} , %Error {minPctErr.toFixed(2)} / {maxPctErr.toFixed(2)}\n      </div>\n    );\n  };\n}\n\nexport class StreamChart extends React.Component<StreamChartProp, {}> {\n  render() {\n    return (\n      <>\n        {!this.props.hide && (\n          <div className={blockStyle}>\n            <div>\n              <strong>{this.props.label} - min / max:</strong>\n            </div>\n            {this.renderContent()}\n          </div>\n        )}\n      </>\n    );\n  }\n\n  private renderContent = () => {\n    const sentLine = toVCLine(this.props.sentRates, 'Sent', PFColors.Blue400);\n    const receivedLine = toVCLine(this.props.receivedRates, 'Received', PFColors.Green400);\n    if (thereIsTrafficData(sentLine) || thereIsTrafficData(receivedLine)) {\n      return (\n        <>\n          {this.renderMinMaxStats(\n            sentLine.datapoints.map(dp => dp.y),\n            receivedLine.datapoints.map(dp => dp.y)\n          )}\n          {renderSparklines([sentLine, receivedLine], val => {\n            return this.props.unit === 'bytes'\n              ? this.abbreviateBytes(val).format(true) + '/s'\n              : `${val.toFixed(2)} msg/s`;\n          })}\n        </>\n      );\n    } else {\n      return renderNoTrafficLegend();\n    }\n  };\n\n  private renderMinMaxStats = (dataSent: number[], dataReceived: number[]) => {\n    let minSent = 0,\n      maxSent = 0,\n      minReceived = 0,\n      maxReceived = 0;\n\n    if (dataSent.length > 0) {\n      minSent = Math.min(...dataSent);\n      maxSent = Math.max(...dataSent);\n    }\n    if (dataReceived.length > 0) {\n      minReceived = Math.min(...dataReceived);\n      maxReceived = Math.max(...dataReceived);\n    }\n\n    return (\n      <div>\n        <SquareFullIcon style={{ color: PFColors.Blue400 }} /> Sent: {this.formatMinMaxStats(minSent, maxSent)}\n        <br />\n        <SquareFullIcon style={{ color: PFColors.Green400 }} /> Received:{' '}\n        {this.formatMinMaxStats(minReceived, maxReceived)}\n      </div>\n    );\n  };\n\n  private abbreviateBytes = (bytes: number): BytesAbbreviation => {\n    const abbreviation: BytesAbbreviation = {\n      originalValue: bytes,\n      multiplier: 1,\n      unit: 'B',\n      abbreviatedValue: () => {\n        return abbreviation.originalValue / abbreviation.multiplier;\n      },\n      format: (includeUnit: boolean) => {\n        let rVal = abbreviation.abbreviatedValue().toFixed(2);\n        if (includeUnit) {\n          rVal += ' ' + abbreviation.unit;\n        }\n        return rVal;\n      }\n    };\n\n    if (bytes >= 1e9) {\n      abbreviation.multiplier = 1e9;\n      abbreviation.unit = 'G';\n    } else if (bytes >= 1e6) {\n      abbreviation.multiplier = 1e6;\n      abbreviation.unit = 'M';\n    } else if (bytes >= 1e3) {\n      abbreviation.multiplier = 1e3;\n      abbreviation.unit = 'K';\n    }\n\n    return abbreviation;\n  };\n\n  private formatMinMaxStats = (min: number, max: number): string => {\n    if (this.props.unit === 'bytes') {\n      const minAbbr = this.abbreviateBytes(min);\n      const maxAbbr = this.abbreviateBytes(max);\n\n      if (minAbbr.multiplier > maxAbbr.multiplier) {\n        maxAbbr.unit = minAbbr.unit;\n        maxAbbr.multiplier = minAbbr.multiplier;\n      } else {\n        minAbbr.unit = maxAbbr.unit;\n        minAbbr.multiplier = maxAbbr.multiplier;\n      }\n\n      return minAbbr.format(false) + ' / ' + maxAbbr.format(true) + '/s';\n    }\n\n    return min.toFixed(2) + ' / ' + max.toFixed(2) + ' msg/s';\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/HeatMap/HeatMap.tsx\";\n// A heatmap implementation tailored for Kiali design\n// (inspired from https://github.com/arunghosh/react-grid-heatmap (MIT), credits to @arunghosh)\nimport { PFColors } from 'components/Pf/PfColors';\nimport React from 'react';\nimport { style } from 'typestyle'; // rgb in [0,255] bounds\n\nvar cellStyle = style({\n  overflow: 'hidden',\n  fontSize: '.7rem',\n  borderRadius: 3,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\nexport var HeatMap = /*#__PURE__*/function (_React$Component) {\n  _inherits(HeatMap, _React$Component);\n\n  var _super = _createSuper(HeatMap);\n\n  function HeatMap() {\n    var _this;\n\n    _classCallCheck(this, HeatMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getGridStyle = function () {\n      if (_this.props.displayMode === 'compact') {\n        return {\n          display: 'grid',\n          gridTemplateColumns: \"0 repeat(\".concat(_this.props.xLabels.length, \", 1fr)\"),\n          gridTemplateRows: \"0 repeat(\".concat(_this.props.yLabels.length, \", 1rem)\"),\n          gridGap: 2,\n          maxWidth: \"\".concat(_this.props.xLabels.length, \"rem\")\n        };\n      }\n\n      var cellHeight = '2rem';\n      var cellWidth = _this.props.displayMode === 'large' ? 3 : 2;\n      return {\n        display: 'grid',\n        gridTemplateColumns: \"\".concat(cellWidth, \"rem repeat(\").concat(_this.props.xLabels.length, \", 1fr)\"),\n        gridTemplateRows: new Array(_this.props.yLabels.length + 1).fill(cellHeight).join(' '),\n        gridGap: 2,\n        maxWidth: \"\".concat(cellWidth * (1 + _this.props.xLabels.length), \"rem\")\n      };\n    };\n\n    _this.getCellColors = function (value) {\n      var _this$props$dataRange = _this.props.dataRange,\n          from = _this$props$dataRange.from,\n          to = _this$props$dataRange.to;\n      var clamped = Math.max(from, Math.min(to, value));\n      var ratio = (clamped - from) / (to - from); // e.g. 0.8 | 0 | 1\n\n      var colorRatio = ratio * (_this.props.colorMap.length - 1); // e.g. (length is 3) 1.6 | 0 | 2\n\n      var colorLow = _this.props.colorMap[Math.floor(colorRatio)]; // e.g. m[1] | m[0] | m[2]\n\n\n      var colorHigh = _this.props.colorMap[Math.ceil(colorRatio)]; // e.g. m[2] | m[0] | m[2]\n\n\n      var remains = colorRatio - Math.floor(colorRatio); // e.g. 0.6 | 0 | 0\n\n      var r = Math.floor((colorHigh.r - colorLow.r) * remains + colorLow.r);\n      var g = Math.floor((colorHigh.g - colorLow.g) * remains + colorLow.g);\n      var b = Math.floor((colorHigh.b - colorLow.b) * remains + colorLow.b);\n      var brightness = 0.21 * r + 0.72 * g + 0.07 * b; // https://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/\n\n      var textColor = brightness > 128 ? PFColors.Black1000 : PFColors.Black100;\n      return {\n        color: textColor,\n        backgroundColor: \"rgb(\".concat(r, \",\").concat(g, \",\").concat(b, \")\")\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(HeatMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isCompact = this.props.displayMode === 'compact';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: this.getGridStyle(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }), this.props.xLabels.map(function (xLabel, x) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'xlabel_' + x,\n          className: cellStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }\n        }, isCompact ? '' : xLabel);\n      }), this.props.yLabels.map(function (yLabel, y) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          key: 'ylabel_' + y,\n          className: cellStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }\n        }, isCompact ? '' : yLabel), _this2.props.xLabels.map(function (_, x) {\n          var value = _this2.props.data[x][y];\n\n          if (value) {\n            var _style = _this2.getCellColors(value);\n\n            return /*#__PURE__*/React.createElement(\"div\", {\n              key: \"heatmap_\".concat(x, \"-\").concat(y),\n              className: cellStyle,\n              style: _style,\n              title: _this2.props.tooltip(x, y, value),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }\n            }, !isCompact && _this2.props.valueFormat(value));\n          }\n\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: \"heatmap_\".concat(x, \"-\").concat(y),\n            className: cellStyle,\n            style: {\n              backgroundColor: _this2.props.colorUndefined,\n              color: PFColors.Black1000\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }\n          }, !isCompact && 'n/a');\n        }));\n      }));\n    }\n  }]);\n\n  return HeatMap;\n}(React.Component);\nHeatMap.HealthColorMap = [{\n  r: 62,\n  g: 134,\n  b: 53\n}, // Success (#3e8635)\n{\n  r: 146,\n  g: 212,\n  b: 0\n}, // PF Success 100 (#92d400)\n{\n  r: 228,\n  g: 245,\n  b: 188\n}, // PF Light green 100 (#e4f5bc)\n{\n  r: 240,\n  g: 171,\n  b: 0\n}, // PF Warning 100 (#f0ab00)\n{\n  r: 201,\n  g: 25,\n  b: 11\n} // PF Danger 100 (#c9190b)\n];","map":{"version":3,"sources":["/root/kiali-ui/src/components/HeatMap/HeatMap.tsx"],"names":["PFColors","React","style","cellStyle","overflow","fontSize","borderRadius","display","justifyContent","alignItems","HeatMap","getGridStyle","props","displayMode","gridTemplateColumns","xLabels","length","gridTemplateRows","yLabels","gridGap","maxWidth","cellHeight","cellWidth","Array","fill","join","getCellColors","value","dataRange","from","to","clamped","Math","max","min","ratio","colorRatio","colorMap","colorLow","floor","colorHigh","ceil","remains","r","g","b","brightness","textColor","Black1000","Black100","color","backgroundColor","isCompact","map","xLabel","x","yLabel","y","_","data","tooltip","valueFormat","colorUndefined","Component","HealthColorMap"],"mappings":"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","sourcesContent":["// A heatmap implementation tailored for Kiali design\n// (inspired from https://github.com/arunghosh/react-grid-heatmap (MIT), credits to @arunghosh)\n\nimport { PFColors } from 'components/Pf/PfColors';\nimport React from 'react';\nimport { style } from 'typestyle';\n\n// rgb in [0,255] bounds\nexport type Color = { r: number; g: number; b: number };\nexport type ColorMap = Color[];\n\ntype Props = {\n  xLabels: (string | JSX.Element)[];\n  yLabels: (string | JSX.Element)[];\n  data: (number | undefined)[][];\n  colorMap: ColorMap;\n  dataRange: { from: number; to: number };\n  colorUndefined: string;\n  valueFormat: (v: number) => string;\n  tooltip: (x: number, y: number, v: number) => string;\n  displayMode?: 'compact' | 'normal' | 'large';\n};\n\nconst cellStyle = style({\n  overflow: 'hidden',\n  fontSize: '.7rem',\n  borderRadius: 3,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nexport class HeatMap extends React.Component<Props> {\n  static HealthColorMap: ColorMap = [\n    { r: 62, g: 134, b: 53 }, // Success (#3e8635)\n    { r: 146, g: 212, b: 0 }, // PF Success 100 (#92d400)\n    { r: 228, g: 245, b: 188 }, // PF Light green 100 (#e4f5bc)\n    { r: 240, g: 171, b: 0 }, // PF Warning 100 (#f0ab00)\n    { r: 201, g: 25, b: 11 } // PF Danger 100 (#c9190b)\n  ];\n\n  private getGridStyle = (): React.CSSProperties => {\n    if (this.props.displayMode === 'compact') {\n      return {\n        display: 'grid',\n        gridTemplateColumns: `0 repeat(${this.props.xLabels.length}, 1fr)`,\n        gridTemplateRows: `0 repeat(${this.props.yLabels.length}, 1rem)`,\n        gridGap: 2,\n        maxWidth: `${this.props.xLabels.length}rem`\n      };\n    }\n    const cellHeight = '2rem';\n    const cellWidth = this.props.displayMode === 'large' ? 3 : 2;\n    return {\n      display: 'grid',\n      gridTemplateColumns: `${cellWidth}rem repeat(${this.props.xLabels.length}, 1fr)`,\n      gridTemplateRows: new Array(this.props.yLabels.length + 1).fill(cellHeight).join(' '),\n      gridGap: 2,\n      maxWidth: `${cellWidth * (1 + this.props.xLabels.length)}rem`\n    };\n  };\n\n  private getCellColors = (value: number) => {\n    const { from, to } = this.props.dataRange;\n    const clamped = Math.max(from, Math.min(to, value));\n    const ratio = (clamped - from) / (to - from); // e.g. 0.8 | 0 | 1\n    const colorRatio = ratio * (this.props.colorMap.length - 1); // e.g. (length is 3) 1.6 | 0 | 2\n    const colorLow = this.props.colorMap[Math.floor(colorRatio)]; // e.g. m[1] | m[0] | m[2]\n    const colorHigh = this.props.colorMap[Math.ceil(colorRatio)]; // e.g. m[2] | m[0] | m[2]\n    const remains = colorRatio - Math.floor(colorRatio); // e.g. 0.6 | 0 | 0\n    const r = Math.floor((colorHigh.r - colorLow.r) * remains + colorLow.r);\n    const g = Math.floor((colorHigh.g - colorLow.g) * remains + colorLow.g);\n    const b = Math.floor((colorHigh.b - colorLow.b) * remains + colorLow.b);\n    const brightness = 0.21 * r + 0.72 * g + 0.07 * b; // https://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/\n    const textColor = brightness > 128 ? PFColors.Black1000 : PFColors.Black100;\n    return {\n      color: textColor,\n      backgroundColor: `rgb(${r},${g},${b})`\n    };\n  };\n\n  render() {\n    const isCompact = this.props.displayMode === 'compact';\n    return (\n      <div style={this.getGridStyle()}>\n        <div></div>\n        {this.props.xLabels.map((xLabel, x) => (\n          <div key={'xlabel_' + x} className={cellStyle}>\n            {isCompact ? '' : xLabel}\n          </div>\n        ))}\n        {this.props.yLabels.map((yLabel, y) => {\n          return (\n            <>\n              <div key={'ylabel_' + y} className={cellStyle}>\n                {isCompact ? '' : yLabel}\n              </div>\n              {this.props.xLabels.map((_, x) => {\n                const value = this.props.data[x][y];\n                if (value) {\n                  const style = this.getCellColors(value);\n                  return (\n                    <div\n                      key={`heatmap_${x}-${y}`}\n                      className={cellStyle}\n                      style={style}\n                      title={this.props.tooltip(x, y, value)}\n                    >\n                      {!isCompact && this.props.valueFormat(value)}\n                    </div>\n                  );\n                }\n                return (\n                  <div\n                    key={`heatmap_${x}-${y}`}\n                    className={cellStyle}\n                    style={{ backgroundColor: this.props.colorUndefined, color: PFColors.Black1000 }}\n                  >\n                    {!isCompact && 'n/a'}\n                  </div>\n                );\n              })}\n            </>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
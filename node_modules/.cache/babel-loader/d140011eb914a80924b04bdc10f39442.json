{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PositionStats = function () {\n  function PositionStats(scale) {\n    this.scale = scale;\n    this.AB = 0;\n    this.AD = 0;\n    this.A2 = 0;\n  }\n\n  PositionStats.prototype.addVariable = function (v) {\n    var ai = this.scale / v.scale;\n    var bi = v.offset / v.scale;\n    var wi = v.weight;\n    this.AB += wi * ai * bi;\n    this.AD += wi * ai * v.desiredPosition;\n    this.A2 += wi * ai * ai;\n  };\n\n  PositionStats.prototype.getPosn = function () {\n    return (this.AD - this.AB) / this.A2;\n  };\n\n  return PositionStats;\n}();\n\nexports.PositionStats = PositionStats;\n\nvar Constraint = function () {\n  function Constraint(left, right, gap, equality) {\n    if (equality === void 0) {\n      equality = false;\n    }\n\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.equality = equality;\n    this.active = false;\n    this.unsatisfiable = false;\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.equality = equality;\n  }\n\n  Constraint.prototype.slack = function () {\n    return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();\n  };\n\n  return Constraint;\n}();\n\nexports.Constraint = Constraint;\n\nvar Variable = function () {\n  function Variable(desiredPosition, weight, scale) {\n    if (weight === void 0) {\n      weight = 1;\n    }\n\n    if (scale === void 0) {\n      scale = 1;\n    }\n\n    this.desiredPosition = desiredPosition;\n    this.weight = weight;\n    this.scale = scale;\n    this.offset = 0;\n  }\n\n  Variable.prototype.dfdv = function () {\n    return 2.0 * this.weight * (this.position() - this.desiredPosition);\n  };\n\n  Variable.prototype.position = function () {\n    return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n  };\n\n  Variable.prototype.visitNeighbours = function (prev, f) {\n    var ff = function ff(c, next) {\n      return c.active && prev !== next && f(c, next);\n    };\n\n    this.cOut.forEach(function (c) {\n      return ff(c, c.right);\n    });\n    this.cIn.forEach(function (c) {\n      return ff(c, c.left);\n    });\n  };\n\n  return Variable;\n}();\n\nexports.Variable = Variable;\n\nvar Block = function () {\n  function Block(v) {\n    this.vars = [];\n    v.offset = 0;\n    this.ps = new PositionStats(v.scale);\n    this.addVariable(v);\n  }\n\n  Block.prototype.addVariable = function (v) {\n    v.block = this;\n    this.vars.push(v);\n    this.ps.addVariable(v);\n    this.posn = this.ps.getPosn();\n  };\n\n  Block.prototype.updateWeightedPosition = function () {\n    this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n\n    for (var i = 0, n = this.vars.length; i < n; ++i) {\n      this.ps.addVariable(this.vars[i]);\n    }\n\n    this.posn = this.ps.getPosn();\n  };\n\n  Block.prototype.compute_lm = function (v, u, postAction) {\n    var _this = this;\n\n    var dfdv = v.dfdv();\n    v.visitNeighbours(u, function (c, next) {\n      var _dfdv = _this.compute_lm(next, v, postAction);\n\n      if (next === c.right) {\n        dfdv += _dfdv * c.left.scale;\n        c.lm = _dfdv;\n      } else {\n        dfdv += _dfdv * c.right.scale;\n        c.lm = -_dfdv;\n      }\n\n      postAction(c);\n    });\n    return dfdv / v.scale;\n  };\n\n  Block.prototype.populateSplitBlock = function (v, prev) {\n    var _this = this;\n\n    v.visitNeighbours(prev, function (c, next) {\n      next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n\n      _this.addVariable(next);\n\n      _this.populateSplitBlock(next, v);\n    });\n  };\n\n  Block.prototype.traverse = function (visit, acc, v, prev) {\n    var _this = this;\n\n    if (v === void 0) {\n      v = this.vars[0];\n    }\n\n    if (prev === void 0) {\n      prev = null;\n    }\n\n    v.visitNeighbours(prev, function (c, next) {\n      acc.push(visit(c));\n\n      _this.traverse(visit, acc, next, v);\n    });\n  };\n\n  Block.prototype.findMinLM = function () {\n    var m = null;\n    this.compute_lm(this.vars[0], null, function (c) {\n      if (!c.equality && (m === null || c.lm < m.lm)) m = c;\n    });\n    return m;\n  };\n\n  Block.prototype.findMinLMBetween = function (lv, rv) {\n    this.compute_lm(lv, null, function () {});\n    var m = null;\n    this.findPath(lv, null, rv, function (c, next) {\n      if (!c.equality && c.right === next && (m === null || c.lm < m.lm)) m = c;\n    });\n    return m;\n  };\n\n  Block.prototype.findPath = function (v, prev, to, visit) {\n    var _this = this;\n\n    var endFound = false;\n    v.visitNeighbours(prev, function (c, next) {\n      if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\n        endFound = true;\n        visit(c, next);\n      }\n    });\n    return endFound;\n  };\n\n  Block.prototype.isActiveDirectedPathBetween = function (u, v) {\n    if (u === v) return true;\n    var i = u.cOut.length;\n\n    while (i--) {\n      var c = u.cOut[i];\n      if (c.active && this.isActiveDirectedPathBetween(c.right, v)) return true;\n    }\n\n    return false;\n  };\n\n  Block.split = function (c) {\n    c.active = false;\n    return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n  };\n\n  Block.createSplitBlock = function (startVar) {\n    var b = new Block(startVar);\n    b.populateSplitBlock(startVar, null);\n    return b;\n  };\n\n  Block.prototype.splitBetween = function (vl, vr) {\n    var c = this.findMinLMBetween(vl, vr);\n\n    if (c !== null) {\n      var bs = Block.split(c);\n      return {\n        constraint: c,\n        lb: bs[0],\n        rb: bs[1]\n      };\n    }\n\n    return null;\n  };\n\n  Block.prototype.mergeAcross = function (b, c, dist) {\n    c.active = true;\n\n    for (var i = 0, n = b.vars.length; i < n; ++i) {\n      var v = b.vars[i];\n      v.offset += dist;\n      this.addVariable(v);\n    }\n\n    this.posn = this.ps.getPosn();\n  };\n\n  Block.prototype.cost = function () {\n    var sum = 0,\n        i = this.vars.length;\n\n    while (i--) {\n      var v = this.vars[i],\n          d = v.position() - v.desiredPosition;\n      sum += d * d * v.weight;\n    }\n\n    return sum;\n  };\n\n  return Block;\n}();\n\nexports.Block = Block;\n\nvar Blocks = function () {\n  function Blocks(vs) {\n    this.vs = vs;\n    var n = vs.length;\n    this.list = new Array(n);\n\n    while (n--) {\n      var b = new Block(vs[n]);\n      this.list[n] = b;\n      b.blockInd = n;\n    }\n  }\n\n  Blocks.prototype.cost = function () {\n    var sum = 0,\n        i = this.list.length;\n\n    while (i--) {\n      sum += this.list[i].cost();\n    }\n\n    return sum;\n  };\n\n  Blocks.prototype.insert = function (b) {\n    b.blockInd = this.list.length;\n    this.list.push(b);\n  };\n\n  Blocks.prototype.remove = function (b) {\n    var last = this.list.length - 1;\n    var swapBlock = this.list[last];\n    this.list.length = last;\n\n    if (b !== swapBlock) {\n      this.list[b.blockInd] = swapBlock;\n      swapBlock.blockInd = b.blockInd;\n    }\n  };\n\n  Blocks.prototype.merge = function (c) {\n    var l = c.left.block,\n        r = c.right.block;\n    var dist = c.right.offset - c.left.offset - c.gap;\n\n    if (l.vars.length < r.vars.length) {\n      r.mergeAcross(l, c, dist);\n      this.remove(l);\n    } else {\n      l.mergeAcross(r, c, -dist);\n      this.remove(r);\n    }\n  };\n\n  Blocks.prototype.forEach = function (f) {\n    this.list.forEach(f);\n  };\n\n  Blocks.prototype.updateBlockPositions = function () {\n    this.list.forEach(function (b) {\n      return b.updateWeightedPosition();\n    });\n  };\n\n  Blocks.prototype.split = function (inactive) {\n    var _this = this;\n\n    this.updateBlockPositions();\n    this.list.forEach(function (b) {\n      var v = b.findMinLM();\n\n      if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n        b = v.left.block;\n        Block.split(v).forEach(function (nb) {\n          return _this.insert(nb);\n        });\n\n        _this.remove(b);\n\n        inactive.push(v);\n      }\n    });\n  };\n\n  return Blocks;\n}();\n\nexports.Blocks = Blocks;\n\nvar Solver = function () {\n  function Solver(vs, cs) {\n    this.vs = vs;\n    this.cs = cs;\n    this.vs = vs;\n    vs.forEach(function (v) {\n      v.cIn = [], v.cOut = [];\n    });\n    this.cs = cs;\n    cs.forEach(function (c) {\n      c.left.cOut.push(c);\n      c.right.cIn.push(c);\n    });\n    this.inactive = cs.map(function (c) {\n      c.active = false;\n      return c;\n    });\n    this.bs = null;\n  }\n\n  Solver.prototype.cost = function () {\n    return this.bs.cost();\n  };\n\n  Solver.prototype.setStartingPositions = function (ps) {\n    this.inactive = this.cs.map(function (c) {\n      c.active = false;\n      return c;\n    });\n    this.bs = new Blocks(this.vs);\n    this.bs.forEach(function (b, i) {\n      return b.posn = ps[i];\n    });\n  };\n\n  Solver.prototype.setDesiredPositions = function (ps) {\n    this.vs.forEach(function (v, i) {\n      return v.desiredPosition = ps[i];\n    });\n  };\n\n  Solver.prototype.mostViolated = function () {\n    var minSlack = Number.MAX_VALUE,\n        v = null,\n        l = this.inactive,\n        n = l.length,\n        deletePoint = n;\n\n    for (var i = 0; i < n; ++i) {\n      var c = l[i];\n      if (c.unsatisfiable) continue;\n      var slack = c.slack();\n\n      if (c.equality || slack < minSlack) {\n        minSlack = slack;\n        v = c;\n        deletePoint = i;\n        if (c.equality) break;\n      }\n    }\n\n    if (deletePoint !== n && (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\n      l[deletePoint] = l[n - 1];\n      l.length = n - 1;\n    }\n\n    return v;\n  };\n\n  Solver.prototype.satisfy = function () {\n    if (this.bs == null) {\n      this.bs = new Blocks(this.vs);\n    }\n\n    this.bs.split(this.inactive);\n    var v = null;\n\n    while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n      var lb = v.left.block,\n          rb = v.right.block;\n\n      if (lb !== rb) {\n        this.bs.merge(v);\n      } else {\n        if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n          v.unsatisfiable = true;\n          continue;\n        }\n\n        var split = lb.splitBetween(v.left, v.right);\n\n        if (split !== null) {\n          this.bs.insert(split.lb);\n          this.bs.insert(split.rb);\n          this.bs.remove(lb);\n          this.inactive.push(split.constraint);\n        } else {\n          v.unsatisfiable = true;\n          continue;\n        }\n\n        if (v.slack() >= 0) {\n          this.inactive.push(v);\n        } else {\n          this.bs.merge(v);\n        }\n      }\n    }\n  };\n\n  Solver.prototype.solve = function () {\n    this.satisfy();\n    var lastcost = Number.MAX_VALUE,\n        cost = this.bs.cost();\n\n    while (Math.abs(lastcost - cost) > 0.0001) {\n      this.satisfy();\n      lastcost = cost;\n      cost = this.bs.cost();\n    }\n\n    return cost;\n  };\n\n  Solver.LAGRANGIAN_TOLERANCE = -1e-4;\n  Solver.ZERO_UPPERBOUND = -1e-10;\n  return Solver;\n}();\n\nexports.Solver = Solver;\n\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\n  var vs = spans.map(function (s) {\n    return new Variable(s.desiredCenter);\n  });\n  var cs = [];\n  var n = spans.length;\n\n  for (var i = 0; i < n - 1; i++) {\n    var left = spans[i],\n        right = spans[i + 1];\n    cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\n  }\n\n  var leftMost = vs[0],\n      rightMost = vs[n - 1],\n      leftMostSize = spans[0].size / 2,\n      rightMostSize = spans[n - 1].size / 2;\n  var vLower = null,\n      vUpper = null;\n\n  if (lowerBound) {\n    vLower = new Variable(lowerBound, leftMost.weight * 1000);\n    vs.push(vLower);\n    cs.push(new Constraint(vLower, leftMost, leftMostSize));\n  }\n\n  if (upperBound) {\n    vUpper = new Variable(upperBound, rightMost.weight * 1000);\n    vs.push(vUpper);\n    cs.push(new Constraint(rightMost, vUpper, rightMostSize));\n  }\n\n  var solver = new Solver(vs, cs);\n  solver.solve();\n  return {\n    newCenters: vs.slice(0, spans.length).map(function (v) {\n      return v.position();\n    }),\n    lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\n    upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\n  };\n}\n\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;","map":{"version":3,"sources":["../../WebCola/src/vpsc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PositionStats = (function () {\r\n    function PositionStats(scale) {\r\n        this.scale = scale;\r\n        this.AB = 0;\r\n        this.AD = 0;\r\n        this.A2 = 0;\r\n    }\r\n    PositionStats.prototype.addVariable = function (v) {\r\n        var ai = this.scale / v.scale;\r\n        var bi = v.offset / v.scale;\r\n        var wi = v.weight;\r\n        this.AB += wi * ai * bi;\r\n        this.AD += wi * ai * v.desiredPosition;\r\n        this.A2 += wi * ai * ai;\r\n    };\r\n    PositionStats.prototype.getPosn = function () {\r\n        return (this.AD - this.AB) / this.A2;\r\n    };\r\n    return PositionStats;\r\n}());\r\nexports.PositionStats = PositionStats;\r\nvar Constraint = (function () {\r\n    function Constraint(left, right, gap, equality) {\r\n        if (equality === void 0) { equality = false; }\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n        this.active = false;\r\n        this.unsatisfiable = false;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n    }\r\n    Constraint.prototype.slack = function () {\r\n        return this.unsatisfiable ? Number.MAX_VALUE\r\n            : this.right.scale * this.right.position() - this.gap\r\n                - this.left.scale * this.left.position();\r\n    };\r\n    return Constraint;\r\n}());\r\nexports.Constraint = Constraint;\r\nvar Variable = (function () {\r\n    function Variable(desiredPosition, weight, scale) {\r\n        if (weight === void 0) { weight = 1; }\r\n        if (scale === void 0) { scale = 1; }\r\n        this.desiredPosition = desiredPosition;\r\n        this.weight = weight;\r\n        this.scale = scale;\r\n        this.offset = 0;\r\n    }\r\n    Variable.prototype.dfdv = function () {\r\n        return 2.0 * this.weight * (this.position() - this.desiredPosition);\r\n    };\r\n    Variable.prototype.position = function () {\r\n        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\r\n    };\r\n    Variable.prototype.visitNeighbours = function (prev, f) {\r\n        var ff = function (c, next) { return c.active && prev !== next && f(c, next); };\r\n        this.cOut.forEach(function (c) { return ff(c, c.right); });\r\n        this.cIn.forEach(function (c) { return ff(c, c.left); });\r\n    };\r\n    return Variable;\r\n}());\r\nexports.Variable = Variable;\r\nvar Block = (function () {\r\n    function Block(v) {\r\n        this.vars = [];\r\n        v.offset = 0;\r\n        this.ps = new PositionStats(v.scale);\r\n        this.addVariable(v);\r\n    }\r\n    Block.prototype.addVariable = function (v) {\r\n        v.block = this;\r\n        this.vars.push(v);\r\n        this.ps.addVariable(v);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.updateWeightedPosition = function () {\r\n        this.ps.AB = this.ps.AD = this.ps.A2 = 0;\r\n        for (var i = 0, n = this.vars.length; i < n; ++i)\r\n            this.ps.addVariable(this.vars[i]);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.compute_lm = function (v, u, postAction) {\r\n        var _this = this;\r\n        var dfdv = v.dfdv();\r\n        v.visitNeighbours(u, function (c, next) {\r\n            var _dfdv = _this.compute_lm(next, v, postAction);\r\n            if (next === c.right) {\r\n                dfdv += _dfdv * c.left.scale;\r\n                c.lm = _dfdv;\r\n            }\r\n            else {\r\n                dfdv += _dfdv * c.right.scale;\r\n                c.lm = -_dfdv;\r\n            }\r\n            postAction(c);\r\n        });\r\n        return dfdv / v.scale;\r\n    };\r\n    Block.prototype.populateSplitBlock = function (v, prev) {\r\n        var _this = this;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\r\n            _this.addVariable(next);\r\n            _this.populateSplitBlock(next, v);\r\n        });\r\n    };\r\n    Block.prototype.traverse = function (visit, acc, v, prev) {\r\n        var _this = this;\r\n        if (v === void 0) { v = this.vars[0]; }\r\n        if (prev === void 0) { prev = null; }\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            acc.push(visit(c));\r\n            _this.traverse(visit, acc, next, v);\r\n        });\r\n    };\r\n    Block.prototype.findMinLM = function () {\r\n        var m = null;\r\n        this.compute_lm(this.vars[0], null, function (c) {\r\n            if (!c.equality && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findMinLMBetween = function (lv, rv) {\r\n        this.compute_lm(lv, null, function () { });\r\n        var m = null;\r\n        this.findPath(lv, null, rv, function (c, next) {\r\n            if (!c.equality && c.right === next && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findPath = function (v, prev, to, visit) {\r\n        var _this = this;\r\n        var endFound = false;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\r\n                endFound = true;\r\n                visit(c, next);\r\n            }\r\n        });\r\n        return endFound;\r\n    };\r\n    Block.prototype.isActiveDirectedPathBetween = function (u, v) {\r\n        if (u === v)\r\n            return true;\r\n        var i = u.cOut.length;\r\n        while (i--) {\r\n            var c = u.cOut[i];\r\n            if (c.active && this.isActiveDirectedPathBetween(c.right, v))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    Block.split = function (c) {\r\n        c.active = false;\r\n        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\r\n    };\r\n    Block.createSplitBlock = function (startVar) {\r\n        var b = new Block(startVar);\r\n        b.populateSplitBlock(startVar, null);\r\n        return b;\r\n    };\r\n    Block.prototype.splitBetween = function (vl, vr) {\r\n        var c = this.findMinLMBetween(vl, vr);\r\n        if (c !== null) {\r\n            var bs = Block.split(c);\r\n            return { constraint: c, lb: bs[0], rb: bs[1] };\r\n        }\r\n        return null;\r\n    };\r\n    Block.prototype.mergeAcross = function (b, c, dist) {\r\n        c.active = true;\r\n        for (var i = 0, n = b.vars.length; i < n; ++i) {\r\n            var v = b.vars[i];\r\n            v.offset += dist;\r\n            this.addVariable(v);\r\n        }\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.cost = function () {\r\n        var sum = 0, i = this.vars.length;\r\n        while (i--) {\r\n            var v = this.vars[i], d = v.position() - v.desiredPosition;\r\n            sum += d * d * v.weight;\r\n        }\r\n        return sum;\r\n    };\r\n    return Block;\r\n}());\r\nexports.Block = Block;\r\nvar Blocks = (function () {\r\n    function Blocks(vs) {\r\n        this.vs = vs;\r\n        var n = vs.length;\r\n        this.list = new Array(n);\r\n        while (n--) {\r\n            var b = new Block(vs[n]);\r\n            this.list[n] = b;\r\n            b.blockInd = n;\r\n        }\r\n    }\r\n    Blocks.prototype.cost = function () {\r\n        var sum = 0, i = this.list.length;\r\n        while (i--)\r\n            sum += this.list[i].cost();\r\n        return sum;\r\n    };\r\n    Blocks.prototype.insert = function (b) {\r\n        b.blockInd = this.list.length;\r\n        this.list.push(b);\r\n    };\r\n    Blocks.prototype.remove = function (b) {\r\n        var last = this.list.length - 1;\r\n        var swapBlock = this.list[last];\r\n        this.list.length = last;\r\n        if (b !== swapBlock) {\r\n            this.list[b.blockInd] = swapBlock;\r\n            swapBlock.blockInd = b.blockInd;\r\n        }\r\n    };\r\n    Blocks.prototype.merge = function (c) {\r\n        var l = c.left.block, r = c.right.block;\r\n        var dist = c.right.offset - c.left.offset - c.gap;\r\n        if (l.vars.length < r.vars.length) {\r\n            r.mergeAcross(l, c, dist);\r\n            this.remove(l);\r\n        }\r\n        else {\r\n            l.mergeAcross(r, c, -dist);\r\n            this.remove(r);\r\n        }\r\n    };\r\n    Blocks.prototype.forEach = function (f) {\r\n        this.list.forEach(f);\r\n    };\r\n    Blocks.prototype.updateBlockPositions = function () {\r\n        this.list.forEach(function (b) { return b.updateWeightedPosition(); });\r\n    };\r\n    Blocks.prototype.split = function (inactive) {\r\n        var _this = this;\r\n        this.updateBlockPositions();\r\n        this.list.forEach(function (b) {\r\n            var v = b.findMinLM();\r\n            if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\r\n                b = v.left.block;\r\n                Block.split(v).forEach(function (nb) { return _this.insert(nb); });\r\n                _this.remove(b);\r\n                inactive.push(v);\r\n            }\r\n        });\r\n    };\r\n    return Blocks;\r\n}());\r\nexports.Blocks = Blocks;\r\nvar Solver = (function () {\r\n    function Solver(vs, cs) {\r\n        this.vs = vs;\r\n        this.cs = cs;\r\n        this.vs = vs;\r\n        vs.forEach(function (v) {\r\n            v.cIn = [], v.cOut = [];\r\n        });\r\n        this.cs = cs;\r\n        cs.forEach(function (c) {\r\n            c.left.cOut.push(c);\r\n            c.right.cIn.push(c);\r\n        });\r\n        this.inactive = cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = null;\r\n    }\r\n    Solver.prototype.cost = function () {\r\n        return this.bs.cost();\r\n    };\r\n    Solver.prototype.setStartingPositions = function (ps) {\r\n        this.inactive = this.cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = new Blocks(this.vs);\r\n        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });\r\n    };\r\n    Solver.prototype.setDesiredPositions = function (ps) {\r\n        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });\r\n    };\r\n    Solver.prototype.mostViolated = function () {\r\n        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\r\n        for (var i = 0; i < n; ++i) {\r\n            var c = l[i];\r\n            if (c.unsatisfiable)\r\n                continue;\r\n            var slack = c.slack();\r\n            if (c.equality || slack < minSlack) {\r\n                minSlack = slack;\r\n                v = c;\r\n                deletePoint = i;\r\n                if (c.equality)\r\n                    break;\r\n            }\r\n        }\r\n        if (deletePoint !== n &&\r\n            (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\r\n            l[deletePoint] = l[n - 1];\r\n            l.length = n - 1;\r\n        }\r\n        return v;\r\n    };\r\n    Solver.prototype.satisfy = function () {\r\n        if (this.bs == null) {\r\n            this.bs = new Blocks(this.vs);\r\n        }\r\n        this.bs.split(this.inactive);\r\n        var v = null;\r\n        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\r\n            var lb = v.left.block, rb = v.right.block;\r\n            if (lb !== rb) {\r\n                this.bs.merge(v);\r\n            }\r\n            else {\r\n                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                var split = lb.splitBetween(v.left, v.right);\r\n                if (split !== null) {\r\n                    this.bs.insert(split.lb);\r\n                    this.bs.insert(split.rb);\r\n                    this.bs.remove(lb);\r\n                    this.inactive.push(split.constraint);\r\n                }\r\n                else {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                if (v.slack() >= 0) {\r\n                    this.inactive.push(v);\r\n                }\r\n                else {\r\n                    this.bs.merge(v);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Solver.prototype.solve = function () {\r\n        this.satisfy();\r\n        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\r\n        while (Math.abs(lastcost - cost) > 0.0001) {\r\n            this.satisfy();\r\n            lastcost = cost;\r\n            cost = this.bs.cost();\r\n        }\r\n        return cost;\r\n    };\r\n    Solver.LAGRANGIAN_TOLERANCE = -1e-4;\r\n    Solver.ZERO_UPPERBOUND = -1e-10;\r\n    return Solver;\r\n}());\r\nexports.Solver = Solver;\r\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\r\n    var vs = spans.map(function (s) { return new Variable(s.desiredCenter); });\r\n    var cs = [];\r\n    var n = spans.length;\r\n    for (var i = 0; i < n - 1; i++) {\r\n        var left = spans[i], right = spans[i + 1];\r\n        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\r\n    }\r\n    var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;\r\n    var vLower = null, vUpper = null;\r\n    if (lowerBound) {\r\n        vLower = new Variable(lowerBound, leftMost.weight * 1000);\r\n        vs.push(vLower);\r\n        cs.push(new Constraint(vLower, leftMost, leftMostSize));\r\n    }\r\n    if (upperBound) {\r\n        vUpper = new Variable(upperBound, rightMost.weight * 1000);\r\n        vs.push(vUpper);\r\n        cs.push(new Constraint(rightMost, vUpper, rightMostSize));\r\n    }\r\n    var solver = new Solver(vs, cs);\r\n    solver.solve();\r\n    return {\r\n        newCenters: vs.slice(0, spans.length).map(function (v) { return v.position(); }),\r\n        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\r\n        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\r\n    };\r\n}\r\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;\r\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}
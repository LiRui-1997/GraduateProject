{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { FILTER_ACTION_APPEND } from '../../types/Filters';\nimport { hasHealth } from '../../types/Health';\nimport { istioSidecarFilter, healthFilter, labelFilter, getPresenceFilterValue, getFilterSelectedValues, filterByHealth } from '../../components/Filters/CommonFilters';\nimport { hasMissingSidecar } from '../../components/VirtualList/Config';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { filterByLabel } from '../../helpers/LabelFilterHelper';\nimport { calculateErrorRate } from '../../types/ErrorRate';\nimport { istioTypeFilter } from '../IstioConfigList/FiltersAndSorts';\nimport { compareObjectReferences } from '../AppList/FiltersAndSorts';\nexport var sortFields = [{\n  id: 'namespace',\n  title: 'Namespace',\n  isNumeric: false,\n  param: 'ns',\n  compare: function compare(a, b) {\n    var sortValue = a.namespace.localeCompare(b.namespace);\n\n    if (sortValue === 0) {\n      sortValue = a.name.localeCompare(b.name);\n    }\n\n    return sortValue;\n  }\n}, {\n  id: 'servicename',\n  title: 'Service Name',\n  isNumeric: false,\n  param: 'sn',\n  compare: function compare(a, b) {\n    return a.name.localeCompare(b.name);\n  }\n}, {\n  id: 'details',\n  title: 'Details',\n  isNumeric: false,\n  param: 'is',\n  compare: function compare(a, b) {\n    // First sort by missing sidecar\n    var aSC = hasMissingSidecar(a) ? 1 : 0;\n    var bSC = hasMissingSidecar(b) ? 1 : 0;\n\n    if (aSC !== bSC) {\n      return aSC - bSC;\n    } // Second by Details\n\n\n    var iRefA = a.istioReferences;\n    var iRefB = b.istioReferences;\n    var cmpRefs = compareObjectReferences(iRefA, iRefB);\n\n    if (cmpRefs !== 0) {\n      return cmpRefs;\n    } // Then by additional details\n\n\n    var iconA = a.additionalDetailSample && a.additionalDetailSample.icon;\n    var iconB = b.additionalDetailSample && b.additionalDetailSample.icon;\n\n    if (iconA || iconB) {\n      if (iconA && iconB) {\n        var cmp = iconA.localeCompare(iconB);\n\n        if (cmp !== 0) {\n          return cmp;\n        }\n      } else {\n        // Make asc => icon absence is last\n        return iconA ? -1 : 1;\n      }\n    } // Finally by name\n\n\n    return a.name.localeCompare(b.name);\n  }\n}, {\n  id: 'health',\n  title: 'Health',\n  isNumeric: false,\n  param: 'he',\n  compare: function compare(a, b) {\n    if (hasHealth(a) && hasHealth(b)) {\n      var statusForA = a.health.getGlobalStatus();\n      var statusForB = b.health.getGlobalStatus();\n\n      if (statusForA.priority === statusForB.priority) {\n        // If both services have same health status, use error rate to determine order.\n        var ratioA = calculateErrorRate(a.namespace, a.name, 'service', a.health.requests).errorRatio.global.status.value;\n        var ratioB = calculateErrorRate(b.namespace, b.name, 'service', b.health.requests).errorRatio.global.status.value;\n        return ratioA === ratioB ? a.name.localeCompare(b.name) : ratioB - ratioA;\n      }\n\n      return statusForB.priority - statusForA.priority;\n    } else {\n      return 0;\n    }\n  }\n}, {\n  id: 'configvalidation',\n  title: 'Config',\n  isNumeric: false,\n  param: 'cv',\n  compare: function compare(a, b) {\n    var sortValue = -1;\n\n    if (a.validation && !b.validation) {\n      sortValue = -1;\n    } else if (!a.validation && b.validation) {\n      sortValue = 1;\n    } else if (!a.validation && !b.validation) {\n      sortValue = 0;\n    } else if (a.validation && b.validation) {\n      if (a.validation.valid && !b.validation.valid) {\n        sortValue = -1;\n      } else if (!a.validation.valid && b.validation.valid) {\n        sortValue = 1;\n      } else if (a.validation.valid && b.validation.valid) {\n        sortValue = a.validation.checks.length - b.validation.checks.length;\n      } else if (!a.validation.valid && !b.validation.valid) {\n        sortValue = b.validation.checks.length - a.validation.checks.length;\n      }\n    }\n\n    return sortValue || a.name.localeCompare(b.name);\n  }\n}];\nvar serviceNameFilter = {\n  id: 'servicename',\n  title: 'Service Name',\n  placeholder: 'Filter by Service Name',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\nexport var availableFilters = [serviceNameFilter, istioSidecarFilter, istioTypeFilter, healthFilter, labelFilter];\n\nvar filterByIstioSidecar = function filterByIstioSidecar(items, istioSidecar) {\n  return items.filter(function (item) {\n    return item.istioSidecar === istioSidecar;\n  });\n};\n\nvar filterByName = function filterByName(items, names) {\n  return items.filter(function (item) {\n    var serviceNameFiltered = true;\n\n    if (names.length > 0) {\n      serviceNameFiltered = false;\n\n      for (var i = 0; i < names.length; i++) {\n        if (item.name.includes(names[i])) {\n          serviceNameFiltered = true;\n          break;\n        }\n      }\n    }\n\n    return serviceNameFiltered;\n  });\n};\n\nvar filterByIstioType = function filterByIstioType(items, istioTypes) {\n  return items.filter(function (item) {\n    return item.istioReferences.filter(function (ref) {\n      return istioTypes.includes(ref.objectType);\n    }).length !== 0;\n  });\n};\n\nexport var filterBy = function filterBy(items, filters) {\n  var ret = items;\n  var istioSidecar = getPresenceFilterValue(istioSidecarFilter, filters);\n\n  if (istioSidecar !== undefined) {\n    ret = filterByIstioSidecar(ret, istioSidecar);\n  }\n\n  var serviceNamesSelected = getFilterSelectedValues(serviceNameFilter, filters);\n\n  if (serviceNamesSelected.length > 0) {\n    ret = filterByName(ret, serviceNamesSelected);\n  }\n\n  var serviceFilterSelected = getFilterSelectedValues(labelFilter, filters);\n\n  if (serviceFilterSelected.length > 0) {\n    ret = filterByLabel(ret, serviceFilterSelected, filters.op);\n  } // We may have to perform a second round of filtering, using data fetched asynchronously (health)\n  // If not, exit fast\n\n\n  var healthSelected = getFilterSelectedValues(healthFilter, filters);\n\n  if (healthSelected.length > 0) {\n    return filterByHealth(ret, healthSelected);\n  }\n\n  var istioTypeSelected = getFilterSelectedValues(istioTypeFilter, filters);\n\n  if (istioTypeSelected.length > 0) {\n    return filterByIstioType(ret, istioTypeSelected);\n  }\n\n  return ret;\n}; // Exported for test\n\nexport var sortServices = function sortServices(services, sortField, isAscending) {\n  if (sortField.title === 'Health') {\n    // In the case of health sorting, we may not have all health promises ready yet\n    // So we need to get them all before actually sorting\n    var allHealthPromises = services.map(function (item) {\n      return item.healthPromise.then(function (health) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          health: health\n        });\n      });\n    });\n    return Promise.all(allHealthPromises).then(function (arr) {\n      return arr.sort(isAscending ? sortField.compare : function (a, b) {\n        return sortField.compare(b, a);\n      });\n    });\n  } // Default case: sorting is done synchronously\n\n\n  var sorted = services.sort(isAscending ? sortField.compare : function (a, b) {\n    return sortField.compare(b, a);\n  });\n  return Promise.resolve(sorted);\n};","map":{"version":3,"sources":["/root/kiali-ui/src/pages/ServiceList/FiltersAndSorts.ts"],"names":["FILTER_ACTION_APPEND","hasHealth","istioSidecarFilter","healthFilter","labelFilter","getPresenceFilterValue","getFilterSelectedValues","filterByHealth","hasMissingSidecar","TextInputTypes","filterByLabel","calculateErrorRate","istioTypeFilter","compareObjectReferences","sortFields","id","title","isNumeric","param","compare","a","b","sortValue","namespace","localeCompare","name","aSC","bSC","iRefA","istioReferences","iRefB","cmpRefs","iconA","additionalDetailSample","icon","iconB","cmp","statusForA","health","getGlobalStatus","statusForB","priority","ratioA","requests","errorRatio","global","status","value","ratioB","validation","valid","checks","length","serviceNameFilter","placeholder","filterType","text","action","filterValues","availableFilters","filterByIstioSidecar","items","istioSidecar","filter","item","filterByName","names","serviceNameFiltered","i","includes","filterByIstioType","istioTypes","ref","objectType","filterBy","filters","ret","undefined","serviceNamesSelected","serviceFilterSelected","op","healthSelected","istioTypeSelected","sortServices","services","sortField","isAscending","allHealthPromises","map","healthPromise","then","Promise","all","arr","sort","sorted","resolve"],"mappings":";AAAA,SAAwCA,oBAAxC,QAAoE,qBAApE;AACA,SAA4BC,SAA5B,QAA6C,oBAA7C;AAGA,SACEC,kBADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,sBAJF,EAKEC,uBALF,EAMEC,cANF,QAOO,wCAPP;AAQA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AAEA,OAAO,IAAMC,UAAwC,GAAG,CACtD;AACEC,EAAAA,EAAE,EAAE,WADN;AAEEC,EAAAA,KAAK,EAAE,WAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,KAAK,EAAE,IAJT;AAKEC,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAqBC,CAArB,EAA4C;AACnD,QAAIC,SAAS,GAAGF,CAAC,CAACG,SAAF,CAAYC,aAAZ,CAA0BH,CAAC,CAACE,SAA5B,CAAhB;;AACA,QAAID,SAAS,KAAK,CAAlB,EAAqB;AACnBA,MAAAA,SAAS,GAAGF,CAAC,CAACK,IAAF,CAAOD,aAAP,CAAqBH,CAAC,CAACI,IAAvB,CAAZ;AACD;;AACD,WAAOH,SAAP;AACD;AAXH,CADsD,EActD;AACEP,EAAAA,EAAE,EAAE,aADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,KAAK,EAAE,IAJT;AAKEC,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAqBC,CAArB;AAAA,WAA4CD,CAAC,CAACK,IAAF,CAAOD,aAAP,CAAqBH,CAAC,CAACI,IAAvB,CAA5C;AAAA;AALX,CAdsD,EAqBtD;AACEV,EAAAA,EAAE,EAAE,SADN;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,KAAK,EAAE,IAJT;AAKEC,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAqBC,CAArB,EAA4C;AACnD;AACA,QAAMK,GAAG,GAAGlB,iBAAiB,CAACY,CAAD,CAAjB,GAAuB,CAAvB,GAA2B,CAAvC;AACA,QAAMO,GAAG,GAAGnB,iBAAiB,CAACa,CAAD,CAAjB,GAAuB,CAAvB,GAA2B,CAAvC;;AACA,QAAIK,GAAG,KAAKC,GAAZ,EAAiB;AACf,aAAOD,GAAG,GAAGC,GAAb;AACD,KANkD,CAQnD;;;AACA,QAAMC,KAAK,GAAGR,CAAC,CAACS,eAAhB;AACA,QAAMC,KAAK,GAAGT,CAAC,CAACQ,eAAhB;AACA,QAAME,OAAO,GAAGlB,uBAAuB,CAACe,KAAD,EAAQE,KAAR,CAAvC;;AACA,QAAIC,OAAO,KAAK,CAAhB,EAAmB;AACjB,aAAOA,OAAP;AACD,KAdkD,CAgBnD;;;AACA,QAAMC,KAAK,GAAGZ,CAAC,CAACa,sBAAF,IAA4Bb,CAAC,CAACa,sBAAF,CAAyBC,IAAnE;AACA,QAAMC,KAAK,GAAGd,CAAC,CAACY,sBAAF,IAA4BZ,CAAC,CAACY,sBAAF,CAAyBC,IAAnE;;AACA,QAAIF,KAAK,IAAIG,KAAb,EAAoB;AAClB,UAAIH,KAAK,IAAIG,KAAb,EAAoB;AAClB,YAAMC,GAAG,GAAGJ,KAAK,CAACR,aAAN,CAAoBW,KAApB,CAAZ;;AACA,YAAIC,GAAG,KAAK,CAAZ,EAAe;AACb,iBAAOA,GAAP;AACD;AACF,OALD,MAKO;AACL;AACA,eAAOJ,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAApB;AACD;AACF,KA7BkD,CA8BnD;;;AACA,WAAOZ,CAAC,CAACK,IAAF,CAAOD,aAAP,CAAqBH,CAAC,CAACI,IAAvB,CAAP;AACD;AArCH,CArBsD,EA4DtD;AACEV,EAAAA,EAAE,EAAE,QADN;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,KAAK,EAAE,IAJT;AAKEC,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAIC,CAAJ,EAAU;AACjB,QAAIpB,SAAS,CAACmB,CAAD,CAAT,IAAgBnB,SAAS,CAACoB,CAAD,CAA7B,EAAkC;AAChC,UAAMgB,UAAU,GAAGjB,CAAC,CAACkB,MAAF,CAASC,eAAT,EAAnB;AACA,UAAMC,UAAU,GAAGnB,CAAC,CAACiB,MAAF,CAASC,eAAT,EAAnB;;AAEA,UAAIF,UAAU,CAACI,QAAX,KAAwBD,UAAU,CAACC,QAAvC,EAAiD;AAC/C;AACA,YAAMC,MAAM,GAAG/B,kBAAkB,CAACS,CAAC,CAACG,SAAH,EAAcH,CAAC,CAACK,IAAhB,EAAsB,SAAtB,EAAiCL,CAAC,CAACkB,MAAF,CAASK,QAA1C,CAAlB,CAAsEC,UAAtE,CAAiFC,MAAjF,CAAwFC,MAAxF,CACZC,KADH;AAEA,YAAMC,MAAM,GAAGrC,kBAAkB,CAACU,CAAC,CAACE,SAAH,EAAcF,CAAC,CAACI,IAAhB,EAAsB,SAAtB,EAAiCJ,CAAC,CAACiB,MAAF,CAASK,QAA1C,CAAlB,CAAsEC,UAAtE,CAAiFC,MAAjF,CAAwFC,MAAxF,CACZC,KADH;AAEA,eAAOL,MAAM,KAAKM,MAAX,GAAoB5B,CAAC,CAACK,IAAF,CAAOD,aAAP,CAAqBH,CAAC,CAACI,IAAvB,CAApB,GAAmDuB,MAAM,GAAGN,MAAnE;AACD;;AAED,aAAOF,UAAU,CAACC,QAAX,GAAsBJ,UAAU,CAACI,QAAxC;AACD,KAdD,MAcO;AACL,aAAO,CAAP;AACD;AACF;AAvBH,CA5DsD,EAqFtD;AACE1B,EAAAA,EAAE,EAAE,kBADN;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,KAAK,EAAE,IAJT;AAKEC,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAqBC,CAArB,EAA4C;AACnD,QAAIC,SAAS,GAAG,CAAC,CAAjB;;AACA,QAAIF,CAAC,CAAC6B,UAAF,IAAgB,CAAC5B,CAAC,CAAC4B,UAAvB,EAAmC;AACjC3B,MAAAA,SAAS,GAAG,CAAC,CAAb;AACD,KAFD,MAEO,IAAI,CAACF,CAAC,CAAC6B,UAAH,IAAiB5B,CAAC,CAAC4B,UAAvB,EAAmC;AACxC3B,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFM,MAEA,IAAI,CAACF,CAAC,CAAC6B,UAAH,IAAiB,CAAC5B,CAAC,CAAC4B,UAAxB,EAAoC;AACzC3B,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFM,MAEA,IAAIF,CAAC,CAAC6B,UAAF,IAAgB5B,CAAC,CAAC4B,UAAtB,EAAkC;AACvC,UAAI7B,CAAC,CAAC6B,UAAF,CAAaC,KAAb,IAAsB,CAAC7B,CAAC,CAAC4B,UAAF,CAAaC,KAAxC,EAA+C;AAC7C5B,QAAAA,SAAS,GAAG,CAAC,CAAb;AACD,OAFD,MAEO,IAAI,CAACF,CAAC,CAAC6B,UAAF,CAAaC,KAAd,IAAuB7B,CAAC,CAAC4B,UAAF,CAAaC,KAAxC,EAA+C;AACpD5B,QAAAA,SAAS,GAAG,CAAZ;AACD,OAFM,MAEA,IAAIF,CAAC,CAAC6B,UAAF,CAAaC,KAAb,IAAsB7B,CAAC,CAAC4B,UAAF,CAAaC,KAAvC,EAA8C;AACnD5B,QAAAA,SAAS,GAAGF,CAAC,CAAC6B,UAAF,CAAaE,MAAb,CAAoBC,MAApB,GAA6B/B,CAAC,CAAC4B,UAAF,CAAaE,MAAb,CAAoBC,MAA7D;AACD,OAFM,MAEA,IAAI,CAAChC,CAAC,CAAC6B,UAAF,CAAaC,KAAd,IAAuB,CAAC7B,CAAC,CAAC4B,UAAF,CAAaC,KAAzC,EAAgD;AACrD5B,QAAAA,SAAS,GAAGD,CAAC,CAAC4B,UAAF,CAAaE,MAAb,CAAoBC,MAApB,GAA6BhC,CAAC,CAAC6B,UAAF,CAAaE,MAAb,CAAoBC,MAA7D;AACD;AACF;;AAED,WAAO9B,SAAS,IAAIF,CAAC,CAACK,IAAF,CAAOD,aAAP,CAAqBH,CAAC,CAACI,IAAvB,CAApB;AACD;AA1BH,CArFsD,CAAjD;AAmHP,IAAM4B,iBAA6B,GAAG;AACpCtC,EAAAA,EAAE,EAAE,aADgC;AAEpCC,EAAAA,KAAK,EAAE,cAF6B;AAGpCsC,EAAAA,WAAW,EAAE,wBAHuB;AAIpCC,EAAAA,UAAU,EAAE9C,cAAc,CAAC+C,IAJS;AAKpCC,EAAAA,MAAM,EAAEzD,oBAL4B;AAMpC0D,EAAAA,YAAY,EAAE;AANsB,CAAtC;AASA,OAAO,IAAMC,gBAA8B,GAAG,CAC5CN,iBAD4C,EAE5CnD,kBAF4C,EAG5CU,eAH4C,EAI5CT,YAJ4C,EAK5CC,WAL4C,CAAvC;;AAQP,IAAMwD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAA2BC,YAA3B,EAAwE;AACnG,SAAOD,KAAK,CAACE,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACF,YAAL,KAAsBA,YAA1B;AAAA,GAAjB,CAAP;AACD,CAFD;;AAIA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACJ,KAAD,EAA2BK,KAA3B,EAAkE;AACrF,SAAOL,KAAK,CAACE,MAAN,CAAa,UAAAC,IAAI,EAAI;AAC1B,QAAIG,mBAAmB,GAAG,IAA1B;;AACA,QAAID,KAAK,CAACd,MAAN,GAAe,CAAnB,EAAsB;AACpBe,MAAAA,mBAAmB,GAAG,KAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACd,MAA1B,EAAkCgB,CAAC,EAAnC,EAAuC;AACrC,YAAIJ,IAAI,CAACvC,IAAL,CAAU4C,QAAV,CAAmBH,KAAK,CAACE,CAAD,CAAxB,CAAJ,EAAkC;AAChCD,UAAAA,mBAAmB,GAAG,IAAtB;AACA;AACD;AACF;AACF;;AACD,WAAOA,mBAAP;AACD,GAZM,CAAP;AAaD,CAdD;;AAgBA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACT,KAAD,EAA2BU,UAA3B,EAAuE;AAC/F,SAAOV,KAAK,CAACE,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACnC,eAAL,CAAqBkC,MAArB,CAA4B,UAAAS,GAAG;AAAA,aAAID,UAAU,CAACF,QAAX,CAAoBG,GAAG,CAACC,UAAxB,CAAJ;AAAA,KAA/B,EAAwErB,MAAxE,KAAmF,CAAvF;AAAA,GAAjB,CAAP;AACD,CAFD;;AAIA,OAAO,IAAMsB,QAAQ,GAAG,SAAXA,QAAW,CACtBb,KADsB,EAEtBc,OAFsB,EAG6B;AACnD,MAAIC,GAAG,GAAGf,KAAV;AACA,MAAMC,YAAY,GAAGzD,sBAAsB,CAACH,kBAAD,EAAqByE,OAArB,CAA3C;;AACA,MAAIb,YAAY,KAAKe,SAArB,EAAgC;AAC9BD,IAAAA,GAAG,GAAGhB,oBAAoB,CAACgB,GAAD,EAAMd,YAAN,CAA1B;AACD;;AAED,MAAMgB,oBAAoB,GAAGxE,uBAAuB,CAAC+C,iBAAD,EAAoBsB,OAApB,CAApD;;AACA,MAAIG,oBAAoB,CAAC1B,MAArB,GAA8B,CAAlC,EAAqC;AACnCwB,IAAAA,GAAG,GAAGX,YAAY,CAACW,GAAD,EAAME,oBAAN,CAAlB;AACD;;AAED,MAAMC,qBAAqB,GAAGzE,uBAAuB,CAACF,WAAD,EAAcuE,OAAd,CAArD;;AACA,MAAII,qBAAqB,CAAC3B,MAAtB,GAA+B,CAAnC,EAAsC;AACpCwB,IAAAA,GAAG,GAAGlE,aAAa,CAACkE,GAAD,EAAMG,qBAAN,EAA6BJ,OAAO,CAACK,EAArC,CAAnB;AACD,GAfkD,CAgBnD;AACA;;;AACA,MAAMC,cAAc,GAAG3E,uBAAuB,CAACH,YAAD,EAAewE,OAAf,CAA9C;;AACA,MAAIM,cAAc,CAAC7B,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,WAAO7C,cAAc,CAACqE,GAAD,EAAMK,cAAN,CAArB;AACD;;AAED,MAAMC,iBAAiB,GAAG5E,uBAAuB,CAACM,eAAD,EAAkB+D,OAAlB,CAAjD;;AACA,MAAIO,iBAAiB,CAAC9B,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,WAAOkB,iBAAiB,CAACM,GAAD,EAAMM,iBAAN,CAAxB;AACD;;AACD,SAAON,GAAP;AACD,CA/BM,C,CAiCP;;AACA,OAAO,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAC1BC,QAD0B,EAE1BC,SAF0B,EAG1BC,WAH0B,EAIK;AAC/B,MAAID,SAAS,CAACrE,KAAV,KAAoB,QAAxB,EAAkC;AAChC;AACA;AACA,QAAMuE,iBAAgE,GAAGH,QAAQ,CAACI,GAAT,CAAa,UAAAxB,IAAI,EAAI;AAC5F,aAAOA,IAAI,CAACyB,aAAL,CAAmBC,IAAnB,CAAwB,UAACpD,MAAD;AAAA,+CAAsD0B,IAAtD;AAA4D1B,UAAAA,MAAM,EAANA;AAA5D;AAAA,OAAxB,CAAP;AACD,KAFwE,CAAzE;AAGA,WAAOqD,OAAO,CAACC,GAAR,CAAYL,iBAAZ,EAA+BG,IAA/B,CAAoC,UAAAG,GAAG,EAAI;AAChD,aAAOA,GAAG,CAACC,IAAJ,CAASR,WAAW,GAAGD,SAAS,CAAClE,OAAb,GAAuB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUgE,SAAS,CAAClE,OAAV,CAAkBE,CAAlB,EAAqBD,CAArB,CAAV;AAAA,OAA3C,CAAP;AACD,KAFM,CAAP;AAGD,GAV8B,CAW/B;;;AACA,MAAM2E,MAAM,GAAGX,QAAQ,CAACU,IAAT,CAAcR,WAAW,GAAGD,SAAS,CAAClE,OAAb,GAAuB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUgE,SAAS,CAAClE,OAAV,CAAkBE,CAAlB,EAAqBD,CAArB,CAAV;AAAA,GAAhD,CAAf;AACA,SAAOuE,OAAO,CAACK,OAAR,CAAgBD,MAAhB,CAAP;AACD,CAlBM","sourcesContent":["import { ActiveFiltersInfo, FilterType, FILTER_ACTION_APPEND } from '../../types/Filters';\nimport { WithServiceHealth, hasHealth } from '../../types/Health';\nimport { ServiceListItem } from '../../types/ServiceList';\nimport { SortField } from '../../types/SortFilters';\nimport {\n  istioSidecarFilter,\n  healthFilter,\n  labelFilter,\n  getPresenceFilterValue,\n  getFilterSelectedValues,\n  filterByHealth\n} from '../../components/Filters/CommonFilters';\nimport { hasMissingSidecar } from '../../components/VirtualList/Config';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { filterByLabel } from '../../helpers/LabelFilterHelper';\nimport { calculateErrorRate } from '../../types/ErrorRate';\nimport { istioTypeFilter } from '../IstioConfigList/FiltersAndSorts';\nimport { compareObjectReferences } from '../AppList/FiltersAndSorts';\n\nexport const sortFields: SortField<ServiceListItem>[] = [\n  {\n    id: 'namespace',\n    title: 'Namespace',\n    isNumeric: false,\n    param: 'ns',\n    compare: (a: ServiceListItem, b: ServiceListItem) => {\n      let sortValue = a.namespace.localeCompare(b.namespace);\n      if (sortValue === 0) {\n        sortValue = a.name.localeCompare(b.name);\n      }\n      return sortValue;\n    }\n  },\n  {\n    id: 'servicename',\n    title: 'Service Name',\n    isNumeric: false,\n    param: 'sn',\n    compare: (a: ServiceListItem, b: ServiceListItem) => a.name.localeCompare(b.name)\n  },\n  {\n    id: 'details',\n    title: 'Details',\n    isNumeric: false,\n    param: 'is',\n    compare: (a: ServiceListItem, b: ServiceListItem) => {\n      // First sort by missing sidecar\n      const aSC = hasMissingSidecar(a) ? 1 : 0;\n      const bSC = hasMissingSidecar(b) ? 1 : 0;\n      if (aSC !== bSC) {\n        return aSC - bSC;\n      }\n\n      // Second by Details\n      const iRefA = a.istioReferences;\n      const iRefB = b.istioReferences;\n      const cmpRefs = compareObjectReferences(iRefA, iRefB);\n      if (cmpRefs !== 0) {\n        return cmpRefs;\n      }\n\n      // Then by additional details\n      const iconA = a.additionalDetailSample && a.additionalDetailSample.icon;\n      const iconB = b.additionalDetailSample && b.additionalDetailSample.icon;\n      if (iconA || iconB) {\n        if (iconA && iconB) {\n          const cmp = iconA.localeCompare(iconB);\n          if (cmp !== 0) {\n            return cmp;\n          }\n        } else {\n          // Make asc => icon absence is last\n          return iconA ? -1 : 1;\n        }\n      }\n      // Finally by name\n      return a.name.localeCompare(b.name);\n    }\n  },\n  {\n    id: 'health',\n    title: 'Health',\n    isNumeric: false,\n    param: 'he',\n    compare: (a, b) => {\n      if (hasHealth(a) && hasHealth(b)) {\n        const statusForA = a.health.getGlobalStatus();\n        const statusForB = b.health.getGlobalStatus();\n\n        if (statusForA.priority === statusForB.priority) {\n          // If both services have same health status, use error rate to determine order.\n          const ratioA = calculateErrorRate(a.namespace, a.name, 'service', a.health.requests).errorRatio.global.status\n            .value;\n          const ratioB = calculateErrorRate(b.namespace, b.name, 'service', b.health.requests).errorRatio.global.status\n            .value;\n          return ratioA === ratioB ? a.name.localeCompare(b.name) : ratioB - ratioA;\n        }\n\n        return statusForB.priority - statusForA.priority;\n      } else {\n        return 0;\n      }\n    }\n  },\n  {\n    id: 'configvalidation',\n    title: 'Config',\n    isNumeric: false,\n    param: 'cv',\n    compare: (a: ServiceListItem, b: ServiceListItem) => {\n      let sortValue = -1;\n      if (a.validation && !b.validation) {\n        sortValue = -1;\n      } else if (!a.validation && b.validation) {\n        sortValue = 1;\n      } else if (!a.validation && !b.validation) {\n        sortValue = 0;\n      } else if (a.validation && b.validation) {\n        if (a.validation.valid && !b.validation.valid) {\n          sortValue = -1;\n        } else if (!a.validation.valid && b.validation.valid) {\n          sortValue = 1;\n        } else if (a.validation.valid && b.validation.valid) {\n          sortValue = a.validation.checks.length - b.validation.checks.length;\n        } else if (!a.validation.valid && !b.validation.valid) {\n          sortValue = b.validation.checks.length - a.validation.checks.length;\n        }\n      }\n\n      return sortValue || a.name.localeCompare(b.name);\n    }\n  }\n];\n\nconst serviceNameFilter: FilterType = {\n  id: 'servicename',\n  title: 'Service Name',\n  placeholder: 'Filter by Service Name',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\n\nexport const availableFilters: FilterType[] = [\n  serviceNameFilter,\n  istioSidecarFilter,\n  istioTypeFilter,\n  healthFilter,\n  labelFilter\n];\n\nconst filterByIstioSidecar = (items: ServiceListItem[], istioSidecar: boolean): ServiceListItem[] => {\n  return items.filter(item => item.istioSidecar === istioSidecar);\n};\n\nconst filterByName = (items: ServiceListItem[], names: string[]): ServiceListItem[] => {\n  return items.filter(item => {\n    let serviceNameFiltered = true;\n    if (names.length > 0) {\n      serviceNameFiltered = false;\n      for (let i = 0; i < names.length; i++) {\n        if (item.name.includes(names[i])) {\n          serviceNameFiltered = true;\n          break;\n        }\n      }\n    }\n    return serviceNameFiltered;\n  });\n};\n\nconst filterByIstioType = (items: ServiceListItem[], istioTypes: string[]): ServiceListItem[] => {\n  return items.filter(item => item.istioReferences.filter(ref => istioTypes.includes(ref.objectType)).length !== 0);\n};\n\nexport const filterBy = (\n  items: ServiceListItem[],\n  filters: ActiveFiltersInfo\n): Promise<ServiceListItem[]> | ServiceListItem[] => {\n  let ret = items;\n  const istioSidecar = getPresenceFilterValue(istioSidecarFilter, filters);\n  if (istioSidecar !== undefined) {\n    ret = filterByIstioSidecar(ret, istioSidecar);\n  }\n\n  const serviceNamesSelected = getFilterSelectedValues(serviceNameFilter, filters);\n  if (serviceNamesSelected.length > 0) {\n    ret = filterByName(ret, serviceNamesSelected);\n  }\n\n  const serviceFilterSelected = getFilterSelectedValues(labelFilter, filters);\n  if (serviceFilterSelected.length > 0) {\n    ret = filterByLabel(ret, serviceFilterSelected, filters.op) as ServiceListItem[];\n  }\n  // We may have to perform a second round of filtering, using data fetched asynchronously (health)\n  // If not, exit fast\n  const healthSelected = getFilterSelectedValues(healthFilter, filters);\n  if (healthSelected.length > 0) {\n    return filterByHealth(ret, healthSelected);\n  }\n\n  const istioTypeSelected = getFilterSelectedValues(istioTypeFilter, filters);\n  if (istioTypeSelected.length > 0) {\n    return filterByIstioType(ret, istioTypeSelected);\n  }\n  return ret;\n};\n\n// Exported for test\nexport const sortServices = (\n  services: ServiceListItem[],\n  sortField: SortField<ServiceListItem>,\n  isAscending: boolean\n): Promise<ServiceListItem[]> => {\n  if (sortField.title === 'Health') {\n    // In the case of health sorting, we may not have all health promises ready yet\n    // So we need to get them all before actually sorting\n    const allHealthPromises: Promise<WithServiceHealth<ServiceListItem>>[] = services.map(item => {\n      return item.healthPromise.then((health): WithServiceHealth<ServiceListItem> => ({ ...item, health }));\n    });\n    return Promise.all(allHealthPromises).then(arr => {\n      return arr.sort(isAscending ? sortField.compare : (a, b) => sortField.compare(b, a));\n    });\n  }\n  // Default case: sorting is done synchronously\n  const sorted = services.sort(isAscending ? sortField.compare : (a, b) => sortField.compare(b, a));\n  return Promise.resolve(sorted);\n};\n"]},"metadata":{},"sourceType":"module"}
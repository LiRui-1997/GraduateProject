{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as AlertUtils from '../utils/AlertUtils';\nimport * as API from '../services/Api';\nimport { JaegerActions } from './JaegerActions';\nimport { setTraceId as setURLTraceId } from 'utils/SearchParamUtils';\nimport transformTraceData from 'utils/tracing/TraceTransform';\nexport var JaegerThunkActions = {\n  setTraceId: function setTraceId(traceId) {\n    setURLTraceId(traceId);\n    return function (dispatch) {\n      if (traceId) {\n        API.getJaegerTrace(traceId).then(function (response) {\n          if (response.data.data) {\n            var trace = transformTraceData(response.data.data);\n\n            if (trace) {\n              dispatch(JaegerActions.setTrace(trace));\n            }\n          }\n        }).catch(function (error) {\n          var _response;\n\n          if (((_response = error.response) === null || _response === void 0 ? void 0 : _response.status) === 404) {\n            setURLTraceId(undefined);\n          }\n\n          dispatch(JaegerActions.setTrace(undefined));\n          AlertUtils.addMessage(_objectSpread(_objectSpread({}, AlertUtils.extractAxiosError('Could not fetch trace', error)), {}, {\n            showNotification: false\n          }));\n        });\n      } else {\n        dispatch(JaegerActions.setTrace(undefined));\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/root/kiali-ui/src/actions/JaegerThunkActions.ts"],"names":["AlertUtils","API","JaegerActions","setTraceId","setURLTraceId","transformTraceData","JaegerThunkActions","traceId","dispatch","getJaegerTrace","then","response","data","trace","setTrace","catch","error","status","undefined","addMessage","extractAxiosError","showNotification"],"mappings":";AAGA,OAAO,KAAKA,UAAZ,MAA4B,qBAA5B;AAEA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAU,IAAIC,aAAvB,QAA4C,wBAA5C;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AAEA,OAAO,IAAMC,kBAAkB,GAAG;AAChCH,EAAAA,UAAU,EAAE,oBAACI,OAAD,EAAsB;AAChCH,IAAAA,aAAa,CAACG,OAAD,CAAb;AACA,WAAO,UAACC,QAAD,EAAkE;AACvE,UAAID,OAAJ,EAAa;AACXN,QAAAA,GAAG,CAACQ,cAAJ,CAAmBF,OAAnB,EACGG,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,cAAIA,QAAQ,CAACC,IAAT,CAAcA,IAAlB,EAAwB;AACtB,gBAAMC,KAAK,GAAGR,kBAAkB,CAACM,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAhC;;AACA,gBAAIC,KAAJ,EAAW;AACTL,cAAAA,QAAQ,CAACN,aAAa,CAACY,QAAd,CAAuBD,KAAvB,CAAD,CAAR;AACD;AACF;AACF,SARH,EASGE,KATH,CASS,UAAAC,KAAK,EAAI;AAAA;;AACd,cAAI,cAACA,KAAD,CAAsBL,QAAtB,wDAAgCM,MAAhC,MAA2C,GAA/C,EAAoD;AAClDb,YAAAA,aAAa,CAACc,SAAD,CAAb;AACD;;AACDV,UAAAA,QAAQ,CAACN,aAAa,CAACY,QAAd,CAAuBI,SAAvB,CAAD,CAAR;AACAlB,UAAAA,UAAU,CAACmB,UAAX,iCACKnB,UAAU,CAACoB,iBAAX,CAA6B,uBAA7B,EAAsDJ,KAAtD,CADL;AAEEK,YAAAA,gBAAgB,EAAE;AAFpB;AAID,SAlBH;AAmBD,OApBD,MAoBO;AACLb,QAAAA,QAAQ,CAACN,aAAa,CAACY,QAAd,CAAuBI,SAAvB,CAAD,CAAR;AACD;AACF,KAxBD;AAyBD;AA5B+B,CAA3B","sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport { AxiosError } from 'axios';\n\nimport * as AlertUtils from '../utils/AlertUtils';\nimport { KialiAppState } from '../store/Store';\nimport * as API from '../services/Api';\nimport { KialiAppAction } from './KialiAppAction';\nimport { JaegerActions } from './JaegerActions';\nimport { setTraceId as setURLTraceId } from 'utils/SearchParamUtils';\nimport transformTraceData from 'utils/tracing/TraceTransform';\n\nexport const JaegerThunkActions = {\n  setTraceId: (traceId?: string) => {\n    setURLTraceId(traceId);\n    return (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n      if (traceId) {\n        API.getJaegerTrace(traceId)\n          .then(response => {\n            if (response.data.data) {\n              const trace = transformTraceData(response.data.data);\n              if (trace) {\n                dispatch(JaegerActions.setTrace(trace));\n              }\n            }\n          })\n          .catch(error => {\n            if ((error as AxiosError).response?.status === 404) {\n              setURLTraceId(undefined);\n            }\n            dispatch(JaegerActions.setTrace(undefined));\n            AlertUtils.addMessage({\n              ...AlertUtils.extractAxiosError('Could not fetch trace', error),\n              showNotification: false\n            });\n          });\n      } else {\n        dispatch(JaegerActions.setTrace(undefined));\n      }\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
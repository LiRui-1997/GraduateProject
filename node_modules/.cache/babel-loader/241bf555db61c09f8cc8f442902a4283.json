{"ast":null,"code":"import _regeneratorRuntime from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/VirtualList/VirtualItem.tsx\";\nimport * as React from 'react';\nimport { IstioTypes, hasHealth } from './Config';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { actionRenderer } from './Renderers';\n\nvar VirtualItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(VirtualItem, _React$Component);\n\n  var _super = _createSuper(VirtualItem);\n\n  function VirtualItem(props) {\n    var _this;\n\n    _classCallCheck(this, VirtualItem);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n\n    _this.onHealthPromiseChanged = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(promise) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.promises.register('health', promise).then(function (h) {\n                  _this.setState({\n                    health: h\n                  });\n                }).catch(function (err) {\n                  if (!err.isCanceled) {\n                    _this.setState({\n                      health: undefined\n                    });\n\n                    throw err;\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.renderDetails = function (item, health) {\n      return _this.props.config.columns.map(function (object) {\n        return object.renderer(item, _this.props.config, _this.getBadge(), health, _this.props.statefulFilterProps);\n      });\n    };\n\n    _this.getBadge = function () {\n      return _this.props.config.name !== 'istio' ? _this.props.config.badge : IstioTypes[_this.props.item['type']].badge;\n    };\n\n    _this.state = {\n      health: undefined\n    };\n    return _this;\n  }\n\n  _createClass(VirtualItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (hasHealth(this.props.item)) {\n        this.onHealthPromiseChanged(this.props.item.healthPromise);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (hasHealth(this.props.item) && this.props.item.healthPromise !== prevProps.item['healthPromise']) {\n        this.onHealthPromiseChanged(this.props.item.healthPromise);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          className = _this$props.className,\n          item = _this$props.item;\n      var key = 'VirtualItem_' + ('namespace' in item ? 'Ns' + item.namespace + '_' + item.name : item.name);\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        style: style,\n        className: className,\n        role: \"row\",\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, this.renderDetails(item, this.state.health), this.props.action && actionRenderer(key, this.props.action));\n    }\n  }]);\n\n  return VirtualItem;\n}(React.Component);\n\nexport { VirtualItem as default };","map":{"version":3,"sources":["/root/GraduateProject/src/components/VirtualList/VirtualItem.tsx"],"names":["React","IstioTypes","hasHealth","PromisesRegistry","actionRenderer","VirtualItem","props","promises","onHealthPromiseChanged","promise","register","then","h","setState","health","catch","err","isCanceled","undefined","renderDetails","item","config","columns","map","object","renderer","getBadge","statefulFilterProps","name","badge","state","healthPromise","prevProps","cancelAll","style","className","key","namespace","action","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Resource, IstioTypes, hasHealth, RenderResource } from './Config';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { Health } from '../../types/Health';\nimport { StatefulFilters } from '../Filters/StatefulFilters';\nimport { actionRenderer } from './Renderers';\nimport { CSSProperties } from 'react';\n\ntype VirtualItemProps = {\n  item: RenderResource;\n  style?: CSSProperties;\n  className?: string;\n  index: number;\n  config: Resource;\n  statefulFilterProps?: React.RefObject<StatefulFilters>;\n  action?: JSX.Element;\n};\n\ntype VirtualItemState = {\n  health?: Health;\n};\n\nexport default class VirtualItem extends React.Component<VirtualItemProps, VirtualItemState> {\n  private promises = new PromisesRegistry();\n\n  constructor(props: VirtualItemProps) {\n    super(props);\n    this.state = { health: undefined };\n  }\n\n  componentDidMount() {\n    if (hasHealth(this.props.item)) {\n      this.onHealthPromiseChanged(this.props.item.healthPromise);\n    }\n  }\n\n  componentDidUpdate(prevProps: VirtualItemProps) {\n    if (hasHealth(this.props.item) && this.props.item.healthPromise !== prevProps.item['healthPromise']) {\n      this.onHealthPromiseChanged(this.props.item.healthPromise);\n    }\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  onHealthPromiseChanged = async (promise: Promise<Health>): Promise<void> => {\n    this.promises\n      .register('health', promise)\n      .then(h => {\n        this.setState({ health: h });\n      })\n      .catch(err => {\n        if (!err.isCanceled) {\n          this.setState({ health: undefined });\n          throw err;\n        }\n      });\n  };\n\n  renderDetails = (item: RenderResource, health?: Health) => {\n    return this.props.config.columns.map(object =>\n      object.renderer(item, this.props.config, this.getBadge(), health, this.props.statefulFilterProps)\n    );\n  };\n\n  getBadge = () => {\n    return this.props.config.name !== 'istio' ? this.props.config.badge : IstioTypes[this.props.item['type']].badge;\n  };\n\n  render() {\n    const { style, className, item } = this.props;\n    const key = 'VirtualItem_' + ('namespace' in item ? 'Ns' + item.namespace + '_' + item.name : item.name);\n    return (\n      <tr style={style} className={className} role=\"row\" key={key}>\n        {this.renderDetails(item, this.state.health)}\n        {this.props.action && actionRenderer(key, this.props.action)}\n      </tr>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
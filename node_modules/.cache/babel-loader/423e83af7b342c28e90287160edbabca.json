{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/SpanTable.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody, TableVariant, RowWrapper, sortable, SortByDirection, cellWidth } from '@patternfly/react-table';\nimport { buildRow } from './SpanTableItem';\nimport { compareNullable } from 'components/FilterList/FilterHelper';\nimport MetricsStatsThunkActions from 'actions/MetricsStatsThunkActions';\nimport { sameSpans } from 'utils/tracing/TracingHelper';\nimport { buildQueriesFromSpans } from 'utils/tracing/TraceStats';\nimport { getSpanId } from '../../../utils/SearchParamUtils';\n\nvar SpanTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(SpanTable, _React$Component);\n\n  var _super = _createSuper(SpanTable);\n\n  function SpanTable(props) {\n    var _this;\n\n    _classCallCheck(this, SpanTable);\n\n    _this = _super.call(this, props);\n\n    _this.cells = function () {\n      return [{\n        title: 'Timeline',\n        transforms: [sortable, cellWidth('5%')],\n        compare: function compare(a, b) {\n          return a.startTime - b.startTime;\n        }\n      }, {\n        title: 'App / Workload',\n        transforms: [sortable, cellWidth('20%')],\n        compare: function compare(a, b) {\n          return compareNullable(a.workload, b.workload, function (a2, b2) {\n            return a2.localeCompare(b2);\n          });\n        }\n      }, {\n        title: 'Summary',\n        transforms: [cellWidth('50%')]\n      }, {\n        title: 'Statistics',\n        transforms: [sortable, cellWidth('20%')],\n        compare: function compare(a, b) {\n          return a.duration - b.duration;\n        }\n      }, {\n        title: '',\n        // Links\n        transforms: [cellWidth('5%')]\n      }];\n    };\n\n    _this.rows = function (cells) {\n      var compare = cells[_this.state.sortIndex].compare;\n      var sorted = compare ? _this.props.items.sort(_this.state.sortDirection === SortByDirection.asc ? compare : function (a, b) {\n        return compare(b, a);\n      }) : _this.props.items;\n      return sorted.map(function (item) {\n        return buildRow(_objectSpread({\n          externalURL: _this.props.externalURL,\n          toggledLinks: _this.state.toggledLinks,\n          setToggledLinks: function setToggledLinks(key) {\n            return _this.setState({\n              toggledLinks: key\n            });\n          },\n          onClickFetchStats: function onClickFetchStats() {\n            return _this.fetchComparisonMetrics([item]);\n          },\n          metricsStats: _this.props.metricsStats,\n          isExpanded: _this.state.expandedSpans.get(item.spanID) || false,\n          onExpand: function onExpand(isExpanded) {\n            _this.state.expandedSpans.set(item.spanID, isExpanded);\n\n            _this.setState({\n              expandedSpans: _this.state.expandedSpans\n            });\n          }\n        }, item));\n      });\n    };\n\n    var mapExpandedSpans = new Map();\n    var isSpan = getSpanId();\n    isSpan && mapExpandedSpans.set(isSpan, true);\n    _this.state = {\n      sortIndex: 0,\n      sortDirection: SortByDirection.asc,\n      expandedSpans: mapExpandedSpans\n    };\n    return _this;\n  }\n\n  _createClass(SpanTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchComparisonMetrics(this.props.items);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.toggledLinks) {\n        this.setState({\n          toggledLinks: undefined\n        });\n      }\n\n      if (!sameSpans(prevProps.items, this.props.items)) {\n        this.fetchComparisonMetrics(this.props.items);\n      }\n    }\n  }, {\n    key: \"fetchComparisonMetrics\",\n    value: function fetchComparisonMetrics(items) {\n      var queries = buildQueriesFromSpans(items);\n      this.props.loadMetricsStats(queries);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cells = this.cells();\n      return /*#__PURE__*/React.createElement(Table, {\n        variant: TableVariant.compact,\n        \"aria-label\": 'list_spans',\n        cells: cells,\n        rows: this.rows(cells),\n        sortBy: {\n          index: this.state.sortIndex,\n          direction: this.state.sortDirection\n        },\n        onSort: function onSort(_event, index, sortDirection) {\n          return _this2.setState({\n            sortIndex: index,\n            sortDirection: sortDirection\n          });\n        } // This style is declared on _overrides.scss\n        ,\n        className: \"table\",\n        rowWrapper: function rowWrapper(p) {\n          return /*#__PURE__*/React.createElement(RowWrapper, Object.assign({}, p, {\n            className: p.row.className,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 26\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }), this.props.items.length > 0 ? /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }) : /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: cells.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(EmptyState, {\n        variant: EmptyStateVariant.full,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 19\n        }\n      }, \"No spans found\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 19\n        }\n      }, \"No spans match the current filters\"))))));\n    }\n  }]);\n\n  return SpanTable;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    metricsStats: state.metricsStats.data\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadMetricsStats: function loadMetricsStats(queries) {\n      return dispatch(MetricsStatsThunkActions.load(queries));\n    }\n  };\n};\n\nvar Container = connect(mapStateToProps, mapDispatchToProps)(SpanTable);\nexport default Container;","map":{"version":3,"sources":["/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/SpanTable.tsx"],"names":["React","connect","EmptyState","EmptyStateBody","EmptyStateVariant","Title","Table","TableHeader","TableBody","TableVariant","RowWrapper","sortable","SortByDirection","cellWidth","buildRow","compareNullable","MetricsStatsThunkActions","sameSpans","buildQueriesFromSpans","getSpanId","SpanTable","props","cells","title","transforms","compare","a","b","startTime","workload","a2","b2","localeCompare","duration","rows","state","sortIndex","sorted","items","sort","sortDirection","asc","map","item","externalURL","toggledLinks","setToggledLinks","key","setState","onClickFetchStats","fetchComparisonMetrics","metricsStats","isExpanded","expandedSpans","get","spanID","onExpand","set","mapExpandedSpans","Map","isSpan","prevProps","prevState","undefined","queries","loadMetricsStats","compact","index","direction","_event","p","row","className","length","full","Component","mapStateToProps","data","mapDispatchToProps","dispatch","load","Container"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  RowWrapper,\n  sortable,\n  SortByDirection,\n  ICell,\n  cellWidth\n} from '@patternfly/react-table';\n\nimport { buildRow } from './SpanTableItem';\nimport { compareNullable } from 'components/FilterList/FilterHelper';\nimport { MetricsStats } from 'types/Metrics';\nimport { KialiAppState } from 'store/Store';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { MetricsStatsQuery } from 'types/MetricsOptions';\nimport MetricsStatsThunkActions from 'actions/MetricsStatsThunkActions';\nimport { RichSpanData } from 'types/JaegerInfo';\nimport { sameSpans } from 'utils/tracing/TracingHelper';\nimport { buildQueriesFromSpans } from 'utils/tracing/TraceStats';\nimport { getSpanId } from '../../../utils/SearchParamUtils';\n\ntype SortableCell<T> = ICell & {\n  compare?: (a: T, b: T) => number;\n};\n\ninterface Props {\n  items: RichSpanData[];\n  namespace: string;\n  externalURL?: string;\n  loadMetricsStats: (queries: MetricsStatsQuery[]) => void;\n  metricsStats: Map<string, MetricsStats>;\n}\n\ninterface State {\n  toggledLinks?: string;\n  sortIndex: number;\n  sortDirection: SortByDirection;\n  expandedSpans: Map<string, boolean>;\n}\n\nclass SpanTable extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const mapExpandedSpans = new Map();\n    const isSpan = getSpanId();\n    isSpan && mapExpandedSpans.set(isSpan, true);\n    this.state = { sortIndex: 0, sortDirection: SortByDirection.asc, expandedSpans: mapExpandedSpans };\n  }\n\n  componentDidMount() {\n    this.fetchComparisonMetrics(this.props.items);\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>) {\n    if (prevState.toggledLinks) {\n      this.setState({ toggledLinks: undefined });\n    }\n    if (!sameSpans(prevProps.items, this.props.items)) {\n      this.fetchComparisonMetrics(this.props.items);\n    }\n  }\n\n  private fetchComparisonMetrics(items: RichSpanData[]) {\n    const queries = buildQueriesFromSpans(items);\n    this.props.loadMetricsStats(queries);\n  }\n\n  private cells = (): SortableCell<RichSpanData>[] => {\n    return [\n      {\n        title: 'Timeline',\n        transforms: [sortable, cellWidth('5%')],\n        compare: (a, b) => a.startTime - b.startTime\n      },\n      {\n        title: 'App / Workload',\n        transforms: [sortable, cellWidth('20%')],\n        compare: (a, b) => compareNullable(a.workload, b.workload, (a2, b2) => a2.localeCompare(b2))\n      },\n      {\n        title: 'Summary',\n        transforms: [cellWidth('50%')]\n      },\n      {\n        title: 'Statistics',\n        transforms: [sortable, cellWidth('20%')],\n        compare: (a, b) => a.duration - b.duration\n      },\n      {\n        title: '', // Links\n        transforms: [cellWidth('5%')]\n      }\n    ];\n  };\n\n  private rows = (cells: SortableCell<RichSpanData>[]) => {\n    const compare = cells[this.state.sortIndex].compare;\n    const sorted = compare\n      ? this.props.items.sort(this.state.sortDirection === SortByDirection.asc ? compare : (a, b) => compare(b, a))\n      : this.props.items;\n    return sorted.map(item =>\n      buildRow({\n        externalURL: this.props.externalURL,\n        toggledLinks: this.state.toggledLinks,\n        setToggledLinks: key => this.setState({ toggledLinks: key }),\n        onClickFetchStats: () => this.fetchComparisonMetrics([item]),\n        metricsStats: this.props.metricsStats,\n        isExpanded: this.state.expandedSpans.get(item.spanID) || false,\n        onExpand: isExpanded => {\n          this.state.expandedSpans.set(item.spanID, isExpanded);\n          this.setState({ expandedSpans: this.state.expandedSpans });\n        },\n        ...item\n      })\n    );\n  };\n\n  render() {\n    const cells = this.cells();\n    return (\n      <Table\n        variant={TableVariant.compact}\n        aria-label={'list_spans'}\n        cells={cells}\n        rows={this.rows(cells)}\n        sortBy={{ index: this.state.sortIndex, direction: this.state.sortDirection }}\n        onSort={(_event, index, sortDirection) => this.setState({ sortIndex: index, sortDirection: sortDirection })}\n        // This style is declared on _overrides.scss\n        className=\"table\"\n        rowWrapper={p => <RowWrapper {...p} className={(p.row as any).className} />}\n      >\n        <TableHeader />\n        {this.props.items.length > 0 ? (\n          <TableBody />\n        ) : (\n          <tbody>\n            <tr>\n              <td colSpan={cells.length}>\n                <EmptyState variant={EmptyStateVariant.full}>\n                  <Title headingLevel=\"h5\" size=\"lg\">\n                    No spans found\n                  </Title>\n                  <EmptyStateBody>No spans match the current filters</EmptyStateBody>\n                </EmptyState>\n              </td>\n            </tr>\n          </tbody>\n        )}\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  metricsStats: state.metricsStats.data\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  loadMetricsStats: (queries: MetricsStatsQuery[]) => dispatch(MetricsStatsThunkActions.load(queries))\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(SpanTable);\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}
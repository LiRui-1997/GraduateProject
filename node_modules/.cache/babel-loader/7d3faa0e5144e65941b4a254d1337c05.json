{"ast":null,"code":"import _regeneratorRuntime from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/pages/Mesh/MeshPage.tsx\";\n\nimport * as React from 'react';\nimport { Alert, EmptyState, EmptyStateBody, EmptyStateVariant, Title, Tooltip } from '@patternfly/react-core';\nimport { StarIcon } from '@patternfly/react-icons';\nimport { cellWidth, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport DefaultSecondaryMasthead from '../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport { RenderContent } from '../../components/Nav/Page';\nimport RefreshButtonContainer from '../../components/Refresh/RefreshButton';\nimport { getClusters } from '../../services/Api';\nimport { addError } from '../../utils/AlertUtils';\n\nvar MeshPage = function MeshPage() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      meshClustersList = _React$useState2[0],\n      setMeshClustersList = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    index: 0,\n    direction: SortByDirection.asc\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      sortBy = _React$useState4[0],\n      setSortBy = _React$useState4[1];\n\n  var containerPadding = style({\n    padding: '20px'\n  });\n  var columns = [{\n    title: 'Cluster Name',\n    transforms: [sortable, cellWidth(20)]\n  }, {\n    title: 'Network',\n    transforms: [sortable, cellWidth(10)]\n  }, {\n    title: 'Kiali',\n    transforms: [cellWidth(20)]\n  }, {\n    title: 'API Endpoint',\n    transforms: [sortable, cellWidth(20)]\n  }, {\n    title: 'Secret name',\n    transforms: [sortable, cellWidth(30)]\n  }];\n\n  function buildKialiInstancesColumn(cluster) {\n    var _this2 = this;\n\n    if (!cluster.kialiInstances || cluster.kialiInstances.length === 0) {\n      return 'N / A';\n    }\n\n    return cluster.kialiInstances.map(function (instance) {\n      if (instance.url.length !== 0) {\n        return /*#__PURE__*/React.createElement(Tooltip, {\n          content: \"Go to this Kiali instance: \".concat(instance.url),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          key: cluster.name + '/' + instance.namespace + '/' + instance.serviceName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"kiali-icon\",\n          src: \"kiali_icon_lightbkg_16px.png\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }\n        }), ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: instance.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }\n        }, instance.namespace, \" \", ' / ', \" \", instance.serviceName)));\n      } else {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          key: cluster.name + '/' + instance.namespace + '/' + instance.serviceName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"kiali-icon\",\n          src: \"kiali_icon_lightbkg_16px.png\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }\n        }), ' ', \"\".concat(instance.namespace, \" / \").concat(instance.serviceName));\n      }\n    });\n  }\n\n  function buildTableRows() {\n    var _this3 = this;\n\n    if (meshClustersList === null) {\n      return [];\n    }\n\n    var sortAttributes = ['name', 'apiEndpoint', 'network', 'secretName'];\n    var sortByAttr = sortAttributes[sortBy.index];\n    var sortedList = Array.from(meshClustersList).sort(function (a, b) {\n      return a[sortByAttr].localeCompare(b[sortByAttr], undefined, {\n        sensitivity: 'base'\n      });\n    });\n    var tableRows = sortedList.map(function (cluster) {\n      return {\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, cluster.isKialiHome ? /*#__PURE__*/React.createElement(StarIcon, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 34\n          }\n        }) : null, \" \", cluster.name), cluster.network, /*#__PURE__*/React.createElement(React.Fragment, null, buildKialiInstancesColumn(cluster)), cluster.apiEndpoint, cluster.secretName]\n      };\n    });\n    return sortBy.direction === SortByDirection.asc ? tableRows : tableRows.reverse();\n  }\n\n  function fetchMeshClusters() {\n    return _fetchMeshClusters.apply(this, arguments);\n  }\n\n  function _fetchMeshClusters() {\n    _fetchMeshClusters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var meshClusters;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getClusters();\n\n            case 3:\n              meshClusters = _context.sent;\n              setMeshClustersList(meshClusters.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              addError('Could not fetch the list of clusters that are part of the mesh.', _context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return _fetchMeshClusters.apply(this, arguments);\n  }\n\n  function onSortHandler(_event, index, direction) {\n    setSortBy({\n      index: index,\n      direction: direction\n    });\n  }\n\n  var clusterRows = React.useMemo(buildTableRows, [meshClustersList, sortBy]);\n  React.useEffect(function () {\n    fetchMeshClusters();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: '#fff'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DefaultSecondaryMasthead, {\n    hideNamespaceSelector: true,\n    rightToolbar: /*#__PURE__*/React.createElement(RefreshButtonContainer, {\n      key: 'Refresh',\n      handleRefresh: fetchMeshClusters,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(RenderContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: containerPadding,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    isInline: true,\n    variant: \"warning\",\n    title: \"This feature is experimental.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: containerPadding,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"Sortable Table\",\n    cells: columns,\n    onSort: onSortHandler,\n    rows: clusterRows,\n    sortBy: sortBy,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  })), clusterRows.length === 0 ? /*#__PURE__*/React.createElement(EmptyState, {\n    variant: EmptyStateVariant.full,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h2\",\n    size: \"lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"No Clusters\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, \"No clusters were discovered in your mesh.\")) : null)));\n};\n\nexport default MeshPage;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Mesh/MeshPage.tsx"],"names":["React","Alert","EmptyState","EmptyStateBody","EmptyStateVariant","Title","Tooltip","StarIcon","cellWidth","sortable","SortByDirection","Table","TableBody","TableHeader","style","DefaultSecondaryMasthead","RenderContent","RefreshButtonContainer","getClusters","addError","MeshPage","useState","meshClustersList","setMeshClustersList","index","direction","asc","sortBy","setSortBy","containerPadding","padding","columns","title","transforms","buildKialiInstancesColumn","cluster","kialiInstances","length","map","instance","url","name","namespace","serviceName","buildTableRows","sortAttributes","sortByAttr","sortedList","Array","from","sort","a","b","localeCompare","undefined","sensitivity","tableRows","cells","isKialiHome","network","apiEndpoint","secretName","reverse","fetchMeshClusters","meshClusters","data","onSortHandler","_event","clusterRows","useMemo","useEffect","backgroundColor","full"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Alert,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n  Tooltip\n} from '@patternfly/react-core';\nimport { StarIcon } from '@patternfly/react-icons';\nimport { cellWidth, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\n\nimport DefaultSecondaryMasthead from '../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport { RenderContent } from '../../components/Nav/Page';\nimport RefreshButtonContainer from '../../components/Refresh/RefreshButton';\nimport { getClusters } from '../../services/Api';\nimport { MeshClusters } from '../../types/Mesh';\nimport { addError } from '../../utils/AlertUtils';\n\nconst MeshPage: React.FunctionComponent = () => {\n  const [meshClustersList, setMeshClustersList] = React.useState(null as MeshClusters | null);\n  const [sortBy, setSortBy] = React.useState({ index: 0, direction: SortByDirection.asc });\n\n  const containerPadding = style({ padding: '20px' });\n  const columns = [\n    {\n      title: 'Cluster Name',\n      transforms: [sortable, cellWidth(20)]\n    },\n    {\n      title: 'Network',\n      transforms: [sortable, cellWidth(10)]\n    },\n    {\n      title: 'Kiali',\n      transforms: [cellWidth(20)]\n    },\n    {\n      title: 'API Endpoint',\n      transforms: [sortable, cellWidth(20)]\n    },\n    {\n      title: 'Secret name',\n      transforms: [sortable, cellWidth(30)]\n    }\n  ];\n\n  function buildKialiInstancesColumn(cluster): React.ReactNode {\n    if (!cluster.kialiInstances || cluster.kialiInstances.length === 0) {\n      return 'N / A';\n    }\n\n    return cluster.kialiInstances.map(instance => {\n      if (instance.url.length !== 0) {\n        return (\n          <Tooltip content={`Go to this Kiali instance: ${instance.url}`}>\n            <p key={cluster.name + '/' + instance.namespace + '/' + instance.serviceName}>\n              <img alt='kiali-icon' src='kiali_icon_lightbkg_16px.png' />\n              {' '}\n              <a href={instance.url} target='_blank' rel='noopener noreferrer'>\n                {instance.namespace} {' / '} {instance.serviceName}\n              </a>\n            </p>\n          </Tooltip>\n        );\n      } else {\n        return (\n          <p key={cluster.name + '/' + instance.namespace + '/' + instance.serviceName}>\n            <img alt='kiali-icon' src='kiali_icon_lightbkg_16px.png' />\n            {' '}\n            {`${instance.namespace} / ${instance.serviceName}`}\n          </p>\n        );\n      }\n    });\n  }\n\n  function buildTableRows() {\n    if (meshClustersList === null) {\n      return [];\n    }\n\n    const sortAttributes = ['name', 'apiEndpoint', 'network', 'secretName'];\n    const sortByAttr = sortAttributes[sortBy.index];\n    const sortedList = Array.from(meshClustersList).sort((a, b) =>\n      a[sortByAttr].localeCompare(b[sortByAttr], undefined, { sensitivity: 'base' })\n    );\n\n    const tableRows = sortedList.map(cluster => ({\n      cells: [\n        <>\n          {cluster.isKialiHome ? <StarIcon /> : null} {cluster.name}\n        </>,\n        cluster.network,\n        <>{buildKialiInstancesColumn(cluster)}</>,\n        cluster.apiEndpoint,\n        cluster.secretName\n      ]\n    }));\n\n    return sortBy.direction === SortByDirection.asc ? tableRows : tableRows.reverse();\n  }\n\n  async function fetchMeshClusters() {\n    try {\n      const meshClusters = await getClusters();\n      setMeshClustersList(meshClusters.data);\n    } catch (e) {\n      addError('Could not fetch the list of clusters that are part of the mesh.', e);\n    }\n  }\n\n  function onSortHandler(_event, index, direction) {\n    setSortBy({ index, direction });\n  }\n\n  const clusterRows = React.useMemo(buildTableRows, [meshClustersList, sortBy]);\n\n  React.useEffect(() => {\n    fetchMeshClusters();\n  }, []);\n\n  return (\n    <>\n      <div style={{ backgroundColor: '#fff' }}>\n        <DefaultSecondaryMasthead\n          hideNamespaceSelector={true}\n          rightToolbar={<RefreshButtonContainer key={'Refresh'} handleRefresh={fetchMeshClusters} />}\n        />\n      </div>\n      <RenderContent>\n        <div className={containerPadding}>\n          <Alert isInline={true} variant=\"warning\" title=\"This feature is experimental.\" />\n        </div>\n        <div className={containerPadding}>\n          <Table aria-label=\"Sortable Table\" cells={columns} onSort={onSortHandler} rows={clusterRows} sortBy={sortBy}>\n            <TableHeader />\n            <TableBody />\n          </Table>\n          {clusterRows.length === 0 ? (\n            <EmptyState variant={EmptyStateVariant.full}>\n              <Title headingLevel=\"h2\" size=\"lg\">\n                No Clusters\n              </Title>\n              <EmptyStateBody>No clusters were discovered in your mesh.</EmptyStateBody>\n            </EmptyState>\n          ) : null}\n        </div>\n      </RenderContent>\n    </>\n  );\n};\n\nexport default MeshPage;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export var addLegendEvent = function addLegendEvent(events, item) {\n  var eventHandlers = {};\n\n  if (item.onClick) {\n    eventHandlers.onClick = function (e) {\n      e.stopPropagation();\n      return [{\n        childName: [item.serieID],\n        target: 'data',\n        mutation: function mutation(props) {\n          return item.onClick(props);\n        }\n      }, {\n        childName: [item.serieID],\n        target: 'data',\n        eventKey: 'all',\n        mutation: function mutation() {\n          return null;\n        }\n      }];\n    };\n  }\n\n  if (item.onMouseOver) {\n    eventHandlers.onMouseOver = function () {\n      return [{\n        childName: [item.serieID],\n        target: 'data',\n        eventKey: 'all',\n        mutation: function mutation(props) {\n          return item.onMouseOver(props);\n        }\n      }];\n    };\n\n    eventHandlers.onMouseOut = function () {\n      return [{\n        childName: [item.serieID],\n        target: 'data',\n        eventKey: 'all',\n        mutation: function mutation(props) {\n          return item.onMouseOut ? item.onMouseOut(props) : null;\n        }\n      }];\n    };\n  }\n\n  events.push({\n    childName: [item.legendName],\n    target: 'data',\n    eventKey: String(item.idx),\n    eventHandlers: eventHandlers\n  });\n  events.push({\n    childName: [item.legendName],\n    target: 'labels',\n    eventKey: String(item.idx),\n    eventHandlers: eventHandlers\n  });\n};","map":{"version":3,"sources":["/root/kiali-ui/src/utils/VictoryEvents.ts"],"names":["addLegendEvent","events","item","eventHandlers","onClick","e","stopPropagation","childName","serieID","target","mutation","props","eventKey","onMouseOver","onMouseOut","push","legendName","String","idx"],"mappings":"AA8BA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAoBC,IAApB,EAA8C;AAC1E,MAAMC,aAA4B,GAAG,EAArC;;AACA,MAAID,IAAI,CAACE,OAAT,EAAkB;AAChBD,IAAAA,aAAa,CAACC,OAAd,GAAwB,UAAAC,CAAC,EAAI;AAC3BA,MAAAA,CAAC,CAACC,eAAF;AACA,aAAO,CACL;AACEC,QAAAA,SAAS,EAAE,CAACL,IAAI,CAACM,OAAN,CADb;AAEEC,QAAAA,MAAM,EAAE,MAFV;AAGEC,QAAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,iBAAIT,IAAI,CAACE,OAAL,CAAcO,KAAd,CAAJ;AAAA;AAHjB,OADK,EAML;AACEJ,QAAAA,SAAS,EAAE,CAACL,IAAI,CAACM,OAAN,CADb;AAEEC,QAAAA,MAAM,EAAE,MAFV;AAGEG,QAAAA,QAAQ,EAAE,KAHZ;AAIEF,QAAAA,QAAQ,EAAE;AAAA,iBAAM,IAAN;AAAA;AAJZ,OANK,CAAP;AAaD,KAfD;AAgBD;;AACD,MAAIR,IAAI,CAACW,WAAT,EAAsB;AACpBV,IAAAA,aAAa,CAACU,WAAd,GAA4B,YAAM;AAChC,aAAO,CACL;AACEN,QAAAA,SAAS,EAAE,CAACL,IAAI,CAACM,OAAN,CADb;AAEEC,QAAAA,MAAM,EAAE,MAFV;AAGEG,QAAAA,QAAQ,EAAE,KAHZ;AAIEF,QAAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,iBAAIT,IAAI,CAACW,WAAL,CAAkBF,KAAlB,CAAJ;AAAA;AAJjB,OADK,CAAP;AAQD,KATD;;AAUAR,IAAAA,aAAa,CAACW,UAAd,GAA2B,YAAM;AAC/B,aAAO,CACL;AACEP,QAAAA,SAAS,EAAE,CAACL,IAAI,CAACM,OAAN,CADb;AAEEC,QAAAA,MAAM,EAAE,MAFV;AAGEG,QAAAA,QAAQ,EAAE,KAHZ;AAIEF,QAAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,iBAAKT,IAAI,CAACY,UAAL,GAAkBZ,IAAI,CAACY,UAAL,CAAgBH,KAAhB,CAAlB,GAA2C,IAAhD;AAAA;AAJjB,OADK,CAAP;AAQD,KATD;AAUD;;AACDV,EAAAA,MAAM,CAACc,IAAP,CAAY;AACVR,IAAAA,SAAS,EAAE,CAACL,IAAI,CAACc,UAAN,CADD;AAEVP,IAAAA,MAAM,EAAE,MAFE;AAGVG,IAAAA,QAAQ,EAAEK,MAAM,CAACf,IAAI,CAACgB,GAAN,CAHN;AAIVf,IAAAA,aAAa,EAAEA;AAJL,GAAZ;AAMAF,EAAAA,MAAM,CAACc,IAAP,CAAY;AACVR,IAAAA,SAAS,EAAE,CAACL,IAAI,CAACc,UAAN,CADD;AAEVP,IAAAA,MAAM,EAAE,QAFE;AAGVG,IAAAA,QAAQ,EAAEK,MAAM,CAACf,IAAI,CAACgB,GAAN,CAHN;AAIVf,IAAAA,aAAa,EAAEA;AAJL,GAAZ;AAMD,CAtDM","sourcesContent":["import { RawOrBucket, LineInfo } from '../types/VictoryChartInfo';\n\ninterface EventItem {\n  legendName: string;\n  idx: number;\n  serieID: string;\n  onClick?: (props: RawOrBucket<LineInfo>) => Partial<RawOrBucket<LineInfo>> | null;\n  onMouseOver?: (props: RawOrBucket<LineInfo>) => Partial<RawOrBucket<LineInfo>> | null;\n  onMouseOut?: (props: RawOrBucket<LineInfo>) => Partial<RawOrBucket<LineInfo>> | null;\n}\n\nexport type VCEvent = {\n  childName?: string[];\n  target: string;\n  eventKey?: string;\n  eventHandlers: EventHandlers;\n};\n\ntype EventHandlers = {\n  onClick?: (event: MouseEvent) => EventMutation[];\n  onMouseOver?: (event: MouseEvent) => EventMutation[];\n  onMouseOut?: (event: MouseEvent) => EventMutation[];\n};\n\ntype EventMutation = {\n  childName: string[];\n  target: string;\n  mutation: (props: RawOrBucket<LineInfo>) => Partial<RawOrBucket<LineInfo>> | null;\n};\n\nexport const addLegendEvent = (events: VCEvent[], item: EventItem): void => {\n  const eventHandlers: EventHandlers = {};\n  if (item.onClick) {\n    eventHandlers.onClick = e => {\n      e.stopPropagation();\n      return [\n        {\n          childName: [item.serieID],\n          target: 'data',\n          mutation: props => item.onClick!(props)\n        },\n        {\n          childName: [item.serieID],\n          target: 'data',\n          eventKey: 'all',\n          mutation: () => null\n        }\n      ];\n    };\n  }\n  if (item.onMouseOver) {\n    eventHandlers.onMouseOver = () => {\n      return [\n        {\n          childName: [item.serieID],\n          target: 'data',\n          eventKey: 'all',\n          mutation: props => item.onMouseOver!(props)\n        }\n      ];\n    };\n    eventHandlers.onMouseOut = () => {\n      return [\n        {\n          childName: [item.serieID],\n          target: 'data',\n          eventKey: 'all',\n          mutation: props => (item.onMouseOut ? item.onMouseOut(props) : null)\n        }\n      ];\n    };\n  }\n  events.push({\n    childName: [item.legendName],\n    target: 'data',\n    eventKey: String(item.idx),\n    eventHandlers: eventHandlers\n  });\n  events.push({\n    childName: [item.legendName],\n    target: 'labels',\n    eventKey: String(item.idx),\n    eventHandlers: eventHandlers\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/CytoscapeGraph/CytoscapeContextMenu.tsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport tippy from 'tippy.js';\nimport { Provider } from 'react-redux';\nimport { store } from '../../store/ConfigStore';\nimport history from '../../app/History';\nimport { getOptions } from './ContextMenu/NodeContextMenu';\nexport var CytoscapeContextMenuWrapper = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(CytoscapeContextMenuWrapper, _React$PureComponent);\n\n  var _super = _createSuper(CytoscapeContextMenuWrapper);\n\n  function CytoscapeContextMenuWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, CytoscapeContextMenuWrapper);\n\n    _this = _super.call(this, props);\n    _this.contextMenuRef = void 0;\n\n    _this.handleDocumentMouseUp = function (event) {\n      if (event.button === 2) {\n        // Ignore mouseup of right button\n        return;\n      }\n\n      var currentContextMenu = _this.getCurrentContextMenu();\n\n      if (currentContextMenu) {\n        // Allow interaction in our popper component (Selecting and copying) without it disappearing\n        if (event.target && currentContextMenu.popper.contains(event.target)) {\n          return;\n        }\n\n        currentContextMenu.hide();\n      }\n    };\n\n    _this.handleContextMenu = function (event) {\n      // Disable the context menu in popper\n      var currentContextMenu = _this.getCurrentContextMenu();\n\n      if (currentContextMenu) {\n        if (event.target && currentContextMenu.popper.contains(event.target)) {\n          event.preventDefault();\n        }\n      }\n\n      return true;\n    };\n\n    _this.contextMenuRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(CytoscapeContextMenuWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mouseup', this.handleDocumentMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n    }\n  }, {\n    key: \"connectCy\",\n    value: // Connects cy to this component\n    function connectCy(cy) {\n      var _this2 = this;\n\n      cy.on('cxttapstart taphold', function (event) {\n        event.preventDefault();\n\n        if (event.target) {\n          var currentContextMenu = _this2.getCurrentContextMenu();\n\n          if (currentContextMenu) {\n            currentContextMenu.hide(0); // hide it in 0ms\n          }\n\n          var contextMenuComponentType;\n\n          if (event.target === cy) {\n            contextMenuComponentType = undefined;\n          } else if (event.target.isNode() && event.target.isParent()) {\n            contextMenuComponentType = _this2.props.groupContextMenuContent;\n          } else if (event.target.isNode()) {\n            contextMenuComponentType = _this2.props.nodeContextMenuContent;\n          } else if (event.target.isEdge()) {\n            contextMenuComponentType = _this2.props.edgeContextMenuContent;\n          }\n\n          if (contextMenuComponentType && getOptions(_objectSpread({}, event.target.data())).length > 0) {\n            _this2.makeContextMenu(contextMenuComponentType, event.target);\n          }\n        }\n\n        return false;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"hidden\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.contextMenuRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"getCurrentContextMenu\",\n    value: function getCurrentContextMenu() {\n      var _this$contextMenuRef, _this$contextMenuRef$;\n\n      return (_this$contextMenuRef = this.contextMenuRef) === null || _this$contextMenuRef === void 0 ? void 0 : (_this$contextMenuRef$ = _this$contextMenuRef.current) === null || _this$contextMenuRef$ === void 0 ? void 0 : _this$contextMenuRef$._contextMenu;\n    }\n  }, {\n    key: \"setCurrentContextMenu\",\n    value: function setCurrentContextMenu(current) {\n      this.contextMenuRef.current._contextMenu = current;\n    }\n  }, {\n    key: \"tippyDistance\",\n    value: function tippyDistance(target) {\n      if (target.isNode === undefined || target.isNode()) {\n        return 10;\n      }\n\n      return -30;\n    }\n  }, {\n    key: \"addContextMenuEventListener\",\n    value: function addContextMenuEventListener() {\n      document.addEventListener('contextmenu', this.handleContextMenu);\n    }\n  }, {\n    key: \"removeContextMenuEventListener\",\n    value: function removeContextMenuEventListener() {\n      document.removeEventListener('contextmenu', this.handleContextMenu);\n    }\n  }, {\n    key: \"makeContextMenu\",\n    value: function makeContextMenu(ContextMenuComponentClass, target) {\n      var _this3 = this;\n\n      // Prevent the tippy content from picking up the right-click when we are moving it over to the edge/node\n      this.addContextMenuEventListener();\n      var content = this.contextMenuRef.current;\n      var tippyInstance = tippy(target.popperRef(), // Using an extension, popperRef is not in base definition\n      {\n        content: content,\n        trigger: 'manual',\n        arrow: true,\n        placement: 'bottom',\n        hideOnClick: false,\n        multiple: false,\n        sticky: true,\n        interactive: true,\n        theme: 'light-border',\n        size: 'large',\n        distance: this.tippyDistance(target)\n      }).instances[0];\n      var result = /*#__PURE__*/React.createElement(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Router, {\n        history: history,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ContextMenuComponentClass, Object.assign({\n        element: target,\n        contextMenu: tippyInstance\n      }, target.data(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }))));\n      ReactDOM.render(result, content, function () {\n        _this3.setCurrentContextMenu(tippyInstance);\n\n        tippyInstance.show(); // Schedule the removal of the contextmenu listener after finishing with the show procedure, so we can\n        // interact with the popper content e.g. select and copy (with right click) values from it.\n\n        setTimeout(function () {\n          _this3.removeContextMenuEventListener();\n        }, 0);\n      });\n    }\n  }]);\n\n  return CytoscapeContextMenuWrapper;\n}(React.PureComponent);","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/CytoscapeContextMenu.tsx"],"names":["React","ReactDOM","Router","tippy","Provider","store","history","getOptions","CytoscapeContextMenuWrapper","props","contextMenuRef","handleDocumentMouseUp","event","button","currentContextMenu","getCurrentContextMenu","target","popper","contains","hide","handleContextMenu","preventDefault","createRef","document","addEventListener","removeEventListener","cy","on","contextMenuComponentType","undefined","isNode","isParent","groupContextMenuContent","nodeContextMenuContent","isEdge","edgeContextMenuContent","data","length","makeContextMenu","current","_contextMenu","ContextMenuComponentClass","addContextMenuEventListener","content","tippyInstance","popperRef","trigger","arrow","placement","hideOnClick","multiple","sticky","interactive","theme","size","distance","tippyDistance","instances","result","render","setCurrentContextMenu","show","setTimeout","removeContextMenuEventListener","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as Cy from 'cytoscape';\nimport { Router } from 'react-router';\nimport tippy, { Instance } from 'tippy.js';\nimport { DecoratedGraphEdgeData, DecoratedGraphNodeData } from '../../types/Graph';\nimport { Provider } from 'react-redux';\nimport { store } from '../../store/ConfigStore';\nimport history from '../../app/History';\nimport { getOptions } from './ContextMenu/NodeContextMenu';\n\ntype Props = {\n  groupContextMenuContent?: NodeContextMenuType;\n  nodeContextMenuContent?: NodeContextMenuType;\n  edgeContextMenuContent?: EdgeContextMenuType;\n};\n\ntype TippyInstance = Instance;\n\ntype ContextMenuContainer = HTMLDivElement & {\n  _contextMenu: TippyInstance;\n};\n\ntype ContextMenuProps = {\n  element: Cy.NodeSingular | Cy.Core;\n  contextMenu: TippyInstance;\n};\n\nexport type NodeContextMenuProps = DecoratedGraphNodeData & ContextMenuProps;\nexport type EdgeContextMenuProps = DecoratedGraphEdgeData & ContextMenuProps;\n\nexport type NodeContextMenuType = React.ComponentType<NodeContextMenuProps>;\nexport type EdgeContextMenuType = React.ComponentType<EdgeContextMenuProps>;\n\nexport class CytoscapeContextMenuWrapper extends React.PureComponent<Props> {\n  private readonly contextMenuRef: React.RefObject<ContextMenuContainer>;\n\n  constructor(props: Props) {\n    super(props);\n    this.contextMenuRef = React.createRef<ContextMenuContainer>();\n  }\n\n  componentDidMount() {\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  handleDocumentMouseUp = (event: MouseEvent) => {\n    if (event.button === 2) {\n      // Ignore mouseup of right button\n      return;\n    }\n    const currentContextMenu = this.getCurrentContextMenu();\n    if (currentContextMenu) {\n      // Allow interaction in our popper component (Selecting and copying) without it disappearing\n      if (event.target && currentContextMenu.popper.contains(event.target as Node)) {\n        return;\n      }\n      currentContextMenu.hide();\n    }\n  };\n\n  handleContextMenu = (event: MouseEvent) => {\n    // Disable the context menu in popper\n    const currentContextMenu = this.getCurrentContextMenu();\n    if (currentContextMenu) {\n      if (event.target && currentContextMenu.popper.contains(event.target as Node)) {\n        event.preventDefault();\n      }\n    }\n    return true;\n  };\n\n  // Connects cy to this component\n  connectCy(cy: Cy.Core) {\n    cy.on('cxttapstart taphold', (event: Cy.EventObject) => {\n      event.preventDefault();\n      if (event.target) {\n        const currentContextMenu = this.getCurrentContextMenu();\n        if (currentContextMenu) {\n          currentContextMenu.hide(0); // hide it in 0ms\n        }\n\n        let contextMenuComponentType: EdgeContextMenuType | NodeContextMenuType | undefined;\n\n        if (event.target === cy) {\n          contextMenuComponentType = undefined;\n        } else if (event.target.isNode() && event.target.isParent()) {\n          contextMenuComponentType = this.props.groupContextMenuContent;\n        } else if (event.target.isNode()) {\n          contextMenuComponentType = this.props.nodeContextMenuContent;\n        } else if (event.target.isEdge()) {\n          contextMenuComponentType = this.props.edgeContextMenuContent;\n        }\n\n        if (contextMenuComponentType && getOptions({ ...event.target.data() }).length > 0) {\n          this.makeContextMenu(contextMenuComponentType, event.target);\n        }\n      }\n      return false;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"hidden\">\n        <div ref={this.contextMenuRef} />\n      </div>\n    );\n  }\n\n  private getCurrentContextMenu() {\n    return this.contextMenuRef?.current?._contextMenu;\n  }\n\n  private setCurrentContextMenu(current: TippyInstance) {\n    this.contextMenuRef!.current!._contextMenu = current;\n  }\n\n  private tippyDistance(target: Cy.NodeSingular | Cy.EdgeSingular) {\n    if (target.isNode === undefined || target.isNode()) {\n      return 10;\n    }\n    return -30;\n  }\n\n  private addContextMenuEventListener() {\n    document.addEventListener('contextmenu', this.handleContextMenu);\n  }\n\n  private removeContextMenuEventListener() {\n    document.removeEventListener('contextmenu', this.handleContextMenu);\n  }\n\n  private makeContextMenu(\n    ContextMenuComponentClass: EdgeContextMenuType | NodeContextMenuType,\n    target: Cy.NodeSingular | Cy.EdgeSingular\n  ) {\n    // Prevent the tippy content from picking up the right-click when we are moving it over to the edge/node\n    this.addContextMenuEventListener();\n    const content = this.contextMenuRef.current;\n    const tippyInstance = tippy(\n      (target as any).popperRef(), // Using an extension, popperRef is not in base definition\n      {\n        content: content as HTMLDivElement,\n        trigger: 'manual',\n        arrow: true,\n        placement: 'bottom',\n        hideOnClick: false,\n        multiple: false,\n        sticky: true,\n        interactive: true,\n        theme: 'light-border',\n        size: 'large',\n        distance: this.tippyDistance(target)\n      }\n    ).instances[0];\n\n    const result = (\n      <Provider store={store}>\n        <Router history={history}>\n          <ContextMenuComponentClass element={target} contextMenu={tippyInstance} {...target.data()} />\n        </Router>\n      </Provider>\n    );\n\n    ReactDOM.render(result, content, () => {\n      this.setCurrentContextMenu(tippyInstance);\n      tippyInstance.show();\n      // Schedule the removal of the contextmenu listener after finishing with the show procedure, so we can\n      // interact with the popper content e.g. select and copy (with right click) values from it.\n      setTimeout(() => {\n        this.removeContextMenuEventListener();\n      }, 0);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
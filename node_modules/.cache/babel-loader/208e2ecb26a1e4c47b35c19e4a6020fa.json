{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/Login/LoginPage.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ActionGroup, Button, Form, FormGroup, FormHelperText, ListItem, ListVariant, LoginFooterItem, LoginPage as LoginNext, TextInput } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { LoginStatus } from '../../store/Store';\nimport { AuthStrategy } from '../../types/Auth';\nimport { authenticationConfig, kialiLogo } from '../../config';\nimport LoginThunkActions from '../../actions/LoginThunkActions';\nimport { isAuthStrategyOAuth } from '../../config/AuthenticationConfig'; //import { c_wizard__nav_BoxShadow } from '@patternfly/react-tokens';\n\nexport var LoginPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(LoginPage, _React$Component);\n\n  var _super = _createSuper(LoginPage);\n\n  function LoginPage(props) {\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    _this = _super.call(this, props);\n\n    _this.handlePasswordChange = function (passwordValue) {\n      _this.setState({\n        password: passwordValue\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      if (isAuthStrategyOAuth()) {\n        // If we are using OpenShift or OpenId strategy, take the user back to the authorization endpoint\n        window.location.href = authenticationConfig.authorizationEndpoint;\n      } else if (authenticationConfig.strategy === AuthStrategy.header) {\n        window.location.href = window.WEB_ROOT ? window.WEB_ROOT : '/';\n      } else if (authenticationConfig.strategy === AuthStrategy.token) {\n        if (_this.state.password.trim().length !== 0 && _this.props.authenticate) {\n          _this.props.authenticate('', _this.state.password);\n\n          _this.setState({\n            showHelperText: false,\n            errorInput: '',\n            isValidToken: true,\n            filledInputs: true\n          });\n        } else {\n          var message = 'Please, provide a Service Account token.';\n\n          _this.setState({\n            showHelperText: true,\n            errorInput: message,\n            isValidToken: false,\n            filledInputs: false\n          });\n        }\n      }\n    };\n\n    _this.renderMessage = function (message, type, key) {\n      if (!message) {\n        return '';\n      }\n\n      var variant = type ? type : _this.props.status === LoginStatus.error || _this.state.filledInputs ? 'danger' : 'warning';\n      var icon = variant === 'danger' ? /*#__PURE__*/React.createElement(ExclamationCircleIcon, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(ExclamationTriangleIcon, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 69\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: key,\n        style: {\n          color: variant === 'danger' ? '#c00' : '#f0ab00',\n          fontWeight: 'bold',\n          fontSize: 16\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, icon, \"\\xA0 \", message);\n    };\n\n    _this.getHelperMessage = function () {\n      var messages = [];\n\n      if (_this.state.showHelperText) {\n        messages.push(_this.renderMessage(_this.state.errorInput, undefined, 'helperText'));\n      }\n\n      if (_this.props.status === LoginStatus.expired) {\n        messages.push(_this.renderMessage('Your session has expired or was terminated in another window.', 'warning', 'sessionExpired'));\n      }\n\n      if (_this.props.status === LoginStatus.error) {\n        messages.push(_this.props.message);\n      }\n\n      if (_this.props.postLoginErrorMsg) {\n        messages.push(_this.renderMessage(_this.props.postLoginErrorMsg, undefined, 'postLoginError'));\n      } // Get error messages passed on the URL\n\n\n      var pageParams = window.location.search;\n      var urlParams = new URLSearchParams(pageParams); // When using OpenId auth, the IdP can redirect back with `error` and `error_description`\n      // as url parameters. If these params are set, show them as errors.\n      // Reference: https://openid.net/specs/openid-connect-core-1_0-final.html#AuthError\n\n      if (urlParams.get('error')) {\n        if (urlParams.get('error_description')) {\n          messages.push(_this.renderMessage(\"Authentication error: \".concat(urlParams.get('error_description')), 'danger', 'idp-err'));\n        } else {\n          messages.push(_this.renderMessage(\"The OpenID provider returned the following error code: \".concat(urlParams.get('error')), 'danger', 'idp-err'));\n        }\n      } // Also, when using OpenId auth, the IdP can return with success. However, in the \"authorization code\" flow,\n      // the Kiali backend still needs to do some extra negotiation with the IdP, which can fail.\n      // The backend will set an \"openid_error\" url parameter when there is some failure.\n\n\n      if (urlParams.get('openid_error')) {\n        messages.push(_this.renderMessage(\"Authentication failed: \".concat(urlParams.get('openid_error')), 'danger', 'openid-err'));\n      }\n\n      return messages;\n    };\n\n    _this.state = {\n      username: '',\n      password: '',\n      isValidUsername: true,\n      isValidPassword: true,\n      isValidToken: true,\n      filledInputs: false,\n      showHelperText: false,\n      errorInput: ''\n    };\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var loginInput = document.getElementById('pf-login-username-id');\n\n      if (loginInput) {\n        loginInput.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loginLabel = 'Log In';\n\n      if (authenticationConfig.strategy === AuthStrategy.openshift) {\n        loginLabel = 'Log In With OpenShift';\n      } else if (authenticationConfig.strategy === AuthStrategy.openid) {\n        loginLabel = 'Log In With OpenID';\n      }\n\n      var messages = this.getHelperMessage();\n      var isLoggingIn = this.props.isPostLoginPerforming || this.props.status === LoginStatus.logging;\n      var isLoginButtonDisabled = isLoggingIn || this.props.status === LoginStatus.loggedIn;\n      var listItem = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoginFooterItem, {\n        href: \"https://www.kiali.io/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, \"Documentation\")), /*#__PURE__*/React.createElement(ListItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoginFooterItem, {\n        href: \"https://github.com/kiali/kiali\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, \"Contribute\")));\n      var loginPane;\n\n      if (authenticationConfig.strategy === AuthStrategy.token) {\n        loginPane = /*#__PURE__*/React.createElement(Form, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(FormHelperText, {\n          isError: !this.state.isValidToken || this.props.status === LoginStatus.error,\n          isHidden: !this.state.showHelperText && this.props.message === '' && messages.length === 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 11\n          }\n        }, messages), /*#__PURE__*/React.createElement(FormGroup, {\n          fieldId: \"token\",\n          label: \"Token\",\n          isRequired: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(TextInput, {\n          id: \"token\",\n          type: \"password\",\n          onChange: this.handlePasswordChange,\n          isRequired: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }\n        })), /*#__PURE__*/React.createElement(ActionGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          isDisabled: isLoginButtonDisabled,\n          style: {\n            width: '100%'\n          },\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }\n        }, \"Log In\")));\n      } else {\n        loginPane = /*#__PURE__*/React.createElement(Form, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(FormHelperText, {\n          isError: this.props.status === LoginStatus.error,\n          isHidden: this.props.status !== LoginStatus.error && this.props.message === '' && messages.length === 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 11\n          }\n        }, messages), /*#__PURE__*/React.createElement(ActionGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          style: {\n            width: '100%'\n          },\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }\n        }, loginLabel)));\n      }\n\n      return /*#__PURE__*/React.createElement(LoginNext, {\n        footerListVariants: ListVariant.inline,\n        brandImgSrc: kialiLogo,\n        brandImgAlt: \"Kiali logo\",\n        footerListItems: listItem,\n        textContent: \"\\u5DF2\\u542F\\u7528Istio\\u670D\\u52A1\\u7F51\\u683C\",\n        loginTitle: \"\\u767B\\u5F55\\u81F3\\u6301\\u7EED\\u4EA4\\u4ED8\\u7CFB\\u7EDF\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 7\n        }\n      }, loginPane);\n    }\n  }]);\n\n  return LoginPage;\n}(React.Component);\nLoginPage.contextTypes = {\n  store: function store() {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    status: state.authentication.status,\n    message: state.authentication.message\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    authenticate: function authenticate(username, password) {\n      return dispatch(LoginThunkActions.authenticate(username, password));\n    }\n  };\n};\n\nvar LoginPageContainer = connect(mapStateToProps, mapDispatchToProps)(LoginPage);\nexport default LoginPageContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Login/LoginPage.tsx"],"names":["React","connect","ActionGroup","Button","Form","FormGroup","FormHelperText","ListItem","ListVariant","LoginFooterItem","LoginPage","LoginNext","TextInput","ExclamationCircleIcon","ExclamationTriangleIcon","LoginStatus","AuthStrategy","authenticationConfig","kialiLogo","LoginThunkActions","isAuthStrategyOAuth","props","handlePasswordChange","passwordValue","setState","password","handleSubmit","e","preventDefault","window","location","href","authorizationEndpoint","strategy","header","WEB_ROOT","token","state","trim","length","authenticate","showHelperText","errorInput","isValidToken","filledInputs","message","renderMessage","type","key","variant","status","error","icon","color","fontWeight","fontSize","getHelperMessage","messages","push","undefined","expired","postLoginErrorMsg","pageParams","search","urlParams","URLSearchParams","get","username","isValidUsername","isValidPassword","loginInput","document","getElementById","focus","loginLabel","openshift","openid","isLoggingIn","isPostLoginPerforming","logging","isLoginButtonDisabled","loggedIn","listItem","loginPane","width","inline","Component","contextTypes","store","mapStateToProps","authentication","mapDispatchToProps","dispatch","LoginPageContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  FormHelperText,\n  ListItem,\n  ListVariant,\n  LoginFooterItem,\n  LoginPage as LoginNext,\n  TextInput\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon, ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { KialiAppState, LoginSession, LoginStatus } from '../../store/Store';\nimport { AuthStrategy } from '../../types/Auth';\nimport { authenticationConfig, kialiLogo } from '../../config';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport LoginThunkActions from '../../actions/LoginThunkActions';\nimport { isAuthStrategyOAuth } from '../../config/AuthenticationConfig';\n//import { c_wizard__nav_BoxShadow } from '@patternfly/react-tokens';\n\ntype LoginProps = {\n  status: LoginStatus;\n  session?: LoginSession;\n  message?: string;\n  error?: any;\n  authenticate: (username: string, password: string) => void;\n  isPostLoginPerforming: boolean;\n  postLoginErrorMsg?: string;\n};\n\ntype LoginState = {\n  username: string;\n  password: string;\n  isValidUsername: boolean;\n  isValidPassword: boolean;\n  isValidToken: boolean;\n  filledInputs: boolean;\n  showHelperText: boolean;\n  errorInput?: string;\n};\n\nexport class LoginPage extends React.Component<LoginProps, LoginState> {\n  static contextTypes = {\n    store: () => null\n  };\n  constructor(props: LoginProps) {\n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n      isValidUsername: true,\n      isValidPassword: true,\n      isValidToken: true,\n      filledInputs: false,\n      showHelperText: false,\n      errorInput: ''\n    };\n  }\n\n  componentDidMount() {\n    const loginInput = document.getElementById('pf-login-username-id');\n    if (loginInput) {\n      loginInput.focus();\n    }\n  }\n\n  handlePasswordChange = passwordValue => {\n    this.setState({ password: passwordValue });\n  };\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n\n    if (isAuthStrategyOAuth()) {\n      // If we are using OpenShift or OpenId strategy, take the user back to the authorization endpoint\n      window.location.href = authenticationConfig.authorizationEndpoint!;\n    } else if (authenticationConfig.strategy === AuthStrategy.header) {\n      window.location.href = (window as any).WEB_ROOT ? (window as any).WEB_ROOT : '/';\n    } else if (authenticationConfig.strategy === AuthStrategy.token) {\n      if (this.state.password.trim().length !== 0 && this.props.authenticate) {\n        this.props.authenticate('', this.state.password);\n        this.setState({\n          showHelperText: false,\n          errorInput: '',\n          isValidToken: true,\n          filledInputs: true\n        });\n      } else {\n        const message = 'Please, provide a Service Account token.';\n\n        this.setState({\n          showHelperText: true,\n          errorInput: message,\n          isValidToken: false,\n          filledInputs: false\n        });\n      }\n    }\n  };\n  renderMessage = (message: React.ReactNode | undefined, type: string | undefined, key: string) => {\n    if (!message) {\n      return '';\n    }\n    const variant = type\n      ? type\n      : this.props.status === LoginStatus.error || this.state.filledInputs\n      ? 'danger'\n      : 'warning';\n    const icon = variant === 'danger' ? <ExclamationCircleIcon /> : <ExclamationTriangleIcon />;\n    return (\n      <span key={key} style={{ color: variant === 'danger' ? '#c00' : '#f0ab00', fontWeight: 'bold', fontSize: 16 }}>\n        {icon}\n        &nbsp; {message}\n      </span>\n    );\n  };\n\n  getHelperMessage = () => {\n    const messages: any[] = [];\n    if (this.state.showHelperText) {\n      messages.push(this.renderMessage(this.state.errorInput, undefined, 'helperText'));\n    }\n    if (this.props.status === LoginStatus.expired) {\n      messages.push(\n        this.renderMessage('Your session has expired or was terminated in another window.', 'warning', 'sessionExpired')\n      );\n    }\n    if (this.props.status === LoginStatus.error) {\n      messages.push(this.props.message);\n    }\n    if (this.props.postLoginErrorMsg) {\n      messages.push(this.renderMessage(this.props.postLoginErrorMsg, undefined, 'postLoginError'));\n    }\n\n    // Get error messages passed on the URL\n    const pageParams = window.location.search;\n    const urlParams = new URLSearchParams(pageParams);\n\n    // When using OpenId auth, the IdP can redirect back with `error` and `error_description`\n    // as url parameters. If these params are set, show them as errors.\n    // Reference: https://openid.net/specs/openid-connect-core-1_0-final.html#AuthError\n    if (urlParams.get('error')) {\n      if (urlParams.get('error_description')) {\n        messages.push(\n          this.renderMessage(`Authentication error: ${urlParams.get('error_description')}`, 'danger', 'idp-err')\n        );\n      } else {\n        messages.push(\n          this.renderMessage(\n            `The OpenID provider returned the following error code: ${urlParams.get('error')}`,\n            'danger',\n            'idp-err'\n          )\n        );\n      }\n    }\n\n    // Also, when using OpenId auth, the IdP can return with success. However, in the \"authorization code\" flow,\n    // the Kiali backend still needs to do some extra negotiation with the IdP, which can fail.\n    // The backend will set an \"openid_error\" url parameter when there is some failure.\n    if (urlParams.get('openid_error')) {\n      messages.push(\n        this.renderMessage(`Authentication failed: ${urlParams.get('openid_error')}`, 'danger', 'openid-err')\n      );\n    }\n\n    return messages;\n  };\n\n  render() {\n    let loginLabel = 'Log In';\n    if (authenticationConfig.strategy === AuthStrategy.openshift) {\n      loginLabel = 'Log In With OpenShift';\n    } else if (authenticationConfig.strategy === AuthStrategy.openid) {\n      loginLabel = 'Log In With OpenID';\n    }\n\n    const messages = this.getHelperMessage();\n    const isLoggingIn = this.props.isPostLoginPerforming || this.props.status === LoginStatus.logging;\n    const isLoginButtonDisabled = isLoggingIn || this.props.status === LoginStatus.loggedIn;\n\n    const listItem = (\n      <>\n        <ListItem>\n          <LoginFooterItem href=\"https://www.kiali.io/\">Documentation</LoginFooterItem>\n        </ListItem>\n        <ListItem>\n          <LoginFooterItem href=\"https://github.com/kiali/kiali\">Contribute</LoginFooterItem>\n        </ListItem>\n      </>\n    );\n\n    let loginPane: React.ReactFragment;\n    if (authenticationConfig.strategy === AuthStrategy.token) {\n      loginPane = (\n        <Form>\n          <FormHelperText\n            isError={!this.state.isValidToken || this.props.status === LoginStatus.error}\n            isHidden={!this.state.showHelperText && this.props.message === '' && messages.length === 0}\n          >\n            {messages}\n          </FormHelperText>\n          <FormGroup fieldId=\"token\" label=\"Token\" isRequired={true}>\n            <TextInput id=\"token\" type=\"password\" onChange={this.handlePasswordChange} isRequired={true} />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              type=\"submit\"\n              onClick={this.handleSubmit}\n              isDisabled={isLoginButtonDisabled}\n              style={{ width: '100%' }}\n              variant=\"primary\"\n            >\n              Log In\n            </Button>\n          </ActionGroup>\n        </Form>\n      );\n    } else {\n      loginPane = (\n        <Form>\n          <FormHelperText\n            isError={this.props.status === LoginStatus.error}\n            isHidden={this.props.status !== LoginStatus.error && this.props.message === '' && messages.length === 0}\n          >\n            {messages}\n          </FormHelperText>\n          <ActionGroup>\n            <Button type=\"submit\" onClick={this.handleSubmit} style={{ width: '100%' }} variant=\"primary\">\n              {loginLabel}\n            </Button>\n          </ActionGroup>\n        </Form>\n      );\n    }\n\n    return (\n      <LoginNext\n        footerListVariants={ListVariant.inline}\n        brandImgSrc={kialiLogo}\n        brandImgAlt=\"Kiali logo\"\n        footerListItems={listItem}\n        textContent=\"已启用Istio服务网格\"\n        loginTitle=\"登录至持续交付系统\"\n      >\n        {loginPane}\n      </LoginNext>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  status: state.authentication.status,\n  message: state.authentication.message\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  authenticate: (username: string, password: string) => dispatch(LoginThunkActions.authenticate(username, password))\n});\n\nconst LoginPageContainer = connect(mapStateToProps, mapDispatchToProps)(LoginPage);\nexport default LoginPageContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nexport var HealthAnnotationConfig;\n/*\nHealth Annotation\n- Map key-value with annotations related with health configuration\n*/\n\n(function (HealthAnnotationConfig) {\n  HealthAnnotationConfig[\"HEALTH_RATE\"] = \"health.kiali.io/rate\";\n})(HealthAnnotationConfig || (HealthAnnotationConfig = {}));\n\nexport var HealthAnnotation = function HealthAnnotation(annotations) {\n  _classCallCheck(this, HealthAnnotation);\n\n  this.healthAnnotations = void 0;\n  this.healthAnnotations = annotations;\n};\nexport var RateHealth = /*#__PURE__*/function (_HealthAnnotation) {\n  _inherits(RateHealth, _HealthAnnotation);\n\n  var _super = _createSuper(RateHealth);\n\n  function RateHealth(annotations) {\n    var _this;\n\n    _classCallCheck(this, RateHealth);\n\n    _this = _super.call(this, annotations);\n    _this.annotation = void 0;\n    _this.isValid = void 0;\n    _this.toleranceConfig = void 0;\n\n    _this.validate = function () {\n      return !_this.annotation.split(';').some(function (annotate) {\n        return _this.isNotValidAnnotation(annotate);\n      });\n    };\n\n    _this.getToleranceConfig = function () {\n      var configs = [];\n\n      if (_this.isValid) {\n        _this.annotation.split(';').forEach(function (annotate) {\n          var splits = annotate.split(',');\n          configs.push({\n            code: _this.convertRegex(splits[0], true),\n            degraded: Number(splits[1]),\n            failure: Number(splits[2]),\n            protocol: _this.convertRegex(splits[3]),\n            direction: _this.convertRegex(splits[4])\n          });\n        });\n      }\n\n      return configs;\n    };\n\n    _this.convertRegex = function (str) {\n      var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (code) {\n        return new RegExp(str.replace(/x|X/g, '\\\\d'));\n      }\n\n      return new RegExp(str);\n    };\n\n    _this.isNotValidAnnotation = function (annotation) {\n      var splits = annotation.split(','); // Be sure annotation type 4xx,10,20,htpp,inbound\n\n      if (splits.length !== 5) {\n        return true;\n      } // validate Thresholds are numbers and degraded is lower than failure\n\n\n      if (!(isNumeric(splits[1]) && isNumeric(splits[2]))) {\n        return true;\n      }\n\n      var degraded = Number(splits[1]);\n      var failure = Number(splits[2]);\n      return degraded > failure ? true : false;\n    };\n\n    _this.annotation = annotations[HealthAnnotationConfig.HEALTH_RATE];\n\n    if (_this.annotation && _this.annotation.length > 0) {\n      _this.isValid = _this.validate();\n      _this.toleranceConfig = _this.isValid ? _this.getToleranceConfig() : undefined;\n    } else {\n      _this.isValid = false;\n    }\n\n    return _this;\n  }\n\n  return RateHealth;\n}(HealthAnnotation);\n\nvar isNumeric = function isNumeric(val) {\n  return !isNaN(Number(val));\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/HealthAnnotation.ts"],"names":["HealthAnnotationConfig","HealthAnnotation","annotations","healthAnnotations","RateHealth","annotation","isValid","toleranceConfig","validate","split","some","annotate","isNotValidAnnotation","getToleranceConfig","configs","forEach","splits","push","code","convertRegex","degraded","Number","failure","protocol","direction","str","RegExp","replace","length","isNumeric","HEALTH_RATE","undefined","val","isNaN"],"mappings":"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","sourcesContent":["import { ToleranceConfig } from './ServerConfig';\n\nexport enum HealthAnnotationConfig {\n  HEALTH_RATE = 'health.kiali.io/rate'\n}\n\n/*\nHealth Annotation\n- Map key-value with annotations related with health configuration\n*/\nexport type HealthAnnotationType = { [key: string]: string };\n\nexport class HealthAnnotation {\n  healthAnnotations: HealthAnnotationType;\n\n  constructor(annotations: HealthAnnotationType) {\n    this.healthAnnotations = annotations;\n  }\n}\n\nexport class RateHealth extends HealthAnnotation {\n  annotation: string;\n  isValid: boolean;\n  toleranceConfig?: ToleranceConfig[];\n\n  constructor(annotations: HealthAnnotationType) {\n    super(annotations);\n    this.annotation = annotations[HealthAnnotationConfig.HEALTH_RATE];\n    if (this.annotation && this.annotation.length > 0) {\n      this.isValid = this.validate();\n      this.toleranceConfig = this.isValid ? this.getToleranceConfig() : undefined;\n    } else {\n      this.isValid = false;\n    }\n  }\n\n  validate = () => {\n    return !this.annotation.split(';').some(annotate => this.isNotValidAnnotation(annotate));\n  };\n\n  getToleranceConfig = (): ToleranceConfig[] => {\n    var configs: ToleranceConfig[] = [];\n    if (this.isValid) {\n      this.annotation.split(';').forEach(annotate => {\n        const splits = annotate.split(',');\n        configs.push({\n          code: this.convertRegex(splits[0], true),\n          degraded: Number(splits[1]),\n          failure: Number(splits[2]),\n          protocol: this.convertRegex(splits[3]),\n          direction: this.convertRegex(splits[4])\n        });\n      });\n    }\n    return configs;\n  };\n\n  private convertRegex = (str: string, code: boolean = false): RegExp => {\n    if (code) {\n      return new RegExp(str.replace(/x|X/g, '\\\\d'));\n    }\n    return new RegExp(str);\n  };\n\n  private isNotValidAnnotation = (annotation: string): boolean => {\n    const splits = annotation.split(',');\n    // Be sure annotation type 4xx,10,20,htpp,inbound\n    if (splits.length !== 5) {\n      return true;\n    }\n    // validate Thresholds are numbers and degraded is lower than failure\n    if (!(isNumeric(splits[1]) && isNumeric(splits[2]))) {\n      return true;\n    }\n    const degraded = Number(splits[1]);\n    const failure = Number(splits[2]);\n    return degraded > failure ? true : false;\n  };\n}\n\nconst isNumeric = (val: string): boolean => {\n  return !isNaN(Number(val));\n};\n"]},"metadata":{},"sourceType":"module"}
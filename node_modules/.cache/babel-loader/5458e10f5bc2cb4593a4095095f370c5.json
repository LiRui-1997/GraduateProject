{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/WorkloadDetails/WorkloadPodLogs.tsx\";\nimport * as React from 'react';\nimport { Button, ButtonVariant, Card, CardBody, Grid, GridItem, TextInput, Toolbar, ToolbarGroup, ToolbarItem, Tooltip, TooltipPosition, Form, FormGroup, Dropdown, DropdownItem, KebabToggle, DropdownGroup, DropdownSeparator } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { addError, addSuccess } from 'utils/AlertUtils';\nimport { getPodLogs, getWorkloadSpans, setPodEnvoyProxyLogLevel } from '../../services/Api';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { ToolbarDropdown } from '../../components/ToolbarDropdown/ToolbarDropdown';\nimport { evalTimeRange, isEqualTimeRange } from '../../types/Common';\nimport { RenderComponentScroll } from '../../components/Nav/Page';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { KialiIcon, defaultIconStyle } from '../../config/KialiIcon';\nimport screenfull from 'screenfull';\nimport { connect } from 'react-redux';\nimport { timeRangeSelector } from '../../store/Selectors';\nimport { PFColors } from 'components/Pf/PfColors';\nimport AccessLogModal from 'components/Envoy/AccessLogModal';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport history, { URLParam } from 'app/History';\nimport moment from 'moment';\nimport { formatDuration } from 'utils/tracing/TracingHelper';\nimport { infoStyle } from 'styles/DropdownStyles';\nvar appContainerColors = [PFColors.White, PFColors.LightGreen400, PFColors.Purple100, PFColors.LightBlue400];\nvar proxyContainerColor = PFColors.Gold400;\nvar spanColor = PFColors.Cyan300;\n// LogLevel are the log levels supported by the proxy.\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"Off\"] = \"off\";\n  LogLevel[\"Trace\"] = \"trace\";\n  LogLevel[\"Debug\"] = \"debug\";\n  LogLevel[\"Info\"] = \"info\";\n  LogLevel[\"Warning\"] = \"warning\";\n  LogLevel[\"Error\"] = \"error\";\n  LogLevel[\"Critical\"] = \"critical\";\n})(LogLevel || (LogLevel = {}));\n\nvar RETURN_KEY_CODE = 13;\nvar NoLogsFoundMessage = 'No container logs found for the time period.';\nvar TailLinesDefault = 100;\nvar TailLinesOptions = {\n  '-1': 'All lines',\n  '10': '10 lines',\n  '50': '50 lines',\n  '100': '100 lines',\n  '300': '300 lines',\n  '500': '500 lines',\n  '1000': '1000 lines',\n  '5000': '5000 lines'\n};\nvar alInfoIcon = style({\n  display: 'inline-block',\n  margin: '0px 5px 0px 0px',\n  width: '10px'\n});\nvar displayFlex = style({\n  display: 'flex'\n});\nvar infoIcons = style({\n  marginLeft: '0.5em',\n  width: '24px'\n});\nvar toolbar = style({\n  margin: '0 0 10px 0'\n});\nvar toolbarSpace = style({\n  marginLeft: '1em'\n});\nvar toolbarRight = style({\n  marginLeft: 'auto'\n});\nvar toolbarTail = style({\n  marginTop: '2px'\n});\nvar logsToolbar = style({\n  height: '40px',\n  margin: '0 10px 0 0'\n});\nvar logsDiv = style({\n  marginRight: '5px'\n});\nvar logsDisplay = style({\n  fontFamily: 'monospace',\n  margin: 0,\n  overflow: 'auto',\n  padding: '10px',\n  resize: 'none',\n  whiteSpace: 'pre',\n  width: '100%'\n});\n\nvar logsBackground = function logsBackground(enabled) {\n  return {\n    backgroundColor: enabled ? PFColors.Black1000 : 'gray'\n  };\n};\n\nvar logsHeight = function logsHeight(showToolbar, fullscreen) {\n  var toolbarHeight = showToolbar ? '0px' : '49px';\n  return {\n    height: fullscreen ? \"calc(100vh - 130px + \".concat(toolbarHeight, \")\") : \"calc(var(--kiali-details-pages-tab-content-height) - 155px + \".concat(toolbarHeight, \")\")\n  };\n};\n\nexport var WorkloadPodLogs = /*#__PURE__*/function (_React$Component) {\n  _inherits(WorkloadPodLogs, _React$Component);\n\n  var _super = _createSuper(WorkloadPodLogs);\n\n  function WorkloadPodLogs(props) {\n    var _this;\n\n    _classCallCheck(this, WorkloadPodLogs);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n    _this.podOptions = [];\n    _this.logsRef = void 0;\n\n    _this.renderItem = function (object) {\n      return /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 12\n        }\n      }, object);\n    };\n\n    _this.toggleSpans = function (checked) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.set(URLParam.SHOW_SPANS, String(checked));\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n\n      _this.setState({\n        showSpans: !_this.state.showSpans\n      });\n    };\n\n    _this.getContainerLegend = function () {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"container-log-selection\",\n        isInline: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: {\n          badge: PFBadges.Container.badge,\n          tt: 'Containers'\n        },\n        style: {\n          marginRight: '10px'\n        },\n        position: TooltipPosition.top,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }\n      }), _this.state.containerOptions.map(function (c, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: \"c-d-\".concat(i),\n          className: \"pf-c-check\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          key: \"c-i-\".concat(i),\n          id: \"container-\".concat(i),\n          className: \"pf-c-check__input\",\n          style: {\n            marginBottom: '3px'\n          },\n          type: \"checkbox\",\n          checked: c.isSelected,\n          onChange: function onChange() {\n            return _this.toggleSelected(c);\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"label\", {\n          key: \"c-l-\".concat(i),\n          htmlFor: \"container-\".concat(i),\n          className: \"pf-c-check__label\",\n          style: {\n            backgroundColor: PFColors.Black1000,\n            color: c.color,\n            paddingLeft: '5px',\n            paddingRight: '5px'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 17\n          }\n        }, c.displayName));\n      })));\n    };\n\n    _this.toggleSelected = function (c) {\n      c.isSelected = !c.isSelected;\n\n      _this.setState({\n        containerOptions: _toConsumableArray(_this.state.containerOptions)\n      });\n    };\n\n    _this.getLogsDiv = function () {\n      var _this$state$container;\n\n      var hasProxyContainer = (_this$state$container = _this.state.containerOptions) === null || _this$state$container === void 0 ? void 0 : _this$state$container.some(function (opt) {\n        return opt.isProxy;\n      });\n      var logDropDowns = Object.keys(LogLevel).map(function (level) {\n        return /*#__PURE__*/React.createElement(DropdownItem, {\n          key: \"setLogLevel\".concat(level),\n          onClick: function onClick() {\n            _this.setLogLevel(LogLevel[level]);\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 9\n          }\n        }, level);\n      });\n      var dropdownGroupLabel =\n      /*#__PURE__*/\n      // nowrap is needed for the info icon to appear on same line as the label text\n      React.createElement(\"div\", {\n        style: {\n          whiteSpace: 'nowrap'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 7\n        }\n      }, \"Set Proxy Log Level\", /*#__PURE__*/React.createElement(Tooltip, {\n        position: TooltipPosition.right,\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }\n        }, \"This action configures the proxy logger level but does not affect the proxy \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 93\n          }\n        }, \"access\"), \" logs. Setting the log level to 'off' disables the proxy loggers but does \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 76\n          }\n        }, \"not\"), \" disable access logging. To hide all proxy logging from the logs view, including access logs, un-check the proxy container. \", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 108\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 17\n          }\n        }), \"This option is disabled for pods with no proxy container.\")),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: infoStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }\n      })));\n      var kebabActions = [/*#__PURE__*/React.createElement(DropdownItem, {\n        key: \"toggleToolbar\",\n        onClick: _this.toggleToolbar,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 7\n        }\n      }, \"\".concat(_this.state.showToolbar ? 'Collapse' : 'Expand', \" Toolbar\")), /*#__PURE__*/React.createElement(DropdownItem, {\n        key: \"toggleRegex\",\n        onClick: _this.toggleUseRegex,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 7\n        }\n      }, \"Match via \".concat(_this.state.useRegex ? 'Substring' : 'Regex')), /*#__PURE__*/React.createElement(DropdownItem, {\n        key: \"toggleTimestamps\",\n        onClick: _this.toggleShowTimestamps,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 7\n        }\n      }, \"\".concat(_this.state.showTimestamps ? 'Remove' : 'Show', \" Timestamps\")), /*#__PURE__*/React.createElement(DropdownSeparator, {\n        key: \"logLevelSeparator\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(DropdownGroup, {\n        label: dropdownGroupLabel,\n        key: \"setLogLevels\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 7\n        }\n      }, hasProxyContainer && logDropDowns)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: \"logsDiv\",\n        id: \"logsDiv\",\n        className: logsDiv,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Toolbar, {\n        className: logsToolbar,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }\n      }, _this.getContainerLegend())), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        className: toolbarRight,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"copy_logs\",\n        position: \"top\",\n        content: \"Copy logs to clipboard\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CopyToClipboard, {\n        text: _this.entriesToString(_this.state.entries),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        isInline: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Copy, {\n        className: defaultIconStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 21\n        }\n      }))))), /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: toolbarSpace,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"fullscreen_logs\",\n        position: \"top\",\n        content: \"Expand logs full screen\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        onClick: _this.toggleFullscreen,\n        isDisabled: !_this.hasEntries(_this.state.entries),\n        isInline: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Expand, {\n        className: defaultIconStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown, {\n        style: {\n          width: '20px'\n        },\n        toggle: /*#__PURE__*/React.createElement(KebabToggle, {\n          onToggle: _this.setKebabOpen,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 25\n          }\n        }),\n        dropdownItems: kebabActions,\n        isPlain: true,\n        isOpen: _this.state.kebabOpen,\n        position: 'right',\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        key: \"logsText\",\n        id: \"logsText\",\n        className: logsDisplay // note - for some reason the callable typescript needs to be applied as \"style\" and\n        // not as a \"className\".  Otherwise the initial scroillHeight is incorrectly set\n        // (to max) and when we try to assign scrollTop to scrollHeight (above),it stays at 0\n        // and we fail to set the scroll correctly. So, don't change this!\n        ,\n        style: _objectSpread(_objectSpread({}, logsHeight(_this.state.showToolbar, _this.state.fullscreen)), logsBackground(_this.hasEntries(_this.state.entries))),\n        ref: _this.logsRef,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 9\n        }\n      }, _this.hasEntries(_this.state.entries) ? _this.state.entries.filter(function (e) {\n        return !e.isHidden;\n      }).map(function (e, i) {\n        if (e.span) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: \"s-\".concat(i),\n            style: {\n              height: '22px',\n              lineHeight: '22px'\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 23\n            }\n          }, _this.state.showTimestamps && /*#__PURE__*/React.createElement(\"span\", {\n            key: \"al-s-\".concat(i),\n            style: {\n              color: spanColor,\n              fontSize: '12px',\n              marginRight: '5px'\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 27\n            }\n          }, e.timestamp), /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"al-tt-\".concat(i),\n            position: TooltipPosition.auto,\n            entryDelay: 1000,\n            content: \"Click to navigate to span detail\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            key: \"s-b-\".concat(i),\n            variant: ButtonVariant.plain,\n            style: {\n              paddingLeft: '6px',\n              width: '10px',\n              height: '10px',\n              fontFamily: 'monospace',\n              fontSize: '12px'\n            },\n            onClick: function onClick() {\n              _this.gotoSpan(e.span);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            key: \"al-i-\".concat(i),\n            className: alInfoIcon,\n            color: spanColor,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 29\n            }\n          }))), /*#__PURE__*/React.createElement(\"p\", {\n            key: \"al-p-\".concat(i),\n            style: {\n              color: spanColor,\n              fontSize: '12px',\n              verticalAlign: 'center',\n              display: 'inline-block'\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 25\n            }\n          }, _this.entryToString(e)));\n        }\n\n        var le = e.logEntry;\n        return !le.accessLog ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n          key: \"le-\".concat(i),\n          style: {\n            color: le.color,\n            fontSize: '12px'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 23\n          }\n        }, _this.entryToString(e))) : /*#__PURE__*/React.createElement(\"div\", {\n          key: \"al-\".concat(i),\n          style: {\n            height: '22px',\n            lineHeight: '22px'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 21\n          }\n        }, _this.state.showTimestamps && /*#__PURE__*/React.createElement(\"span\", {\n          key: \"al-s-\".concat(i),\n          style: {\n            color: le.color,\n            fontSize: '12px',\n            marginRight: '5px'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 25\n          }\n        }, e.timestamp), /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"al-tt-\".concat(i),\n          position: TooltipPosition.auto,\n          entryDelay: 1000,\n          content: \"Click for Envoy Access Log details\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          key: \"al-b-\".concat(i),\n          variant: ButtonVariant.plain,\n          style: {\n            paddingLeft: '6px',\n            width: '10px',\n            height: '10px',\n            fontFamily: 'monospace',\n            fontSize: '12px'\n          },\n          onClick: function onClick() {\n            _this.addAccessLogModal(le.message, le.accessLog);\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          key: \"al-i-\".concat(i),\n          className: alInfoIcon,\n          color: le.color,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 27\n          }\n        }))), /*#__PURE__*/React.createElement(\"p\", {\n          key: \"al-p-\".concat(i),\n          style: {\n            color: le.color,\n            fontSize: '12px',\n            verticalAlign: 'center',\n            display: 'inline-block'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 23\n          }\n        }, le.message));\n      }) : NoLogsFoundMessage));\n    };\n\n    _this.getAccessLogModals = function () {\n      var modals = [];\n      var i = 0;\n\n      _this.state.accessLogModals.forEach(function (v, k) {\n        modals.push( /*#__PURE__*/React.createElement(AccessLogModal, {\n          key: \"alm-\".concat(i++),\n          accessLog: v,\n          accessLogMessage: k,\n          onClose: function onClose() {\n            return _this.removeAccessLogModal(k);\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 9\n          }\n        }));\n      });\n\n      return modals;\n    };\n\n    _this.setPod = function (podValue) {\n      var pod = _this.props.pods[Number(podValue)];\n\n      var containerNames = _this.getContainerOptions(pod);\n\n      _this.setState({\n        containerOptions: containerNames,\n        podValue: Number(podValue)\n      });\n    };\n\n    _this.setTailLines = function (tailLines) {\n      _this.setState({\n        tailLines: tailLines\n      });\n    };\n\n    _this.setKebabOpen = function (kebabOpen) {\n      _this.setState({\n        kebabOpen: kebabOpen\n      });\n    };\n\n    _this.gotoSpan = function (span) {\n      var link = \"/namespaces/\".concat(_this.props.namespace, \"/workloads/\").concat(_this.props.workload) + \"?tab=traces&\".concat(URLParam.JAEGER_TRACE_ID, \"=\").concat(span.traceID, \"&\").concat(URLParam.JAEGER_SPAN_ID, \"=\").concat(span.spanID);\n      history.push(link);\n    };\n\n    _this.addAccessLogModal = function (k, v) {\n      var accessLogModals = new Map(_this.state.accessLogModals);\n      accessLogModals.set(k, v);\n\n      _this.setState({\n        accessLogModals: accessLogModals\n      });\n    };\n\n    _this.removeAccessLogModal = function (k) {\n      _this.state.accessLogModals.delete(k);\n\n      var accessLogModals = new Map(_this.state.accessLogModals);\n\n      _this.setState({\n        accessLogModals: accessLogModals\n      });\n    };\n\n    _this.toggleShowTimestamps = function () {\n      _this.setState({\n        showTimestamps: !_this.state.showTimestamps,\n        kebabOpen: false\n      });\n    };\n\n    _this.toggleToolbar = function () {\n      _this.setState({\n        showToolbar: !_this.state.showToolbar,\n        kebabOpen: false\n      });\n    };\n\n    _this.toggleUseRegex = function () {\n      _this.setState({\n        useRegex: !_this.state.useRegex,\n        kebabOpen: false\n      });\n    };\n\n    _this.setLogLevel = function (level) {\n      _this.setState({\n        kebabOpen: false\n      });\n\n      var pod = _this.props.pods[_this.state.podValue];\n      setPodEnvoyProxyLogLevel(_this.props.namespace, pod.name, level).then(function (_resp) {\n        addSuccess(\"Successfully updated proxy log level to '\".concat(level, \"' for pod: \").concat(pod.name));\n      }).catch(function (error) {\n        addError('Unable to set proxy pod level', error);\n      });\n    };\n\n    _this.doShowAndHide = function () {\n      _this.filterEntries(_this.state.entries, _this.state.showLogValue, _this.state.hideLogValue);\n\n      _this.setState({\n        entries: _toConsumableArray(_this.state.entries),\n        showClearShowLogButton: !!_this.state.showLogValue,\n        showClearHideLogButton: !!_this.state.hideLogValue\n      });\n    };\n\n    _this.checkSubmitShow = function (event) {\n      var keyCode = event.keyCode ? event.keyCode : event.which;\n\n      if (keyCode === RETURN_KEY_CODE) {\n        event.preventDefault();\n\n        _this.doShowAndHide();\n      }\n    };\n\n    _this.updateShow = function (val) {\n      if ('' === val) {\n        _this.clearShow();\n      } else {\n        _this.setState({\n          showLogValue: val\n        });\n      }\n    };\n\n    _this.filterEntries = function (entries, showValue, hideValue) {\n      entries.forEach(function (e) {\n        return e.isHidden = undefined;\n      });\n\n      if (!!showValue) {\n        if (_this.state.useRegex) {\n          try {\n            var regexp = RegExp(showValue);\n            entries.forEach(function (e) {\n              return e.isHidden = e.logEntry && !regexp.test(e.logEntry.message);\n            });\n\n            if (!!_this.state.showError) {\n              _this.setState({\n                showError: undefined\n              });\n            }\n          } catch (e) {\n            _this.setState({\n              showError: \"Show: \".concat(e.message)\n            });\n          }\n        } else {\n          entries.forEach(function (e) {\n            return e.isHidden = e.logEntry && !e.logEntry.message.includes(showValue);\n          });\n        }\n      }\n\n      if (!!hideValue) {\n        if (_this.state.useRegex) {\n          try {\n            var _regexp = RegExp(hideValue);\n\n            entries.forEach(function (e) {\n              return e.isHidden = e.isHidden || e.logEntry && _regexp.test(e.logEntry.message);\n            });\n\n            if (!!_this.state.hideError) {\n              _this.setState({\n                hideError: undefined\n              });\n            }\n          } catch (e) {\n            _this.setState({\n              hideError: \"Hide: \".concat(e.message)\n            });\n          }\n        } else {\n          entries.forEach(function (e) {\n            return e.isHidden = e.isHidden || e.logEntry && e.logEntry.message.includes(hideValue);\n          });\n        }\n      }\n    };\n\n    _this.clearShow = function () {\n      // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n      // this.showInputRef.value = '';\n      var htmlInputElement = document.getElementById('log_show');\n\n      if (htmlInputElement !== null) {\n        htmlInputElement.value = '';\n      }\n\n      _this.filterEntries(_this.state.entries, '', _this.state.hideLogValue);\n\n      _this.setState({\n        showError: undefined,\n        showLogValue: '',\n        showClearShowLogButton: false,\n        entries: _toConsumableArray(_this.state.entries)\n      });\n    };\n\n    _this.checkSubmitHide = function (event) {\n      var keyCode = event.keyCode ? event.keyCode : event.which;\n\n      if (keyCode === RETURN_KEY_CODE) {\n        event.preventDefault();\n\n        _this.doShowAndHide();\n      }\n    };\n\n    _this.updateHide = function (val) {\n      if ('' === val) {\n        _this.clearHide();\n      } else {\n        _this.setState({\n          hideLogValue: val\n        });\n      }\n    };\n\n    _this.clearHide = function () {\n      // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n      // this.hideInputRef.value = '';\n      var htmlInputElement = document.getElementById('log_hide');\n\n      if (htmlInputElement !== null) {\n        htmlInputElement.value = '';\n      }\n\n      _this.filterEntries(_this.state.entries, _this.state.showLogValue, '');\n\n      _this.setState({\n        hideError: undefined,\n        hideLogValue: '',\n        showClearHideLogButton: false,\n        entries: _toConsumableArray(_this.state.entries)\n      });\n    };\n\n    _this.toggleFullscreen = function () {\n      var screenFullAlias = screenfull; // this casting was necessary\n\n      if (screenFullAlias.isFullscreen) {\n        screenFullAlias.exit();\n      } else {\n        var element = document.getElementById('logs');\n\n        if (screenFullAlias.isEnabled) {\n          if (element) {\n            screenFullAlias.request(element);\n          }\n        }\n      }\n    };\n\n    _this.getContainerOptions = function (pod) {\n      var _containers;\n\n      // sort containers by name, consistently positioning proxy container first.\n      var containers = _toConsumableArray(pod.istioContainers || []);\n\n      (_containers = containers).push.apply(_containers, _toConsumableArray(pod.containers || []));\n\n      containers = containers.sort(function (c1, c2) {\n        if (c1.isProxy !== c2.isProxy) {\n          return c1.isProxy ? 0 : 1;\n        }\n\n        return c1.name < c2.name ? 0 : 1;\n      });\n      var appContainerCount = 0;\n      var containerOptions = containers.map(function (c) {\n        var name = c.name;\n\n        if (c.isProxy) {\n          return {\n            color: proxyContainerColor,\n            displayName: name,\n            isProxy: true,\n            isSelected: true,\n            name: name\n          };\n        }\n\n        var color = appContainerColors[appContainerCount++ % appContainerColors.length];\n        return {\n          color: color,\n          displayName: name,\n          isProxy: false,\n          isSelected: true,\n          name: name\n        };\n      });\n      return containerOptions;\n    };\n\n    _this.fetchEntries = function (namespace, podName, containerOptions, showSpans, tailLines, timeRange) {\n      var now = Date.now();\n      var timeRangeDates = evalTimeRange(timeRange);\n      var sinceTime = Math.floor(timeRangeDates[0].getTime() / 1000);\n      var endTime = timeRangeDates[1].getTime(); // to save work on the server-side, only supply duration when time range is in the past\n\n      var duration = 0;\n\n      if (endTime < now) {\n        duration = Math.floor(timeRangeDates[1].getTime() / 1000) - sinceTime;\n      }\n\n      var selectedContainers = containerOptions.filter(function (c) {\n        return c.isSelected;\n      });\n      var promises = selectedContainers.map(function (c) {\n        return getPodLogs(namespace, podName, c.name, tailLines, sinceTime, duration, c.isProxy);\n      });\n\n      if (showSpans) {\n        // Convert seconds to microseconds\n        var params = {\n          endMicros: endTime * 1000,\n          startMicros: sinceTime * 1000000\n        };\n        promises.unshift(getWorkloadSpans(namespace, _this.props.workload, params));\n      }\n\n      _this.promises.registerAll('logs', promises).then(function (responses) {\n        var entries = [];\n\n        if (showSpans) {\n          var spans = showSpans ? responses[0].data : [];\n          entries = spans.map(function (span) {\n            span.startTime = Math.floor(span.startTime / 1000000);\n            return {\n              timestamp: moment(span.startTime * 1000).utc().format('YYYY-MM-DD HH:mm:ss'),\n              timestampUnix: span.startTime,\n              span: span\n            };\n          });\n          responses.shift();\n        }\n\n        var _loop = function _loop(i) {\n          var response = responses[i].data;\n          var containerLogEntries = response.entries;\n\n          if (!containerLogEntries) {\n            return \"continue\";\n          }\n\n          var color = selectedContainers[i].color;\n          containerLogEntries.forEach(function (le) {\n            le.color = color;\n            entries.push({\n              timestamp: le.timestamp,\n              timestampUnix: le.timestampUnix,\n              logEntry: le\n            });\n          });\n        };\n\n        for (var i = 0; i < responses.length; i++) {\n          var _ret = _loop(i);\n\n          if (_ret === \"continue\") continue;\n        }\n\n        _this.filterEntries(entries, _this.state.showLogValue, _this.state.hideLogValue);\n\n        var sortedEntries = entries.sort(function (a, b) {\n          return a.timestampUnix - b.timestampUnix;\n        });\n\n        _this.setState({\n          entries: sortedEntries,\n          loadingLogs: false\n        });\n\n        return;\n      }).catch(function (error) {\n        if (error.isCanceled) {\n          console.debug('Logs: Ignore fetch error (canceled).');\n\n          _this.setState({\n            loadingLogs: false\n          });\n\n          return;\n        }\n\n        var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        var now = Date.now();\n\n        _this.setState({\n          loadingLogs: false,\n          entries: [{\n            timestamp: now.toString(),\n            timestampUnix: now,\n            logEntry: {\n              severity: 'Error',\n              timestamp: now.toString(),\n              timestampUnix: now,\n              message: \"Failed to fetch workload logs: \".concat(errorMsg)\n            }\n          }]\n        });\n      });\n\n      _this.setState({\n        loadingLogs: true,\n        entries: []\n      });\n    };\n\n    _this.entriesToString = function (entries) {\n      return entries.map(function (entry) {\n        return _this.entryToString(entry);\n      }).join('\\n');\n    };\n\n    _this.entryToString = function (entry) {\n      if (entry.logEntry) {\n        var le = entry.logEntry;\n        return _this.state.showTimestamps ? \"\".concat(entry.timestamp, \" \").concat(le.message) : le.message;\n      }\n\n      var _ref = entry.span,\n          duration = _ref.duration,\n          operationName = _ref.operationName;\n      return \"duration: \".concat(formatDuration(duration), \", operationName: \").concat(operationName);\n    };\n\n    _this.hasEntries = function (entries) {\n      return !!entries && entries.length > 0;\n    };\n\n    _this.logsRef = React.createRef();\n\n    var _urlParams = new URLSearchParams(history.location.search);\n\n    var _showSpans = _urlParams.get(URLParam.SHOW_SPANS);\n\n    var defaultState = {\n      accessLogModals: new Map(),\n      entries: [],\n      fullscreen: false,\n      hideLogValue: '',\n      kebabOpen: false,\n      loadingLogs: false,\n      logWindowSelections: [],\n      showClearHideLogButton: false,\n      showClearShowLogButton: false,\n      showLogValue: '',\n      showSpans: _showSpans !== 'true' ? false : true,\n      showTimestamps: false,\n      showToolbar: true,\n      tailLines: TailLinesDefault,\n      useRegex: false\n    };\n\n    if (_this.props.pods.length < 1) {\n      _this.state = _objectSpread(_objectSpread({}, defaultState), {}, {\n        loadingLogsError: 'There are no logs to display because no pods are available.'\n      });\n      return _possibleConstructorReturn(_this);\n    }\n\n    if (_this.props.pods.length > 0) {\n      for (var i = 0; i < _this.props.pods.length; ++i) {\n        _this.podOptions[\"\".concat(i)] = _this.props.pods[i].name;\n      }\n    }\n\n    var _podValue = 0;\n    var _pod = _this.props.pods[_podValue];\n\n    var _containerOptions = _this.getContainerOptions(_pod);\n\n    _this.state = _objectSpread(_objectSpread({}, defaultState), {}, {\n      containerOptions: _containerOptions,\n      podValue: _podValue\n    });\n    return _this;\n  }\n\n  _createClass(WorkloadPodLogs, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var screenFullAlias = screenfull;\n      screenFullAlias.onchange(function () {\n        return _this2.setState({\n          fullscreen: !_this2.state.fullscreen\n        });\n      });\n\n      if (this.state.containerOptions) {\n        var pod = this.props.pods[this.state.podValue];\n        this.fetchEntries(this.props.namespace, pod.name, this.state.containerOptions, this.state.showSpans, this.state.tailLines, this.props.timeRange);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var prevContainerOptions = prevState.containerOptions ? prevState.containerOptions : undefined;\n      var newContainerOptions = this.state.containerOptions ? this.state.containerOptions : undefined;\n      var updateContainerOptions = newContainerOptions && newContainerOptions !== prevContainerOptions;\n      var updateTailLines = this.state.tailLines && prevState.tailLines !== this.state.tailLines;\n      var lastRefreshChanged = prevProps.lastRefreshAt !== this.props.lastRefreshAt;\n      var showSpansChanged = prevState.showSpans !== this.state.showSpans;\n      var timeRangeChanged = !isEqualTimeRange(this.props.timeRange, prevProps.timeRange);\n\n      if (updateContainerOptions || updateTailLines || lastRefreshChanged || showSpansChanged || timeRangeChanged) {\n        var pod = this.props.pods[this.state.podValue];\n        this.fetchEntries(this.props.namespace, pod.name, newContainerOptions, this.state.showSpans, this.state.tailLines, this.props.timeRange);\n      }\n\n      if (prevState.useRegex !== this.state.useRegex) {\n        this.doShowAndHide();\n      } // if we just loaded log entries, and we are scrolled to the top, position the user automatically\n      // to the bottom/most recent.\n\n\n      if (prevState.loadingLogs && !this.state.loadingLogs && this.logsRef.current.scrollTop === 0) {\n        this.logsRef.current.scrollTop = this.logsRef.current.scrollHeight;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderComponentScroll, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }\n      }, this.state.containerOptions && /*#__PURE__*/React.createElement(Grid, {\n        key: \"logs\",\n        id: \"logs\",\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 19\n        }\n      }, this.state.showToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n        className: toolbar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: PFBadges.Pod,\n        position: TooltipPosition.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: 'wpl_pods',\n        tooltip: \"Display logs for the selected pod\",\n        handleSelect: function handleSelect(key) {\n          return _this3.setPod(key);\n        },\n        value: this.state.podValue,\n        label: this.props.pods[this.state.podValue].name,\n        options: this.podOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"log_show\",\n        name: \"log_show\",\n        style: {\n          width: '8em'\n        },\n        isValid: !this.state.showError,\n        autoComplete: \"on\",\n        type: \"text\",\n        onKeyPress: this.checkSubmitShow,\n        onChange: this.updateShow,\n        defaultValue: this.state.showLogValue,\n        \"aria-label\": \"show log text\",\n        placeholder: \"Show...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 29\n        }\n      }), this.state.showClearShowLogButton && /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"clear_show_log\",\n        position: \"top\",\n        content: \"Clear Show Log Entries...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.control,\n        onClick: this.clearShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Close, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 35\n        }\n      }))), /*#__PURE__*/React.createElement(TextInput, {\n        id: \"log_hide\",\n        name: \"log_hide\",\n        style: {\n          width: '8em'\n        },\n        isValid: !this.state.hideError,\n        autoComplete: \"on\",\n        type: \"text\",\n        onKeyPress: this.checkSubmitHide,\n        onChange: this.updateHide,\n        defaultValue: this.state.hideLogValue,\n        \"aria-label\": \"hide log text\",\n        placeholder: \"Hide...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 29\n        }\n      }), this.state.showClearHideLogButton && /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"clear_hide_log\",\n        position: \"top\",\n        content: \"Clear Hide Log Entries...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.control,\n        onClick: this.clearHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Close, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 35\n        }\n      }))), this.state.showError && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 54\n        }\n      }, this.state.showError), this.state.hideError && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 54\n        }\n      }, this.state.hideError)), /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"show_hide_log_help\",\n        position: \"top\",\n        content: \"Show only, or Hide all, matching log entries. Match by case-sensitive substring (default) or regular expression (as set in the kebab menu).\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: infoIcons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 31\n        }\n      })))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pf-c-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        key: \"spans-show-chart\",\n        id: \"spans-show-\",\n        className: \"pf-c-check__input\",\n        style: {\n          marginBottom: '3px'\n        },\n        type: \"checkbox\",\n        checked: this.state.showSpans,\n        onChange: function onChange(event) {\n          return _this3.toggleSpans(event.target.checked);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"pf-c-check__label\",\n        style: {\n          backgroundColor: PFColors.Black1000,\n          color: spanColor,\n          paddingLeft: '5px',\n          paddingRight: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 31\n        }\n      }, \"spans\")))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        className: toolbarRight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: 'wpl_tailLines',\n        handleSelect: function handleSelect(key) {\n          return _this3.setTailLines(Number(key));\n        },\n        value: this.state.tailLines,\n        label: TailLinesOptions[this.state.tailLines],\n        options: TailLinesOptions,\n        tooltip: 'Show up to last N log lines',\n        classNameSelect: toolbarTail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 29\n        }\n      })))), this.getLogsDiv(), this.getAccessLogModals())))), this.state.loadingLogsError && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 43\n        }\n      }, this.state.loadingLogsError)));\n    }\n  }]);\n\n  return WorkloadPodLogs;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    timeRange: timeRangeSelector(state),\n    lastRefreshAt: state.globalState.lastRefreshAt\n  };\n};\n\nvar WorkloadPodLogsContainer = connect(mapStateToProps)(WorkloadPodLogs);\nexport default WorkloadPodLogsContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/WorkloadDetails/WorkloadPodLogs.tsx"],"names":["React","Button","ButtonVariant","Card","CardBody","Grid","GridItem","TextInput","Toolbar","ToolbarGroup","ToolbarItem","Tooltip","TooltipPosition","Form","FormGroup","Dropdown","DropdownItem","KebabToggle","DropdownGroup","DropdownSeparator","style","addError","addSuccess","getPodLogs","getWorkloadSpans","setPodEnvoyProxyLogLevel","PromisesRegistry","ToolbarDropdown","evalTimeRange","isEqualTimeRange","RenderComponentScroll","CopyToClipboard","KialiIcon","defaultIconStyle","screenfull","connect","timeRangeSelector","PFColors","AccessLogModal","PFBadge","PFBadges","history","URLParam","moment","formatDuration","infoStyle","appContainerColors","White","LightGreen400","Purple100","LightBlue400","proxyContainerColor","Gold400","spanColor","Cyan300","LogLevel","RETURN_KEY_CODE","NoLogsFoundMessage","TailLinesDefault","TailLinesOptions","alInfoIcon","display","margin","width","displayFlex","infoIcons","marginLeft","toolbar","toolbarSpace","toolbarRight","toolbarTail","marginTop","logsToolbar","height","logsDiv","marginRight","logsDisplay","fontFamily","overflow","padding","resize","whiteSpace","logsBackground","enabled","backgroundColor","Black1000","logsHeight","showToolbar","fullscreen","toolbarHeight","WorkloadPodLogs","props","promises","podOptions","logsRef","renderItem","object","toggleSpans","checked","urlParams","URLSearchParams","location","search","set","SHOW_SPANS","String","replace","pathname","toString","setState","showSpans","state","getContainerLegend","badge","Container","tt","top","containerOptions","map","c","i","marginBottom","isSelected","toggleSelected","color","paddingLeft","paddingRight","displayName","getLogsDiv","hasProxyContainer","some","opt","isProxy","logDropDowns","Object","keys","level","setLogLevel","dropdownGroupLabel","right","textAlign","kebabActions","toggleToolbar","toggleUseRegex","useRegex","toggleShowTimestamps","showTimestamps","entriesToString","entries","link","toggleFullscreen","hasEntries","setKebabOpen","kebabOpen","filter","e","isHidden","span","lineHeight","fontSize","timestamp","auto","plain","gotoSpan","verticalAlign","entryToString","le","logEntry","accessLog","addAccessLogModal","message","getAccessLogModals","modals","accessLogModals","forEach","v","k","push","removeAccessLogModal","setPod","podValue","pod","pods","Number","containerNames","getContainerOptions","setTailLines","tailLines","namespace","workload","JAEGER_TRACE_ID","traceID","JAEGER_SPAN_ID","spanID","Map","delete","name","then","_resp","catch","error","doShowAndHide","filterEntries","showLogValue","hideLogValue","showClearShowLogButton","showClearHideLogButton","checkSubmitShow","event","keyCode","which","preventDefault","updateShow","val","clearShow","showValue","hideValue","undefined","regexp","RegExp","test","showError","includes","hideError","htmlInputElement","document","getElementById","value","checkSubmitHide","updateHide","clearHide","screenFullAlias","isFullscreen","exit","element","isEnabled","request","containers","istioContainers","sort","c1","c2","appContainerCount","length","fetchEntries","podName","timeRange","now","Date","timeRangeDates","sinceTime","Math","floor","getTime","endTime","duration","selectedContainers","params","endMicros","startMicros","unshift","registerAll","responses","spans","data","startTime","utc","format","timestampUnix","shift","response","containerLogEntries","sortedEntries","a","b","loadingLogs","isCanceled","console","debug","errorMsg","severity","entry","join","operationName","createRef","get","defaultState","logWindowSelections","loadingLogsError","onchange","prevProps","prevState","prevContainerOptions","newContainerOptions","updateContainerOptions","updateTailLines","lastRefreshChanged","lastRefreshAt","showSpansChanged","timeRangeChanged","current","scrollTop","scrollHeight","cancelAll","Pod","key","control","target","Component","mapStateToProps","globalState","WorkloadPodLogsContainer"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,MADF,EAEEC,aAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,IALF,EAMEC,QANF,EAOEC,SAPF,EAQEC,OARF,EASEC,YATF,EAUEC,WAVF,EAWEC,OAXF,EAYEC,eAZF,EAaEC,IAbF,EAcEC,SAdF,EAeEC,QAfF,EAgBEC,YAhBF,EAiBEC,WAjBF,EAkBEC,aAlBF,EAmBEC,iBAnBF,QAoBO,wBApBP;AAqBA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,wBAAvC,QAAuE,oBAAvE;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,eAAT,QAAgC,kDAAhC;AACA,SAAoBC,aAApB,EAAuDC,gBAAvD,QAA8F,oBAA9F;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,wBAA5C;AACA,OAAOC,UAAP,MAAuC,YAAvC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,QAAT,QAAqC,wBAArC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,wBAAlC;AACA,OAAOC,OAAP,IAAkBC,QAAlB,QAAkC,aAAlC;AAGA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,IAAMC,kBAAkB,GAAG,CAACT,QAAQ,CAACU,KAAV,EAAiBV,QAAQ,CAACW,aAA1B,EAAyCX,QAAQ,CAACY,SAAlD,EAA6DZ,QAAQ,CAACa,YAAtE,CAA3B;AACA,IAAMC,mBAAmB,GAAGd,QAAQ,CAACe,OAArC;AACA,IAAMC,SAAS,GAAGhB,QAAQ,CAACiB,OAA3B;AAoDA;IACKC,Q;;WAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAUL,IAAMC,eAAe,GAAG,EAAxB;AACA,IAAMC,kBAAkB,GAAG,8CAA3B;AAEA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,gBAAgB,GAAG;AACvB,QAAM,WADiB;AAEvB,QAAM,UAFiB;AAGvB,QAAM,UAHiB;AAIvB,SAAO,WAJgB;AAKvB,SAAO,WALgB;AAMvB,SAAO,WANgB;AAOvB,UAAQ,YAPe;AAQvB,UAAQ;AARe,CAAzB;AAWA,IAAMC,UAAU,GAAGxC,KAAK,CAAC;AACvByC,EAAAA,OAAO,EAAE,cADc;AAEvBC,EAAAA,MAAM,EAAE,iBAFe;AAGvBC,EAAAA,KAAK,EAAE;AAHgB,CAAD,CAAxB;AAMA,IAAMC,WAAW,GAAG5C,KAAK,CAAC;AACxByC,EAAAA,OAAO,EAAE;AADe,CAAD,CAAzB;AAIA,IAAMI,SAAS,GAAG7C,KAAK,CAAC;AACtB8C,EAAAA,UAAU,EAAE,OADU;AAEtBH,EAAAA,KAAK,EAAE;AAFe,CAAD,CAAvB;AAKA,IAAMI,OAAO,GAAG/C,KAAK,CAAC;AACpB0C,EAAAA,MAAM,EAAE;AADY,CAAD,CAArB;AAIA,IAAMM,YAAY,GAAGhD,KAAK,CAAC;AACzB8C,EAAAA,UAAU,EAAE;AADa,CAAD,CAA1B;AAIA,IAAMG,YAAY,GAAGjD,KAAK,CAAC;AACzB8C,EAAAA,UAAU,EAAE;AADa,CAAD,CAA1B;AAIA,IAAMI,WAAW,GAAGlD,KAAK,CAAC;AACxBmD,EAAAA,SAAS,EAAE;AADa,CAAD,CAAzB;AAIA,IAAMC,WAAW,GAAGpD,KAAK,CAAC;AACxBqD,EAAAA,MAAM,EAAE,MADgB;AAExBX,EAAAA,MAAM,EAAE;AAFgB,CAAD,CAAzB;AAKA,IAAMY,OAAO,GAAGtD,KAAK,CAAC;AACpBuD,EAAAA,WAAW,EAAE;AADO,CAAD,CAArB;AAIA,IAAMC,WAAW,GAAGxD,KAAK,CAAC;AACxByD,EAAAA,UAAU,EAAE,WADY;AAExBf,EAAAA,MAAM,EAAE,CAFgB;AAGxBgB,EAAAA,QAAQ,EAAE,MAHc;AAIxBC,EAAAA,OAAO,EAAE,MAJe;AAKxBC,EAAAA,MAAM,EAAE,MALgB;AAMxBC,EAAAA,UAAU,EAAE,KANY;AAOxBlB,EAAAA,KAAK,EAAE;AAPiB,CAAD,CAAzB;;AAUA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD;AAAA,SAAuB;AAAEC,IAAAA,eAAe,EAAED,OAAO,GAAG9C,QAAQ,CAACgD,SAAZ,GAAwB;AAAlD,GAAvB;AAAA,CAAvB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,WAAD,EAAuBC,UAAvB,EAA+C;AAChE,MAAMC,aAAa,GAAGF,WAAW,GAAG,KAAH,GAAW,MAA5C;AACA,SAAO;AACLd,IAAAA,MAAM,EAAEe,UAAU,kCACUC,aADV,gFAEkDA,aAFlD;AADb,GAAP;AAKD,CAPD;;AASA,WAAaC,eAAb;AAAA;;AAAA;;AAKE,2BAAYC,KAAZ,EAAyC;AAAA;;AAAA;;AACvC,8BAAMA,KAAN;AADuC,UAJjCC,QAIiC,GAJJ,IAAIlE,gBAAJ,EAII;AAAA,UAHjCmE,UAGiC,GAHV,EAGU;AAAA,UAFxBC,OAEwB;;AAAA,UAqGzCC,UArGyC,GAqG5B,UAAAC,MAAM,EAAI;AACrB,0BAAO,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEhC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsCgC,MAAtC,CAAP;AACD,KAvGwC;;AAAA,UA8OjCC,WA9OiC,GA8OnB,UAACC,OAAD,EAAsB;AAC1C,UAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB3D,OAAO,CAAC4D,QAAR,CAAiBC,MAArC,CAAlB;AACAH,MAAAA,SAAS,CAACI,GAAV,CAAc7D,QAAQ,CAAC8D,UAAvB,EAAmCC,MAAM,CAACP,OAAD,CAAzC;AACAzD,MAAAA,OAAO,CAACiE,OAAR,CAAgBjE,OAAO,CAAC4D,QAAR,CAAiBM,QAAjB,GAA4B,GAA5B,GAAkCR,SAAS,CAACS,QAAV,EAAlD;;AACA,YAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,CAAC,MAAKC,KAAL,CAAWD;AAAzB,OAAd;AACD,KAnPwC;;AAAA,UAqPjCE,kBArPiC,GAqPZ,YAAM;AACjC,0BACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAC,yBAAnB;AAA6C,QAAA,QAAQ,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAEzE,QAAQ,CAAC0E,SAAT,CAAmBD,KAA5B;AAAmCE,UAAAA,EAAE,EAAE;AAAvC,SADT;AAEE,QAAA,KAAK,EAAE;AAAExC,UAAAA,WAAW,EAAE;AAAf,SAFT;AAGE,QAAA,QAAQ,EAAE/D,eAAe,CAACwG,GAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAMG,MAAKL,KAAL,CAAWM,gBAAX,CAA6BC,GAA7B,CAAiC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC1C,4BACE;AAAK,UAAA,GAAG,gBAASA,CAAT,CAAR;AAAsB,UAAA,SAAS,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AACE,UAAA,GAAG,gBAASA,CAAT,CADL;AAEE,UAAA,EAAE,sBAAeA,CAAf,CAFJ;AAGE,UAAA,SAAS,EAAC,mBAHZ;AAIE,UAAA,KAAK,EAAE;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAJT;AAKE,UAAA,IAAI,EAAC,UALP;AAME,UAAA,OAAO,EAAEF,CAAC,CAACG,UANb;AAOE,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAKC,cAAL,CAAoBJ,CAApB,CAAN;AAAA,WAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAUE;AACE,UAAA,GAAG,gBAASC,CAAT,CADL;AAEE,UAAA,OAAO,sBAAeA,CAAf,CAFT;AAGE,UAAA,SAAS,EAAC,mBAHZ;AAIE,UAAA,KAAK,EAAE;AACLpC,YAAAA,eAAe,EAAE/C,QAAQ,CAACgD,SADrB;AAELuC,YAAAA,KAAK,EAAEL,CAAC,CAACK,KAFJ;AAGLC,YAAAA,WAAW,EAAE,KAHR;AAILC,YAAAA,YAAY,EAAE;AAJT,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWGP,CAAC,CAACQ,WAXL,CAVF,CADF;AA0BD,OA3BA,CANH,CADF,CADF;AAuCD,KA7RwC;;AAAA,UA+RjCJ,cA/RiC,GA+RhB,UAACJ,CAAD,EAAwB;AAC/CA,MAAAA,CAAC,CAACG,UAAF,GAAe,CAACH,CAAC,CAACG,UAAlB;;AACA,YAAKb,QAAL,CAAc;AAAEQ,QAAAA,gBAAgB,qBAAM,MAAKN,KAAL,CAAWM,gBAAjB;AAAlB,OAAd;AACD,KAlSwC;;AAAA,UAoSjCW,UApSiC,GAoSpB,YAAM;AAAA;;AACzB,UAAMC,iBAAiB,4BAAG,MAAKlB,KAAL,CAAWM,gBAAd,0DAAG,sBAA6Ba,IAA7B,CAAkC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,OAAR;AAAA,OAArC,CAA1B;AACA,UAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYhF,QAAZ,EAAsB+D,GAAtB,CAA0B,UAAAkB,KAAK,EAAI;AACtD,4BACE,oBAAC,YAAD;AACE,UAAA,GAAG,uBAAgBA,KAAhB,CADL;AAEE,UAAA,OAAO,EAAE,mBAAM;AACb,kBAAKC,WAAL,CAAiBlF,QAAQ,CAACiF,KAAD,CAAzB;AACD,WAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMGA,KANH,CADF;AAUD,OAXoB,CAArB;AAYA,UAAME,kBAAkB;AAAA;AACtB;AACA;AAAK,QAAA,KAAK,EAAE;AAAEzD,UAAAA,UAAU,EAAE;AAAd,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEE,oBAAC,OAAD;AACE,QAAA,QAAQ,EAAErE,eAAe,CAAC+H,KAD5B;AAEE,QAAA,OAAO,eACL;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAC8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAD9E,6FAE6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAF7D,+IAG6F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAH7F,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,8DADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAcE,oBAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,SAAS,EAAE/F,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,CAFF,CAFF;AAuBA,UAAMgG,YAAY,GAAG,cACnB,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,eAAlB;AAAkC,QAAA,OAAO,EAAE,MAAKC,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACM,MAAK/B,KAAL,CAAWxB,WAAX,GAAyB,UAAzB,GAAsC,QAD5C,cADmB,eAInB,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAE,MAAKwD,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACgB,MAAKhC,KAAL,CAAWiC,QAAX,GAAsB,WAAtB,GAAoC,OADpD,EAJmB,eAOnB,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,MAAKC,oBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACM,MAAKlC,KAAL,CAAWmC,cAAX,GAA4B,QAA5B,GAAuC,MAD7C,iBAPmB,eAUnB,oBAAC,iBAAD;AAAmB,QAAA,GAAG,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVmB,eAWnB,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAER,kBAAtB;AAA0C,QAAA,GAAG,EAAC,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGT,iBAAiB,IAAII,YADxB,CAXmB,CAArB;AAgBA,0BACE;AAAK,QAAA,GAAG,EAAC,SAAT;AAAmB,QAAA,EAAE,EAAC,SAAtB;AAAgC,QAAA,SAAS,EAAE3D,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAEF,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAc,MAAKwC,kBAAL,EAAd,CADF,CADF,eAIE,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAE3C,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,WAAb;AAAyB,QAAA,QAAQ,EAAC,KAAlC;AAAwC,QAAA,OAAO,EAAC,wBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE,MAAK8E,eAAL,CAAqB,MAAKpC,KAAL,CAAWqC,OAAhC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAElJ,aAAa,CAACmJ,IAA/B;AAAqC,QAAA,QAAQ,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,SAAS,EAAEpH,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,CADF,CADF,eAUE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEmC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,iBAAb;AAA+B,QAAA,QAAQ,EAAC,KAAxC;AAA8C,QAAA,OAAO,EAAC,yBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAElE,aAAa,CAACmJ,IADzB;AAEE,QAAA,OAAO,EAAE,MAAKC,gBAFhB;AAGE,QAAA,UAAU,EAAE,CAAC,MAAKC,UAAL,CAAgB,MAAKxC,KAAL,CAAWqC,OAA3B,CAHf;AAIE,QAAA,QAAQ,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAME,oBAAC,SAAD,CAAW,MAAX;AAAkB,QAAA,SAAS,EAAEnH,gBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF,CADF,CAVF,eAsBE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AACE,QAAA,KAAK,EAAE;AAAE8B,UAAAA,KAAK,EAAE;AAAT,SADT;AAEE,QAAA,MAAM,eAAE,oBAAC,WAAD;AAAa,UAAA,QAAQ,EAAE,MAAKyF,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFV;AAGE,QAAA,aAAa,EAAEX,YAHjB;AAIE,QAAA,OAAO,MAJT;AAKE,QAAA,MAAM,EAAE,MAAK9B,KAAL,CAAW0C,SALrB;AAME,QAAA,QAAQ,EAAE,OANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAtBF,CAJF,CADF,eAwCE;AACE,QAAA,GAAG,EAAC,UADN;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,SAAS,EAAE7E,WAHb,CAIE;AACA;AACA;AACA;AAPF;AAQE,QAAA,KAAK,kCACAU,UAAU,CAAC,MAAKyB,KAAL,CAAWxB,WAAZ,EAAyB,MAAKwB,KAAL,CAAWvB,UAApC,CADV,GAEAN,cAAc,CAAC,MAAKqE,UAAL,CAAgB,MAAKxC,KAAL,CAAWqC,OAA3B,CAAD,CAFd,CARP;AAYE,QAAA,GAAG,EAAE,MAAKtD,OAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAcG,MAAKyD,UAAL,CAAgB,MAAKxC,KAAL,CAAWqC,OAA3B,IACG,MAAKrC,KAAL,CAAWqC,OAAX,CACGM,MADH,CACU,UAAAC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACC,QAAP;AAAA,OADX,EAEGtC,GAFH,CAEO,UAACqC,CAAD,EAAInC,CAAJ,EAAU;AACb,YAAImC,CAAC,CAACE,IAAN,EAAY;AACV,8BACE;AAAK,YAAA,GAAG,cAAOrC,CAAP,CAAR;AAAoB,YAAA,KAAK,EAAE;AAAE/C,cAAAA,MAAM,EAAE,MAAV;AAAkBqF,cAAAA,UAAU,EAAE;AAA9B,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,MAAK/C,KAAL,CAAWmC,cAAX,iBACC;AAAM,YAAA,GAAG,iBAAU1B,CAAV,CAAT;AAAwB,YAAA,KAAK,EAAE;AAAEI,cAAAA,KAAK,EAAEvE,SAAT;AAAoB0G,cAAAA,QAAQ,EAAE,MAA9B;AAAsCpF,cAAAA,WAAW,EAAE;AAAnD,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGgF,CAAC,CAACK,SADL,CAFJ,eAME,oBAAC,OAAD;AACE,YAAA,GAAG,kBAAWxC,CAAX,CADL;AAEE,YAAA,QAAQ,EAAE5G,eAAe,CAACqJ,IAF5B;AAGE,YAAA,UAAU,EAAE,IAHd;AAIE,YAAA,OAAO,EAAC,kCAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAME,oBAAC,MAAD;AACE,YAAA,GAAG,gBAASzC,CAAT,CADL;AAEE,YAAA,OAAO,EAAEtH,aAAa,CAACgK,KAFzB;AAGE,YAAA,KAAK,EAAE;AACLrC,cAAAA,WAAW,EAAE,KADR;AAEL9D,cAAAA,KAAK,EAAE,MAFF;AAGLU,cAAAA,MAAM,EAAE,MAHH;AAILI,cAAAA,UAAU,EAAE,WAJP;AAKLkF,cAAAA,QAAQ,EAAE;AALL,aAHT;AAUE,YAAA,OAAO,EAAE,mBAAM;AACb,oBAAKI,QAAL,CAAcR,CAAC,CAACE,IAAhB;AACD,aAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAcE,oBAAC,SAAD,CAAW,IAAX;AAAgB,YAAA,GAAG,iBAAUrC,CAAV,CAAnB;AAAkC,YAAA,SAAS,EAAE5D,UAA7C;AAAyD,YAAA,KAAK,EAAEP,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,CANF,CANF,eA6BE;AACE,YAAA,GAAG,iBAAUmE,CAAV,CADL;AAEE,YAAA,KAAK,EAAE;AACLI,cAAAA,KAAK,EAAEvE,SADF;AAEL0G,cAAAA,QAAQ,EAAE,MAFL;AAGLK,cAAAA,aAAa,EAAE,QAHV;AAILvG,cAAAA,OAAO,EAAE;AAJJ,aAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aASG,MAAKwG,aAAL,CAAmBV,CAAnB,CATH,CA7BF,CADF;AA2CD;;AACD,YAAMW,EAAE,GAAGX,CAAC,CAACY,QAAb;AACA,eAAO,CAACD,EAAE,CAACE,SAAJ,gBACL,uDACE;AAAG,UAAA,GAAG,eAAQhD,CAAR,CAAN;AAAmB,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE0C,EAAE,CAAC1C,KAAZ;AAAoBmC,YAAAA,QAAQ,EAAE;AAA9B,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,MAAKM,aAAL,CAAmBV,CAAnB,CADH,CADF,CADK,gBAOL;AAAK,UAAA,GAAG,eAAQnC,CAAR,CAAR;AAAqB,UAAA,KAAK,EAAE;AAAE/C,YAAAA,MAAM,EAAE,MAAV;AAAkBqF,YAAAA,UAAU,EAAE;AAA9B,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,MAAK/C,KAAL,CAAWmC,cAAX,iBACC;AAAM,UAAA,GAAG,iBAAU1B,CAAV,CAAT;AAAwB,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE0C,EAAE,CAAC1C,KAAZ;AAAoBmC,YAAAA,QAAQ,EAAE,MAA9B;AAAsCpF,YAAAA,WAAW,EAAE;AAAnD,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGgF,CAAC,CAACK,SADL,CAFJ,eAME,oBAAC,OAAD;AACE,UAAA,GAAG,kBAAWxC,CAAX,CADL;AAEE,UAAA,QAAQ,EAAE5G,eAAe,CAACqJ,IAF5B;AAGE,UAAA,UAAU,EAAE,IAHd;AAIE,UAAA,OAAO,EAAC,oCAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAME,oBAAC,MAAD;AACE,UAAA,GAAG,iBAAUzC,CAAV,CADL;AAEE,UAAA,OAAO,EAAEtH,aAAa,CAACgK,KAFzB;AAGE,UAAA,KAAK,EAAE;AACLrC,YAAAA,WAAW,EAAE,KADR;AAEL9D,YAAAA,KAAK,EAAE,MAFF;AAGLU,YAAAA,MAAM,EAAE,MAHH;AAILI,YAAAA,UAAU,EAAE,WAJP;AAKLkF,YAAAA,QAAQ,EAAE;AALL,WAHT;AAUE,UAAA,OAAO,EAAE,mBAAM;AACb,kBAAKU,iBAAL,CAAuBH,EAAE,CAACI,OAA1B,EAAmCJ,EAAE,CAACE,SAAtC;AACD,WAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAcE,oBAAC,SAAD,CAAW,IAAX;AAAgB,UAAA,GAAG,iBAAUhD,CAAV,CAAnB;AAAkC,UAAA,SAAS,EAAE5D,UAA7C;AAAyD,UAAA,KAAK,EAAE0G,EAAE,CAAC1C,KAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAdF,CANF,CANF,eA6BE;AACE,UAAA,GAAG,iBAAUJ,CAAV,CADL;AAEE,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE0C,EAAE,CAAC1C,KAAZ;AAAoBmC,YAAAA,QAAQ,EAAE,MAA9B;AAAsCK,YAAAA,aAAa,EAAE,QAArD;AAA+DvG,YAAAA,OAAO,EAAE;AAAxE,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIGyG,EAAE,CAACI,OAJN,CA7BF,CAPF;AA4CD,OA7FH,CADH,GA+FGjH,kBA7GN,CAxCF,CADF;AA0JD,KAnfwC;;AAAA,UAqfjCkH,kBArfiC,GAqfZ,YAA6B;AACxD,UAAMC,MAA6B,GAAG,EAAtC;AACA,UAAIpD,CAAC,GAAG,CAAR;;AAEA,YAAKT,KAAL,CAAW8D,eAAX,CAA2BC,OAA3B,CAAmC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC3CJ,QAAAA,MAAM,CAACK,IAAP,eACE,oBAAC,cAAD;AACE,UAAA,GAAG,gBAASzD,CAAC,EAAV,CADL;AAEE,UAAA,SAAS,EAAEuD,CAFb;AAGE,UAAA,gBAAgB,EAAEC,CAHpB;AAIE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAKE,oBAAL,CAA0BF,CAA1B,CAAN;AAAA,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,OATD;;AAWA,aAAOJ,MAAP;AACD,KArgBwC;;AAAA,UAugBjCO,MAvgBiC,GAugBxB,UAACC,QAAD,EAAsB;AACrC,UAAMC,GAAG,GAAG,MAAK1F,KAAL,CAAW2F,IAAX,CAAgBC,MAAM,CAACH,QAAD,CAAtB,CAAZ;;AACA,UAAMI,cAAc,GAAG,MAAKC,mBAAL,CAAyBJ,GAAzB,CAAvB;;AACA,YAAKxE,QAAL,CAAc;AAAEQ,QAAAA,gBAAgB,EAAEmE,cAApB;AAAoCJ,QAAAA,QAAQ,EAAEG,MAAM,CAACH,QAAD;AAApD,OAAd;AACD,KA3gBwC;;AAAA,UA6gBjCM,YA7gBiC,GA6gBlB,UAACC,SAAD,EAAuB;AAC5C,YAAK9E,QAAL,CAAc;AAAE8E,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACD,KA/gBwC;;AAAA,UAihBjCnC,YAjhBiC,GAihBlB,UAACC,SAAD,EAAwB;AAC7C,YAAK5C,QAAL,CAAc;AAAE4C,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACD,KAnhBwC;;AAAA,UAqhBjCU,QArhBiC,GAqhBtB,UAACN,IAAD,EAAgB;AACjC,UAAMR,IAAI,GACR,sBAAe,MAAK1D,KAAL,CAAWiG,SAA1B,wBAAiD,MAAKjG,KAAL,CAAWkG,QAA5D,0BACenJ,QAAQ,CAACoJ,eADxB,cAC2CjC,IAAI,CAACkC,OADhD,cAC2DrJ,QAAQ,CAACsJ,cADpE,cACsFnC,IAAI,CAACoC,MAD3F,CADF;AAGAxJ,MAAAA,OAAO,CAACwI,IAAR,CAAa5B,IAAb;AACD,KA1hBwC;;AAAA,UA4hBjCoB,iBA5hBiC,GA4hBb,UAACO,CAAD,EAAYD,CAAZ,EAA6B;AACvD,UAAMF,eAAe,GAAG,IAAIqB,GAAJ,CAA2B,MAAKnF,KAAL,CAAW8D,eAAtC,CAAxB;AACAA,MAAAA,eAAe,CAACtE,GAAhB,CAAoByE,CAApB,EAAuBD,CAAvB;;AACA,YAAKlE,QAAL,CAAc;AAAEgE,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,KAhiBwC;;AAAA,UAkiBjCK,oBAliBiC,GAkiBV,UAACF,CAAD,EAAe;AAC5C,YAAKjE,KAAL,CAAW8D,eAAX,CAA2BsB,MAA3B,CAAkCnB,CAAlC;;AACA,UAAMH,eAAe,GAAG,IAAIqB,GAAJ,CAA2B,MAAKnF,KAAL,CAAW8D,eAAtC,CAAxB;;AACA,YAAKhE,QAAL,CAAc;AAAEgE,QAAAA,eAAe,EAAEA;AAAnB,OAAd;AACD,KAtiBwC;;AAAA,UAwiBjC5B,oBAxiBiC,GAwiBV,YAAM;AACnC,YAAKpC,QAAL,CAAc;AAAEqC,QAAAA,cAAc,EAAE,CAAC,MAAKnC,KAAL,CAAWmC,cAA9B;AAA8CO,QAAAA,SAAS,EAAE;AAAzD,OAAd;AACD,KA1iBwC;;AAAA,UA4iBjCX,aA5iBiC,GA4iBjB,YAAM;AAC5B,YAAKjC,QAAL,CAAc;AAAEtB,QAAAA,WAAW,EAAE,CAAC,MAAKwB,KAAL,CAAWxB,WAA3B;AAAwCkE,QAAAA,SAAS,EAAE;AAAnD,OAAd;AACD,KA9iBwC;;AAAA,UAgjBjCV,cAhjBiC,GAgjBhB,YAAM;AAC7B,YAAKlC,QAAL,CAAc;AAAEmC,QAAAA,QAAQ,EAAE,CAAC,MAAKjC,KAAL,CAAWiC,QAAxB;AAAkCS,QAAAA,SAAS,EAAE;AAA7C,OAAd;AACD,KAljBwC;;AAAA,UAojBjChB,WApjBiC,GAojBnB,UAACD,KAAD,EAAqB;AACzC,YAAK3B,QAAL,CAAc;AAAE4C,QAAAA,SAAS,EAAE;AAAb,OAAd;;AACA,UAAM4B,GAAG,GAAG,MAAK1F,KAAL,CAAW2F,IAAX,CAAgB,MAAKvE,KAAL,CAAWqE,QAA3B,CAAZ;AAEA3J,MAAAA,wBAAwB,CAAC,MAAKkE,KAAL,CAAWiG,SAAZ,EAAuBP,GAAG,CAACe,IAA3B,EAAiC5D,KAAjC,CAAxB,CACG6D,IADH,CACQ,UAAAC,KAAK,EAAI;AACbhL,QAAAA,UAAU,oDAA6CkH,KAA7C,wBAAgE6C,GAAG,CAACe,IAApE,EAAV;AACD,OAHH,EAIGG,KAJH,CAIS,UAAAC,KAAK,EAAI;AACdnL,QAAAA,QAAQ,CAAC,+BAAD,EAAkCmL,KAAlC,CAAR;AACD,OANH;AAOD,KA/jBwC;;AAAA,UAikBjCC,aAjkBiC,GAikBjB,YAAM;AAC5B,YAAKC,aAAL,CAAmB,MAAK3F,KAAL,CAAWqC,OAA9B,EAAuC,MAAKrC,KAAL,CAAW4F,YAAlD,EAAgE,MAAK5F,KAAL,CAAW6F,YAA3E;;AACA,YAAK/F,QAAL,CAAc;AACZuC,QAAAA,OAAO,qBAAM,MAAKrC,KAAL,CAAWqC,OAAjB,CADK;AAEZyD,QAAAA,sBAAsB,EAAE,CAAC,CAAC,MAAK9F,KAAL,CAAW4F,YAFzB;AAGZG,QAAAA,sBAAsB,EAAE,CAAC,CAAC,MAAK/F,KAAL,CAAW6F;AAHzB,OAAd;AAKD,KAxkBwC;;AAAA,UA0kBjCG,eA1kBiC,GA0kBf,UAAAC,KAAK,EAAI;AACjC,UAAMC,OAAO,GAAGD,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgCD,KAAK,CAACE,KAAtD;;AACA,UAAID,OAAO,KAAKzJ,eAAhB,EAAiC;AAC/BwJ,QAAAA,KAAK,CAACG,cAAN;;AACA,cAAKV,aAAL;AACD;AACF,KAhlBwC;;AAAA,UAklBjCW,UAllBiC,GAklBpB,UAAAC,GAAG,EAAI;AAC1B,UAAI,OAAOA,GAAX,EAAgB;AACd,cAAKC,SAAL;AACD,OAFD,MAEO;AACL,cAAKzG,QAAL,CAAc;AAAE8F,UAAAA,YAAY,EAAEU;AAAhB,SAAd;AACD;AACF,KAxlBwC;;AAAA,UA0lBjCX,aA1lBiC,GA0lBjB,UAACtD,OAAD,EAAmBmE,SAAnB,EAAsCC,SAAtC,EAAkE;AACxFpE,MAAAA,OAAO,CAAC0B,OAAR,CAAgB,UAAAnB,CAAC;AAAA,eAAKA,CAAC,CAACC,QAAF,GAAa6D,SAAlB;AAAA,OAAjB;;AAEA,UAAI,CAAC,CAACF,SAAN,EAAiB;AACf,YAAI,MAAKxG,KAAL,CAAWiC,QAAf,EAAyB;AACvB,cAAI;AACF,gBAAM0E,MAAM,GAAGC,MAAM,CAACJ,SAAD,CAArB;AACAnE,YAAAA,OAAO,CAAC0B,OAAR,CAAgB,UAAAnB,CAAC;AAAA,qBAAKA,CAAC,CAACC,QAAF,GAAaD,CAAC,CAACY,QAAF,IAAc,CAACmD,MAAM,CAACE,IAAP,CAAYjE,CAAC,CAACY,QAAF,CAAWG,OAAvB,CAAjC;AAAA,aAAjB;;AACA,gBAAI,CAAC,CAAC,MAAK3D,KAAL,CAAW8G,SAAjB,EAA4B;AAC1B,oBAAKhH,QAAL,CAAc;AAAEgH,gBAAAA,SAAS,EAAEJ;AAAb,eAAd;AACD;AACF,WAND,CAME,OAAO9D,CAAP,EAAU;AACV,kBAAK9C,QAAL,CAAc;AAAEgH,cAAAA,SAAS,kBAAWlE,CAAC,CAACe,OAAb;AAAX,aAAd;AACD;AACF,SAVD,MAUO;AACLtB,UAAAA,OAAO,CAAC0B,OAAR,CAAgB,UAAAnB,CAAC;AAAA,mBAAKA,CAAC,CAACC,QAAF,GAAaD,CAAC,CAACY,QAAF,IAAc,CAACZ,CAAC,CAACY,QAAF,CAAWG,OAAX,CAAmBoD,QAAnB,CAA4BP,SAA5B,CAAjC;AAAA,WAAjB;AACD;AACF;;AACD,UAAI,CAAC,CAACC,SAAN,EAAiB;AACf,YAAI,MAAKzG,KAAL,CAAWiC,QAAf,EAAyB;AACvB,cAAI;AACF,gBAAM0E,OAAM,GAAGC,MAAM,CAACH,SAAD,CAArB;;AACApE,YAAAA,OAAO,CAAC0B,OAAR,CAAgB,UAAAnB,CAAC;AAAA,qBAAKA,CAAC,CAACC,QAAF,GAAaD,CAAC,CAACC,QAAF,IAAeD,CAAC,CAACY,QAAF,IAAcmD,OAAM,CAACE,IAAP,CAAYjE,CAAC,CAACY,QAAF,CAAWG,OAAvB,CAA/C;AAAA,aAAjB;;AACA,gBAAI,CAAC,CAAC,MAAK3D,KAAL,CAAWgH,SAAjB,EAA4B;AAC1B,oBAAKlH,QAAL,CAAc;AAAEkH,gBAAAA,SAAS,EAAEN;AAAb,eAAd;AACD;AACF,WAND,CAME,OAAO9D,CAAP,EAAU;AACV,kBAAK9C,QAAL,CAAc;AAAEkH,cAAAA,SAAS,kBAAWpE,CAAC,CAACe,OAAb;AAAX,aAAd;AACD;AACF,SAVD,MAUO;AACLtB,UAAAA,OAAO,CAAC0B,OAAR,CAAgB,UAAAnB,CAAC;AAAA,mBAAKA,CAAC,CAACC,QAAF,GAAaD,CAAC,CAACC,QAAF,IAAeD,CAAC,CAACY,QAAF,IAAcZ,CAAC,CAACY,QAAF,CAAWG,OAAX,CAAmBoD,QAAnB,CAA4BN,SAA5B,CAA/C;AAAA,WAAjB;AACD;AACF;AACF,KA3nBwC;;AAAA,UA6nBjCF,SA7nBiC,GA6nBrB,YAAM;AACxB;AACA;AACA,UAAMU,gBAAkC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA3C;;AACA,UAAIF,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,QAAAA,gBAAgB,CAACG,KAAjB,GAAyB,EAAzB;AACD;;AAED,YAAKzB,aAAL,CAAmB,MAAK3F,KAAL,CAAWqC,OAA9B,EAAuC,EAAvC,EAA2C,MAAKrC,KAAL,CAAW6F,YAAtD;;AACA,YAAK/F,QAAL,CAAc;AACZgH,QAAAA,SAAS,EAAEJ,SADC;AAEZd,QAAAA,YAAY,EAAE,EAFF;AAGZE,QAAAA,sBAAsB,EAAE,KAHZ;AAIZzD,QAAAA,OAAO,qBAAM,MAAKrC,KAAL,CAAWqC,OAAjB;AAJK,OAAd;AAMD,KA5oBwC;;AAAA,UA8oBjCgF,eA9oBiC,GA8oBf,UAAApB,KAAK,EAAI;AACjC,UAAMC,OAAO,GAAGD,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgCD,KAAK,CAACE,KAAtD;;AACA,UAAID,OAAO,KAAKzJ,eAAhB,EAAiC;AAC/BwJ,QAAAA,KAAK,CAACG,cAAN;;AACA,cAAKV,aAAL;AACD;AACF,KAppBwC;;AAAA,UAspBjC4B,UAtpBiC,GAspBpB,UAAAhB,GAAG,EAAI;AAC1B,UAAI,OAAOA,GAAX,EAAgB;AACd,cAAKiB,SAAL;AACD,OAFD,MAEO;AACL,cAAKzH,QAAL,CAAc;AAAE+F,UAAAA,YAAY,EAAES;AAAhB,SAAd;AACD;AACF,KA5pBwC;;AAAA,UA8pBjCiB,SA9pBiC,GA8pBrB,YAAM;AACxB;AACA;AACA,UAAMN,gBAAkC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAA3C;;AACA,UAAIF,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,QAAAA,gBAAgB,CAACG,KAAjB,GAAyB,EAAzB;AACD;;AAED,YAAKzB,aAAL,CAAmB,MAAK3F,KAAL,CAAWqC,OAA9B,EAAuC,MAAKrC,KAAL,CAAW4F,YAAlD,EAAgE,EAAhE;;AACA,YAAK9F,QAAL,CAAc;AACZkH,QAAAA,SAAS,EAAEN,SADC;AAEZb,QAAAA,YAAY,EAAE,EAFF;AAGZE,QAAAA,sBAAsB,EAAE,KAHZ;AAIZ1D,QAAAA,OAAO,qBAAM,MAAKrC,KAAL,CAAWqC,OAAjB;AAJK,OAAd;AAMD,KA7qBwC;;AAAA,UA+qBjCE,gBA/qBiC,GA+qBd,YAAM;AAC/B,UAAMiF,eAAe,GAAGrM,UAAxB,CAD+B,CACmB;;AAClD,UAAIqM,eAAe,CAACC,YAApB,EAAkC;AAChCD,QAAAA,eAAe,CAACE,IAAhB;AACD,OAFD,MAEO;AACL,YAAMC,OAAO,GAAGT,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhB;;AACA,YAAIK,eAAe,CAACI,SAApB,EAA+B;AAC7B,cAAID,OAAJ,EAAa;AACXH,YAAAA,eAAe,CAACK,OAAhB,CAAwBF,OAAxB;AACD;AACF;AACF;AACF,KA3rBwC;;AAAA,UA6rBjCjD,mBA7rBiC,GA6rBX,UAACJ,GAAD,EAAiC;AAAA;;AAC7D;AACA,UAAIwD,UAAU,sBAAQxD,GAAG,CAACyD,eAAJ,IAAuB,EAA/B,CAAd;;AACA,qBAAAD,UAAU,EAAC5D,IAAX,uCAAoBI,GAAG,CAACwD,UAAJ,IAAkB,EAAtC;;AACAA,MAAAA,UAAU,GAAGA,UAAU,CAACE,IAAX,CAAgB,UAACC,EAAD,EAAKC,EAAL,EAAY;AACvC,YAAID,EAAE,CAAC5G,OAAH,KAAe6G,EAAE,CAAC7G,OAAtB,EAA+B;AAC7B,iBAAO4G,EAAE,CAAC5G,OAAH,GAAa,CAAb,GAAiB,CAAxB;AACD;;AACD,eAAO4G,EAAE,CAAC5C,IAAH,GAAU6C,EAAE,CAAC7C,IAAb,GAAoB,CAApB,GAAwB,CAA/B;AACD,OALY,CAAb;AAMA,UAAI8C,iBAAiB,GAAG,CAAxB;AACA,UAAI7H,gBAAgB,GAAGwH,UAAU,CAACvH,GAAX,CAAe,UAAAC,CAAC,EAAI;AACzC,YAAM6E,IAAI,GAAG7E,CAAC,CAAC6E,IAAf;;AACA,YAAI7E,CAAC,CAACa,OAAN,EAAe;AACb,iBAAO;AAAER,YAAAA,KAAK,EAAEzE,mBAAT;AAA8B4E,YAAAA,WAAW,EAAEqE,IAA3C;AAAiDhE,YAAAA,OAAO,EAAE,IAA1D;AAAgEV,YAAAA,UAAU,EAAE,IAA5E;AAAkF0E,YAAAA,IAAI,EAAEA;AAAxF,WAAP;AACD;;AAED,YAAMxE,KAAK,GAAG9E,kBAAkB,CAACoM,iBAAiB,KAAKpM,kBAAkB,CAACqM,MAA1C,CAAhC;AACA,eAAO;AAAEvH,UAAAA,KAAK,EAAEA,KAAT;AAAgBG,UAAAA,WAAW,EAAEqE,IAA7B;AAAmChE,UAAAA,OAAO,EAAE,KAA5C;AAAmDV,UAAAA,UAAU,EAAE,IAA/D;AAAqE0E,UAAAA,IAAI,EAAEA;AAA3E,SAAP;AACD,OARsB,CAAvB;AAUA,aAAO/E,gBAAP;AACD,KAntBwC;;AAAA,UAqtBjC+H,YArtBiC,GAqtBlB,UACrBxD,SADqB,EAErByD,OAFqB,EAGrBhI,gBAHqB,EAIrBP,SAJqB,EAKrB6E,SALqB,EAMrB2D,SANqB,EAOlB;AACH,UAAMC,GAAuB,GAAGC,IAAI,CAACD,GAAL,EAAhC;AACA,UAAME,cAAc,GAAG7N,aAAa,CAAC0N,SAAD,CAApC;AACA,UAAMI,SAAwB,GAAGC,IAAI,CAACC,KAAL,CAAWH,cAAc,CAAC,CAAD,CAAd,CAAkBI,OAAlB,KAA8B,IAAzC,CAAjC;AACA,UAAMC,OAA2B,GAAGL,cAAc,CAAC,CAAD,CAAd,CAAkBI,OAAlB,EAApC,CAJG,CAKH;;AACA,UAAIE,QAAQ,GAAG,CAAf;;AACA,UAAID,OAAO,GAAGP,GAAd,EAAmB;AACjBQ,QAAAA,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWH,cAAc,CAAC,CAAD,CAAd,CAAkBI,OAAlB,KAA8B,IAAzC,IAAiDH,SAA5D;AACD;;AAED,UAAMM,kBAAkB,GAAG3I,gBAAgB,CAACqC,MAAjB,CAAwB,UAAAnC,CAAC;AAAA,eAAIA,CAAC,CAACG,UAAN;AAAA,OAAzB,CAA3B;AACA,UAAM9B,QAAoD,GAAGoK,kBAAkB,CAAC1I,GAAnB,CAAuB,UAAAC,CAAC,EAAI;AACvF,eAAOhG,UAAU,CAACqK,SAAD,EAAYyD,OAAZ,EAAqB9H,CAAC,CAAC6E,IAAvB,EAA6BT,SAA7B,EAAwC+D,SAAxC,EAAmDK,QAAnD,EAA6DxI,CAAC,CAACa,OAA/D,CAAjB;AACD,OAF4D,CAA7D;;AAGA,UAAItB,SAAJ,EAAe;AACb;AACA,YAAMmJ,MAAoB,GAAG;AAC3BC,UAAAA,SAAS,EAAEJ,OAAO,GAAG,IADM;AAE3BK,UAAAA,WAAW,EAAET,SAAS,GAAG;AAFE,SAA7B;AAIA9J,QAAAA,QAAQ,CAACwK,OAAT,CAAiB5O,gBAAgB,CAACoK,SAAD,EAAY,MAAKjG,KAAL,CAAWkG,QAAvB,EAAiCoE,MAAjC,CAAjC;AACD;;AAED,YAAKrK,QAAL,CACGyK,WADH,CACe,MADf,EACuBzK,QADvB,EAEGyG,IAFH,CAEQ,UAAAiE,SAAS,EAAI;AACjB,YAAIlH,OAAO,GAAG,EAAd;;AAEA,YAAItC,SAAJ,EAAe;AACb,cAAMyJ,KAAK,GAAGzJ,SAAS,GAAIwJ,SAAS,CAAC,CAAD,CAAT,CAAaE,IAAjB,GAAoC,EAA3D;AACApH,UAAAA,OAAO,GAAGmH,KAAK,CAACjJ,GAAN,CAAU,UAAAuC,IAAI,EAAI;AAC1BA,YAAAA,IAAI,CAAC4G,SAAL,GAAiBd,IAAI,CAACC,KAAL,CAAW/F,IAAI,CAAC4G,SAAL,GAAiB,OAA5B,CAAjB;AACA,mBAAO;AACLzG,cAAAA,SAAS,EAAErH,MAAM,CAACkH,IAAI,CAAC4G,SAAL,GAAiB,IAAlB,CAAN,CACRC,GADQ,GAERC,MAFQ,CAED,qBAFC,CADN;AAILC,cAAAA,aAAa,EAAE/G,IAAI,CAAC4G,SAJf;AAKL5G,cAAAA,IAAI,EAAEA;AALD,aAAP;AAOD,WATS,CAAV;AAUAyG,UAAAA,SAAS,CAACO,KAAV;AACD;;AAhBgB,mCAkBRrJ,CAlBQ;AAmBf,cAAMsJ,QAAQ,GAAGR,SAAS,CAAC9I,CAAD,CAAT,CAAagJ,IAA9B;AACA,cAAMO,mBAAmB,GAAGD,QAAQ,CAAC1H,OAArC;;AACA,cAAI,CAAC2H,mBAAL,EAA0B;AACxB;AACD;;AACD,cAAMnJ,KAAK,GAAGoI,kBAAkB,CAACxI,CAAD,CAAlB,CAAsBI,KAApC;AACAmJ,UAAAA,mBAAmB,CAACjG,OAApB,CAA4B,UAAAR,EAAE,EAAI;AAChCA,YAAAA,EAAE,CAAC1C,KAAH,GAAWA,KAAX;AACAwB,YAAAA,OAAO,CAAC6B,IAAR,CAAa;AAAEjB,cAAAA,SAAS,EAAEM,EAAE,CAACN,SAAhB;AAA2B4G,cAAAA,aAAa,EAAEtG,EAAE,CAACsG,aAA7C;AAA4DrG,cAAAA,QAAQ,EAAED;AAAtE,aAAb;AACD,WAHD;AAzBe;;AAkBjB,aAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8I,SAAS,CAACnB,MAA9B,EAAsC3H,CAAC,EAAvC,EAA2C;AAAA,2BAAlCA,CAAkC;;AAAA,mCAIvC;AAOH;;AAED,cAAKkF,aAAL,CAAmBtD,OAAnB,EAA4B,MAAKrC,KAAL,CAAW4F,YAAvC,EAAqD,MAAK5F,KAAL,CAAW6F,YAAhE;;AACA,YAAMoE,aAAa,GAAG5H,OAAO,CAAC2F,IAAR,CAAa,UAACkC,CAAD,EAAIC,CAAJ,EAAU;AAC3C,iBAAOD,CAAC,CAACL,aAAF,GAAkBM,CAAC,CAACN,aAA3B;AACD,SAFqB,CAAtB;;AAIA,cAAK/J,QAAL,CAAc;AACZuC,UAAAA,OAAO,EAAE4H,aADG;AAEZG,UAAAA,WAAW,EAAE;AAFD,SAAd;;AAKA;AACD,OA5CH,EA6CG5E,KA7CH,CA6CS,UAAAC,KAAK,EAAI;AACd,YAAIA,KAAK,CAAC4E,UAAV,EAAsB;AACpBC,UAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;;AACA,gBAAKzK,QAAL,CAAc;AAAEsK,YAAAA,WAAW,EAAE;AAAf,WAAd;;AACA;AACD;;AACD,YAAMI,QAAQ,GAAG/E,KAAK,CAACsE,QAAN,IAAkBtE,KAAK,CAACsE,QAAN,CAAeN,IAAf,CAAoBhE,KAAtC,GAA8CA,KAAK,CAACsE,QAAN,CAAeN,IAAf,CAAoBhE,KAAlE,GAA0EA,KAAK,CAAC9B,OAAjG;AACA,YAAM6E,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,cAAK1I,QAAL,CAAc;AACZsK,UAAAA,WAAW,EAAE,KADD;AAEZ/H,UAAAA,OAAO,EAAE,CACP;AACEY,YAAAA,SAAS,EAAEuF,GAAG,CAAC3I,QAAJ,EADb;AAEEgK,YAAAA,aAAa,EAAErB,GAFjB;AAGEhF,YAAAA,QAAQ,EAAE;AACRiH,cAAAA,QAAQ,EAAE,OADF;AAERxH,cAAAA,SAAS,EAAEuF,GAAG,CAAC3I,QAAJ,EAFH;AAGRgK,cAAAA,aAAa,EAAErB,GAHP;AAIR7E,cAAAA,OAAO,2CAAoC6G,QAApC;AAJC;AAHZ,WADO;AAFG,SAAd;AAeD,OApEH;;AAsEA,YAAK1K,QAAL,CAAc;AACZsK,QAAAA,WAAW,EAAE,IADD;AAEZ/H,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KA9zBwC;;AAAA,UAg0BjCD,eAh0BiC,GAg0Bf,UAACC,OAAD,EAA8B;AACtD,aAAOA,OAAO,CAAC9B,GAAR,CAAY,UAAAmK,KAAK;AAAA,eAAI,MAAKpH,aAAL,CAAmBoH,KAAnB,CAAJ;AAAA,OAAjB,EAAgDC,IAAhD,CAAqD,IAArD,CAAP;AACD,KAl0BwC;;AAAA,UAo0BjCrH,aAp0BiC,GAo0BjB,UAACoH,KAAD,EAA0B;AAChD,UAAIA,KAAK,CAAClH,QAAV,EAAoB;AAClB,YAAMD,EAAE,GAAGmH,KAAK,CAAClH,QAAjB;AACA,eAAO,MAAKxD,KAAL,CAAWmC,cAAX,aAA+BuI,KAAK,CAACzH,SAArC,cAAkDM,EAAE,CAACI,OAArD,IAAiEJ,EAAE,CAACI,OAA3E;AACD;;AAED,iBAAoC+G,KAAK,CAAC5H,IAA1C;AAAA,UAAQkG,QAAR,QAAQA,QAAR;AAAA,UAAkB4B,aAAlB,QAAkBA,aAAlB;AACA,iCAAoB/O,cAAc,CAACmN,QAAD,CAAlC,8BAAgE4B,aAAhE;AACD,KA50BwC;;AAAA,UA80BjCpI,UA90BiC,GA80BpB,UAACH,OAAD;AAAA,aAA+B,CAAC,CAACA,OAAF,IAAaA,OAAO,CAAC+F,MAAR,GAAiB,CAA7D;AAAA,KA90BoB;;AAEvC,UAAKrJ,OAAL,GAAe9F,KAAK,CAAC4R,SAAN,EAAf;;AAEA,QAAMzL,UAAS,GAAG,IAAIC,eAAJ,CAAoB3D,OAAO,CAAC4D,QAAR,CAAiBC,MAArC,CAAlB;;AACA,QAAMQ,UAAS,GAAGX,UAAS,CAAC0L,GAAV,CAAcnP,QAAQ,CAAC8D,UAAvB,CAAlB;;AAEA,QAAMsL,YAAY,GAAG;AACnBjH,MAAAA,eAAe,EAAE,IAAIqB,GAAJ,EADE;AAEnB9C,MAAAA,OAAO,EAAE,EAFU;AAGnB5D,MAAAA,UAAU,EAAE,KAHO;AAInBoH,MAAAA,YAAY,EAAE,EAJK;AAKnBnD,MAAAA,SAAS,EAAE,KALQ;AAMnB0H,MAAAA,WAAW,EAAE,KANM;AAOnBY,MAAAA,mBAAmB,EAAE,EAPF;AAQnBjF,MAAAA,sBAAsB,EAAE,KARL;AASnBD,MAAAA,sBAAsB,EAAE,KATL;AAUnBF,MAAAA,YAAY,EAAE,EAVK;AAWnB7F,MAAAA,SAAS,EAAEA,UAAS,KAAK,MAAd,GAAuB,KAAvB,GAA+B,IAXvB;AAYnBoC,MAAAA,cAAc,EAAE,KAZG;AAanB3D,MAAAA,WAAW,EAAE,IAbM;AAcnBoG,MAAAA,SAAS,EAAEjI,gBAdQ;AAenBsF,MAAAA,QAAQ,EAAE;AAfS,KAArB;;AAiBA,QAAI,MAAKrD,KAAL,CAAW2F,IAAX,CAAgB6D,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,YAAKpI,KAAL,mCACK+K,YADL;AAEEE,QAAAA,gBAAgB,EAAE;AAFpB;AAIA;AACD;;AAED,QAAI,MAAKrM,KAAL,CAAW2F,IAAX,CAAgB6D,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,WAAK,IAAI3H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAK7B,KAAL,CAAW2F,IAAX,CAAgB6D,MAApC,EAA4C,EAAE3H,CAA9C,EAAiD;AAC/C,cAAK3B,UAAL,WAAmB2B,CAAnB,KAA0B,MAAK7B,KAAL,CAAW2F,IAAX,CAAgB9D,CAAhB,EAAmB4E,IAA7C;AACD;AACF;;AAED,QAAMhB,SAAQ,GAAG,CAAjB;AACA,QAAMC,IAAG,GAAG,MAAK1F,KAAL,CAAW2F,IAAX,CAAgBF,SAAhB,CAAZ;;AACA,QAAM/D,iBAAgB,GAAG,MAAKoE,mBAAL,CAAyBJ,IAAzB,CAAzB;;AAEA,UAAKtE,KAAL,mCACK+K,YADL;AAEEzK,MAAAA,gBAAgB,EAAEA,iBAFpB;AAGE+D,MAAAA,QAAQ,EAAEA;AAHZ;AA1CuC;AA+CxC;;AApDH;AAAA;AAAA,WAsDE,6BAAoB;AAAA;;AAClB,UAAMmD,eAAe,GAAGrM,UAAxB;AACAqM,MAAAA,eAAe,CAAC0D,QAAhB,CAAyB;AAAA,eAAM,MAAI,CAACpL,QAAL,CAAc;AAAErB,UAAAA,UAAU,EAAE,CAAC,MAAI,CAACuB,KAAL,CAAWvB;AAA1B,SAAd,CAAN;AAAA,OAAzB;;AAEA,UAAI,KAAKuB,KAAL,CAAWM,gBAAf,EAAiC;AAC/B,YAAMgE,GAAG,GAAG,KAAK1F,KAAL,CAAW2F,IAAX,CAAgB,KAAKvE,KAAL,CAAWqE,QAA3B,CAAZ;AACA,aAAKgE,YAAL,CACE,KAAKzJ,KAAL,CAAWiG,SADb,EAEEP,GAAG,CAACe,IAFN,EAGE,KAAKrF,KAAL,CAAWM,gBAHb,EAIE,KAAKN,KAAL,CAAWD,SAJb,EAKE,KAAKC,KAAL,CAAW4E,SALb,EAME,KAAKhG,KAAL,CAAW2J,SANb;AAQD;AACF;AArEH;AAAA;AAAA,WAuEE,4BAAmB4C,SAAnB,EAAoDC,SAApD,EAAqF;AACnF,UAAMC,oBAAoB,GAAGD,SAAS,CAAC9K,gBAAV,GAA6B8K,SAAS,CAAC9K,gBAAvC,GAA0DoG,SAAvF;AACA,UAAM4E,mBAAmB,GAAG,KAAKtL,KAAL,CAAWM,gBAAX,GAA8B,KAAKN,KAAL,CAAWM,gBAAzC,GAA4DoG,SAAxF;AACA,UAAM6E,sBAAsB,GAAGD,mBAAmB,IAAIA,mBAAmB,KAAKD,oBAA9E;AACA,UAAMG,eAAe,GAAG,KAAKxL,KAAL,CAAW4E,SAAX,IAAwBwG,SAAS,CAACxG,SAAV,KAAwB,KAAK5E,KAAL,CAAW4E,SAAnF;AACA,UAAM6G,kBAAkB,GAAGN,SAAS,CAACO,aAAV,KAA4B,KAAK9M,KAAL,CAAW8M,aAAlE;AACA,UAAMC,gBAAgB,GAAGP,SAAS,CAACrL,SAAV,KAAwB,KAAKC,KAAL,CAAWD,SAA5D;AACA,UAAM6L,gBAAgB,GAAG,CAAC9Q,gBAAgB,CAAC,KAAK8D,KAAL,CAAW2J,SAAZ,EAAuB4C,SAAS,CAAC5C,SAAjC,CAA1C;;AACA,UAAIgD,sBAAsB,IAAIC,eAA1B,IAA6CC,kBAA7C,IAAmEE,gBAAnE,IAAuFC,gBAA3F,EAA6G;AAC3G,YAAMtH,GAAG,GAAG,KAAK1F,KAAL,CAAW2F,IAAX,CAAgB,KAAKvE,KAAL,CAAWqE,QAA3B,CAAZ;AACA,aAAKgE,YAAL,CACE,KAAKzJ,KAAL,CAAWiG,SADb,EAEEP,GAAG,CAACe,IAFN,EAGEiG,mBAHF,EAIE,KAAKtL,KAAL,CAAWD,SAJb,EAKE,KAAKC,KAAL,CAAW4E,SALb,EAME,KAAKhG,KAAL,CAAW2J,SANb;AAQD;;AAED,UAAI6C,SAAS,CAACnJ,QAAV,KAAuB,KAAKjC,KAAL,CAAWiC,QAAtC,EAAgD;AAC9C,aAAKyD,aAAL;AACD,OAtBkF,CAwBnF;AACA;;;AACA,UAAI0F,SAAS,CAAChB,WAAV,IAAyB,CAAC,KAAKpK,KAAL,CAAWoK,WAArC,IAAoD,KAAKrL,OAAL,CAAa8M,OAAb,CAAqBC,SAArB,KAAmC,CAA3F,EAA8F;AAC5F,aAAK/M,OAAL,CAAa8M,OAAb,CAAqBC,SAArB,GAAiC,KAAK/M,OAAL,CAAa8M,OAAb,CAAqBE,YAAtD;AACD;AACF;AApGH;AAAA;AAAA,WAsGE,gCAAuB;AACrB,WAAKlN,QAAL,CAAcmN,SAAd;AACD;AAxGH;AAAA;AAAA,WA8GE,kBAAS;AAAA;;AACP,0BACE,uDACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKhM,KAAL,CAAWM,gBAAX,iBACC,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,MAAV;AAAiB,QAAA,EAAE,EAAC,MAApB;AAA2B,QAAA,KAAK,EAAE;AAAE5C,UAAAA,MAAM,EAAE;AAAV,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM,EAAE;AAAV,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKsC,KAAL,CAAWxB,WAAX,iBACC,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAEpB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE3B,QAAQ,CAACwQ,GAAzB;AAA8B,QAAA,QAAQ,EAAEpS,eAAe,CAACwG,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEpD,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AACE,QAAA,EAAE,EAAE,UADN;AAEE,QAAA,OAAO,EAAC,mCAFV;AAGE,QAAA,YAAY,EAAE,sBAAAiP,GAAG;AAAA,iBAAI,MAAI,CAAC9H,MAAL,CAAY8H,GAAZ,CAAJ;AAAA,SAHnB;AAIE,QAAA,KAAK,EAAE,KAAKlM,KAAL,CAAWqE,QAJpB;AAKE,QAAA,KAAK,EAAE,KAAKzF,KAAL,CAAW2F,IAAX,CAAgB,KAAKvE,KAAL,CAAWqE,QAA3B,EAAsCgB,IAL/C;AAME,QAAA,OAAO,EAAE,KAAKvG,UANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CADF,eAcE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,KAAK,EAAE;AAAE9B,UAAAA,KAAK,EAAE;AAAT,SAHT;AAIE,QAAA,OAAO,EAAE,CAAC,KAAKgD,KAAL,CAAW8G,SAJvB;AAKE,QAAA,YAAY,EAAC,IALf;AAME,QAAA,IAAI,EAAC,MANP;AAOE,QAAA,UAAU,EAAE,KAAKd,eAPnB;AAQE,QAAA,QAAQ,EAAE,KAAKK,UARjB;AASE,QAAA,YAAY,EAAE,KAAKrG,KAAL,CAAW4F,YAT3B;AAUE,sBAAW,eAVb;AAWE,QAAA,WAAW,EAAC,SAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAcG,KAAK5F,KAAL,CAAW8F,sBAAX,iBACC,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,gBAAb;AAA8B,QAAA,QAAQ,EAAC,KAAvC;AAA6C,QAAA,OAAO,EAAC,2BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE3M,aAAa,CAACgT,OAA/B;AAAwC,QAAA,OAAO,EAAE,KAAK5F,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAfJ,eAqBE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,KAAK,EAAE;AAAEvJ,UAAAA,KAAK,EAAE;AAAT,SAHT;AAIE,QAAA,OAAO,EAAE,CAAC,KAAKgD,KAAL,CAAWgH,SAJvB;AAKE,QAAA,YAAY,EAAC,IALf;AAME,QAAA,IAAI,EAAC,MANP;AAOE,QAAA,UAAU,EAAE,KAAKK,eAPnB;AAQE,QAAA,QAAQ,EAAE,KAAKC,UARjB;AASE,QAAA,YAAY,EAAE,KAAKtH,KAAL,CAAW6F,YAT3B;AAUE,sBAAW,eAVb;AAWE,QAAA,WAAW,EAAC,SAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBF,EAkCG,KAAK7F,KAAL,CAAW+F,sBAAX,iBACC,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,gBAAb;AAA8B,QAAA,QAAQ,EAAC,KAAvC;AAA6C,QAAA,OAAO,EAAC,2BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE5M,aAAa,CAACgT,OAA/B;AAAwC,QAAA,OAAO,EAAE,KAAK5E,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAnCJ,EAyCG,KAAKvH,KAAL,CAAW8G,SAAX,iBAAwB;AAAK,QAAA,KAAK,EAAE;AAAEjG,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAKb,KAAL,CAAW8G,SAA1C,CAzC3B,EA0CG,KAAK9G,KAAL,CAAWgH,SAAX,iBAAwB;AAAK,QAAA,KAAK,EAAE;AAAEnG,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAKb,KAAL,CAAWgH,SAA1C,CA1C3B,CADF,eA6CE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AACE,QAAA,GAAG,EAAC,oBADN;AAEE,QAAA,QAAQ,EAAC,KAFX;AAGE,QAAA,OAAO,EAAC,6IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE,oBAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,SAAS,EAAE9J,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CA7CF,CAdF,eAqEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAED,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,GAAG,oBADL;AAEE,QAAA,EAAE,eAFJ;AAGE,QAAA,SAAS,EAAC,mBAHZ;AAIE,QAAA,KAAK,EAAE;AAAEyD,UAAAA,YAAY,EAAE;AAAhB,SAJT;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,OAAO,EAAE,KAAKV,KAAL,CAAWD,SANtB;AAOE,QAAA,QAAQ,EAAE,kBAAAkG,KAAK;AAAA,iBAAI,MAAI,CAAC/G,WAAL,CAAiB+G,KAAK,CAACmG,MAAN,CAAajN,OAA9B,CAAJ;AAAA,SAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAUE;AACE,QAAA,SAAS,EAAC,mBADZ;AAEE,QAAA,KAAK,EAAE;AACLd,UAAAA,eAAe,EAAE/C,QAAQ,CAACgD,SADrB;AAELuC,UAAAA,KAAK,EAAEvE,SAFF;AAGLwE,UAAAA,WAAW,EAAE,KAHR;AAILC,UAAAA,YAAY,EAAE;AAJT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVF,CADF,CADF,CArEF,eA+FE,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAEzD,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AACE,QAAA,EAAE,EAAE,eADN;AAEE,QAAA,YAAY,EAAE,sBAAAiP,GAAG;AAAA,iBAAI,MAAI,CAACvH,YAAL,CAAkBH,MAAM,CAAC0H,GAAD,CAAxB,CAAJ;AAAA,SAFnB;AAGE,QAAA,KAAK,EAAE,KAAKlM,KAAL,CAAW4E,SAHpB;AAIE,QAAA,KAAK,EAAEhI,gBAAgB,CAAC,KAAKoD,KAAL,CAAW4E,SAAZ,CAJzB;AAKE,QAAA,OAAO,EAAEhI,gBALX;AAME,QAAA,OAAO,EAAE,6BANX;AAOE,QAAA,eAAe,EAAEW,WAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CA/FF,CAFJ,EAgHG,KAAK0D,UAAL,EAhHH,EAiHG,KAAK2C,kBAAL,EAjHH,CADF,CADF,CADF,CAFJ,EA4HG,KAAK5D,KAAL,CAAWiL,gBAAX,iBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKjL,KAAL,CAAWiL,gBAAjB,CA5HlC,CADF,CADF;AAkID;AAjPH;;AAAA;AAAA,EAAqChS,KAAK,CAACoT,SAA3C;;AAs1BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACtM,KAAD,EAA0B;AAChD,SAAO;AACLuI,IAAAA,SAAS,EAAElN,iBAAiB,CAAC2E,KAAD,CADvB;AAEL0L,IAAAA,aAAa,EAAE1L,KAAK,CAACuM,WAAN,CAAkBb;AAF5B,GAAP;AAID,CALD;;AAOA,IAAMc,wBAAwB,GAAGpR,OAAO,CAACkR,eAAD,CAAP,CAAyB3N,eAAzB,CAAjC;AACA,eAAe6N,wBAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Tooltip,\n  TooltipPosition,\n  Form,\n  FormGroup,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  DropdownGroup,\n  DropdownSeparator\n} from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { addError, addSuccess } from 'utils/AlertUtils';\nimport { Pod, LogEntry, AccessLog, PodLogs } from '../../types/IstioObjects';\nimport { getPodLogs, getWorkloadSpans, setPodEnvoyProxyLogLevel } from '../../services/Api';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { ToolbarDropdown } from '../../components/ToolbarDropdown/ToolbarDropdown';\nimport { TimeRange, evalTimeRange, TimeInMilliseconds, isEqualTimeRange, TimeInSeconds } from '../../types/Common';\nimport { RenderComponentScroll } from '../../components/Nav/Page';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { KialiIcon, defaultIconStyle } from '../../config/KialiIcon';\nimport screenfull, { Screenfull } from 'screenfull';\nimport { KialiAppState } from '../../store/Store';\nimport { connect } from 'react-redux';\nimport { timeRangeSelector } from '../../store/Selectors';\nimport { PFColors, PFColorVal } from 'components/Pf/PfColors';\nimport AccessLogModal from 'components/Envoy/AccessLogModal';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport history, { URLParam } from 'app/History';\nimport { TracingQuery, Span } from 'types/Tracing';\nimport { AxiosResponse } from 'axios';\nimport moment from 'moment';\nimport { formatDuration } from 'utils/tracing/TracingHelper';\nimport { infoStyle } from 'styles/DropdownStyles';\n\nconst appContainerColors = [PFColors.White, PFColors.LightGreen400, PFColors.Purple100, PFColors.LightBlue400];\nconst proxyContainerColor = PFColors.Gold400;\nconst spanColor = PFColors.Cyan300;\n\ntype ReduxProps = {\n  lastRefreshAt: TimeInMilliseconds;\n  timeRange: TimeRange;\n};\n\nexport type WorkloadPodLogsProps = ReduxProps & {\n  namespace: string;\n  pods: Pod[];\n  workload: string;\n};\n\ntype ContainerOption = {\n  color: PFColorVal;\n  displayName: string;\n  isProxy: boolean;\n  isSelected: boolean;\n  name: string;\n};\n\ntype Entry = {\n  isHidden?: boolean;\n  logEntry?: LogEntry;\n  span?: Span;\n  timestamp: string;\n  timestampUnix: TimeInSeconds;\n};\n\ninterface WorkloadPodLogsState {\n  accessLogModals: Map<string, AccessLog>;\n  containerOptions?: ContainerOption[];\n  entries: Entry[];\n  fullscreen: boolean;\n  hideError?: string;\n  hideLogValue: string;\n  kebabOpen: boolean;\n  loadingLogs: boolean;\n  loadingLogsError?: string;\n  logWindowSelections: any[];\n  podValue?: number;\n  showClearHideLogButton: boolean;\n  showClearShowLogButton: boolean;\n  showError?: string;\n  showLogValue: string;\n  showSpans: boolean;\n  showTimestamps: boolean;\n  showToolbar: boolean;\n  tailLines: number;\n  useRegex: boolean;\n}\n\n// LogLevel are the log levels supported by the proxy.\nenum LogLevel {\n  Off = 'off',\n  Trace = 'trace',\n  Debug = 'debug',\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Critical = 'critical'\n}\n\nconst RETURN_KEY_CODE = 13;\nconst NoLogsFoundMessage = 'No container logs found for the time period.';\n\nconst TailLinesDefault = 100;\nconst TailLinesOptions = {\n  '-1': 'All lines',\n  '10': '10 lines',\n  '50': '50 lines',\n  '100': '100 lines',\n  '300': '300 lines',\n  '500': '500 lines',\n  '1000': '1000 lines',\n  '5000': '5000 lines'\n};\n\nconst alInfoIcon = style({\n  display: 'inline-block',\n  margin: '0px 5px 0px 0px',\n  width: '10px'\n});\n\nconst displayFlex = style({\n  display: 'flex'\n});\n\nconst infoIcons = style({\n  marginLeft: '0.5em',\n  width: '24px'\n});\n\nconst toolbar = style({\n  margin: '0 0 10px 0'\n});\n\nconst toolbarSpace = style({\n  marginLeft: '1em'\n});\n\nconst toolbarRight = style({\n  marginLeft: 'auto'\n});\n\nconst toolbarTail = style({\n  marginTop: '2px'\n});\n\nconst logsToolbar = style({\n  height: '40px',\n  margin: '0 10px 0 0'\n});\n\nconst logsDiv = style({\n  marginRight: '5px'\n});\n\nconst logsDisplay = style({\n  fontFamily: 'monospace',\n  margin: 0,\n  overflow: 'auto',\n  padding: '10px',\n  resize: 'none',\n  whiteSpace: 'pre',\n  width: '100%'\n});\n\nconst logsBackground = (enabled: boolean) => ({ backgroundColor: enabled ? PFColors.Black1000 : 'gray' });\nconst logsHeight = (showToolbar: boolean, fullscreen: boolean) => {\n  const toolbarHeight = showToolbar ? '0px' : '49px';\n  return {\n    height: fullscreen\n      ? `calc(100vh - 130px + ${toolbarHeight})`\n      : `calc(var(--kiali-details-pages-tab-content-height) - 155px + ${toolbarHeight})`\n  };\n};\n\nexport class WorkloadPodLogs extends React.Component<WorkloadPodLogsProps, WorkloadPodLogsState> {\n  private promises: PromisesRegistry = new PromisesRegistry();\n  private podOptions: string[] = [];\n  private readonly logsRef: React.RefObject<any>;\n\n  constructor(props: WorkloadPodLogsProps) {\n    super(props);\n    this.logsRef = React.createRef();\n\n    const urlParams = new URLSearchParams(history.location.search);\n    const showSpans = urlParams.get(URLParam.SHOW_SPANS);\n\n    const defaultState = {\n      accessLogModals: new Map<string, AccessLog>(),\n      entries: [],\n      fullscreen: false,\n      hideLogValue: '',\n      kebabOpen: false,\n      loadingLogs: false,\n      logWindowSelections: [],\n      showClearHideLogButton: false,\n      showClearShowLogButton: false,\n      showLogValue: '',\n      showSpans: showSpans !== 'true' ? false : true,\n      showTimestamps: false,\n      showToolbar: true,\n      tailLines: TailLinesDefault,\n      useRegex: false\n    };\n    if (this.props.pods.length < 1) {\n      this.state = {\n        ...defaultState,\n        loadingLogsError: 'There are no logs to display because no pods are available.'\n      };\n      return;\n    }\n\n    if (this.props.pods.length > 0) {\n      for (let i = 0; i < this.props.pods.length; ++i) {\n        this.podOptions[`${i}`] = this.props.pods[i].name;\n      }\n    }\n\n    const podValue = 0;\n    const pod = this.props.pods[podValue];\n    const containerOptions = this.getContainerOptions(pod);\n\n    this.state = {\n      ...defaultState,\n      containerOptions: containerOptions,\n      podValue: podValue\n    };\n  }\n\n  componentDidMount() {\n    const screenFullAlias = screenfull as Screenfull;\n    screenFullAlias.onchange(() => this.setState({ fullscreen: !this.state.fullscreen }));\n\n    if (this.state.containerOptions) {\n      const pod = this.props.pods[this.state.podValue!];\n      this.fetchEntries(\n        this.props.namespace,\n        pod.name,\n        this.state.containerOptions,\n        this.state.showSpans,\n        this.state.tailLines,\n        this.props.timeRange\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: WorkloadPodLogsProps, prevState: WorkloadPodLogsState) {\n    const prevContainerOptions = prevState.containerOptions ? prevState.containerOptions : undefined;\n    const newContainerOptions = this.state.containerOptions ? this.state.containerOptions : undefined;\n    const updateContainerOptions = newContainerOptions && newContainerOptions !== prevContainerOptions;\n    const updateTailLines = this.state.tailLines && prevState.tailLines !== this.state.tailLines;\n    const lastRefreshChanged = prevProps.lastRefreshAt !== this.props.lastRefreshAt;\n    const showSpansChanged = prevState.showSpans !== this.state.showSpans;\n    const timeRangeChanged = !isEqualTimeRange(this.props.timeRange, prevProps.timeRange);\n    if (updateContainerOptions || updateTailLines || lastRefreshChanged || showSpansChanged || timeRangeChanged) {\n      const pod = this.props.pods[this.state.podValue!];\n      this.fetchEntries(\n        this.props.namespace,\n        pod.name,\n        newContainerOptions!,\n        this.state.showSpans,\n        this.state.tailLines,\n        this.props.timeRange\n      );\n    }\n\n    if (prevState.useRegex !== this.state.useRegex) {\n      this.doShowAndHide();\n    }\n\n    // if we just loaded log entries, and we are scrolled to the top, position the user automatically\n    // to the bottom/most recent.\n    if (prevState.loadingLogs && !this.state.loadingLogs && this.logsRef.current.scrollTop === 0) {\n      this.logsRef.current.scrollTop = this.logsRef.current.scrollHeight;\n    }\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  renderItem = object => {\n    return <ToolbarItem className={displayFlex}>{object}</ToolbarItem>;\n  };\n\n  render() {\n    return (\n      <>\n        <RenderComponentScroll>\n          {this.state.containerOptions && (\n            <Grid key=\"logs\" id=\"logs\" style={{ height: '100%' }}>\n              <GridItem span={12}>\n                <Card style={{ height: '100%' }}>\n                  <CardBody>\n                    {this.state.showToolbar && (\n                      <Toolbar className={toolbar}>\n                        <ToolbarGroup>\n                          <PFBadge badge={PFBadges.Pod} position={TooltipPosition.top} />\n                          <ToolbarItem className={displayFlex}>\n                            <ToolbarDropdown\n                              id={'wpl_pods'}\n                              tooltip=\"Display logs for the selected pod\"\n                              handleSelect={key => this.setPod(key)}\n                              value={this.state.podValue}\n                              label={this.props.pods[this.state.podValue!].name}\n                              options={this.podOptions!}\n                            />\n                          </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup>\n                          <ToolbarItem>\n                            <TextInput\n                              id=\"log_show\"\n                              name=\"log_show\"\n                              style={{ width: '8em' }}\n                              isValid={!this.state.showError}\n                              autoComplete=\"on\"\n                              type=\"text\"\n                              onKeyPress={this.checkSubmitShow}\n                              onChange={this.updateShow}\n                              defaultValue={this.state.showLogValue}\n                              aria-label=\"show log text\"\n                              placeholder=\"Show...\"\n                            />\n                            {this.state.showClearShowLogButton && (\n                              <Tooltip key=\"clear_show_log\" position=\"top\" content=\"Clear Show Log Entries...\">\n                                <Button variant={ButtonVariant.control} onClick={this.clearShow}>\n                                  <KialiIcon.Close />\n                                </Button>\n                              </Tooltip>\n                            )}\n                            <TextInput\n                              id=\"log_hide\"\n                              name=\"log_hide\"\n                              style={{ width: '8em' }}\n                              isValid={!this.state.hideError}\n                              autoComplete=\"on\"\n                              type=\"text\"\n                              onKeyPress={this.checkSubmitHide}\n                              onChange={this.updateHide}\n                              defaultValue={this.state.hideLogValue}\n                              aria-label=\"hide log text\"\n                              placeholder=\"Hide...\"\n                            />\n                            {this.state.showClearHideLogButton && (\n                              <Tooltip key=\"clear_hide_log\" position=\"top\" content=\"Clear Hide Log Entries...\">\n                                <Button variant={ButtonVariant.control} onClick={this.clearHide}>\n                                  <KialiIcon.Close />\n                                </Button>\n                              </Tooltip>\n                            )}\n                            {this.state.showError && <div style={{ color: 'red' }}>{this.state.showError}</div>}\n                            {this.state.hideError && <div style={{ color: 'red' }}>{this.state.hideError}</div>}\n                          </ToolbarItem>\n                          <ToolbarItem>\n                            <Tooltip\n                              key=\"show_hide_log_help\"\n                              position=\"top\"\n                              content=\"Show only, or Hide all, matching log entries. Match by case-sensitive substring (default) or regular expression (as set in the kebab menu).\"\n                            >\n                              <KialiIcon.Info className={infoIcons} />\n                            </Tooltip>\n                          </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup>\n                          <ToolbarItem className={displayFlex}>\n                            <div className=\"pf-c-check\">\n                              <input\n                                key={`spans-show-chart`}\n                                id={`spans-show-`}\n                                className=\"pf-c-check__input\"\n                                style={{ marginBottom: '3px' }}\n                                type=\"checkbox\"\n                                checked={this.state.showSpans}\n                                onChange={event => this.toggleSpans(event.target.checked)}\n                              />\n                              <label\n                                className=\"pf-c-check__label\"\n                                style={{\n                                  backgroundColor: PFColors.Black1000,\n                                  color: spanColor,\n                                  paddingLeft: '5px',\n                                  paddingRight: '5px'\n                                }}\n                              >\n                                spans\n                              </label>\n                            </div>\n                          </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup className={toolbarRight}>\n                          <ToolbarItem className={displayFlex}>\n                            <ToolbarDropdown\n                              id={'wpl_tailLines'}\n                              handleSelect={key => this.setTailLines(Number(key))}\n                              value={this.state.tailLines}\n                              label={TailLinesOptions[this.state.tailLines]}\n                              options={TailLinesOptions}\n                              tooltip={'Show up to last N log lines'}\n                              classNameSelect={toolbarTail}\n                            />\n                          </ToolbarItem>\n                        </ToolbarGroup>\n                      </Toolbar>\n                    )}\n                    {this.getLogsDiv()}\n                    {this.getAccessLogModals()}\n                  </CardBody>\n                </Card>\n              </GridItem>\n            </Grid>\n          )}\n          {this.state.loadingLogsError && <div>{this.state.loadingLogsError}</div>}\n        </RenderComponentScroll>\n      </>\n    );\n  }\n\n  private toggleSpans = (checked: boolean) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.set(URLParam.SHOW_SPANS, String(checked));\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n    this.setState({ showSpans: !this.state.showSpans });\n  };\n\n  private getContainerLegend = () => {\n    return (\n      <Form>\n        <FormGroup fieldId=\"container-log-selection\" isInline>\n          <PFBadge\n            badge={{ badge: PFBadges.Container.badge, tt: 'Containers' }}\n            style={{ marginRight: '10px' }}\n            position={TooltipPosition.top}\n          />\n          {this.state.containerOptions!.map((c, i) => {\n            return (\n              <div key={`c-d-${i}`} className=\"pf-c-check\">\n                <input\n                  key={`c-i-${i}`}\n                  id={`container-${i}`}\n                  className=\"pf-c-check__input\"\n                  style={{ marginBottom: '3px' }}\n                  type=\"checkbox\"\n                  checked={c.isSelected}\n                  onChange={() => this.toggleSelected(c)}\n                />\n                <label\n                  key={`c-l-${i}`}\n                  htmlFor={`container-${i}`}\n                  className=\"pf-c-check__label\"\n                  style={{\n                    backgroundColor: PFColors.Black1000,\n                    color: c.color,\n                    paddingLeft: '5px',\n                    paddingRight: '5px'\n                  }}\n                >\n                  {c.displayName}\n                </label>\n              </div>\n            );\n          })}\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  private toggleSelected = (c: ContainerOption) => {\n    c.isSelected = !c.isSelected;\n    this.setState({ containerOptions: [...this.state.containerOptions!] });\n  };\n\n  private getLogsDiv = () => {\n    const hasProxyContainer = this.state.containerOptions?.some(opt => opt.isProxy);\n    const logDropDowns = Object.keys(LogLevel).map(level => {\n      return (\n        <DropdownItem\n          key={`setLogLevel${level}`}\n          onClick={() => {\n            this.setLogLevel(LogLevel[level]);\n          }}\n        >\n          {level}\n        </DropdownItem>\n      );\n    });\n    const dropdownGroupLabel = (\n      // nowrap is needed for the info icon to appear on same line as the label text\n      <div style={{ whiteSpace: 'nowrap' }}>\n        Set Proxy Log Level\n        <Tooltip\n          position={TooltipPosition.right}\n          content={\n            <div style={{ textAlign: 'left' }}>\n              <div>\n                This action configures the proxy logger level but does not affect the proxy <b>access</b> logs. Setting\n                the log level to 'off' disables the proxy loggers but does <b>not</b> disable access logging. To hide\n                all proxy logging from the logs view, including access logs, un-check the proxy container. <br />\n                <br />\n                This option is disabled for pods with no proxy container.\n              </div>\n            </div>\n          }\n        >\n          <KialiIcon.Info className={infoStyle} />\n        </Tooltip>\n      </div>\n    );\n\n    const kebabActions = [\n      <DropdownItem key=\"toggleToolbar\" onClick={this.toggleToolbar}>\n        {`${this.state.showToolbar ? 'Collapse' : 'Expand'} Toolbar`}\n      </DropdownItem>,\n      <DropdownItem key=\"toggleRegex\" onClick={this.toggleUseRegex}>\n        {`Match via ${this.state.useRegex ? 'Substring' : 'Regex'}`}\n      </DropdownItem>,\n      <DropdownItem key=\"toggleTimestamps\" onClick={this.toggleShowTimestamps}>\n        {`${this.state.showTimestamps ? 'Remove' : 'Show'} Timestamps`}\n      </DropdownItem>,\n      <DropdownSeparator key=\"logLevelSeparator\" />,\n      <DropdownGroup label={dropdownGroupLabel} key=\"setLogLevels\">\n        {hasProxyContainer && logDropDowns}\n      </DropdownGroup>\n    ];\n\n    return (\n      <div key=\"logsDiv\" id=\"logsDiv\" className={logsDiv}>\n        <Toolbar className={logsToolbar}>\n          <ToolbarGroup>\n            <ToolbarItem>{this.getContainerLegend()}</ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup className={toolbarRight}>\n            <ToolbarItem>\n              <Tooltip key=\"copy_logs\" position=\"top\" content=\"Copy logs to clipboard\">\n                <CopyToClipboard text={this.entriesToString(this.state.entries)}>\n                  <Button variant={ButtonVariant.link} isInline>\n                    <KialiIcon.Copy className={defaultIconStyle} />\n                  </Button>\n                </CopyToClipboard>\n              </Tooltip>\n            </ToolbarItem>\n            <ToolbarItem className={toolbarSpace}>\n              <Tooltip key=\"fullscreen_logs\" position=\"top\" content=\"Expand logs full screen\">\n                <Button\n                  variant={ButtonVariant.link}\n                  onClick={this.toggleFullscreen}\n                  isDisabled={!this.hasEntries(this.state.entries)}\n                  isInline\n                >\n                  <KialiIcon.Expand className={defaultIconStyle} />\n                </Button>\n              </Tooltip>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                style={{ width: '20px' }}\n                toggle={<KebabToggle onToggle={this.setKebabOpen} />}\n                dropdownItems={kebabActions}\n                isPlain\n                isOpen={this.state.kebabOpen}\n                position={'right'}\n              />\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n\n        <div\n          key=\"logsText\"\n          id=\"logsText\"\n          className={logsDisplay}\n          // note - for some reason the callable typescript needs to be applied as \"style\" and\n          // not as a \"className\".  Otherwise the initial scroillHeight is incorrectly set\n          // (to max) and when we try to assign scrollTop to scrollHeight (above),it stays at 0\n          // and we fail to set the scroll correctly. So, don't change this!\n          style={{\n            ...logsHeight(this.state.showToolbar, this.state.fullscreen),\n            ...logsBackground(this.hasEntries(this.state.entries))\n          }}\n          ref={this.logsRef}\n        >\n          {this.hasEntries(this.state.entries)\n            ? this.state.entries\n                .filter(e => !e.isHidden)\n                .map((e, i) => {\n                  if (e.span) {\n                    return (\n                      <div key={`s-${i}`} style={{ height: '22px', lineHeight: '22px' }}>\n                        {this.state.showTimestamps && (\n                          <span key={`al-s-${i}`} style={{ color: spanColor, fontSize: '12px', marginRight: '5px' }}>\n                            {e.timestamp}\n                          </span>\n                        )}\n                        <Tooltip\n                          key={`al-tt-${i}`}\n                          position={TooltipPosition.auto}\n                          entryDelay={1000}\n                          content=\"Click to navigate to span detail\"\n                        >\n                          <Button\n                            key={`s-b-${i}`}\n                            variant={ButtonVariant.plain}\n                            style={{\n                              paddingLeft: '6px',\n                              width: '10px',\n                              height: '10px',\n                              fontFamily: 'monospace',\n                              fontSize: '12px'\n                            }}\n                            onClick={() => {\n                              this.gotoSpan(e.span!);\n                            }}\n                          >\n                            <KialiIcon.Info key={`al-i-${i}`} className={alInfoIcon} color={spanColor} />\n                          </Button>\n                        </Tooltip>\n                        <p\n                          key={`al-p-${i}`}\n                          style={{\n                            color: spanColor,\n                            fontSize: '12px',\n                            verticalAlign: 'center',\n                            display: 'inline-block'\n                          }}\n                        >\n                          {this.entryToString(e)}\n                        </p>\n                      </div>\n                    );\n                  }\n                  const le = e.logEntry!;\n                  return !le.accessLog ? (\n                    <>\n                      <p key={`le-${i}`} style={{ color: le.color!, fontSize: '12px' }}>\n                        {this.entryToString(e)}\n                      </p>\n                    </>\n                  ) : (\n                    <div key={`al-${i}`} style={{ height: '22px', lineHeight: '22px' }}>\n                      {this.state.showTimestamps && (\n                        <span key={`al-s-${i}`} style={{ color: le.color!, fontSize: '12px', marginRight: '5px' }}>\n                          {e.timestamp}\n                        </span>\n                      )}\n                      <Tooltip\n                        key={`al-tt-${i}`}\n                        position={TooltipPosition.auto}\n                        entryDelay={1000}\n                        content=\"Click for Envoy Access Log details\"\n                      >\n                        <Button\n                          key={`al-b-${i}`}\n                          variant={ButtonVariant.plain}\n                          style={{\n                            paddingLeft: '6px',\n                            width: '10px',\n                            height: '10px',\n                            fontFamily: 'monospace',\n                            fontSize: '12px'\n                          }}\n                          onClick={() => {\n                            this.addAccessLogModal(le.message, le.accessLog!);\n                          }}\n                        >\n                          <KialiIcon.Info key={`al-i-${i}`} className={alInfoIcon} color={le.color!} />\n                        </Button>\n                      </Tooltip>\n                      <p\n                        key={`al-p-${i}`}\n                        style={{ color: le.color!, fontSize: '12px', verticalAlign: 'center', display: 'inline-block' }}\n                      >\n                        {le.message}\n                      </p>\n                    </div>\n                  );\n                })\n            : NoLogsFoundMessage}\n        </div>\n      </div>\n    );\n  };\n\n  private getAccessLogModals = (): React.ReactFragment[] => {\n    const modals: React.ReactFragment[] = [];\n    let i = 0;\n\n    this.state.accessLogModals.forEach((v, k) => {\n      modals.push(\n        <AccessLogModal\n          key={`alm-${i++}`}\n          accessLog={v}\n          accessLogMessage={k}\n          onClose={() => this.removeAccessLogModal(k)}\n        />\n      );\n    });\n\n    return modals;\n  };\n\n  private setPod = (podValue: string) => {\n    const pod = this.props.pods[Number(podValue)];\n    const containerNames = this.getContainerOptions(pod);\n    this.setState({ containerOptions: containerNames, podValue: Number(podValue) });\n  };\n\n  private setTailLines = (tailLines: number) => {\n    this.setState({ tailLines: tailLines });\n  };\n\n  private setKebabOpen = (kebabOpen: boolean) => {\n    this.setState({ kebabOpen: kebabOpen });\n  };\n\n  private gotoSpan = (span: Span) => {\n    const link =\n      `/namespaces/${this.props.namespace}/workloads/${this.props.workload}` +\n      `?tab=traces&${URLParam.JAEGER_TRACE_ID}=${span.traceID}&${URLParam.JAEGER_SPAN_ID}=${span.spanID}`;\n    history.push(link);\n  };\n\n  private addAccessLogModal = (k: string, v: AccessLog) => {\n    const accessLogModals = new Map<string, AccessLog>(this.state.accessLogModals);\n    accessLogModals.set(k, v);\n    this.setState({ accessLogModals: accessLogModals });\n  };\n\n  private removeAccessLogModal = (k: string) => {\n    this.state.accessLogModals.delete(k);\n    const accessLogModals = new Map<string, AccessLog>(this.state.accessLogModals);\n    this.setState({ accessLogModals: accessLogModals });\n  };\n\n  private toggleShowTimestamps = () => {\n    this.setState({ showTimestamps: !this.state.showTimestamps, kebabOpen: false });\n  };\n\n  private toggleToolbar = () => {\n    this.setState({ showToolbar: !this.state.showToolbar, kebabOpen: false });\n  };\n\n  private toggleUseRegex = () => {\n    this.setState({ useRegex: !this.state.useRegex, kebabOpen: false });\n  };\n\n  private setLogLevel = (level: LogLevel) => {\n    this.setState({ kebabOpen: false });\n    const pod = this.props.pods[this.state.podValue!];\n\n    setPodEnvoyProxyLogLevel(this.props.namespace, pod.name, level)\n      .then(_resp => {\n        addSuccess(`Successfully updated proxy log level to '${level}' for pod: ${pod.name}`);\n      })\n      .catch(error => {\n        addError('Unable to set proxy pod level', error);\n      });\n  };\n\n  private doShowAndHide = () => {\n    this.filterEntries(this.state.entries, this.state.showLogValue, this.state.hideLogValue);\n    this.setState({\n      entries: [...this.state.entries],\n      showClearShowLogButton: !!this.state.showLogValue,\n      showClearHideLogButton: !!this.state.hideLogValue\n    });\n  };\n\n  private checkSubmitShow = event => {\n    const keyCode = event.keyCode ? event.keyCode : event.which;\n    if (keyCode === RETURN_KEY_CODE) {\n      event.preventDefault();\n      this.doShowAndHide();\n    }\n  };\n\n  private updateShow = val => {\n    if ('' === val) {\n      this.clearShow();\n    } else {\n      this.setState({ showLogValue: val });\n    }\n  };\n\n  private filterEntries = (entries: Entry[], showValue: string, hideValue: string): void => {\n    entries.forEach(e => (e.isHidden = undefined));\n\n    if (!!showValue) {\n      if (this.state.useRegex) {\n        try {\n          const regexp = RegExp(showValue);\n          entries.forEach(e => (e.isHidden = e.logEntry && !regexp.test(e.logEntry.message)));\n          if (!!this.state.showError) {\n            this.setState({ showError: undefined });\n          }\n        } catch (e) {\n          this.setState({ showError: `Show: ${e.message}` });\n        }\n      } else {\n        entries.forEach(e => (e.isHidden = e.logEntry && !e.logEntry.message.includes(showValue)));\n      }\n    }\n    if (!!hideValue) {\n      if (this.state.useRegex) {\n        try {\n          const regexp = RegExp(hideValue);\n          entries.forEach(e => (e.isHidden = e.isHidden || (e.logEntry && regexp.test(e.logEntry.message))));\n          if (!!this.state.hideError) {\n            this.setState({ hideError: undefined });\n          }\n        } catch (e) {\n          this.setState({ hideError: `Hide: ${e.message}` });\n        }\n      } else {\n        entries.forEach(e => (e.isHidden = e.isHidden || (e.logEntry && e.logEntry.message.includes(hideValue))));\n      }\n    }\n  };\n\n  private clearShow = () => {\n    // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n    // this.showInputRef.value = '';\n    const htmlInputElement: HTMLInputElement = document.getElementById('log_show') as HTMLInputElement;\n    if (htmlInputElement !== null) {\n      htmlInputElement.value = '';\n    }\n\n    this.filterEntries(this.state.entries, '', this.state.hideLogValue);\n    this.setState({\n      showError: undefined,\n      showLogValue: '',\n      showClearShowLogButton: false,\n      entries: [...this.state.entries]\n    });\n  };\n\n  private checkSubmitHide = event => {\n    const keyCode = event.keyCode ? event.keyCode : event.which;\n    if (keyCode === RETURN_KEY_CODE) {\n      event.preventDefault();\n      this.doShowAndHide();\n    }\n  };\n\n  private updateHide = val => {\n    if ('' === val) {\n      this.clearHide();\n    } else {\n      this.setState({ hideLogValue: val });\n    }\n  };\n\n  private clearHide = () => {\n    // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n    // this.hideInputRef.value = '';\n    const htmlInputElement: HTMLInputElement = document.getElementById('log_hide') as HTMLInputElement;\n    if (htmlInputElement !== null) {\n      htmlInputElement.value = '';\n    }\n\n    this.filterEntries(this.state.entries, this.state.showLogValue, '');\n    this.setState({\n      hideError: undefined,\n      hideLogValue: '',\n      showClearHideLogButton: false,\n      entries: [...this.state.entries]\n    });\n  };\n\n  private toggleFullscreen = () => {\n    const screenFullAlias = screenfull as Screenfull; // this casting was necessary\n    if (screenFullAlias.isFullscreen) {\n      screenFullAlias.exit();\n    } else {\n      const element = document.getElementById('logs');\n      if (screenFullAlias.isEnabled) {\n        if (element) {\n          screenFullAlias.request(element);\n        }\n      }\n    }\n  };\n\n  private getContainerOptions = (pod: Pod): ContainerOption[] => {\n    // sort containers by name, consistently positioning proxy container first.\n    let containers = [...(pod.istioContainers || [])];\n    containers.push(...(pod.containers || []));\n    containers = containers.sort((c1, c2) => {\n      if (c1.isProxy !== c2.isProxy) {\n        return c1.isProxy ? 0 : 1;\n      }\n      return c1.name < c2.name ? 0 : 1;\n    });\n    let appContainerCount = 0;\n    let containerOptions = containers.map(c => {\n      const name = c.name;\n      if (c.isProxy) {\n        return { color: proxyContainerColor, displayName: name, isProxy: true, isSelected: true, name: name };\n      }\n\n      const color = appContainerColors[appContainerCount++ % appContainerColors.length];\n      return { color: color, displayName: name, isProxy: false, isSelected: true, name: name };\n    });\n\n    return containerOptions;\n  };\n\n  private fetchEntries = (\n    namespace: string,\n    podName: string,\n    containerOptions: ContainerOption[],\n    showSpans: boolean,\n    tailLines: number,\n    timeRange: TimeRange\n  ) => {\n    const now: TimeInMilliseconds = Date.now();\n    const timeRangeDates = evalTimeRange(timeRange);\n    const sinceTime: TimeInSeconds = Math.floor(timeRangeDates[0].getTime() / 1000);\n    const endTime: TimeInMilliseconds = timeRangeDates[1].getTime();\n    // to save work on the server-side, only supply duration when time range is in the past\n    let duration = 0;\n    if (endTime < now) {\n      duration = Math.floor(timeRangeDates[1].getTime() / 1000) - sinceTime;\n    }\n\n    const selectedContainers = containerOptions.filter(c => c.isSelected);\n    const promises: Promise<AxiosResponse<PodLogs | Span[]>>[] = selectedContainers.map(c => {\n      return getPodLogs(namespace, podName, c.name, tailLines, sinceTime, duration, c.isProxy);\n    });\n    if (showSpans) {\n      // Convert seconds to microseconds\n      const params: TracingQuery = {\n        endMicros: endTime * 1000,\n        startMicros: sinceTime * 1000000\n      };\n      promises.unshift(getWorkloadSpans(namespace, this.props.workload, params));\n    }\n\n    this.promises\n      .registerAll('logs', promises)\n      .then(responses => {\n        let entries = [] as Entry[];\n\n        if (showSpans) {\n          const spans = showSpans ? (responses[0].data as Span[]) : ([] as Span[]);\n          entries = spans.map(span => {\n            span.startTime = Math.floor(span.startTime / 1000000);\n            return {\n              timestamp: moment(span.startTime * 1000)\n                .utc()\n                .format('YYYY-MM-DD HH:mm:ss'),\n              timestampUnix: span.startTime,\n              span: span\n            } as Entry;\n          });\n          responses.shift();\n        }\n\n        for (let i = 0; i < responses.length; i++) {\n          const response = responses[i].data as PodLogs;\n          const containerLogEntries = response.entries as LogEntry[];\n          if (!containerLogEntries) {\n            continue;\n          }\n          const color = selectedContainers[i].color;\n          containerLogEntries.forEach(le => {\n            le.color = color;\n            entries.push({ timestamp: le.timestamp, timestampUnix: le.timestampUnix, logEntry: le } as Entry);\n          });\n        }\n\n        this.filterEntries(entries, this.state.showLogValue, this.state.hideLogValue);\n        const sortedEntries = entries.sort((a, b) => {\n          return a.timestampUnix - b.timestampUnix;\n        });\n\n        this.setState({\n          entries: sortedEntries,\n          loadingLogs: false\n        });\n\n        return;\n      })\n      .catch(error => {\n        if (error.isCanceled) {\n          console.debug('Logs: Ignore fetch error (canceled).');\n          this.setState({ loadingLogs: false });\n          return;\n        }\n        const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        const now = Date.now();\n        this.setState({\n          loadingLogs: false,\n          entries: [\n            {\n              timestamp: now.toString(),\n              timestampUnix: now,\n              logEntry: {\n                severity: 'Error',\n                timestamp: now.toString(),\n                timestampUnix: now,\n                message: `Failed to fetch workload logs: ${errorMsg}`\n              }\n            }\n          ]\n        });\n      });\n\n    this.setState({\n      loadingLogs: true,\n      entries: []\n    });\n  };\n\n  private entriesToString = (entries: Entry[]): string => {\n    return entries.map(entry => this.entryToString(entry)).join('\\n');\n  };\n\n  private entryToString = (entry: Entry): string => {\n    if (entry.logEntry) {\n      const le = entry.logEntry;\n      return this.state.showTimestamps ? `${entry.timestamp} ${le.message}` : le.message;\n    }\n\n    const { duration, operationName } = entry.span!;\n    return `duration: ${formatDuration(duration)}, operationName: ${operationName}`;\n  };\n\n  private hasEntries = (entries: Entry[]): boolean => !!entries && entries.length > 0;\n}\n\nconst mapStateToProps = (state: KialiAppState) => {\n  return {\n    timeRange: timeRangeSelector(state),\n    lastRefreshAt: state.globalState.lastRefreshAt\n  };\n};\n\nconst WorkloadPodLogsContainer = connect(mapStateToProps)(WorkloadPodLogs);\nexport default WorkloadPodLogsContainer;\n"]},"metadata":{},"sourceType":"module"}
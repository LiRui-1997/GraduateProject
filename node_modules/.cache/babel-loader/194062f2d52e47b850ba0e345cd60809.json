{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/IstioWizards/TrafficShifting.tsx\";\nimport * as React from 'react';\nimport { cellWidth, Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport Slider from './Slider/Slider';\nimport { style } from 'typestyle';\nimport { PFColors } from '../Pf/PfColors';\nimport { Badge, Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { EqualizerIcon } from '@patternfly/react-icons';\nimport { getDefaultWeights } from './WizardActions';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nvar validationStyle = style({\n  marginBottom: 10,\n  color: PFColors.Red100,\n  textAlign: 'right'\n});\nvar evenlyButtonStyle = style({\n  width: '100%',\n  textAlign: 'right'\n});\nexport var MSG_WEIGHTS_NOT_VALID = 'The sum of all non-mirrored weights must be 100 %';\n\nvar TrafficShifting = /*#__PURE__*/function (_React$Component) {\n  _inherits(TrafficShifting, _React$Component);\n\n  var _super = _createSuper(TrafficShifting);\n\n  function TrafficShifting(props) {\n    var _this;\n\n    _classCallCheck(this, TrafficShifting);\n\n    _this = _super.call(this, props);\n\n    _this.resetState = function () {\n      if (_this.props.workloads.length === 0) {\n        return;\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          workloads: prevState.workloads.length === 0 && _this.props.initWeights.length > 0 ? _this.props.initWeights : getDefaultWeights(_this.props.workloads)\n        };\n      }, function () {\n        return _this.props.onChange(_this.checkTotalWeight(), _this.state.workloads, true);\n      });\n    };\n\n    _this.onWeight = function (workloadName, newWeight) {\n      _this.setState(function (prevState) {\n        var nodeId = [];\n        var maxWeight = 100; // Calculate maxWeight from locked nodes\n\n        for (var i = 0; i < prevState.workloads.length; i++) {\n          if (prevState.workloads[i].locked) {\n            maxWeight -= prevState.workloads[i].weight;\n          }\n        } // Set new weight; remember rest of the nodes\n\n\n        for (var _i = 0; _i < prevState.workloads.length; _i++) {\n          if (prevState.workloads[_i].name === workloadName) {\n            prevState.workloads[_i].weight = newWeight; // Don't update maxWeight if node is mirrored\n\n            if (!prevState.workloads[_i].mirrored) {\n              maxWeight -= newWeight;\n            }\n          } else if (!prevState.workloads[_i].locked && !prevState.workloads[_i].mirrored) {\n            // Only adjust those nodes that are not locked\n            nodeId.push(_i);\n          }\n        } // Distribute pending weights\n\n\n        var sumWeights = 0;\n\n        for (var j = 0; j < nodeId.length; j++) {\n          if (sumWeights + prevState.workloads[nodeId[j]].weight > maxWeight) {\n            prevState.workloads[nodeId[j]].weight = maxWeight - sumWeights;\n          }\n\n          sumWeights += prevState.workloads[nodeId[j]].weight;\n        } // Adjust last element\n\n\n        if (nodeId.length > 0 && sumWeights < maxWeight) {\n          prevState.workloads[nodeId[nodeId.length - 1]].weight += maxWeight - sumWeights;\n        }\n\n        return {\n          workloads: prevState.workloads\n        };\n      }, function () {\n        return _this.props.onChange(_this.checkTotalWeight(), _this.state.workloads, false);\n      });\n    };\n\n    _this.onLock = function (workloadName, locked) {\n      _this.setState(function (prevState) {\n        var maxWeights = 100;\n\n        for (var i = 0; i < prevState.workloads.length; i++) {\n          if (prevState.workloads[i].name === workloadName) {\n            prevState.workloads[i].locked = locked;\n          } // Calculate maxWeights from locked nodes\n\n\n          if (prevState.workloads[i].locked) {\n            maxWeights -= prevState.workloads[i].weight;\n          }\n        } // Update non locked nodes maxWeight\n\n\n        for (var _i2 = 0; _i2 < prevState.workloads.length; _i2++) {\n          if (!prevState.workloads[_i2].locked && !prevState.workloads[_i2].mirrored) {\n            prevState.workloads[_i2].maxWeight = maxWeights;\n          }\n        }\n\n        return {\n          workloads: prevState.workloads\n        };\n      });\n    };\n\n    _this.onMirror = function (workloadName, mirrored) {\n      _this.setState(function (prevState) {\n        var nodeId = [];\n        var maxWeight = 100; // Reset all mirrored workload but selected one.\n\n        for (var i = 0; i < prevState.workloads.length; i++) {\n          prevState.workloads[i].mirrored = false;\n          prevState.workloads[i].locked = false;\n\n          if (mirrored && prevState.workloads[i].name === workloadName) {\n            prevState.workloads[i].mirrored = mirrored;\n            prevState.workloads[i].locked = false;\n          }\n\n          if (!prevState.workloads[i].mirrored) {\n            nodeId.push(i);\n          }\n        } // Distribute pending weights\n\n\n        var sumWeights = 0;\n\n        for (var j = 0; j < nodeId.length; j++) {\n          if (sumWeights + prevState.workloads[nodeId[j]].weight > maxWeight) {\n            prevState.workloads[nodeId[j]].weight = maxWeight - sumWeights;\n          }\n\n          sumWeights += prevState.workloads[nodeId[j]].weight;\n        } // Adjust last element\n\n\n        if (nodeId.length > 0 && sumWeights < maxWeight) {\n          prevState.workloads[nodeId[nodeId.length - 1]].weight += maxWeight - sumWeights;\n        }\n\n        return {\n          workloads: prevState.workloads\n        };\n      }, function () {\n        return _this.props.onChange(_this.checkTotalWeight(), _this.state.workloads, false);\n      });\n    };\n\n    _this.checkTotalWeight = function () {\n      // Check all weights are equal to 100\n      return _this.state.workloads.filter(function (w) {\n        return !w.mirrored;\n      }).map(function (w) {\n        return w.weight;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0) === 100;\n    };\n\n    _this.state = {\n      workloads: []\n    };\n    return _this;\n  }\n\n  _createClass(TrafficShifting, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.resetState();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isValid = this.checkTotalWeight(); // TODO: Casting 'as any' because @patternfly/react-table@2.22.19 has a typing bug. Remove the casting when PF fixes it.\n      // https://github.com/patternfly/patternfly-next/issues/2373\n\n      var workloadCells = [{\n        title: 'Destination Workload',\n        transforms: [cellWidth(30)],\n        props: {}\n      }, {\n        title: 'Traffic Weight',\n        transforms: [cellWidth(70)],\n        props: {}\n      }];\n      var workloadsRows = this.state.workloads.filter(function (workload) {\n        return !workload.mirrored;\n      }).map(function (workload) {\n        return {\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(PFBadge, {\n            badge: PFBadges.Workload,\n            position: TooltipPosition.top,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }\n          }), workload.name)),\n          /*#__PURE__*/\n          // This <> wrapper is needed by Slider\n          React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Slider, {\n            id: 'slider-' + workload.name,\n            key: 'slider-' + workload.name,\n            tooltip: true,\n            input: true,\n            inputFormat: \"%\",\n            value: workload.weight,\n            min: 0,\n            max: workload.maxWeight,\n            maxLimit: 100,\n            onSlide: function onSlide(value) {\n              _this2.onWeight(workload.name, value);\n            },\n            onSlideStop: function onSlideStop(value) {\n              _this2.onWeight(workload.name, value);\n            },\n            locked: _this2.state.workloads.length > 1 ? workload.locked : true,\n            showLock: _this2.state.workloads.length > 2,\n            onLock: function onLock(locked) {\n              return _this2.onLock(workload.name, locked);\n            },\n            mirrored: workload.mirrored,\n            showMirror: _this2.props.showMirror && _this2.state.workloads.length > 1,\n            onMirror: function onMirror(mirrored) {\n              return _this2.onMirror(workload.name, mirrored);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }\n          }))]\n        };\n      });\n      var mirrorCells = [{\n        title: 'Mirrored Workload',\n        transforms: [cellWidth(30)],\n        props: {}\n      }, {\n        title: 'Mirror Percentage',\n        transforms: [cellWidth(70)],\n        props: {}\n      }];\n      var mirrorRows = this.state.workloads.filter(function (workload) {\n        return workload.mirrored;\n      }).map(function (workload) {\n        return {\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'mirrorred_' + workload.name,\n            position: TooltipPosition.top,\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, \"Mirrored Workload\"),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Badge, {\n            className: 'faultinjection_badge_definition',\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 19\n            }\n          }, \"MI\")), workload.name)),\n          /*#__PURE__*/\n          // This <> wrapper is needed by Slider\n          React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Slider, {\n            id: 'slider-' + workload.name,\n            key: 'slider-' + workload.name,\n            tooltip: true,\n            input: true,\n            inputFormat: \"%\",\n            value: workload.weight,\n            min: 0,\n            max: workload.maxWeight,\n            maxLimit: 100,\n            onSlide: function onSlide(value) {\n              _this2.onWeight(workload.name, value);\n            },\n            onSlideStop: function onSlideStop(value) {\n              _this2.onWeight(workload.name, value);\n            },\n            locked: _this2.state.workloads.length > 1 ? workload.locked : true,\n            showLock: _this2.state.workloads.length > 2,\n            onLock: function onLock(locked) {\n              return _this2.onLock(workload.name, locked);\n            },\n            mirrored: workload.mirrored,\n            showMirror: _this2.props.showMirror,\n            onMirror: function onMirror(mirrored) {\n              return _this2.onMirror(workload.name, mirrored);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }\n          }))]\n        };\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n        cells: workloadCells,\n        rows: workloadsRows,\n        \"aria-label\": \"weighted routing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }\n      })), mirrorRows.length > 0 && /*#__PURE__*/React.createElement(Table, {\n        cells: mirrorCells,\n        rows: mirrorRows,\n        \"aria-label\": \"mirrors\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      })), this.props.workloads.length > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: evenlyButtonStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        icon: /*#__PURE__*/React.createElement(EqualizerIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 42\n          }\n        }),\n        onClick: function onClick() {\n          return _this2.resetState();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }\n      }, \"Evenly distribute traffic\"), ' '), this.props.showValid && !isValid && /*#__PURE__*/React.createElement(\"div\", {\n        className: validationStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 46\n        }\n      }, MSG_WEIGHTS_NOT_VALID));\n    }\n  }]);\n\n  return TrafficShifting;\n}(React.Component);\n\nexport default TrafficShifting;","map":{"version":3,"sources":["/root/GraduateProject/src/components/IstioWizards/TrafficShifting.tsx"],"names":["React","cellWidth","Table","TableHeader","TableBody","Slider","style","PFColors","Badge","Button","Tooltip","TooltipPosition","EqualizerIcon","getDefaultWeights","PFBadge","PFBadges","validationStyle","marginBottom","color","Red100","textAlign","evenlyButtonStyle","width","MSG_WEIGHTS_NOT_VALID","TrafficShifting","props","resetState","workloads","length","setState","prevState","initWeights","onChange","checkTotalWeight","state","onWeight","workloadName","newWeight","nodeId","maxWeight","i","locked","weight","name","mirrored","push","sumWeights","j","onLock","maxWeights","onMirror","filter","w","map","reduce","a","b","isValid","workloadCells","title","transforms","workloadsRows","workload","cells","Workload","top","value","showMirror","mirrorCells","mirrorRows","showValid","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAA2BC,KAA3B,EAAkCC,WAAlC,EAA+CC,SAA/C,QAAgE,yBAAhE;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,eAAjC,QAAwD,wBAAxD;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,wBAAlC;AAsBA,IAAMC,eAAe,GAAGV,KAAK,CAAC;AAC5BW,EAAAA,YAAY,EAAE,EADc;AAE5BC,EAAAA,KAAK,EAAEX,QAAQ,CAACY,MAFY;AAG5BC,EAAAA,SAAS,EAAE;AAHiB,CAAD,CAA7B;AAMA,IAAMC,iBAAiB,GAAGf,KAAK,CAAC;AAC9BgB,EAAAA,KAAK,EAAE,MADuB;AAE9BF,EAAAA,SAAS,EAAE;AAFmB,CAAD,CAA/B;AAKA,OAAO,IAAMG,qBAAqB,GAAG,mDAA9B;;IAEDC,e;;;;;AACJ,2BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;;AADwB,UAW1BC,UAX0B,GAWb,YAAM;AACjB,UAAI,MAAKD,KAAL,CAAWE,SAAX,CAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACrC;AACD;;AACD,YAAKC,QAAL,CACE,UAAAC,SAAS,EAAI;AACX,eAAO;AACLH,UAAAA,SAAS,EACPG,SAAS,CAACH,SAAV,CAAoBC,MAApB,KAA+B,CAA/B,IAAoC,MAAKH,KAAL,CAAWM,WAAX,CAAuBH,MAAvB,GAAgC,CAApE,GACI,MAAKH,KAAL,CAAWM,WADf,GAEIlB,iBAAiB,CAAC,MAAKY,KAAL,CAAWE,SAAZ;AAJlB,SAAP;AAMD,OARH,EASE;AAAA,eAAM,MAAKF,KAAL,CAAWO,QAAX,CAAoB,MAAKC,gBAAL,EAApB,EAA6C,MAAKC,KAAL,CAAWP,SAAxD,EAAmE,IAAnE,CAAN;AAAA,OATF;AAWD,KA1ByB;;AAAA,UA4B1BQ,QA5B0B,GA4Bf,UAACC,YAAD,EAAuBC,SAAvB,EAA6C;AACtD,YAAKR,QAAL,CACE,UAAAC,SAAS,EAAI;AACX,YAAMQ,MAAgB,GAAG,EAAzB;AACA,YAAIC,SAAS,GAAG,GAAhB,CAFW,CAIX;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACH,SAAV,CAAoBC,MAAxC,EAAgDY,CAAC,EAAjD,EAAqD;AACnD,cAAIV,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBC,MAA3B,EAAmC;AACjCF,YAAAA,SAAS,IAAIT,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBE,MAApC;AACD;AACF,SATU,CAWX;;;AACA,aAAK,IAAIF,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGV,SAAS,CAACH,SAAV,CAAoBC,MAAxC,EAAgDY,EAAC,EAAjD,EAAqD;AACnD,cAAIV,SAAS,CAACH,SAAV,CAAoBa,EAApB,EAAuBG,IAAvB,KAAgCP,YAApC,EAAkD;AAChDN,YAAAA,SAAS,CAACH,SAAV,CAAoBa,EAApB,EAAuBE,MAAvB,GAAgCL,SAAhC,CADgD,CAEhD;;AACA,gBAAI,CAACP,SAAS,CAACH,SAAV,CAAoBa,EAApB,EAAuBI,QAA5B,EAAsC;AACpCL,cAAAA,SAAS,IAAIF,SAAb;AACD;AACF,WAND,MAMO,IAAI,CAACP,SAAS,CAACH,SAAV,CAAoBa,EAApB,EAAuBC,MAAxB,IAAkC,CAACX,SAAS,CAACH,SAAV,CAAoBa,EAApB,EAAuBI,QAA9D,EAAwE;AAC7E;AACAN,YAAAA,MAAM,CAACO,IAAP,CAAYL,EAAZ;AACD;AACF,SAvBU,CAyBX;;;AACA,YAAIM,UAAU,GAAG,CAAjB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACV,MAA3B,EAAmCmB,CAAC,EAApC,EAAwC;AACtC,cAAID,UAAU,GAAGhB,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA5C,GAAqDH,SAAzD,EAAoE;AAClET,YAAAA,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA/B,GAAwCH,SAAS,GAAGO,UAApD;AACD;;AACDA,UAAAA,UAAU,IAAIhB,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA7C;AACD,SAhCU,CAkCX;;;AACA,YAAIJ,MAAM,CAACV,MAAP,GAAgB,CAAhB,IAAqBkB,UAAU,GAAGP,SAAtC,EAAiD;AAC/CT,UAAAA,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACA,MAAM,CAACV,MAAP,GAAgB,CAAjB,CAA1B,EAA+Cc,MAA/C,IAAyDH,SAAS,GAAGO,UAArE;AACD;;AAED,eAAO;AACLnB,UAAAA,SAAS,EAAEG,SAAS,CAACH;AADhB,SAAP;AAGD,OA3CH,EA4CE;AAAA,eAAM,MAAKF,KAAL,CAAWO,QAAX,CAAoB,MAAKC,gBAAL,EAApB,EAA6C,MAAKC,KAAL,CAAWP,SAAxD,EAAmE,KAAnE,CAAN;AAAA,OA5CF;AA8CD,KA3EyB;;AAAA,UA6E1BqB,MA7E0B,GA6EjB,UAACZ,YAAD,EAAuBK,MAAvB,EAA2C;AAClD,YAAKZ,QAAL,CAAc,UAAAC,SAAS,EAAI;AACzB,YAAImB,UAAU,GAAG,GAAjB;;AACA,aAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACH,SAAV,CAAoBC,MAAxC,EAAgDY,CAAC,EAAjD,EAAqD;AACnD,cAAIV,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBG,IAAvB,KAAgCP,YAApC,EAAkD;AAChDN,YAAAA,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBC,MAAvB,GAAgCA,MAAhC;AACD,WAHkD,CAInD;;;AACA,cAAIX,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBC,MAA3B,EAAmC;AACjCQ,YAAAA,UAAU,IAAInB,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBE,MAArC;AACD;AACF,SAVwB,CAWzB;;;AACA,aAAK,IAAIF,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGV,SAAS,CAACH,SAAV,CAAoBC,MAAxC,EAAgDY,GAAC,EAAjD,EAAqD;AACnD,cAAI,CAACV,SAAS,CAACH,SAAV,CAAoBa,GAApB,EAAuBC,MAAxB,IAAkC,CAACX,SAAS,CAACH,SAAV,CAAoBa,GAApB,EAAuBI,QAA9D,EAAwE;AACtEd,YAAAA,SAAS,CAACH,SAAV,CAAoBa,GAApB,EAAuBD,SAAvB,GAAmCU,UAAnC;AACD;AACF;;AACD,eAAO;AACLtB,UAAAA,SAAS,EAAEG,SAAS,CAACH;AADhB,SAAP;AAGD,OApBD;AAqBD,KAnGyB;;AAAA,UAqG1BuB,QArG0B,GAqGf,UAACd,YAAD,EAAuBQ,QAAvB,EAA6C;AACtD,YAAKf,QAAL,CACE,UAAAC,SAAS,EAAI;AACX,YAAMQ,MAAgB,GAAG,EAAzB;AACA,YAAIC,SAAS,GAAG,GAAhB,CAFW,CAIX;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACH,SAAV,CAAoBC,MAAxC,EAAgDY,CAAC,EAAjD,EAAqD;AACnDV,UAAAA,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBI,QAAvB,GAAkC,KAAlC;AACAd,UAAAA,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBC,MAAvB,GAAgC,KAAhC;;AACA,cAAIG,QAAQ,IAAId,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBG,IAAvB,KAAgCP,YAAhD,EAA8D;AAC5DN,YAAAA,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBI,QAAvB,GAAkCA,QAAlC;AACAd,YAAAA,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBC,MAAvB,GAAgC,KAAhC;AACD;;AACD,cAAI,CAACX,SAAS,CAACH,SAAV,CAAoBa,CAApB,EAAuBI,QAA5B,EAAsC;AACpCN,YAAAA,MAAM,CAACO,IAAP,CAAYL,CAAZ;AACD;AACF,SAfU,CAiBX;;;AACA,YAAIM,UAAU,GAAG,CAAjB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACV,MAA3B,EAAmCmB,CAAC,EAApC,EAAwC;AACtC,cAAID,UAAU,GAAGhB,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA5C,GAAqDH,SAAzD,EAAoE;AAClET,YAAAA,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA/B,GAAwCH,SAAS,GAAGO,UAApD;AACD;;AACDA,UAAAA,UAAU,IAAIhB,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACS,CAAD,CAA1B,EAA+BL,MAA7C;AACD,SAxBU,CA0BX;;;AACA,YAAIJ,MAAM,CAACV,MAAP,GAAgB,CAAhB,IAAqBkB,UAAU,GAAGP,SAAtC,EAAiD;AAC/CT,UAAAA,SAAS,CAACH,SAAV,CAAoBW,MAAM,CAACA,MAAM,CAACV,MAAP,GAAgB,CAAjB,CAA1B,EAA+Cc,MAA/C,IAAyDH,SAAS,GAAGO,UAArE;AACD;;AAED,eAAO;AACLnB,UAAAA,SAAS,EAAEG,SAAS,CAACH;AADhB,SAAP;AAGD,OAnCH,EAoCE;AAAA,eAAM,MAAKF,KAAL,CAAWO,QAAX,CAAoB,MAAKC,gBAAL,EAApB,EAA6C,MAAKC,KAAL,CAAWP,SAAxD,EAAmE,KAAnE,CAAN;AAAA,OApCF;AAsCD,KA5IyB;;AAAA,UA8I1BM,gBA9I0B,GA8IP,YAAe;AAChC;AACA,aACE,MAAKC,KAAL,CAAWP,SAAX,CACGwB,MADH,CACU,UAAAC,CAAC;AAAA,eAAI,CAACA,CAAC,CAACR,QAAP;AAAA,OADX,EAEGS,GAFH,CAEO,UAAAD,CAAC;AAAA,eAAIA,CAAC,CAACV,MAAN;AAAA,OAFR,EAGGY,MAHH,CAGU,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,GAAGC,CAAd;AAAA,OAHV,EAG2B,CAH3B,MAGkC,GAJpC;AAMD,KAtJyB;;AAExB,UAAKtB,KAAL,GAAa;AACXP,MAAAA,SAAS,EAAE;AADA,KAAb;AAFwB;AAKzB;;;;WAED,6BAAoB;AAClB,WAAKD,UAAL;AACD;;;WA+ID,kBAAS;AAAA;;AACP,UAAM+B,OAAO,GAAG,KAAKxB,gBAAL,EAAhB,CADO,CAEP;AACA;;AACA,UAAMyB,aAAsB,GAAG,CAC7B;AACEC,QAAAA,KAAK,EAAE,sBADT;AAEEC,QAAAA,UAAU,EAAE,CAAC3D,SAAS,CAAC,EAAD,CAAV,CAFd;AAGEwB,QAAAA,KAAK,EAAE;AAHT,OAD6B,EAM7B;AACEkC,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,UAAU,EAAE,CAAC3D,SAAS,CAAC,EAAD,CAAV,CAFd;AAGEwB,QAAAA,KAAK,EAAE;AAHT,OAN6B,CAA/B;AAYA,UAAMoC,aAAa,GAAG,KAAK3B,KAAL,CAAWP,SAAX,CACnBwB,MADmB,CACZ,UAAAW,QAAQ;AAAA,eAAI,CAACA,QAAQ,CAAClB,QAAd;AAAA,OADI,EAEnBS,GAFmB,CAEf,UAAAS,QAAQ,EAAI;AACf,eAAO;AACLC,UAAAA,KAAK,EAAE,cACL,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,OAAD;AAAS,YAAA,KAAK,EAAEhD,QAAQ,CAACiD,QAAzB;AAAmC,YAAA,QAAQ,EAAErD,eAAe,CAACsD,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,QAAQ,CAACnB,IAFZ,CADF,CADK;AAAA;AAOL;AACA,iEACE,oBAAC,MAAD;AACE,YAAA,EAAE,EAAE,YAAYmB,QAAQ,CAACnB,IAD3B;AAEE,YAAA,GAAG,EAAE,YAAYmB,QAAQ,CAACnB,IAF5B;AAGE,YAAA,OAAO,EAAE,IAHX;AAIE,YAAA,KAAK,EAAE,IAJT;AAKE,YAAA,WAAW,EAAC,GALd;AAME,YAAA,KAAK,EAAEmB,QAAQ,CAACpB,MANlB;AAOE,YAAA,GAAG,EAAE,CAPP;AAQE,YAAA,GAAG,EAAEoB,QAAQ,CAACvB,SARhB;AASE,YAAA,QAAQ,EAAE,GATZ;AAUE,YAAA,OAAO,EAAE,iBAAA2B,KAAK,EAAI;AAChB,cAAA,MAAI,CAAC/B,QAAL,CAAc2B,QAAQ,CAACnB,IAAvB,EAA6BuB,KAA7B;AACD,aAZH;AAaE,YAAA,WAAW,EAAE,qBAAAA,KAAK,EAAI;AACpB,cAAA,MAAI,CAAC/B,QAAL,CAAc2B,QAAQ,CAACnB,IAAvB,EAA6BuB,KAA7B;AACD,aAfH;AAgBE,YAAA,MAAM,EAAE,MAAI,CAAChC,KAAL,CAAWP,SAAX,CAAqBC,MAArB,GAA8B,CAA9B,GAAkCkC,QAAQ,CAACrB,MAA3C,GAAoD,IAhB9D;AAiBE,YAAA,QAAQ,EAAE,MAAI,CAACP,KAAL,CAAWP,SAAX,CAAqBC,MAArB,GAA8B,CAjB1C;AAkBE,YAAA,MAAM,EAAE,gBAAAa,MAAM;AAAA,qBAAI,MAAI,CAACO,MAAL,CAAYc,QAAQ,CAACnB,IAArB,EAA2BF,MAA3B,CAAJ;AAAA,aAlBhB;AAmBE,YAAA,QAAQ,EAAEqB,QAAQ,CAAClB,QAnBrB;AAoBE,YAAA,UAAU,EAAE,MAAI,CAACnB,KAAL,CAAW0C,UAAX,IAAyB,MAAI,CAACjC,KAAL,CAAWP,SAAX,CAAqBC,MAArB,GAA8B,CApBrE;AAqBE,YAAA,QAAQ,EAAE,kBAAAgB,QAAQ;AAAA,qBAAI,MAAI,CAACM,QAAL,CAAcY,QAAQ,CAACnB,IAAvB,EAA6BC,QAA7B,CAAJ;AAAA,aArBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CARK;AADF,SAAP;AAoCD,OAvCmB,CAAtB;AAwCA,UAAMwB,WAAoB,GAAG,CAC3B;AACET,QAAAA,KAAK,EAAE,mBADT;AAEEC,QAAAA,UAAU,EAAE,CAAC3D,SAAS,CAAC,EAAD,CAAV,CAFd;AAGEwB,QAAAA,KAAK,EAAE;AAHT,OAD2B,EAM3B;AACEkC,QAAAA,KAAK,EAAE,mBADT;AAEEC,QAAAA,UAAU,EAAE,CAAC3D,SAAS,CAAC,EAAD,CAAV,CAFd;AAGEwB,QAAAA,KAAK,EAAE;AAHT,OAN2B,CAA7B;AAYA,UAAM4C,UAAU,GAAG,KAAKnC,KAAL,CAAWP,SAAX,CAChBwB,MADgB,CACT,UAAAW,QAAQ;AAAA,eAAIA,QAAQ,CAAClB,QAAb;AAAA,OADC,EAEhBS,GAFgB,CAEZ,UAAAS,QAAQ,EAAI;AACf,eAAO;AACLC,UAAAA,KAAK,EAAE,cACL,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,OAAD;AACE,YAAA,GAAG,EAAE,eAAeD,QAAQ,CAACnB,IAD/B;AAEE,YAAA,QAAQ,EAAEhC,eAAe,CAACsD,GAF5B;AAGE,YAAA,OAAO,eAAE,8DAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKE,oBAAC,KAAD;AAAO,YAAA,SAAS,EAAE,iCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CADF,EAQGH,QAAQ,CAACnB,IARZ,CADF,CADK;AAAA;AAaL;AACA,iEACE,oBAAC,MAAD;AACE,YAAA,EAAE,EAAE,YAAYmB,QAAQ,CAACnB,IAD3B;AAEE,YAAA,GAAG,EAAE,YAAYmB,QAAQ,CAACnB,IAF5B;AAGE,YAAA,OAAO,EAAE,IAHX;AAIE,YAAA,KAAK,EAAE,IAJT;AAKE,YAAA,WAAW,EAAC,GALd;AAME,YAAA,KAAK,EAAEmB,QAAQ,CAACpB,MANlB;AAOE,YAAA,GAAG,EAAE,CAPP;AAQE,YAAA,GAAG,EAAEoB,QAAQ,CAACvB,SARhB;AASE,YAAA,QAAQ,EAAE,GATZ;AAUE,YAAA,OAAO,EAAE,iBAAA2B,KAAK,EAAI;AAChB,cAAA,MAAI,CAAC/B,QAAL,CAAc2B,QAAQ,CAACnB,IAAvB,EAA6BuB,KAA7B;AACD,aAZH;AAaE,YAAA,WAAW,EAAE,qBAAAA,KAAK,EAAI;AACpB,cAAA,MAAI,CAAC/B,QAAL,CAAc2B,QAAQ,CAACnB,IAAvB,EAA6BuB,KAA7B;AACD,aAfH;AAgBE,YAAA,MAAM,EAAE,MAAI,CAAChC,KAAL,CAAWP,SAAX,CAAqBC,MAArB,GAA8B,CAA9B,GAAkCkC,QAAQ,CAACrB,MAA3C,GAAoD,IAhB9D;AAiBE,YAAA,QAAQ,EAAE,MAAI,CAACP,KAAL,CAAWP,SAAX,CAAqBC,MAArB,GAA8B,CAjB1C;AAkBE,YAAA,MAAM,EAAE,gBAAAa,MAAM;AAAA,qBAAI,MAAI,CAACO,MAAL,CAAYc,QAAQ,CAACnB,IAArB,EAA2BF,MAA3B,CAAJ;AAAA,aAlBhB;AAmBE,YAAA,QAAQ,EAAEqB,QAAQ,CAAClB,QAnBrB;AAoBE,YAAA,UAAU,EAAE,MAAI,CAACnB,KAAL,CAAW0C,UApBzB;AAqBE,YAAA,QAAQ,EAAE,kBAAAvB,QAAQ;AAAA,qBAAI,MAAI,CAACM,QAAL,CAAcY,QAAQ,CAACnB,IAAvB,EAA6BC,QAA7B,CAAJ;AAAA,aArBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAdK;AADF,SAAP;AA0CD,OA7CgB,CAAnB;AA8CA,0BACE,uDACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEc,aAAd;AAA6B,QAAA,IAAI,EAAEG,aAAnC;AAAkD,sBAAW,kBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAKGQ,UAAU,CAACzC,MAAX,GAAoB,CAApB,iBACC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEwC,WAAd;AAA2B,QAAA,IAAI,EAAEC,UAAjC;AAA6C,sBAAW,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CANJ,EAWG,KAAK5C,KAAL,CAAWE,SAAX,CAAqBC,MAArB,GAA8B,CAA9B,iBACC;AAAK,QAAA,SAAS,EAAEP,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,MAAhB;AAAuB,QAAA,IAAI,eAAE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7B;AAAgD,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACK,UAAL,EAAN;AAAA,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAGY,GAHZ,CAZJ,EAkBG,KAAKD,KAAL,CAAW6C,SAAX,IAAwB,CAACb,OAAzB,iBAAoC;AAAK,QAAA,SAAS,EAAEzC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCO,qBAAlC,CAlBvC,CADF;AAsBD;;;;EAjS2BvB,KAAK,CAACuE,S;;AAoSpC,eAAe/C,eAAf","sourcesContent":["import * as React from 'react';\nimport { cellWidth, ICell, Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport Slider from './Slider/Slider';\nimport { WorkloadOverview } from '../../types/ServiceInfo';\nimport { style } from 'typestyle';\nimport { PFColors } from '../Pf/PfColors';\nimport { Badge, Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { EqualizerIcon } from '@patternfly/react-icons';\nimport { getDefaultWeights } from './WizardActions';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\n\ntype Props = {\n  workloads: WorkloadOverview[];\n  initWeights: WorkloadWeight[];\n  onChange: (valid: boolean, workloads: WorkloadWeight[], reset: boolean) => void;\n  showValid: boolean;\n  showMirror: boolean;\n};\n\nexport type WorkloadWeight = {\n  name: string;\n  weight: number;\n  locked: boolean;\n  maxWeight: number;\n  mirrored: boolean;\n};\n\ntype State = {\n  workloads: WorkloadWeight[];\n};\n\nconst validationStyle = style({\n  marginBottom: 10,\n  color: PFColors.Red100,\n  textAlign: 'right'\n});\n\nconst evenlyButtonStyle = style({\n  width: '100%',\n  textAlign: 'right'\n});\n\nexport const MSG_WEIGHTS_NOT_VALID = 'The sum of all non-mirrored weights must be 100 %';\n\nclass TrafficShifting extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      workloads: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetState();\n  }\n\n  resetState = () => {\n    if (this.props.workloads.length === 0) {\n      return;\n    }\n    this.setState(\n      prevState => {\n        return {\n          workloads:\n            prevState.workloads.length === 0 && this.props.initWeights.length > 0\n              ? this.props.initWeights\n              : getDefaultWeights(this.props.workloads)\n        };\n      },\n      () => this.props.onChange(this.checkTotalWeight(), this.state.workloads, true)\n    );\n  };\n\n  onWeight = (workloadName: string, newWeight: number) => {\n    this.setState(\n      prevState => {\n        const nodeId: number[] = [];\n        let maxWeight = 100;\n\n        // Calculate maxWeight from locked nodes\n        for (let i = 0; i < prevState.workloads.length; i++) {\n          if (prevState.workloads[i].locked) {\n            maxWeight -= prevState.workloads[i].weight;\n          }\n        }\n\n        // Set new weight; remember rest of the nodes\n        for (let i = 0; i < prevState.workloads.length; i++) {\n          if (prevState.workloads[i].name === workloadName) {\n            prevState.workloads[i].weight = newWeight;\n            // Don't update maxWeight if node is mirrored\n            if (!prevState.workloads[i].mirrored) {\n              maxWeight -= newWeight;\n            }\n          } else if (!prevState.workloads[i].locked && !prevState.workloads[i].mirrored) {\n            // Only adjust those nodes that are not locked\n            nodeId.push(i);\n          }\n        }\n\n        // Distribute pending weights\n        let sumWeights = 0;\n        for (let j = 0; j < nodeId.length; j++) {\n          if (sumWeights + prevState.workloads[nodeId[j]].weight > maxWeight) {\n            prevState.workloads[nodeId[j]].weight = maxWeight - sumWeights;\n          }\n          sumWeights += prevState.workloads[nodeId[j]].weight;\n        }\n\n        // Adjust last element\n        if (nodeId.length > 0 && sumWeights < maxWeight) {\n          prevState.workloads[nodeId[nodeId.length - 1]].weight += maxWeight - sumWeights;\n        }\n\n        return {\n          workloads: prevState.workloads\n        };\n      },\n      () => this.props.onChange(this.checkTotalWeight(), this.state.workloads, false)\n    );\n  };\n\n  onLock = (workloadName: string, locked: boolean) => {\n    this.setState(prevState => {\n      let maxWeights = 100;\n      for (let i = 0; i < prevState.workloads.length; i++) {\n        if (prevState.workloads[i].name === workloadName) {\n          prevState.workloads[i].locked = locked;\n        }\n        // Calculate maxWeights from locked nodes\n        if (prevState.workloads[i].locked) {\n          maxWeights -= prevState.workloads[i].weight;\n        }\n      }\n      // Update non locked nodes maxWeight\n      for (let i = 0; i < prevState.workloads.length; i++) {\n        if (!prevState.workloads[i].locked && !prevState.workloads[i].mirrored) {\n          prevState.workloads[i].maxWeight = maxWeights;\n        }\n      }\n      return {\n        workloads: prevState.workloads\n      };\n    });\n  };\n\n  onMirror = (workloadName: string, mirrored: boolean) => {\n    this.setState(\n      prevState => {\n        const nodeId: number[] = [];\n        let maxWeight = 100;\n\n        // Reset all mirrored workload but selected one.\n        for (let i = 0; i < prevState.workloads.length; i++) {\n          prevState.workloads[i].mirrored = false;\n          prevState.workloads[i].locked = false;\n          if (mirrored && prevState.workloads[i].name === workloadName) {\n            prevState.workloads[i].mirrored = mirrored;\n            prevState.workloads[i].locked = false;\n          }\n          if (!prevState.workloads[i].mirrored) {\n            nodeId.push(i);\n          }\n        }\n\n        // Distribute pending weights\n        let sumWeights = 0;\n        for (let j = 0; j < nodeId.length; j++) {\n          if (sumWeights + prevState.workloads[nodeId[j]].weight > maxWeight) {\n            prevState.workloads[nodeId[j]].weight = maxWeight - sumWeights;\n          }\n          sumWeights += prevState.workloads[nodeId[j]].weight;\n        }\n\n        // Adjust last element\n        if (nodeId.length > 0 && sumWeights < maxWeight) {\n          prevState.workloads[nodeId[nodeId.length - 1]].weight += maxWeight - sumWeights;\n        }\n\n        return {\n          workloads: prevState.workloads\n        };\n      },\n      () => this.props.onChange(this.checkTotalWeight(), this.state.workloads, false)\n    );\n  };\n\n  checkTotalWeight = (): boolean => {\n    // Check all weights are equal to 100\n    return (\n      this.state.workloads\n        .filter(w => !w.mirrored)\n        .map(w => w.weight)\n        .reduce((a, b) => a + b, 0) === 100\n    );\n  };\n\n  render() {\n    const isValid = this.checkTotalWeight();\n    // TODO: Casting 'as any' because @patternfly/react-table@2.22.19 has a typing bug. Remove the casting when PF fixes it.\n    // https://github.com/patternfly/patternfly-next/issues/2373\n    const workloadCells: ICell[] = [\n      {\n        title: 'Destination Workload',\n        transforms: [cellWidth(30) as any],\n        props: {}\n      },\n      {\n        title: 'Traffic Weight',\n        transforms: [cellWidth(70) as any],\n        props: {}\n      }\n    ];\n    const workloadsRows = this.state.workloads\n      .filter(workload => !workload.mirrored)\n      .map(workload => {\n        return {\n          cells: [\n            <>\n              <div>\n                <PFBadge badge={PFBadges.Workload} position={TooltipPosition.top} />\n                {workload.name}\n              </div>\n            </>,\n            // This <> wrapper is needed by Slider\n            <>\n              <Slider\n                id={'slider-' + workload.name}\n                key={'slider-' + workload.name}\n                tooltip={true}\n                input={true}\n                inputFormat=\"%\"\n                value={workload.weight}\n                min={0}\n                max={workload.maxWeight}\n                maxLimit={100}\n                onSlide={value => {\n                  this.onWeight(workload.name, value as number);\n                }}\n                onSlideStop={value => {\n                  this.onWeight(workload.name, value as number);\n                }}\n                locked={this.state.workloads.length > 1 ? workload.locked : true}\n                showLock={this.state.workloads.length > 2}\n                onLock={locked => this.onLock(workload.name, locked)}\n                mirrored={workload.mirrored}\n                showMirror={this.props.showMirror && this.state.workloads.length > 1}\n                onMirror={mirrored => this.onMirror(workload.name, mirrored)}\n              />\n            </>\n          ]\n        };\n      });\n    const mirrorCells: ICell[] = [\n      {\n        title: 'Mirrored Workload',\n        transforms: [cellWidth(30) as any],\n        props: {}\n      },\n      {\n        title: 'Mirror Percentage',\n        transforms: [cellWidth(70) as any],\n        props: {}\n      }\n    ];\n    const mirrorRows = this.state.workloads\n      .filter(workload => workload.mirrored)\n      .map(workload => {\n        return {\n          cells: [\n            <>\n              <div>\n                <Tooltip\n                  key={'mirrorred_' + workload.name}\n                  position={TooltipPosition.top}\n                  content={<>Mirrored Workload</>}\n                >\n                  <Badge className={'faultinjection_badge_definition'}>MI</Badge>\n                </Tooltip>\n                {workload.name}\n              </div>\n            </>,\n            // This <> wrapper is needed by Slider\n            <>\n              <Slider\n                id={'slider-' + workload.name}\n                key={'slider-' + workload.name}\n                tooltip={true}\n                input={true}\n                inputFormat=\"%\"\n                value={workload.weight}\n                min={0}\n                max={workload.maxWeight}\n                maxLimit={100}\n                onSlide={value => {\n                  this.onWeight(workload.name, value as number);\n                }}\n                onSlideStop={value => {\n                  this.onWeight(workload.name, value as number);\n                }}\n                locked={this.state.workloads.length > 1 ? workload.locked : true}\n                showLock={this.state.workloads.length > 2}\n                onLock={locked => this.onLock(workload.name, locked)}\n                mirrored={workload.mirrored}\n                showMirror={this.props.showMirror}\n                onMirror={mirrored => this.onMirror(workload.name, mirrored)}\n              />\n            </>\n          ]\n        };\n      });\n    return (\n      <>\n        <Table cells={workloadCells} rows={workloadsRows} aria-label=\"weighted routing\">\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {mirrorRows.length > 0 && (\n          <Table cells={mirrorCells} rows={mirrorRows} aria-label=\"mirrors\">\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n        {this.props.workloads.length > 1 && (\n          <div className={evenlyButtonStyle}>\n            <Button variant=\"link\" icon={<EqualizerIcon />} onClick={() => this.resetState()}>\n              Evenly distribute traffic\n            </Button>{' '}\n          </div>\n        )}\n        {this.props.showValid && !isValid && <div className={validationStyle}>{MSG_WEIGHTS_NOT_VALID}</div>}\n      </>\n    );\n  }\n}\n\nexport default TrafficShifting;\n"]},"metadata":{},"sourceType":"module"}
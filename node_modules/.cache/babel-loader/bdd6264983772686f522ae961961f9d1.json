{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { boundsToDuration, guardTimeRange } from '../../types/Common';\nimport { computePrometheusRateParams } from '../../services/Prometheus';\nimport history, { URLParam } from '../../app/History';\nimport responseFlags from 'utils/ResponseFlags';\n// Default to 10 minutes. Showing timeseries to only 1 minute doesn't make so much sense.\nexport var defaultMetricsDuration = 600;\nexport var combineLabelsSettings = function combineLabelsSettings(newSettings, stateSettings) {\n  // Labels: keep existing on/off flag\n  // This is allowed because the labels filters state is managed only from this component,\n  // so we can override them in props from state\n  // LabelsSettings received from props contains the names of the filters with only a default on/off flag.\n  var result = new Map();\n  newSettings.forEach(function (lblObj, promLabel) {\n    var resultValues = {};\n    var stateObj = stateSettings.get(promLabel);\n    Object.entries(lblObj.values).forEach(function (e) {\n      resultValues[e[0]] = stateObj && stateObj.defaultValue === false ? false : e[1];\n    });\n\n    if (stateObj) {\n      lblObj.checked = stateObj.checked;\n      Object.entries(stateObj.values).forEach(function (e) {\n        resultValues[e[0]] = e[1];\n      });\n    }\n\n    result.set(promLabel, _objectSpread(_objectSpread({}, lblObj), {}, {\n      values: resultValues\n    }));\n  });\n  return result;\n};\nexport var extractLabelsSettingsOnSeries = function extractLabelsSettingsOnSeries(metrics, aggregations, extracted) {\n  metrics.forEach(function (m) {\n    Object.keys(m.labels).forEach(function (k) {\n      var agg = aggregations.find(function (a) {\n        return a.label === k;\n      });\n\n      if (agg) {\n        var value = m.labels[k];\n        var lblObj = extracted.get(agg.label);\n\n        if (!lblObj) {\n          lblObj = {\n            checked: true,\n            displayName: agg.displayName,\n            values: {},\n            defaultValue: true,\n            singleSelection: agg.singleSelection\n          };\n          extracted.set(agg.label, lblObj);\n        } else {\n          lblObj.checked = true;\n        }\n\n        if (!lblObj.values.hasOwnProperty(value)) {\n          if (agg.singleSelection && Object.keys(lblObj.values).length > 0) {\n            // In single-selection mode, do not activate more than one label value at a time\n            lblObj.values[value] = false;\n          } else {\n            lblObj.values[value] = true;\n          }\n        }\n      }\n    });\n  });\n};\nexport var extractLabelsSettings = function extractLabelsSettings(dashboard, stateSettings) {\n  // Find all labels on all series\n  var newSettings = new Map();\n  dashboard.aggregations.forEach(function (agg) {\n    return newSettings.set(agg.label, {\n      checked: false,\n      displayName: agg.displayName,\n      values: {},\n      defaultValue: true,\n      singleSelection: agg.singleSelection\n    });\n  });\n  dashboard.charts.forEach(function (chart) {\n    return extractLabelsSettingsOnSeries(chart.metrics, dashboard.aggregations, newSettings);\n  });\n  return combineLabelsSettings(newSettings, stateSettings);\n};\nexport var mergeLabelFilter = function mergeLabelFilter(lblSettings, label, value, checked, singleSelection) {\n  // Note: we don't really care that the new map references same objects as the old one (at least at the moment) so shallow copy is fine\n  var newSettings = new Map(lblSettings);\n  var objLbl = newSettings.get(label);\n\n  if (objLbl) {\n    if (singleSelection) {\n      for (var _i = 0, _Object$keys = Object.keys(objLbl.values); _i < _Object$keys.length; _i++) {\n        var v = _Object$keys[_i];\n        objLbl.values[v] = false;\n      }\n    }\n\n    objLbl.values[value] = checked;\n  }\n\n  return newSettings;\n};\nexport var convertAsPromLabels = function convertAsPromLabels(lblSettings) {\n  var promLabels = new Map();\n  lblSettings.forEach(function (objLbl, k) {\n    promLabels.set(k, objLbl.values);\n  });\n  return promLabels;\n};\nexport var settingsToOptions = function settingsToOptions(settings, opts, defaultLabels) {\n  opts.avg = settings.showAverage;\n  opts.quantiles = settings.showQuantiles;\n  var byLabels = defaultLabels;\n\n  if (settings.labelsSettings.size > 0) {\n    // Labels have been fetched, so use what comes from labelsSettings\n    byLabels = [];\n    settings.labelsSettings.forEach(function (objLbl, k) {\n      if (objLbl.checked) {\n        byLabels.push(k);\n      }\n    });\n  }\n\n  opts.byLabels = byLabels;\n};\nexport var timeRangeToOptions = function timeRangeToOptions(range, opts) {\n  delete opts.queryTime;\n  opts.duration = guardTimeRange(range, function (d) {\n    return d;\n  }, function (ft) {\n    opts.queryTime = ft.to && Math.floor(ft.to / 1000);\n    return boundsToDuration(ft);\n  });\n  var intervalOpts = computePrometheusRateParams(opts.duration);\n  opts.step = intervalOpts.step;\n  opts.rateInterval = intervalOpts.rateInterval;\n};\nexport var retrieveMetricsSettings = function retrieveMetricsSettings() {\n  var urlParams = new URLSearchParams(history.location.search);\n  var settings = {\n    showSpans: false,\n    showAverage: true,\n    showQuantiles: [],\n    labelsSettings: new Map()\n  };\n  var avg = urlParams.get(URLParam.SHOW_AVERAGE);\n\n  if (avg !== null) {\n    settings.showAverage = avg === 'true';\n  }\n\n  var spans = urlParams.get(URLParam.SHOW_SPANS);\n\n  if (spans !== null) {\n    settings.showSpans = spans === 'true';\n  }\n\n  var quantiles = urlParams.get(URLParam.QUANTILES);\n\n  if (quantiles !== null) {\n    if (quantiles.trim().length !== 0) {\n      settings.showQuantiles = quantiles.split(' ').map(function (val) {\n        return val.trim();\n      });\n    } else {\n      settings.showQuantiles = [];\n    }\n  }\n\n  var byLabels = urlParams.getAll(URLParam.BY_LABELS); // E.g.: bylbl=version=v1,v2,v4\n\n  if (byLabels.length !== 0) {\n    byLabels.forEach(function (val) {\n      var kvpair = val.split('=', 2);\n      var lblObj = {\n        displayName: '',\n        checked: true,\n        values: {},\n        defaultValue: true,\n        singleSelection: false\n      };\n\n      if (kvpair[1]) {\n        kvpair[1].split(',').forEach(function (v) {\n          lblObj.values[v] = true;\n        }); // When values filters are provided by URL, other filters should be false by default\n\n        lblObj.defaultValue = false;\n      }\n\n      settings.labelsSettings.set(kvpair[0], lblObj);\n    });\n  }\n\n  return settings;\n};\nexport var prettyLabelValues = function prettyLabelValues(promName, val) {\n  if (promName === 'response_flags') {\n    if (val === '-') {\n      return 'None';\n    }\n\n    var flagObj = responseFlags[val];\n\n    if (flagObj) {\n      var text = flagObj.short ? flagObj.short : flagObj.help;\n      return \"\".concat(text, \" (\").concat(val, \")\");\n    }\n  }\n\n  return val;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/Metrics/Helper.ts"],"names":["boundsToDuration","guardTimeRange","computePrometheusRateParams","history","URLParam","responseFlags","defaultMetricsDuration","combineLabelsSettings","newSettings","stateSettings","result","Map","forEach","lblObj","promLabel","resultValues","stateObj","get","Object","entries","values","e","defaultValue","checked","set","extractLabelsSettingsOnSeries","metrics","aggregations","extracted","m","keys","labels","k","agg","find","a","label","value","displayName","singleSelection","hasOwnProperty","length","extractLabelsSettings","dashboard","charts","chart","mergeLabelFilter","lblSettings","objLbl","v","convertAsPromLabels","promLabels","settingsToOptions","settings","opts","defaultLabels","avg","showAverage","quantiles","showQuantiles","byLabels","labelsSettings","size","push","timeRangeToOptions","range","queryTime","duration","d","ft","to","Math","floor","intervalOpts","step","rateInterval","retrieveMetricsSettings","urlParams","URLSearchParams","location","search","showSpans","SHOW_AVERAGE","spans","SHOW_SPANS","QUANTILES","trim","split","map","val","getAll","BY_LABELS","kvpair","prettyLabelValues","promName","flagObj","text","short","help"],"mappings":"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","sourcesContent":["import { MetricsSettings, LabelsSettings, Quantiles, LabelSettings } from '../MetricsOptions/MetricsSettings';\nimport { boundsToDuration, guardTimeRange, TimeRange, DurationInSeconds } from '../../types/Common';\nimport { computePrometheusRateParams } from '../../services/Prometheus';\nimport history, { URLParam } from '../../app/History';\nimport responseFlags from 'utils/ResponseFlags';\nimport { AggregationModel, DashboardModel } from 'types/Dashboards';\nimport { AllPromLabelsValues, Metric, PromLabel, SingleLabelValues } from 'types/Metrics';\nimport { MetricsQuery } from 'types/MetricsOptions';\n// Default to 10 minutes. Showing timeseries to only 1 minute doesn't make so much sense.\nexport const defaultMetricsDuration: DurationInSeconds = 600;\n\nexport const combineLabelsSettings = (newSettings: LabelsSettings, stateSettings: LabelsSettings): LabelsSettings => {\n  // Labels: keep existing on/off flag\n  // This is allowed because the labels filters state is managed only from this component,\n  // so we can override them in props from state\n  // LabelsSettings received from props contains the names of the filters with only a default on/off flag.\n  const result: LabelsSettings = new Map();\n  newSettings.forEach((lblObj, promLabel) => {\n    const resultValues: SingleLabelValues = {};\n    const stateObj = stateSettings.get(promLabel);\n    Object.entries(lblObj.values).forEach(e => {\n      resultValues[e[0]] = stateObj && stateObj.defaultValue === false ? false : e[1];\n    });\n    if (stateObj) {\n      lblObj.checked = stateObj.checked;\n      Object.entries(stateObj.values).forEach(e => {\n        resultValues[e[0]] = e[1];\n      });\n    }\n    result.set(promLabel, { ...lblObj, values: resultValues });\n  });\n  return result;\n};\n\nexport const extractLabelsSettingsOnSeries = (\n  metrics: Metric[],\n  aggregations: AggregationModel[],\n  extracted: LabelsSettings\n): void => {\n  metrics.forEach(m => {\n    Object.keys(m.labels).forEach(k => {\n      const agg = aggregations.find(a => a.label === k);\n      if (agg) {\n        const value = m.labels[k];\n        let lblObj = extracted.get(agg.label);\n        if (!lblObj) {\n          lblObj = {\n            checked: true,\n            displayName: agg.displayName,\n            values: {},\n            defaultValue: true,\n            singleSelection: agg.singleSelection\n          };\n          extracted.set(agg.label, lblObj);\n        } else {\n          lblObj.checked = true;\n        }\n        if (!lblObj.values.hasOwnProperty(value)) {\n          if (agg.singleSelection && Object.keys(lblObj.values).length > 0) {\n            // In single-selection mode, do not activate more than one label value at a time\n            lblObj.values[value] = false;\n          } else {\n            lblObj.values[value] = true;\n          }\n        }\n      }\n    });\n  });\n};\n\nexport const extractLabelsSettings = (dashboard: DashboardModel, stateSettings: LabelsSettings): LabelsSettings => {\n  // Find all labels on all series\n  const newSettings: LabelsSettings = new Map();\n  dashboard.aggregations.forEach(agg =>\n    newSettings.set(agg.label, {\n      checked: false,\n      displayName: agg.displayName,\n      values: {},\n      defaultValue: true,\n      singleSelection: agg.singleSelection\n    })\n  );\n  dashboard.charts.forEach(chart => extractLabelsSettingsOnSeries(chart.metrics, dashboard.aggregations, newSettings));\n  return combineLabelsSettings(newSettings, stateSettings);\n};\n\nexport const mergeLabelFilter = (\n  lblSettings: LabelsSettings,\n  label: PromLabel,\n  value: string,\n  checked: boolean,\n  singleSelection: boolean\n): LabelsSettings => {\n  // Note: we don't really care that the new map references same objects as the old one (at least at the moment) so shallow copy is fine\n  const newSettings = new Map(lblSettings);\n  const objLbl = newSettings.get(label);\n  if (objLbl) {\n    if (singleSelection) {\n      for (const v of Object.keys(objLbl.values)) {\n        objLbl.values[v] = false;\n      }\n    }\n    objLbl.values[value] = checked;\n  }\n  return newSettings;\n};\n\nexport const convertAsPromLabels = (lblSettings: LabelsSettings): AllPromLabelsValues => {\n  const promLabels = new Map<PromLabel, SingleLabelValues>();\n  lblSettings.forEach((objLbl, k) => {\n    promLabels.set(k, objLbl.values);\n  });\n  return promLabels;\n};\n\nexport const settingsToOptions = (settings: MetricsSettings, opts: MetricsQuery, defaultLabels: string[]) => {\n  opts.avg = settings.showAverage;\n  opts.quantiles = settings.showQuantiles;\n  let byLabels = defaultLabels;\n  if (settings.labelsSettings.size > 0) {\n    // Labels have been fetched, so use what comes from labelsSettings\n    byLabels = [];\n    settings.labelsSettings.forEach((objLbl, k) => {\n      if (objLbl.checked) {\n        byLabels.push(k);\n      }\n    });\n  }\n  opts.byLabels = byLabels;\n};\n\nexport const timeRangeToOptions = (range: TimeRange, opts: MetricsQuery) => {\n  delete opts.queryTime;\n  opts.duration = guardTimeRange(\n    range,\n    d => d,\n    ft => {\n      opts.queryTime = ft.to && Math.floor(ft.to / 1000);\n      return boundsToDuration(ft);\n    }\n  );\n  const intervalOpts = computePrometheusRateParams(opts.duration);\n  opts.step = intervalOpts.step;\n  opts.rateInterval = intervalOpts.rateInterval;\n};\n\nexport const retrieveMetricsSettings = (): MetricsSettings => {\n  const urlParams = new URLSearchParams(history.location.search);\n  const settings: MetricsSettings = {\n    showSpans: false,\n    showAverage: true,\n    showQuantiles: [],\n    labelsSettings: new Map()\n  };\n  const avg = urlParams.get(URLParam.SHOW_AVERAGE);\n  if (avg !== null) {\n    settings.showAverage = avg === 'true';\n  }\n  const spans = urlParams.get(URLParam.SHOW_SPANS);\n  if (spans !== null) {\n    settings.showSpans = spans === 'true';\n  }\n  const quantiles = urlParams.get(URLParam.QUANTILES);\n  if (quantiles !== null) {\n    if (quantiles.trim().length !== 0) {\n      settings.showQuantiles = quantiles.split(' ').map(val => val.trim() as Quantiles);\n    } else {\n      settings.showQuantiles = [];\n    }\n  }\n  const byLabels = urlParams.getAll(URLParam.BY_LABELS);\n  // E.g.: bylbl=version=v1,v2,v4\n  if (byLabels.length !== 0) {\n    byLabels.forEach(val => {\n      const kvpair = val.split('=', 2);\n      const lblObj: LabelSettings = {\n        displayName: '',\n        checked: true,\n        values: {},\n        defaultValue: true,\n        singleSelection: false\n      };\n      if (kvpair[1]) {\n        kvpair[1].split(',').forEach(v => {\n          lblObj.values[v] = true;\n        });\n        // When values filters are provided by URL, other filters should be false by default\n        lblObj.defaultValue = false;\n      }\n      settings.labelsSettings.set(kvpair[0], lblObj);\n    });\n  }\n  return settings;\n};\n\nexport const prettyLabelValues = (promName: PromLabel, val: string): string => {\n  if (promName === 'response_flags') {\n    if (val === '-') {\n      return 'None';\n    }\n    const flagObj = responseFlags[val];\n    if (flagObj) {\n      const text = flagObj.short ? flagObj.short : flagObj.help;\n      return `${text} (${val})`;\n    }\n  }\n  return val;\n};\n"]},"metadata":{},"sourceType":"module"}
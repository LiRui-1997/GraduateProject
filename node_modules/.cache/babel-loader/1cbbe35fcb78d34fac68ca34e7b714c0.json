{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Envoy/AccessLogModal.tsx\";\nimport * as React from 'react';\nimport { Button, ButtonVariant, Modal, Split, SplitItem } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { PFColors } from 'components/Pf/PfColors';\nvar fieldStyle = style({\n  color: PFColors.Gold400,\n  display: 'inline-block'\n});\nvar modalStyle = style({\n  height: '70%',\n  width: '50%'\n});\nvar prefaceStyle = style({\n  fontFamily: 'monospace',\n  fontSize: '14px',\n  backgroundColor: PFColors.Black1000,\n  color: PFColors.Gold400,\n  margin: '10px 10px 15px 10px',\n  overflow: 'auto',\n  resize: 'none',\n  padding: '10px',\n  whiteSpace: 'pre',\n  width: 'calc(100% - 15px)'\n});\nvar splitStyle = style({\n  overflow: 'auto',\n  overflowY: 'auto',\n  width: '50%'\n});\n\nvar AccessLogModal = /*#__PURE__*/function (_React$Component) {\n  _inherits(AccessLogModal, _React$Component);\n\n  var _super = _createSuper(AccessLogModal);\n\n  function AccessLogModal(props) {\n    var _this;\n\n    _classCallCheck(this, AccessLogModal);\n\n    _this = _super.call(this, props);\n\n    _this.accessLogContent = function (al) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'left'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      }, _this.accessLogField('authority', al.authority), _this.accessLogField('bytes received', al.bytes_received), _this.accessLogField('bytes sent', al.bytes_sent), _this.accessLogField('downstream local', al.downstream_local), _this.accessLogField('downstream remote', al.downstream_remote), _this.accessLogField('duration', al.duration), _this.accessLogField('forwarded for', al.forwarded_for), _this.accessLogField('method', al.method), _this.accessLogField('protocol', al.protocol), _this.accessLogField('request id', al.request_id), _this.accessLogField('requested server', al.requested_server), _this.accessLogField('response flags', al.response_flags), _this.accessLogField('route name', al.route_name), _this.accessLogField('status code', al.status_code), _this.accessLogField('tcp service time', al.tcp_service_time), _this.accessLogField('timestamp', al.timestamp), _this.accessLogField('upstream cluster', al.upstream_cluster), _this.accessLogField('upstream failure reason', al.upstream_failure_reason), _this.accessLogField('upstream local', al.upstream_local), _this.accessLogField('upstream service', al.upstream_service), _this.accessLogField('upstream service time', al.upstream_service_time), _this.accessLogField('uri param', al.uri_param), _this.accessLogField('uri path', al.uri_path), _this.accessLogField('user agent', al.user_agent));\n    };\n\n    _this.accessLogField = function (key, val) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        key: key,\n        className: fieldStyle,\n        variant: ButtonVariant.link,\n        onClick: function onClick() {\n          return _this.handleClick(key);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, key, \":\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, val ? val : '-'), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.handleClick = function (alFieldName) {\n      _this.setState({\n        description: _this.getDescription(alFieldName)\n      });\n    };\n\n    _this.getDescription = function (alFieldName) {\n      console.log(\"fetch docs(\".concat(alFieldName, \")\"));\n\n      switch (alFieldName) {\n        case 'authority':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }\n          }, \"Authority is the request authority header %REQ(:AUTHORITY)%\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'bytes received':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 13\n            }\n          }, \"%BYTES_RECEIVED%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }\n          }, \"Body bytes received.\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 19\n            }\n          }, \"Downstream bytes received on connection.\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }\n          }, \"Renders a numeric value in typed JSON logs.\")));\n\n        case 'bytes sent':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 13\n            }\n          }, \"%BYTES_SENT%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }\n          }, \"Body bytes sent. For WebSocket connection it will also include response header bytes.\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }\n          }, \"Downstream bytes sent on connection.\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }\n          }, \"Renders a numeric value in typed JSON logs.\")));\n\n        case 'downstream local':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 13\n            }\n          }, \"%DOWNSTREAM_LOCAL_ADDRESS%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }\n          }, \"Local address of the downstream connection. If the address is an IP address it includes both address and port. If the original connection was redirected by iptables REDIRECT, this represents the original destination address restored by the\", /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/listeners/listener_filters/original_dst_filter#config-listener-filters-original-dst\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 19\n            }\n          }, \"Original Destination Filter\")), ' ', \"using SO_ORIGINAL_DST socket option. If the original connection was redirected by iptables TPROXY, and the listener\\u2019s transparent option was set to true, this represents the original destination address and port.\")));\n\n        case 'downstream remote':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 13\n            }\n          }, \"%DOWNSTREAM_REMOTE_ADDRESS%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }\n          }, \"Remote address of the downstream connection. If the address is an IP address it includes both address and port.\"), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"admonition note\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            className: \"admonition-title\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }\n          }, \"Note\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }\n          }, \"This may not be the physical remote address of the peer if the address has been inferred from\", /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/listeners/listener_filters/proxy_protocol#config-listener-filters-proxy-protocol\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }\n          }, \"Proxy Protocol filter\")), ' ', \"or\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/http/http_conn_man/headers#config-http-conn-man-headers-x-forwarded-for\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }\n          }, \"x-forwarded-for\")), \".\"))));\n\n        case 'duration':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 13\n            }\n          }, \"%DURATION%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }\n          }, \"Total duration in milliseconds of the request from the start time to the last byte out.\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }\n          }, \"Total duration in milliseconds of the downstream connection.\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }\n          }, \"Renders a numeric value in typed JSON logs.\")));\n\n        case 'forwarded for':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }\n          }, \"ForwardedFor is the X-Forwarded-For header value %REQ(FORWARDED-FOR)%\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'method':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }\n          }, \"Method is the HTTP method %REQ(:METHOD)%\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'protocol':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 13\n            }\n          }, \"%PROTOCOL%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }\n          }, \"Protocol. Currently either \", /*#__PURE__*/React.createElement(\"em\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 48\n            }\n          }, \"HTTP/1.1\"), \" or \", /*#__PURE__*/React.createElement(\"em\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 69\n            }\n          }, \"HTTP/2\"), \".\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }\n          }, \"In typed JSON logs, PROTOCOL will render the string\", ' ', /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 19\n            }\n          }, \"\\\"-\\\"\")), ' ', \"if the protocol is not available (e.g. in TCP logs).\")));\n\n        case 'request id':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }\n          }, \"RequestId is the envoy generated X-REQUEST-ID header \\\"%REQ(X-REQUEST-ID)%\\\"\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'requested server':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 13\n            }\n          }, \"%REQUESTED_SERVER_NAME%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }\n          }, \"String value set on ssl connection socket for Server Name Indication (SNI)\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 19\n            }\n          }, \"String value set on ssl connection socket for Server Name Indication (SNI)\")))));\n\n        case 'response flags':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 13\n            }\n          }, \"%RESPONSE_FLAGS%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }\n          }, \"Additional details about the response or connection, if any. For TCP connections, the response codes mentioned in the descriptions do not apply. Possible values are:\"), /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 17\n            }\n          }, \"HTTP and TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"ul\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 25\n            }\n          }, \"UH\"), \": No healthy upstream hosts in upstream cluster in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 25\n            }\n          }, \"UF\"), \": Upstream connection failure in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 25\n            }\n          }, \"UO\"), \": Upstream overflow (\", /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking#arch-overview-circuit-break\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 27\n            }\n          }, \"circuit breaking\")), \") in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 25\n            }\n          }, \"NR\"), \": No\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 27\n            }\n          }, \"route configured\")), ' ', \"for a given request in addition to 404 response code, or no matching filter chain for a downstream connection.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 25\n            }\n          }, \"URX\"), \": The request was rejected because the\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-retrypolicy-num-retries\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 27\n            }\n          }, \"upstream retry limit (HTTP)\")), ' ', \"or\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/api-v3/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#envoy-v3-api-field-extensions-filters-network-tcp-proxy-v3-tcpproxy-max-connect-attempts\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 27\n            }\n          }, \"maximum connect attempts (TCP)\")), ' ', \"was reached.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 25\n            }\n          }, \"NC\"), \": Upstream cluster not found.\")))), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }\n          }, \"HTTP only\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"ul\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 25\n            }\n          }, \"DC\"), \": Downstream connection termination.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 25\n            }\n          }, \"LH\"), \": Local service failed\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/intro/arch_overview/upstream/health_checking#arch-overview-health-checking\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 27\n            }\n          }, \"health check request\")), ' ', \"in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 25\n            }\n          }, \"UT\"), \": Upstream request timeout in addition to 504 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 25\n            }\n          }, \"LR\"), \": Connection local reset in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 25\n            }\n          }, \"UR\"), \": Upstream remote reset in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 25\n            }\n          }, \"UC\"), \": Upstream connection termination in addition to 503 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 25\n            }\n          }, \"DI\"), \": The request processing was delayed for a period specified via\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/http/http_filters/fault_filter#config-http-filters-fault-injection\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 27\n            }\n          }, \"fault injection\")), \".\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 25\n            }\n          }, \"FI\"), \": The request was aborted with a response code specified via\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/http/http_filters/fault_filter#config-http-filters-fault-injection\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 27\n            }\n          }, \"fault injection\")), \".\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 25\n            }\n          }, \"RL\"), \": The request was ratelimited locally by the\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/configuration/http/http_filters/rate_limit_filter#config-http-filters-rate-limit\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 27\n            }\n          }, \"HTTP rate limit filter\")), ' ', \"in addition to 429 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 25\n            }\n          }, \"UAEX\"), \": The request was denied by the external authorization service.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 25\n            }\n          }, \"RLSE\"), \": The request was rejected because there was an error in rate limit service.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 25\n            }\n          }, \"IH\"), \": The request was rejected because it set an invalid value for a\", /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/api-v3/extensions/filters/http/router/v3/router.proto#envoy-v3-api-field-extensions-filters-http-router-v3-router-strict-check-headers\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 27\n            }\n          }, \"strictly-checked header\")), ' ', \"in addition to 400 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 25\n            }\n          }, \"SI\"), \": Stream idle timeout in addition to 408 response code.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 25\n            }\n          }, \"DPE\"), \": The downstream request had an HTTP protocol error.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 25\n            }\n          }, \"UPE\"), \": The upstream response had an HTTP protocol error.\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"strong\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 25\n            }\n          }, \"UMSDR\"), \": The upstream request reached to max stream duration.\")))))));\n\n        case 'route name':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 13\n            }\n          }, \"%ROUTE_NAME%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 15\n            }\n          }, \"RouteName is the name of the VirtualService route which matched this request %ROUTE_NAME%\")));\n\n        case 'status code':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 13\n            }\n          }, \"%RESPONSE_CODE%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 19\n            }\n          }, \"HTTP response code. Note that a response code of \\u20180\\u2019 means that the server never sent the beginning of a response. This generally means that the (downstream) client disconnected.\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 19\n            }\n          }, \"Note that in the case of 100-continue responses, only the response code of the final headers will be logged. If a 100-continue is followed by a 200, the logged response will be 200. If a 100-continue results in a disconnect, the 100 will be logged.\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 15\n            }\n          }, \"Renders a numeric value in typed JSON logs.\")));\n\n        case 'tcp service time':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 19\n            }\n          }, \"TCPServiceTime is the X-ENVOY-UPSTREAM-SERVICE-TIME header \\\"%REQ(X-ENVOY-UPSTREAM-SERVICE-TIME)%\\\"\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'timestamp':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 13\n            }\n          }, \"%START_TIME%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 19\n            }\n          }, \"Request start time including milliseconds.\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 19\n            }\n          }, \"Downstream connection start time including milliseconds.\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 15\n            }\n          }, \"START_TIME can be customized using a\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference external\",\n            href: \"https://en.cppreference.com/w/cpp/io/manip/put_time\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 17\n            }\n          }, \"format string\"), \". In addition to that, START_TIME also accepts following specifiers:\"), /*#__PURE__*/React.createElement(\"table\", {\n            className: \"docutils align-default\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"colgroup\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"col\", {\n            style: {\n              width: '28%'\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 19\n            }\n          }), /*#__PURE__*/React.createElement(\"col\", {\n            style: {\n              width: '72%'\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 19\n            }\n          })), /*#__PURE__*/React.createElement(\"thead\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            className: \"row-odd\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            className: \"head\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 23\n            }\n          }, \"Specifier\")), /*#__PURE__*/React.createElement(\"th\", {\n            className: \"head\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 23\n            }\n          }, \"Explanation\")))), /*#__PURE__*/React.createElement(\"tbody\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            className: \"row-even\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 27\n            }\n          }, \"%s\")))), /*#__PURE__*/React.createElement(\"td\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 23\n            }\n          }, \"The number of seconds since the Epoch\"))), /*#__PURE__*/React.createElement(\"tr\", {\n            className: \"row-odd\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            rowSpan: 2,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 27\n            }\n          }, \"%f\")), \",\", ' ', /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 27\n            }\n          }, \"%[1-9]f\")))), /*#__PURE__*/React.createElement(\"td\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 23\n            }\n          }, \"Fractional seconds digits, default is 9 digits (nanosecond)\"))), /*#__PURE__*/React.createElement(\"tr\", {\n            className: \"row-even\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"ul\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 31\n            }\n          }, \"%3f\")), ' ', \"millisecond (3 digits)\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 31\n            }\n          }, \"%6f\")), ' ', \"microsecond (6 digits)\")), /*#__PURE__*/React.createElement(\"li\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 27\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            className: \"docutils literal notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"pre\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 31\n            }\n          }, \"%9f\")), ' ', \"nanosecond (9 digits)\"))))))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 15\n            }\n          }, \"Examples of formatting START_TIME is as follows:\"), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"highlight-none notranslate\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"highlight\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"pre\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 21\n            }\n          }), \"%START_TIME(%Y/%m/%dT%H:%M:%S%z %s)% # To include millisecond fraction of the second (.000 ... .999). E.g. 1527590590.528. %START_TIME(%s.%3f)% %START_TIME(%s.%6f)% %START_TIME(%s.%9f)%\"))), /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 15\n            }\n          }, \"In typed JSON logs, START_TIME is always rendered as a string.\")));\n\n        case 'upstream cluster':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 13\n            }\n          }, \"%UPSTREAM_CLUSTER%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 15\n            }\n          }, \"Upstream cluster to which the upstream host belongs to. If runtime feature\", /*#__PURE__*/React.createElement(\"cite\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 17\n            }\n          }, \"envoy.reloadable_features.use_observable_cluster_name\"), \" is enabled, then\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-alt-stat-name\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 19\n            }\n          }, \"alt_stat_name\")), ' ', \"will be used if provided.\")));\n\n        case 'upstream failure reason':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 13\n            }\n          }, \"%UPSTREAM_TRANSPORT_FAILURE_REASON%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 19\n            }\n          }, \"If upstream connection failed due to transport socket (e.g. TLS handshake), provides the failure reason from the transport socket. The format of this field depends on the configured upstream transport socket. Common TLS failures are in\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference internal\",\n            href: \"/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl-trouble-shooting\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"std std-ref\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 23\n            }\n          }, \"TLS trouble shooting\")), \".\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C)\")))));\n\n        case 'upstream local':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 13\n            }\n          }, \"%UPSTREAM_LOCAL_ADDRESS%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 15\n            }\n          }, \"Local address of the upstream connection. If the address is an IP address it includes both address and port.\")));\n\n        case 'upstream service':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 13\n            }\n          }, \"%UPSTREAM_HOST%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 794,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 15\n            }\n          }, \"Upstream host URL (e.g.,\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n            className: \"reference external\",\n            href: \"tcp://ip:port\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 17\n            }\n          }, \"tcp://ip:port\"), ' ', \"for TCP connections).\")));\n\n        case 'uri path':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 19\n            }\n          }, \"An HTTP request header: \\\"%REQ(X-ENVOY-ORIGINAL-PATH?):PATH\\\"\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 815,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        case 'user agent':\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 13\n            }\n          }, \"%REQ(X?Y):Z%\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"dl\", {\n            className: \"simple\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 17\n            }\n          }, \"HTTP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 19\n            }\n          }, \"An HTTP request header: \\\"%REQ(USER-AGENT)\")), /*#__PURE__*/React.createElement(\"dt\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 833,\n              columnNumber: 17\n            }\n          }, \"TCP\"), /*#__PURE__*/React.createElement(\"dd\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 19\n            }\n          }, \"Not implemented (\\u201C-\\u201C).\")))));\n\n        default:\n          return /*#__PURE__*/React.createElement(React.Fragment, null, \"No documentation available\");\n      }\n    };\n\n    _this.state = {\n      description: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          textAlign: 'center'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"dt\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \"Click Field Name for Description\"))\n    };\n    return _this;\n  }\n\n  _createClass(AccessLogModal, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Modal, {\n        className: modalStyle,\n        style: {\n          overflow: 'auto',\n          overflowY: 'hidden'\n        },\n        disableFocusTrap: true,\n        title: \"Envoy Access Log Entry\",\n        isOpen: true,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: prefaceStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, this.props.accessLogMessage, \" \"), /*#__PURE__*/React.createElement(Split, {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SplitItem, {\n        className: splitStyle,\n        style: {\n          overflow: 'auto',\n          marginRight: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, this.accessLogContent(this.props.accessLog)), /*#__PURE__*/React.createElement(SplitItem, {\n        className: splitStyle,\n        style: {\n          overflow: 'auto',\n          backgroundColor: PFColors.Black150\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, this.state.description))));\n    }\n  }]);\n\n  return AccessLogModal;\n}(React.Component);\n\nexport { AccessLogModal as default };","map":{"version":3,"sources":["/root/kiali-ui/src/components/Envoy/AccessLogModal.tsx"],"names":["React","Button","ButtonVariant","Modal","Split","SplitItem","style","PFColors","fieldStyle","color","Gold400","display","modalStyle","height","width","prefaceStyle","fontFamily","fontSize","backgroundColor","Black1000","margin","overflow","resize","padding","whiteSpace","splitStyle","overflowY","AccessLogModal","props","accessLogContent","al","textAlign","accessLogField","authority","bytes_received","bytes_sent","downstream_local","downstream_remote","duration","forwarded_for","method","protocol","request_id","requested_server","response_flags","route_name","status_code","tcp_service_time","timestamp","upstream_cluster","upstream_failure_reason","upstream_local","upstream_service","upstream_service_time","uri_param","uri_path","user_agent","key","val","link","handleClick","alFieldName","setState","description","getDescription","console","log","state","onClose","accessLogMessage","marginRight","accessLog","Black150","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, ButtonVariant, Modal, Split, SplitItem } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { AccessLog } from 'types/IstioObjects';\nimport { PFColors } from 'components/Pf/PfColors';\n\nexport interface AccessLogModalProps {\n  accessLog: AccessLog;\n  accessLogMessage: string;\n  className?: string;\n  onClose?: () => void;\n}\n\nconst fieldStyle = style({\n  color: PFColors.Gold400,\n  display: 'inline-block'\n});\n\nconst modalStyle = style({\n  height: '70%',\n  width: '50%'\n});\n\nconst prefaceStyle = style({\n  fontFamily: 'monospace',\n  fontSize: '14px',\n  backgroundColor: PFColors.Black1000,\n  color: PFColors.Gold400,\n  margin: '10px 10px 15px 10px',\n  overflow: 'auto',\n  resize: 'none',\n  padding: '10px',\n  whiteSpace: 'pre',\n  width: 'calc(100% - 15px)'\n});\n\nconst splitStyle = style({\n  overflow: 'auto',\n  overflowY: 'auto',\n  width: '50%'\n});\n\ntype AccessLogModalState = {\n  description: React.ReactFragment;\n};\n\nexport default class AccessLogModal extends React.Component<AccessLogModalProps, AccessLogModalState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      description: (\n        <div style={{ width: '100%', textAlign: 'center' }}>\n          <dt>Click Field Name for Description</dt>\n        </div>\n      )\n    };\n  }\n\n  render() {\n    return (\n      <Modal\n        className={modalStyle}\n        style={{ overflow: 'auto', overflowY: 'hidden' }}\n        disableFocusTrap={true}\n        title=\"Envoy Access Log Entry\"\n        isOpen={true}\n        onClose={this.props.onClose}\n      >\n        <div style={{ height: '100%' }}>\n          <div className={prefaceStyle}>{this.props.accessLogMessage} </div>\n          <Split style={{ height: '100%' }}>\n            <SplitItem className={splitStyle} style={{ overflow: 'auto', marginRight: '10px' }}>\n              {this.accessLogContent(this.props.accessLog)}\n            </SplitItem>\n            <SplitItem className={splitStyle} style={{ overflow: 'auto', backgroundColor: PFColors.Black150 }}>\n              {this.state.description}\n            </SplitItem>\n          </Split>\n        </div>\n      </Modal>\n    );\n  }\n\n  private accessLogContent = (al: AccessLog): any => {\n    return (\n      <div style={{ textAlign: 'left' }}>\n        {this.accessLogField('authority', al.authority)}\n        {this.accessLogField('bytes received', al.bytes_received)}\n        {this.accessLogField('bytes sent', al.bytes_sent)}\n        {this.accessLogField('downstream local', al.downstream_local)}\n        {this.accessLogField('downstream remote', al.downstream_remote)}\n        {this.accessLogField('duration', al.duration)}\n        {this.accessLogField('forwarded for', al.forwarded_for)}\n        {this.accessLogField('method', al.method)}\n        {this.accessLogField('protocol', al.protocol)}\n        {this.accessLogField('request id', al.request_id)}\n        {this.accessLogField('requested server', al.requested_server)}\n        {this.accessLogField('response flags', al.response_flags)}\n        {this.accessLogField('route name', al.route_name)}\n        {this.accessLogField('status code', al.status_code)}\n        {this.accessLogField('tcp service time', al.tcp_service_time)}\n        {this.accessLogField('timestamp', al.timestamp)}\n        {this.accessLogField('upstream cluster', al.upstream_cluster)}\n        {this.accessLogField('upstream failure reason', al.upstream_failure_reason)}\n        {this.accessLogField('upstream local', al.upstream_local)}\n        {this.accessLogField('upstream service', al.upstream_service)}\n        {this.accessLogField('upstream service time', al.upstream_service_time)}\n        {this.accessLogField('uri param', al.uri_param)}\n        {this.accessLogField('uri path', al.uri_path)}\n        {this.accessLogField('user agent', al.user_agent)}\n      </div>\n    );\n  };\n\n  private accessLogField = (key: string, val: string): any => {\n    return (\n      <>\n        <Button key={key} className={fieldStyle} variant={ButtonVariant.link} onClick={() => this.handleClick(key)}>\n          {key}:&nbsp;\n        </Button>\n        <span>{val ? val : '-'}</span>\n        <br />\n      </>\n    );\n  };\n\n  private handleClick = (alFieldName: string) => {\n    this.setState({ description: this.getDescription(alFieldName) });\n  };\n\n  private getDescription = (alFieldName: string): React.ReactFragment => {\n    console.log(`fetch docs(${alFieldName})`);\n    switch (alFieldName) {\n      case 'authority':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Authority is the request authority header %REQ(:AUTHORITY)%</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'bytes received':\n        return (\n          <>\n            <dt>%BYTES_RECEIVED%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Body bytes received.</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Downstream bytes received on connection.</p>\n                </dd>\n              </dl>\n              <p>Renders a numeric value in typed JSON logs.</p>\n            </dd>\n          </>\n        );\n      case 'bytes sent':\n        return (\n          <>\n            <dt>%BYTES_SENT%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Body bytes sent. For WebSocket connection it will also include response header bytes.</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Downstream bytes sent on connection.</p>\n                </dd>\n              </dl>\n              <p>Renders a numeric value in typed JSON logs.</p>\n            </dd>\n          </>\n        );\n      case 'downstream local':\n        return (\n          <>\n            <dt>%DOWNSTREAM_LOCAL_ADDRESS%</dt>\n            <dd>\n              <p>\n                Local address of the downstream connection. If the address is an IP address it includes both address and\n                port. If the original connection was redirected by iptables REDIRECT, this represents the original\n                destination address restored by the\n                <a\n                  className=\"reference internal\"\n                  href=\"/docs/envoy/latest/configuration/listeners/listener_filters/original_dst_filter#config-listener-filters-original-dst\"\n                >\n                  <span className=\"std std-ref\">Original Destination Filter</span>\n                </a>{' '}\n                using SO_ORIGINAL_DST socket option. If the original connection was redirected by iptables TPROXY, and\n                the listener’s transparent option was set to true, this represents the original destination address and\n                port.\n              </p>\n            </dd>\n          </>\n        );\n      case 'downstream remote':\n        return (\n          <>\n            <dt>%DOWNSTREAM_REMOTE_ADDRESS%</dt>\n            <dd>\n              <p>\n                Remote address of the downstream connection. If the address is an IP address it includes both address\n                and port.\n              </p>\n              <div className=\"admonition note\">\n                <p className=\"admonition-title\">Note</p>\n                <p>\n                  This may not be the physical remote address of the peer if the address has been inferred from\n                  <a\n                    className=\"reference internal\"\n                    href=\"/docs/envoy/latest/configuration/listeners/listener_filters/proxy_protocol#config-listener-filters-proxy-protocol\"\n                  >\n                    <span className=\"std std-ref\">Proxy Protocol filter</span>\n                  </a>{' '}\n                  or{' '}\n                  <a\n                    className=\"reference internal\"\n                    href=\"/docs/envoy/latest/configuration/http/http_conn_man/headers#config-http-conn-man-headers-x-forwarded-for\"\n                  >\n                    <span className=\"std std-ref\">x-forwarded-for</span>\n                  </a>\n                  .\n                </p>\n              </div>\n            </dd>\n          </>\n        );\n      case 'duration':\n        return (\n          <>\n            <dt>%DURATION%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Total duration in milliseconds of the request from the start time to the last byte out.</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Total duration in milliseconds of the downstream connection.</p>\n                </dd>\n              </dl>\n              <p>Renders a numeric value in typed JSON logs.</p>\n            </dd>\n          </>\n        );\n      case 'forwarded for':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>ForwardedFor is the X-Forwarded-For header value %REQ(FORWARDED-FOR)%</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'method':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Method is the HTTP method %REQ(:METHOD)%</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'protocol':\n        return (\n          <>\n            <dt>%PROTOCOL%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>\n                    Protocol. Currently either <em>HTTP/1.1</em> or <em>HTTP/2</em>.\n                  </p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n              <p>\n                In typed JSON logs, PROTOCOL will render the string{' '}\n                <code className=\"docutils literal notranslate\">\n                  <span className=\"pre\">&quot;-&quot;</span>\n                </code>{' '}\n                if the protocol is not available (e.g. in TCP logs).\n              </p>\n            </dd>\n          </>\n        );\n      case 'request id':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>RequestId is the envoy generated X-REQUEST-ID header \"%REQ(X-REQUEST-ID)%\"</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'requested server':\n        return (\n          <>\n            <dt>%REQUESTED_SERVER_NAME%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>String value set on ssl connection socket for Server Name Indication (SNI)</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>String value set on ssl connection socket for Server Name Indication (SNI)</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'response flags':\n        return (\n          <>\n            <dt>%RESPONSE_FLAGS%</dt>\n            <dd>\n              <p>\n                Additional details about the response or connection, if any. For TCP connections, the response codes\n                mentioned in the descriptions do not apply. Possible values are:\n              </p>\n              <dl className=\"simple\">\n                <dt>HTTP and TCP</dt>\n                <dd>\n                  <ul className=\"simple\">\n                    <li>\n                      <p>\n                        <strong>UH</strong>: No healthy upstream hosts in upstream cluster in addition to 503 response\n                        code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UF</strong>: Upstream connection failure in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UO</strong>: Upstream overflow (\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking#arch-overview-circuit-break\"\n                        >\n                          <span className=\"std std-ref\">circuit breaking</span>\n                        </a>\n                        ) in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>NR</strong>: No{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing\"\n                        >\n                          <span className=\"std std-ref\">route configured</span>\n                        </a>{' '}\n                        for a given request in addition to 404 response code, or no matching filter chain for a\n                        downstream connection.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>URX</strong>: The request was rejected because the{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-retrypolicy-num-retries\"\n                        >\n                          <span className=\"std std-ref\">upstream retry limit (HTTP)</span>\n                        </a>{' '}\n                        or{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/api-v3/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#envoy-v3-api-field-extensions-filters-network-tcp-proxy-v3-tcpproxy-max-connect-attempts\"\n                        >\n                          <span className=\"std std-ref\">maximum connect attempts (TCP)</span>\n                        </a>{' '}\n                        was reached.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>NC</strong>: Upstream cluster not found.\n                      </p>\n                    </li>\n                  </ul>\n                </dd>\n                <dt>HTTP only</dt>\n                <dd>\n                  <ul className=\"simple\">\n                    <li>\n                      <p>\n                        <strong>DC</strong>: Downstream connection termination.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>LH</strong>: Local service failed{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/intro/arch_overview/upstream/health_checking#arch-overview-health-checking\"\n                        >\n                          <span className=\"std std-ref\">health check request</span>\n                        </a>{' '}\n                        in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UT</strong>: Upstream request timeout in addition to 504 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>LR</strong>: Connection local reset in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UR</strong>: Upstream remote reset in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UC</strong>: Upstream connection termination in addition to 503 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>DI</strong>: The request processing was delayed for a period specified via{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/configuration/http/http_filters/fault_filter#config-http-filters-fault-injection\"\n                        >\n                          <span className=\"std std-ref\">fault injection</span>\n                        </a>\n                        .\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>FI</strong>: The request was aborted with a response code specified via{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/configuration/http/http_filters/fault_filter#config-http-filters-fault-injection\"\n                        >\n                          <span className=\"std std-ref\">fault injection</span>\n                        </a>\n                        .\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>RL</strong>: The request was ratelimited locally by the{' '}\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/configuration/http/http_filters/rate_limit_filter#config-http-filters-rate-limit\"\n                        >\n                          <span className=\"std std-ref\">HTTP rate limit filter</span>\n                        </a>{' '}\n                        in addition to 429 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UAEX</strong>: The request was denied by the external authorization service.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>RLSE</strong>: The request was rejected because there was an error in rate limit\n                        service.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>IH</strong>: The request was rejected because it set an invalid value for a\n                        <a\n                          className=\"reference internal\"\n                          href=\"/docs/envoy/latest/api-v3/extensions/filters/http/router/v3/router.proto#envoy-v3-api-field-extensions-filters-http-router-v3-router-strict-check-headers\"\n                        >\n                          <span className=\"std std-ref\">strictly-checked header</span>\n                        </a>{' '}\n                        in addition to 400 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>SI</strong>: Stream idle timeout in addition to 408 response code.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>DPE</strong>: The downstream request had an HTTP protocol error.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UPE</strong>: The upstream response had an HTTP protocol error.\n                      </p>\n                    </li>\n                    <li>\n                      <p>\n                        <strong>UMSDR</strong>: The upstream request reached to max stream duration.\n                      </p>\n                    </li>\n                  </ul>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'route name':\n        return (\n          <>\n            <dt>%ROUTE_NAME%</dt>\n            <dd>\n              <p>RouteName is the name of the VirtualService route which matched this request %ROUTE_NAME%</p>\n            </dd>\n          </>\n        );\n      case 'status code':\n        return (\n          <>\n            <dt>%RESPONSE_CODE%</dt>\n            <dd>\n              <dl>\n                <dt>HTTP</dt>\n                <dd>\n                  <p>\n                    HTTP response code. Note that a response code of ‘0’ means that the server never sent the beginning\n                    of a response. This generally means that the (downstream) client disconnected.\n                  </p>\n                  <p>\n                    Note that in the case of 100-continue responses, only the response code of the final headers will be\n                    logged. If a 100-continue is followed by a 200, the logged response will be 200. If a 100-continue\n                    results in a disconnect, the 100 will be logged.\n                  </p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n              <p>Renders a numeric value in typed JSON logs.</p>\n            </dd>\n          </>\n        );\n      case 'tcp service time':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>\n                    TCPServiceTime is the X-ENVOY-UPSTREAM-SERVICE-TIME header \"%REQ(X-ENVOY-UPSTREAM-SERVICE-TIME)%\"\n                  </p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'timestamp':\n        return (\n          <>\n            <dt>%START_TIME%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>Request start time including milliseconds.</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Downstream connection start time including milliseconds.</p>\n                </dd>\n              </dl>\n              <p>\n                START_TIME can be customized using a{' '}\n                <a className=\"reference external\" href=\"https://en.cppreference.com/w/cpp/io/manip/put_time\">\n                  format string\n                </a>\n                . In addition to that, START_TIME also accepts following specifiers:\n              </p>\n              <table className=\"docutils align-default\">\n                <colgroup>\n                  <col style={{ width: '28%' }} />\n                  <col style={{ width: '72%' }} />\n                </colgroup>\n                <thead>\n                  <tr className=\"row-odd\">\n                    <th className=\"head\">\n                      <p>Specifier</p>\n                    </th>\n                    <th className=\"head\">\n                      <p>Explanation</p>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr className=\"row-even\">\n                    <td>\n                      <p>\n                        <code className=\"docutils literal notranslate\">\n                          <span className=\"pre\">%s</span>\n                        </code>\n                      </p>\n                    </td>\n                    <td>\n                      <p>The number of seconds since the Epoch</p>\n                    </td>\n                  </tr>\n                  <tr className=\"row-odd\">\n                    <td rowSpan={2}>\n                      <p>\n                        <code className=\"docutils literal notranslate\">\n                          <span className=\"pre\">%f</span>\n                        </code>\n                        ,{' '}\n                        <code className=\"docutils literal notranslate\">\n                          <span className=\"pre\">%[1-9]f</span>\n                        </code>\n                      </p>\n                    </td>\n                    <td>\n                      <p>Fractional seconds digits, default is 9 digits (nanosecond)</p>\n                    </td>\n                  </tr>\n                  <tr className=\"row-even\">\n                    <td>\n                      <ul className=\"simple\">\n                        <li>\n                          <p>\n                            <code className=\"docutils literal notranslate\">\n                              <span className=\"pre\">%3f</span>\n                            </code>{' '}\n                            millisecond (3 digits)\n                          </p>\n                        </li>\n                        <li>\n                          <p>\n                            <code className=\"docutils literal notranslate\">\n                              <span className=\"pre\">%6f</span>\n                            </code>{' '}\n                            microsecond (6 digits)\n                          </p>\n                        </li>\n                        <li>\n                          <p>\n                            <code className=\"docutils literal notranslate\">\n                              <span className=\"pre\">%9f</span>\n                            </code>{' '}\n                            nanosecond (9 digits)\n                          </p>\n                        </li>\n                      </ul>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <p>Examples of formatting START_TIME is as follows:</p>\n              <div className=\"highlight-none notranslate\">\n                <div className=\"highlight\">\n                  <pre>\n                    <span></span>%START_TIME(%Y/%m/%dT%H:%M:%S%z %s)% # To include millisecond fraction of the second\n                    (.000 ... .999). E.g. 1527590590.528. %START_TIME(%s.%3f)% %START_TIME(%s.%6f)% %START_TIME(%s.%9f)%\n                  </pre>\n                </div>\n              </div>\n              <p>In typed JSON logs, START_TIME is always rendered as a string.</p>\n            </dd>\n          </>\n        );\n      case 'upstream cluster':\n        return (\n          <>\n            <dt>%UPSTREAM_CLUSTER%</dt>\n            <dd>\n              <p>\n                Upstream cluster to which the upstream host belongs to. If runtime feature\n                <cite>envoy.reloadable_features.use_observable_cluster_name</cite> is enabled, then{' '}\n                <a\n                  className=\"reference internal\"\n                  href=\"/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-alt-stat-name\"\n                >\n                  <span className=\"std std-ref\">alt_stat_name</span>\n                </a>{' '}\n                will be used if provided.\n              </p>\n            </dd>\n          </>\n        );\n      case 'upstream failure reason':\n        return (\n          <>\n            <dt>%UPSTREAM_TRANSPORT_FAILURE_REASON%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>\n                    If upstream connection failed due to transport socket (e.g. TLS handshake), provides the failure\n                    reason from the transport socket. The format of this field depends on the configured upstream\n                    transport socket. Common TLS failures are in{' '}\n                    <a\n                      className=\"reference internal\"\n                      href=\"/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl-trouble-shooting\"\n                    >\n                      <span className=\"std std-ref\">TLS trouble shooting</span>\n                    </a>\n                    .\n                  </p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“)</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'upstream local':\n        return (\n          <>\n            <dt>%UPSTREAM_LOCAL_ADDRESS%</dt>\n            <dd>\n              <p>\n                Local address of the upstream connection. If the address is an IP address it includes both address and\n                port.\n              </p>\n            </dd>\n          </>\n        );\n      case 'upstream service':\n        return (\n          <>\n            <dt>%UPSTREAM_HOST%</dt>\n            <dd>\n              <p>\n                Upstream host URL (e.g.,{' '}\n                <a className=\"reference external\" href=\"tcp://ip:port\">\n                  tcp://ip:port\n                </a>{' '}\n                for TCP connections).\n              </p>\n            </dd>\n          </>\n        );\n      case 'uri path':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>An HTTP request header: \"%REQ(X-ENVOY-ORIGINAL-PATH?):PATH\"</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      case 'user agent':\n        return (\n          <>\n            <dt>%REQ(X?Y):Z%</dt>\n            <dd>\n              <dl className=\"simple\">\n                <dt>HTTP</dt>\n                <dd>\n                  <p>An HTTP request header: \"%REQ(USER-AGENT)</p>\n                </dd>\n                <dt>TCP</dt>\n                <dd>\n                  <p>Not implemented (“-“).</p>\n                </dd>\n              </dl>\n            </dd>\n          </>\n        );\n      default:\n        return <>No documentation available</>;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
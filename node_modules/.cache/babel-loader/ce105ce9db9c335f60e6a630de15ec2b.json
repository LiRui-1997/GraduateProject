{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/CytoscapeGraph/CytoscapeReactWrapper.tsx\";\nimport * as React from 'react';\nimport { GraphStyles } from './graphs/GraphStyles';\nimport canvas from 'cytoscape-canvas';\nimport cytoscape from 'cytoscape';\nimport cycola from 'cytoscape-cola';\nimport dagre from 'cytoscape-dagre';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport BoxLayout from './Layout/BoxLayout';\nimport popper from 'cytoscape-popper';\n\nvar nodeHtmlLabel = require('cy-node-html-label');\n\ncytoscape.use(canvas);\ncytoscape.use(cycola);\ncytoscape.use(dagre);\ncytoscape.use(coseBilkent);\ncytoscape.use(popper);\ncytoscape('layout', 'box-layout', BoxLayout);\nnodeHtmlLabel(cytoscape);\nvar styleContainer = {\n  height: '100%'\n};\n/**\n * The purpose of this wrapper is very simple and minimal - to provide a long-lived <div> element that can be used\n * as the parent container for the cy graph (cy.container). Because cy does not provide the ability to re-parent an\n * existing graph (e.g. there is no API such as \"cy.setContainer(div)\"), the only way to be able to re-use a\n * graph (without re-creating and re-rendering it all the time) is to have it inside a wrapper like this one\n * that does not update/re-render itself, thus keeping the original <div> intact.\n *\n * Other than creating and initializing the cy graph, this component should do nothing else. Parent components\n * should get a ref to this component can call getCy() in order to perform additional processing on the graph.\n * It is the job of the parent component to manipulate and update the cy graph during runtime.\n *\n * NOTE: The context menu stuff is defined in the CytoscapeReactWrapper because that is\n * where the cytoscape plugins are defined. And the context menu functions are defined in\n * here because they are not normal Cytoscape defined functions like those found in CytoscapeGraph.\n */\n\nexport var CytoscapeReactWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(CytoscapeReactWrapper, _React$Component);\n\n  var _super = _createSuper(CytoscapeReactWrapper);\n\n  function CytoscapeReactWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, CytoscapeReactWrapper);\n\n    _this = _super.call(this, props);\n    _this.cy = void 0;\n    _this.divParentRef = void 0;\n    _this.divParentRef = React.createRef();\n    return _this;\n  } // For other components to be able to manipulate the cy graph.\n\n\n  _createClass(CytoscapeReactWrapper, [{\n    key: \"getCy\",\n    value: function getCy() {\n      return this.cy;\n    } // This is VERY important - this must always return false to ensure the div is never destroyed.\n    // If the div is destroyed, the cached cy becomes useless.\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_nextProps, _nextState) {\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.build();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"cy\",\n        className: \"graph\",\n        style: styleContainer,\n        ref: this.divParentRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (this.cy) {\n        this.destroy();\n      }\n\n      var opts = _objectSpread({\n        container: this.divParentRef.current,\n        boxSelectionEnabled: false,\n        style: GraphStyles.styles()\n      }, GraphStyles.options());\n\n      this.cy = cytoscape(opts); // Using an extension\n\n      this.cy.nodeHtmlLabel(GraphStyles.htmlNodeLabels(this.cy));\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.cy) {\n        this.cy.destroy();\n        this.cy = undefined;\n      }\n    }\n  }]);\n\n  return CytoscapeReactWrapper;\n}(React.Component);","map":{"version":3,"sources":["/root/kiali-ui/src/components/CytoscapeGraph/CytoscapeReactWrapper.tsx"],"names":["React","GraphStyles","canvas","cytoscape","cycola","dagre","coseBilkent","BoxLayout","popper","nodeHtmlLabel","require","use","styleContainer","height","CytoscapeReactWrapper","props","cy","divParentRef","createRef","_nextProps","_nextState","build","destroy","opts","container","current","boxSelectionEnabled","style","styles","options","htmlNodeLabels","undefined","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AACA,IAAMC,aAAa,GAAGC,OAAO,CAAC,oBAAD,CAA7B;;AAEAP,SAAS,CAACQ,GAAV,CAAcT,MAAd;AACAC,SAAS,CAACQ,GAAV,CAAcP,MAAd;AACAD,SAAS,CAACQ,GAAV,CAAcN,KAAd;AACAF,SAAS,CAACQ,GAAV,CAAcL,WAAd;AACAH,SAAS,CAACQ,GAAV,CAAcH,MAAd;AACAL,SAAS,CAAC,QAAD,EAAW,YAAX,EAAyBI,SAAzB,CAAT;AACAE,aAAa,CAACN,SAAD,CAAb;AAMA,IAAMS,cAAmC,GAAG;AAC1CC,EAAAA,MAAM,EAAE;AADkC,CAA5C;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaC,qBAAb;AAAA;;AAAA;;AAIE,iCAAYC,KAAZ,EAA+C;AAAA;;AAAA;;AAC7C,8BAAMA,KAAN;AAD6C,UAH/CC,EAG+C;AAAA,UAF/CC,YAE+C;AAE7C,UAAKA,YAAL,GAAoBjB,KAAK,CAACkB,SAAN,EAApB;AAF6C;AAG9C,GAPH,CASE;;;AATF;AAAA;AAAA,WAUE,iBAAQ;AACN,aAAO,KAAKF,EAAZ;AACD,KAZH,CAcE;AACA;;AAfF;AAAA;AAAA,WAgBE,+BAAsBG,UAAtB,EAA8DC,UAA9D,EAAsG;AACpG,aAAO,KAAP;AACD;AAlBH;AAAA;AAAA,WAoBE,6BAAoB;AAClB,WAAKC,KAAL;AACD;AAtBH;AAAA;AAAA,WAwBE,gCAAuB;AACrB,WAAKC,OAAL;AACD;AA1BH;AAAA;AAAA,WA4BE,kBAAS;AACP,0BAAO;AAAK,QAAA,EAAE,EAAC,IAAR;AAAa,QAAA,SAAS,EAAC,OAAvB;AAA+B,QAAA,KAAK,EAAEV,cAAtC;AAAsD,QAAA,GAAG,EAAE,KAAKK,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AA9BH;AAAA;AAAA,WAgCE,iBAAQ;AACN,UAAI,KAAKD,EAAT,EAAa;AACX,aAAKM,OAAL;AACD;;AACD,UAAMC,IAAI;AACRC,QAAAA,SAAS,EAAE,KAAKP,YAAL,CAAkBQ,OADrB;AAERC,QAAAA,mBAAmB,EAAE,KAFb;AAGRC,QAAAA,KAAK,EAAE1B,WAAW,CAAC2B,MAAZ;AAHC,SAIL3B,WAAW,CAAC4B,OAAZ,EAJK,CAAV;;AAOA,WAAKb,EAAL,GAAUb,SAAS,CAACoB,IAAD,CAAnB,CAXM,CAYN;;AACC,WAAKP,EAAN,CAAiBP,aAAjB,CAA+BR,WAAW,CAAC6B,cAAZ,CAA2B,KAAKd,EAAhC,CAA/B;AACD;AA9CH;AAAA;AAAA,WAgDE,mBAAU;AACR,UAAI,KAAKA,EAAT,EAAa;AACX,aAAKA,EAAL,CAAQM,OAAR;AACA,aAAKN,EAAL,GAAUe,SAAV;AACD;AACF;AArDH;;AAAA;AAAA,EAA2C/B,KAAK,CAACgC,SAAjD","sourcesContent":["import * as React from 'react';\nimport * as Cy from 'cytoscape';\n\nimport { GraphStyles } from './graphs/GraphStyles';\nimport canvas from 'cytoscape-canvas';\nimport cytoscape from 'cytoscape';\nimport cycola from 'cytoscape-cola';\nimport dagre from 'cytoscape-dagre';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport BoxLayout from './Layout/BoxLayout';\nimport popper from 'cytoscape-popper';\nconst nodeHtmlLabel = require('cy-node-html-label');\n\ncytoscape.use(canvas);\ncytoscape.use(cycola);\ncytoscape.use(dagre);\ncytoscape.use(coseBilkent);\ncytoscape.use(popper);\ncytoscape('layout', 'box-layout', BoxLayout);\nnodeHtmlLabel(cytoscape);\n\ntype CytoscapeReactWrapperProps = {};\n\ntype CytoscapeReactWrapperState = {};\n\nconst styleContainer: React.CSSProperties = {\n  height: '100%'\n};\n\n/**\n * The purpose of this wrapper is very simple and minimal - to provide a long-lived <div> element that can be used\n * as the parent container for the cy graph (cy.container). Because cy does not provide the ability to re-parent an\n * existing graph (e.g. there is no API such as \"cy.setContainer(div)\"), the only way to be able to re-use a\n * graph (without re-creating and re-rendering it all the time) is to have it inside a wrapper like this one\n * that does not update/re-render itself, thus keeping the original <div> intact.\n *\n * Other than creating and initializing the cy graph, this component should do nothing else. Parent components\n * should get a ref to this component can call getCy() in order to perform additional processing on the graph.\n * It is the job of the parent component to manipulate and update the cy graph during runtime.\n *\n * NOTE: The context menu stuff is defined in the CytoscapeReactWrapper because that is\n * where the cytoscape plugins are defined. And the context menu functions are defined in\n * here because they are not normal Cytoscape defined functions like those found in CytoscapeGraph.\n */\nexport class CytoscapeReactWrapper extends React.Component<CytoscapeReactWrapperProps, CytoscapeReactWrapperState> {\n  cy?: Cy.Core;\n  divParentRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: CytoscapeReactWrapperProps) {\n    super(props);\n    this.divParentRef = React.createRef();\n  }\n\n  // For other components to be able to manipulate the cy graph.\n  getCy() {\n    return this.cy;\n  }\n\n  // This is VERY important - this must always return false to ensure the div is never destroyed.\n  // If the div is destroyed, the cached cy becomes useless.\n  shouldComponentUpdate(_nextProps: CytoscapeReactWrapperProps, _nextState: CytoscapeReactWrapperState) {\n    return false;\n  }\n\n  componentDidMount() {\n    this.build();\n  }\n\n  componentWillUnmount() {\n    this.destroy();\n  }\n\n  render() {\n    return <div id=\"cy\" className=\"graph\" style={styleContainer} ref={this.divParentRef} />;\n  }\n\n  build() {\n    if (this.cy) {\n      this.destroy();\n    }\n    const opts = {\n      container: this.divParentRef.current,\n      boxSelectionEnabled: false,\n      style: GraphStyles.styles(),\n      ...GraphStyles.options()\n    };\n\n    this.cy = cytoscape(opts);\n    // Using an extension\n    (this.cy as any).nodeHtmlLabel(GraphStyles.htmlNodeLabels(this.cy));\n  }\n\n  destroy() {\n    if (this.cy) {\n      this.cy.destroy();\n      this.cy = undefined;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
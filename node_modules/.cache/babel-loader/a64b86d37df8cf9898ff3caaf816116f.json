{"ast":null,"code":"import _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CheckCircleIcon, ExclamationCircleIcon, ExclamationTriangleIcon, MinusCircleIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { getName } from '../utils/RateIntervals';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { calculateErrorRate } from './ErrorRate';\nimport { serverConfig } from '../config';\nexport var TRAFFICSTATUS = 'Traffic Status';\n\nvar createTrafficTitle = function createTrafficTitle(time) {\n  return TRAFFICSTATUS + ' (Last ' + time + ')';\n};\n/*\nRequestType interface\n- where the structure is type {<protocol>: {<code>:value ...} ...}\n\nExample: { \"http\": {\"200\": 2, \"404\": 1 ...} ... }\n*/\n\n\nexport var FAILURE = {\n  name: 'Failure',\n  color: PFColors.Danger,\n  priority: 4,\n  icon: ExclamationCircleIcon,\n  class: 'icon-failure'\n};\nexport var DEGRADED = {\n  name: 'Degraded',\n  color: PFColors.Warning,\n  priority: 3,\n  icon: ExclamationTriangleIcon,\n  class: 'icon-degraded'\n};\nexport var NOT_READY = {\n  name: 'Not Ready',\n  color: PFColors.InfoBackground,\n  priority: 2,\n  icon: MinusCircleIcon,\n  class: 'icon-idle'\n};\nexport var HEALTHY = {\n  name: 'Healthy',\n  color: PFColors.Success,\n  priority: 1,\n  icon: CheckCircleIcon,\n  class: 'icon-healthy'\n};\nexport var NA = {\n  name: 'No health information',\n  color: PFColors.Black600,\n  priority: 0,\n  icon: UnknownIcon,\n  class: 'icon-na'\n};\nexport var POD_STATUS = 'Pod Status'; // Use -1 rather than NaN to allow straigthforward comparison\n\nexport var RATIO_NA = -1;\nexport var ratioCheck = function ratioCheck(availableReplicas, currentReplicas, desiredReplicas, syncedProxies) {\n  /*\n    NOT READY STATE\n  */\n  // User has scaled down a workload, then desired replicas will be 0 and it's not an error condition\n  if (desiredReplicas === 0) {\n    return NOT_READY;\n  }\n  /*\n   DEGRADED STATE\n  */\n  // When a workload has available pods but less than desired defined by user it should be marked as degraded\n\n\n  if (desiredReplicas > 0 && currentReplicas > 0 && availableReplicas > 0 && (currentReplicas < desiredReplicas || availableReplicas < desiredReplicas)) {\n    return DEGRADED;\n  }\n  /*\n     FAILURE STATE\n  */\n  // When availableReplicas is 0 but user has marked a desired > 0, that's an error condition\n\n\n  if (desiredReplicas > 0 && availableReplicas === 0) {\n    return FAILURE;\n  } // Pending Pods means problems\n\n\n  if (desiredReplicas === availableReplicas && availableReplicas !== currentReplicas) {\n    return FAILURE;\n  } // When there are proxies that are not sync, degrade\n\n\n  if (syncedProxies >= 0 && syncedProxies < desiredReplicas) {\n    return DEGRADED;\n  }\n  /*\n     HEALTHY STATE\n  */\n\n\n  if (desiredReplicas === currentReplicas && currentReplicas === availableReplicas && availableReplicas === desiredReplicas) {\n    return HEALTHY;\n  } // Other combination could mean a degraded situation\n\n\n  return DEGRADED;\n};\nexport var proxyStatusMessage = function proxyStatusMessage(syncedProxies, desiredReplicas) {\n  var msg = '';\n\n  if (syncedProxies < desiredReplicas) {\n    var unsynced = desiredReplicas - syncedProxies;\n    msg = ' (' + unsynced;\n    msg += unsynced !== 1 ? ' proxies' : ' proxy';\n    msg += ' unsynced)';\n  }\n\n  return msg;\n};\nexport var isProxyStatusSynced = function isProxyStatusSynced(status) {\n  return isProxyStatusComponentSynced(status.CDS) && isProxyStatusComponentSynced(status.EDS) && isProxyStatusComponentSynced(status.LDS) && isProxyStatusComponentSynced(status.RDS);\n};\nexport var isProxyStatusComponentSynced = function isProxyStatusComponentSynced(componentStatus) {\n  return componentStatus === 'Synced';\n};\nexport var mergeStatus = function mergeStatus(s1, s2) {\n  return s1.priority > s2.priority ? s1 : s2;\n};\nexport var ascendingThresholdCheck = function ascendingThresholdCheck(value, thresholds) {\n  if (value > 0) {\n    if (value >= thresholds.failure) {\n      return {\n        value: value,\n        status: FAILURE,\n        violation: value.toFixed(2) + thresholds.unit + '>=' + thresholds.failure + thresholds.unit\n      };\n    } else if (value >= thresholds.degraded) {\n      return {\n        value: value,\n        status: DEGRADED,\n        violation: value.toFixed(2) + thresholds.unit + '>=' + thresholds.degraded + thresholds.unit\n      };\n    }\n  }\n\n  return {\n    value: value,\n    status: HEALTHY\n  };\n};\nexport var getRequestErrorsStatus = function getRequestErrorsStatus(ratio, tolerance) {\n  if (tolerance && ratio >= 0) {\n    var thresholds = {\n      degraded: tolerance.degraded,\n      failure: tolerance.failure,\n      unit: '%'\n    };\n    return ascendingThresholdCheck(100 * ratio, thresholds);\n  }\n\n  return {\n    value: RATIO_NA,\n    status: NA\n  };\n};\nexport var getRequestErrorsSubItem = function getRequestErrorsSubItem(thresholdStatus, prefix) {\n  return {\n    status: thresholdStatus.status,\n    text: prefix + ': ' + (thresholdStatus.status === NA ? 'No requests' : thresholdStatus.value.toFixed(2) + '%'),\n    value: thresholdStatus.status === NA ? 0 : thresholdStatus.value\n  };\n};\nexport var Health = /*#__PURE__*/function () {\n  function Health(health) {\n    _classCallCheck(this, Health);\n\n    this.health = health;\n  }\n\n  _createClass(Health, [{\n    key: \"getGlobalStatus\",\n    value: function getGlobalStatus() {\n      return this.health.items.map(function (i) {\n        return i.status;\n      }).reduce(function (prev, cur) {\n        return mergeStatus(prev, cur);\n      }, NA);\n    }\n  }, {\n    key: \"getStatusConfig\",\n    value: function getStatusConfig() {\n      var _this$health$statusCo;\n\n      // Check if the config applied is the kiali defaults one\n      var tolConfDefault = serverConfig.healthConfig.rate[serverConfig.healthConfig.rate.length - 1].tolerance;\n\n      var _iterator = _createForOfIteratorHelper(tolConfDefault),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tol = _step.value;\n\n          // Check if the tolerance applied is one of kiali defaults\n          if (this.health.statusConfig && tol === this.health.statusConfig.threshold) {\n            // In the case is a kiali's default return undefined\n            return undefined;\n          }\n        } // Otherwise return the threshold configuration that kiali used to calculate the status\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return (_this$health$statusCo = this.health.statusConfig) === null || _this$health$statusCo === void 0 ? void 0 : _this$health$statusCo.threshold;\n    }\n  }, {\n    key: \"getTrafficStatus\",\n    value: function getTrafficStatus() {\n      for (var i = 0; i < this.health.items.length; i++) {\n        var item = this.health.items[i];\n\n        if (item.title.startsWith(TRAFFICSTATUS)) {\n          return item;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getWorkloadStatus\",\n    value: function getWorkloadStatus() {\n      for (var i = 0; i < this.health.items.length; i++) {\n        var item = this.health.items[i];\n\n        if (item.title.startsWith(POD_STATUS)) {\n          return item;\n        }\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Health;\n}();\nexport var ServiceHealth = /*#__PURE__*/function (_Health) {\n  _inherits(ServiceHealth, _Health);\n\n  var _super = _createSuper(ServiceHealth);\n\n  function ServiceHealth(ns, srv, requests, ctx) {\n    var _this;\n\n    _classCallCheck(this, ServiceHealth);\n\n    _this = _super.call(this, ServiceHealth.computeItems(ns, srv, requests, ctx));\n    _this.requests = requests;\n    return _this;\n  }\n\n  _createClass(ServiceHealth, null, [{\n    key: \"computeItems\",\n    value: function computeItems(ns, srv, requests, ctx) {\n      var items = [];\n      var statusConfig = undefined;\n\n      if (ctx.hasSidecar) {\n        // Request errors\n        var reqError = calculateErrorRate(ns, srv, 'service', requests);\n        var reqErrorsText = reqError.errorRatio.global.status.status === NA ? 'No requests' : reqError.errorRatio.global.status.value.toFixed(2) + '%';\n        var item = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: reqError.errorRatio.global.status.status,\n          children: [{\n            text: 'Inbound: ' + reqErrorsText,\n            status: reqError.errorRatio.global.status.status,\n            value: reqError.errorRatio.global.status.value\n          }]\n        };\n        items.push(item);\n        statusConfig = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: reqError.errorRatio.global.status.status,\n          threshold: reqError.errorRatio.global.toleranceConfig,\n          value: reqError.errorRatio.global.status.value\n        };\n      } else {\n        items.push({\n          title: TRAFFICSTATUS,\n          status: NA,\n          text: 'No Istio sidecar'\n        });\n      }\n\n      return {\n        items: items,\n        statusConfig: statusConfig\n      };\n    }\n  }]);\n\n  return ServiceHealth;\n}(Health);\n\nServiceHealth.fromJson = function (ns, srv, json, ctx) {\n  return new ServiceHealth(ns, srv, json.requests, ctx);\n};\n\nexport var AppHealth = /*#__PURE__*/function (_Health2) {\n  _inherits(AppHealth, _Health2);\n\n  var _super2 = _createSuper(AppHealth);\n\n  function AppHealth(ns, app, workloadStatuses, requests, ctx) {\n    var _this2;\n\n    _classCallCheck(this, AppHealth);\n\n    _this2 = _super2.call(this, AppHealth.computeItems(ns, app, workloadStatuses, requests, ctx));\n    _this2.requests = requests;\n    return _this2;\n  }\n\n  _createClass(AppHealth, null, [{\n    key: \"computeItems\",\n    value: function computeItems(ns, app, workloadStatuses, requests, ctx) {\n      var items = [];\n      var statusConfig = undefined;\n      {\n        // Pods\n        var children = workloadStatuses.map(function (d) {\n          var status = ratioCheck(d.availableReplicas, d.currentReplicas, d.desiredReplicas, d.syncedProxies);\n          var proxyMessage = '';\n\n          if (d.syncedProxies >= 0) {\n            proxyMessage = proxyStatusMessage(d.syncedProxies, d.desiredReplicas);\n          }\n\n          return {\n            text: d.name + ': ' + d.availableReplicas + ' / ' + d.desiredReplicas + proxyMessage,\n            status: status\n          };\n        });\n        var podsStatus = children.map(function (i) {\n          return i.status;\n        }).reduce(function (prev, cur) {\n          return mergeStatus(prev, cur);\n        }, NA);\n        var item = {\n          title: POD_STATUS,\n          status: podsStatus,\n          children: children\n        };\n        items.push(item);\n      } // Request errors\n\n      if (ctx.hasSidecar) {\n        var reqError = calculateErrorRate(ns, app, 'app', requests);\n        var reqIn = reqError.errorRatio.inbound.status;\n        var reqOut = reqError.errorRatio.outbound.status;\n        var both = mergeStatus(reqIn.status, reqOut.status);\n        var _item = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: both,\n          children: [getRequestErrorsSubItem(reqIn, 'Inbound'), getRequestErrorsSubItem(reqOut, 'Outbound')]\n        };\n        statusConfig = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: reqError.errorRatio.global.status.status,\n          threshold: reqError.errorRatio.global.toleranceConfig,\n          value: reqError.errorRatio.global.status.value\n        };\n        items.push(_item);\n      }\n\n      return {\n        items: items,\n        statusConfig: statusConfig\n      };\n    }\n  }]);\n\n  return AppHealth;\n}(Health);\n\nAppHealth.fromJson = function (ns, app, json, ctx) {\n  return new AppHealth(ns, app, json.workloadStatuses, json.requests, ctx);\n};\n\nexport var WorkloadHealth = /*#__PURE__*/function (_Health3) {\n  _inherits(WorkloadHealth, _Health3);\n\n  var _super3 = _createSuper(WorkloadHealth);\n\n  function WorkloadHealth(ns, workload, workloadStatus, requests, ctx) {\n    var _this3;\n\n    _classCallCheck(this, WorkloadHealth);\n\n    _this3 = _super3.call(this, WorkloadHealth.computeItems(ns, workload, workloadStatus, requests, ctx));\n    _this3.requests = requests;\n    return _this3;\n  }\n\n  _createClass(WorkloadHealth, null, [{\n    key: \"computeItems\",\n    value: function computeItems(ns, workload, workloadStatus, requests, ctx) {\n      var items = [];\n      var statusConfig = undefined;\n      {\n        // Pods\n        var podsStatus = ratioCheck(workloadStatus.availableReplicas, workloadStatus.currentReplicas, workloadStatus.desiredReplicas, workloadStatus.syncedProxies);\n        var item = {\n          title: POD_STATUS,\n          status: podsStatus,\n          children: [{\n            text: workloadStatus.name + ': ' + workloadStatus.availableReplicas + ' / ' + workloadStatus.desiredReplicas,\n            status: podsStatus\n          }]\n        };\n\n        if (podsStatus !== NA && podsStatus !== HEALTHY) {\n          item.children = [{\n            status: podsStatus,\n            text: String(workloadStatus.desiredReplicas + ' desired pod' + (workloadStatus.desiredReplicas !== 1 ? 's' : ''))\n          }, {\n            status: podsStatus,\n            text: String(workloadStatus.currentReplicas + ' current pod' + (workloadStatus.currentReplicas !== 1 ? 's' : ''))\n          }, {\n            status: podsStatus,\n            text: String(workloadStatus.availableReplicas + ' available pod' + (workloadStatus.availableReplicas !== 1 ? 's' : ''))\n          }];\n\n          if (workloadStatus.syncedProxies >= 0) {\n            item.children.push({\n              status: podsStatus,\n              text: String(workloadStatus.syncedProxies + ' synced prox' + (workloadStatus.availableReplicas !== 1 ? 'ies' : 'y'))\n            });\n          }\n        }\n\n        items.push(item);\n      } // Request errors\n\n      if (ctx.hasSidecar) {\n        var reqError = calculateErrorRate(ns, workload, 'workload', requests);\n        var reqIn = reqError.errorRatio.inbound.status;\n        var reqOut = reqError.errorRatio.outbound.status;\n        var both = mergeStatus(reqIn.status, reqOut.status);\n        var _item2 = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: both,\n          children: [getRequestErrorsSubItem(reqIn, 'Inbound'), getRequestErrorsSubItem(reqOut, 'Outbound')]\n        };\n        items.push(_item2);\n        statusConfig = {\n          title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n          status: reqError.errorRatio.global.status.status,\n          threshold: reqError.errorRatio.global.toleranceConfig,\n          value: reqError.errorRatio.global.status.value\n        };\n      }\n\n      return {\n        items: items,\n        statusConfig: statusConfig\n      };\n    }\n  }]);\n\n  return WorkloadHealth;\n}(Health);\n\nWorkloadHealth.fromJson = function (ns, workload, json, ctx) {\n  return new WorkloadHealth(ns, workload, json.workloadStatus, json.requests, ctx);\n};\n\nexport var healthNotAvailable = function healthNotAvailable() {\n  return new AppHealth('', '', [], {\n    inbound: {},\n    outbound: {},\n    healthAnnotations: {}\n  }, {\n    rateInterval: 60,\n    hasSidecar: true\n  });\n};\nexport var hasHealth = function hasHealth(val) {\n  return !!val['health'];\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/Health.ts"],"names":["CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","MinusCircleIcon","UnknownIcon","getName","PFColors","calculateErrorRate","serverConfig","TRAFFICSTATUS","createTrafficTitle","time","FAILURE","name","color","Danger","priority","icon","class","DEGRADED","Warning","NOT_READY","InfoBackground","HEALTHY","Success","NA","Black600","POD_STATUS","RATIO_NA","ratioCheck","availableReplicas","currentReplicas","desiredReplicas","syncedProxies","proxyStatusMessage","msg","unsynced","isProxyStatusSynced","status","isProxyStatusComponentSynced","CDS","EDS","LDS","RDS","componentStatus","mergeStatus","s1","s2","ascendingThresholdCheck","value","thresholds","failure","violation","toFixed","unit","degraded","getRequestErrorsStatus","ratio","tolerance","getRequestErrorsSubItem","thresholdStatus","prefix","text","Health","health","items","map","i","reduce","prev","cur","tolConfDefault","healthConfig","rate","length","tol","statusConfig","threshold","undefined","item","title","startsWith","ServiceHealth","ns","srv","requests","ctx","computeItems","hasSidecar","reqError","reqErrorsText","errorRatio","global","rateInterval","toLowerCase","children","push","toleranceConfig","fromJson","json","AppHealth","app","workloadStatuses","d","proxyMessage","podsStatus","reqIn","inbound","reqOut","outbound","both","WorkloadHealth","workload","workloadStatus","String","healthNotAvailable","healthAnnotations","hasHealth","val"],"mappings":"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","sourcesContent":["import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  MinusCircleIcon,\n  UnknownIcon\n} from '@patternfly/react-icons';\nimport { IconType } from '@patternfly/react-icons/dist/js/createIcon';\nimport { getName } from '../utils/RateIntervals';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { calculateErrorRate } from './ErrorRate';\nimport { ToleranceConfig } from './ServerConfig';\nimport { serverConfig } from '../config';\nimport { HealthAnnotationType } from './HealthAnnotation';\n\ninterface HealthConfig {\n  items: HealthItem[];\n  statusConfig?: HealthItemConfig;\n}\n\nexport interface HealthItem {\n  status: Status;\n  title: string;\n  text?: string;\n  children?: HealthSubItem[];\n}\n\nexport interface HealthItemConfig {\n  status: Status;\n  title: string;\n  text?: string;\n  value: number;\n  threshold?: ToleranceConfig;\n}\n\nexport interface HealthSubItem {\n  status: Status;\n  text: string;\n  value?: number;\n}\n\nexport interface WorkloadStatus {\n  name: string;\n  desiredReplicas: number;\n  currentReplicas: number;\n  availableReplicas: number;\n  syncedProxies: number;\n}\n\nexport const TRAFFICSTATUS = 'Traffic Status';\n\nconst createTrafficTitle = (time: string) => {\n  return TRAFFICSTATUS + ' (Last ' + time + ')';\n};\n\n/*\nRequestType interface\n- where the structure is type {<protocol>: {<code>:value ...} ...}\n\nExample: { \"http\": {\"200\": 2, \"404\": 1 ...} ... }\n*/\nexport interface RequestType {\n  [key: string]: { [key: string]: number };\n}\nexport interface RequestHealth {\n  inbound: RequestType;\n  outbound: RequestType;\n  healthAnnotations: HealthAnnotationType;\n}\n\nexport interface Status {\n  name: string;\n  color: string;\n  priority: number;\n  icon: IconType;\n  class: string;\n}\n\nexport interface ProxyStatus {\n  CDS: string;\n  EDS: string;\n  LDS: string;\n  RDS: string;\n}\n\nexport const FAILURE: Status = {\n  name: 'Failure',\n  color: PFColors.Danger,\n  priority: 4,\n  icon: ExclamationCircleIcon,\n  class: 'icon-failure'\n};\nexport const DEGRADED: Status = {\n  name: 'Degraded',\n  color: PFColors.Warning,\n  priority: 3,\n  icon: ExclamationTriangleIcon,\n  class: 'icon-degraded'\n};\nexport const NOT_READY: Status = {\n  name: 'Not Ready',\n  color: PFColors.InfoBackground,\n  priority: 2,\n  icon: MinusCircleIcon,\n  class: 'icon-idle'\n};\nexport const HEALTHY: Status = {\n  name: 'Healthy',\n  color: PFColors.Success,\n  priority: 1,\n  icon: CheckCircleIcon,\n  class: 'icon-healthy'\n};\nexport const NA: Status = {\n  name: 'No health information',\n  color: PFColors.Black600,\n  priority: 0,\n  icon: UnknownIcon,\n  class: 'icon-na'\n};\n\ninterface Thresholds {\n  degraded: number;\n  failure: number;\n  unit: string;\n}\n\nexport interface ThresholdStatus {\n  value: number;\n  status: Status;\n  violation?: string;\n}\n\nexport const POD_STATUS = 'Pod Status';\n\n// Use -1 rather than NaN to allow straigthforward comparison\nexport const RATIO_NA = -1;\n\nexport const ratioCheck = (\n  availableReplicas: number,\n  currentReplicas: number,\n  desiredReplicas: number,\n  syncedProxies: number\n): Status => {\n  /*\n    NOT READY STATE\n */\n  // User has scaled down a workload, then desired replicas will be 0 and it's not an error condition\n  if (desiredReplicas === 0) {\n    return NOT_READY;\n  }\n\n  /*\n   DEGRADED STATE\n  */\n  // When a workload has available pods but less than desired defined by user it should be marked as degraded\n  if (\n    desiredReplicas > 0 &&\n    currentReplicas > 0 &&\n    availableReplicas > 0 &&\n    (currentReplicas < desiredReplicas || availableReplicas < desiredReplicas)\n  ) {\n    return DEGRADED;\n  }\n\n  /*\n     FAILURE STATE\n  */\n  // When availableReplicas is 0 but user has marked a desired > 0, that's an error condition\n  if (desiredReplicas > 0 && availableReplicas === 0) {\n    return FAILURE;\n  }\n\n  // Pending Pods means problems\n  if (desiredReplicas === availableReplicas && availableReplicas !== currentReplicas) {\n    return FAILURE;\n  }\n\n  // When there are proxies that are not sync, degrade\n  if (syncedProxies >= 0 && syncedProxies < desiredReplicas) {\n    return DEGRADED;\n  }\n\n  /*\n     HEALTHY STATE\n  */\n  if (\n    desiredReplicas === currentReplicas &&\n    currentReplicas === availableReplicas &&\n    availableReplicas === desiredReplicas\n  ) {\n    return HEALTHY;\n  }\n\n  // Other combination could mean a degraded situation\n  return DEGRADED;\n};\n\nexport const proxyStatusMessage = (syncedProxies: number, desiredReplicas: number): string => {\n  let msg: string = '';\n  if (syncedProxies < desiredReplicas) {\n    const unsynced = desiredReplicas - syncedProxies;\n    msg = ' (' + unsynced;\n    msg += unsynced !== 1 ? ' proxies' : ' proxy';\n    msg += ' unsynced)';\n  }\n  return msg;\n};\n\nexport const isProxyStatusSynced = (status: ProxyStatus): boolean => {\n  return (\n    isProxyStatusComponentSynced(status.CDS) &&\n    isProxyStatusComponentSynced(status.EDS) &&\n    isProxyStatusComponentSynced(status.LDS) &&\n    isProxyStatusComponentSynced(status.RDS)\n  );\n};\n\nexport const isProxyStatusComponentSynced = (componentStatus: string): boolean => {\n  return componentStatus === 'Synced';\n};\n\nexport const mergeStatus = (s1: Status, s2: Status): Status => {\n  return s1.priority > s2.priority ? s1 : s2;\n};\n\nexport const ascendingThresholdCheck = (value: number, thresholds: Thresholds): ThresholdStatus => {\n  if (value > 0) {\n    if (value >= thresholds.failure) {\n      return {\n        value: value,\n        status: FAILURE,\n        violation: value.toFixed(2) + thresholds.unit + '>=' + thresholds.failure + thresholds.unit\n      };\n    } else if (value >= thresholds.degraded) {\n      return {\n        value: value,\n        status: DEGRADED,\n        violation: value.toFixed(2) + thresholds.unit + '>=' + thresholds.degraded + thresholds.unit\n      };\n    }\n  }\n\n  return { value: value, status: HEALTHY };\n};\n\nexport const getRequestErrorsStatus = (ratio: number, tolerance?: ToleranceConfig): ThresholdStatus => {\n  if (tolerance && ratio >= 0) {\n    let thresholds = {\n      degraded: tolerance.degraded,\n      failure: tolerance.failure,\n      unit: '%'\n    };\n    return ascendingThresholdCheck(100 * ratio, thresholds);\n  }\n\n  return {\n    value: RATIO_NA,\n    status: NA\n  };\n};\n\nexport const getRequestErrorsSubItem = (thresholdStatus: ThresholdStatus, prefix: string): HealthSubItem => {\n  return {\n    status: thresholdStatus.status,\n    text: prefix + ': ' + (thresholdStatus.status === NA ? 'No requests' : thresholdStatus.value.toFixed(2) + '%'),\n    value: thresholdStatus.status === NA ? 0 : thresholdStatus.value\n  };\n};\n\nexport abstract class Health {\n  constructor(public health: HealthConfig) {}\n\n  getGlobalStatus(): Status {\n    return this.health.items.map(i => i.status).reduce((prev, cur) => mergeStatus(prev, cur), NA);\n  }\n\n  getStatusConfig(): ToleranceConfig | undefined {\n    // Check if the config applied is the kiali defaults one\n    const tolConfDefault = serverConfig.healthConfig.rate[serverConfig.healthConfig.rate.length - 1].tolerance;\n    for (let tol of tolConfDefault) {\n      // Check if the tolerance applied is one of kiali defaults\n      if (this.health.statusConfig && tol === this.health.statusConfig.threshold) {\n        // In the case is a kiali's default return undefined\n        return undefined;\n      }\n    }\n    // Otherwise return the threshold configuration that kiali used to calculate the status\n    return this.health.statusConfig?.threshold;\n  }\n\n  getTrafficStatus(): HealthItem | undefined {\n    for (let i = 0; i < this.health.items.length; i++) {\n      const item = this.health.items[i];\n      if (item.title.startsWith(TRAFFICSTATUS)) {\n        return item;\n      }\n    }\n    return undefined;\n  }\n\n  getWorkloadStatus(): HealthItem | undefined {\n    for (let i = 0; i < this.health.items.length; i++) {\n      const item = this.health.items[i];\n      if (item.title.startsWith(POD_STATUS)) {\n        return item;\n      }\n    }\n    return undefined;\n  }\n}\n\ninterface HealthContext {\n  rateInterval: number;\n  hasSidecar: boolean;\n}\n\nexport class ServiceHealth extends Health {\n  public static fromJson = (ns: string, srv: string, json: any, ctx: HealthContext) =>\n    new ServiceHealth(ns, srv, json.requests, ctx);\n\n  private static computeItems(ns: string, srv: string, requests: RequestHealth, ctx: HealthContext): HealthConfig {\n    const items: HealthItem[] = [];\n    let statusConfig: HealthItemConfig | undefined = undefined;\n    if (ctx.hasSidecar) {\n      // Request errors\n      const reqError = calculateErrorRate(ns, srv, 'service', requests);\n      const reqErrorsText =\n        reqError.errorRatio.global.status.status === NA\n          ? 'No requests'\n          : reqError.errorRatio.global.status.value.toFixed(2) + '%';\n      const item: HealthItem = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: reqError.errorRatio.global.status.status,\n        children: [\n          {\n            text: 'Inbound: ' + reqErrorsText,\n            status: reqError.errorRatio.global.status.status,\n            value: reqError.errorRatio.global.status.value\n          }\n        ]\n      };\n      items.push(item);\n      statusConfig = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: reqError.errorRatio.global.status.status,\n        threshold: reqError.errorRatio.global.toleranceConfig,\n        value: reqError.errorRatio.global.status.value\n      };\n    } else {\n      items.push({\n        title: TRAFFICSTATUS,\n        status: NA,\n        text: 'No Istio sidecar'\n      });\n    }\n    return { items, statusConfig };\n  }\n\n  constructor(ns: string, srv: string, public requests: RequestHealth, ctx: HealthContext) {\n    super(ServiceHealth.computeItems(ns, srv, requests, ctx));\n  }\n}\n\nexport class AppHealth extends Health {\n  public static fromJson = (ns: string, app: string, json: any, ctx: HealthContext) =>\n    new AppHealth(ns, app, json.workloadStatuses, json.requests, ctx);\n\n  private static computeItems(\n    ns: string,\n    app: string,\n    workloadStatuses: WorkloadStatus[],\n    requests: RequestHealth,\n    ctx: HealthContext\n  ): HealthConfig {\n    const items: HealthItem[] = [];\n    let statusConfig: HealthItemConfig | undefined = undefined;\n    {\n      // Pods\n      const children: HealthSubItem[] = workloadStatuses.map(d => {\n        const status = ratioCheck(d.availableReplicas, d.currentReplicas, d.desiredReplicas, d.syncedProxies);\n        let proxyMessage = '';\n        if (d.syncedProxies >= 0) {\n          proxyMessage = proxyStatusMessage(d.syncedProxies, d.desiredReplicas);\n        }\n        return {\n          text: d.name + ': ' + d.availableReplicas + ' / ' + d.desiredReplicas + proxyMessage,\n          status: status\n        };\n      });\n      const podsStatus = children.map(i => i.status).reduce((prev, cur) => mergeStatus(prev, cur), NA);\n      const item: HealthItem = {\n        title: POD_STATUS,\n        status: podsStatus,\n        children: children\n      };\n      items.push(item);\n    }\n\n    // Request errors\n    if (ctx.hasSidecar) {\n      const reqError = calculateErrorRate(ns, app, 'app', requests);\n      const reqIn = reqError.errorRatio.inbound.status;\n      const reqOut = reqError.errorRatio.outbound.status;\n      const both = mergeStatus(reqIn.status, reqOut.status);\n      const item: HealthItem = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: both,\n        children: [getRequestErrorsSubItem(reqIn, 'Inbound'), getRequestErrorsSubItem(reqOut, 'Outbound')]\n      };\n      statusConfig = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: reqError.errorRatio.global.status.status,\n        threshold: reqError.errorRatio.global.toleranceConfig,\n        value: reqError.errorRatio.global.status.value\n      };\n      items.push(item);\n    }\n    return { items, statusConfig };\n  }\n\n  constructor(\n    ns: string,\n    app: string,\n    workloadStatuses: WorkloadStatus[],\n    public requests: RequestHealth,\n    ctx: HealthContext\n  ) {\n    super(AppHealth.computeItems(ns, app, workloadStatuses, requests, ctx));\n  }\n}\n\nexport class WorkloadHealth extends Health {\n  public static fromJson = (ns: string, workload: string, json: any, ctx: HealthContext) =>\n    new WorkloadHealth(ns, workload, json.workloadStatus, json.requests, ctx);\n\n  private static computeItems(\n    ns: string,\n    workload: string,\n    workloadStatus: WorkloadStatus,\n    requests: RequestHealth,\n    ctx: HealthContext\n  ): HealthConfig {\n    const items: HealthItem[] = [];\n    let statusConfig: HealthItemConfig | undefined = undefined;\n    {\n      // Pods\n      const podsStatus = ratioCheck(\n        workloadStatus.availableReplicas,\n        workloadStatus.currentReplicas,\n        workloadStatus.desiredReplicas,\n        workloadStatus.syncedProxies\n      );\n      const item: HealthItem = {\n        title: POD_STATUS,\n        status: podsStatus,\n        children: [\n          {\n            text:\n              workloadStatus.name + ': ' + workloadStatus.availableReplicas + ' / ' + workloadStatus.desiredReplicas,\n            status: podsStatus\n          }\n        ]\n      };\n      if (podsStatus !== NA && podsStatus !== HEALTHY) {\n        item.children = [\n          {\n            status: podsStatus,\n            text: String(\n              workloadStatus.desiredReplicas + ' desired pod' + (workloadStatus.desiredReplicas !== 1 ? 's' : '')\n            )\n          },\n          {\n            status: podsStatus,\n            text: String(\n              workloadStatus.currentReplicas + ' current pod' + (workloadStatus.currentReplicas !== 1 ? 's' : '')\n            )\n          },\n          {\n            status: podsStatus,\n            text: String(\n              workloadStatus.availableReplicas + ' available pod' + (workloadStatus.availableReplicas !== 1 ? 's' : '')\n            )\n          }\n        ];\n\n        if (workloadStatus.syncedProxies >= 0) {\n          item.children.push({\n            status: podsStatus,\n            text: String(\n              workloadStatus.syncedProxies + ' synced prox' + (workloadStatus.availableReplicas !== 1 ? 'ies' : 'y')\n            )\n          });\n        }\n      }\n      items.push(item);\n    }\n    // Request errors\n    if (ctx.hasSidecar) {\n      const reqError = calculateErrorRate(ns, workload, 'workload', requests);\n      const reqIn = reqError.errorRatio.inbound.status;\n      const reqOut = reqError.errorRatio.outbound.status;\n      const both = mergeStatus(reqIn.status, reqOut.status);\n      const item: HealthItem = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: both,\n        children: [getRequestErrorsSubItem(reqIn, 'Inbound'), getRequestErrorsSubItem(reqOut, 'Outbound')]\n      };\n      items.push(item);\n\n      statusConfig = {\n        title: createTrafficTitle(getName(ctx.rateInterval).toLowerCase()),\n        status: reqError.errorRatio.global.status.status,\n        threshold: reqError.errorRatio.global.toleranceConfig,\n        value: reqError.errorRatio.global.status.value\n      };\n    }\n    return { items, statusConfig };\n  }\n\n  constructor(\n    ns: string,\n    workload: string,\n    workloadStatus: WorkloadStatus,\n    public requests: RequestHealth,\n    ctx: HealthContext\n  ) {\n    super(WorkloadHealth.computeItems(ns, workload, workloadStatus, requests, ctx));\n  }\n}\n\nexport const healthNotAvailable = (): AppHealth => {\n  return new AppHealth(\n    '',\n    '',\n    [],\n    { inbound: {}, outbound: {}, healthAnnotations: {} },\n    { rateInterval: 60, hasSidecar: true }\n  );\n};\n\nexport type NamespaceAppHealth = { [app: string]: AppHealth };\nexport type NamespaceServiceHealth = { [service: string]: ServiceHealth };\nexport type NamespaceWorkloadHealth = { [workload: string]: WorkloadHealth };\n\nexport type WithAppHealth<T> = T & { health: AppHealth };\nexport type WithServiceHealth<T> = T & { health: ServiceHealth };\nexport type WithWorkloadHealth<T> = T & { health: WorkloadHealth };\n\nexport type WithHealth<T> = WithAppHealth<T> | WithServiceHealth<T> | WithWorkloadHealth<T>;\nexport const hasHealth = <T>(val: T): val is WithHealth<T> => !!val['health'];\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/components/PfSpinner.tsx\";\n\nimport React from 'react';\nimport { Spinner } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: state.globalState.loadingCounter > 0\n  };\n};\n\nexport var PfSpinner = function PfSpinner(props) {\n  var isLoading = props.isLoading; // It is more than likely it won't have any children; but it could.\n\n  return isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    id: \"loading_kiali_spinner\",\n    size: 'lg',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 22\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null);\n}; // hook up to Redux for our State to be mapped to props\n\nvar PfSpinnerContainer = connect(mapStateToProps, null)(PfSpinner);\nexport default PfSpinnerContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/PfSpinner.tsx"],"names":["React","Spinner","connect","mapStateToProps","state","isLoading","globalState","loadingCounter","PfSpinner","props","PfSpinnerContainer"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAA2B;AACjDC,IAAAA,SAAS,EAAED,KAAK,CAACE,WAAN,CAAkBC,cAAlB,GAAmC;AADG,GAA3B;AAAA,CAAxB;;AAIA,OAAO,IAAMC,SAAkD,GAAG,SAArDA,SAAqD,CAAAC,KAAK,EAAI;AACzE,MAAQJ,SAAR,GAAsBI,KAAtB,CAAQJ,SAAR,CADyE,CAEzE;;AACA,SAAOA,SAAS,gBAAG,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,uBAAZ;AAAoC,IAAA,IAAI,EAAE,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAAwD,yCAAxE;AACD,CAJM,C,CAMP;;AACA,IAAMK,kBAAkB,GAAGR,OAAO,CAACC,eAAD,EAAkB,IAAlB,CAAP,CAA+BK,SAA/B,CAA3B;AACA,eAAeE,kBAAf","sourcesContent":["import React from 'react';\nimport { Spinner } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { KialiAppState } from '../store/Store';\n\ntype PfSpinnerProps = {\n  isLoading?: boolean;\n};\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  isLoading: state.globalState.loadingCounter > 0\n});\n\nexport const PfSpinner: React.FunctionComponent<PfSpinnerProps> = props => {\n  const { isLoading } = props;\n  // It is more than likely it won't have any children; but it could.\n  return isLoading ? <Spinner id=\"loading_kiali_spinner\" size={'lg'} /> : <></>;\n};\n\n// hook up to Redux for our State to be mapped to props\nconst PfSpinnerContainer = connect(mapStateToProps, null)(PfSpinner);\nexport default PfSpinnerContainer;\n"]},"metadata":{},"sourceType":"module"}
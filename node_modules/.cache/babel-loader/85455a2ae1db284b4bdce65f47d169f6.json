{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioStatus/IstioStatusList.tsx\";\nimport * as React from 'react';\nimport { List, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { Status } from '../../types/IstioStatus';\nimport IstioComponentStatus from './IstioComponentStatus';\nimport { PFColors } from '../Pf/PfColors';\n\nvar IstioStatusList = /*#__PURE__*/function (_React$Component) {\n  _inherits(IstioStatusList, _React$Component);\n\n  var _super = _createSuper(IstioStatusList);\n\n  function IstioStatusList() {\n    var _this;\n\n    _classCallCheck(this, IstioStatusList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.nonhealthyComponents = function () {\n      return _this.props.status.filter(function (c) {\n        return c.status !== Status.Healthy;\n      });\n    };\n\n    _this.coreComponentsStatus = function () {\n      return _this.nonhealthyComponents().filter(function (s) {\n        return s.is_core;\n      });\n    };\n\n    _this.addonComponentsStatus = function () {\n      return _this.nonhealthyComponents().filter(function (s) {\n        return !s.is_core;\n      });\n    };\n\n    _this.renderComponentList = function () {\n      var groups = {\n        core: _this.coreComponentsStatus,\n        addon: _this.addonComponentsStatus\n      };\n      return ['core', 'addon'].map(function (group) {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: 'status-' + group,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 9\n          }\n        }, groups[group]().map(function (status) {\n          return /*#__PURE__*/React.createElement(IstioComponentStatus, {\n            key: \"status-\".concat(group, \"-\").concat(status.name),\n            componentStatus: status,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 20\n            }\n          });\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(IstioStatusList, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(TextContent, {\n        style: {\n          color: PFColors.White\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, \"\\u670D\\u52A1\\u7F51\\u683C\\u7EC4\\u4EF6\\u8FD0\\u884C\\u72B6\\u6001\"), /*#__PURE__*/React.createElement(List, {\n        id: \"istio-status\",\n        \"aria-label\": \"Istio Component List\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, this.renderComponentList()));\n    }\n  }]);\n\n  return IstioStatusList;\n}(React.Component);\n\nexport default IstioStatusList;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioStatus/IstioStatusList.tsx"],"names":["React","List","Text","TextContent","TextVariants","Status","IstioComponentStatus","PFColors","IstioStatusList","nonhealthyComponents","props","status","filter","c","Healthy","coreComponentsStatus","s","is_core","addonComponentsStatus","renderComponentList","groups","core","addon","map","group","name","color","White","h4","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,WAArB,EAAkCC,YAAlC,QAAsD,wBAAtD;AACA,SAA0BC,MAA1B,QAAwC,yBAAxC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;IAMMC,e;;;;;;;;;;;;;;;;UACJC,oB,GAAuB,YAAM;AAC3B,aAAO,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAAyB,UAACC,CAAD;AAAA,eAAwBA,CAAC,CAACF,MAAF,KAAaN,MAAM,CAACS,OAA5C;AAAA,OAAzB,CAAP;AACD,K;;UAEDC,oB,GAAuB,YAAM;AAC3B,aAAO,MAAKN,oBAAL,GAA4BG,MAA5B,CAAmC,UAACI,CAAD;AAAA,eAAwBA,CAAC,CAACC,OAA1B;AAAA,OAAnC,CAAP;AACD,K;;UAEDC,qB,GAAwB,YAAM;AAC5B,aAAO,MAAKT,oBAAL,GAA4BG,MAA5B,CAAmC,UAACI,CAAD;AAAA,eAAwB,CAACA,CAAC,CAACC,OAA3B;AAAA,OAAnC,CAAP;AACD,K;;UAEDE,mB,GAAsB,YAAM;AAC1B,UAAMC,MAAM,GAAG;AACbC,QAAAA,IAAI,EAAE,MAAKN,oBADE;AAEbO,QAAAA,KAAK,EAAE,MAAKJ;AAFC,OAAf;AAKA,aAAO,CAAC,MAAD,EAAS,OAAT,EAAkBK,GAAlB,CAAsB,UAACC,KAAD,EAAmB;AAC9C,4BACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,GAAG,EAAE,YAAYA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGJ,MAAM,CAACI,KAAD,CAAN,GAAgBD,GAAhB,CAAoB,UAAAZ,MAAM,EAAI;AAC7B,8BAAO,oBAAC,oBAAD;AAAsB,YAAA,GAAG,mBAAYa,KAAZ,cAAqBb,MAAM,CAACc,IAA5B,CAAzB;AAA6D,YAAA,eAAe,EAAEd,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAFA,CADH,CADF;AAOD,OARM,CAAP;AASD,K;;;;;;;WAED,kBAAS;AACP,0BACE,oBAAC,WAAD;AAAa,QAAA,KAAK,EAAE;AAAEe,UAAAA,KAAK,EAAEnB,QAAQ,CAACoB;AAAlB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAEvB,YAAY,CAACwB,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEADF,eAEE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,cAAT;AAAwB,sBAAW,sBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKT,mBAAL,EADH,CAFF,CADF;AAQD;;;;EAvC2BnB,KAAK,CAAC6B,S;;AA0CpC,eAAerB,eAAf","sourcesContent":["import * as React from 'react';\nimport { List, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ComponentStatus, Status } from '../../types/IstioStatus';\nimport IstioComponentStatus from './IstioComponentStatus';\nimport { PFColors } from '../Pf/PfColors';\n\ntype Props = {\n  status: ComponentStatus[];\n};\n\nclass IstioStatusList extends React.Component<Props> {\n  nonhealthyComponents = () => {\n    return this.props.status.filter((c: ComponentStatus) => c.status !== Status.Healthy);\n  };\n\n  coreComponentsStatus = () => {\n    return this.nonhealthyComponents().filter((s: ComponentStatus) => s.is_core);\n  };\n\n  addonComponentsStatus = () => {\n    return this.nonhealthyComponents().filter((s: ComponentStatus) => !s.is_core);\n  };\n\n  renderComponentList = () => {\n    const groups = {\n      core: this.coreComponentsStatus,\n      addon: this.addonComponentsStatus\n    };\n\n    return ['core', 'addon'].map((group: string) => {\n      return (\n        <React.Fragment key={'status-' + group}>\n          {groups[group]().map(status => {\n            return <IstioComponentStatus key={`status-${group}-${status.name}`} componentStatus={status} />;\n          })}\n        </React.Fragment>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <TextContent style={{ color: PFColors.White }}>\n        <Text component={TextVariants.h4}>服务网格组件运行状态</Text>\n        <List id=\"istio-status\" aria-label=\"Istio Component List\">\n          {this.renderComponentList()}\n        </List>\n      </TextContent>\n    );\n  }\n}\n\nexport default IstioStatusList;\n"]},"metadata":{},"sourceType":"module"}
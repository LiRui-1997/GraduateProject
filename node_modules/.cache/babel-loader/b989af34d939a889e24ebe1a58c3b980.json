{"ast":null,"code":"export var AuthStrategy; // Stores the result of a computation:\n// hold = stop all computation and wait for a side-effect, such as a redirect\n// continue = continue...\n// success = authentication was a success, session is available\n// failure = authentication failed, session is undefined but error is available\n\n(function (AuthStrategy) {\n  AuthStrategy[\"anonymous\"] = \"anonymous\";\n  AuthStrategy[\"openshift\"] = \"openshift\";\n  AuthStrategy[\"token\"] = \"token\";\n  AuthStrategy[\"openid\"] = \"openid\";\n  AuthStrategy[\"header\"] = \"header\";\n})(AuthStrategy || (AuthStrategy = {}));\n\nexport var AuthResult;\n\n(function (AuthResult) {\n  AuthResult[\"HOLD\"] = \"hold\";\n  AuthResult[\"CONTINUE\"] = \"continue\";\n  AuthResult[\"SUCCESS\"] = \"success\";\n  AuthResult[\"FAILURE\"] = \"failure\";\n})(AuthResult || (AuthResult = {}));","map":{"version":3,"sources":["/root/kiali-ui/src/types/Auth.ts"],"names":["AuthStrategy","AuthResult"],"mappings":"AAWA,WAAYA,YAAZ,C,CAQA;AACA;AACA;AACA;AACA;;WAZYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAaZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["export interface AuthConfig {\n  authorizationEndpoint?: string;\n  logoutEndpoint?: string;\n  logoutRedirect?: string;\n  strategy: AuthStrategy;\n}\n\nexport type AuthInfo = {\n  sessionInfo: SessionInfo;\n} & AuthConfig;\n\nexport enum AuthStrategy {\n  anonymous = 'anonymous',\n  openshift = 'openshift',\n  token = 'token',\n  openid = 'openid',\n  header = 'header'\n}\n\n// Stores the result of a computation:\n// hold = stop all computation and wait for a side-effect, such as a redirect\n// continue = continue...\n// success = authentication was a success, session is available\n// failure = authentication failed, session is undefined but error is available\nexport enum AuthResult {\n  HOLD = 'hold',\n  CONTINUE = 'continue',\n  SUCCESS = 'success',\n  FAILURE = 'failure'\n}\n\nexport interface SessionInfo {\n  username?: string;\n  expiresOn?: string;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export var emptyExperimentItem = {\n  name: '',\n  phase: '',\n  targetService: '',\n  targetServiceNamespace: '',\n  status: '',\n  baseline: {\n    name: '',\n    version: '',\n    weight: 0,\n    winProbability: 0,\n    requestCount: 0\n  },\n  candidates: [],\n  namespace: '',\n  initTime: '',\n  startTime: '',\n  endTime: '',\n  winner: {\n    name: '',\n    winning_version_found: false,\n    current_best_version: '',\n    probability_of_winning_for_best_version: 0\n  },\n  experimentKind: 'Canary',\n  kind: 'Deployment'\n};\nexport var emptyExperimentDetailsInfo = {\n  experimentItem: emptyExperimentItem,\n  criterias: [],\n  trafficControl: {\n    strategy: 'check_and_increment',\n    maxIncrement: 2,\n    onTermination: 'to_winner',\n    match: {\n      http: []\n    }\n  },\n  duration: {\n    interval: '30s',\n    intervalInSecond: 30,\n    maxIterations: 100\n  },\n  networking: {\n    id: '',\n    hosts: []\n  },\n  permissions: {\n    create: true,\n    update: true,\n    delete: true\n  },\n  experimentType: 'C'\n};\nexport var initCriteria = function initCriteria() {\n  return {\n    metric: '',\n    tolerance: 200,\n    toleranceType: 'absolute',\n    stopOnFailure: false,\n    isReward: false\n  };\n};\nexport var EmptyExperimentSpec = {\n  name: '',\n  namespace: 'default',\n  apiversion: 'v1',\n  service: '',\n  baseline: '',\n  candidate: [],\n  trafficControl: {\n    algorithm: 'progressive',\n    maxIncrement: 10\n  },\n  duration: {\n    interval: '30s',\n    intervalInSecond: 30,\n    maxIterations: 10\n  },\n  criterias: [],\n  hosts: [],\n  experimentKind: 'Deployment'\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/Iter8.ts"],"names":["emptyExperimentItem","name","phase","targetService","targetServiceNamespace","status","baseline","version","weight","winProbability","requestCount","candidates","namespace","initTime","startTime","endTime","winner","winning_version_found","current_best_version","probability_of_winning_for_best_version","experimentKind","kind","emptyExperimentDetailsInfo","experimentItem","criterias","trafficControl","strategy","maxIncrement","onTermination","match","http","duration","interval","intervalInSecond","maxIterations","networking","id","hosts","permissions","create","update","delete","experimentType","initCriteria","metric","tolerance","toleranceType","stopOnFailure","isReward","EmptyExperimentSpec","apiversion","service","candidate","algorithm"],"mappings":"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","sourcesContent":["import { ResourcePermissions } from './Permissions';\n\nexport interface Iter8Info {\n  enabled: boolean;\n  supportedVersion: boolean;\n  controllerImgVersion: string;\n  analyticsImgVersion: string;\n  namespace: string;\n}\n\nexport interface Iter8CandidateStatus {\n  name: string;\n  version: string;\n  weight: number;\n  winProbability: number;\n  requestCount: number;\n  criterionAssessment?: CriterionAssessment[];\n}\n\nexport interface LowerUpper {\n  lower: number;\n  upper: number;\n}\n\nexport interface RatioStatitics {\n  improvement_over_baseline: LowerUpper;\n  probability_of_beating_baseline: number;\n  probability_of_being_best_version: number;\n  credible_interval: LowerUpper;\n}\n\nexport interface Statistics {\n  value: number;\n  ratio_statistics: RatioStatitics;\n}\n\nexport interface ThresholdAssessment {\n  threshold_breached: boolean;\n  probability_of_satisfying_threshold: number;\n}\n\nexport interface CriterionAssessment {\n  id: string;\n  metric_id: string;\n  statistics: Statistics;\n  threshold_assessment: ThresholdAssessment;\n}\n\nexport interface MetricProgressInfo {\n  name: string;\n  threshold: number;\n  thresholdType: string;\n  preferred_direction: string;\n  unit: string;\n  isReward: boolean;\n}\n\nexport interface Iter8Experiment {\n  name: string;\n  phase: string;\n  targetService: string;\n  targetServiceNamespace: string;\n  status: string;\n  baseline: Iter8CandidateStatus;\n  candidates: Iter8CandidateStatus[];\n  namespace: string;\n  initTime: string;\n  startTime: string;\n  endTime: string;\n  winner: Winner;\n  kind: string;\n  experimentKind: string;\n}\n\nexport interface Winner {\n  name: string;\n  winning_version_found: boolean;\n  current_best_version: string;\n  probability_of_winning_for_best_version: number;\n}\n\nexport interface ExpId {\n  namespace: string;\n  name: string;\n}\n\nexport interface TrafficControl {\n  strategy: string;\n  maxIncrement: number;\n  onTermination: string;\n  match: {\n    http: HttpMatch[];\n  };\n}\n\nexport interface HttpMatch {\n  headers: HeaderMatch[];\n  uri: URIMatch;\n}\n\nexport interface Duration {\n  interval: string;\n  intervalInSecond: number;\n  maxIterations: number;\n}\n\nexport interface Iter8ExpDetailsInfo {\n  experimentItem: Iter8Experiment;\n  criterias: CriteriaInfoDetail[];\n  trafficControl: TrafficControl;\n  duration: Duration;\n  networking: {\n    id: string;\n    hosts: Host[];\n  };\n  permissions: ResourcePermissions;\n  experimentType: string;\n}\n\nexport const emptyExperimentItem: Iter8Experiment = {\n  name: '',\n  phase: '',\n  targetService: '',\n  targetServiceNamespace: '',\n  status: '',\n  baseline: {\n    name: '',\n    version: '',\n    weight: 0,\n    winProbability: 0,\n    requestCount: 0\n  },\n  candidates: [],\n  namespace: '',\n  initTime: '',\n  startTime: '',\n  endTime: '',\n  winner: {\n    name: '',\n    winning_version_found: false,\n    current_best_version: '',\n    probability_of_winning_for_best_version: 0\n  },\n  experimentKind: 'Canary',\n  kind: 'Deployment'\n};\n\nexport const emptyExperimentDetailsInfo: Iter8ExpDetailsInfo = {\n  experimentItem: emptyExperimentItem,\n  criterias: [],\n  trafficControl: {\n    strategy: 'check_and_increment',\n    maxIncrement: 2,\n    onTermination: 'to_winner',\n    match: {\n      http: []\n    }\n  },\n  duration: {\n    interval: '30s',\n\n    intervalInSecond: 30,\n    maxIterations: 100\n  },\n  networking: {\n    id: '',\n    hosts: []\n  },\n  permissions: {\n    create: true,\n    update: true,\n    delete: true\n  },\n  experimentType: 'C'\n};\n\nexport type NameValuePair = {\n  name: string;\n  value: any;\n};\n\nexport interface CounterMetric {\n  name: string;\n  query_template: string;\n  preferred_direction: string;\n  unit: string;\n}\n\nexport interface Iter8Metric {\n  name: string;\n  numerator: CounterMetric;\n  denominator: CounterMetric;\n  zero_to_one: boolean;\n  preferred_direction: string;\n}\n\nexport interface CriteriaInfoDetail {\n  name: string;\n  criteria: Iter8Criteria;\n  metric: Iter8Metric;\n}\n\nexport interface Iter8Criteria {\n  metric: string;\n  tolerance: number;\n  toleranceType: string;\n  isReward: boolean;\n  stopOnFailure: boolean;\n}\n\nexport interface Criteria {\n  metric: string;\n  tolerance: number;\n  toleranceType: string;\n  stopOnFailure: boolean;\n  isReward: boolean;\n}\n\nexport const initCriteria = (): Iter8Criteria => ({\n  metric: '',\n  tolerance: 200,\n  toleranceType: 'absolute',\n  stopOnFailure: false,\n  isReward: false\n});\n\nexport interface Host {\n  name: string;\n  gateway: string;\n}\n\nexport interface HeaderMatch {\n  key: string;\n  match: string;\n  stringMatch: string;\n}\n\nexport interface URIMatch {\n  match: string;\n  stringMatch: string;\n}\n\nexport interface ExperimentAction {\n  action: string;\n  trafficSplit: [string, string][];\n}\n\nexport interface ExperimentSpec {\n  name: string;\n  namespace: string;\n  service: string;\n  apiversion: string;\n  baseline: string;\n  candidates: string[];\n  // canaryVersion: string;\n  trafficControl: TrafficControl;\n  criterias: Iter8Criteria[];\n  duration: Duration;\n  hosts: Host[];\n  routerID: string;\n  experimentKind: string;\n}\n\nexport const EmptyExperimentSpec = {\n  name: '',\n  namespace: 'default',\n  apiversion: 'v1',\n  service: '',\n  baseline: '',\n  candidate: [],\n  trafficControl: {\n    algorithm: 'progressive',\n    maxIncrement: 10\n  },\n  duration: {\n    interval: '30s',\n    intervalInSecond: 30,\n    maxIterations: 10\n  },\n  criterias: [],\n  hosts: [],\n  experimentKind: 'Deployment'\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/DebugInformation/DebugInformation.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { style } from 'typestyle';\nimport _ from 'lodash';\nimport beautify from 'json-beautify';\nimport authenticationConfig from '../../config/AuthenticationConfig';\nimport { serverConfig } from '../../config';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button, ButtonVariant, Modal } from '@patternfly/react-core';\nvar CopyStatus;\n\n(function (CopyStatus) {\n  CopyStatus[CopyStatus[\"NOT_COPIED\"] = 0] = \"NOT_COPIED\";\n  CopyStatus[CopyStatus[\"COPIED\"] = 1] = \"COPIED\";\n  CopyStatus[CopyStatus[\"OLD_COPY\"] = 2] = \"OLD_COPY\";\n})(CopyStatus || (CopyStatus = {}));\n\nvar textAreaStyle = style({\n  width: '100%',\n  height: '200px',\n  minHeight: '200px',\n  resize: 'vertical'\n});\nvar copyToClipboardOptions = {\n  message: 'We failed to automatically copy the text, please use: #{key}, Enter\\t'\n};\nexport var DebugInformation = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DebugInformation, _React$PureComponent);\n\n  var _super = _createSuper(DebugInformation);\n\n  function DebugInformation(props) {\n    var _this;\n\n    _classCallCheck(this, DebugInformation);\n\n    _this = _super.call(this, props);\n    _this.textareaRef = void 0;\n\n    _this.open = function () {\n      _this.setState({\n        show: true,\n        copyStatus: CopyStatus.NOT_COPIED\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        show: false\n      });\n    };\n\n    _this.copyCallback = function (_text, result) {\n      _this.textareaRef.current.select();\n\n      _this.setState({\n        copyStatus: result ? CopyStatus.COPIED : CopyStatus.NOT_COPIED\n      });\n    };\n\n    _this.hideAlert = function () {\n      _this.setState({\n        copyStatus: CopyStatus.NOT_COPIED\n      });\n    };\n\n    _this.renderHealthConfig = function (config) {\n      if (Array.isArray(config)) {\n        var arr = [];\n\n        var _iterator = _createForOfIteratorHelper(config),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var v = _step.value;\n            arr.push(_this.renderHealthConfig(v));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return arr;\n      }\n\n      var result = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(config); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (value.constructor.toString().includes('RegExp')) {\n          result[key] = value.toString();\n        } else if (typeof value !== 'object') {\n          result[key] = value;\n        } else {\n          result[key] = _this.renderHealthConfig(value);\n        }\n      }\n\n      return result;\n    };\n\n    _this.textareaRef = React.createRef();\n    _this.state = {\n      show: false,\n      copyStatus: CopyStatus.NOT_COPIED\n    };\n    return _this;\n  }\n\n  _createClass(DebugInformation, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState) {\n      if (this.props.appState !== prevProps.appState && this.state.copyStatus === CopyStatus.COPIED) {\n        this.setState({\n          copyStatus: CopyStatus.OLD_COPY\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var parseConfig = function parseConfig(key, value) {\n        // We have to patch some runtime properties  we don't want to serialize\n        if (['cyRef', 'summaryTarget', 'token', 'username'].includes(key)) {\n          return null;\n        }\n\n        if ('healthConfig' === key) {\n          return _this2.renderHealthConfig(value);\n        }\n\n        return value;\n      };\n\n      var renderHealthConfig = beautify({\n        healthConfig: serverConfig.healthConfig\n      }, parseConfig, 2);\n\n      var renderDebugInformation = _.memoize(function () {\n        var debugInformation = {\n          backendConfigs: {\n            authenticationConfig: authenticationConfig,\n            computedServerConfig: serverConfig\n          },\n          currentURL: window.location.href,\n          reduxState: _this2.props.appState\n        };\n        return beautify(debugInformation, parseConfig, 2);\n      });\n\n      if (!this.state.show) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        isSmall: true,\n        isOpen: this.state.show,\n        onClose: this.close,\n        title: \"Debug information\",\n        actions: [/*#__PURE__*/React.createElement(Button, {\n          onClick: this.close,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 11\n          }\n        }, \"Close\"), /*#__PURE__*/React.createElement(CopyToClipboard, {\n          onCopy: this.copyCallback,\n          text: renderDebugInformation(),\n          options: copyToClipboardOptions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          variant: ButtonVariant.primary,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }\n        }, \"Copy\"))],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }\n      }, this.state.copyStatus === CopyStatus.COPIED && /*#__PURE__*/React.createElement(Alert, {\n        style: {\n          marginBottom: '20px'\n        },\n        title: \"Debug information has been copied to your clipboard.\",\n        variant: AlertVariant.success,\n        isInline: true,\n        action: /*#__PURE__*/React.createElement(AlertActionCloseButton, {\n          onClose: this.hideAlert,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }), this.state.copyStatus === CopyStatus.OLD_COPY && /*#__PURE__*/React.createElement(Alert, {\n        style: {\n          marginBottom: '20px'\n        },\n        title: \"Debug information was copied to your clipboard, but is outdated now. It could be caused by new data received by auto refresh timers.\",\n        variant: AlertVariant.warning,\n        isInline: true,\n        action: /*#__PURE__*/React.createElement(AlertActionCloseButton, {\n          onClose: this.hideAlert,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, \"Health Config\"), /*#__PURE__*/React.createElement(\"textarea\", {\n        className: textAreaStyle,\n        readOnly: true,\n        value: renderHealthConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }, \"Please include this information when opening a bug.\"), /*#__PURE__*/React.createElement(CopyToClipboard, {\n        onCopy: this.copyCallback,\n        text: renderDebugInformation(),\n        options: copyToClipboardOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"textarea\", {\n        ref: this.textareaRef,\n        className: textAreaStyle,\n        readOnly: true,\n        value: renderDebugInformation(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return DebugInformation;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    appState: state\n  };\n};\n\nvar DebugInformationContainer = connect(mapStateToProps, null, null, {\n  forwardRef: true\n})(DebugInformation);\nexport default DebugInformationContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/DebugInformation/DebugInformation.tsx"],"names":["React","connect","CopyToClipboard","style","_","beautify","authenticationConfig","serverConfig","Alert","AlertActionCloseButton","AlertVariant","Button","ButtonVariant","Modal","CopyStatus","textAreaStyle","width","height","minHeight","resize","copyToClipboardOptions","message","DebugInformation","props","textareaRef","open","setState","show","copyStatus","NOT_COPIED","close","copyCallback","_text","result","current","select","COPIED","hideAlert","renderHealthConfig","config","Array","isArray","arr","v","push","Object","entries","key","value","constructor","toString","includes","createRef","state","prevProps","_prevState","appState","OLD_COPY","parseConfig","healthConfig","renderDebugInformation","memoize","debugInformation","backendConfigs","computedServerConfig","currentURL","window","location","href","reduxState","primary","marginBottom","success","warning","PureComponent","mapStateToProps","DebugInformationContainer","forwardRef"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,OAAOC,oBAAP,MAAiC,mCAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AAIA,SAASC,KAAT,EAAgBC,sBAAhB,EAAwCC,YAAxC,EAAsDC,MAAtD,EAA8DC,aAA9D,EAA6EC,KAA7E,QAA0F,wBAA1F;IAEKC,U;;WAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AAgBL,IAAMC,aAAa,GAAGZ,KAAK,CAAC;AAC1Ba,EAAAA,KAAK,EAAE,MADmB;AAE1BC,EAAAA,MAAM,EAAE,OAFkB;AAG1BC,EAAAA,SAAS,EAAE,OAHe;AAI1BC,EAAAA,MAAM,EAAE;AAJkB,CAAD,CAA3B;AAgBA,IAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,OAAO,EAAE;AADoB,CAA/B;AAIA,WAAaC,gBAAb;AAAA;;AAAA;;AAGE,4BAAYC,KAAZ,EAA0C;AAAA;;AAAA;;AACxC,8BAAMA,KAAN;AADwC,UAFlCC,WAEkC;;AAAA,UAM1CC,IAN0C,GAMnC,YAAM;AACX,YAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,UAAU,EAAEd,UAAU,CAACe;AAArC,OAAd;AACD,KARyC;;AAAA,UAU1CC,KAV0C,GAUlC,YAAM;AACZ,YAAKJ,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAZyC;;AAAA,UAc1CI,YAd0C,GAc3B,UAACC,KAAD,EAAgBC,MAAhB,EAAoC;AACjD,YAAKT,WAAL,CAAiBU,OAAjB,CAAyBC,MAAzB;;AACA,YAAKT,QAAL,CAAc;AAAEE,QAAAA,UAAU,EAAEK,MAAM,GAAGnB,UAAU,CAACsB,MAAd,GAAuBtB,UAAU,CAACe;AAAtD,OAAd;AACD,KAjByC;;AAAA,UAmB1CQ,SAnB0C,GAmB9B,YAAM;AAChB,YAAKX,QAAL,CAAc;AAAEE,QAAAA,UAAU,EAAEd,UAAU,CAACe;AAAzB,OAAd;AACD,KArByC;;AAAA,UA6B1CS,kBA7B0C,GA6BrB,UAACC,MAAD,EAAmD;AACtE,UAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,YAAIG,GAAG,GAAG,EAAV;;AADyB,mDAEXH,MAFW;AAAA;;AAAA;AAEzB,8DAAsB;AAAA,gBAAbI,CAAa;AACpBD,YAAAA,GAAG,CAACE,IAAJ,CAAS,MAAKN,kBAAL,CAAwBK,CAAxB,CAAT;AACD;AAJwB;AAAA;AAAA;AAAA;AAAA;;AAKzB,eAAOD,GAAP;AACD;;AACD,UAAIT,MAAM,GAAG,EAAb;;AACA,yCAAyBY,MAAM,CAACC,OAAP,CAAeP,MAAf,CAAzB,qCAAiD;AAA5C;AAAA,YAAKQ,GAAL;AAAA,YAAUC,KAAV;;AACH,YAAKA,KAAD,CAAkBC,WAAlB,CAA8BC,QAA9B,GAAyCC,QAAzC,CAAkD,QAAlD,CAAJ,EAAiE;AAC/DlB,UAAAA,MAAM,CAACc,GAAD,CAAN,GAAeC,KAAD,CAAkBE,QAAlB,EAAd;AACD,SAFD,MAEO,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AACpCf,UAAAA,MAAM,CAACc,GAAD,CAAN,GAAcC,KAAd;AACD,SAFM,MAEA;AACLf,UAAAA,MAAM,CAACc,GAAD,CAAN,GAAc,MAAKT,kBAAL,CAAwBU,KAAxB,CAAd;AACD;AACF;;AACD,aAAOf,MAAP;AACD,KAhDyC;;AAExC,UAAKT,WAAL,GAAmBxB,KAAK,CAACoD,SAAN,EAAnB;AACA,UAAKC,KAAL,GAAa;AAAE1B,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,UAAU,EAAEd,UAAU,CAACe;AAAtC,KAAb;AAHwC;AAIzC;;AAPH;AAAA;AAAA,WA0BE,4BAAmByB,SAAnB,EAAqDC,UAArD,EAAwF;AACtF,UAAI,KAAKhC,KAAL,CAAWiC,QAAX,KAAwBF,SAAS,CAACE,QAAlC,IAA8C,KAAKH,KAAL,CAAWzB,UAAX,KAA0Bd,UAAU,CAACsB,MAAvF,EAA+F;AAC7F,aAAKV,QAAL,CAAc;AAAEE,UAAAA,UAAU,EAAEd,UAAU,CAAC2C;AAAzB,SAAd;AACD;AACF;AA9BH;AAAA;AAAA,WAqDE,kBAAS;AAAA;;AACP,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAACX,GAAD,EAAcC,KAAd,EAA6B;AAC/C;AACA,YAAI,CAAC,OAAD,EAAU,eAAV,EAA2B,OAA3B,EAAoC,UAApC,EAAgDG,QAAhD,CAAyDJ,GAAzD,CAAJ,EAAmE;AACjE,iBAAO,IAAP;AACD;;AACD,YAAI,mBAAmBA,GAAvB,EAA4B;AAC1B,iBAAO,MAAI,CAACT,kBAAL,CAAwBU,KAAxB,CAAP;AACD;;AACD,eAAOA,KAAP;AACD,OATD;;AAUA,UAAMV,kBAAkB,GAAGjC,QAAQ,CACjC;AACEsD,QAAAA,YAAY,EAAEpD,YAAY,CAACoD;AAD7B,OADiC,EAIjCD,WAJiC,EAKjC,CALiC,CAAnC;;AAOA,UAAME,sBAAsB,GAAGxD,CAAC,CAACyD,OAAF,CAAU,YAAM;AAC7C,YAAMC,gBAAsC,GAAG;AAC7CC,UAAAA,cAAc,EAAE;AACdzD,YAAAA,oBAAoB,EAAEA,oBADR;AAEd0D,YAAAA,oBAAoB,EAAEzD;AAFR,WAD6B;AAK7C0D,UAAAA,UAAU,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IALiB;AAM7CC,UAAAA,UAAU,EAAE,MAAI,CAAC9C,KAAL,CAAWiC;AANsB,SAA/C;AAQA,eAAOnD,QAAQ,CAACyD,gBAAD,EAAmBJ,WAAnB,EAAgC,CAAhC,CAAf;AACD,OAV8B,CAA/B;;AAYA,UAAI,CAAC,KAAKL,KAAL,CAAW1B,IAAhB,EAAsB;AACpB,eAAO,IAAP;AACD;;AAED,0BACE,oBAAC,KAAD;AACE,QAAA,OAAO,EAAE,IADX;AAEE,QAAA,MAAM,EAAE,KAAK0B,KAAL,CAAW1B,IAFrB;AAGE,QAAA,OAAO,EAAE,KAAKG,KAHhB;AAIE,QAAA,KAAK,EAAC,mBAJR;AAKE,QAAA,OAAO,EAAE,cACP,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,KAAKA,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADO,eAEP,oBAAC,eAAD;AAAiB,UAAA,MAAM,EAAE,KAAKC,YAA9B;AAA4C,UAAA,IAAI,EAAE6B,sBAAsB,EAAxE;AAA4E,UAAA,OAAO,EAAExC,sBAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAER,aAAa,CAAC0D,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAFO,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYG,KAAKjB,KAAL,CAAWzB,UAAX,KAA0Bd,UAAU,CAACsB,MAArC,iBACC,oBAAC,KAAD;AACE,QAAA,KAAK,EAAE;AAAEmC,UAAAA,YAAY,EAAE;AAAhB,SADT;AAEE,QAAA,KAAK,EAAC,sDAFR;AAGE,QAAA,OAAO,EAAE7D,YAAY,CAAC8D,OAHxB;AAIE,QAAA,QAAQ,EAAE,IAJZ;AAKE,QAAA,MAAM,eAAE,oBAAC,sBAAD;AAAwB,UAAA,OAAO,EAAE,KAAKnC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,EAqBG,KAAKgB,KAAL,CAAWzB,UAAX,KAA0Bd,UAAU,CAAC2C,QAArC,iBACC,oBAAC,KAAD;AACE,QAAA,KAAK,EAAE;AAAEc,UAAAA,YAAY,EAAE;AAAhB,SADT;AAEE,QAAA,KAAK,EAAC,sIAFR;AAGE,QAAA,OAAO,EAAE7D,YAAY,CAAC+D,OAHxB;AAIE,QAAA,QAAQ,EAAE,IAJZ;AAKE,QAAA,MAAM,eAAE,oBAAC,sBAAD;AAAwB,UAAA,OAAO,EAAE,KAAKpC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBJ,eA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA9BF,eA+BE;AAAU,QAAA,SAAS,EAAEtB,aAArB;AAAoC,QAAA,QAAQ,EAAE,IAA9C;AAAoD,QAAA,KAAK,EAAEuB,kBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/BF,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAhCF,eAiCE,oBAAC,eAAD;AAAiB,QAAA,MAAM,EAAE,KAAKP,YAA9B;AAA4C,QAAA,IAAI,EAAE6B,sBAAsB,EAAxE;AAA4E,QAAA,OAAO,EAAExC,sBAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAU,QAAA,GAAG,EAAE,KAAKI,WAApB;AAAiC,QAAA,SAAS,EAAET,aAA5C;AAA2D,QAAA,QAAQ,EAAE,IAArE;AAA2E,QAAA,KAAK,EAAE6C,sBAAsB,EAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAjCF,CADF;AAuCD;AA9HH;;AAAA;AAAA,EAAsC5D,KAAK,CAAC0E,aAA5C;;AAiIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACtB,KAAD;AAAA,SAA2B;AACjDG,IAAAA,QAAQ,EAAEH;AADuC,GAA3B;AAAA,CAAxB;;AAIA,IAAMuB,yBAAyB,GAAG3E,OAAO,CAAC0E,eAAD,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B;AAAEE,EAAAA,UAAU,EAAE;AAAd,CAA9B,CAAP,CAA2DvD,gBAA3D,CAAlC;AAEA,eAAesD,yBAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { style } from 'typestyle';\nimport _ from 'lodash';\nimport beautify from 'json-beautify';\n\nimport authenticationConfig from '../../config/AuthenticationConfig';\nimport { serverConfig } from '../../config';\nimport { ComputedServerConfig } from '../../config/ServerConfig';\nimport { AuthConfig } from '../../types/Auth';\nimport { KialiAppState } from '../../store/Store';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button, ButtonVariant, Modal } from '@patternfly/react-core';\n\nenum CopyStatus {\n  NOT_COPIED, // We haven't copied the current output\n  COPIED, // Current output is in the clipboard\n  OLD_COPY // We copied the prev output, but there are changes in the KialiAppState\n}\n\ntype DebugInformationProps = {\n  appState: KialiAppState;\n  ref: React.RefObject<any>;\n};\n\ntype DebugInformationState = {\n  show: boolean;\n  copyStatus: CopyStatus;\n};\n\nconst textAreaStyle = style({\n  width: '100%',\n  height: '200px',\n  minHeight: '200px',\n  resize: 'vertical'\n});\n\ntype DebugInformationData = {\n  backendConfigs: {\n    authenticationConfig: AuthConfig;\n    computedServerConfig: ComputedServerConfig;\n  };\n  currentURL: string;\n  reduxState: KialiAppState;\n};\n\nconst copyToClipboardOptions = {\n  message: 'We failed to automatically copy the text, please use: #{key}, Enter\\t'\n};\n\nexport class DebugInformation extends React.PureComponent<DebugInformationProps, DebugInformationState> {\n  private textareaRef;\n\n  constructor(props: DebugInformationProps) {\n    super(props);\n    this.textareaRef = React.createRef();\n    this.state = { show: false, copyStatus: CopyStatus.NOT_COPIED };\n  }\n\n  open = () => {\n    this.setState({ show: true, copyStatus: CopyStatus.NOT_COPIED });\n  };\n\n  close = () => {\n    this.setState({ show: false });\n  };\n\n  copyCallback = (_text: string, result: boolean) => {\n    this.textareaRef.current.select();\n    this.setState({ copyStatus: result ? CopyStatus.COPIED : CopyStatus.NOT_COPIED });\n  };\n\n  hideAlert = () => {\n    this.setState({ copyStatus: CopyStatus.NOT_COPIED });\n  };\n\n  componentDidUpdate(prevProps: DebugInformationProps, _prevState: DebugInformationState) {\n    if (this.props.appState !== prevProps.appState && this.state.copyStatus === CopyStatus.COPIED) {\n      this.setState({ copyStatus: CopyStatus.OLD_COPY });\n    }\n  }\n\n  renderHealthConfig = (config: Array<any> | Object | RegExp | string) => {\n    if (Array.isArray(config)) {\n      let arr = [];\n      for (let v of config) {\n        arr.push(this.renderHealthConfig(v) as never);\n      }\n      return arr;\n    }\n    let result = {};\n    for (let [key, value] of Object.entries(config)) {\n      if ((value as Object).constructor.toString().includes('RegExp')) {\n        result[key] = (value as RegExp).toString();\n      } else if (typeof value !== 'object') {\n        result[key] = value;\n      } else {\n        result[key] = this.renderHealthConfig(value);\n      }\n    }\n    return result;\n  };\n\n  render() {\n    const parseConfig = (key: string, value: any) => {\n      // We have to patch some runtime properties  we don't want to serialize\n      if (['cyRef', 'summaryTarget', 'token', 'username'].includes(key)) {\n        return null;\n      }\n      if ('healthConfig' === key) {\n        return this.renderHealthConfig(value);\n      }\n      return value;\n    };\n    const renderHealthConfig = beautify(\n      {\n        healthConfig: serverConfig.healthConfig\n      },\n      parseConfig,\n      2\n    );\n    const renderDebugInformation = _.memoize(() => {\n      const debugInformation: DebugInformationData = {\n        backendConfigs: {\n          authenticationConfig: authenticationConfig,\n          computedServerConfig: serverConfig\n        },\n        currentURL: window.location.href,\n        reduxState: this.props.appState\n      };\n      return beautify(debugInformation, parseConfig, 2);\n    });\n\n    if (!this.state.show) {\n      return null;\n    }\n\n    return (\n      <Modal\n        isSmall={true}\n        isOpen={this.state.show}\n        onClose={this.close}\n        title=\"Debug information\"\n        actions={[\n          <Button onClick={this.close}>Close</Button>,\n          <CopyToClipboard onCopy={this.copyCallback} text={renderDebugInformation()} options={copyToClipboardOptions}>\n            <Button variant={ButtonVariant.primary}>Copy</Button>\n          </CopyToClipboard>\n        ]}\n      >\n        {this.state.copyStatus === CopyStatus.COPIED && (\n          <Alert\n            style={{ marginBottom: '20px' }}\n            title=\"Debug information has been copied to your clipboard.\"\n            variant={AlertVariant.success}\n            isInline={true}\n            action={<AlertActionCloseButton onClose={this.hideAlert} />}\n          />\n        )}\n        {this.state.copyStatus === CopyStatus.OLD_COPY && (\n          <Alert\n            style={{ marginBottom: '20px' }}\n            title=\"Debug information was copied to your clipboard, but is outdated now. It could be caused by new data received by auto refresh timers.\"\n            variant={AlertVariant.warning}\n            isInline={true}\n            action={<AlertActionCloseButton onClose={this.hideAlert} />}\n          />\n        )}\n        <span>Health Config</span>\n        <textarea className={textAreaStyle} readOnly={true} value={renderHealthConfig} />\n        <span>Please include this information when opening a bug.</span>\n        <CopyToClipboard onCopy={this.copyCallback} text={renderDebugInformation()} options={copyToClipboardOptions}>\n          <textarea ref={this.textareaRef} className={textAreaStyle} readOnly={true} value={renderDebugInformation()} />\n        </CopyToClipboard>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  appState: state\n});\n\nconst DebugInformationContainer = connect(mapStateToProps, null, null, { forwardRef: true })(DebugInformation);\n\nexport default DebugInformationContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/MessageCenter/MessageCenter.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport NotificationList from './NotificationList';\nimport { style } from 'typestyle';\nimport AlertDrawerContainer from './AlertDrawer';\nimport { MessageCenterActions } from 'actions/MessageCenterActions';\nvar notificationStyle = style({\n  position: 'relative',\n  zIndex: 500\n});\nexport var MessageCenter = /*#__PURE__*/function (_React$Component) {\n  _inherits(MessageCenter, _React$Component);\n\n  var _super = _createSuper(MessageCenter);\n\n  function MessageCenter() {\n    var _this;\n\n    _classCallCheck(this, MessageCenter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getNotificationMessages = function (groups) {\n      return groups.reduce(function (messages, group) {\n        return messages.concat(group.messages.filter(function (message) {\n          return message.show_notification;\n        }).map(function (message) {\n          return _objectSpread(_objectSpread({}, message), {}, {\n            groupId: group.id\n          });\n        }));\n      }, []);\n    };\n\n    return _this;\n  }\n\n  _createClass(MessageCenter, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: notificationStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(AlertDrawerContainer, {\n        title: this.props.drawerTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(NotificationList, {\n        messages: this.getNotificationMessages(this.props.groups),\n        onDismiss: this.props.onDismissNotification,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return MessageCenter;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    groups: state.messageCenter.groups\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDismissNotification: function onDismissNotification(message, userDismissed) {\n      if (userDismissed) {\n        dispatch(MessageCenterActions.markAsRead(message.id));\n      } else {\n        dispatch(MessageCenterActions.hideNotification(message.id));\n      }\n    }\n  };\n};\n\nvar MessageCenterContainer = connect(mapStateToProps, mapDispatchToProps)(MessageCenter);\nexport default MessageCenterContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/components/MessageCenter/MessageCenter.tsx"],"names":["React","connect","NotificationList","style","AlertDrawerContainer","MessageCenterActions","notificationStyle","position","zIndex","MessageCenter","getNotificationMessages","groups","reduce","messages","group","concat","filter","message","show_notification","map","groupId","id","props","drawerTitle","onDismissNotification","Component","mapStateToProps","state","messageCenter","mapDispatchToProps","dispatch","userDismissed","markAsRead","hideNotification","MessageCenterContainer"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,KAAT,QAAsB,WAAtB;AAEA,OAAOC,oBAAP,MAAiC,eAAjC;AAIA,SAASC,oBAAT,QAAqC,8BAArC;AAEA,IAAMC,iBAAiB,GAAGH,KAAK,CAAC;AAC9BI,EAAAA,QAAQ,EAAE,UADoB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAD,CAA/B;AAeA,WAAaC,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UAGEC,uBAHF,GAG4B,UAACC,MAAD,EAAiC;AACzD,aAAOA,MAAM,CAACC,MAAP,CAAc,UAACC,QAAD,EAAkCC,KAAlC,EAA4C;AAC/D,eAAOD,QAAQ,CAACE,MAAT,CACLD,KAAK,CAACD,QAAN,CACGG,MADH,CACU,UAACC,OAAD;AAAA,iBAAkCA,OAAO,CAACC,iBAA1C;AAAA,SADV,EAEGC,GAFH,CAEO,UAACF,OAAD;AAAA,iDAAwCA,OAAxC;AAAiDG,YAAAA,OAAO,EAAEN,KAAK,CAACO;AAAhE;AAAA,SAFP,CADK,CAAP;AAKD,OANM,EAMJ,EANI,CAAP;AAOD,KAXH;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAaE,kBAAS;AACP,0BACE;AAAK,QAAA,SAAS,EAAEf,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,oBAAD;AAAsB,QAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWC,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,gBAAD;AACE,QAAA,QAAQ,EAAE,KAAKb,uBAAL,CAA6B,KAAKY,KAAL,CAAWX,MAAxC,CADZ;AAEE,QAAA,SAAS,EAAE,KAAKW,KAAL,CAAWE,qBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AASD;AAvBH;;AAAA;AAAA,EAAmCxB,KAAK,CAACyB,SAAzC;;AA0BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA0B;AAChD,SAAO;AACLhB,IAAAA,MAAM,EAAEgB,KAAK,CAACC,aAAN,CAAoBjB;AADvB,GAAP;AAGD,CAJD;;AAMA,IAAMkB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAkE;AAC3F,SAAO;AACLN,IAAAA,qBAAqB,EAAE,+BAACP,OAAD,EAAUc,aAAV,EAA4B;AACjD,UAAIA,aAAJ,EAAmB;AACjBD,QAAAA,QAAQ,CAACzB,oBAAoB,CAAC2B,UAArB,CAAgCf,OAAO,CAACI,EAAxC,CAAD,CAAR;AACD,OAFD,MAEO;AACLS,QAAAA,QAAQ,CAACzB,oBAAoB,CAAC4B,gBAArB,CAAsChB,OAAO,CAACI,EAA9C,CAAD,CAAR;AACD;AACF;AAPI,GAAP;AASD,CAVD;;AAYA,IAAMa,sBAAsB,GAAGjC,OAAO,CAACyB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,aAA7C,CAA/B;AACA,eAAeyB,sBAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport NotificationList from './NotificationList';\nimport { style } from 'typestyle';\nimport { NotificationMessage, NotificationGroup } from '../../types/MessageCenter';\nimport AlertDrawerContainer from './AlertDrawer';\nimport { KialiAppState } from 'store/Store';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { MessageCenterActions } from 'actions/MessageCenterActions';\n\nconst notificationStyle = style({\n  position: 'relative',\n  zIndex: 500\n});\n\ntype ReduxProps = {\n  groups: NotificationGroup[];\n\n  onDismissNotification: (message: NotificationMessage, userDismissed: boolean) => void;\n};\n\ntype MessageCenterProps = ReduxProps & {\n  drawerTitle: string;\n};\n\nexport class MessageCenter extends React.Component<MessageCenterProps> {\n  // Get messages that are meant to be show as notifications (Toast), appending\n  // the groupId to allow to recognize the group they belong. (see onDismissNotification)\n  getNotificationMessages = (groups: NotificationGroup[]) => {\n    return groups.reduce((messages: NotificationMessage[], group) => {\n      return messages.concat(\n        group.messages\n          .filter((message: NotificationMessage) => message.show_notification)\n          .map((message: NotificationMessage) => ({ ...message, groupId: group.id }))\n      );\n    }, []);\n  };\n\n  render() {\n    return (\n      <div className={notificationStyle}>\n        <AlertDrawerContainer title={this.props.drawerTitle} />\n        <NotificationList\n          messages={this.getNotificationMessages(this.props.groups)}\n          onDismiss={this.props.onDismissNotification}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => {\n  return {\n    groups: state.messageCenter.groups\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    onDismissNotification: (message, userDismissed) => {\n      if (userDismissed) {\n        dispatch(MessageCenterActions.markAsRead(message.id));\n      } else {\n        dispatch(MessageCenterActions.hideNotification(message.id));\n      }\n    }\n  };\n};\n\nconst MessageCenterContainer = connect(mapStateToProps, mapDispatchToProps)(MessageCenter);\nexport default MessageCenterContainer;\n"]},"metadata":{},"sourceType":"module"}
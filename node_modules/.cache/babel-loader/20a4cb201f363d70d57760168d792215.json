{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/MTls/MeshMTLSStatus.tsx\";\nimport * as React from 'react';\nimport { MTLSIconTypes } from './MTLSIcon';\nimport { default as MTLSStatus, emptyDescriptor } from './MTLSStatus';\nimport { style } from 'typestyle';\nimport { lastRefreshAtSelector, meshWideMTLSStatusSelector, namespaceItemsSelector } from '../../store/Selectors';\nimport { connect } from 'react-redux';\nimport { MTLSStatuses } from '../../types/TLSStatus';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { MessageType } from '../../types/MessageCenter';\nimport * as API from '../../services/Api';\nimport { bindActionCreators } from 'redux';\nimport { MeshTlsActions } from '../../actions/MeshTlsActions';\nvar statusDescriptors = new Map([[MTLSStatuses.ENABLED, {\n  message: 'Mesh-wide mTLS is enabled',\n  icon: MTLSIconTypes.LOCK_FULL,\n  showStatus: true\n}], [MTLSStatuses.PARTIALLY, {\n  message: 'Mesh-wide TLS is partially enabled',\n  icon: MTLSIconTypes.LOCK_HOLLOW,\n  showStatus: true\n}], [MTLSStatuses.NOT_ENABLED, emptyDescriptor]]);\n\nvar MeshMTLSStatus = /*#__PURE__*/function (_React$Component) {\n  _inherits(MeshMTLSStatus, _React$Component);\n\n  var _super = _createSuper(MeshMTLSStatus);\n\n  function MeshMTLSStatus() {\n    var _this;\n\n    _classCallCheck(this, MeshMTLSStatus);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.fetchStatus = function () {\n      API.getMeshTls().then(function (response) {\n        return _this.props.setMeshTlsStatus(response.data);\n      }).catch(function (error) {\n        // User without namespaces can't have access to mTLS information. Reduce severity to info.\n        var informative = _this.props.namespaces && _this.props.namespaces.length < 1;\n\n        if (informative) {\n          AlertUtils.addError('Mesh-wide mTLS status feature disabled.', error, 'default', MessageType.INFO);\n        } else {\n          AlertUtils.addError('Error fetching Mesh-wide mTLS status.', error, 'default', MessageType.ERROR);\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MeshMTLSStatus, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStatus();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n        this.fetchStatus();\n      }\n    }\n  }, {\n    key: \"iconStyle\",\n    value: function iconStyle() {\n      return style({\n        marginRight: 10,\n        marginLeft: 10,\n        width: 13\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(MTLSStatus, {\n        className: this.iconStyle(),\n        status: this.props.status,\n        statusDescriptors: statusDescriptors,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return MeshMTLSStatus;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    status: meshWideMTLSStatusSelector(state),\n    lastRefreshAt: lastRefreshAtSelector(state),\n    namespaces: namespaceItemsSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setMeshTlsStatus: bindActionCreators(MeshTlsActions.setinfo, dispatch)\n  };\n};\n\nvar MeshMTLSSatutsConnected = connect(mapStateToProps, mapDispatchToProps)(MeshMTLSStatus);\nexport default MeshMTLSSatutsConnected;","map":{"version":3,"sources":["/root/kiali-ui/src/components/MTls/MeshMTLSStatus.tsx"],"names":["React","MTLSIconTypes","default","MTLSStatus","emptyDescriptor","style","lastRefreshAtSelector","meshWideMTLSStatusSelector","namespaceItemsSelector","connect","MTLSStatuses","AlertUtils","MessageType","API","bindActionCreators","MeshTlsActions","statusDescriptors","Map","ENABLED","message","icon","LOCK_FULL","showStatus","PARTIALLY","LOCK_HOLLOW","NOT_ENABLED","MeshMTLSStatus","fetchStatus","getMeshTls","then","response","props","setMeshTlsStatus","data","catch","error","informative","namespaces","length","addError","INFO","ERROR","prevProps","lastRefreshAt","marginRight","marginLeft","width","iconStyle","status","Component","mapStateToProps","state","mapDispatchToProps","dispatch","setinfo","MeshMTLSSatutsConnected"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { KialiAppState } from '../../store/Store';\nimport { MTLSIconTypes } from './MTLSIcon';\nimport { default as MTLSStatus, emptyDescriptor, StatusDescriptor } from './MTLSStatus';\nimport { style } from 'typestyle';\nimport { lastRefreshAtSelector, meshWideMTLSStatusSelector, namespaceItemsSelector } from '../../store/Selectors';\nimport { connect } from 'react-redux';\nimport { MTLSStatuses, TLSStatus } from '../../types/TLSStatus';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { MessageType } from '../../types/MessageCenter';\nimport * as API from '../../services/Api';\nimport { KialiDispatch } from '../../types/Redux';\nimport { bindActionCreators } from 'redux';\nimport { MeshTlsActions } from '../../actions/MeshTlsActions';\nimport { TimeInMilliseconds } from '../../types/Common';\nimport Namespace from '../../types/Namespace';\n\ntype ReduxProps = {\n  lastRefreshAt: TimeInMilliseconds;\n  setMeshTlsStatus: (meshStatus: TLSStatus) => void;\n  namespaces: Namespace[] | undefined;\n  status: string;\n};\n\ntype Props = ReduxProps & {};\n\nconst statusDescriptors = new Map<string, StatusDescriptor>([\n  [\n    MTLSStatuses.ENABLED,\n    {\n      message: 'Mesh-wide mTLS is enabled',\n      icon: MTLSIconTypes.LOCK_FULL,\n      showStatus: true\n    }\n  ],\n  [\n    MTLSStatuses.PARTIALLY,\n    {\n      message: 'Mesh-wide TLS is partially enabled',\n      icon: MTLSIconTypes.LOCK_HOLLOW,\n      showStatus: true\n    }\n  ],\n  [MTLSStatuses.NOT_ENABLED, emptyDescriptor]\n]);\n\nclass MeshMTLSStatus extends React.Component<Props> {\n  componentDidMount() {\n    this.fetchStatus();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.lastRefreshAt !== prevProps.lastRefreshAt) {\n      this.fetchStatus();\n    }\n  }\n\n  fetchStatus = () => {\n    API.getMeshTls()\n      .then(response => {\n        return this.props.setMeshTlsStatus(response.data);\n      })\n      .catch(error => {\n        // User without namespaces can't have access to mTLS information. Reduce severity to info.\n        const informative = this.props.namespaces && this.props.namespaces.length < 1;\n        if (informative) {\n          AlertUtils.addError('Mesh-wide mTLS status feature disabled.', error, 'default', MessageType.INFO);\n        } else {\n          AlertUtils.addError('Error fetching Mesh-wide mTLS status.', error, 'default', MessageType.ERROR);\n        }\n      });\n  };\n\n  iconStyle() {\n    return style({\n      marginRight: 10,\n      marginLeft: 10,\n      width: 13\n    });\n  }\n\n  render() {\n    return <MTLSStatus className={this.iconStyle()} status={this.props.status} statusDescriptors={statusDescriptors} />;\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  status: meshWideMTLSStatusSelector(state),\n  lastRefreshAt: lastRefreshAtSelector(state),\n  namespaces: namespaceItemsSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: KialiDispatch) => ({\n  setMeshTlsStatus: bindActionCreators(MeshTlsActions.setinfo, dispatch)\n});\n\nconst MeshMTLSSatutsConnected = connect(mapStateToProps, mapDispatchToProps)(MeshMTLSStatus);\nexport default MeshMTLSSatutsConnected;\n"]},"metadata":{},"sourceType":"module"}
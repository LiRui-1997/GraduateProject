{"ast":null,"code":"// There are two ways in which we use the PF color palette. Either way we want to use the standard\n// PF colors, and moreover, use the defined color variables such that any changes made by PF are\n// picked up when the PF version is updated.  The preferred, standard way, is in CSS styling.  In\n// those cases we can directly let CSS resolve the PF var. So, whenever possible use the PFColors\n// enum below.  In certain cases (like in cytoscape), we need the explicit hex value.  In that case\n// we must actually get the computed value.  We do this as soon as we get an initial document (in\n// StartupInitializer.tsx). In those cases use PFColorVals.  Note that those values are not\n// available until they can be computed, so don't use them in constants or before they are\n// available.\n// Colors used by Kiali for CSS styling\nexport var PFColors; // The hex string value of the PF CSS variable\n\n(function (PFColors) {\n  PFColors[\"Black100\"] = \"var(--pf-global--palette--black-100)\";\n  PFColors[\"Black150\"] = \"var(--pf-global--palette--black-150)\";\n  PFColors[\"Black200\"] = \"var(--pf-global--palette--black-200)\";\n  PFColors[\"Black600\"] = \"var(--pf-global--palette--black-600)\";\n  PFColors[\"Black700\"] = \"var(--pf-global--palette--black-700)\";\n  PFColors[\"Black800\"] = \"var(--pf-global--palette--black-800)\";\n  PFColors[\"Black1000\"] = \"var(--pf-global--palette--black-1000)\";\n  PFColors[\"Blue200\"] = \"var(--pf-global--palette--blue-200)\";\n  PFColors[\"Blue300\"] = \"var(--pf-global--palette--blue-300)\";\n  PFColors[\"Blue400\"] = \"var(--pf-global--palette--blue-400)\";\n  PFColors[\"Blue500\"] = \"var(--pf-global--palette--blue-500)\";\n  PFColors[\"Cyan300\"] = \"var(--pf-global--palette--cyan-300)\";\n  PFColors[\"Gold400\"] = \"var(--pf-global--palette--gold-400)\";\n  PFColors[\"Green400\"] = \"var(--pf-global--palette--green-400)\";\n  PFColors[\"Green500\"] = \"var(--pf-global--palette--green-500)\";\n  PFColors[\"LightBlue400\"] = \"var(--pf-global--palette--light-blue-400)\";\n  PFColors[\"LightGreen400\"] = \"var(--pf-global--palette--light-green-400)\";\n  PFColors[\"Orange400\"] = \"var(--pf-global--palette--orange-400)\";\n  PFColors[\"Purple100\"] = \"var(--pf-global--palette--purple-100)\";\n  PFColors[\"Purple400\"] = \"var(--pf-global--palette--purple-400)\";\n  PFColors[\"Red100\"] = \"var(--pf-global--palette--red-100)\";\n  PFColors[\"Red200\"] = \"var(--pf-global--palette--red-200)\";\n  PFColors[\"Red500\"] = \"var(--pf-global--palette--red-500)\";\n  PFColors[\"White\"] = \"var(--pf-global--palette--white)\";\n  PFColors[\"Active\"] = \"var(--pf-global--active-color--400)\";\n  PFColors[\"ActiveText\"] = \"var(--pf-global--primary-color--200)\";\n  PFColors[\"Badge\"] = \"var(--pf-global--palette--blue-200)\";\n  PFColors[\"Replay\"] = \"var(--pf-global--active-color--300)\";\n  PFColors[\"Danger\"] = \"var(--pf-global--danger-color--100)\";\n  PFColors[\"Info\"] = \"var(--pf-global--info-color--100)\";\n  PFColors[\"InfoBackground\"] = \"var(--pf-global--info-color--200)\";\n  PFColors[\"Success\"] = \"#3e8635\";\n  PFColors[\"SuccessBackground\"] = \"var(--pf-global--success-color--200)\";\n  PFColors[\"Warning\"] = \"var(--pf-global--warning-color--100)\";\n  PFColors[\"ChartDanger\"] = \"var(--pf-global--danger-color--300)\";\n  PFColors[\"ChartOther\"] = \"var(--pf-global--palette-black-1000)\";\n  PFColors[\"ChartWarning\"] = \"var(--pf-global--danger-color--100)\";\n})(PFColors || (PFColors = {}));\n\nexport var PFColorVals;\nexport var setPFColorVals = function setPFColorVals(element) {\n  PFColorVals = {\n    // color values used by kiali\n    Black100: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-100'),\n    Black200: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-200'),\n    Black400: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-400'),\n    Black500: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-500'),\n    Black600: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-600'),\n    Black1000: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-1000'),\n    Blue50: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-50'),\n    Blue300: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-300'),\n    Blue600: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-600'),\n    Gold400: getComputedStyle(element).getPropertyValue('--pf-global--palette--gold-400'),\n    Green400: getComputedStyle(element).getPropertyValue('--pf-global--palette--green-400'),\n    Purple200: getComputedStyle(element).getPropertyValue('--pf-global--palette--purple-200'),\n    White: getComputedStyle(element).getPropertyValue('--pf-global--palette--white'),\n    // status color values used by kiali\n    Danger: getComputedStyle(element).getPropertyValue('--pf-global--danger-color--100'),\n    Success: '#3E8635',\n    // TODO: PF var is wrong, use var when fixed 'var(--pf-global--success-color--100)',\n    Warning: getComputedStyle(element).getPropertyValue('--pf-global--warning-color--100')\n  };\n};","map":{"version":3,"sources":["/root/kiali-ui/src/components/Pf/PfColors.tsx"],"names":["PFColors","PFColorVals","setPFColorVals","element","Black100","getComputedStyle","getPropertyValue","Black200","Black400","Black500","Black600","Black1000","Blue50","Blue300","Blue600","Gold400","Green400","Purple200","White","Danger","Success","Warning"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,WAAYA,QAAZ,C,CA8CA;;WA9CYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAuEZ,OAAO,IAAIC,WAAJ;AAEP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAsB;AAClDF,EAAAA,WAAW,GAAG;AACZ;AACAG,IAAAA,QAAQ,EAAEC,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CAFE;AAGZC,IAAAA,QAAQ,EAAEF,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CAHE;AAIZE,IAAAA,QAAQ,EAAEH,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CAJE;AAKZG,IAAAA,QAAQ,EAAEJ,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CALE;AAMZI,IAAAA,QAAQ,EAAEL,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CANE;AAOZK,IAAAA,SAAS,EAAEN,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,kCAA3C,CAPC;AAQZM,IAAAA,MAAM,EAAEP,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,+BAA3C,CARI;AASZO,IAAAA,OAAO,EAAER,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,gCAA3C,CATG;AAUZQ,IAAAA,OAAO,EAAET,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,gCAA3C,CAVG;AAWZS,IAAAA,OAAO,EAAEV,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,gCAA3C,CAXG;AAYZU,IAAAA,QAAQ,EAAEX,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C,CAZE;AAaZW,IAAAA,SAAS,EAAEZ,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,kCAA3C,CAbC;AAcZY,IAAAA,KAAK,EAAEb,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,6BAA3C,CAdK;AAgBZ;AACAa,IAAAA,MAAM,EAAEd,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,gCAA3C,CAjBI;AAkBZc,IAAAA,OAAO,EAAE,SAlBG;AAkBQ;AACpBC,IAAAA,OAAO,EAAEhB,gBAAgB,CAACF,OAAD,CAAhB,CAA0BG,gBAA1B,CAA2C,iCAA3C;AAnBG,GAAd;AAqBD,CAtBM","sourcesContent":["// There are two ways in which we use the PF color palette. Either way we want to use the standard\n// PF colors, and moreover, use the defined color variables such that any changes made by PF are\n// picked up when the PF version is updated.  The preferred, standard way, is in CSS styling.  In\n// those cases we can directly let CSS resolve the PF var. So, whenever possible use the PFColors\n// enum below.  In certain cases (like in cytoscape), we need the explicit hex value.  In that case\n// we must actually get the computed value.  We do this as soon as we get an initial document (in\n// StartupInitializer.tsx). In those cases use PFColorVals.  Note that those values are not\n// available until they can be computed, so don't use them in constants or before they are\n// available.\n\n// Colors used by Kiali for CSS styling\nexport enum PFColors {\n  Black100 = 'var(--pf-global--palette--black-100)',\n  Black150 = 'var(--pf-global--palette--black-150)', // use instead of GrayBackground\n  Black200 = 'var(--pf-global--palette--black-200)',\n  Black600 = 'var(--pf-global--palette--black-600)', // use instead of Gray\n  Black700 = 'var(--pf-global--palette--black-700)',\n  Black800 = 'var(--pf-global--palette--black-800)',\n  Black1000 = 'var(--pf-global--palette--black-1000)',\n  Blue200 = 'var(--pf-global--palette--blue-200)',\n  Blue300 = 'var(--pf-global--palette--blue-300)',\n  Blue400 = 'var(--pf-global--palette--blue-400)',\n  Blue500 = 'var(--pf-global--palette--blue-500)',\n  Cyan300 = 'var(--pf-global--palette--cyan-300)',\n  Gold400 = 'var(--pf-global--palette--gold-400)',\n  Green400 = 'var(--pf-global--palette--green-400)',\n  Green500 = 'var(--pf-global--palette--green-500)',\n  LightBlue400 = 'var(--pf-global--palette--light-blue-400)',\n  LightGreen400 = 'var(--pf-global--palette--light-green-400)',\n  Orange400 = 'var(--pf-global--palette--orange-400)',\n  Purple100 = 'var(--pf-global--palette--purple-100)',\n  Purple400 = 'var(--pf-global--palette--purple-400)',\n  Red100 = 'var(--pf-global--palette--red-100)',\n  Red200 = 'var(--pf-global--palette--red-200)',\n  Red500 = 'var(--pf-global--palette--red-500)',\n  White = 'var(--pf-global--palette--white)',\n\n  // semantic kiali colors\n  Active = 'var(--pf-global--active-color--400)',\n  ActiveText = 'var(--pf-global--primary-color--200)',\n  Badge = 'var(--pf-global--palette--blue-200)', // UX-assigned badge background\n  Replay = 'var(--pf-global--active-color--300)', // also, see dep in _Time.scss\n\n  // Health/Alert colors https://www.patternfly.org/v4/design-guidelines/styles/colors\n  Danger = 'var(--pf-global--danger-color--100)',\n  Info = 'var(--pf-global--info-color--100)',\n  InfoBackground = 'var(--pf-global--info-color--200)',\n  Success = '#3e8635', // TODO: PF var is wrong, use var when fixed 'var(--pf-global--success-color--100)',\n  SuccessBackground = 'var(--pf-global--success-color--200)',\n  Warning = 'var(--pf-global--warning-color--100)',\n\n  // chart-specific color values, for rates charts where 4xx is really Danger not Warning\n  ChartDanger = 'var(--pf-global--danger-color--300)',\n  ChartOther = 'var(--pf-global--palette-black-1000)',\n  ChartWarning = 'var(--pf-global--danger-color--100)'\n}\n\n// The hex string value of the PF CSS variable\nexport type PFColorVal = string;\n\n// Color values used by Kiali outside of CSS (i.e. when we must have the actual hex value)\nexport type PFColorValues = {\n  Black100: PFColorVal;\n  Black200: PFColorVal;\n  Black400: PFColorVal;\n  Black500: PFColorVal;\n  Black600: PFColorVal;\n  Black1000: PFColorVal;\n  Blue50: PFColorVal;\n  Blue300: PFColorVal;\n  Blue600: PFColorVal;\n  Gold400: PFColorVal;\n  Green400: PFColorVal;\n  Purple200: PFColorVal;\n  White: PFColorVal;\n\n  // Health/Alert colors https://www.patternfly.org/v4/design-guidelines/styles/colors\n  Danger: PFColorVal;\n  Success: PFColorVal;\n  Warning: PFColorVal;\n};\n\nexport let PFColorVals: PFColorValues;\n\nexport const setPFColorVals = (element: Element) => {\n  PFColorVals = {\n    // color values used by kiali\n    Black100: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-100'),\n    Black200: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-200'),\n    Black400: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-400'),\n    Black500: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-500'),\n    Black600: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-600'),\n    Black1000: getComputedStyle(element).getPropertyValue('--pf-global--palette--black-1000'),\n    Blue50: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-50'),\n    Blue300: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-300'),\n    Blue600: getComputedStyle(element).getPropertyValue('--pf-global--palette--blue-600'),\n    Gold400: getComputedStyle(element).getPropertyValue('--pf-global--palette--gold-400'),\n    Green400: getComputedStyle(element).getPropertyValue('--pf-global--palette--green-400'),\n    Purple200: getComputedStyle(element).getPropertyValue('--pf-global--palette--purple-200'),\n    White: getComputedStyle(element).getPropertyValue('--pf-global--palette--white'),\n\n    // status color values used by kiali\n    Danger: getComputedStyle(element).getPropertyValue('--pf-global--danger-color--100'),\n    Success: '#3E8635', // TODO: PF var is wrong, use var when fixed 'var(--pf-global--success-color--100)',\n    Warning: getComputedStyle(element).getPropertyValue('--pf-global--warning-color--100')\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
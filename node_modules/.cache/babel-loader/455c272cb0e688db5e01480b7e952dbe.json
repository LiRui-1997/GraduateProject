{"ast":null,"code":"export var statsQueryToKey = function statsQueryToKey(q) {\n  return genStatsKey(q.target, q.peerTarget, q.direction, q.interval);\n}; // !! genStatsKey HAS to mirror backend's models.MetricsStatsQuery#GenKey in models/metrics.go\n\nexport var genStatsKey = function genStatsKey(target, peer, direction, interval) {\n  var peerKey = peer ? genTargetKey(peer) : '';\n  return \"\".concat(genTargetKey(target), \":\").concat(peerKey, \":\").concat(direction, \":\").concat(interval);\n};\n\nvar genTargetKey = function genTargetKey(target) {\n  return \"\".concat(target.namespace, \":\").concat(target.kind, \":\").concat(target.name);\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/MetricsOptions.ts"],"names":["statsQueryToKey","q","genStatsKey","target","peerTarget","direction","interval","peer","peerKey","genTargetKey","namespace","kind","name"],"mappings":"AAiDA,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD;AAAA,SAA0BC,WAAW,CAACD,CAAC,CAACE,MAAH,EAAWF,CAAC,CAACG,UAAb,EAAyBH,CAAC,CAACI,SAA3B,EAAsCJ,CAAC,CAACK,QAAxC,CAArC;AAAA,CAAxB,C,CAEP;;AACA,OAAO,IAAMJ,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAiBI,IAAjB,EAA2CF,SAA3C,EAA8DC,QAA9D,EAA2F;AACpH,MAAME,OAAO,GAAGD,IAAI,GAAGE,YAAY,CAACF,IAAD,CAAf,GAAwB,EAA5C;AACA,mBAAUE,YAAY,CAACN,MAAD,CAAtB,cAAkCK,OAAlC,cAA6CH,SAA7C,cAA0DC,QAA1D;AACD,CAHM;;AAKP,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACN,MAAD,EAA4B;AAC/C,mBAAUA,MAAM,CAACO,SAAjB,cAA8BP,MAAM,CAACQ,IAArC,cAA6CR,MAAM,CAACS,IAApD;AACD,CAFD","sourcesContent":["import { TargetKind } from './Common';\n\nexport interface MetricsQuery {\n  rateInterval?: string;\n  rateFunc?: string;\n  queryTime?: number;\n  duration?: number;\n  step?: number;\n  quantiles?: string[];\n  avg?: boolean;\n  byLabels?: string[];\n}\n\nexport interface DashboardQuery extends MetricsQuery {\n  rawDataAggregator?: Aggregator;\n  labelsFilters?: string;\n  additionalLabels?: string;\n  workload?: string;\n  workloadType?: string;\n}\n\nexport type Aggregator = 'sum' | 'avg' | 'min' | 'max' | 'stddev' | 'stdvar';\n\nexport interface IstioMetricsOptions extends MetricsQuery {\n  direction: Direction;\n  filters?: string[];\n  requestProtocol?: string;\n  reporter: Reporter;\n}\n\nexport type Reporter = 'source' | 'destination';\nexport type Direction = 'inbound' | 'outbound';\n\nexport interface Target {\n  namespace: string;\n  name: string;\n  kind: TargetKind;\n}\n\nexport interface MetricsStatsQuery {\n  target: Target;\n  peerTarget?: Target;\n  queryTime: number;\n  interval: string;\n  direction: Direction;\n  avg: boolean;\n  quantiles: string[];\n}\n\nexport const statsQueryToKey = (q: MetricsStatsQuery) => genStatsKey(q.target, q.peerTarget, q.direction, q.interval);\n\n// !! genStatsKey HAS to mirror backend's models.MetricsStatsQuery#GenKey in models/metrics.go\nexport const genStatsKey = (target: Target, peer: Target | undefined, direction: string, interval: string): string => {\n  const peerKey = peer ? genTargetKey(peer) : '';\n  return `${genTargetKey(target)}:${peerKey}:${direction}:${interval}`;\n};\n\nconst genTargetKey = (target: Target): string => {\n  return `${target.namespace}:${target.kind}:${target.name}`;\n};\n"]},"metadata":{},"sourceType":"module"}
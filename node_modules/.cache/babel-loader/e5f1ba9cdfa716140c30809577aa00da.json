{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentHostForm.tsx\";\nimport { Table, TableBody, TableHeader, wrappable } from '@patternfly/react-table';\nimport { initCriteria } from '../../../../types/Iter8';\nimport * as React from 'react';\nimport { Button, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { OnRemoveFromListOptions } from './ExperimentCreatePage';\nvar headerCells = [{\n  title: 'Gateway name',\n  transforms: [wrappable],\n  props: {}\n}, {\n  title: 'Host name',\n  transforms: [wrappable],\n  props: {}\n}, {\n  title: '',\n  props: {}\n}];\nexport var initHost = function initHost(gw) {\n  return {\n    addHost: {\n      name: '',\n      gateway: gw\n    },\n    validName: false\n  };\n}; // Create Success Criteria, can be multiple with same metric, but different sampleSize, etc...\n\nvar ExperimentHostForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentHostForm, _React$Component);\n\n  var _super = _createSuper(ExperimentHostForm);\n\n  function ExperimentHostForm(props) {\n    var _this;\n\n    _classCallCheck(this, ExperimentHostForm);\n\n    _this = _super.call(this, props);\n\n    _this.actionResolver = function (_, _ref) {\n      var rowIndex = _ref.rowIndex;\n      var removeAction = {\n        title: 'Remove Host',\n        onClick: function onClick(_, rowIndex) {\n          _this.props.onRemove(OnRemoveFromListOptions.Host, rowIndex);\n        }\n      };\n\n      if (rowIndex < _this.props.hosts.length) {\n        return [removeAction];\n      }\n\n      return [];\n    };\n\n    _this.loadHostName = function (gw) {\n      _this.setState(function (prevState) {\n        return {\n          addHost: {\n            name: prevState.addHost.name,\n            gateway: gw\n          },\n          validName: true\n        };\n      });\n    };\n\n    _this.onAddName = function (value) {\n      _this.setState(function (prevState) {\n        return {\n          addHost: {\n            name: value.trim(),\n            gateway: prevState.addHost.gateway\n          },\n          validName: true\n        };\n      });\n    };\n\n    _this.onAddGateway = function (value, _) {\n      _this.setState(function (prevState) {\n        return {\n          addHost: {\n            name: prevState.addHost.name,\n            gateway: value.trim()\n          },\n          validName: true\n        };\n      });\n    };\n\n    _this.onAddHost = function () {\n      _this.props.onAdd(initCriteria(), _this.state.addHost, null);\n\n      _this.setState({\n        addHost: {\n          name: '',\n          gateway: ''\n        }\n      });\n    };\n\n    if (_this.props.gateways.length > 0) {\n      _this.state = initHost(_this.props.gateways[0]);\n    } else {\n      _this.state = initHost('');\n    }\n\n    return _this;\n  }\n\n  _createClass(ExperimentHostForm, [{\n    key: \"rows\",\n    value: function rows() {\n      var _this2 = this;\n\n      var hostlist = [];\n      hostlist.push('-- select hostname --');\n\n      if (this.props.hostsOfGateway.length > 0) {\n        this.props.hostsOfGateway.forEach(function (hs) {\n          if (_this2.state.addHost.gateway !== '') {\n            if (hs.gateway === _this2.state.addHost.gateway) hostlist.push(hs.name);\n          } else {\n            if (hs.gateway === _this2.props.gateways[0]) hostlist.push(hs.name);\n          }\n        });\n      }\n\n      return this.props.hosts.map(function (host, i) {\n        return {\n          key: 'host' + i,\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, host.gateway), /*#__PURE__*/React.createElement(React.Fragment, null, host.name), '']\n        };\n      }).concat([{\n        key: 'hostNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n          id: \"gateway\",\n          value: this.state.addHost.gateway,\n          placeholder: \"Baseline Deployment\",\n          onChange: function onChange(gw) {\n            return _this2.loadHostName(gw);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }\n        }, this.props.gateways.map(function (gw, index) {\n          return /*#__PURE__*/React.createElement(FormSelectOption, {\n            label: gw,\n            key: 'gateway' + index,\n            value: gw,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }\n          });\n        }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n          id: \"name\",\n          value: this.state.addHost.name,\n          placeholder: \"Host\",\n          onChange: function onChange(host) {\n            return _this2.onAddName(host);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }\n        }, hostlist.map(function (host, index) {\n          return /*#__PURE__*/React.createElement(FormSelectOption, {\n            label: host,\n            key: 'host' + index,\n            value: host,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }\n          });\n        }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          id: \"addHostBtn\",\n          \"aria-label\": \"slider-text\",\n          variant: \"secondary\",\n          isDisabled: this.state.addHost.gateway.length === 0 || this.state.addHost.name.length === 0,\n          onClick: this.onAddHost,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }\n        }, \"Add this Host\"))]\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Host / Gateway\",\n        cells: headerCells,\n        rows: this.rows() // @ts-ignore\n        ,\n        actionResolver: this.actionResolver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return ExperimentHostForm;\n}(React.Component);\n\nexport default ExperimentHostForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentHostForm.tsx"],"names":["Table","TableBody","TableHeader","wrappable","initCriteria","React","Button","FormSelect","FormSelectOption","OnRemoveFromListOptions","headerCells","title","transforms","props","initHost","gw","addHost","name","gateway","validName","ExperimentHostForm","actionResolver","_","rowIndex","removeAction","onClick","onRemove","Host","hosts","length","loadHostName","setState","prevState","onAddName","value","trim","onAddGateway","onAddHost","onAdd","state","gateways","hostlist","push","hostsOfGateway","forEach","hs","map","host","i","key","cells","concat","index","rows","Component"],"mappings":"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","sourcesContent":["import { ICell, Table, TableBody, TableHeader, wrappable } from '@patternfly/react-table';\nimport { Criteria, Host, initCriteria } from '../../../../types/Iter8';\nimport * as React from 'react';\nimport { Button, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { OnRemoveFromListOptions } from './ExperimentCreatePage';\n\nconst headerCells: ICell[] = [\n  {\n    title: 'Gateway name',\n    transforms: [wrappable],\n    props: {}\n  },\n  {\n    title: 'Host name',\n    transforms: [wrappable],\n    props: {}\n  },\n  {\n    title: '',\n    props: {}\n  }\n];\n\ntype Props = {\n  hosts: Host[];\n  hostsOfGateway: Host[];\n  gateways: string[];\n  onAdd: (criteria: Criteria, host: Host, match: any) => void;\n  onRemove: (type: OnRemoveFromListOptions, index: number) => void;\n};\n\nexport type HostState = {\n  addHost: Host;\n  validName: boolean;\n};\n\nexport const initHost = (gw: string): HostState => ({\n  addHost: {\n    name: '',\n    gateway: gw\n  },\n  validName: false\n});\n\n// Create Success Criteria, can be multiple with same metric, but different sampleSize, etc...\nclass ExperimentHostForm extends React.Component<Props, HostState> {\n  constructor(props: Props) {\n    super(props);\n    if (this.props.gateways.length > 0) {\n      this.state = initHost(this.props.gateways[0]);\n    } else {\n      this.state = initHost('');\n    }\n  }\n\n  actionResolver = (_, { rowIndex }) => {\n    const removeAction = {\n      title: 'Remove Host',\n      onClick: (_, rowIndex) => {\n        this.props.onRemove(OnRemoveFromListOptions.Host, rowIndex);\n      }\n    };\n    if (rowIndex < this.props.hosts.length) {\n      return [removeAction];\n    }\n    return [];\n  };\n\n  loadHostName = (gw: string) => {\n    this.setState(prevState => ({\n      addHost: {\n        name: prevState.addHost.name,\n        gateway: gw\n      },\n      validName: true\n    }));\n  };\n\n  onAddName = (value: string) => {\n    this.setState(prevState => ({\n      addHost: {\n        name: value.trim(),\n        gateway: prevState.addHost.gateway\n      },\n      validName: true\n    }));\n  };\n\n  onAddGateway = (value: string, _) => {\n    this.setState(prevState => ({\n      addHost: {\n        name: prevState.addHost.name,\n        gateway: value.trim()\n      },\n      validName: true\n    }));\n  };\n\n  onAddHost = () => {\n    this.props.onAdd(initCriteria(), this.state.addHost, null);\n    this.setState({\n      addHost: {\n        name: '',\n        gateway: ''\n      }\n    });\n  };\n\n  rows() {\n    let hostlist: string[] = [];\n    hostlist.push('-- select hostname --');\n    if (this.props.hostsOfGateway.length > 0) {\n      this.props.hostsOfGateway.forEach(hs => {\n        if (this.state.addHost.gateway !== '') {\n          if (hs.gateway === this.state.addHost.gateway) hostlist.push(hs.name);\n        } else {\n          if (hs.gateway === this.props.gateways[0]) hostlist.push(hs.name);\n        }\n      });\n    }\n\n    return this.props.hosts\n      .map((host, i) => ({\n        key: 'host' + i,\n        cells: [<>{host.gateway}</>, <>{host.name}</>, '']\n      }))\n      .concat([\n        {\n          key: 'hostNew',\n          cells: [\n            <>\n              <FormSelect\n                id=\"gateway\"\n                value={this.state.addHost.gateway}\n                placeholder=\"Baseline Deployment\"\n                onChange={gw => this.loadHostName(gw)}\n              >\n                {this.props.gateways.map((gw, index) => (\n                  <FormSelectOption label={gw} key={'gateway' + index} value={gw} />\n                ))}\n              </FormSelect>\n            </>,\n            <>\n              <FormSelect\n                id=\"name\"\n                value={this.state.addHost.name}\n                placeholder=\"Host\"\n                onChange={host => this.onAddName(host)}\n              >\n                {hostlist.map((host, index) => (\n                  <FormSelectOption label={host} key={'host' + index} value={host} />\n                ))}\n              </FormSelect>\n            </>,\n            <>\n              <Button\n                id=\"addHostBtn\"\n                aria-label=\"slider-text\"\n                variant=\"secondary\"\n                isDisabled={this.state.addHost.gateway.length === 0 || this.state.addHost.name.length === 0}\n                onClick={this.onAddHost}\n              >\n                Add this Host\n              </Button>\n            </>\n          ]\n        }\n      ]);\n  }\n\n  render() {\n    return (\n      <>\n        <Table\n          aria-label=\"Host / Gateway\"\n          cells={headerCells}\n          rows={this.rows()}\n          // @ts-ignore\n          actionResolver={this.actionResolver}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default ExperimentHostForm;\n"]},"metadata":{},"sourceType":"module"}
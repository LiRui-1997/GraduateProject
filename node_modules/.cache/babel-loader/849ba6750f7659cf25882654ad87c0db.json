{"ast":null,"code":"// First is timestamp, second is value\nexport var MetricsObjectTypes;\n\n(function (MetricsObjectTypes) {\n  MetricsObjectTypes[MetricsObjectTypes[\"SERVICE\"] = 0] = \"SERVICE\";\n  MetricsObjectTypes[MetricsObjectTypes[\"WORKLOAD\"] = 1] = \"WORKLOAD\";\n  MetricsObjectTypes[MetricsObjectTypes[\"APP\"] = 2] = \"APP\";\n})(MetricsObjectTypes || (MetricsObjectTypes = {}));","map":{"version":3,"sources":["/root/GraduateProject/src/types/Metrics.ts"],"names":["MetricsObjectTypes"],"mappings":"AAAA;AAwBA,WAAYA,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["// First is timestamp, second is value\nexport type Datapoint = [number, number];\n\nexport interface Metric {\n  labels: Labels;\n  datapoints: Datapoint[];\n  name: string;\n  stat?: string;\n}\n\nexport type IstioMetricsMap = {\n  grpc_received?: Metric[];\n  grpc_sent?: Metric[];\n  request_count?: Metric[];\n  request_error_count?: Metric[];\n  request_duration_millis?: Metric[];\n  request_throughput?: Metric[];\n  response_throughput?: Metric[];\n  request_size?: Metric[];\n  response_size?: Metric[];\n  tcp_received?: Metric[];\n  tcp_sent?: Metric[];\n};\n\nexport enum MetricsObjectTypes {\n  SERVICE,\n  WORKLOAD,\n  APP\n}\n\nexport interface MetricsStatsResult {\n  stats: MetricsStatsMap;\n  // Note: warnings here is for non-blocking errors, it's set when some stats are available, but not all, for instance due to inaccessible namespaces\n  // For more serious errors (e.g. prometheus inaccessible) the query would return an HTTP error\n  warnings?: string[];\n}\n\n// Key is built from query params, see StatsComparison.genKey. The same key needs to be generated server-side for matching.\nexport type MetricsStatsMap = { [key: string]: MetricsStats };\n\nexport interface MetricsStats {\n  responseTimes: Stat[];\n}\n\nexport interface Stat {\n  name: string;\n  value: number;\n}\n\nexport type LabelDisplayName = string;\nexport type PromLabel = string;\n\n// Collection of values for a single label, associated to a show/hide flag\nexport type SingleLabelValues = { [key: string]: boolean };\n\n// Map of all labels (using prometheus name), each with its set of values\nexport type AllPromLabelsValues = Map<PromLabel, SingleLabelValues>;\n\nexport type Labels = {\n  [key: string]: string;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Nav/Masthead/UserDropdown.tsx\";\nimport * as React from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { SessionTimeout } from '../../SessionTimeout/SessionTimeout';\nimport { config } from '../../../config';\nimport { MILLISECONDS } from '../../../types/Common';\nimport authenticationConfig from '../../../config/AuthenticationConfig';\nimport { AuthStrategy } from '../../../types/Auth';\nimport moment from 'moment';\nimport LoginThunkActions from '../../../actions/LoginThunkActions';\nimport { connect } from 'react-redux';\nimport * as API from '../../../services/Api';\n\nvar UserDropdownConnected = /*#__PURE__*/function (_React$Component) {\n  _inherits(UserDropdownConnected, _React$Component);\n\n  var _super = _createSuper(UserDropdownConnected);\n\n  function UserDropdownConnected(props) {\n    var _this;\n\n    _classCallCheck(this, UserDropdownConnected);\n\n    _this = _super.call(this, props);\n\n    _this.timeLeft = function () {\n      var expiresOn = moment(_this.props.session.expiresOn);\n\n      if (expiresOn <= moment()) {\n        _this.props.logout();\n      }\n\n      return expiresOn.diff(moment());\n    };\n\n    _this.checkSession = function () {\n      if (_this.timeLeft() < config.session.timeOutforWarningUser) {\n        _this.setState({\n          showSessionTimeOut: true\n        });\n      }\n    };\n\n    _this.handleLogout = function () {\n      if (authenticationConfig.logoutEndpoint) {\n        API.logout().then(function (_) {\n          document.getElementById('openshiftlogout').submit();\n        }).catch(function (error) {\n          var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n          console.error(\"Logout failed. \\\"kiali-token\\\" cookie may need to be cleared manually: \".concat(errorMsg));\n          document.getElementById('openshiftlogout').submit();\n        });\n      } else {\n        _this.props.logout();\n      }\n    };\n\n    _this.extendSession = function (session) {\n      _this.props.extendSession(session);\n\n      _this.setState({\n        showSessionTimeOut: false\n      });\n    };\n\n    _this.onDropdownToggle = function (isDropdownOpen) {\n      _this.setState({\n        isDropdownOpen: isDropdownOpen\n      });\n    };\n\n    _this.onDropdownSelect = function (_event) {\n      _this.setState({\n        isDropdownOpen: !_this.state.isDropdownOpen\n      });\n    };\n\n    _this.dismissHandler = function () {\n      _this.setState({\n        isSessionTimeoutDismissed: true\n      });\n    };\n\n    _this.state = {\n      showSessionTimeOut: false,\n      timeCountDownSeconds: _this.timeLeft() / MILLISECONDS,\n      isSessionTimeoutDismissed: false,\n      isDropdownOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(UserDropdownConnected, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var checkSessionTimerId = setInterval(function () {\n        _this2.checkSession();\n      }, 3000);\n      var timeLeftTimerId = setInterval(function () {\n        _this2.setState({\n          timeCountDownSeconds: _this2.timeLeft() / MILLISECONDS\n        });\n      }, 1000);\n      this.setState({\n        checkSessionTimerId: checkSessionTimerId,\n        timeLeftTimerId: timeLeftTimerId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.checkSessionTimerId) {\n        clearInterval(this.state.checkSessionTimerId);\n      }\n\n      if (this.state.timeLeftTimerId) {\n        clearInterval(this.state.timeLeftTimerId);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isDropdownOpen = this.state.isDropdownOpen;\n      var canLogout = authenticationConfig.strategy !== AuthStrategy.anonymous && authenticationConfig.strategy !== AuthStrategy.header;\n      var userDropdownItems = /*#__PURE__*/React.createElement(DropdownItem, {\n        key: 'user_logout_option',\n        onClick: this.handleLogout,\n        isDisabled: !canLogout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }\n      }, \"Logout\");\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SessionTimeout, {\n        onLogout: this.props.logout,\n        onExtendSession: this.extendSession,\n        onDismiss: this.dismissHandler,\n        show: this.state.showSessionTimeOut && !this.state.isSessionTimeoutDismissed,\n        timeOutCountDown: this.state.timeCountDownSeconds,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }), this.props.session && !canLogout && /*#__PURE__*/React.createElement(React.Fragment, null, this.props.session.username), this.props.session && canLogout && /*#__PURE__*/React.createElement(Dropdown, {\n        isPlain: true,\n        position: \"right\",\n        onSelect: this.onDropdownSelect,\n        isOpen: isDropdownOpen,\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          id: 'user-dropdown-toggle',\n          onToggle: this.onDropdownToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }\n        }, this.props.session.username),\n        dropdownItems: [userDropdownItems],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      }), authenticationConfig.strategy === AuthStrategy.openshift && authenticationConfig.logoutEndpoint && /*#__PURE__*/React.createElement(\"form\", {\n        id: \"openshiftlogout\",\n        action: authenticationConfig.logoutEndpoint,\n        method: \"post\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"hidden\",\n        name: \"then\",\n        value: authenticationConfig.logoutRedirect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return UserDropdownConnected;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    session: state.authentication.session\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    logout: function logout() {\n      return dispatch(LoginThunkActions.logout());\n    },\n    extendSession: function extendSession(session) {\n      return dispatch(LoginThunkActions.extendSession(session));\n    }\n  };\n};\n\nvar UserDropdown = connect(mapStateToProps, mapDispatchToProps)(UserDropdownConnected);\nexport default UserDropdown;","map":{"version":3,"sources":["/root/kiali-ui/src/components/Nav/Masthead/UserDropdown.tsx"],"names":["React","Dropdown","DropdownItem","DropdownToggle","SessionTimeout","config","MILLISECONDS","authenticationConfig","AuthStrategy","moment","LoginThunkActions","connect","API","UserDropdownConnected","props","timeLeft","expiresOn","session","logout","diff","checkSession","timeOutforWarningUser","setState","showSessionTimeOut","handleLogout","logoutEndpoint","then","_","document","getElementById","submit","catch","error","errorMsg","response","data","message","console","extendSession","onDropdownToggle","isDropdownOpen","onDropdownSelect","_event","state","dismissHandler","isSessionTimeoutDismissed","timeCountDownSeconds","checkSessionTimerId","setInterval","timeLeftTimerId","clearInterval","canLogout","strategy","anonymous","header","userDropdownItems","username","openshift","logoutRedirect","Component","mapStateToProps","authentication","mapDispatchToProps","dispatch","UserDropdown"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { SessionTimeout } from '../../SessionTimeout/SessionTimeout';\nimport { config } from '../../../config';\nimport { MILLISECONDS } from '../../../types/Common';\nimport { Timer } from 'globals';\nimport { KialiAppState, LoginSession } from '../../../store/Store';\nimport authenticationConfig from '../../../config/AuthenticationConfig';\nimport { AuthStrategy } from '../../../types/Auth';\nimport moment from 'moment';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from '../../../actions/KialiAppAction';\nimport LoginThunkActions from '../../../actions/LoginThunkActions';\nimport { connect } from 'react-redux';\nimport * as API from '../../../services/Api';\n\ntype UserProps = {\n  session?: LoginSession;\n  logout: () => void;\n  extendSession: (session: LoginSession) => void;\n};\n\ntype UserState = {\n  showSessionTimeOut: boolean;\n  timeCountDownSeconds: number;\n  checkSessionTimerId?: Timer;\n  timeLeftTimerId?: Timer;\n  isDropdownOpen: boolean;\n  isSessionTimeoutDismissed: boolean;\n};\n\nclass UserDropdownConnected extends React.Component<UserProps, UserState> {\n  constructor(props: UserProps) {\n    super(props);\n    this.state = {\n      showSessionTimeOut: false,\n      timeCountDownSeconds: this.timeLeft() / MILLISECONDS,\n      isSessionTimeoutDismissed: false,\n      isDropdownOpen: false\n    };\n  }\n  componentDidMount() {\n    const checkSessionTimerId = setInterval(() => {\n      this.checkSession();\n    }, 3000);\n    const timeLeftTimerId = setInterval(() => {\n      this.setState({ timeCountDownSeconds: this.timeLeft() / MILLISECONDS });\n    }, 1000);\n\n    this.setState({\n      checkSessionTimerId: checkSessionTimerId,\n      timeLeftTimerId: timeLeftTimerId\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.state.checkSessionTimerId) {\n      clearInterval(this.state.checkSessionTimerId);\n    }\n    if (this.state.timeLeftTimerId) {\n      clearInterval(this.state.timeLeftTimerId);\n    }\n  }\n\n  timeLeft = (): number => {\n    const expiresOn = moment(this.props.session!.expiresOn);\n\n    if (expiresOn <= moment()) {\n      this.props.logout();\n    }\n\n    return expiresOn.diff(moment());\n  };\n\n  checkSession = () => {\n    if (this.timeLeft() < config.session.timeOutforWarningUser) {\n      this.setState({ showSessionTimeOut: true });\n    }\n  };\n\n  handleLogout = () => {\n    if (authenticationConfig.logoutEndpoint) {\n      API.logout()\n        .then(_ => {\n          (document.getElementById('openshiftlogout') as HTMLFormElement).submit();\n        })\n        .catch(error => {\n          const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n          console.error(`Logout failed. \"kiali-token\" cookie may need to be cleared manually: ${errorMsg}`);\n          (document.getElementById('openshiftlogout') as HTMLFormElement).submit();\n        });\n    } else {\n      this.props.logout();\n    }\n  };\n\n  extendSession = (session: LoginSession) => {\n    this.props.extendSession(session);\n    this.setState({ showSessionTimeOut: false });\n  };\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = _event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  render() {\n    const { isDropdownOpen } = this.state;\n    const canLogout = authenticationConfig.strategy !== AuthStrategy.anonymous &&\n      authenticationConfig.strategy !== AuthStrategy.header;\n\n    const userDropdownItems = (\n      <DropdownItem key={'user_logout_option'} onClick={this.handleLogout} isDisabled={!canLogout}>\n        Logout\n      </DropdownItem>\n    );\n    return (\n      <>\n        <SessionTimeout\n          onLogout={this.props.logout}\n          onExtendSession={this.extendSession}\n          onDismiss={this.dismissHandler}\n          show={this.state.showSessionTimeOut && !this.state.isSessionTimeoutDismissed}\n          timeOutCountDown={this.state.timeCountDownSeconds}\n        />\n        {this.props.session && !canLogout && (\n          <>{this.props.session.username}</>\n        )}\n        {this.props.session && canLogout && (\n          <Dropdown\n            isPlain={true}\n            position=\"right\"\n            onSelect={this.onDropdownSelect}\n            isOpen={isDropdownOpen}\n            toggle={\n              <DropdownToggle id={'user-dropdown-toggle'} onToggle={this.onDropdownToggle}>\n                {this.props.session.username}\n              </DropdownToggle>\n            }\n            dropdownItems={[userDropdownItems]}\n          />\n        )}\n        {authenticationConfig.strategy === AuthStrategy.openshift && authenticationConfig.logoutEndpoint && (\n          <form id=\"openshiftlogout\" action={authenticationConfig.logoutEndpoint} method=\"post\">\n            <input type=\"hidden\" name=\"then\" value={authenticationConfig.logoutRedirect} />\n          </form>\n        )}\n      </>\n    );\n  }\n\n  private dismissHandler = () => {\n    this.setState({ isSessionTimeoutDismissed: true });\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  session: state.authentication.session\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  logout: () => dispatch(LoginThunkActions.logout()),\n  extendSession: (session: LoginSession) => dispatch(LoginThunkActions.extendSession(session))\n});\n\nconst UserDropdown = connect(mapStateToProps, mapDispatchToProps)(UserDropdownConnected);\n\nexport default UserDropdown;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/IstioConfigNew/AuthorizationPolicyForm.tsx\";\nimport * as React from 'react';\nimport { FormGroup, FormSelect, FormSelectOption, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport RuleBuilder from './AuthorizationPolicyForm/RuleBuilder';\nimport RuleList from './AuthorizationPolicyForm/RuleList';\nexport var AUTHORIZACION_POLICY = 'AuthorizationPolicy';\nexport var AUTHORIZATION_POLICIES = 'authorizationpolicies';\nexport var DENY_ALL = 'DENY_ALL';\nexport var ALLOW_ALL = 'ALLOW_ALL';\nexport var RULES = 'RULES';\nexport var ALLOW = 'ALLOW';\nexport var DENY = 'DENY';\nvar HELPER_TEXT = {\n  DENY_ALL: 'Denies all requests to workloads in given namespace(s)',\n  ALLOW_ALL: 'Allows all requests to workloads in given namespace(s)',\n  RULES: 'Builds an Authorization Policy based on Rules'\n};\nvar rulesFormValues = [DENY_ALL, ALLOW_ALL, RULES];\nvar actions = [ALLOW, DENY];\nexport var initAuthorizationPolicy = function initAuthorizationPolicy() {\n  return {\n    policy: DENY_ALL,\n    workloadSelector: '',\n    action: ALLOW,\n    rules: [],\n    addWorkloadSelector: false,\n    workloadSelectorValid: false\n  };\n};\nexport var isAuthorizationPolicyStateValid = function isAuthorizationPolicyStateValid(ap) {\n  var workloadSelectorRule = ap.addWorkloadSelector ? ap.workloadSelectorValid : true;\n  var denyRule = ap.action === DENY ? ap.rules.length > 0 : true;\n  return workloadSelectorRule && denyRule;\n};\n\nvar AuthorizationPolicyForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(AuthorizationPolicyForm, _React$Component);\n\n  var _super = _createSuper(AuthorizationPolicyForm);\n\n  function AuthorizationPolicyForm(props) {\n    var _this;\n\n    _classCallCheck(this, AuthorizationPolicyForm);\n\n    _this = _super.call(this, props);\n\n    _this.onRulesFormChange = function (value, _) {\n      _this.setState({\n        policy: value\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.onChangeWorkloadSelector = function () {\n      _this.setState(function (prevState) {\n        return {\n          addWorkloadSelector: !prevState.addWorkloadSelector\n        };\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.addWorkloadLabels = function (value, _) {\n      if (value.length === 0) {\n        _this.setState({\n          workloadSelectorValid: false,\n          workloadSelector: ''\n        }, function () {\n          return _this.onAuthorizationChange();\n        });\n\n        return;\n      }\n\n      value = value.trim();\n      var labels = value.split(',');\n      var isValid = true; // Some smoke validation rules for the labels\n\n      for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n\n        if (label.indexOf('=') < 0) {\n          isValid = false;\n          break;\n        }\n\n        var splitLabel = label.split('=');\n\n        if (splitLabel.length !== 2) {\n          isValid = false;\n          break;\n        }\n\n        if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n          isValid = false;\n          break;\n        }\n      }\n\n      _this.setState({\n        workloadSelectorValid: isValid,\n        workloadSelector: value\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.onActionChange = function (value, _) {\n      _this.setState({\n        action: value\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.onAddRule = function (rule) {\n      _this.setState(function (prevState) {\n        prevState.rules.push(rule);\n        return {\n          rules: prevState.rules\n        };\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.onRemoveRule = function (index) {\n      _this.setState(function (prevState) {\n        prevState.rules.splice(index, 1);\n        return {\n          rules: prevState.rules\n        };\n      }, function () {\n        return _this.onAuthorizationChange();\n      });\n    };\n\n    _this.onAuthorizationChange = function () {\n      _this.props.onChange(_this.state);\n    };\n\n    _this.state = initAuthorizationPolicy();\n    return _this;\n  }\n\n  _createClass(AuthorizationPolicyForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        policy: this.props.authorizationPolicy.policy,\n        workloadSelector: this.props.authorizationPolicy.workloadSelector,\n        action: this.props.authorizationPolicy.action,\n        rules: [],\n        addWorkloadSelector: this.props.authorizationPolicy.addWorkloadSelector,\n        workloadSelectorValid: this.props.authorizationPolicy.workloadSelectorValid\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Policy\",\n        fieldId: \"rules-form\",\n        helperText: HELPER_TEXT[this.state.policy],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.policy,\n        onChange: this.onRulesFormChange,\n        id: \"rules-form\",\n        name: \"rules-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }\n      }, rulesFormValues.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: index,\n          value: option,\n          label: option,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }\n        });\n      }))), this.state.policy === RULES && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Workload Selector\",\n        fieldId: \"workloadSelectorSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"workloadSelectorSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addWorkloadSelector,\n        onChange: this.onChangeWorkloadSelector,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      })), this.state.addWorkloadSelector && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"workloadLabels\",\n        label: \"Labels\",\n        helperText: \"One or more labels to select a workload where the AuthorizationPolicy is applied.\",\n        helperTextInvalid: \"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\",\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwHosts\",\n        name: \"gwHosts\",\n        isDisabled: !this.state.addWorkloadSelector,\n        value: this.state.workloadSelector,\n        onChange: this.addWorkloadLabels,\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }\n      })), this.state.policy === RULES && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Action\",\n        fieldId: \"action-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.action,\n        onChange: this.onActionChange,\n        id: \"action-form\",\n        name: \"action-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }\n      }, actions.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          key: index,\n          value: option,\n          label: option,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }\n        });\n      }))), this.state.policy === RULES && /*#__PURE__*/React.createElement(RuleBuilder, {\n        onAddRule: this.onAddRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 41\n        }\n      }), this.state.policy === RULES && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Rule List\",\n        fieldId: \"apRuleList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(RuleList, {\n        action: this.state.action,\n        ruleList: this.state.rules,\n        onRemoveRule: this.onRemoveRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return AuthorizationPolicyForm;\n}(React.Component);\n\nexport default AuthorizationPolicyForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/IstioConfigNew/AuthorizationPolicyForm.tsx"],"names":["React","FormGroup","FormSelect","FormSelectOption","Switch","TextInputBase","TextInput","RuleBuilder","RuleList","AUTHORIZACION_POLICY","AUTHORIZATION_POLICIES","DENY_ALL","ALLOW_ALL","RULES","ALLOW","DENY","HELPER_TEXT","rulesFormValues","actions","initAuthorizationPolicy","policy","workloadSelector","action","rules","addWorkloadSelector","workloadSelectorValid","isAuthorizationPolicyStateValid","ap","workloadSelectorRule","denyRule","length","AuthorizationPolicyForm","props","onRulesFormChange","value","_","setState","onAuthorizationChange","onChangeWorkloadSelector","prevState","addWorkloadLabels","trim","labels","split","isValid","i","label","indexOf","splitLabel","onActionChange","onAddRule","rule","push","onRemoveRule","index","splice","onChange","state","authorizationPolicy","map","option","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FormGroup, FormSelect, FormSelectOption, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport RuleBuilder, { Rule } from './AuthorizationPolicyForm/RuleBuilder';\nimport RuleList from './AuthorizationPolicyForm/RuleList';\n\ntype Props = {\n  authorizationPolicy: AuthorizationPolicyState;\n  onChange: (authorizationPolicy: AuthorizationPolicyState) => void;\n};\n\nexport type AuthorizationPolicyState = {\n  workloadSelector: string;\n  action: string;\n  rules: Rule[];\n  // Used to identify DENY_ALL, ALLOW_ALL or RULES\n  policy: string;\n  addWorkloadSelector: boolean;\n  workloadSelectorValid: boolean;\n};\n\nexport const AUTHORIZACION_POLICY = 'AuthorizationPolicy';\nexport const AUTHORIZATION_POLICIES = 'authorizationpolicies';\nexport const DENY_ALL = 'DENY_ALL';\nexport const ALLOW_ALL = 'ALLOW_ALL';\nexport const RULES = 'RULES';\nexport const ALLOW = 'ALLOW';\nexport const DENY = 'DENY';\n\nconst HELPER_TEXT = {\n  DENY_ALL: 'Denies all requests to workloads in given namespace(s)',\n  ALLOW_ALL: 'Allows all requests to workloads in given namespace(s)',\n  RULES: 'Builds an Authorization Policy based on Rules'\n};\n\nconst rulesFormValues = [DENY_ALL, ALLOW_ALL, RULES];\nconst actions = [ALLOW, DENY];\n\nexport const initAuthorizationPolicy = (): AuthorizationPolicyState => ({\n  policy: DENY_ALL,\n  workloadSelector: '',\n  action: ALLOW,\n  rules: [],\n  addWorkloadSelector: false,\n  workloadSelectorValid: false\n});\n\nexport const isAuthorizationPolicyStateValid = (ap: AuthorizationPolicyState): boolean => {\n  const workloadSelectorRule = ap.addWorkloadSelector ? ap.workloadSelectorValid : true;\n  const denyRule = ap.action === DENY ? ap.rules.length > 0 : true;\n\n  return workloadSelectorRule && denyRule;\n};\n\nclass AuthorizationPolicyForm extends React.Component<Props, AuthorizationPolicyState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initAuthorizationPolicy();\n  }\n\n  componentDidMount() {\n    this.setState({\n      policy: this.props.authorizationPolicy.policy,\n      workloadSelector: this.props.authorizationPolicy.workloadSelector,\n      action: this.props.authorizationPolicy.action,\n      rules: [],\n      addWorkloadSelector: this.props.authorizationPolicy.addWorkloadSelector,\n      workloadSelectorValid: this.props.authorizationPolicy.workloadSelectorValid\n    });\n  }\n\n  onRulesFormChange = (value, _) => {\n    this.setState(\n      {\n        policy: value\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  onChangeWorkloadSelector = () => {\n    this.setState(\n      prevState => {\n        return {\n          addWorkloadSelector: !prevState.addWorkloadSelector\n        };\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  addWorkloadLabels = (value: string, _) => {\n    if (value.length === 0) {\n      this.setState(\n        {\n          workloadSelectorValid: false,\n          workloadSelector: ''\n        },\n        () => this.onAuthorizationChange()\n      );\n      return;\n    }\n    value = value.trim();\n    const labels: string[] = value.split(',');\n    let isValid = true;\n    // Some smoke validation rules for the labels\n    for (let i = 0; i < labels.length; i++) {\n      const label = labels[i];\n      if (label.indexOf('=') < 0) {\n        isValid = false;\n        break;\n      }\n      const splitLabel: string[] = label.split('=');\n      if (splitLabel.length !== 2) {\n        isValid = false;\n        break;\n      }\n      if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n        isValid = false;\n        break;\n      }\n    }\n    this.setState(\n      {\n        workloadSelectorValid: isValid,\n        workloadSelector: value\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  onActionChange = (value, _) => {\n    this.setState(\n      {\n        action: value\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  onAddRule = (rule: Rule) => {\n    this.setState(\n      prevState => {\n        prevState.rules.push(rule);\n        return {\n          rules: prevState.rules\n        };\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  onRemoveRule = (index: number) => {\n    this.setState(\n      prevState => {\n        prevState.rules.splice(index, 1);\n        return {\n          rules: prevState.rules\n        };\n      },\n      () => this.onAuthorizationChange()\n    );\n  };\n\n  onAuthorizationChange = () => {\n    this.props.onChange(this.state);\n  };\n\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Policy\" fieldId=\"rules-form\" helperText={HELPER_TEXT[this.state.policy]}>\n          <FormSelect value={this.state.policy} onChange={this.onRulesFormChange} id=\"rules-form\" name=\"rules-form\">\n            {rulesFormValues.map((option, index) => (\n              <FormSelectOption key={index} value={option} label={option} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        {this.state.policy === RULES && (\n          <FormGroup label=\"Workload Selector\" fieldId=\"workloadSelectorSwitch\">\n            <Switch\n              id=\"workloadSelectorSwitch\"\n              label={' '}\n              labelOff={' '}\n              isChecked={this.state.addWorkloadSelector}\n              onChange={this.onChangeWorkloadSelector}\n            />\n          </FormGroup>\n        )}\n        {this.state.addWorkloadSelector && (\n          <FormGroup\n            fieldId=\"workloadLabels\"\n            label=\"Labels\"\n            helperText=\"One or more labels to select a workload where the AuthorizationPolicy is applied.\"\n            helperTextInvalid=\"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\"\n            isValid={this.state.workloadSelectorValid}\n          >\n            <TextInput\n              id=\"gwHosts\"\n              name=\"gwHosts\"\n              isDisabled={!this.state.addWorkloadSelector}\n              value={this.state.workloadSelector}\n              onChange={this.addWorkloadLabels}\n              isValid={this.state.workloadSelectorValid}\n            />\n          </FormGroup>\n        )}\n        {this.state.policy === RULES && (\n          <FormGroup label=\"Action\" fieldId=\"action-form\">\n            <FormSelect value={this.state.action} onChange={this.onActionChange} id=\"action-form\" name=\"action-form\">\n              {actions.map((option, index) => (\n                <FormSelectOption key={index} value={option} label={option} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n        )}\n        {this.state.policy === RULES && <RuleBuilder onAddRule={this.onAddRule} />}\n        {this.state.policy === RULES && (\n          <FormGroup label=\"Rule List\" fieldId=\"apRuleList\">\n            <RuleList action={this.state.action} ruleList={this.state.rules} onRemoveRule={this.onRemoveRule} />\n          </FormGroup>\n        )}\n      </>\n    );\n  }\n}\n\nexport default AuthorizationPolicyForm;\n"]},"metadata":{},"sourceType":"module"}
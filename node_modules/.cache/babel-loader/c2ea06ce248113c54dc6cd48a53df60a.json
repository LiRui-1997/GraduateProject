{"ast":null,"code":"import { createAction, createStandardAction } from 'typesafe-actions';\nimport { LoginStatus } from '../store/Store';\nimport { ActionKeys } from './ActionKeys';\n// synchronous action creators\nexport var LoginActions = {\n  loginRequest: createAction(ActionKeys.LOGIN_REQUEST),\n  loginExtend: createAction(ActionKeys.LOGIN_EXTEND, function (resolve) {\n    return function (session) {\n      return resolve({\n        status: LoginStatus.loggedIn,\n        session: session,\n        error: undefined\n      });\n    };\n  }),\n  loginSuccess: createAction(ActionKeys.LOGIN_SUCCESS, function (resolve) {\n    return function (session) {\n      return resolve({\n        status: LoginStatus.loggedIn,\n        session: session,\n        error: undefined,\n        uiExpiresOn: session.expiresOn\n      });\n    };\n  }),\n  loginFailure: createAction(ActionKeys.LOGIN_FAILURE, function (resolve) {\n    return function (error) {\n      return resolve({\n        status: LoginStatus.error,\n        session: undefined,\n        error: error\n      });\n    };\n  }),\n  logoutSuccess: createAction(ActionKeys.LOGOUT_SUCCESS, function (resolve) {\n    return function () {\n      return resolve({\n        status: LoginStatus.loggedOut,\n        session: undefined,\n        error: undefined\n      });\n    };\n  }),\n  sessionExpired: createAction(ActionKeys.SESSION_EXPIRED),\n  setLandingRoute: createStandardAction(ActionKeys.SET_LANDING_ROUTE)()\n};","map":{"version":3,"sources":["/root/kiali-ui/src/actions/LoginActions.ts"],"names":["createAction","createStandardAction","LoginStatus","ActionKeys","LoginActions","loginRequest","LOGIN_REQUEST","loginExtend","LOGIN_EXTEND","resolve","session","status","loggedIn","error","undefined","loginSuccess","LOGIN_SUCCESS","uiExpiresOn","expiresOn","loginFailure","LOGIN_FAILURE","logoutSuccess","LOGOUT_SUCCESS","loggedOut","sessionExpired","SESSION_EXPIRED","setLandingRoute","SET_LANDING_ROUTE"],"mappings":"AAAA,SAAqBA,YAArB,EAAmCC,oBAAnC,QAA+D,kBAA/D;AACA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,UAAT,QAA2B,cAA3B;AASA;AACA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,YAAY,EAAEL,YAAY,CAACG,UAAU,CAACG,aAAZ,CADA;AAE1BC,EAAAA,WAAW,EAAEP,YAAY,CAACG,UAAU,CAACK,YAAZ,EAA0B,UAAAC,OAAO;AAAA,WAAI,UAACC,OAAD;AAAA,aAC5DD,OAAO,CAAC;AACNE,QAAAA,MAAM,EAAET,WAAW,CAACU,QADd;AAENF,QAAAA,OAAO,EAAEA,OAFH;AAGNG,QAAAA,KAAK,EAAEC;AAHD,OAAD,CADqD;AAAA,KAAJ;AAAA,GAAjC,CAFC;AAS1BC,EAAAA,YAAY,EAAEf,YAAY,CAACG,UAAU,CAACa,aAAZ,EAA2B,UAAAP,OAAO;AAAA,WAAI,UAACC,OAAD;AAAA,aAC9DD,OAAO,CAAC;AACNE,QAAAA,MAAM,EAAET,WAAW,CAACU,QADd;AAENF,QAAAA,OAAO,EAAEA,OAFH;AAGNG,QAAAA,KAAK,EAAEC,SAHD;AAING,QAAAA,WAAW,EAAEP,OAAO,CAACQ;AAJf,OAAD,CADuD;AAAA,KAAJ;AAAA,GAAlC,CATA;AAiB1BC,EAAAA,YAAY,EAAEnB,YAAY,CAACG,UAAU,CAACiB,aAAZ,EAA2B,UAAAX,OAAO;AAAA,WAAI,UAACI,KAAD;AAAA,aAC9DJ,OAAO,CAAC;AACNE,QAAAA,MAAM,EAAET,WAAW,CAACW,KADd;AAENH,QAAAA,OAAO,EAAEI,SAFH;AAGND,QAAAA,KAAK,EAAEA;AAHD,OAAD,CADuD;AAAA,KAAJ;AAAA,GAAlC,CAjBA;AAwB1BQ,EAAAA,aAAa,EAAErB,YAAY,CAACG,UAAU,CAACmB,cAAZ,EAA4B,UAAAb,OAAO;AAAA,WAAI;AAAA,aAChEA,OAAO,CAAC;AACNE,QAAAA,MAAM,EAAET,WAAW,CAACqB,SADd;AAENb,QAAAA,OAAO,EAAEI,SAFH;AAGND,QAAAA,KAAK,EAAEC;AAHD,OAAD,CADyD;AAAA,KAAJ;AAAA,GAAnC,CAxBD;AA+B1BU,EAAAA,cAAc,EAAExB,YAAY,CAACG,UAAU,CAACsB,eAAZ,CA/BF;AAgC1BC,EAAAA,eAAe,EAAEzB,oBAAoB,CAACE,UAAU,CAACwB,iBAAZ,CAApB;AAhCS,CAArB","sourcesContent":["import { ActionType, createAction, createStandardAction } from 'typesafe-actions';\nimport { LoginSession, LoginStatus } from '../store/Store';\nimport { ActionKeys } from './ActionKeys';\n\nexport interface LoginPayload {\n  error?: any;\n  landingRoute?: string;\n  session?: LoginSession;\n  status: LoginStatus;\n}\n\n// synchronous action creators\nexport const LoginActions = {\n  loginRequest: createAction(ActionKeys.LOGIN_REQUEST),\n  loginExtend: createAction(ActionKeys.LOGIN_EXTEND, resolve => (session: LoginSession) =>\n    resolve({\n      status: LoginStatus.loggedIn,\n      session: session,\n      error: undefined\n    } as LoginPayload)\n  ),\n  loginSuccess: createAction(ActionKeys.LOGIN_SUCCESS, resolve => (session: LoginSession) =>\n    resolve({\n      status: LoginStatus.loggedIn,\n      session: session,\n      error: undefined,\n      uiExpiresOn: session.expiresOn\n    } as LoginPayload)\n  ),\n  loginFailure: createAction(ActionKeys.LOGIN_FAILURE, resolve => (error: any) =>\n    resolve({\n      status: LoginStatus.error,\n      session: undefined,\n      error: error\n    } as LoginPayload)\n  ),\n  logoutSuccess: createAction(ActionKeys.LOGOUT_SUCCESS, resolve => () =>\n    resolve({\n      status: LoginStatus.loggedOut,\n      session: undefined,\n      error: undefined\n    } as LoginPayload)\n  ),\n  sessionExpired: createAction(ActionKeys.SESSION_EXPIRED),\n  setLandingRoute: createStandardAction(ActionKeys.SET_LANDING_ROUTE)<string | undefined>()\n};\n\nexport type LoginAction = ActionType<typeof LoginActions>;\n"]},"metadata":{},"sourceType":"module"}
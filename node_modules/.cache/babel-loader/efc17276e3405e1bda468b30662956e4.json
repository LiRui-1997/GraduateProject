{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/TrafficList/TrafficListComponent.tsx\";\nimport * as React from 'react';\nimport { Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, cellWidth } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport * as FilterComponent from '../FilterList/FilterComponent';\nimport { NA } from 'types/Health';\nimport { NodeType, hasProtocolTraffic } from 'types/Graph';\nimport { getTrafficHealth } from 'types/ErrorRate';\nimport history, { URLParam } from 'app/History';\nimport { createIcon } from 'components/Health/Helper';\nimport { sortFields } from './FiltersAndSorts';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport { createTooltipIcon } from 'config/KialiIcon';\nvar columns = [{\n  title: 'Status',\n  transforms: [sortable, cellWidth(10)]\n}, {\n  title: 'Name',\n  transforms: [sortable, cellWidth(30)]\n}, {\n  title: 'Rate',\n  transforms: [sortable, cellWidth(12)]\n}, {\n  title: 'Percent Success',\n  transforms: [sortable, cellWidth(12)]\n}, {\n  title: 'Protocol',\n  transforms: [sortable, cellWidth(12)]\n}, {\n  title: 'Actions'\n}]; // Style constants\n\nvar containerPadding = style({\n  padding: '20px'\n});\n\nvar TrafficListComponent = /*#__PURE__*/function (_FilterComponent$Comp) {\n  _inherits(TrafficListComponent, _FilterComponent$Comp);\n\n  var _super = _createSuper(TrafficListComponent);\n\n  function TrafficListComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TrafficListComponent);\n\n    _this = _super.call(this, props);\n\n    _this.onSort = function (_event, index, sortDirection) {\n      // Map the column index to the correct sortField index (currently ordered with the same indexes)\n      var sortField = sortFields[index];\n      var isSortAscending = sortDirection === SortByDirection.asc;\n\n      if (sortField.id !== _this.state.currentSortField.id || isSortAscending !== _this.state.isSortAscending) {\n        _this.updateSort(sortField, isSortAscending);\n      }\n    };\n\n    _this.getHealthStatus = function (item) {\n      var traffic = item.traffic;\n\n      if (traffic.protocol !== 'tcp' && hasProtocolTraffic(traffic)) {\n        return getTrafficHealth(item, item.direction);\n      }\n\n      return {\n        value: 0,\n        status: NA\n      };\n    };\n\n    _this.getTraffic = function (traffic) {\n      var rps = '0';\n      var percentError = '0';\n      var unit = 'rps';\n\n      if (hasProtocolTraffic(traffic)) {\n        switch (traffic.protocol) {\n          case 'http':\n            rps = traffic.rates.http;\n            percentError = traffic.rates.httpPercentErr || '0';\n            break;\n\n          case 'grpc':\n            rps = traffic.rates.grpc;\n            percentError = traffic.rates.grpcPercentErr || '0';\n            break;\n\n          case 'tcp':\n            rps = traffic.rates.tcp;\n            break;\n        }\n      }\n\n      return {\n        trafficRate: \"\".concat(Number(rps).toFixed(2)).concat(unit),\n        trafficPercentSuccess: \"\".concat((100 - Number(percentError)).toFixed(1), \"%\")\n      };\n    };\n\n    _this.rows = function (direction) {\n      return _this.state.listItems.filter(function (i) {\n        return i.direction === direction;\n      }).map(function (item, i) {\n        var name = item.node.name;\n\n        var links = _this.getLinks(item);\n\n        return {\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tt_status_\".concat(i),\n            position: TooltipPosition.top,\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, \"Traffic Status: \", item.healthStatus.status.name),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }\n          }, createTooltipIcon(createIcon(item.healthStatus.status, 'sm')))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PFBadge, {\n            badge: item.badge,\n            position: TooltipPosition.top,\n            key: \"tt_badge_\".concat(i),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }\n          }), !!links.detail ? /*#__PURE__*/React.createElement(Link, {\n            key: \"link_d_\".concat(item.badge, \"_\").concat(name),\n            to: links.detail,\n            className: 'virtualitem_definition_link',\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }\n          }, name) : name), /*#__PURE__*/React.createElement(React.Fragment, null, item.trafficRate), /*#__PURE__*/React.createElement(React.Fragment, null, item.trafficPercentSuccess), /*#__PURE__*/React.createElement(React.Fragment, null, item.protocol), /*#__PURE__*/React.createElement(React.Fragment, null, !!links.metrics && /*#__PURE__*/React.createElement(Link, {\n            key: \"link_m_\".concat(item.badge, \"_\").concat(name),\n            to: links.metrics,\n            className: 'virtualitem_definition_link',\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }\n          }, \"View metrics\"))]\n        };\n      });\n    };\n\n    _this.getLinks = function (item) {\n      if (item.node.isInaccessible) {\n        return {\n          detail: '',\n          metrics: ''\n        };\n      }\n\n      var detail = \"/namespaces/\".concat(item.node.namespace, \"/\").concat(_this.nodeTypeToType(item.node.type, true), \"/\").concat(item.node.name);\n      var metricsDirection = item.direction === 'inbound' ? 'in_metrics' : 'out_metrics';\n      var metrics = \"\".concat(history.location.pathname, \"?tab=\").concat(metricsDirection);\n\n      switch (item.node.type) {\n        case NodeType.APP:\n          // All metrics tabs can filter by remote app. No need to switch context.\n          var side = item.direction === 'inbound' ? 'source' : 'destination';\n          metrics += \"&\".concat(URLParam.BY_LABELS, \"=\").concat(encodeURIComponent(side + '_canonical_service=' + item.node.name));\n          break;\n\n        case NodeType.SERVICE:\n          if (item.node.isServiceEntry) {\n            // Service Entries should be only destination nodes. So, don't build a link if direction is inbound.\n            if (item.direction !== 'inbound' && item.node.destServices && item.node.destServices.length > 0) {\n              var svcHosts = item.node.destServices.map(function (item) {\n                return item.name;\n              }).join(',');\n              metrics += \"&\".concat(URLParam.BY_LABELS, \"=\").concat(encodeURIComponent('destination_service_name=' + svcHosts));\n            } else {\n              metrics = '';\n            }\n          } else {\n            // Filter by remote service only available in the Outbound Metrics tab. For inbound traffic,\n            // switch context to the service details page.\n            if (item.direction === 'outbound') {\n              metrics += \"&\".concat(URLParam.BY_LABELS, \"=\").concat(encodeURIComponent('destination_service_name=' + item.node.name));\n            } else {\n              // Services have only one metrics tab.\n              metrics = \"\".concat(detail, \"?tab=metrics\");\n            }\n          }\n\n          break;\n\n        case NodeType.WORKLOAD:\n          // No filters available for workloads. Context switch is mandatory.\n          // Since this will switch context (i.e. will redirect the user to the workload details page),\n          // user is redirected to the \"opposite\" metrics. When looking at certain item, if traffic is *inbound*\n          // from a certain workload, that traffic is reflected in the *outbound* metrics of the workload (and vice-versa).\n          var inverseMetricsDirection = item.direction === 'inbound' ? 'out_metrics' : 'in_metrics';\n          metrics = \"\".concat(detail, \"?tab=\").concat(inverseMetricsDirection);\n          break;\n\n        default:\n          metrics = '';\n      }\n\n      return {\n        detail: detail,\n        metrics: metrics\n      };\n    };\n\n    _this.nodeTypeToType = function (type, isURL) {\n      switch (type) {\n        case NodeType.APP:\n          return isURL ? 'applications' : 'Application';\n\n        case NodeType.SERVICE:\n          return isURL ? 'services' : 'Service';\n\n        default:\n          return isURL ? 'workloads' : 'Workload';\n      }\n    };\n\n    _this.state = {\n      currentSortField: props.currentSortField,\n      isSortAscending: props.isSortAscending,\n      listItems: _this.trafficToListItems(props.trafficItems)\n    };\n    return _this;\n  }\n\n  _createClass(TrafficListComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // ensure the initial sort is applied\n      this.sortItemList(this.state.listItems, this.state.currentSortField, this.state.isSortAscending);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState, _snapshot) {\n      var _this2 = this;\n\n      // we only care about new TrafficItems, sorting is managed locally after initial render\n      if (prevProps.trafficItems !== this.props.trafficItems) {\n        var listItems = this.trafficToListItems(this.props.trafficItems);\n        this.sortItemList(listItems, this.state.currentSortField, this.state.isSortAscending).then(function (sorted) {\n          _this2.setState({\n            listItems: sorted\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var inboundRows = this.rows('inbound');\n      var outboundRows = this.rows('outbound');\n      var hasInbound = inboundRows.length > 0;\n      var hasOutbound = outboundRows.length > 0;\n      var sortIndex = sortFields.findIndex(function (sf) {\n        return sf.id === _this3.props.currentSortField.id;\n      });\n      var sortDirection = this.props.isSortAscending ? SortByDirection.asc : SortByDirection.desc;\n      var sortBy = {\n        index: sortIndex,\n        direction: sortDirection\n      };\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: containerPadding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, hasInbound ? '' : 'No ', \" Inbound Traffic\"), hasInbound && /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Sortable Table\",\n        cells: columns,\n        onSort: this.onSort,\n        rows: inboundRows,\n        sortBy: sortBy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: containerPadding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, hasOutbound ? '' : 'No ', \" Outbound Traffic\"), hasOutbound && /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Sortable Table\",\n        cells: columns,\n        onSort: this.onSort,\n        rows: outboundRows,\n        sortBy: sortBy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }))));\n    } // abstract FilterComponent.updateListItems\n\n  }, {\n    key: \"updateListItems\",\n    value: function updateListItems() {// we don't react to filter changes in this class, so this is a no-op\n    } // abstract FilterComponent.sortItemList\n\n  }, {\n    key: \"sortItemList\",\n    value: function sortItemList(listItems, sortField, isAscending) {\n      var sorted = listItems.sort(isAscending ? sortField.compare : function (a, b) {\n        return sortField.compare(b, a);\n      });\n      return Promise.resolve(sorted);\n    } // Helper used for Table to sort handlers based on index column == field\n\n  }, {\n    key: \"trafficToListItems\",\n    value: function trafficToListItems(trafficItems) {\n      var _this4 = this;\n\n      var listItems = trafficItems.map(function (ti) {\n        var badge;\n\n        switch (ti.node.type) {\n          case NodeType.APP:\n            badge = PFBadges.App;\n            break;\n\n          case NodeType.SERVICE:\n            badge = PFBadges.Service;\n            break;\n\n          default:\n            badge = PFBadges.Workload;\n        }\n\n        var item = _objectSpread({\n          direction: ti.direction,\n          badge: badge,\n          node: ti.node,\n          protocol: (ti.traffic.protocol || 'N/A').toUpperCase(),\n          healthStatus: _this4.getHealthStatus(ti)\n        }, _this4.getTraffic(ti.traffic));\n\n        return item;\n      });\n      return listItems;\n    }\n  }]);\n\n  return TrafficListComponent;\n}(FilterComponent.Component);\n\nexport default TrafficListComponent;","map":{"version":3,"sources":["/root/GraduateProject/src/components/TrafficList/TrafficListComponent.tsx"],"names":["React","Title","Tooltip","TooltipPosition","style","sortable","SortByDirection","Table","TableBody","TableHeader","cellWidth","Link","FilterComponent","NA","NodeType","hasProtocolTraffic","getTrafficHealth","history","URLParam","createIcon","sortFields","PFBadge","PFBadges","createTooltipIcon","columns","title","transforms","containerPadding","padding","TrafficListComponent","props","onSort","_event","index","sortDirection","sortField","isSortAscending","asc","id","state","currentSortField","updateSort","getHealthStatus","item","traffic","protocol","direction","value","status","getTraffic","rps","percentError","unit","rates","http","httpPercentErr","grpc","grpcPercentErr","tcp","trafficRate","Number","toFixed","trafficPercentSuccess","rows","listItems","filter","i","map","name","node","links","getLinks","cells","top","healthStatus","badge","detail","metrics","isInaccessible","namespace","nodeTypeToType","type","metricsDirection","location","pathname","APP","side","BY_LABELS","encodeURIComponent","SERVICE","isServiceEntry","destServices","length","svcHosts","join","WORKLOAD","inverseMetricsDirection","isURL","trafficToListItems","trafficItems","sortItemList","prevProps","_prevState","_snapshot","then","sorted","setState","inboundRows","outboundRows","hasInbound","hasOutbound","sortIndex","findIndex","sf","desc","sortBy","isAscending","sort","compare","a","b","Promise","resolve","ti","App","Service","Workload","toUpperCase","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport { IRow, sortable, SortByDirection, Table, TableBody, TableHeader, cellWidth } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { TrafficItem, TrafficNode, TrafficDirection } from './TrafficDetails';\nimport * as FilterComponent from '../FilterList/FilterComponent';\nimport { ThresholdStatus, NA } from 'types/Health';\nimport { NodeType, hasProtocolTraffic, ProtocolTraffic } from 'types/Graph';\nimport { getTrafficHealth } from 'types/ErrorRate';\nimport history, { URLParam } from 'app/History';\nimport { createIcon } from 'components/Health/Helper';\nimport { sortFields } from './FiltersAndSorts';\nimport { SortField } from 'types/SortFilters';\nimport { PFBadgeType, PFBadge, PFBadges } from 'components/Pf/PfBadges';\nimport { createTooltipIcon } from 'config/KialiIcon';\n\nexport interface TrafficListItem {\n  direction: TrafficDirection;\n  healthStatus: ThresholdStatus;\n  badge: PFBadgeType;\n  node: TrafficNode;\n  protocol: string;\n  trafficRate: string;\n  trafficPercentSuccess: string;\n}\n\ntype TrafficListComponentProps = FilterComponent.Props<TrafficListItem> & {\n  trafficItems: TrafficItem[];\n};\n\ntype TrafficListComponentState = FilterComponent.State<TrafficListItem>;\n\nconst columns = [\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)]\n  },\n  {\n    title: 'Name',\n    transforms: [sortable, cellWidth(30)]\n  },\n  {\n    title: 'Rate',\n    transforms: [sortable, cellWidth(12)]\n  },\n  {\n    title: 'Percent Success',\n    transforms: [sortable, cellWidth(12)]\n  },\n  {\n    title: 'Protocol',\n    transforms: [sortable, cellWidth(12)]\n  },\n  {\n    title: 'Actions'\n  }\n];\n\n// Style constants\nconst containerPadding = style({ padding: '20px' });\n\nclass TrafficListComponent extends FilterComponent.Component<\n  TrafficListComponentProps,\n  TrafficListComponentState,\n  TrafficListItem\n> {\n  constructor(props: TrafficListComponentProps) {\n    super(props);\n    this.state = {\n      currentSortField: props.currentSortField,\n      isSortAscending: props.isSortAscending,\n      listItems: this.trafficToListItems(props.trafficItems)\n    };\n  }\n\n  componentDidMount() {\n    // ensure the initial sort is applied\n    this.sortItemList(this.state.listItems, this.state.currentSortField, this.state.isSortAscending);\n  }\n\n  componentDidUpdate(prevProps: TrafficListComponentProps, _prevState: TrafficListComponentState, _snapshot: any) {\n    // we only care about new TrafficItems, sorting is managed locally after initial render\n    if (prevProps.trafficItems !== this.props.trafficItems) {\n      const listItems = this.trafficToListItems(this.props.trafficItems);\n      this.sortItemList(listItems, this.state.currentSortField, this.state.isSortAscending).then(sorted => {\n        this.setState({ listItems: sorted });\n      });\n    }\n  }\n\n  render() {\n    const inboundRows = this.rows('inbound');\n    const outboundRows = this.rows('outbound');\n    const hasInbound = inboundRows.length > 0;\n    const hasOutbound = outboundRows.length > 0;\n    const sortIndex = sortFields.findIndex(sf => sf.id === this.props.currentSortField.id);\n    const sortDirection = this.props.isSortAscending ? SortByDirection.asc : SortByDirection.desc;\n    const sortBy = { index: sortIndex, direction: sortDirection };\n    return (\n      <>\n        <div className={containerPadding}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            {hasInbound ? '' : 'No '} Inbound Traffic\n          </Title>\n          {hasInbound && (\n            <Table aria-label=\"Sortable Table\" cells={columns} onSort={this.onSort} rows={inboundRows} sortBy={sortBy}>\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n        </div>\n        <div className={containerPadding}>\n          <Title headingLevel=\"h5\" size=\"lg\">\n            {hasOutbound ? '' : 'No '} Outbound Traffic\n          </Title>\n          {hasOutbound && (\n            <Table aria-label=\"Sortable Table\" cells={columns} onSort={this.onSort} rows={outboundRows} sortBy={sortBy}>\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  // abstract FilterComponent.updateListItems\n  updateListItems() {\n    // we don't react to filter changes in this class, so this is a no-op\n  }\n\n  // abstract FilterComponent.sortItemList\n  sortItemList(\n    listItems: TrafficListItem[],\n    sortField: SortField<TrafficListItem>,\n    isAscending: boolean\n  ): Promise<TrafficListItem[]> {\n    const sorted = listItems.sort(isAscending ? sortField.compare : (a, b) => sortField.compare(b, a));\n    return Promise.resolve(sorted);\n  }\n\n  // Helper used for Table to sort handlers based on index column == field\n  onSort = (_event, index, sortDirection) => {\n    // Map the column index to the correct sortField index (currently ordered with the same indexes)\n    let sortField = sortFields[index];\n\n    const isSortAscending = sortDirection === SortByDirection.asc;\n    if (sortField.id !== this.state.currentSortField.id || isSortAscending !== this.state.isSortAscending) {\n      this.updateSort(sortField, isSortAscending);\n    }\n  };\n\n  trafficToListItems(trafficItems: TrafficItem[]) {\n    const listItems = trafficItems.map(ti => {\n      let badge: PFBadgeType;\n      switch (ti.node.type) {\n        case NodeType.APP:\n          badge = PFBadges.App;\n          break;\n        case NodeType.SERVICE:\n          badge = PFBadges.Service;\n          break;\n        default:\n          badge = PFBadges.Workload;\n      }\n      const item: TrafficListItem = {\n        direction: ti.direction,\n        badge: badge,\n        node: ti.node,\n        protocol: (ti.traffic.protocol || 'N/A').toUpperCase(),\n        healthStatus: this.getHealthStatus(ti),\n        ...this.getTraffic(ti.traffic)\n      };\n      return item;\n    });\n\n    return listItems;\n  }\n\n  private getHealthStatus = (item: TrafficItem): ThresholdStatus => {\n    const traffic = item.traffic;\n\n    if (traffic.protocol !== 'tcp' && hasProtocolTraffic(traffic)) {\n      return getTrafficHealth(item, item.direction);\n    }\n\n    return { value: 0, status: NA };\n  };\n\n  private getTraffic = (traffic: ProtocolTraffic): { trafficRate; trafficPercentSuccess } => {\n    let rps = '0';\n    let percentError = '0';\n    let unit = 'rps';\n    if (hasProtocolTraffic(traffic)) {\n      switch (traffic.protocol) {\n        case 'http':\n          rps = traffic.rates.http;\n          percentError = traffic.rates.httpPercentErr || '0';\n          break;\n        case 'grpc':\n          rps = traffic.rates.grpc;\n          percentError = traffic.rates.grpcPercentErr || '0';\n          break;\n        case 'tcp':\n          rps = traffic.rates.tcp;\n          break;\n      }\n    }\n\n    return {\n      trafficRate: `${Number(rps).toFixed(2)}${unit}`,\n      trafficPercentSuccess: `${(100 - Number(percentError)).toFixed(1)}%`\n    };\n  };\n\n  // Helper used to build the table content.\n  rows = (direction: TrafficDirection): IRow[] => {\n    return this.state.listItems\n      .filter(i => i.direction === direction)\n      .map((item, i) => {\n        const name = item.node.name;\n        const links = this.getLinks(item);\n        return {\n          cells: [\n            <>\n              <Tooltip\n                key={`tt_status_${i}`}\n                position={TooltipPosition.top}\n                content={<>Traffic Status: {item.healthStatus.status.name}</>}\n              >\n                {createTooltipIcon(createIcon(item.healthStatus.status, 'sm'))}\n              </Tooltip>\n            </>,\n            <>\n              <PFBadge badge={item.badge} position={TooltipPosition.top} key={`tt_badge_${i}`} />\n              {!!links.detail ? (\n                <Link key={`link_d_${item.badge}_${name}`} to={links.detail} className={'virtualitem_definition_link'}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n            </>,\n            <>{item.trafficRate}</>,\n            <>{item.trafficPercentSuccess}</>,\n            <>{item.protocol}</>,\n            <>\n              {!!links.metrics && (\n                <Link key={`link_m_${item.badge}_${name}`} to={links.metrics} className={'virtualitem_definition_link'}>\n                  View metrics\n                </Link>\n              )}\n            </>\n          ]\n        };\n      });\n  };\n\n  private getLinks = (item: TrafficListItem) => {\n    if (item.node.isInaccessible) {\n      return { detail: '', metrics: '' };\n    }\n\n    const detail = `/namespaces/${item.node.namespace}/${this.nodeTypeToType(item.node.type, true)}/${item.node.name}`;\n\n    const metricsDirection = item.direction === 'inbound' ? 'in_metrics' : 'out_metrics';\n    let metrics = `${history.location.pathname}?tab=${metricsDirection}`;\n\n    switch (item.node.type) {\n      case NodeType.APP:\n        // All metrics tabs can filter by remote app. No need to switch context.\n        const side = item.direction === 'inbound' ? 'source' : 'destination';\n        metrics += `&${URLParam.BY_LABELS}=${encodeURIComponent(side + '_canonical_service=' + item.node.name)}`;\n        break;\n      case NodeType.SERVICE:\n        if (item.node.isServiceEntry) {\n          // Service Entries should be only destination nodes. So, don't build a link if direction is inbound.\n          if (item.direction !== 'inbound' && item.node.destServices && item.node.destServices.length > 0) {\n            const svcHosts = item.node.destServices.map(item => item.name).join(',');\n            metrics += `&${URLParam.BY_LABELS}=${encodeURIComponent('destination_service_name=' + svcHosts)}`;\n          } else {\n            metrics = '';\n          }\n        } else {\n          // Filter by remote service only available in the Outbound Metrics tab. For inbound traffic,\n          // switch context to the service details page.\n          if (item.direction === 'outbound') {\n            metrics += `&${URLParam.BY_LABELS}=${encodeURIComponent('destination_service_name=' + item.node.name)}`;\n          } else {\n            // Services have only one metrics tab.\n            metrics = `${detail}?tab=metrics`;\n          }\n        }\n        break;\n      case NodeType.WORKLOAD:\n        // No filters available for workloads. Context switch is mandatory.\n\n        // Since this will switch context (i.e. will redirect the user to the workload details page),\n        // user is redirected to the \"opposite\" metrics. When looking at certain item, if traffic is *inbound*\n        // from a certain workload, that traffic is reflected in the *outbound* metrics of the workload (and vice-versa).\n        const inverseMetricsDirection = item.direction === 'inbound' ? 'out_metrics' : 'in_metrics';\n        metrics = `${detail}?tab=${inverseMetricsDirection}`;\n        break;\n      default:\n        metrics = '';\n    }\n\n    return { detail: detail, metrics: metrics };\n  };\n\n  private nodeTypeToType = (type: NodeType, isURL?: boolean): string => {\n    switch (type) {\n      case NodeType.APP:\n        return isURL ? 'applications' : 'Application';\n      case NodeType.SERVICE:\n        return isURL ? 'services' : 'Service';\n      default:\n        return isURL ? 'workloads' : 'Workload';\n    }\n  };\n}\n\nexport default TrafficListComponent;\n"]},"metadata":{},"sourceType":"module"}
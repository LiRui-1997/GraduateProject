{"ast":null,"code":"import _objectWithoutProperties from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _createForOfIteratorHelper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"traffic\"];\n// When updating the cytoscape graph, the element data expects to have all the changes\n// non provided values are taken as \"this didn't change\", similar as setState does.\n// Put default values for all fields that are omitted.\nimport { hasProtocolTraffic } from '../../types/Graph';\nimport { isIstioNamespace } from '../../config/ServerConfig'; // When updating the cytoscape graph, the element data expects to have all the changes\n// non provided values are taken as \"this didn't change\", similar as setState does.\n// Put default values for all fields that are omitted.\n\nexport var decorateGraphData = function decorateGraphData(graphData) {\n  var elementsDefaults = {\n    edges: {\n      destPrincipal: undefined,\n      grpc: NaN,\n      grpcErr: NaN,\n      grpcPercentErr: NaN,\n      grpcPercentReq: NaN,\n      hasTraffic: undefined,\n      http: NaN,\n      http3xx: NaN,\n      http4xx: NaN,\n      http5xx: NaN,\n      httpNoResponse: NaN,\n      httpPercentErr: NaN,\n      httpPercentReq: NaN,\n      isMTLS: -1,\n      protocol: undefined,\n      responses: undefined,\n      responseTime: NaN,\n      sourcePrincipal: undefined,\n      tcp: NaN,\n      throughput: NaN\n    },\n    nodes: {\n      aggregate: undefined,\n      aggregateValue: undefined,\n      app: undefined,\n      destServices: undefined,\n      grpcIn: NaN,\n      grpcInErr: NaN,\n      grpcOut: NaN,\n      hasCB: undefined,\n      hasFaultInjection: undefined,\n      hasMissingSC: undefined,\n      hasRequestRouting: undefined,\n      hasRequestTimeout: undefined,\n      hasTCPTrafficShifting: undefined,\n      hasTrafficShifting: undefined,\n      hasVS: undefined,\n      health: undefined,\n      httpIn: NaN,\n      httpIn3xx: NaN,\n      httpIn4xx: NaN,\n      httpIn5xx: NaN,\n      httpInNoResponse: NaN,\n      httpOut: NaN,\n      isBox: undefined,\n      isDead: undefined,\n      isIdle: undefined,\n      isInaccessible: undefined,\n      isIstio: undefined,\n      isMisconfigured: undefined,\n      isOutside: undefined,\n      isRoot: undefined,\n      isServiceEntry: undefined,\n      service: undefined,\n      tcpIn: NaN,\n      tcpOut: NaN,\n      version: undefined,\n      workload: undefined\n    }\n  }; // It's not easy to get find/hide to work exactly as users may expect.  Because edges represent\n  // traffic for only one protocol it is best to use 0 defaults for that one protocol, and leave the others\n  // as NaN. In that way numerical expressions affect only edges for a desired protocol.  Because nodes\n  // can involve traffic from multiple protocols, it seems (for now) best to only set the values explicitly\n  // supplied in the JSON.\n\n  var edgeProtocolDefaults = {\n    grpc: {\n      grpc: 0,\n      grpcErr: 0,\n      grpcNoResponse: 0,\n      grpcPercentErr: 0,\n      grpcPercentReq: 0\n    },\n    http: {\n      http: 0,\n      http3xx: 0,\n      http4xx: 0,\n      http5xx: 0,\n      httpNoResponse: 0,\n      httpPercentErr: 0,\n      httpPercentReq: 0\n    },\n    tcp: {\n      tcp: 0\n    }\n  };\n\n  var propertiesToNumber = function propertiesToNumber(object, keys) {\n    var objectWithNumbers = _objectSpread({}, object);\n\n    var targetKeys = keys ? keys : Object.keys(objectWithNumbers);\n\n    var _iterator = _createForOfIteratorHelper(targetKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        objectWithNumbers[key] = Number(objectWithNumbers[key]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return objectWithNumbers;\n  };\n\n  var decoratedGraph = {};\n\n  if (graphData) {\n    if (graphData.nodes) {\n      decoratedGraph.nodes = graphData.nodes.map(function (node) {\n        var decoratedNode = _objectSpread({}, node); // parse out the traffic data into top level fields for the various protocols. This is done\n        // to be back compatible with our existing ui code that expects the explicit http and tcp fields.\n        // We can then set the 'traffic' field undefined because it is not used in the cy element handling.\n\n\n        if (decoratedNode.data.traffic) {\n          var traffic = decoratedNode.data.traffic;\n          decoratedNode.data.traffic = undefined;\n          traffic.forEach(function (protocol) {\n            decoratedNode.data = _objectSpread(_objectSpread({}, propertiesToNumber(protocol.rates)), decoratedNode.data);\n          });\n        } // node.aggregate is set like aggregate=aggregateValue, split into distinct fields for the ui to use\n\n\n        if (!!decoratedNode.data.aggregate) {\n          var aggr = decoratedNode.data.aggregate.split('=');\n          decoratedNode.data.aggregate = aggr[0];\n          decoratedNode.data.aggregateValue = aggr[1];\n        }\n\n        var isIstio = isIstioNamespace(decoratedNode.data.namespace) ? true : undefined; // prettier-ignore\n\n        decoratedNode.data = _objectSpread(_objectSpread({\n          isIstio: isIstio\n        }, elementsDefaults.nodes), decoratedNode.data); // prettier-ignore\n\n        return decoratedNode;\n      });\n    }\n\n    if (graphData.edges) {\n      decoratedGraph.edges = graphData.edges.map(function (edge) {\n        var decoratedEdge = _objectSpread({}, edge);\n\n        var _edge$data = edge.data,\n            traffic = _edge$data.traffic,\n            edgeData = _objectWithoutProperties(_edge$data, _excluded); // see comment above about the 'traffic' data handling\n\n\n        if (traffic) {\n          if (hasProtocolTraffic(traffic)) {\n            decoratedEdge.data = _objectSpread(_objectSpread(_objectSpread({\n              hasTraffic: true,\n              responses: traffic.responses\n            }, edgeProtocolDefaults[traffic.protocol]), propertiesToNumber(traffic.rates)), propertiesToNumber(edgeData, ['isMtls', 'responseTime', 'throughput']));\n          }\n\n          decoratedEdge.data = _objectSpread({\n            protocol: traffic.protocol\n          }, decoratedEdge.data);\n        } // prettier-ignore\n\n\n        decoratedEdge.data = _objectSpread(_objectSpread({}, elementsDefaults.edges), decoratedEdge.data); // prettier-ignore\n\n        return decoratedEdge;\n      });\n    }\n  }\n\n  return decoratedGraph;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/store/Selectors/GraphData.ts"],"names":["hasProtocolTraffic","isIstioNamespace","decorateGraphData","graphData","elementsDefaults","edges","destPrincipal","undefined","grpc","NaN","grpcErr","grpcPercentErr","grpcPercentReq","hasTraffic","http","http3xx","http4xx","http5xx","httpNoResponse","httpPercentErr","httpPercentReq","isMTLS","protocol","responses","responseTime","sourcePrincipal","tcp","throughput","nodes","aggregate","aggregateValue","app","destServices","grpcIn","grpcInErr","grpcOut","hasCB","hasFaultInjection","hasMissingSC","hasRequestRouting","hasRequestTimeout","hasTCPTrafficShifting","hasTrafficShifting","hasVS","health","httpIn","httpIn3xx","httpIn4xx","httpIn5xx","httpInNoResponse","httpOut","isBox","isDead","isIdle","isInaccessible","isIstio","isMisconfigured","isOutside","isRoot","isServiceEntry","service","tcpIn","tcpOut","version","workload","edgeProtocolDefaults","grpcNoResponse","propertiesToNumber","object","keys","objectWithNumbers","targetKeys","Object","key","Number","decoratedGraph","map","node","decoratedNode","data","traffic","forEach","rates","aggr","split","namespace","edge","decoratedEdge","edgeData"],"mappings":"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","sourcesContent":["// When updating the cytoscape graph, the element data expects to have all the changes\n// non provided values are taken as \"this didn't change\", similar as setState does.\n// Put default values for all fields that are omitted.\nimport {\n  DecoratedGraphEdgeData,\n  DecoratedGraphEdgeWrapper,\n  DecoratedGraphElements,\n  DecoratedGraphNodeData,\n  DecoratedGraphNodeWrapper,\n  GraphEdgeWrapper,\n  GraphElements,\n  GraphNodeWrapper,\n  hasProtocolTraffic\n} from '../../types/Graph';\nimport { isIstioNamespace } from '../../config/ServerConfig';\n\n// When updating the cytoscape graph, the element data expects to have all the changes\n// non provided values are taken as \"this didn't change\", similar as setState does.\n// Put default values for all fields that are omitted.\nexport const decorateGraphData = (graphData: GraphElements): DecoratedGraphElements => {\n  const elementsDefaults = {\n    edges: {\n      destPrincipal: undefined,\n      grpc: NaN,\n      grpcErr: NaN,\n      grpcPercentErr: NaN,\n      grpcPercentReq: NaN,\n      hasTraffic: undefined,\n      http: NaN,\n      http3xx: NaN,\n      http4xx: NaN,\n      http5xx: NaN,\n      httpNoResponse: NaN,\n      httpPercentErr: NaN,\n      httpPercentReq: NaN,\n      isMTLS: -1,\n      protocol: undefined,\n      responses: undefined,\n      responseTime: NaN,\n      sourcePrincipal: undefined,\n      tcp: NaN,\n      throughput: NaN\n    },\n    nodes: {\n      aggregate: undefined,\n      aggregateValue: undefined,\n      app: undefined,\n      destServices: undefined,\n      grpcIn: NaN,\n      grpcInErr: NaN,\n      grpcOut: NaN,\n      hasCB: undefined,\n      hasFaultInjection: undefined,\n      hasMissingSC: undefined,\n      hasRequestRouting: undefined,\n      hasRequestTimeout: undefined,\n      hasTCPTrafficShifting: undefined,\n      hasTrafficShifting: undefined,\n      hasVS: undefined,\n      health: undefined,\n      httpIn: NaN,\n      httpIn3xx: NaN,\n      httpIn4xx: NaN,\n      httpIn5xx: NaN,\n      httpInNoResponse: NaN,\n      httpOut: NaN,\n      isBox: undefined,\n      isDead: undefined,\n      isIdle: undefined,\n      isInaccessible: undefined,\n      isIstio: undefined,\n      isMisconfigured: undefined,\n      isOutside: undefined,\n      isRoot: undefined,\n      isServiceEntry: undefined,\n      service: undefined,\n      tcpIn: NaN,\n      tcpOut: NaN,\n      version: undefined,\n      workload: undefined\n    }\n  };\n  // It's not easy to get find/hide to work exactly as users may expect.  Because edges represent\n  // traffic for only one protocol it is best to use 0 defaults for that one protocol, and leave the others\n  // as NaN. In that way numerical expressions affect only edges for a desired protocol.  Because nodes\n  // can involve traffic from multiple protocols, it seems (for now) best to only set the values explicitly\n  // supplied in the JSON.\n  const edgeProtocolDefaults = {\n    grpc: {\n      grpc: 0,\n      grpcErr: 0,\n      grpcNoResponse: 0,\n      grpcPercentErr: 0,\n      grpcPercentReq: 0\n    },\n    http: {\n      http: 0,\n      http3xx: 0,\n      http4xx: 0,\n      http5xx: 0,\n      httpNoResponse: 0,\n      httpPercentErr: 0,\n      httpPercentReq: 0\n    },\n    tcp: {\n      tcp: 0\n    }\n  };\n\n  const propertiesToNumber = (object: Object, keys?: string[]) => {\n    const objectWithNumbers = { ...object };\n    const targetKeys = keys ? keys : Object.keys(objectWithNumbers);\n    for (const key of targetKeys) {\n      objectWithNumbers[key] = Number(objectWithNumbers[key]);\n    }\n    return objectWithNumbers;\n  };\n\n  const decoratedGraph: DecoratedGraphElements = {};\n  if (graphData) {\n    if (graphData.nodes) {\n      decoratedGraph.nodes = graphData.nodes.map((node: GraphNodeWrapper) => {\n        const decoratedNode: any = { ...node };\n        // parse out the traffic data into top level fields for the various protocols. This is done\n        // to be back compatible with our existing ui code that expects the explicit http and tcp fields.\n        // We can then set the 'traffic' field undefined because it is not used in the cy element handling.\n        if (decoratedNode.data.traffic) {\n          const traffic = decoratedNode.data.traffic;\n          decoratedNode.data.traffic = undefined;\n          traffic.forEach(protocol => {\n            decoratedNode.data = { ...propertiesToNumber(protocol.rates), ...decoratedNode.data };\n          });\n        }\n        // node.aggregate is set like aggregate=aggregateValue, split into distinct fields for the ui to use\n        if (!!decoratedNode.data.aggregate) {\n          const aggr = decoratedNode.data.aggregate.split('=');\n          decoratedNode.data.aggregate = aggr[0];\n          decoratedNode.data.aggregateValue = aggr[1];\n        }\n        const isIstio = isIstioNamespace(decoratedNode.data.namespace) ? true : undefined;\n        // prettier-ignore\n        decoratedNode.data = { isIstio: isIstio, ...elementsDefaults.nodes, ...decoratedNode.data } as DecoratedGraphNodeData;\n        // prettier-ignore\n        return decoratedNode as DecoratedGraphNodeWrapper;\n      });\n    }\n    if (graphData.edges) {\n      decoratedGraph.edges = graphData.edges.map((edge: GraphEdgeWrapper) => {\n        const decoratedEdge: any = { ...edge };\n        const { traffic, ...edgeData } = edge.data;\n        // see comment above about the 'traffic' data handling\n        if (traffic) {\n          if (hasProtocolTraffic(traffic)) {\n            decoratedEdge.data = {\n              hasTraffic: true,\n              responses: traffic.responses,\n              ...edgeProtocolDefaults[traffic.protocol],\n              ...propertiesToNumber(traffic.rates),\n              // Base properties that need to be cast as number.\n              ...propertiesToNumber(edgeData, ['isMtls', 'responseTime', 'throughput'])\n            };\n          }\n          decoratedEdge.data = { protocol: traffic.protocol, ...decoratedEdge.data };\n        }\n        // prettier-ignore\n        decoratedEdge.data = { ...elementsDefaults.edges, ...decoratedEdge.data } as DecoratedGraphEdgeData;\n        // prettier-ignore\n        return decoratedEdge as DecoratedGraphEdgeWrapper;\n      });\n    }\n  }\n  return decoratedGraph;\n};\n"]},"metadata":{},"sourceType":"module"}
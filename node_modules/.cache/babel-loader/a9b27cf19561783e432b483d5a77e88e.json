{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/BoundingClientAwareComponent/BoundingClientAwareComponent.tsx\";\nimport * as React from 'react';\nexport var PropertyType;\n\n(function (PropertyType) {\n  PropertyType[PropertyType[\"VIEWPORT_HEIGHT_MINUS_TOP\"] = 0] = \"VIEWPORT_HEIGHT_MINUS_TOP\";\n})(PropertyType || (PropertyType = {}));\n\nexport var vhMinusTop = function vhMinusTop(rect, offset) {\n  return \"calc(100vh - \".concat(rect.top + offset, \"px)\");\n}; // Computes the BoundingClientRect of the container, this helps to calculate the remaining height without\n// going further off the screen and without having to fix the value in the code.\n// Note: This does re-compute when there is a change in this component, but external changes are not yet\n// managed, that might require to observe the offsets, for our current use case this seems OK, as the top\n// headers doesn't change in height.\n\nexport var BoundingClientAwareComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(BoundingClientAwareComponent, _React$Component);\n\n  var _super = _createSuper(BoundingClientAwareComponent);\n\n  function BoundingClientAwareComponent(props) {\n    var _this;\n\n    _classCallCheck(this, BoundingClientAwareComponent);\n\n    _this = _super.call(this, props);\n    _this.containerRef = void 0;\n    _this.containerRef = React.createRef();\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(BoundingClientAwareComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleComponentUpdated();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleComponentUpdated();\n    }\n  }, {\n    key: \"handleComponentUpdated\",\n    value: function handleComponentUpdated() {\n      var rect = this.containerRef.current.getBoundingClientRect();\n      var stateUpdate = {};\n\n      if (this.props.maxHeight) {\n        var updatedValue = this.processProperty(this.props.maxHeight, rect);\n\n        if (updatedValue !== this.state.maxHeight) {\n          stateUpdate.maxHeight = updatedValue;\n        }\n      }\n\n      if (Object.values(stateUpdate).length > 0) {\n        this.setState(stateUpdate);\n      }\n\n      if (this.props.handleBoundingClientRect) {\n        this.props.handleBoundingClientRect(rect);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        maxHeight: this.state.maxHeight\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: this.props.className,\n        style: style,\n        ref: this.containerRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }, {\n    key: \"processProperty\",\n    value: function processProperty(property, rect) {\n      var margin = property.margin ? property.margin : 0;\n\n      switch (property.type) {\n        case PropertyType.VIEWPORT_HEIGHT_MINUS_TOP:\n          return vhMinusTop(rect, margin);\n\n        default:\n          throw Error('Undefined property type:' + property.type);\n      }\n    }\n  }]);\n\n  return BoundingClientAwareComponent;\n}(React.Component);","map":{"version":3,"sources":["/root/GraduateProject/src/components/BoundingClientAwareComponent/BoundingClientAwareComponent.tsx"],"names":["React","PropertyType","vhMinusTop","rect","offset","top","BoundingClientAwareComponent","props","containerRef","createRef","state","handleComponentUpdated","current","getBoundingClientRect","stateUpdate","maxHeight","updatedValue","processProperty","Object","values","length","setState","handleBoundingClientRect","style","className","children","property","margin","type","VIEWPORT_HEIGHT_MINUS_TOP","Error","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y,CAAAA,Y;GAAAA,Y,KAAAA,Y;;AAmBZ,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAaC,MAAb;AAAA,gCAAgDD,IAAI,CAACE,GAAL,GAAWD,MAA3D;AAAA,CAAnB,C,CAEP;AACA;AACA;AACA;AACA;;AACA,WAAaE,4BAAb;AAAA;;AAAA;;AAGE,wCAAYC,KAAZ,EAAuC;AAAA;;AAAA;;AACrC,8BAAMA,KAAN;AADqC,UAFtBC,YAEsB;AAErC,UAAKA,YAAL,GAAoBR,KAAK,CAACS,SAAN,EAApB;AACA,UAAKC,KAAL,GAAa,EAAb;AAHqC;AAItC;;AAPH;AAAA;AAAA,WASE,6BAAoB;AAClB,WAAKC,sBAAL;AACD;AAXH;AAAA;AAAA,WAaE,8BAAqB;AACnB,WAAKA,sBAAL;AACD;AAfH;AAAA;AAAA,WAiBE,kCAAyB;AACvB,UAAMR,IAAI,GAAG,KAAKK,YAAL,CAAkBI,OAAlB,CAA2BC,qBAA3B,EAAb;AAEA,UAAMC,WAA+B,GAAG,EAAxC;;AAEA,UAAI,KAAKP,KAAL,CAAWQ,SAAf,EAA0B;AACxB,YAAMC,YAAY,GAAG,KAAKC,eAAL,CAAqB,KAAKV,KAAL,CAAWQ,SAAhC,EAA2CZ,IAA3C,CAArB;;AACA,YAAIa,YAAY,KAAK,KAAKN,KAAL,CAAWK,SAAhC,EAA2C;AACzCD,UAAAA,WAAW,CAACC,SAAZ,GAAwBC,YAAxB;AACD;AACF;;AAED,UAAIE,MAAM,CAACC,MAAP,CAAcL,WAAd,EAA2BM,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,aAAKC,QAAL,CAAcP,WAAd;AACD;;AAED,UAAI,KAAKP,KAAL,CAAWe,wBAAf,EAAyC;AACvC,aAAKf,KAAL,CAAWe,wBAAX,CAAoCnB,IAApC;AACD;AACF;AApCH;AAAA;AAAA,WAsCE,kBAAS;AACP,UAAMoB,KAAK,GAAG;AACZR,QAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWK;AADV,OAAd;AAIA,0BACE;AAAK,QAAA,SAAS,EAAE,KAAKR,KAAL,CAAWiB,SAA3B;AAAsC,QAAA,KAAK,EAAED,KAA7C;AAAoD,QAAA,GAAG,EAAE,KAAKf,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWkB,QADd,CADF;AAKD;AAhDH;AAAA;AAAA,WAkDE,yBAAwBC,QAAxB,EAA4CvB,IAA5C,EAAwD;AACtD,UAAMwB,MAAM,GAAGD,QAAQ,CAACC,MAAT,GAAkBD,QAAQ,CAACC,MAA3B,GAAoC,CAAnD;;AACA,cAAQD,QAAQ,CAACE,IAAjB;AACE,aAAK3B,YAAY,CAAC4B,yBAAlB;AACE,iBAAO3B,UAAU,CAACC,IAAD,EAAOwB,MAAP,CAAjB;;AACF;AACE,gBAAMG,KAAK,CAAC,6BAA6BJ,QAAQ,CAACE,IAAvC,CAAX;AAJJ;AAMD;AA1DH;;AAAA;AAAA,EAAkD5B,KAAK,CAAC+B,SAAxD","sourcesContent":["import * as React from 'react';\n\ntype Rect = ClientRect | DOMRect;\n\nexport enum PropertyType {\n  VIEWPORT_HEIGHT_MINUS_TOP\n}\n\nexport type Property = {\n  type: PropertyType;\n  margin?: number;\n};\n\ntype ComputeOffsetProps = {\n  className: string;\n  maxHeight?: Property;\n  handleBoundingClientRect?(rect: Rect): void;\n};\n\ntype ComputeOffsetState = {\n  maxHeight?: string;\n};\n\nexport const vhMinusTop = (rect: Rect, offset: number) => `calc(100vh - ${rect.top + offset}px)`;\n\n// Computes the BoundingClientRect of the container, this helps to calculate the remaining height without\n// going further off the screen and without having to fix the value in the code.\n// Note: This does re-compute when there is a change in this component, but external changes are not yet\n// managed, that might require to observe the offsets, for our current use case this seems OK, as the top\n// headers doesn't change in height.\nexport class BoundingClientAwareComponent extends React.Component<ComputeOffsetProps, ComputeOffsetState> {\n  private readonly containerRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: ComputeOffsetProps) {\n    super(props);\n    this.containerRef = React.createRef<HTMLDivElement>();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.handleComponentUpdated();\n  }\n\n  componentDidUpdate() {\n    this.handleComponentUpdated();\n  }\n\n  handleComponentUpdated() {\n    const rect = this.containerRef.current!.getBoundingClientRect();\n\n    const stateUpdate: ComputeOffsetState = {};\n\n    if (this.props.maxHeight) {\n      const updatedValue = this.processProperty(this.props.maxHeight, rect);\n      if (updatedValue !== this.state.maxHeight) {\n        stateUpdate.maxHeight = updatedValue;\n      }\n    }\n\n    if (Object.values(stateUpdate).length > 0) {\n      this.setState(stateUpdate);\n    }\n\n    if (this.props.handleBoundingClientRect) {\n      this.props.handleBoundingClientRect(rect);\n    }\n  }\n\n  render() {\n    const style = {\n      maxHeight: this.state.maxHeight\n    };\n\n    return (\n      <div className={this.props.className} style={style} ref={this.containerRef}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  private processProperty(property: Property, rect: Rect) {\n    const margin = property.margin ? property.margin : 0;\n    switch (property.type) {\n      case PropertyType.VIEWPORT_HEIGHT_MINUS_TOP:\n        return vhMinusTop(rect, margin);\n      default:\n        throw Error('Undefined property type:' + property.type);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
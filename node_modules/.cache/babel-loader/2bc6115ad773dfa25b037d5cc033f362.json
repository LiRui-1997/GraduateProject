{"ast":null,"code":"import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport var editable = function editable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n      rowData = _ref.rowData,\n      column = _ref.column;\n  var onRowEdit = column.extraParams.onRowEdit;\n\n  var toggleEditMode = function toggleEditMode(event, type) {\n    var validationErrors = {};\n\n    if (type === 'save') {\n      validationErrors = rowData.rowEditValidationRules && rowData.rowEditValidationRules.reduce(function (acc, rule) {\n        var invalidCells = rowData.cells.filter(function (cellData) {\n          var testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n          var failedValidation = !rule.validator(testValue);\n\n          if (failedValidation) {\n            cellData.props.isValid = false;\n          }\n\n          return failedValidation;\n        });\n\n        if (invalidCells.length) {\n          acc[rule.name] = invalidCells.map(function (cell) {\n            return cell.props.name;\n          });\n        }\n\n        return acc;\n      }, {});\n    } // tslint:disable-next-line:no-unused-expression\n\n\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n\n\n  function getAriaLabelTxt(identifier, actionType) {\n    var result;\n\n    switch (actionType) {\n      case 'cancel':\n        result = \"Cancel row edits for row \".concat(identifier);\n        break;\n\n      case 'save':\n        result = \"Save row edits for row \".concat(identifier);\n        break;\n\n      default:\n        result = \"Place row \".concat(identifier, \" in edit mode\");\n    }\n\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: React.createElement(EditColumn, {\n      saveAriaLabel: rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'save'),\n      cancelAriaLabel: rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'cancel'),\n      editAriaLabel: rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'edit'),\n      valid: rowData && rowData.isValid,\n      editing: rowData && rowData.isEditable,\n      onClick: toggleEditMode\n    })\n  };\n};","map":{"version":3,"sources":["/root/GraduateProject/node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/editable.js"],"names":["React","EditColumn","tableStyles","editable","label","rowIndex","rowData","column","onRowEdit","extraParams","toggleEditMode","event","type","validationErrors","rowEditValidationRules","reduce","acc","rule","invalidCells","cells","filter","cellData","testValue","props","editableValue","value","failedValidation","validator","isValid","length","name","map","cell","isEditable","getAriaLabelTxt","identifier","actionType","result","className","tableInlineEditAction","component","isVisible","children","createElement","saveAriaLabel","rowSaveBtnAriaLabel","cancelAriaLabel","rowCancelBtnAriaLabel","editAriaLabel","rowEditBtnAriaLabel","valid","editing","onClick"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport const editable = (label, {\n  rowIndex,\n  rowData,\n  column\n}) => {\n  const {\n    extraParams: {\n      onRowEdit\n    }\n  } = column;\n\n  const toggleEditMode = (event, type) => {\n    let validationErrors = {};\n\n    if (type === 'save') {\n      validationErrors = rowData.rowEditValidationRules && rowData.rowEditValidationRules.reduce((acc, rule) => {\n        const invalidCells = rowData.cells.filter(cellData => {\n          const testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n          const failedValidation = !rule.validator(testValue);\n\n          if (failedValidation) {\n            cellData.props.isValid = false;\n          }\n\n          return failedValidation;\n        });\n\n        if (invalidCells.length) {\n          acc[rule.name] = invalidCells.map(cell => cell.props.name);\n        }\n\n        return acc;\n      }, {});\n    } // tslint:disable-next-line:no-unused-expression\n\n\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n\n\n  function getAriaLabelTxt(identifier, actionType) {\n    let result;\n\n    switch (actionType) {\n      case 'cancel':\n        result = `Cancel row edits for row ${identifier}`;\n        break;\n\n      case 'save':\n        result = `Save row edits for row ${identifier}`;\n        break;\n\n      default:\n        result = `Place row ${identifier} in edit mode`;\n    }\n\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: React.createElement(EditColumn, {\n      saveAriaLabel: rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'save'),\n      cancelAriaLabel: rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'cancel'),\n      editAriaLabel: rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'edit'),\n      valid: rowData && rowData.isValid,\n      editing: rowData && rowData.isEditable,\n      onClick: toggleEditMode\n    })\n  };\n};\n//# sourceMappingURL=editable.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/IstioWizards/RequestTimeouts/RouteRetry.tsx\";\nimport * as React from 'react';\nimport { FormGroup, Switch, TextInput } from '@patternfly/react-core';\nimport { HTTP_RETRY_TOOLTIP, wizardTooltip } from '../WizardHelp';\nvar tryTimeoutMsg = 'Timeout per retry attempt for a given request. Format: 1h/1m/1s/1ms. MUST be >=1ms.';\n\nvar RouteRetry = /*#__PURE__*/function (_React$Component) {\n  _inherits(RouteRetry, _React$Component);\n\n  var _super = _createSuper(RouteRetry);\n\n  function RouteRetry() {\n    _classCallCheck(this, RouteRetry);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RouteRetry, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Add HTTP Retry\",\n        fieldId: \"retrySwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"retrySwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.props.isRetry,\n        onChange: function onChange() {\n          return _this.props.onRetry(!_this.props.isRetry, _this.props.retries);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, wizardTooltip(HTTP_RETRY_TOOLTIP))), this.props.isRetry && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Attempts\",\n        fieldId: \"attempts\",\n        helperText: \"Number of retries for a given request.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.props.retries.attempts,\n        type: \"text\",\n        id: \"attempts\",\n        name: \"attempts\",\n        onChange: function onChange(value) {\n          var newValue = Number(value || 0);\n          newValue = Number.isNaN(newValue) ? 0 : newValue;\n\n          _this.props.onRetry(_this.props.isRetry, {\n            attempts: newValue,\n            perTryTimeout: _this.props.retries.perTryTimeout,\n            retryOn: _this.props.retries.retryOn\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Per Try Timeout\",\n        fieldId: \"pre-try-timeout\",\n        helperText: tryTimeoutMsg,\n        helperTextInvalid: tryTimeoutMsg,\n        isValid: this.props.isValidRetry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.props.retries.perTryTimeout,\n        id: \"pre-try-timeout\",\n        name: \"pre-try-timeout\",\n        isValid: this.props.isValidRetry,\n        onChange: function onChange(value) {\n          return _this.props.onRetry(_this.props.isRetry, {\n            attempts: _this.props.retries.attempts,\n            perTryTimeout: value,\n            retryOn: _this.props.retries.retryOn\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return RouteRetry;\n}(React.Component);\n\nexport default RouteRetry;","map":{"version":3,"sources":["/root/GraduateProject/src/components/IstioWizards/RequestTimeouts/RouteRetry.tsx"],"names":["React","FormGroup","Switch","TextInput","HTTP_RETRY_TOOLTIP","wizardTooltip","tryTimeoutMsg","RouteRetry","props","isRetry","onRetry","retries","attempts","value","newValue","Number","isNaN","perTryTimeout","retryOn","isValidRetry","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FormGroup, Switch, TextInput } from '@patternfly/react-core';\nimport { HTTPRetry } from '../../../types/IstioObjects';\nimport { HTTP_RETRY_TOOLTIP, wizardTooltip } from '../WizardHelp';\n\nexport type RouteRetryProps = {\n  isRetry: boolean;\n  retries: HTTPRetry;\n  isValidRetry: boolean;\n  onRetry: (isRetry: boolean, retries: HTTPRetry) => void;\n};\n\nconst tryTimeoutMsg = 'Timeout per retry attempt for a given request. Format: 1h/1m/1s/1ms. MUST be >=1ms.';\n\nclass RouteRetry extends React.Component<RouteRetryProps> {\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Add HTTP Retry\" fieldId=\"retrySwitch\">\n          <Switch\n            id=\"retrySwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.props.isRetry}\n            onChange={() => this.props.onRetry(!this.props.isRetry, this.props.retries)}\n          />\n          <span>{wizardTooltip(HTTP_RETRY_TOOLTIP)}</span>\n        </FormGroup>\n        {this.props.isRetry && (\n          <>\n            <FormGroup label=\"Attempts\" fieldId=\"attempts\" helperText=\"Number of retries for a given request.\">\n              <TextInput\n                value={this.props.retries.attempts}\n                type=\"text\"\n                id=\"attempts\"\n                name=\"attempts\"\n                onChange={value => {\n                  let newValue = Number(value || 0);\n                  newValue = Number.isNaN(newValue) ? 0 : newValue;\n                  this.props.onRetry(this.props.isRetry, {\n                    attempts: newValue,\n                    perTryTimeout: this.props.retries.perTryTimeout,\n                    retryOn: this.props.retries.retryOn\n                  });\n                }}\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Per Try Timeout\"\n              fieldId=\"pre-try-timeout\"\n              helperText={tryTimeoutMsg}\n              helperTextInvalid={tryTimeoutMsg}\n              isValid={this.props.isValidRetry}\n            >\n              <TextInput\n                value={this.props.retries.perTryTimeout}\n                id=\"pre-try-timeout\"\n                name=\"pre-try-timeout\"\n                isValid={this.props.isValidRetry}\n                onChange={value =>\n                  this.props.onRetry(this.props.isRetry, {\n                    attempts: this.props.retries.attempts,\n                    perTryTimeout: value,\n                    retryOn: this.props.retries.retryOn\n                  })\n                }\n              />\n            </FormGroup>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default RouteRetry;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/About/AboutUIModal.tsx\";\nimport * as React from 'react';\nimport { AboutModal, TextContent, TextList, TextListItem, Title, Button } from '@patternfly/react-core';\nimport { StatusKey } from '../../types/StatusState';\nimport { config, kialiLogo } from '../../config';\nimport { style } from 'typestyle';\nimport { KialiIcon } from 'config/KialiIcon';\nvar iconStyle = style({\n  marginRight: '10px'\n});\n\nvar AboutUIModal = /*#__PURE__*/function (_React$Component) {\n  _inherits(AboutUIModal, _React$Component);\n\n  var _super = _createSuper(AboutUIModal);\n\n  function AboutUIModal(props) {\n    var _this;\n\n    _classCallCheck(this, AboutUIModal);\n\n    _this = _super.call(this, props);\n\n    _this.open = function () {\n      _this.setState({\n        showModal: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        showModal: false\n      });\n    };\n\n    _this.renderComponent = function (externalService) {\n      var name = externalService.version ? externalService.name : \"\".concat(externalService.name, \" URL\");\n\n      var additionalInfo = _this.additionalComponentInfoContent(externalService);\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: name + additionalInfo,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TextListItem, {\n        component: \"dt\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, name), /*#__PURE__*/React.createElement(TextListItem, {\n        component: \"dd\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, additionalInfo));\n    };\n\n    _this.additionalComponentInfoContent = function (externalService) {\n      if (!externalService.version && !externalService.url) {\n        return 'N/A';\n      }\n\n      var version = externalService.version ? externalService.version : '';\n      var url = externalService.url ? /*#__PURE__*/React.createElement(\"a\", {\n        href: externalService.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, externalService.url) : '';\n      return /*#__PURE__*/React.createElement(React.Fragment, null, version, \" \", url);\n    };\n\n    _this.renderWebsiteLink = function () {\n      if (config.about && config.about.website) {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(Button, {\n            component: \"a\",\n            href: config.about.website.url,\n            variant: \"link\",\n            target: \"_blank\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Website, {\n            className: iconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 11\n            }\n          }), config.about.website.linkText)\n        );\n      }\n\n      return null;\n    };\n\n    _this.renderProjectLink = function () {\n      if (config.about && config.about.project) {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(Button, {\n            component: \"a\",\n            href: config.about.project.url,\n            variant: \"link\",\n            target: \"_blank\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Repository, {\n            className: iconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 11\n            }\n          }), config.about.project.linkText)\n        );\n      }\n\n      return null;\n    };\n\n    _this.state = {\n      showModal: false\n    };\n    return _this;\n  }\n\n  _createClass(AboutUIModal, [{\n    key: \"render\",\n    value: function render() {\n      var uiVersion = process.env.REACT_APP_GIT_HASH === '' || process.env.REACT_APP_GIT_HASH === 'unknown' ? process.env.REACT_APP_VERSION : \"\".concat(process.env.REACT_APP_VERSION, \" (\").concat(process.env.REACT_APP_GIT_HASH, \")\");\n      var coreVersion = this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH] === '' || this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH] === 'unknown' ? this.props.status[StatusKey.KIALI_CORE_VERSION] : \"\".concat(this.props.status[StatusKey.KIALI_CORE_VERSION], \" (\").concat(this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH], \")\");\n      var containerVersion = this.props.status[StatusKey.KIALI_CONTAINER_VERSION];\n      return /*#__PURE__*/React.createElement(AboutModal, {\n        isOpen: this.state.showModal,\n        onClose: this.close,\n        productName: \"\",\n        brandImageSrc: kialiLogo,\n        brandImageAlt: \"Kiali Logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TextContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TextList, {\n        component: \"dl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-ui-name',\n        component: \"dt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, \"Kiali UI\"), /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-ui-version',\n        component: \"dd\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, uiVersion), /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-name',\n        component: \"dt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, \"Kiali Server\"), /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-version',\n        component: \"dd\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, coreVersion), /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-container-name',\n        component: \"dt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, \"Kiali Container\"), /*#__PURE__*/React.createElement(TextListItem, {\n        key: 'kiali-container-version',\n        component: \"dd\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, containerVersion)), /*#__PURE__*/React.createElement(Title, {\n        size: \"xl\",\n        style: {\n          padding: '20px 0px 20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, \"Components\"), /*#__PURE__*/React.createElement(TextList, {\n        component: \"dl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, this.props.externalServices && this.props.externalServices.map(this.renderComponent)), this.renderWebsiteLink(), this.renderProjectLink()));\n    }\n  }]);\n\n  return AboutUIModal;\n}(React.Component);\n\nexport default AboutUIModal;","map":{"version":3,"sources":["/root/kiali-ui/src/components/About/AboutUIModal.tsx"],"names":["React","AboutModal","TextContent","TextList","TextListItem","Title","Button","StatusKey","config","kialiLogo","style","KialiIcon","iconStyle","marginRight","AboutUIModal","props","open","setState","showModal","close","renderComponent","externalService","name","version","additionalInfo","additionalComponentInfoContent","url","renderWebsiteLink","about","website","linkText","renderProjectLink","project","state","uiVersion","process","env","REACT_APP_GIT_HASH","REACT_APP_VERSION","coreVersion","status","KIALI_CORE_COMMIT_HASH","KIALI_CORE_VERSION","containerVersion","KIALI_CONTAINER_VERSION","padding","externalServices","map","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AboutModal, TextContent, TextList, TextListItem, Title, Button } from '@patternfly/react-core';\nimport { ExternalServiceInfo, Status, StatusKey } from '../../types/StatusState';\nimport { config, kialiLogo } from '../../config';\nimport { style } from 'typestyle';\nimport { KialiIcon } from 'config/KialiIcon';\n\ntype AboutUIModalState = {\n  showModal: boolean;\n};\n\ntype AboutUIModalProps = {\n  status: Status;\n  externalServices: ExternalServiceInfo[];\n};\n\nconst iconStyle = style({\n  marginRight: '10px'\n});\n\nclass AboutUIModal extends React.Component<AboutUIModalProps, AboutUIModalState> {\n  constructor(props: AboutUIModalProps) {\n    super(props);\n    this.state = { showModal: false };\n  }\n\n  open = () => {\n    this.setState({ showModal: true });\n  };\n\n  close = () => {\n    this.setState({ showModal: false });\n  };\n\n  render() {\n    const uiVersion =\n      process.env.REACT_APP_GIT_HASH === '' || process.env.REACT_APP_GIT_HASH === 'unknown'\n        ? process.env.REACT_APP_VERSION\n        : `${process.env.REACT_APP_VERSION} (${process.env.REACT_APP_GIT_HASH})`;\n    const coreVersion =\n      this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH] === '' ||\n      this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH] === 'unknown'\n        ? this.props.status[StatusKey.KIALI_CORE_VERSION]\n        : `${this.props.status[StatusKey.KIALI_CORE_VERSION]} (${this.props.status[StatusKey.KIALI_CORE_COMMIT_HASH]})`;\n    const containerVersion = this.props.status[StatusKey.KIALI_CONTAINER_VERSION];\n\n    return (\n      <AboutModal\n        isOpen={this.state.showModal}\n        onClose={this.close}\n        productName=\"\"\n        brandImageSrc={kialiLogo}\n        brandImageAlt=\"Kiali Logo\"\n      >\n        <TextContent>\n          <TextList component=\"dl\">\n            <TextListItem key={'kiali-ui-name'} component=\"dt\">\n              Kiali UI\n            </TextListItem>\n            <TextListItem key={'kiali-ui-version'} component=\"dd\">\n              {uiVersion!}\n            </TextListItem>\n            <TextListItem key={'kiali-name'} component=\"dt\">\n              Kiali Server\n            </TextListItem>\n            <TextListItem key={'kiali-version'} component=\"dd\">\n              {coreVersion!}\n            </TextListItem>\n            <TextListItem key={'kiali-container-name'} component=\"dt\">\n              Kiali Container\n            </TextListItem>\n            <TextListItem key={'kiali-container-version'} component=\"dd\">\n              {containerVersion!}\n            </TextListItem>\n          </TextList>\n          <Title size=\"xl\" style={{ padding: '20px 0px 20px' }}>\n            Components\n          </Title>\n          <TextList component=\"dl\">\n            {this.props.externalServices && this.props.externalServices.map(this.renderComponent)}\n          </TextList>\n          {this.renderWebsiteLink()}\n          {this.renderProjectLink()}\n        </TextContent>\n      </AboutModal>\n    );\n  }\n\n  private renderComponent = (externalService: ExternalServiceInfo) => {\n    const name = externalService.version ? externalService.name : `${externalService.name} URL`;\n    const additionalInfo = this.additionalComponentInfoContent(externalService);\n    return (\n      <React.Fragment key={name + additionalInfo}>\n        <TextListItem component=\"dt\">{name}</TextListItem>\n        <TextListItem component=\"dd\">{additionalInfo}</TextListItem>\n      </React.Fragment>\n    );\n  };\n\n  private additionalComponentInfoContent = (externalService: ExternalServiceInfo) => {\n    if (!externalService.version && !externalService.url) {\n      return 'N/A';\n    }\n    const version = externalService.version ? externalService.version : '';\n    const url = externalService.url ? (\n      <a href={externalService.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {externalService.url}\n      </a>\n    ) : (\n      ''\n    );\n    return (\n      <>\n        {version} {url}\n      </>\n    );\n  };\n\n  private renderWebsiteLink = () => {\n    if (config.about && config.about.website) {\n      return (\n        // @ts-ignore\n        <Button component=\"a\" href={config.about.website.url} variant=\"link\" target=\"_blank\">\n          <KialiIcon.Website className={iconStyle} />\n          {config.about.website.linkText}\n        </Button>\n      );\n    }\n\n    return null;\n  };\n\n  private renderProjectLink = () => {\n    if (config.about && config.about.project) {\n      return (\n        // @ts-ignore\n        <Button component=\"a\" href={config.about.project.url} variant=\"link\" target=\"_blank\">\n          <KialiIcon.Repository className={iconStyle} />\n          {config.about.project.linkText}\n        </Button>\n      );\n    }\n\n    return null;\n  };\n}\n\nexport default AboutUIModal;\n"]},"metadata":{},"sourceType":"module"}
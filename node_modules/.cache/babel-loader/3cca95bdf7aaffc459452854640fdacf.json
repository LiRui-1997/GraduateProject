{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/CytoscapeGraph/ContextMenu/NodeContextMenu.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport history from 'app/History';\nimport { NodeType } from 'types/Graph';\nimport { Paths, serverConfig } from 'config';\nvar graphContextMenuContainerStyle = style({\n  textAlign: 'left'\n});\nvar graphContextMenuTitleStyle = style({\n  textAlign: 'left',\n  fontSize: '16px',\n  borderBottom: '1px solid black'\n});\nvar graphContextMenuSubTitleStyle = style({\n  textAlign: 'left',\n  fontSize: '14px',\n  color: '#737679',\n  fontWeight: 700,\n  paddingTop: 2,\n  paddingBottom: 4\n});\nvar graphContextMenuItemStyle = style({\n  textAlign: 'left',\n  fontSize: '12px',\n  textDecoration: 'none',\n  $nest: {\n    '&:hover': {\n      backgroundColor: '#def3ff',\n      color: '#4d5258'\n    }\n  }\n});\nvar graphContextMenuItemLinkStyle = style({\n  color: '#363636'\n});\nexport var NodeContextMenu = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(NodeContextMenu, _React$PureComponent);\n\n  var _super = _createSuper(NodeContextMenu);\n\n  function NodeContextMenu() {\n    var _this;\n\n    _classCallCheck(this, NodeContextMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onClick = function (_e) {\n      _this.props.contextMenu.hide(0);\n    };\n\n    return _this;\n  }\n\n  _createClass(NodeContextMenu, [{\n    key: \"createMenuItem\",\n    value: function createMenuItem(href, title) {\n      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_self';\n      var external = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var commonLinkProps = {\n        className: graphContextMenuItemLinkStyle,\n        children: title,\n        onClick: this.onClick,\n        target: target\n      };\n      var item;\n\n      if (external) {\n        // Linter is not taking care that 'title' is passed as a property\n        // eslint-disable-next-line\n        item = /*#__PURE__*/React.createElement(\"a\", Object.assign({\n          href: href,\n          rel: \"noreferrer noopener\"\n        }, commonLinkProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }\n        }), commonLinkProps.children, \" \", /*#__PURE__*/React.createElement(ExternalLinkAltIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 38\n          }\n        }));\n      } else {\n        item = /*#__PURE__*/React.createElement(Link, Object.assign({\n          to: href\n        }, commonLinkProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 14\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: title,\n        className: graphContextMenuItemStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, item);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var linkParams = NodeContextMenu.derivedValuesFromProps(this.props); // Disable context menu if we are dealing with an aggregate (currently has no detail) or an inaccessible node\n\n      if (!linkParams || this.props.isInaccessible) {\n        this.props.contextMenu.disable();\n        return null;\n      } // The getOptionsFromLinkParams function can potentially return a blank list if the\n      // node associated to the context menu is for a remote cluster with no accessible Kialis.\n      // That would lead to an empty menu. Here, we assume that whoever is the host/parent component,\n      // that component won't render this context menu in case this menu would be blank. So, here\n      // it's simply assumed that the context menu will look good.\n\n\n      var options = getOptionsFromLinkParams(linkParams, this.props.jaegerInfo);\n      var menuOptions = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: graphContextMenuSubTitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, \"Show\"), options.map(function (o) {\n        return _this2.createMenuItem(o.url, o.text, o.target, o.external);\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: graphContextMenuContainerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: graphContextMenuTitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      }, linkParams.name)), menuOptions);\n    }\n  }], [{\n    key: \"derivedValuesFromProps\",\n    value: function derivedValuesFromProps(node) {\n      var cluster = node.cluster;\n      var namespace = node.isServiceEntry ? node.isServiceEntry.namespace : node.namespace;\n      var name = undefined;\n      var type = undefined;\n\n      switch (node.nodeType) {\n        case NodeType.APP:\n        case NodeType.BOX:\n          // we only support app box node graphs, so treat like app\n          // Prefer workload type for nodes backed by a workload\n          if (node.workload && node.parent) {\n            name = node.workload;\n            type = Paths.WORKLOADS;\n          } else {\n            type = Paths.APPLICATIONS;\n            name = node.app;\n          }\n\n          break;\n\n        case NodeType.SERVICE:\n          type = node.isServiceEntry ? Paths.SERVICEENTRIES : Paths.SERVICES;\n          name = node.service;\n          break;\n\n        case NodeType.WORKLOAD:\n          name = node.workload;\n          type = Paths.WORKLOADS;\n          break;\n      }\n\n      return type && name ? {\n        cluster: cluster,\n        namespace: namespace,\n        type: type,\n        name: name\n      } : undefined;\n    }\n  }]);\n\n  return NodeContextMenu;\n}(React.PureComponent);\n\nvar getJaegerURL = function getJaegerURL(namespace, namespaceSelector, jaegerURL, name) {\n  return \"\".concat(jaegerURL, \"/search?service=\").concat(name).concat(namespaceSelector ? \".\".concat(namespace) : '');\n};\n\nexport var clickHandler = function clickHandler(o) {\n  if (o.external) {\n    window.open(o.url, o.target);\n  } else {\n    history.push(o.url);\n  }\n};\nexport var getOptions = function getOptions(node, jaegerInfo) {\n  var linkParams = NodeContextMenu.derivedValuesFromProps(node);\n\n  if (!linkParams) {\n    return [];\n  }\n\n  return getOptionsFromLinkParams(linkParams, jaegerInfo);\n};\n\nvar getOptionsFromLinkParams = function getOptionsFromLinkParams(linkParams, jaegerInfo) {\n  var _serverConfig$cluster;\n\n  var options = [];\n  var namespace = linkParams.namespace,\n      type = linkParams.type,\n      name = linkParams.name,\n      cluster = linkParams.cluster;\n  var detailsPageUrl = \"/namespaces/\".concat(namespace, \"/\").concat(type, \"/\").concat(name);\n  options.push({\n    text: 'Details',\n    url: detailsPageUrl\n  });\n\n  if (type !== Paths.SERVICEENTRIES) {\n    options.push({\n      text: 'Traffic',\n      url: \"\".concat(detailsPageUrl, \"?tab=traffic\")\n    });\n\n    if (type === Paths.WORKLOADS) {\n      options.push({\n        text: 'Logs',\n        url: \"\".concat(detailsPageUrl, \"?tab=logs\")\n      });\n    }\n\n    options.push({\n      text: 'Inbound Metrics',\n      url: \"\".concat(detailsPageUrl, \"?tab=\").concat(type === Paths.SERVICES ? 'metrics' : 'in_metrics')\n    });\n\n    if (type !== Paths.SERVICES) {\n      options.push({\n        text: 'Outbound Metrics',\n        url: \"\".concat(detailsPageUrl, \"?tab=out_metrics\")\n      });\n    }\n\n    if (type === Paths.APPLICATIONS && jaegerInfo && jaegerInfo.enabled) {\n      if (jaegerInfo.integration) {\n        options.push({\n          text: 'Traces',\n          url: \"\".concat(detailsPageUrl, \"?tab=traces\")\n        });\n      } else if (jaegerInfo.url) {\n        options.push({\n          text: 'Show Traces',\n          url: getJaegerURL(namespace, jaegerInfo.namespaceSelector, jaegerInfo.url, name),\n          external: true,\n          target: '_blank'\n        });\n      }\n    }\n  }\n\n  if (((_serverConfig$cluster = serverConfig.clusterInfo) === null || _serverConfig$cluster === void 0 ? void 0 : _serverConfig$cluster.name) && cluster !== serverConfig.clusterInfo.name) {\n    var _externalClusterInfo$;\n\n    var externalClusterInfo = serverConfig.clusters[cluster];\n    var kialiInfo = externalClusterInfo === null || externalClusterInfo === void 0 ? void 0 : (_externalClusterInfo$ = externalClusterInfo.kialiInstances) === null || _externalClusterInfo$ === void 0 ? void 0 : _externalClusterInfo$.find(function (instance) {\n      return instance.url.length !== 0;\n    });\n\n    if (kialiInfo === undefined) {\n      options = options.filter(function (o) {\n        return o.target === '_blank';\n      });\n    } else {\n      var externalKialiUrl = kialiInfo.url.replace(/\\/$/g, '') + '/console';\n\n      for (var idx = 0; idx < options.length; idx++) {\n        if (options[idx].target !== '_blank') {\n          options[idx].external = true;\n          options[idx].target = '_blank';\n          options[idx].url = externalKialiUrl + options[idx].url;\n        }\n      }\n    }\n  }\n\n  return options;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jaegerInfo: state.jaegerState.info\n  };\n};\n\nexport var NodeContextMenuContainer = connect(mapStateToProps)(NodeContextMenu);","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/ContextMenu/NodeContextMenu.tsx"],"names":["React","connect","Link","style","ExternalLinkAltIcon","history","NodeType","Paths","serverConfig","graphContextMenuContainerStyle","textAlign","graphContextMenuTitleStyle","fontSize","borderBottom","graphContextMenuSubTitleStyle","color","fontWeight","paddingTop","paddingBottom","graphContextMenuItemStyle","textDecoration","$nest","backgroundColor","graphContextMenuItemLinkStyle","NodeContextMenu","onClick","_e","props","contextMenu","hide","href","title","target","external","commonLinkProps","className","children","item","linkParams","derivedValuesFromProps","isInaccessible","disable","options","getOptionsFromLinkParams","jaegerInfo","menuOptions","map","o","createMenuItem","url","text","name","node","cluster","namespace","isServiceEntry","undefined","type","nodeType","APP","BOX","workload","parent","WORKLOADS","APPLICATIONS","app","SERVICE","SERVICEENTRIES","SERVICES","service","WORKLOAD","PureComponent","getJaegerURL","namespaceSelector","jaegerURL","clickHandler","window","open","push","getOptions","detailsPageUrl","enabled","integration","clusterInfo","externalClusterInfo","clusters","kialiInfo","kialiInstances","find","instance","length","filter","externalKialiUrl","replace","idx","mapStateToProps","state","jaegerState","info","NodeContextMenuContainer"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAiD,aAAjD;AAGA,SAASC,KAAT,EAAgBC,YAAhB,QAAoC,QAApC;AAOA,IAAMC,8BAA8B,GAAGN,KAAK,CAAC;AAC3CO,EAAAA,SAAS,EAAE;AADgC,CAAD,CAA5C;AAIA,IAAMC,0BAA0B,GAAGR,KAAK,CAAC;AACvCO,EAAAA,SAAS,EAAE,MAD4B;AAEvCE,EAAAA,QAAQ,EAAE,MAF6B;AAGvCC,EAAAA,YAAY,EAAE;AAHyB,CAAD,CAAxC;AAMA,IAAMC,6BAA6B,GAAGX,KAAK,CAAC;AAC1CO,EAAAA,SAAS,EAAE,MAD+B;AAE1CE,EAAAA,QAAQ,EAAE,MAFgC;AAG1CG,EAAAA,KAAK,EAAE,SAHmC;AAI1CC,EAAAA,UAAU,EAAE,GAJ8B;AAK1CC,EAAAA,UAAU,EAAE,CAL8B;AAM1CC,EAAAA,aAAa,EAAE;AAN2B,CAAD,CAA3C;AASA,IAAMC,yBAAyB,GAAGhB,KAAK,CAAC;AACtCO,EAAAA,SAAS,EAAE,MAD2B;AAEtCE,EAAAA,QAAQ,EAAE,MAF4B;AAGtCQ,EAAAA,cAAc,EAAE,MAHsB;AAItCC,EAAAA,KAAK,EAAE;AACL,eAAW;AACTC,MAAAA,eAAe,EAAE,SADR;AAETP,MAAAA,KAAK,EAAE;AAFE;AADN;AAJ+B,CAAD,CAAvC;AAYA,IAAMQ,6BAA6B,GAAGpB,KAAK,CAAC;AAC1CY,EAAAA,KAAK,EAAE;AADmC,CAAD,CAA3C;AAOA,WAAaS,eAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UA2FUC,OA3FV,GA2FoB,UAACC,EAAD,EAA6C;AAC7D,YAAKC,KAAL,CAAWC,WAAX,CAAuBC,IAAvB,CAA4B,CAA5B;AACD,KA7FH;;AAAA;AAAA;;AAAA;AAAA;AAAA,WA+BE,wBAAeC,IAAf,EAA6BC,KAA7B,EAAiG;AAAA,UAArDC,MAAqD,uEAApC,OAAoC;AAAA,UAA3BC,QAA2B,uEAAP,KAAO;AAC/F,UAAMC,eAAe,GAAG;AACtBC,QAAAA,SAAS,EAAEZ,6BADW;AAEtBa,QAAAA,QAAQ,EAAEL,KAFY;AAGtBN,QAAAA,OAAO,EAAE,KAAKA,OAHQ;AAItBO,QAAAA,MAAM,EAANA;AAJsB,OAAxB;AAOA,UAAIK,IAAJ;;AACA,UAAIJ,QAAJ,EAAc;AACZ;AACA;AACAI,QAAAA,IAAI,gBACF;AAAG,UAAA,IAAI,EAAEP,IAAT;AAAe,UAAA,GAAG,EAAC;AAAnB,WAA6CI,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACGA,eAAe,CAACE,QADnB,oBAC6B,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD7B,CADF;AAKD,OARD,MAQO;AACLC,QAAAA,IAAI,gBAAG,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAEP;AAAV,WAAoBI,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;;AAED,0BACE;AAAK,QAAA,GAAG,EAAEH,KAAV;AAAiB,QAAA,SAAS,EAAEZ,yBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGkB,IADH,CADF;AAKD;AAzDH;AAAA;AAAA,WA2DE,kBAAS;AAAA;;AACP,UAAMC,UAAU,GAAGd,eAAe,CAACe,sBAAhB,CAAuC,KAAKZ,KAA5C,CAAnB,CADO,CAGP;;AACA,UAAI,CAACW,UAAD,IAAe,KAAKX,KAAL,CAAWa,cAA9B,EAA8C;AAC5C,aAAKb,KAAL,CAAWC,WAAX,CAAuBa,OAAvB;AACA,eAAO,IAAP;AACD,OAPM,CASP;AACA;AACA;AACA;AACA;;;AACA,UAAMC,OAA4B,GAAGC,wBAAwB,CAACL,UAAD,EAAa,KAAKX,KAAL,CAAWiB,UAAxB,CAA7D;AACA,UAAMC,WAAW,gBACf,uDACE;AAAK,QAAA,SAAS,EAAE/B,6BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG4B,OAAO,CAACI,GAAR,CAAY,UAAAC,CAAC;AAAA,eAAI,MAAI,CAACC,cAAL,CAAoBD,CAAC,CAACE,GAAtB,EAA2BF,CAAC,CAACG,IAA7B,EAAmCH,CAAC,CAACf,MAArC,EAA6Ce,CAAC,CAACd,QAA/C,CAAJ;AAAA,OAAb,CAFH,CADF;AAOA,0BACE;AAAK,QAAA,SAAS,EAAExB,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAEE,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS2B,UAAU,CAACa,IAApB,CADF,CADF,EAIGN,WAJH,CADF;AAQD;AAzFH;AAAA;AAAA,WACE,gCAA8BO,IAA9B,EAAoF;AAClF,UAAMC,OAAe,GAAGD,IAAI,CAACC,OAA7B;AACA,UAAMC,SAAiB,GAAGF,IAAI,CAACG,cAAL,GAAsBH,IAAI,CAACG,cAAL,CAAoBD,SAA1C,GAAsDF,IAAI,CAACE,SAArF;AACA,UAAIH,IAAwB,GAAGK,SAA/B;AACA,UAAIC,IAAwB,GAAGD,SAA/B;;AACA,cAAQJ,IAAI,CAACM,QAAb;AACE,aAAKpD,QAAQ,CAACqD,GAAd;AACA,aAAKrD,QAAQ,CAACsD,GAAd;AAAmB;AACjB;AACA,cAAIR,IAAI,CAACS,QAAL,IAAiBT,IAAI,CAACU,MAA1B,EAAkC;AAChCX,YAAAA,IAAI,GAAGC,IAAI,CAACS,QAAZ;AACAJ,YAAAA,IAAI,GAAGlD,KAAK,CAACwD,SAAb;AACD,WAHD,MAGO;AACLN,YAAAA,IAAI,GAAGlD,KAAK,CAACyD,YAAb;AACAb,YAAAA,IAAI,GAAGC,IAAI,CAACa,GAAZ;AACD;;AACD;;AACF,aAAK3D,QAAQ,CAAC4D,OAAd;AACET,UAAAA,IAAI,GAAGL,IAAI,CAACG,cAAL,GAAsBhD,KAAK,CAAC4D,cAA5B,GAA6C5D,KAAK,CAAC6D,QAA1D;AACAjB,UAAAA,IAAI,GAAGC,IAAI,CAACiB,OAAZ;AACA;;AACF,aAAK/D,QAAQ,CAACgE,QAAd;AACEnB,UAAAA,IAAI,GAAGC,IAAI,CAACS,QAAZ;AACAJ,UAAAA,IAAI,GAAGlD,KAAK,CAACwD,SAAb;AACA;AAnBJ;;AAsBA,aAAON,IAAI,IAAIN,IAAR,GAAe;AAAEE,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,SAAS,EAATA,SAAX;AAAsBG,QAAAA,IAAI,EAAJA,IAAtB;AAA4BN,QAAAA,IAAI,EAAJA;AAA5B,OAAf,GAAoDK,SAA3D;AACD;AA7BH;;AAAA;AAAA,EAAqCxD,KAAK,CAACuE,aAA3C;;AAgGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAClB,SAAD,EAAoBmB,iBAApB,EAAgDC,SAAhD,EAAmEvB,IAAnE,EAA6F;AAChH,mBAAUuB,SAAV,6BAAsCvB,IAAtC,SAA6CsB,iBAAiB,cAAOnB,SAAP,IAAqB,EAAnF;AACD,CAFD;;AAWA,OAAO,IAAMqB,YAAY,GAAG,SAAfA,YAAe,CAAC5B,CAAD,EAA0B;AACpD,MAAIA,CAAC,CAACd,QAAN,EAAgB;AACd2C,IAAAA,MAAM,CAACC,IAAP,CAAY9B,CAAC,CAACE,GAAd,EAAmBF,CAAC,CAACf,MAArB;AACD,GAFD,MAEO;AACL3B,IAAAA,OAAO,CAACyE,IAAR,CAAa/B,CAAC,CAACE,GAAf;AACD;AACF,CANM;AAQP,OAAO,IAAM8B,UAAU,GAAG,SAAbA,UAAa,CAAC3B,IAAD,EAA+BR,UAA/B,EAAgF;AACxG,MAAMN,UAAU,GAAGd,eAAe,CAACe,sBAAhB,CAAuCa,IAAvC,CAAnB;;AACA,MAAI,CAACd,UAAL,EAAiB;AACf,WAAO,EAAP;AACD;;AACD,SAAOK,wBAAwB,CAACL,UAAD,EAAaM,UAAb,CAA/B;AACD,CANM;;AAQP,IAAMD,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACL,UAAD,EAAyBM,UAAzB,EAA0E;AAAA;;AACzG,MAAIF,OAA4B,GAAG,EAAnC;AACA,MAAQY,SAAR,GAA2ChB,UAA3C,CAAQgB,SAAR;AAAA,MAAmBG,IAAnB,GAA2CnB,UAA3C,CAAmBmB,IAAnB;AAAA,MAAyBN,IAAzB,GAA2Cb,UAA3C,CAAyBa,IAAzB;AAAA,MAA+BE,OAA/B,GAA2Cf,UAA3C,CAA+Be,OAA/B;AACA,MAAM2B,cAAc,yBAAkB1B,SAAlB,cAA+BG,IAA/B,cAAuCN,IAAvC,CAApB;AAEAT,EAAAA,OAAO,CAACoC,IAAR,CAAa;AAAE5B,IAAAA,IAAI,EAAE,SAAR;AAAmBD,IAAAA,GAAG,EAAE+B;AAAxB,GAAb;;AACA,MAAIvB,IAAI,KAAKlD,KAAK,CAAC4D,cAAnB,EAAmC;AACjCzB,IAAAA,OAAO,CAACoC,IAAR,CAAa;AAAE5B,MAAAA,IAAI,EAAE,SAAR;AAAmBD,MAAAA,GAAG,YAAK+B,cAAL;AAAtB,KAAb;;AACA,QAAIvB,IAAI,KAAKlD,KAAK,CAACwD,SAAnB,EAA8B;AAC5BrB,MAAAA,OAAO,CAACoC,IAAR,CAAa;AAAE5B,QAAAA,IAAI,EAAE,MAAR;AAAgBD,QAAAA,GAAG,YAAK+B,cAAL;AAAnB,OAAb;AACD;;AACDtC,IAAAA,OAAO,CAACoC,IAAR,CAAa;AACX5B,MAAAA,IAAI,EAAE,iBADK;AAEXD,MAAAA,GAAG,YAAK+B,cAAL,kBAA2BvB,IAAI,KAAKlD,KAAK,CAAC6D,QAAf,GAA0B,SAA1B,GAAsC,YAAjE;AAFQ,KAAb;;AAIA,QAAIX,IAAI,KAAKlD,KAAK,CAAC6D,QAAnB,EAA6B;AAC3B1B,MAAAA,OAAO,CAACoC,IAAR,CAAa;AAAE5B,QAAAA,IAAI,EAAE,kBAAR;AAA4BD,QAAAA,GAAG,YAAK+B,cAAL;AAA/B,OAAb;AACD;;AACD,QAAIvB,IAAI,KAAKlD,KAAK,CAACyD,YAAf,IAA+BpB,UAA/B,IAA6CA,UAAU,CAACqC,OAA5D,EAAqE;AACnE,UAAIrC,UAAU,CAACsC,WAAf,EAA4B;AAC1BxC,QAAAA,OAAO,CAACoC,IAAR,CAAa;AAAE5B,UAAAA,IAAI,EAAE,QAAR;AAAkBD,UAAAA,GAAG,YAAK+B,cAAL;AAArB,SAAb;AACD,OAFD,MAEO,IAAIpC,UAAU,CAACK,GAAf,EAAoB;AACzBP,QAAAA,OAAO,CAACoC,IAAR,CAAa;AACX5B,UAAAA,IAAI,EAAE,aADK;AAEXD,UAAAA,GAAG,EAAEuB,YAAY,CAAClB,SAAD,EAAYV,UAAU,CAAC6B,iBAAvB,EAA0C7B,UAAU,CAACK,GAArD,EAA0DE,IAA1D,CAFN;AAGXlB,UAAAA,QAAQ,EAAE,IAHC;AAIXD,UAAAA,MAAM,EAAE;AAJG,SAAb;AAMD;AACF;AACF;;AAED,MAAI,0BAAAxB,YAAY,CAAC2E,WAAb,gFAA0BhC,IAA1B,KAAkCE,OAAO,KAAK7C,YAAY,CAAC2E,WAAb,CAAyBhC,IAA3E,EAAiF;AAAA;;AAC/E,QAAMiC,mBAAmB,GAAG5E,YAAY,CAAC6E,QAAb,CAAsBhC,OAAtB,CAA5B;AACA,QAAMiC,SAAS,GAAGF,mBAAH,aAAGA,mBAAH,gDAAGA,mBAAmB,CAAEG,cAAxB,0DAAG,sBAAqCC,IAArC,CAA0C,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACxC,GAAT,CAAayC,MAAb,KAAwB,CAA5B;AAAA,KAAlD,CAAlB;;AACA,QAAIJ,SAAS,KAAK9B,SAAlB,EAA6B;AAC3Bd,MAAAA,OAAO,GAAGA,OAAO,CAACiD,MAAR,CAAe,UAAA5C,CAAC;AAAA,eAAIA,CAAC,CAACf,MAAF,KAAa,QAAjB;AAAA,OAAhB,CAAV;AACD,KAFD,MAEO;AACL,UAAM4D,gBAAgB,GAAGN,SAAS,CAACrC,GAAV,CAAc4C,OAAd,CAAsB,MAAtB,EAA8B,EAA9B,IAAoC,UAA7D;;AAEA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpD,OAAO,CAACgD,MAAhC,EAAwCI,GAAG,EAA3C,EAA+C;AAC7C,YAAIpD,OAAO,CAACoD,GAAD,CAAP,CAAa9D,MAAb,KAAwB,QAA5B,EAAsC;AACpCU,UAAAA,OAAO,CAACoD,GAAD,CAAP,CAAa7D,QAAb,GAAwB,IAAxB;AACAS,UAAAA,OAAO,CAACoD,GAAD,CAAP,CAAa9D,MAAb,GAAsB,QAAtB;AACAU,UAAAA,OAAO,CAACoD,GAAD,CAAP,CAAa7C,GAAb,GAAmB2C,gBAAgB,GAAGlD,OAAO,CAACoD,GAAD,CAAP,CAAa7C,GAAnD;AACD;AACF;AACF;AACF;;AAED,SAAOP,OAAP;AACD,CAnDD;;AAqDA,IAAMqD,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAA2B;AACjDpD,IAAAA,UAAU,EAAEoD,KAAK,CAACC,WAAN,CAAkBC;AADmB,GAA3B;AAAA,CAAxB;;AAIA,OAAO,IAAMC,wBAAwB,GAAGlG,OAAO,CAAC8F,eAAD,CAAP,CAAyBvE,eAAzB,CAAjC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { style } from 'typestyle';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport history from 'app/History';\nimport { NodeType, DecoratedGraphNodeData } from 'types/Graph';\nimport { JaegerInfo } from 'types/JaegerInfo';\nimport { KialiAppState } from 'store/Store';\nimport { Paths, serverConfig } from 'config';\nimport { NodeContextMenuProps } from '../CytoscapeContextMenu';\n\ntype ReduxProps = {\n  jaegerInfo?: JaegerInfo;\n};\n\nconst graphContextMenuContainerStyle = style({\n  textAlign: 'left'\n});\n\nconst graphContextMenuTitleStyle = style({\n  textAlign: 'left',\n  fontSize: '16px',\n  borderBottom: '1px solid black'\n});\n\nconst graphContextMenuSubTitleStyle = style({\n  textAlign: 'left',\n  fontSize: '14px',\n  color: '#737679',\n  fontWeight: 700,\n  paddingTop: 2,\n  paddingBottom: 4\n});\n\nconst graphContextMenuItemStyle = style({\n  textAlign: 'left',\n  fontSize: '12px',\n  textDecoration: 'none',\n  $nest: {\n    '&:hover': {\n      backgroundColor: '#def3ff',\n      color: '#4d5258'\n    }\n  }\n});\n\nconst graphContextMenuItemLinkStyle = style({\n  color: '#363636'\n});\n\ntype Props = NodeContextMenuProps & ReduxProps;\ntype LinkParams = { cluster: string; namespace: string; name: string; type: string };\n\nexport class NodeContextMenu extends React.PureComponent<Props> {\n  static derivedValuesFromProps(node: DecoratedGraphNodeData): LinkParams | undefined {\n    const cluster: string = node.cluster;\n    const namespace: string = node.isServiceEntry ? node.isServiceEntry.namespace : node.namespace;\n    let name: string | undefined = undefined;\n    let type: string | undefined = undefined;\n    switch (node.nodeType) {\n      case NodeType.APP:\n      case NodeType.BOX: // we only support app box node graphs, so treat like app\n        // Prefer workload type for nodes backed by a workload\n        if (node.workload && node.parent) {\n          name = node.workload;\n          type = Paths.WORKLOADS;\n        } else {\n          type = Paths.APPLICATIONS;\n          name = node.app;\n        }\n        break;\n      case NodeType.SERVICE:\n        type = node.isServiceEntry ? Paths.SERVICEENTRIES : Paths.SERVICES;\n        name = node.service;\n        break;\n      case NodeType.WORKLOAD:\n        name = node.workload;\n        type = Paths.WORKLOADS;\n        break;\n    }\n\n    return type && name ? { cluster, namespace, type, name } : undefined;\n  }\n\n  createMenuItem(href: string, title: string, target: string = '_self', external: boolean = false) {\n    const commonLinkProps = {\n      className: graphContextMenuItemLinkStyle,\n      children: title,\n      onClick: this.onClick,\n      target\n    };\n\n    let item: any;\n    if (external) {\n      // Linter is not taking care that 'title' is passed as a property\n      // eslint-disable-next-line\n      item = (\n        <a href={href} rel=\"noreferrer noopener\" {...commonLinkProps}>\n          {commonLinkProps.children} <ExternalLinkAltIcon />\n        </a>\n      );\n    } else {\n      item = <Link to={href} {...commonLinkProps} />;\n    }\n\n    return (\n      <div key={title} className={graphContextMenuItemStyle}>\n        {item}\n      </div>\n    );\n  }\n\n  render() {\n    const linkParams = NodeContextMenu.derivedValuesFromProps(this.props);\n\n    // Disable context menu if we are dealing with an aggregate (currently has no detail) or an inaccessible node\n    if (!linkParams || this.props.isInaccessible) {\n      this.props.contextMenu.disable();\n      return null;\n    }\n\n    // The getOptionsFromLinkParams function can potentially return a blank list if the\n    // node associated to the context menu is for a remote cluster with no accessible Kialis.\n    // That would lead to an empty menu. Here, we assume that whoever is the host/parent component,\n    // that component won't render this context menu in case this menu would be blank. So, here\n    // it's simply assumed that the context menu will look good.\n    const options: ContextMenuOption[] = getOptionsFromLinkParams(linkParams, this.props.jaegerInfo);\n    const menuOptions = (\n      <>\n        <div className={graphContextMenuSubTitleStyle}>Show</div>\n        {options.map(o => this.createMenuItem(o.url, o.text, o.target, o.external))}\n      </>\n    );\n\n    return (\n      <div className={graphContextMenuContainerStyle}>\n        <div className={graphContextMenuTitleStyle}>\n          <strong>{linkParams.name}</strong>\n        </div>\n        {menuOptions}\n      </div>\n    );\n  }\n\n  private onClick = (_e: React.MouseEvent<HTMLAnchorElement>) => {\n    this.props.contextMenu.hide(0);\n  };\n}\n\nconst getJaegerURL = (namespace: string, namespaceSelector: boolean, jaegerURL: string, name?: string): string => {\n  return `${jaegerURL}/search?service=${name}${namespaceSelector ? `.${namespace}` : ''}`;\n};\n\nexport type ContextMenuOption = {\n  text: string;\n  url: string;\n  external?: boolean;\n  target?: string;\n};\n\nexport const clickHandler = (o: ContextMenuOption) => {\n  if (o.external) {\n    window.open(o.url, o.target);\n  } else {\n    history.push(o.url);\n  }\n};\n\nexport const getOptions = (node: DecoratedGraphNodeData, jaegerInfo?: JaegerInfo): ContextMenuOption[] => {\n  const linkParams = NodeContextMenu.derivedValuesFromProps(node);\n  if (!linkParams) {\n    return [];\n  }\n  return getOptionsFromLinkParams(linkParams, jaegerInfo);\n};\n\nconst getOptionsFromLinkParams = (linkParams: LinkParams, jaegerInfo?: JaegerInfo): ContextMenuOption[] => {\n  let options: ContextMenuOption[] = [];\n  const { namespace, type, name, cluster } = linkParams;\n  const detailsPageUrl = `/namespaces/${namespace}/${type}/${name}`;\n\n  options.push({ text: 'Details', url: detailsPageUrl });\n  if (type !== Paths.SERVICEENTRIES) {\n    options.push({ text: 'Traffic', url: `${detailsPageUrl}?tab=traffic` });\n    if (type === Paths.WORKLOADS) {\n      options.push({ text: 'Logs', url: `${detailsPageUrl}?tab=logs` });\n    }\n    options.push({\n      text: 'Inbound Metrics',\n      url: `${detailsPageUrl}?tab=${type === Paths.SERVICES ? 'metrics' : 'in_metrics'}`\n    });\n    if (type !== Paths.SERVICES) {\n      options.push({ text: 'Outbound Metrics', url: `${detailsPageUrl}?tab=out_metrics` });\n    }\n    if (type === Paths.APPLICATIONS && jaegerInfo && jaegerInfo.enabled) {\n      if (jaegerInfo.integration) {\n        options.push({ text: 'Traces', url: `${detailsPageUrl}?tab=traces` });\n      } else if (jaegerInfo.url) {\n        options.push({\n          text: 'Show Traces',\n          url: getJaegerURL(namespace, jaegerInfo.namespaceSelector, jaegerInfo.url, name),\n          external: true,\n          target: '_blank'\n        });\n      }\n    }\n  }\n\n  if (serverConfig.clusterInfo?.name && cluster !== serverConfig.clusterInfo.name) {\n    const externalClusterInfo = serverConfig.clusters[cluster];\n    const kialiInfo = externalClusterInfo?.kialiInstances?.find(instance => instance.url.length !== 0);\n    if (kialiInfo === undefined) {\n      options = options.filter(o => o.target === '_blank');\n    } else {\n      const externalKialiUrl = kialiInfo.url.replace(/\\/$/g, '') + '/console';\n\n      for (let idx = 0; idx < options.length; idx++) {\n        if (options[idx].target !== '_blank') {\n          options[idx].external = true;\n          options[idx].target = '_blank';\n          options[idx].url = externalKialiUrl + options[idx].url;\n        }\n      }\n    }\n  }\n\n  return options;\n};\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  jaegerInfo: state.jaegerState.info\n});\n\nexport const NodeContextMenuContainer = connect(mapStateToProps)(NodeContextMenu);\n"]},"metadata":{},"sourceType":"module"}
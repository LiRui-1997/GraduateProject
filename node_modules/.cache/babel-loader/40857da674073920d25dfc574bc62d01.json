{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/components/MessageCenter/AlertDrawerMessage.tsx\";\n\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Expandable, Card, CardBody } from '@patternfly/react-core';\nimport { MessageType } from '../../types/MessageCenter';\nimport moment from 'moment';\nimport { MessageCenterActions } from 'actions/MessageCenterActions';\nimport { style } from 'typestyle';\nimport { KialiIcon } from 'config/KialiIcon';\n\nvar getIcon = function getIcon(type) {\n  switch (type) {\n    case MessageType.ERROR:\n      return /*#__PURE__*/React.createElement(KialiIcon.Error, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 14\n        }\n      });\n\n    case MessageType.INFO:\n      return /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 14\n        }\n      });\n\n    case MessageType.SUCCESS:\n      return /*#__PURE__*/React.createElement(KialiIcon.Ok, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 14\n        }\n      });\n\n    case MessageType.WARNING:\n      return /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 14\n        }\n      });\n\n    default:\n      throw Error('Unexpected type');\n  }\n};\n\nvar AlertDrawerMessage = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AlertDrawerMessage, _React$PureComponent);\n\n  var _super = _createSuper(AlertDrawerMessage);\n\n  function AlertDrawerMessage() {\n    _classCallCheck(this, AlertDrawerMessage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AlertDrawerMessage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        className: AlertDrawerMessage.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, getIcon(this.props.message.type), ' ', this.props.message.seen ? this.props.message.content : /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 67\n        }\n      }, this.props.message.content), this.props.message.detail && /*#__PURE__*/React.createElement(Expandable, {\n        toggleText: this.props.message.showDetail ? 'Hide Detail' : 'Show Detail',\n        onToggle: function onToggle() {\n          return _this2.props.toggleMessageDetail(_this2.props.message);\n        },\n        isExpanded: this.props.message.showDetail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"pre\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }, this.props.message.detail)), this.props.message.count > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, this.props.message.count, \" \", moment().from(this.props.message.firstTriggered)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: AlertDrawerMessage.left,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, this.props.message.created.toLocaleDateString()), /*#__PURE__*/React.createElement(\"span\", {\n        className: AlertDrawerMessage.right,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, this.props.message.created.toLocaleTimeString()))));\n    }\n  }]);\n\n  return AlertDrawerMessage;\n}(React.PureComponent);\n\nAlertDrawerMessage.body = style({\n  paddingTop: 0\n});\nAlertDrawerMessage.left = style({\n  float: 'left'\n});\nAlertDrawerMessage.right = style({\n  float: 'right'\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    markAsRead: function markAsRead(message) {\n      return dispatch(MessageCenterActions.markAsRead(message.id));\n    },\n    toggleMessageDetail: function toggleMessageDetail(message) {\n      return dispatch(MessageCenterActions.toggleMessageDetail(message.id));\n    }\n  };\n};\n\nvar AlertDrawerMessageContainer = connect(null, mapDispatchToProps)(AlertDrawerMessage);\nexport default AlertDrawerMessageContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/MessageCenter/AlertDrawerMessage.tsx"],"names":["React","connect","Expandable","Card","CardBody","MessageType","moment","MessageCenterActions","style","KialiIcon","getIcon","type","ERROR","INFO","SUCCESS","WARNING","Error","AlertDrawerMessage","body","props","message","seen","content","detail","showDetail","toggleMessageDetail","whiteSpace","count","from","firstTriggered","left","created","toLocaleDateString","right","toLocaleTimeString","PureComponent","paddingTop","float","mapDispatchToProps","dispatch","markAsRead","id","AlertDrawerMessageContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Expandable, Card, CardBody } from '@patternfly/react-core';\nimport { MessageType, NotificationMessage } from '../../types/MessageCenter';\nimport moment from 'moment';\nimport { MessageCenterActions } from 'actions/MessageCenterActions';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppState } from 'store/Store';\nimport { style } from 'typestyle';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { KialiIcon } from 'config/KialiIcon';\n\nconst getIcon = (type: MessageType) => {\n  switch (type) {\n    case MessageType.ERROR:\n      return <KialiIcon.Error />;\n    case MessageType.INFO:\n      return <KialiIcon.Info />;\n    case MessageType.SUCCESS:\n      return <KialiIcon.Ok />;\n    case MessageType.WARNING:\n      return <KialiIcon.Warning />;\n    default:\n      throw Error('Unexpected type');\n  }\n};\n\ntype ReduxProps = {\n  markAsRead: (message: NotificationMessage) => void;\n  toggleMessageDetail: (message: NotificationMessage) => void;\n};\n\ntype AlertDrawerMessageProps = ReduxProps & {\n  message: NotificationMessage;\n};\n\nclass AlertDrawerMessage extends React.PureComponent<AlertDrawerMessageProps> {\n  static readonly body = style({\n    paddingTop: 0\n  });\n  static readonly left = style({\n    float: 'left'\n  });\n  static readonly right = style({\n    float: 'right'\n  });\n\n  render() {\n    return (\n      <Card>\n        <CardBody className={AlertDrawerMessage.body}>\n          {getIcon(this.props.message.type)}{' '}\n          {this.props.message.seen ? this.props.message.content : <b>{this.props.message.content}</b>}\n          {this.props.message.detail && (\n            <Expandable\n              toggleText={this.props.message.showDetail ? 'Hide Detail' : 'Show Detail'}\n              onToggle={() => this.props.toggleMessageDetail(this.props.message)}\n              isExpanded={this.props.message.showDetail}\n            >\n              <pre style={{ whiteSpace: 'pre-wrap' }}>{this.props.message.detail}</pre>\n            </Expandable>\n          )}\n          {this.props.message.count > 1 && (\n            <div>\n              {this.props.message.count} {moment().from(this.props.message.firstTriggered)}\n            </div>\n          )}\n          <div>\n            <span className={AlertDrawerMessage.left}>{this.props.message.created.toLocaleDateString()}</span>\n            <span className={AlertDrawerMessage.right}>{this.props.message.created.toLocaleTimeString()}</span>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    markAsRead: message => dispatch(MessageCenterActions.markAsRead(message.id)),\n    toggleMessageDetail: message => dispatch(MessageCenterActions.toggleMessageDetail(message.id))\n  };\n};\n\nconst AlertDrawerMessageContainer = connect(null, mapDispatchToProps)(AlertDrawerMessage);\nexport default AlertDrawerMessageContainer;\n"]},"metadata":{},"sourceType":"module"}
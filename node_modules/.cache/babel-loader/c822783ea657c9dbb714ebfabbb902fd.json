{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelTraceDetails.tsx\";\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { style } from 'typestyle';\nimport { Tooltip, Button, ButtonVariant, pluralize, SelectOption } from '@patternfly/react-core';\nimport { InfoAltIcon, CloseIcon, ExternalLinkAltIcon, ExclamationCircleIcon, MapMarkerIcon } from '@patternfly/react-icons';\nimport { URLParam } from '../../app/History';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport { GraphActions } from 'actions/GraphActions';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { findChildren, findParent, formatDuration } from 'utils/tracing/TracingHelper';\nimport { CytoscapeGraphSelectorBuilder } from 'components/CytoscapeGraph/CytoscapeGraphSelector';\nimport { decoratedNodeData } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport FocusAnimation from 'components/CytoscapeGraph/FocusAnimation';\nimport { FormattedTraceInfo, shortIDStyle } from 'components/JaegerIntegration/JaegerResults/FormattedTraceInfo';\nimport SimplerSelect from 'components/SimplerSelect';\nimport { summaryFont } from './SummaryPanelCommon';\nimport { GraphType } from 'types/Graph';\nimport { bindActionCreators } from 'redux';\nimport responseFlags from 'utils/ResponseFlags';\nvar textHeaderStyle = style({\n  fontWeight: 'bold',\n  fontSize: '16px'\n});\nvar closeBoxStyle = style({\n  float: 'right',\n  marginTop: '-7px'\n});\nvar nameStyle = style({\n  display: 'inline-block',\n  maxWidth: '95%',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n});\nvar pStyle = style({\n  paddingTop: 9\n});\nvar spanSelectStyle = style({\n  $nest: {\n    '& > button': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: 3,\n      paddingBottom: 3\n    },\n    '& > ul': {\n      maxWidth: '100%',\n      overflowY: 'hidden'\n    },\n    '& > ul > li > button': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: 3,\n      paddingBottom: 3\n    }\n  }\n});\n\nvar SummaryPanelTraceDetails = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelTraceDetails, _React$Component);\n\n  var _super = _createSuper(SummaryPanelTraceDetails);\n\n  function SummaryPanelTraceDetails(props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelTraceDetails);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedSpanID: undefined\n    };\n    return _this;\n  }\n\n  _createClass(SummaryPanelTraceDetails, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(props) {\n      if (props.trace.traceID !== this.props.trace.traceID) {\n        this.setState({\n          selectedSpanID: undefined\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _currentSpan;\n\n      var node = decoratedNodeData(this.props.node);\n      var tracesDetailsURL = node.namespace ? \"/namespaces/\".concat(node.namespace) + (node.workload ? \"/workloads/\".concat(node.workload) : node.service ? \"/services/\".concat(node.service) : \"/applications/\".concat(node.app)) + \"?tab=traces&\".concat(URLParam.JAEGER_TRACE_ID, \"=\").concat(this.props.trace.traceID) : undefined;\n      var jaegerTraceURL = this.props.jaegerURL ? \"\".concat(this.props.jaegerURL, \"/trace/\").concat(this.props.trace.traceID) : undefined;\n      var info = new FormattedTraceInfo(this.props.trace);\n      var title = /*#__PURE__*/React.createElement(\"span\", {\n        className: nameStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, info.name(), /*#__PURE__*/React.createElement(\"span\", {\n        className: shortIDStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, info.shortID()));\n      var spans = this.props.node.data('spans') || [];\n      var currentSpan = spans.find(function (s) {\n        return s.spanID === _this2.state.selectedSpanID;\n      });\n\n      if (!currentSpan && spans.length > 0) {\n        currentSpan = spans[0];\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        className: textHeaderStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }, \"Trace\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: closeBoxStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"Close and clear trace selection\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        id: \"close-trace\",\n        variant: \"plain\",\n        onClick: this.props.close,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CloseIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }, tracesDetailsURL ? /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"View trace details for: \".concat(info.name()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: tracesDetailsURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }, title)) : /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"\".concat(info.name()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, title), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, info.numErrors !== 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ExclamationCircleIcon, {\n        color: PFColors.Danger,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }), ' ', /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, \"This trace has \", pluralize(info.numErrors, 'error'), \".\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }\n      }, \"Started: \"), info.fromNow()), info.duration() && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      }, \"Full duration: \"), info.duration())), spans.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: pStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }\n      }, pluralize(spans.length, 'span')), \" on this node\", /*#__PURE__*/React.createElement(SimplerSelect, {\n        selections: (_currentSpan = currentSpan) === null || _currentSpan === void 0 ? void 0 : _currentSpan.operationName,\n        className: spanSelectStyle,\n        onSelect: function onSelect(key) {\n          _this2.setState({\n            selectedSpanID: key\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, spans.map(function (s) {\n        return /*#__PURE__*/React.createElement(SelectOption, {\n          key: s.spanID,\n          value: s.spanID,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 23\n          }\n        }, s.operationName, \" (t + \", formatDuration(s.relativeStartTime), \")\");\n      })))), currentSpan && /*#__PURE__*/React.createElement(\"div\", {\n        className: pStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 27\n        }\n      }, this.renderSpan(currentSpan)), jaegerTraceURL && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        href: jaegerTraceURL,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }\n      }, \"Show in Tracing \", /*#__PURE__*/React.createElement(ExternalLinkAltIcon, {\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 33\n        }\n      })))));\n    }\n  }, {\n    key: \"spanViewLink\",\n    value: function spanViewLink(span) {\n      var node = decoratedNodeData(this.props.node);\n      return node.namespace ? \"/namespaces/\".concat(node.namespace) + (node.workload ? \"/workloads/\".concat(node.workload) : node.service ? \"/services/\".concat(node.service) : \"/applications/\".concat(node.app)) + \"?tab=traces&\".concat(URLParam.JAEGER_TRACE_ID, \"=\").concat(this.props.trace.traceID, \"&\").concat(URLParam.JAEGER_SPAN_ID, \"=\").concat(span.spanID) : undefined;\n    }\n  }, {\n    key: \"renderSpan\",\n    value: function renderSpan(span) {\n      var spanURL = this.spanViewLink(span);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }, \"Started after: \"), formatDuration(span.relativeStartTime)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }\n      }, \"Duration: \"), formatDuration(span.duration)), (span.type === 'http' || span.type === 'envoy') && this.renderHTTPSpan(span), span.type === 'tcp' && this.renderTCPSpan(span), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }\n      }, \"Related: \"), this.renderRelatedSpans(span)), spanURL && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: spanURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }\n      }, \"Show span\")));\n    }\n  }, {\n    key: \"renderRelatedSpans\",\n    value: function renderRelatedSpans(span) {\n      var _this3 = this;\n\n      var parent = findParent(span);\n      var children = findChildren(span, this.props.trace);\n      var related = (parent ? [{\n        text: 'parent',\n        span: parent\n      }] : []).concat(children.map(function (child, idx) {\n        return {\n          text: 'child ' + (idx + 1),\n          span: child\n        };\n      }));\n      return /*#__PURE__*/React.createElement(React.Fragment, null, related.length > 0 ? related.map(function (r) {\n        return _this3.linkToSpan(span, r.span, r.text);\n      }).reduce(function (prev, curr) {\n        return [prev, ', ', curr];\n      }) : 'none');\n    }\n  }, {\n    key: \"linkToSpan\",\n    value: function linkToSpan(current, target, text) {\n      var _this4 = this;\n\n      var useApp = this.props.graphType === GraphType.APP || this.props.graphType === GraphType.SERVICE;\n      var currentElt = useApp ? current.app : current.workload;\n      var targetElt = useApp ? target.app : target.workload;\n      var tooltipContent = /*#__PURE__*/React.createElement(React.Fragment, null, text);\n\n      if (targetElt) {\n        var cy = this.props.node.cy();\n        var selBuilder = new CytoscapeGraphSelectorBuilder().namespace(target.namespace).class('span');\n        var selector = useApp ? selBuilder.app(targetElt).build() : selBuilder.workload(targetElt).build();\n        tooltipContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          variant: ButtonVariant.link,\n          onClick: function onClick() {\n            _this4.setState({\n              selectedSpanID: target.spanID\n            });\n\n            if (targetElt !== currentElt || target.namespace !== current.namespace) {\n              cy.elements(selector).trigger('tap');\n            }\n          },\n          isInline: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: summaryFont,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }\n        }, text)), ' ', /*#__PURE__*/React.createElement(Button, {\n          variant: ButtonVariant.link,\n          onClick: function onClick() {\n            return new FocusAnimation(cy).start(cy.elements(selector));\n          },\n          isInline: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: summaryFont,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(MapMarkerIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }\n        }))));\n      }\n\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        key: target.spanID,\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"Operation name: \", target.operationName, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }\n        }), \"Workload: \", target.workload || 'unknown'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 7\n        }\n      }, tooltipContent);\n    }\n  }, {\n    key: \"renderHTTPSpan\",\n    value: function renderHTTPSpan(span) {\n      var _responseFlags$flag;\n\n      var info = span.info;\n      var rqLabel = info.direction === 'inbound' ? 'Inbound request' : info.direction === 'outbound' ? 'Outbound request' : 'Request';\n      var flag = info.responseFlags;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }\n      }, rqLabel, \": \"), info.method, \" \", info.url), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }\n      }, \"Response: \"), \"code \", info.statusCode || 'unknown', flag && ', flags ' + flag), flag && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(InfoAltIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }\n      }), \" \", ((_responseFlags$flag = responseFlags[flag]) === null || _responseFlags$flag === void 0 ? void 0 : _responseFlags$flag.help) || 'Unknown flag'));\n    }\n  }, {\n    key: \"renderTCPSpan\",\n    value: function renderTCPSpan(span) {\n      var info = span.info;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, info.topic && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }\n      }, \"Topic: \"), info.topic));\n    }\n  }]);\n\n  return SummaryPanelTraceDetails;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    close: function close() {\n      return dispatch(JaegerThunkActions.setTraceId(undefined));\n    },\n    setNode: bindActionCreators(GraphActions.setNode, dispatch)\n  };\n};\n\nvar SummaryPanelTraceDetailsContainer = connect(function () {\n  return {};\n}, mapDispatchToProps)(SummaryPanelTraceDetails);\nexport default SummaryPanelTraceDetailsContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelTraceDetails.tsx"],"names":["React","Link","connect","style","Tooltip","Button","ButtonVariant","pluralize","SelectOption","InfoAltIcon","CloseIcon","ExternalLinkAltIcon","ExclamationCircleIcon","MapMarkerIcon","URLParam","JaegerThunkActions","GraphActions","PFColors","findChildren","findParent","formatDuration","CytoscapeGraphSelectorBuilder","decoratedNodeData","FocusAnimation","FormattedTraceInfo","shortIDStyle","SimplerSelect","summaryFont","GraphType","bindActionCreators","responseFlags","textHeaderStyle","fontWeight","fontSize","closeBoxStyle","float","marginTop","nameStyle","display","maxWidth","textOverflow","overflow","whiteSpace","pStyle","paddingTop","spanSelectStyle","$nest","paddingBottom","overflowY","SummaryPanelTraceDetails","props","state","selectedSpanID","undefined","trace","traceID","setState","node","tracesDetailsURL","namespace","workload","service","app","JAEGER_TRACE_ID","jaegerTraceURL","jaegerURL","info","title","name","shortID","spans","data","currentSpan","find","s","spanID","length","close","numErrors","Danger","fromNow","duration","operationName","key","map","relativeStartTime","renderSpan","span","JAEGER_SPAN_ID","spanURL","spanViewLink","type","renderHTTPSpan","renderTCPSpan","renderRelatedSpans","parent","children","related","text","concat","child","idx","r","linkToSpan","reduce","prev","curr","current","target","useApp","graphType","APP","SERVICE","currentElt","targetElt","tooltipContent","cy","selBuilder","class","selector","build","link","elements","trigger","start","rqLabel","direction","flag","method","url","statusCode","help","topic","Component","mapDispatchToProps","dispatch","setTraceId","setNode","SummaryPanelTraceDetailsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { style } from 'typestyle';\nimport { Tooltip, Button, ButtonVariant, pluralize, SelectOption } from '@patternfly/react-core';\nimport {\n  InfoAltIcon,\n  CloseIcon,\n  ExternalLinkAltIcon,\n  ExclamationCircleIcon,\n  MapMarkerIcon\n} from '@patternfly/react-icons';\n\nimport { URLParam } from '../../app/History';\nimport { JaegerTrace, RichSpanData, EnvoySpanInfo, OpenTracingHTTPInfo, OpenTracingTCPInfo } from 'types/JaegerInfo';\nimport { KialiAppState } from 'store/Store';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport { GraphActions } from 'actions/GraphActions';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { findChildren, findParent, formatDuration } from 'utils/tracing/TracingHelper';\nimport { CytoscapeGraphSelectorBuilder } from 'components/CytoscapeGraph/CytoscapeGraphSelector';\nimport { decoratedNodeData } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport FocusAnimation from 'components/CytoscapeGraph/FocusAnimation';\nimport { FormattedTraceInfo, shortIDStyle } from 'components/JaegerIntegration/JaegerResults/FormattedTraceInfo';\nimport SimplerSelect from 'components/SimplerSelect';\nimport { summaryFont } from './SummaryPanelCommon';\nimport { NodeParamsType, GraphType } from 'types/Graph';\nimport { bindActionCreators } from 'redux';\nimport responseFlags from 'utils/ResponseFlags';\n\ntype Props = {\n  trace: JaegerTrace;\n  node: any;\n  graphType: GraphType;\n  jaegerURL?: string;\n  close: () => void;\n  setNode: (node?: NodeParamsType) => void;\n};\n\ntype State = {\n  selectedSpanID: string | undefined;\n};\n\nconst textHeaderStyle = style({\n  fontWeight: 'bold',\n  fontSize: '16px'\n});\n\nconst closeBoxStyle = style({\n  float: 'right',\n  marginTop: '-7px'\n});\n\nconst nameStyle = style({\n  display: 'inline-block',\n  maxWidth: '95%',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n});\n\nconst pStyle = style({\n  paddingTop: 9\n});\n\nconst spanSelectStyle = style({\n  $nest: {\n    '& > button': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: 3,\n      paddingBottom: 3\n    },\n    '& > ul': {\n      maxWidth: '100%',\n      overflowY: 'hidden'\n    },\n    '& > ul > li > button': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: 3,\n      paddingBottom: 3\n    }\n  }\n});\n\nclass SummaryPanelTraceDetails extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { selectedSpanID: undefined };\n  }\n\n  componentDidUpdate(props: Props) {\n    if (props.trace.traceID !== this.props.trace.traceID) {\n      this.setState({ selectedSpanID: undefined });\n    }\n  }\n\n  render() {\n    const node = decoratedNodeData(this.props.node);\n    const tracesDetailsURL = node.namespace\n      ? `/namespaces/${node.namespace}` +\n        (node.workload\n          ? `/workloads/${node.workload}`\n          : node.service\n          ? `/services/${node.service}`\n          : `/applications/${node.app!}`) +\n        `?tab=traces&${URLParam.JAEGER_TRACE_ID}=${this.props.trace.traceID}`\n      : undefined;\n    const jaegerTraceURL = this.props.jaegerURL\n      ? `${this.props.jaegerURL}/trace/${this.props.trace.traceID}`\n      : undefined;\n    const info = new FormattedTraceInfo(this.props.trace);\n    const title = (\n      <span className={nameStyle}>\n        {info.name()}\n        <span className={shortIDStyle}>{info.shortID()}</span>\n      </span>\n    );\n    const spans: RichSpanData[] = this.props.node.data('spans') || [];\n    let currentSpan = spans.find(s => s.spanID === this.state.selectedSpanID);\n    if (!currentSpan && spans.length > 0) {\n      currentSpan = spans[0];\n    }\n    return (\n      <>\n        <span className={textHeaderStyle}>Trace</span>\n        <span className={closeBoxStyle}>\n          <Tooltip content=\"Close and clear trace selection\">\n            <Button id=\"close-trace\" variant=\"plain\" onClick={this.props.close}>\n              <CloseIcon />\n            </Button>\n          </Tooltip>\n        </span>\n        <div>\n          {tracesDetailsURL ? (\n            <Tooltip content={`View trace details for: ${info.name()}`}>\n              <Link to={tracesDetailsURL}>{title}</Link>\n            </Tooltip>\n          ) : (\n            <Tooltip content={`${info.name()}`}>{title}</Tooltip>\n          )}\n          <div>\n            {info.numErrors !== 0 && (\n              <>\n                <ExclamationCircleIcon color={PFColors.Danger} />{' '}\n                <strong>This trace has {pluralize(info.numErrors, 'error')}.</strong>\n              </>\n            )}\n            <div>\n              <strong>Started: </strong>\n              {info.fromNow()}\n            </div>\n            {info.duration() && (\n              <div>\n                <strong>Full duration: </strong>\n                {info.duration()}\n              </div>\n            )}\n          </div>\n          {spans.length > 0 && (\n            <div className={pStyle}>\n              <div>\n                <strong>{pluralize(spans.length, 'span')}</strong> on this node\n                <SimplerSelect\n                  selections={currentSpan?.operationName}\n                  className={spanSelectStyle}\n                  onSelect={key => {\n                    this.setState({ selectedSpanID: key as string });\n                  }}\n                >\n                  {spans.map(s => {\n                    return (\n                      <SelectOption key={s.spanID} value={s.spanID}>\n                        {s.operationName} (t + {formatDuration(s.relativeStartTime)})\n                      </SelectOption>\n                    );\n                  })}\n                </SimplerSelect>\n              </div>\n            </div>\n          )}\n          {currentSpan && <div className={pStyle}>{this.renderSpan(currentSpan)}</div>}\n          {jaegerTraceURL && (\n            <>\n              <br />\n              <a href={jaegerTraceURL} target=\"_blank\" rel=\"noopener noreferrer\">\n                Show in Tracing <ExternalLinkAltIcon size=\"sm\" />\n              </a>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  private spanViewLink(span: RichSpanData): string | undefined {\n    const node = decoratedNodeData(this.props.node);\n    return node.namespace\n      ? `/namespaces/${node.namespace}` +\n          (node.workload\n            ? `/workloads/${node.workload}`\n            : node.service\n            ? `/services/${node.service}`\n            : `/applications/${node.app!}`) +\n          `?tab=traces&${URLParam.JAEGER_TRACE_ID}=${this.props.trace.traceID}&${URLParam.JAEGER_SPAN_ID}=${span.spanID}`\n      : undefined;\n  }\n\n  private renderSpan(span: RichSpanData) {\n    const spanURL = this.spanViewLink(span);\n    return (\n      <>\n        <div>\n          <strong>Started after: </strong>\n          {formatDuration(span.relativeStartTime)}\n        </div>\n        <div>\n          <strong>Duration: </strong>\n          {formatDuration(span.duration)}\n        </div>\n        {(span.type === 'http' || span.type === 'envoy') && this.renderHTTPSpan(span)}\n        {span.type === 'tcp' && this.renderTCPSpan(span)}\n        <div>\n          <strong>Related: </strong>\n          {this.renderRelatedSpans(span)}\n        </div>\n        {spanURL && (\n          <div>\n            <Link to={spanURL}>Show span</Link>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  private renderRelatedSpans(span: RichSpanData) {\n    type Related = { text: string; span: RichSpanData };\n    const parent = findParent(span) as RichSpanData;\n    const children = findChildren(span, this.props.trace) as RichSpanData[];\n    const related = ((parent ? [{ text: 'parent', span: parent }] : []) as Related[]).concat(\n      children.map((child, idx) => ({ text: 'child ' + (idx + 1), span: child }))\n    );\n    return (\n      <>\n        {related.length > 0\n          ? related.map(r => this.linkToSpan(span, r.span, r.text)).reduce((prev, curr) => [prev, ', ', curr] as any)\n          : 'none'}\n      </>\n    );\n  }\n\n  private linkToSpan(current: RichSpanData, target: RichSpanData, text: string) {\n    const useApp = this.props.graphType === GraphType.APP || this.props.graphType === GraphType.SERVICE;\n    const currentElt = useApp ? current.app : current.workload;\n    const targetElt = useApp ? target.app : target.workload;\n    let tooltipContent = <>{text}</>;\n    if (targetElt) {\n      const cy = this.props.node.cy();\n      const selBuilder = new CytoscapeGraphSelectorBuilder().namespace(target.namespace).class('span');\n      const selector = useApp ? selBuilder.app(targetElt).build() : selBuilder.workload(targetElt).build();\n      tooltipContent = (\n        <>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => {\n              this.setState({ selectedSpanID: target.spanID });\n              if (targetElt !== currentElt || target.namespace !== current.namespace) {\n                cy.elements(selector).trigger('tap');\n              }\n            }}\n            isInline\n          >\n            <span style={summaryFont}>{text}</span>\n          </Button>{' '}\n          <Button\n            variant={ButtonVariant.link}\n            onClick={() => new FocusAnimation(cy).start(cy.elements(selector))}\n            isInline\n          >\n            <span style={summaryFont}>\n              <MapMarkerIcon />\n            </span>\n          </Button>\n        </>\n      );\n    }\n    return (\n      <Tooltip\n        key={target.spanID}\n        content={\n          <>\n            Operation name: {target.operationName}\n            <br />\n            Workload: {target.workload || 'unknown'}\n          </>\n        }\n      >\n        {tooltipContent}\n      </Tooltip>\n    );\n  }\n\n  private renderHTTPSpan(span: RichSpanData) {\n    const info = span.info as OpenTracingHTTPInfo | EnvoySpanInfo;\n    const rqLabel =\n      info.direction === 'inbound' ? 'Inbound request' : info.direction === 'outbound' ? 'Outbound request' : 'Request';\n    const flag = (info as EnvoySpanInfo).responseFlags;\n    return (\n      <>\n        <div>\n          <strong>{rqLabel}: </strong>\n          {info.method} {info.url}\n        </div>\n        <div>\n          <strong>Response: </strong>\n          code {info.statusCode || 'unknown'}\n          {flag && ', flags ' + flag}\n        </div>\n        {flag && (\n          <div>\n            <InfoAltIcon /> {responseFlags[flag]?.help || 'Unknown flag'}\n          </div>\n        )}\n      </>\n    );\n  }\n\n  private renderTCPSpan(span: RichSpanData) {\n    const info = span.info as OpenTracingTCPInfo;\n    return (\n      <>\n        {info.topic && (\n          <div>\n            <strong>Topic: </strong>\n            {info.topic}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  close: () => dispatch(JaegerThunkActions.setTraceId(undefined)),\n  setNode: bindActionCreators(GraphActions.setNode, dispatch)\n});\n\nconst SummaryPanelTraceDetailsContainer = connect(() => ({}), mapDispatchToProps)(SummaryPanelTraceDetails);\nexport default SummaryPanelTraceDetailsContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/TraceDetails.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport _round from 'lodash/round';\nimport { Button, ButtonVariant, Card, CardBody, Grid, GridItem, Tooltip } from '@patternfly/react-core';\nimport { InfoAltIcon, WarningTriangleIcon } from '@patternfly/react-icons';\nimport { JaegerTraceTitle } from './JaegerTraceTitle';\nimport { CytoscapeGraphSelectorBuilder } from 'components/CytoscapeGraph/CytoscapeGraphSelector';\nimport { GraphType, NodeType } from 'types/Graph';\nimport { FormattedTraceInfo, shortIDStyle } from './FormattedTraceInfo';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport { getTraceId } from 'utils/SearchParamUtils';\nimport { average } from 'utils/MathUtils';\nimport { averageSpanDuration, buildQueriesFromSpans, isSimilarTrace, reduceMetricsStats } from 'utils/tracing/TraceStats';\nimport { TraceLabels } from './TraceLabels';\nimport MetricsStatsThunkActions from 'actions/MetricsStatsThunkActions';\nimport { renderTraceHeatMap } from './StatsComparison';\nimport { HeatMap } from 'components/HeatMap/HeatMap';\nimport { formatDuration, sameSpans } from 'utils/tracing/TracingHelper';\nexport var heatmapIntervals = ['10m', '60m', '6h'];\n\nvar TraceDetails = /*#__PURE__*/function (_React$Component) {\n  _inherits(TraceDetails, _React$Component);\n\n  var _super = _createSuper(TraceDetails);\n\n  function TraceDetails(props) {\n    var _props$trace;\n\n    var _this;\n\n    _classCallCheck(this, TraceDetails);\n\n    _this = _super.call(this, props);\n\n    _this.getGraphURL = function (traceID) {\n      var cytoscapeGraph = new CytoscapeGraphSelectorBuilder().namespace(_this.props.namespace);\n      var graphType = GraphType.APP;\n\n      switch (_this.props.targetKind) {\n        case 'app':\n          cytoscapeGraph = cytoscapeGraph.app(_this.props.target).nodeType(NodeType.APP);\n          break;\n\n        case 'service':\n          graphType = GraphType.SERVICE;\n          cytoscapeGraph = cytoscapeGraph.service(_this.props.target);\n          break;\n\n        case 'workload':\n          graphType = GraphType.WORKLOAD;\n          cytoscapeGraph = cytoscapeGraph.workload(_this.props.target);\n          break;\n      }\n\n      return \"/graph/namespaces?graphType=\".concat(graphType, \"&injectServiceNodes=true&namespaces=\").concat(_this.props.namespace, \"&traceId=\").concat(traceID, \"&focusSelector=\").concat(encodeURI(cytoscapeGraph.build()));\n    };\n\n    _this.renderSimilarHeatmap = function (similarTraces, traceDuration, avgSpanDuration) {\n      var similarMeanDuration = average(similarTraces, function (trace) {\n        return trace.duration;\n      });\n      var similarSpanDurations = similarTraces.map(function (t) {\n        return averageSpanDuration(t);\n      }).filter(function (d) {\n        return d !== undefined;\n      });\n      var similarMeanAvgSpanDuration = average(similarSpanDurations, function (d) {\n        return d;\n      });\n\n      var genDiff = function genDiff(a, b) {\n        return a && b ? (a - b) / 1000 : undefined;\n      };\n\n      var similarTracesToShow = similarTraces.slice(0, 8);\n      var similarMatrixHeaders = similarTracesToShow.map(function (t) {\n        var info = new FormattedTraceInfo(t);\n        return /*#__PURE__*/React.createElement(Tooltip, {\n          content: /*#__PURE__*/React.createElement(React.Fragment, null, info.name(), /*#__PURE__*/React.createElement(\"span\", {\n            className: shortIDStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, info.shortID()), /*#__PURE__*/React.createElement(\"small\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }\n          }, \"(\", info.fromNow(), \")\")),\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          style: {\n            paddingLeft: 0,\n            paddingRight: 3,\n            fontSize: '0.7rem'\n          },\n          variant: ButtonVariant.link,\n          onClick: function onClick() {\n            return _this.props.setTraceId(t.traceID);\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }\n        }, info.shortID()));\n      }).concat([/*#__PURE__*/React.createElement(React.Fragment, null, \"Mean\")]);\n      var similarMatrix = similarTracesToShow.map(function (t) {\n        var avgSpans = averageSpanDuration(t);\n        return [genDiff(traceDuration, t.duration), genDiff(avgSpanDuration, avgSpans)];\n      }).concat([[genDiff(traceDuration, similarMeanDuration), genDiff(avgSpanDuration, similarMeanAvgSpanDuration)]]);\n      return /*#__PURE__*/React.createElement(HeatMap, {\n        xLabels: similarMatrixHeaders,\n        yLabels: [\"Full duration\", \"Spans average\"],\n        data: similarMatrix,\n        displayMode: 'large',\n        colorMap: HeatMap.HealthColorMap,\n        dataRange: {\n          from: -10,\n          to: 10\n        },\n        colorUndefined: PFColors.Black200,\n        valueFormat: function valueFormat(v) {\n          return (v > 0 ? '+' : '') + _round(v, 1);\n        },\n        tooltip: function tooltip(x, _, v) {\n          // Build explanation tooltip\n          var slowOrFast = v > 0 ? 'slower' : 'faster';\n\n          var diff = _round(Math.abs(v), 2);\n\n          var versus = x === similarTracesToShow.length ? 'the mean of all similar traces on chart' : similarTracesToShow[x].traceID;\n          return \"This trace was \".concat(diff, \"ms \").concat(slowOrFast, \" than \").concat(versus);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      });\n    };\n\n    var urlTrace = getTraceId();\n\n    if (urlTrace && urlTrace !== ((_props$trace = props.trace) === null || _props$trace === void 0 ? void 0 : _props$trace.traceID)) {\n      props.setTraceId(urlTrace);\n    } else if (!urlTrace && props.trace) {\n      // Remove old stored selected trace\n      props.setTraceId(undefined);\n    }\n\n    _this.state = {\n      completeMetricsStats: false\n    };\n    return _this;\n  }\n\n  _createClass(TraceDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.trace) {\n        this.fetchComparisonMetrics(this.props.trace.spans);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _prevProps$trace;\n\n      if (this.props.trace && !sameSpans(((_prevProps$trace = prevProps.trace) === null || _prevProps$trace === void 0 ? void 0 : _prevProps$trace.spans) || [], this.props.trace.spans)) {\n        this.fetchComparisonMetrics(this.props.trace.spans);\n      }\n    }\n  }, {\n    key: \"fetchComparisonMetrics\",\n    value: function fetchComparisonMetrics(spans) {\n      var queries = buildQueriesFromSpans(spans);\n      this.props.loadMetricsStats(queries);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          trace = _this$props.trace,\n          otherTraces = _this$props.otherTraces,\n          jaegerURL = _this$props.jaegerURL;\n\n      if (!trace) {\n        return null;\n      }\n\n      var formattedTrace = new FormattedTraceInfo(trace); // Compute a bunch of stats\n\n      var avgSpanDuration = averageSpanDuration(trace);\n      var similarTraces = otherTraces.filter(function (t) {\n        return t.traceID !== trace.traceID && isSimilarTrace(t, trace);\n      });\n      var comparisonLink = this.props.jaegerURL && similarTraces.length > 0 ? \"\".concat(this.props.jaegerURL, \"/trace/\").concat(trace.traceID, \"...\").concat(similarTraces[0].traceID, \"?cohort=\").concat(trace.traceID).concat(similarTraces.slice(0, 10).map(function (t) {\n        return \"&cohort=\".concat(t.traceID);\n      }).join('')) : undefined;\n      return /*#__PURE__*/React.createElement(Card, {\n        isCompact: true,\n        style: {\n          border: '1px solid #e6e6e6'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(JaegerTraceTitle, {\n        formattedTrace: formattedTrace,\n        externalURL: jaegerURL ? \"\".concat(jaegerURL, \"/trace/\").concat(trace.traceID) : undefined,\n        graphURL: this.getGraphURL(trace.traceID),\n        comparisonURL: comparisonLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        style: {\n          marginTop: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TraceLabels, {\n        spans: trace.spans,\n        oneline: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(GridItem, {\n        span: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"The full trace duration is (trace end time) - (trace start time).\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, \"Full duration: \")), formatDuration(trace.duration), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"The average duration of all spans within the trace. It differs from full duration, as spans can run in parallel, or there can be dead time between spans.\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }, \"Spans average duration: \")), avgSpanDuration ? formatDuration(avgSpanDuration) : 'n/a', /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }\n      }), this.props.statsMatrix && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 19\n        }\n      }, \"Compared with metrics: \"), renderTraceHeatMap(this.props.statsMatrix, heatmapIntervals, false), !this.props.isStatsMatrixComplete && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(WarningTriangleIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 23\n        }\n      }), \" Incomplete data, check Spans Details\"))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        content: \"Traces are identified as similar based on counting the number of spans and the occurrences of operation names. Only traces currently on the chart are processed.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoAltIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 35\n        }\n      }, \"Similar traces\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 19\n        }\n      }))), similarTraces.length > 0 ? this.renderSimilarHeatmap(similarTraces, trace.duration, avgSpanDuration) : 'No similar traces found'))));\n    }\n  }]);\n\n  return TraceDetails;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  if (state.jaegerState.selectedTrace) {\n    var _reduceMetricsStats = reduceMetricsStats(state.jaegerState.selectedTrace, heatmapIntervals, state.metricsStats.data),\n        matrix = _reduceMetricsStats.matrix,\n        isComplete = _reduceMetricsStats.isComplete;\n\n    return {\n      trace: state.jaegerState.selectedTrace,\n      statsMatrix: matrix,\n      isStatsMatrixComplete: isComplete\n    };\n  }\n\n  return {\n    trace: state.jaegerState.selectedTrace,\n    isStatsMatrixComplete: false\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setTraceId: function setTraceId(traceId) {\n      return dispatch(JaegerThunkActions.setTraceId(traceId));\n    },\n    loadMetricsStats: function loadMetricsStats(queries) {\n      return dispatch(MetricsStatsThunkActions.load(queries));\n    }\n  };\n};\n\nvar TraceDetailsContainer = connect(mapStateToProps, mapDispatchToProps)(TraceDetails);\nexport default TraceDetailsContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/JaegerIntegration/JaegerResults/TraceDetails.tsx"],"names":["React","connect","_round","Button","ButtonVariant","Card","CardBody","Grid","GridItem","Tooltip","InfoAltIcon","WarningTriangleIcon","JaegerTraceTitle","CytoscapeGraphSelectorBuilder","GraphType","NodeType","FormattedTraceInfo","shortIDStyle","PFColors","JaegerThunkActions","getTraceId","average","averageSpanDuration","buildQueriesFromSpans","isSimilarTrace","reduceMetricsStats","TraceLabels","MetricsStatsThunkActions","renderTraceHeatMap","HeatMap","formatDuration","sameSpans","heatmapIntervals","TraceDetails","props","getGraphURL","traceID","cytoscapeGraph","namespace","graphType","APP","targetKind","app","target","nodeType","SERVICE","service","WORKLOAD","workload","encodeURI","build","renderSimilarHeatmap","similarTraces","traceDuration","avgSpanDuration","similarMeanDuration","trace","duration","similarSpanDurations","map","t","filter","d","undefined","similarMeanAvgSpanDuration","genDiff","a","b","similarTracesToShow","slice","similarMatrixHeaders","info","name","shortID","fromNow","paddingLeft","paddingRight","fontSize","link","setTraceId","concat","similarMatrix","avgSpans","HealthColorMap","from","to","Black200","v","x","_","slowOrFast","diff","Math","abs","versus","length","urlTrace","state","completeMetricsStats","fetchComparisonMetrics","spans","prevProps","queries","loadMetricsStats","otherTraces","jaegerURL","formattedTrace","comparisonLink","join","border","marginTop","statsMatrix","isStatsMatrixComplete","Component","mapStateToProps","jaegerState","selectedTrace","metricsStats","data","matrix","isComplete","mapDispatchToProps","dispatch","traceId","load","TraceDetailsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport _round from 'lodash/round';\nimport { Button, ButtonVariant, Card, CardBody, Grid, GridItem, Tooltip } from '@patternfly/react-core';\nimport { InfoAltIcon, WarningTriangleIcon } from '@patternfly/react-icons';\n\nimport { JaegerTrace, RichSpanData } from 'types/JaegerInfo';\nimport { JaegerTraceTitle } from './JaegerTraceTitle';\nimport { CytoscapeGraphSelectorBuilder } from 'components/CytoscapeGraph/CytoscapeGraphSelector';\nimport { GraphType, NodeType } from 'types/Graph';\nimport { FormattedTraceInfo, shortIDStyle } from './FormattedTraceInfo';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { KialiAppState } from 'store/Store';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport { getTraceId } from 'utils/SearchParamUtils';\nimport { average } from 'utils/MathUtils';\nimport {\n  averageSpanDuration,\n  buildQueriesFromSpans,\n  isSimilarTrace,\n  reduceMetricsStats,\n  StatsMatrix\n} from 'utils/tracing/TraceStats';\nimport { TraceLabels } from './TraceLabels';\nimport { TargetKind } from 'types/Common';\nimport { MetricsStatsQuery } from 'types/MetricsOptions';\nimport MetricsStatsThunkActions from 'actions/MetricsStatsThunkActions';\nimport { renderTraceHeatMap } from './StatsComparison';\nimport { HeatMap } from 'components/HeatMap/HeatMap';\nimport { formatDuration, sameSpans } from 'utils/tracing/TracingHelper';\n\ninterface Props {\n  otherTraces: JaegerTrace[];\n  jaegerURL: string;\n  namespace: string;\n  target: string;\n  targetKind: TargetKind;\n  setTraceId: (traceId?: string) => void;\n  trace?: JaegerTrace;\n  loadMetricsStats: (queries: MetricsStatsQuery[]) => void;\n  statsMatrix?: StatsMatrix;\n  isStatsMatrixComplete: boolean;\n}\n\ninterface State {}\nexport const heatmapIntervals = ['10m', '60m', '6h'];\n\nclass TraceDetails extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const urlTrace = getTraceId();\n    if (urlTrace && urlTrace !== props.trace?.traceID) {\n      props.setTraceId(urlTrace);\n    } else if (!urlTrace && props.trace) {\n      // Remove old stored selected trace\n      props.setTraceId(undefined);\n    }\n    this.state = { completeMetricsStats: false };\n  }\n\n  componentDidMount() {\n    if (this.props.trace) {\n      this.fetchComparisonMetrics(this.props.trace.spans);\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    if (this.props.trace && !sameSpans(prevProps.trace?.spans || [], this.props.trace.spans)) {\n      this.fetchComparisonMetrics(this.props.trace.spans);\n    }\n  }\n\n  private fetchComparisonMetrics(spans: RichSpanData[]) {\n    const queries = buildQueriesFromSpans(spans);\n    this.props.loadMetricsStats(queries);\n  }\n\n  private getGraphURL = (traceID: string) => {\n    let cytoscapeGraph = new CytoscapeGraphSelectorBuilder().namespace(this.props.namespace);\n    let graphType: GraphType = GraphType.APP;\n\n    switch (this.props.targetKind) {\n      case 'app':\n        cytoscapeGraph = cytoscapeGraph.app(this.props.target).nodeType(NodeType.APP);\n        break;\n      case 'service':\n        graphType = GraphType.SERVICE;\n        cytoscapeGraph = cytoscapeGraph.service(this.props.target);\n        break;\n      case 'workload':\n        graphType = GraphType.WORKLOAD;\n        cytoscapeGraph = cytoscapeGraph.workload(this.props.target);\n        break;\n    }\n\n    return `/graph/namespaces?graphType=${graphType}&injectServiceNodes=true&namespaces=${\n      this.props.namespace\n    }&traceId=${traceID}&focusSelector=${encodeURI(cytoscapeGraph.build())}`;\n  };\n\n  private renderSimilarHeatmap = (\n    similarTraces: JaegerTrace[],\n    traceDuration: number,\n    avgSpanDuration: number | undefined\n  ) => {\n    const similarMeanDuration = average(similarTraces, trace => trace.duration);\n    const similarSpanDurations = similarTraces\n      .map(t => averageSpanDuration(t))\n      .filter(d => d !== undefined) as number[];\n    const similarMeanAvgSpanDuration = average(similarSpanDurations, d => d);\n    const genDiff = (a: number | undefined, b: number | undefined) => (a && b ? (a - b) / 1000 : undefined);\n    const similarTracesToShow = similarTraces.slice(0, 8);\n    const similarMatrixHeaders = similarTracesToShow\n      .map(t => {\n        const info = new FormattedTraceInfo(t);\n        return (\n          <Tooltip\n            content={\n              <>\n                {info.name()}\n                <span className={shortIDStyle}>{info.shortID()}</span>\n                <small>({info.fromNow()})</small>\n              </>\n            }\n          >\n            <Button\n              style={{ paddingLeft: 0, paddingRight: 3, fontSize: '0.7rem' }}\n              variant={ButtonVariant.link}\n              onClick={() => this.props.setTraceId(t.traceID)}\n            >\n              {info.shortID()}\n            </Button>\n          </Tooltip>\n        );\n      })\n      .concat([<>Mean</>]);\n    const similarMatrix = similarTracesToShow\n      .map(t => {\n        const avgSpans = averageSpanDuration(t);\n        return [genDiff(traceDuration, t.duration), genDiff(avgSpanDuration, avgSpans)];\n      })\n      .concat([[genDiff(traceDuration, similarMeanDuration), genDiff(avgSpanDuration, similarMeanAvgSpanDuration)]]);\n    return (\n      <HeatMap\n        xLabels={similarMatrixHeaders}\n        yLabels={[`Full duration`, `Spans average`]}\n        data={similarMatrix}\n        displayMode={'large'}\n        colorMap={HeatMap.HealthColorMap}\n        dataRange={{ from: -10, to: 10 }}\n        colorUndefined={PFColors.Black200}\n        valueFormat={v => (v > 0 ? '+' : '') + _round(v, 1)}\n        tooltip={(x, _, v) => {\n          // Build explanation tooltip\n          const slowOrFast = v > 0 ? 'slower' : 'faster';\n          const diff = _round(Math.abs(v), 2);\n          const versus =\n            x === similarTracesToShow.length\n              ? 'the mean of all similar traces on chart'\n              : similarTracesToShow[x].traceID;\n          return `This trace was ${diff}ms ${slowOrFast} than ${versus}`;\n        }}\n      />\n    );\n  };\n\n  render() {\n    const { trace, otherTraces, jaegerURL } = this.props;\n    if (!trace) {\n      return null;\n    }\n    const formattedTrace = new FormattedTraceInfo(trace);\n\n    // Compute a bunch of stats\n    const avgSpanDuration = averageSpanDuration(trace);\n    const similarTraces = otherTraces.filter(t => t.traceID !== trace.traceID && isSimilarTrace(t, trace));\n    const comparisonLink =\n      this.props.jaegerURL && similarTraces.length > 0\n        ? `${this.props.jaegerURL}/trace/${trace.traceID}...${similarTraces[0].traceID}?cohort=${\n            trace.traceID\n          }${similarTraces\n            .slice(0, 10)\n            .map(t => `&cohort=${t.traceID}`)\n            .join('')}`\n        : undefined;\n\n    return (\n      <Card isCompact style={{ border: '1px solid #e6e6e6' }}>\n        <JaegerTraceTitle\n          formattedTrace={formattedTrace}\n          externalURL={jaegerURL ? `${jaegerURL}/trace/${trace.traceID}` : undefined}\n          graphURL={this.getGraphURL(trace.traceID)}\n          comparisonURL={comparisonLink}\n        />\n        <CardBody>\n          <Grid style={{ marginTop: '20px' }}>\n            <GridItem span={3}>\n              <TraceLabels spans={trace.spans} oneline={false} />\n            </GridItem>\n            <GridItem span={3}>\n              <Tooltip content={<>The full trace duration is (trace end time) - (trace start time).</>}>\n                <strong>Full duration: </strong>\n              </Tooltip>\n              {formatDuration(trace.duration)}\n              <br />\n              <Tooltip\n                content={\n                  <>\n                    The average duration of all spans within the trace. It differs from full duration, as spans can run\n                    in parallel, or there can be dead time between spans.\n                  </>\n                }\n              >\n                <strong>Spans average duration: </strong>\n              </Tooltip>\n              {avgSpanDuration ? formatDuration(avgSpanDuration) : 'n/a'}\n              <br />\n              <br />\n              {this.props.statsMatrix && (\n                <>\n                  <strong>Compared with metrics: </strong>\n                  {renderTraceHeatMap(this.props.statsMatrix, heatmapIntervals, false)}\n                  {!this.props.isStatsMatrixComplete && (\n                    <>\n                      <WarningTriangleIcon /> Incomplete data, check Spans Details\n                    </>\n                  )}\n                </>\n              )}\n            </GridItem>\n            <GridItem span={6}>\n              <Tooltip content=\"Traces are identified as similar based on counting the number of spans and the occurrences of operation names. Only traces currently on the chart are processed.\">\n                <>\n                  <InfoAltIcon /> <strong>Similar traces</strong>\n                  <br />\n                </>\n              </Tooltip>\n              {similarTraces.length > 0\n                ? this.renderSimilarHeatmap(similarTraces, trace.duration, avgSpanDuration)\n                : 'No similar traces found'}\n            </GridItem>\n          </Grid>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => {\n  if (state.jaegerState.selectedTrace) {\n    const { matrix, isComplete } = reduceMetricsStats(\n      state.jaegerState.selectedTrace,\n      heatmapIntervals,\n      state.metricsStats.data\n    );\n    return {\n      trace: state.jaegerState.selectedTrace,\n      statsMatrix: matrix,\n      isStatsMatrixComplete: isComplete\n    };\n  }\n  return {\n    trace: state.jaegerState.selectedTrace,\n    isStatsMatrixComplete: false\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  setTraceId: (traceId?: string) => dispatch(JaegerThunkActions.setTraceId(traceId)),\n  loadMetricsStats: (queries: MetricsStatsQuery[]) => dispatch(MetricsStatsThunkActions.load(queries))\n});\n\nconst TraceDetailsContainer = connect(mapStateToProps, mapDispatchToProps)(TraceDetails);\nexport default TraceDetailsContainer;\n"]},"metadata":{},"sourceType":"module"}
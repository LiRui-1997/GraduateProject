{"ast":null,"code":"import _pt from \"prop-types\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nvar toggleId = 0;\nexport var OptionsToggle = function OptionsToggle(_ref) {\n  var _ref$itemsTitle = _ref.itemsTitle,\n      itemsTitle = _ref$itemsTitle === void 0 ? 'items' : _ref$itemsTitle,\n      _ref$optionsToggle = _ref.optionsToggle,\n      optionsToggle = _ref$optionsToggle === void 0 ? 'Select' : _ref$optionsToggle,\n      _ref$itemsPerPageTitl = _ref.itemsPerPageTitle,\n      itemsPerPageTitle = _ref$itemsPerPageTitl === void 0 ? 'Items per page' : _ref$itemsPerPageTitl,\n      _ref$firstIndex = _ref.firstIndex,\n      firstIndex = _ref$firstIndex === void 0 ? 0 : _ref$firstIndex,\n      _ref$lastIndex = _ref.lastIndex,\n      lastIndex = _ref$lastIndex === void 0 ? 0 : _ref$lastIndex,\n      _ref$itemCount = _ref.itemCount,\n      itemCount = _ref$itemCount === void 0 ? 0 : _ref$itemCount,\n      _ref$widgetId = _ref.widgetId,\n      widgetId = _ref$widgetId === void 0 ? '' : _ref$widgetId,\n      _ref$showToggle = _ref.showToggle,\n      showToggle = _ref$showToggle === void 0 ? true : _ref$showToggle,\n      _ref$onToggle = _ref.onToggle,\n      onToggle = _ref$onToggle === void 0 ? function (_isOpen) {\n    return undefined;\n  } : _ref$onToggle,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      _ref$parentRef = _ref.parentRef,\n      parentRef = _ref$parentRef === void 0 ? null : _ref$parentRef,\n      _ref$toggleTemplate = _ref.toggleTemplate,\n      ToggleTemplate = _ref$toggleTemplate === void 0 ? '' : _ref$toggleTemplate,\n      _ref$onEnter = _ref.onEnter,\n      onEnter = _ref$onEnter === void 0 ? null : _ref$onEnter;\n  return React.createElement(\"div\", {\n    className: css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text)\n  }, showToggle && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  })), React.createElement(DropdownToggle, {\n    onEnter: onEnter,\n    \"aria-label\": optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount <= 0,\n    isOpen: isOpen,\n    id: \"\".concat(widgetId, \"-toggle-\").concat(toggleId++),\n    className: styles.optionsMenuToggleButton,\n    parentRef: parentRef\n  })));\n};\nOptionsToggle.propTypes = {\n  itemsTitle: _pt.string,\n  optionsToggle: _pt.string,\n  itemsPerPageTitle: _pt.string,\n  firstIndex: _pt.number,\n  lastIndex: _pt.number,\n  itemCount: _pt.number,\n  widgetId: _pt.string,\n  showToggle: _pt.bool,\n  onToggle: _pt.func,\n  isOpen: _pt.bool,\n  isDisabled: _pt.bool,\n  parentRef: _pt.any,\n  toggleTemplate: _pt.oneOfType([_pt.func, _pt.string]),\n  onEnter: _pt.func\n};","map":{"version":3,"sources":["/root/kiali-ui/node_modules/@patternfly/react-core/dist/esm/components/Pagination/OptionsToggle.js"],"names":["_pt","React","styles","css","fillTemplate","DropdownToggle","toggleId","OptionsToggle","itemsTitle","optionsToggle","itemsPerPageTitle","firstIndex","lastIndex","itemCount","widgetId","showToggle","onToggle","_isOpen","undefined","isOpen","isDisabled","parentRef","toggleTemplate","ToggleTemplate","onEnter","createElement","className","optionsMenuToggle","modifiers","disabled","plain","text","Fragment","optionsMenuToggleText","id","optionsMenuToggleButton","propTypes","string","number","bool","func","any","oneOfType"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nlet toggleId = 0;\nexport const OptionsToggle = ({\n  itemsTitle = 'items',\n  optionsToggle = 'Select',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount = 0,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = _isOpen => undefined,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate = '',\n  onEnter = null\n}) => React.createElement(\"div\", {\n  className: css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text)\n}, showToggle && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n  className: css(styles.optionsMenuToggleText)\n}, typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n  firstIndex,\n  lastIndex,\n  itemCount,\n  itemsTitle\n}) : React.createElement(ToggleTemplate, {\n  firstIndex: firstIndex,\n  lastIndex: lastIndex,\n  itemCount: itemCount,\n  itemsTitle: itemsTitle\n})), React.createElement(DropdownToggle, {\n  onEnter: onEnter,\n  \"aria-label\": optionsToggle,\n  onToggle: onToggle,\n  isDisabled: isDisabled || itemCount <= 0,\n  isOpen: isOpen,\n  id: `${widgetId}-toggle-${toggleId++}`,\n  className: styles.optionsMenuToggleButton,\n  parentRef: parentRef\n})));\nOptionsToggle.propTypes = {\n  itemsTitle: _pt.string,\n  optionsToggle: _pt.string,\n  itemsPerPageTitle: _pt.string,\n  firstIndex: _pt.number,\n  lastIndex: _pt.number,\n  itemCount: _pt.number,\n  widgetId: _pt.string,\n  showToggle: _pt.bool,\n  onToggle: _pt.func,\n  isOpen: _pt.bool,\n  isDisabled: _pt.bool,\n  parentRef: _pt.any,\n  toggleTemplate: _pt.oneOfType([_pt.func, _pt.string]),\n  onEnter: _pt.func\n};\n//# sourceMappingURL=OptionsToggle.js.map"]},"metadata":{},"sourceType":"module"}
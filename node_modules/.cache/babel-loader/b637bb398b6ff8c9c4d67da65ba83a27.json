{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/IstioConfigNew/GatewayForm.tsx\";\nimport * as React from 'react'; // Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\n\nimport { FormGroup, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { isGatewayHostValid } from '../../utils/IstioConfigUtils';\nimport ServerBuilder from './GatewayForm/ServerBuilder';\nimport ServerList from './GatewayForm/ServerList';\nexport var GATEWAY = 'Gateway';\nexport var GATEWAYS = 'gateways';\nexport var initGateway = function initGateway() {\n  return {\n    addWorkloadSelector: false,\n    workloadSelectorLabels: 'istio=ingressgateway',\n    workloadSelectorValid: true,\n    gatewayServers: [],\n    addGatewayServer: {\n      hosts: [],\n      port: {\n        number: 80,\n        name: 'http',\n        protocol: 'HTTP'\n      }\n    },\n    validHosts: false\n  };\n};\nexport var isGatewayStateValid = function isGatewayStateValid(g) {\n  return g.workloadSelectorValid && g.gatewayServers.length > 0;\n};\n\nvar GatewayForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(GatewayForm, _React$Component);\n\n  var _super = _createSuper(GatewayForm);\n\n  function GatewayForm(props) {\n    var _this;\n\n    _classCallCheck(this, GatewayForm);\n\n    _this = _super.call(this, props);\n\n    _this.addWorkloadLabels = function (value, _) {\n      if (value.length === 0) {\n        _this.setState({\n          workloadSelectorValid: false,\n          workloadSelectorLabels: ''\n        }, function () {\n          return _this.props.onChange(_this.state);\n        });\n\n        return;\n      }\n\n      value = value.trim();\n      var labels = value.split(',');\n      var isValid = true; // Some smoke validation rules for the labels\n\n      for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n\n        if (label.indexOf('=') < 0) {\n          isValid = false;\n          break;\n        }\n\n        var splitLabel = label.split('=');\n\n        if (splitLabel.length !== 2) {\n          isValid = false;\n          break;\n        }\n\n        if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n          isValid = false;\n          break;\n        }\n      }\n\n      _this.setState({\n        workloadSelectorValid: isValid,\n        workloadSelectorLabels: value\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.areValidHosts = function (hosts) {\n      if (hosts.length === 0) {\n        return false;\n      }\n\n      var isValid = true;\n\n      for (var i = 0; i < hosts.length; i++) {\n        if (!isGatewayHostValid(hosts[i])) {\n          isValid = false;\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    _this.onAddServer = function () {\n      _this.setState(function (prevState) {\n        prevState.gatewayServers.push(prevState.addGatewayServer);\n        return {\n          gatewayServers: prevState.gatewayServers,\n          addGatewayServer: {\n            hosts: [],\n            port: {\n              number: 80,\n              name: 'http',\n              protocol: 'HTTP'\n            }\n          }\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.onRemoveServer = function (index) {\n      _this.setState(function (prevState) {\n        prevState.gatewayServers.splice(index, 1);\n        return {\n          gatewayServers: prevState.gatewayServers\n        };\n      }, function () {\n        return _this.props.onChange(_this.state);\n      });\n    };\n\n    _this.state = initGateway();\n    return _this;\n  }\n\n  _createClass(GatewayForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState(this.props.gateway);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Workload Selector\",\n        fieldId: \"workloadSelectorSwitch\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        id: \"workloadSelectorSwitch\",\n        label: ' ',\n        labelOff: ' ',\n        isChecked: this.state.addWorkloadSelector,\n        onChange: function onChange() {\n          _this2.setState(function (prevState) {\n            return {\n              addWorkloadSelector: !prevState.addWorkloadSelector\n            };\n          }, function () {\n            return _this2.props.onChange(_this2.state);\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      })), this.state.addWorkloadSelector && /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"workloadLabels\",\n        label: \"Labels\",\n        helperText: \"One or more labels to select a workload where the Gateway is applied.\",\n        helperTextInvalid: \"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\",\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"gwHosts\",\n        name: \"gwHosts\",\n        isDisabled: !this.state.addWorkloadSelector,\n        value: this.state.workloadSelectorLabels,\n        onChange: this.addWorkloadLabels,\n        isValid: this.state.workloadSelectorValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(ServerBuilder, {\n        onAddServer: function onAddServer(server) {\n          _this2.setState({\n            addGatewayServer: server\n          }, function () {\n            return _this2.onAddServer();\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Server List\",\n        fieldId: \"gwServerList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ServerList, {\n        serverList: this.state.gatewayServers,\n        onRemoveServer: this.onRemoveServer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return GatewayForm;\n}(React.Component);\n\nexport default GatewayForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/IstioConfigNew/GatewayForm.tsx"],"names":["React","FormGroup","Switch","TextInputBase","TextInput","isGatewayHostValid","ServerBuilder","ServerList","GATEWAY","GATEWAYS","initGateway","addWorkloadSelector","workloadSelectorLabels","workloadSelectorValid","gatewayServers","addGatewayServer","hosts","port","number","name","protocol","validHosts","isGatewayStateValid","g","length","GatewayForm","props","addWorkloadLabels","value","_","setState","onChange","state","trim","labels","split","isValid","i","label","indexOf","splitLabel","areValidHosts","onAddServer","prevState","push","onRemoveServer","index","splice","gateway","server","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\n// Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\nimport { FormGroup, Switch, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { isGatewayHostValid } from '../../utils/IstioConfigUtils';\nimport ServerBuilder from './GatewayForm/ServerBuilder';\nimport ServerList from './GatewayForm/ServerList';\nimport { Server } from '../../types/IstioObjects';\n\nexport const GATEWAY = 'Gateway';\nexport const GATEWAYS = 'gateways';\n\ntype Props = {\n  gateway: GatewayState;\n  onChange: (gateway: GatewayState) => void;\n};\n\n// Gateway and Sidecar states are consolidated in the parent page\nexport type GatewayState = {\n  addWorkloadSelector: boolean;\n  workloadSelectorValid: boolean;\n  workloadSelectorLabels: string;\n  gatewayServers: Server[];\n  addGatewayServer: Server;\n  validHosts: boolean;\n};\n\nexport const initGateway = (): GatewayState => ({\n  addWorkloadSelector: false,\n  workloadSelectorLabels: 'istio=ingressgateway',\n  workloadSelectorValid: true,\n  gatewayServers: [],\n  addGatewayServer: {\n    hosts: [],\n    port: {\n      number: 80,\n      name: 'http',\n      protocol: 'HTTP'\n    }\n  },\n  validHosts: false\n});\n\nexport const isGatewayStateValid = (g: GatewayState): boolean => {\n  return g.workloadSelectorValid && g.gatewayServers.length > 0;\n};\n\nclass GatewayForm extends React.Component<Props, GatewayState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initGateway();\n  }\n\n  componentDidMount() {\n    this.setState(this.props.gateway);\n  }\n\n  addWorkloadLabels = (value: string, _) => {\n    if (value.length === 0) {\n      this.setState(\n        {\n          workloadSelectorValid: false,\n          workloadSelectorLabels: ''\n        },\n        () => this.props.onChange(this.state)\n      );\n      return;\n    }\n    value = value.trim();\n    const labels: string[] = value.split(',');\n    let isValid = true;\n    // Some smoke validation rules for the labels\n    for (let i = 0; i < labels.length; i++) {\n      const label = labels[i];\n      if (label.indexOf('=') < 0) {\n        isValid = false;\n        break;\n      }\n      const splitLabel: string[] = label.split('=');\n      if (splitLabel.length !== 2) {\n        isValid = false;\n        break;\n      }\n      if (splitLabel[0].trim().length === 0 || splitLabel[1].trim().length === 0) {\n        isValid = false;\n        break;\n      }\n    }\n    this.setState(\n      {\n        workloadSelectorValid: isValid,\n        workloadSelectorLabels: value\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  areValidHosts = (hosts: string[]): boolean => {\n    if (hosts.length === 0) {\n      return false;\n    }\n    let isValid = true;\n    for (let i = 0; i < hosts.length; i++) {\n      if (!isGatewayHostValid(hosts[i])) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  };\n\n  onAddServer = () => {\n    this.setState(\n      prevState => {\n        prevState.gatewayServers.push(prevState.addGatewayServer);\n        return {\n          gatewayServers: prevState.gatewayServers,\n          addGatewayServer: {\n            hosts: [],\n            port: {\n              number: 80,\n              name: 'http',\n              protocol: 'HTTP'\n            }\n          }\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  onRemoveServer = (index: number) => {\n    this.setState(\n      prevState => {\n        prevState.gatewayServers.splice(index, 1);\n        return {\n          gatewayServers: prevState.gatewayServers\n        };\n      },\n      () => this.props.onChange(this.state)\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <FormGroup label=\"Workload Selector\" fieldId=\"workloadSelectorSwitch\">\n          <Switch\n            id=\"workloadSelectorSwitch\"\n            label={' '}\n            labelOff={' '}\n            isChecked={this.state.addWorkloadSelector}\n            onChange={() => {\n              this.setState(\n                prevState => ({\n                  addWorkloadSelector: !prevState.addWorkloadSelector\n                }),\n                () => this.props.onChange(this.state)\n              );\n            }}\n          />\n        </FormGroup>\n        {this.state.addWorkloadSelector && (\n          <FormGroup\n            fieldId=\"workloadLabels\"\n            label=\"Labels\"\n            helperText=\"One or more labels to select a workload where the Gateway is applied.\"\n            helperTextInvalid=\"Enter a label in the format <label>=<value>. Enter one or multiple labels separated by comma.\"\n            isValid={this.state.workloadSelectorValid}\n          >\n            <TextInput\n              id=\"gwHosts\"\n              name=\"gwHosts\"\n              isDisabled={!this.state.addWorkloadSelector}\n              value={this.state.workloadSelectorLabels}\n              onChange={this.addWorkloadLabels}\n              isValid={this.state.workloadSelectorValid}\n            />\n          </FormGroup>\n        )}\n        <ServerBuilder\n          onAddServer={server => {\n            this.setState(\n              {\n                addGatewayServer: server\n              },\n              () => this.onAddServer()\n            );\n          }}\n        />\n        <FormGroup label=\"Server List\" fieldId=\"gwServerList\">\n          <ServerList serverList={this.state.gatewayServers} onRemoveServer={this.onRemoveServer} />\n        </FormGroup>\n      </>\n    );\n  }\n}\n\nexport default GatewayForm;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/Time/TimeDurationComponent.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { DurationDropdownContainer } from '../DurationDropdown/DurationDropdown';\nimport RefreshContainer from 'components/Refresh/Refresh';\nimport { durationSelector, replayActiveSelector } from 'store/Selectors';\nimport { Tooltip, TooltipPosition, Button } from '@patternfly/react-core';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { bindActionCreators } from 'redux';\nexport var TimeDurationComponent = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(TimeDurationComponent, _React$PureComponent);\n\n  var _super = _createSuper(TimeDurationComponent);\n\n  function TimeDurationComponent() {\n    var _this;\n\n    _classCallCheck(this, TimeDurationComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onToggleReplay = function () {\n      _this.props.toggleReplayActive();\n    };\n\n    return _this;\n  }\n\n  _createClass(TimeDurationComponent, [{\n    key: \"render\",\n    value: function render() {\n      var durationTooltip = this.props.replayActive ? 'Traffic metrics per frame' : 'Traffic metrics per refresh';\n\n      var _ref = this.props.replayActive ? [undefined, 'Traffic'] : ['Last', undefined],\n          _ref2 = _slicedToArray(_ref, 2),\n          prefix = _ref2[0],\n          suffix = _ref2[1];\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, this.props.supportsReplay && !this.props.replayActive && /*#__PURE__*/React.createElement(Tooltip, {\n        key: 'time_range_replay',\n        position: TooltipPosition.left,\n        content: \"Replay...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        style: {\n          padding: '1px 6px 0 0'\n        },\n        onClick: this.onToggleReplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.History, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(DurationDropdownContainer, {\n        id: 'time_range_duration',\n        disabled: this.props.disabled,\n        prefix: prefix,\n        suffix: suffix,\n        tooltip: durationTooltip,\n        tooltipBottom: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }), !(this.props.supportsReplay && this.props.replayActive) && /*#__PURE__*/React.createElement(RefreshContainer, {\n        id: \"time_range_refresh\",\n        disabled: this.props.disabled,\n        hideLabel: true,\n        handleRefresh: this.props.handleRefresh,\n        manageURL: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }), this.props.supportsReplay && this.props.replayActive && /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        style: {\n          margin: '1px 0 0 5px'\n        },\n        onClick: this.onToggleReplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Close, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }), \"  Close Replay\")));\n    }\n  }]);\n\n  return TimeDurationComponent;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    duration: durationSelector(state),\n    replayActive: replayActiveSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n  };\n};\n\nvar TimeDurationContainer = connect(mapStateToProps, mapDispatchToProps)(TimeDurationComponent);\nexport default TimeDurationContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/components/Time/TimeDurationComponent.tsx"],"names":["React","connect","DurationDropdownContainer","RefreshContainer","durationSelector","replayActiveSelector","Tooltip","TooltipPosition","Button","KialiIcon","defaultIconStyle","UserSettingsActions","bindActionCreators","TimeDurationComponent","onToggleReplay","props","toggleReplayActive","durationTooltip","replayActive","undefined","prefix","suffix","supportsReplay","left","padding","disabled","handleRefresh","margin","PureComponent","mapStateToProps","state","duration","mapDispatchToProps","dispatch","TimeDurationContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { DurationDropdownContainer } from '../DurationDropdown/DurationDropdown';\nimport RefreshContainer from 'components/Refresh/Refresh';\nimport { KialiAppState } from 'store/Store';\nimport { durationSelector, replayActiveSelector } from 'store/Selectors';\nimport { DurationInSeconds } from 'types/Common';\nimport { Tooltip, TooltipPosition, Button } from '@patternfly/react-core';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { bindActionCreators } from 'redux';\n\ntype ReduxProps = {\n  duration: DurationInSeconds;\n  replayActive: boolean;\n\n  toggleReplayActive: () => void;\n};\n\ntype TimeControlsProps = ReduxProps & {\n  disabled: boolean;\n  id: string;\n  supportsReplay?: boolean;\n\n  handleRefresh?: () => void;\n};\n\nexport class TimeDurationComponent extends React.PureComponent<TimeControlsProps> {\n  render() {\n    const durationTooltip = this.props.replayActive ? 'Traffic metrics per frame' : 'Traffic metrics per refresh';\n    let [prefix, suffix] = this.props.replayActive ? [undefined, 'Traffic'] : ['Last', undefined];\n\n    return (\n      <span>\n        {this.props.supportsReplay && !this.props.replayActive && (\n          <Tooltip key={'time_range_replay'} position={TooltipPosition.left} content=\"Replay...\">\n            <Button variant=\"link\" style={{ padding: '1px 6px 0 0' }} onClick={this.onToggleReplay}>\n              <KialiIcon.History className={defaultIconStyle} />\n            </Button>\n          </Tooltip>\n        )}\n        <DurationDropdownContainer\n          id={'time_range_duration'}\n          disabled={this.props.disabled}\n          prefix={prefix}\n          suffix={suffix}\n          tooltip={durationTooltip}\n          tooltipBottom={true}\n        />\n        {!(this.props.supportsReplay && this.props.replayActive) && (\n          <RefreshContainer\n            id=\"time_range_refresh\"\n            disabled={this.props.disabled}\n            hideLabel={true}\n            handleRefresh={this.props.handleRefresh}\n            manageURL={true}\n          />\n        )}\n        {this.props.supportsReplay && this.props.replayActive && (\n          <Button variant=\"link\" style={{ margin: '1px 0 0 5px' }} onClick={this.onToggleReplay}>\n            <span>\n              <KialiIcon.Close className={defaultIconStyle} />\n              {`  Close Replay`}\n            </span>\n          </Button>\n        )}\n      </span>\n    );\n  }\n\n  private onToggleReplay = () => {\n    this.props.toggleReplayActive();\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  duration: durationSelector(state),\n  replayActive: replayActiveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  toggleReplayActive: bindActionCreators(UserSettingsActions.toggleReplayActive, dispatch)\n});\n\nconst TimeDurationContainer = connect(mapStateToProps, mapDispatchToProps)(TimeDurationComponent);\n\nexport default TimeDurationContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/IstioConfigNew/RequestAuthorizationForm/JwtRuleBuilder.tsx\";\nimport * as React from 'react';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { Button, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../components/Pf/PfColors';\nimport { isValidUrl } from '../../../utils/IstioConfigUtils';\nvar INIT_JWT_RULE_FIELDS = ['issuer', 'audiences', 'jwksUri', 'jwks', 'fromHeaders', 'fromParams', 'outputPayloadToHeader', 'forwardOriginalToken'].sort();\nvar headerCells = [{\n  title: 'JWT Rule Field',\n  transforms: [cellWidth(30)],\n  props: {}\n}, {\n  title: 'Values',\n  transforms: [cellWidth(70)],\n  props: {}\n}, {\n  title: '',\n  props: {}\n}];\nvar noValidStyle = style({\n  color: PFColors.Red100\n});\nvar warningStyle = style({\n  marginLeft: 25,\n  color: PFColors.Red100,\n  textAlign: 'center'\n});\nexport var formatJwtField = function formatJwtField(jwtField, jwtRule) {\n  switch (jwtField) {\n    case 'issuer':\n      return jwtRule.issuer ? jwtRule.issuer : '';\n\n    case 'audiences':\n      return jwtRule.audiences ? jwtRule.audiences.join(',') : '';\n\n    case 'jwks':\n      return jwtRule.jwks ? jwtRule.jwks : '';\n\n    case 'jwksUri':\n      return jwtRule.jwksUri ? jwtRule.jwksUri : '';\n\n    case 'fromHeaders':\n      return jwtRule.fromHeaders ? jwtRule.fromHeaders.map(function (header) {\n        if (header.prefix) {\n          return header.name + ': ' + header.prefix;\n        } else {\n          return header.name;\n        }\n      }).join(',') : '';\n\n    case 'fromParams':\n      return jwtRule.fromParams ? jwtRule.fromParams.join(',') : '';\n\n    case 'outputPayloadToHeader':\n      return jwtRule.outputPayloadToHeader ? jwtRule.outputPayloadToHeader : '';\n\n    case 'forwardOriginalToken':\n      return jwtRule.forwardOriginalToken ? '' + jwtRule.forwardOriginalToken : 'false';\n\n    default:\n  }\n\n  return '';\n};\n\nvar JwtRuleBuilder = /*#__PURE__*/function (_React$Component) {\n  _inherits(JwtRuleBuilder, _React$Component);\n\n  var _super = _createSuper(JwtRuleBuilder);\n\n  function JwtRuleBuilder(props) {\n    var _this;\n\n    _classCallCheck(this, JwtRuleBuilder);\n\n    _this = _super.call(this, props);\n\n    _this.onAddJwtField = function (value, _) {\n      _this.setState({\n        newJwtField: value\n      });\n    };\n\n    _this.onAddNewValues = function (value, _) {\n      _this.setState({\n        newValues: value\n      });\n    };\n\n    _this.onUpdateJwtRule = function () {\n      _this.setState(function (prevState) {\n        var i = prevState.jwtRuleFields.indexOf(prevState.newJwtField);\n\n        if (i > -1) {\n          prevState.jwtRuleFields.splice(i, 1);\n        }\n\n        switch (prevState.newJwtField) {\n          case 'issuer':\n            prevState.jwtRule.issuer = prevState.newValues;\n            break;\n\n          case 'audiences':\n            prevState.jwtRule.audiences = prevState.newValues.split(',');\n            break;\n\n          case 'jwks':\n            prevState.jwtRule.jwks = prevState.newValues;\n            break;\n\n          case 'jwksUri':\n            prevState.jwtRule.jwksUri = prevState.newValues;\n            break;\n\n          case 'fromHeaders':\n            // Parse a string like:\n            // \"Authorization: Bearer , Authorization: Bearer, Security \"\n            // In [{name: 'Authorization', prefix: 'Bearer '}, {name: 'Authorization', prefix: 'Bearer'}, {name: 'Security}]\n            prevState.jwtRule.fromHeaders = [];\n            prevState.newValues.split(',').forEach(function (value) {\n              var values = value.split(':');\n              var header = {\n                name: values[0]\n              };\n\n              if (values.length > 1) {\n                header.prefix = values[1].trimLeft();\n              }\n\n              if (prevState.jwtRule.fromHeaders) {\n                prevState.jwtRule.fromHeaders.push(header);\n              }\n            });\n            break;\n\n          case 'fromParams':\n            prevState.jwtRule.fromParams = prevState.newValues.split(',');\n            break;\n\n          case 'outputPayloadToHeader':\n            prevState.jwtRule.outputPayloadToHeader = prevState.newValues;\n            break;\n\n          case 'forwardOriginalToken':\n            // I don't want to put different types for input, perhaps in the future\n            prevState.jwtRule.forwardOriginalToken = prevState.newValues.toLowerCase() === 'true';\n            break;\n\n          default: // No default action.\n\n        }\n\n        return {\n          jwtRuleFields: prevState.jwtRuleFields,\n          jwtRule: prevState.jwtRule,\n          newJwtField: prevState.jwtRuleFields[0],\n          newValues: ''\n        };\n      });\n    };\n\n    _this.onAddJwtRuleToList = function () {\n      var oldJwtRule = _this.state.jwtRule;\n\n      _this.setState({\n        jwtRuleFields: Object.assign([], INIT_JWT_RULE_FIELDS),\n        jwtRule: {},\n        newJwtField: INIT_JWT_RULE_FIELDS[0],\n        newValues: ''\n      }, function () {\n        return _this.props.onAddJwtRule(oldJwtRule);\n      });\n    };\n\n    _this.actionResolver = function (rowData, _ref) {\n      var rowIndex = _ref.rowIndex;\n      var removeAction = {\n        title: 'Remove Field',\n        // @ts-ignore\n        onClick: function onClick(event, rowIndex, rowData, extraData) {\n          // Fetch sourceField from rowData, it's a fixed string on children\n          var removeJwtRuleField = rowData.cells[0].props.children.toString();\n\n          _this.setState(function (prevState) {\n            prevState.jwtRuleFields.push(removeJwtRuleField);\n            delete prevState.jwtRule[removeJwtRuleField];\n            var newJwtRuleFields = prevState.jwtRuleFields.sort();\n            return {\n              jwtRuleFields: newJwtRuleFields,\n              jwtRule: prevState.jwtRule,\n              newJwtField: newJwtRuleFields[0],\n              newValues: ''\n            };\n          });\n        }\n      };\n\n      if (rowIndex < Object.keys(_this.state.jwtRule).length) {\n        return [removeAction];\n      }\n\n      return [];\n    };\n\n    _this.isJwtFieldValid = function () {\n      var isEmptyValue = _this.state.newValues.split(',').every(function (v) {\n        return v.length === 0;\n      });\n\n      if (isEmptyValue) {\n        return [false, 'Value cannot be empty'];\n      }\n\n      if (_this.state.newJwtField === 'jwksUri' && !isValidUrl(_this.state.newValues)) {\n        return [false, 'jwsUri is not a valid Uri'];\n      }\n\n      return [true, ''];\n    };\n\n    _this.isJwtRuleValid = function () {\n      return _this.state.jwtRule.issuer ? _this.state.jwtRule.issuer.length > 0 : false;\n    };\n\n    _this.rows = function () {\n      var jwtRuleRows = Object.keys(_this.state.jwtRule).map(function (jwtField, i) {\n        return {\n          key: 'jwtField' + i,\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, jwtField), /*#__PURE__*/React.createElement(React.Fragment, null, formatJwtField(jwtField, _this.state.jwtRule)), /*#__PURE__*/React.createElement(React.Fragment, null)]\n        };\n      });\n\n      if (_this.state.jwtRuleFields.length > 0) {\n        var _this$isJwtFieldValid = _this.isJwtFieldValid(),\n            _this$isJwtFieldValid2 = _slicedToArray(_this$isJwtFieldValid, 2),\n            isJwtFieldValid = _this$isJwtFieldValid2[0],\n            validText = _this$isJwtFieldValid2[1];\n\n        return jwtRuleRows.concat([{\n          key: 'jwtFieldKeyNew',\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n            value: _this.state.newJwtField,\n            id: \"addNewJwtField\",\n            name: \"addNewJwtField\",\n            onChange: _this.onAddJwtField,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }\n          }, _this.state.jwtRuleFields.map(function (option, index) {\n            return /*#__PURE__*/React.createElement(FormSelectOption, {\n              isDisabled: false,\n              key: 'jwt' + index,\n              value: option,\n              label: option,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }\n            });\n          }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n            value: _this.state.newValues,\n            type: \"text\",\n            id: \"addNewValues\",\n            key: \"addNewValues\",\n            \"aria-describedby\": \"add new source values\",\n            name: \"addNewValues\",\n            onChange: _this.onAddNewValues,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }\n          }), _this.state.newJwtField === 'fromHeaders' && /*#__PURE__*/React.createElement(\"div\", {\n            key: \"fromHeadersHelperText\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }\n          }, \"List of header locations from which JWT is expected. \", /*#__PURE__*/React.createElement(\"br\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 72\n            }\n          }), \"I.e. \\\"x-jwt-assertion: Bearer ,Authorization: Bearer \\\"\"), !isJwtFieldValid && /*#__PURE__*/React.createElement(\"div\", {\n            key: \"hostsHelperText\",\n            className: noValidStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }\n          }, validText)), /*#__PURE__*/React.createElement(React.Fragment, null, _this.state.jwtRuleFields.length > 0 && /*#__PURE__*/React.createElement(Button, {\n            variant: \"link\",\n            icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 25\n              }\n            }),\n            onClick: _this.onUpdateJwtRule,\n            isDisabled: !isJwtFieldValid,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }\n          }))]\n        }]);\n      }\n\n      return jwtRuleRows;\n    };\n\n    _this.state = {\n      jwtRuleFields: Object.assign([], INIT_JWT_RULE_FIELDS),\n      jwtRule: {},\n      newJwtField: 'issuer',\n      newValues: ''\n    };\n    return _this;\n  }\n\n  _createClass(JwtRuleBuilder, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"JWT Rule Builder\",\n        cells: headerCells,\n        rows: this.rows() // @ts-ignore\n        ,\n        actionResolver: this.actionResolver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }\n        }),\n        isDisabled: !this.isJwtRuleValid(),\n        onClick: this.onAddJwtRuleToList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }\n      }, \"Add JWT Rule\", !this.isJwtRuleValid() && /*#__PURE__*/React.createElement(\"span\", {\n        className: warningStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 38\n        }\n      }, \"A JWT Rule needs an \\\"issuer\\\"\")));\n    }\n  }]);\n\n  return JwtRuleBuilder;\n}(React.Component);\n\nexport default JwtRuleBuilder;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/IstioConfigNew/RequestAuthorizationForm/JwtRuleBuilder.tsx"],"names":["React","cellWidth","Table","TableBody","TableHeader","Button","FormSelect","FormSelectOption","PlusCircleIcon","TextInputBase","TextInput","style","PFColors","isValidUrl","INIT_JWT_RULE_FIELDS","sort","headerCells","title","transforms","props","noValidStyle","color","Red100","warningStyle","marginLeft","textAlign","formatJwtField","jwtField","jwtRule","issuer","audiences","join","jwks","jwksUri","fromHeaders","map","header","prefix","name","fromParams","outputPayloadToHeader","forwardOriginalToken","JwtRuleBuilder","onAddJwtField","value","_","setState","newJwtField","onAddNewValues","newValues","onUpdateJwtRule","prevState","i","jwtRuleFields","indexOf","splice","split","forEach","values","length","trimLeft","push","toLowerCase","onAddJwtRuleToList","oldJwtRule","state","Object","assign","onAddJwtRule","actionResolver","rowData","rowIndex","removeAction","onClick","event","extraData","removeJwtRuleField","cells","children","toString","newJwtRuleFields","keys","isJwtFieldValid","isEmptyValue","every","v","isJwtRuleValid","rows","jwtRuleRows","key","validText","concat","option","index","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { JWTHeader, JWTRule } from '../../../types/IstioObjects';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { Button, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../components/Pf/PfColors';\nimport { isValidUrl } from '../../../utils/IstioConfigUtils';\n\ntype Props = {\n  onAddJwtRule: (rule: JWTRule) => void;\n};\n\ntype State = {\n  jwtRuleFields: string[];\n  jwtRule: JWTRule;\n  newJwtField: string;\n  newValues: string;\n};\n\nconst INIT_JWT_RULE_FIELDS = [\n  'issuer',\n  'audiences',\n  'jwksUri',\n  'jwks',\n  'fromHeaders',\n  'fromParams',\n  'outputPayloadToHeader',\n  'forwardOriginalToken'\n].sort();\n\nconst headerCells: ICell[] = [\n  {\n    title: 'JWT Rule Field',\n    transforms: [cellWidth(30) as any],\n    props: {}\n  },\n  {\n    title: 'Values',\n    transforms: [cellWidth(70) as any],\n    props: {}\n  },\n  {\n    title: '',\n    props: {}\n  }\n];\n\nconst noValidStyle = style({\n  color: PFColors.Red100\n});\n\nconst warningStyle = style({\n  marginLeft: 25,\n  color: PFColors.Red100,\n  textAlign: 'center'\n});\n\nexport const formatJwtField = (jwtField: string, jwtRule: JWTRule): string => {\n  switch (jwtField) {\n    case 'issuer':\n      return jwtRule.issuer ? jwtRule.issuer : '';\n    case 'audiences':\n      return jwtRule.audiences ? jwtRule.audiences.join(',') : '';\n    case 'jwks':\n      return jwtRule.jwks ? jwtRule.jwks : '';\n    case 'jwksUri':\n      return jwtRule.jwksUri ? jwtRule.jwksUri : '';\n    case 'fromHeaders':\n      return jwtRule.fromHeaders\n        ? jwtRule.fromHeaders\n            .map(header => {\n              if (header.prefix) {\n                return header.name + ': ' + header.prefix;\n              } else {\n                return header.name;\n              }\n            })\n            .join(',')\n        : '';\n    case 'fromParams':\n      return jwtRule.fromParams ? jwtRule.fromParams.join(',') : '';\n    case 'outputPayloadToHeader':\n      return jwtRule.outputPayloadToHeader ? jwtRule.outputPayloadToHeader : '';\n    case 'forwardOriginalToken':\n      return jwtRule.forwardOriginalToken ? '' + jwtRule.forwardOriginalToken : 'false';\n    default:\n  }\n  return '';\n};\n\nclass JwtRuleBuilder extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      jwtRuleFields: Object.assign([], INIT_JWT_RULE_FIELDS),\n      jwtRule: {},\n      newJwtField: 'issuer',\n      newValues: ''\n    };\n  }\n\n  onAddJwtField = (value: string, _) => {\n    this.setState({\n      newJwtField: value\n    });\n  };\n\n  onAddNewValues = (value: string, _) => {\n    this.setState({\n      newValues: value\n    });\n  };\n\n  onUpdateJwtRule = () => {\n    this.setState(prevState => {\n      const i = prevState.jwtRuleFields.indexOf(prevState.newJwtField);\n      if (i > -1) {\n        prevState.jwtRuleFields.splice(i, 1);\n      }\n      switch (prevState.newJwtField) {\n        case 'issuer':\n          prevState.jwtRule.issuer = prevState.newValues;\n          break;\n        case 'audiences':\n          prevState.jwtRule.audiences = prevState.newValues.split(',');\n          break;\n        case 'jwks':\n          prevState.jwtRule.jwks = prevState.newValues;\n          break;\n        case 'jwksUri':\n          prevState.jwtRule.jwksUri = prevState.newValues;\n          break;\n        case 'fromHeaders':\n          // Parse a string like:\n          // \"Authorization: Bearer , Authorization: Bearer, Security \"\n          // In [{name: 'Authorization', prefix: 'Bearer '}, {name: 'Authorization', prefix: 'Bearer'}, {name: 'Security}]\n          prevState.jwtRule.fromHeaders = [];\n          prevState.newValues.split(',').forEach(value => {\n            const values = value.split(':');\n            const header: JWTHeader = {\n              name: values[0]\n            };\n            if (values.length > 1) {\n              header.prefix = values[1].trimLeft();\n            }\n            if (prevState.jwtRule.fromHeaders) {\n              prevState.jwtRule.fromHeaders.push(header);\n            }\n          });\n          break;\n        case 'fromParams':\n          prevState.jwtRule.fromParams = prevState.newValues.split(',');\n          break;\n        case 'outputPayloadToHeader':\n          prevState.jwtRule.outputPayloadToHeader = prevState.newValues;\n          break;\n        case 'forwardOriginalToken':\n          // I don't want to put different types for input, perhaps in the future\n          prevState.jwtRule.forwardOriginalToken = prevState.newValues.toLowerCase() === 'true';\n          break;\n        default:\n        // No default action.\n      }\n      return {\n        jwtRuleFields: prevState.jwtRuleFields,\n        jwtRule: prevState.jwtRule,\n        newJwtField: prevState.jwtRuleFields[0],\n        newValues: ''\n      };\n    });\n  };\n\n  onAddJwtRuleToList = () => {\n    const oldJwtRule = this.state.jwtRule;\n    this.setState(\n      {\n        jwtRuleFields: Object.assign([], INIT_JWT_RULE_FIELDS),\n        jwtRule: {},\n        newJwtField: INIT_JWT_RULE_FIELDS[0],\n        newValues: ''\n      },\n      () => this.props.onAddJwtRule(oldJwtRule)\n    );\n  };\n\n  // @ts-ignore\n  actionResolver = (rowData, { rowIndex }) => {\n    const removeAction = {\n      title: 'Remove Field',\n      // @ts-ignore\n      onClick: (event, rowIndex, rowData, extraData) => {\n        // Fetch sourceField from rowData, it's a fixed string on children\n        const removeJwtRuleField = rowData.cells[0].props.children.toString();\n        this.setState(prevState => {\n          prevState.jwtRuleFields.push(removeJwtRuleField);\n          delete prevState.jwtRule[removeJwtRuleField];\n          const newJwtRuleFields = prevState.jwtRuleFields.sort();\n          return {\n            jwtRuleFields: newJwtRuleFields,\n            jwtRule: prevState.jwtRule,\n            newJwtField: newJwtRuleFields[0],\n            newValues: ''\n          };\n        });\n      }\n    };\n    if (rowIndex < Object.keys(this.state.jwtRule).length) {\n      return [removeAction];\n    }\n    return [];\n  };\n\n  isJwtFieldValid = (): [boolean, string] => {\n    const isEmptyValue = this.state.newValues.split(',').every(v => v.length === 0);\n    if (isEmptyValue) {\n      return [false, 'Value cannot be empty'];\n    }\n    if (this.state.newJwtField === 'jwksUri' && !isValidUrl(this.state.newValues)) {\n      return [false, 'jwsUri is not a valid Uri'];\n    }\n    return [true, ''];\n  };\n\n  isJwtRuleValid = (): boolean => {\n    return this.state.jwtRule.issuer ? this.state.jwtRule.issuer.length > 0 : false;\n  };\n\n  rows = () => {\n    const jwtRuleRows = Object.keys(this.state.jwtRule).map((jwtField, i) => {\n      return {\n        key: 'jwtField' + i,\n        cells: [<>{jwtField}</>, <>{formatJwtField(jwtField, this.state.jwtRule)}</>, <></>]\n      };\n    });\n    if (this.state.jwtRuleFields.length > 0) {\n      const [isJwtFieldValid, validText] = this.isJwtFieldValid();\n      return jwtRuleRows.concat([\n        {\n          key: 'jwtFieldKeyNew',\n          cells: [\n            <>\n              <FormSelect\n                value={this.state.newJwtField}\n                id=\"addNewJwtField\"\n                name=\"addNewJwtField\"\n                onChange={this.onAddJwtField}\n              >\n                {this.state.jwtRuleFields.map((option, index) => (\n                  <FormSelectOption isDisabled={false} key={'jwt' + index} value={option} label={option} />\n                ))}\n              </FormSelect>\n            </>,\n            <>\n              <TextInput\n                value={this.state.newValues}\n                type=\"text\"\n                id=\"addNewValues\"\n                key=\"addNewValues\"\n                aria-describedby=\"add new source values\"\n                name=\"addNewValues\"\n                onChange={this.onAddNewValues}\n              />\n              {this.state.newJwtField === 'fromHeaders' && (\n                <div key=\"fromHeadersHelperText\">\n                  List of header locations from which JWT is expected. <br />\n                  I.e. \"x-jwt-assertion: Bearer ,Authorization: Bearer \"\n                </div>\n              )}\n              {!isJwtFieldValid && (\n                <div key=\"hostsHelperText\" className={noValidStyle}>\n                  {validText}\n                </div>\n              )}\n            </>,\n            <>\n              {this.state.jwtRuleFields.length > 0 && (\n                <Button\n                  variant=\"link\"\n                  icon={<PlusCircleIcon />}\n                  onClick={this.onUpdateJwtRule}\n                  isDisabled={!isJwtFieldValid}\n                />\n              )}\n            </>\n          ]\n        }\n      ]);\n    }\n    return jwtRuleRows;\n  };\n\n  render() {\n    return (\n      <>\n        <Table\n          aria-label=\"JWT Rule Builder\"\n          cells={headerCells}\n          rows={this.rows()}\n          // @ts-ignore\n          actionResolver={this.actionResolver}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        <Button\n          variant=\"link\"\n          icon={<PlusCircleIcon />}\n          isDisabled={!this.isJwtRuleValid()}\n          onClick={this.onAddJwtRuleToList}\n        >\n          Add JWT Rule\n          {!this.isJwtRuleValid() && <span className={warningStyle}>A JWT Rule needs an \"issuer\"</span>}\n        </Button>\n      </>\n    );\n  }\n}\n\nexport default JwtRuleBuilder;\n"]},"metadata":{},"sourceType":"module"}
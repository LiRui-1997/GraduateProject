{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/CytoscapeGraph/MiniGraphCard.tsx\";\nimport * as React from 'react';\nimport { Card, CardActions, CardBody, CardHead, CardHeader, Dropdown, DropdownItem, KebabToggle, Title } from '@patternfly/react-core';\nimport history from '../../app/History';\nimport { GraphType, NodeType } from '../../types/Graph';\nimport CytoscapeGraph from './CytoscapeGraph';\nimport { CytoscapeGraphSelectorBuilder } from './CytoscapeGraphSelector';\nimport { DagreGraph } from './graphs/DagreGraph';\nimport { makeNodeGraphUrlFromParams } from 'components/Nav/NavUtils';\nimport { store } from 'store/ConfigStore';\nimport { style } from 'typestyle';\nimport { toRangeString } from '../Time/Utils';\nvar initGraphContainerStyle = style({\n  width: '100%',\n  height: '100%'\n});\n\nvar MiniGraphCard = /*#__PURE__*/function (_React$Component) {\n  _inherits(MiniGraphCard, _React$Component);\n\n  var _super = _createSuper(MiniGraphCard);\n\n  function MiniGraphCard(props) {\n    var _this;\n\n    _classCallCheck(this, MiniGraphCard);\n\n    _this = _super.call(this, props);\n    _this.cytoscapeGraphRef = void 0;\n\n    _this.refresh = function () {\n      _this.setState({\n        graphData: _this.props.dataSource.graphData\n      });\n    };\n\n    _this.handleNodeTap = function (e) {\n      // Do nothing on inaccessible nodes or service entry nodes\n      if (e.isInaccessible || e.isServiceEntry) {\n        return;\n      } // If we are already on the details page of the tapped node, do nothing.\n\n\n      var displayedNode = _this.props.dataSource.fetchParameters.node; // Minigraph will consider box nodes as app\n\n      var eNodeType = e.nodeType === 'box' && e.isBox ? e.isBox : e.workload ? 'workload' : e.nodeType;\n      var isSameResource = (displayedNode === null || displayedNode === void 0 ? void 0 : displayedNode.namespace.name) === e.namespace && displayedNode.nodeType === eNodeType && displayedNode[displayedNode.nodeType] === e[eNodeType];\n\n      if (isSameResource) {\n        return;\n      } // unselect the currently selected node\n\n\n      var cy = _this.cytoscapeGraphRef.current.getCy();\n\n      if (cy) {\n        cy.$(':selected').selectify().unselect().unselectify();\n      } // Redirect to the details page of the tapped node.\n\n\n      var resource = e[eNodeType];\n      var resourceType = eNodeType === NodeType.APP ? 'application' : eNodeType;\n      history.push(\"/namespaces/\".concat(e.namespace, \"/\").concat(resourceType, \"s/\").concat(resource));\n    };\n\n    _this.onGraphActionsToggle = function (isOpen) {\n      _this.setState({\n        isKebabOpen: isOpen\n      });\n    };\n\n    _this.onViewFullGraph = function () {\n      var namespace = _this.props.dataSource.fetchParameters.namespaces[0].name;\n      var cytoscapeGraph = new CytoscapeGraphSelectorBuilder().namespace(namespace);\n      var graphType = GraphType.APP;\n\n      switch (_this.props.dataSource.fetchParameters.node.nodeType) {\n        case NodeType.AGGREGATE:\n          cytoscapeGraph = cytoscapeGraph.aggregate(_this.props.dataSource.fetchParameters.node.aggregate, _this.props.dataSource.fetchParameters.node.aggregateValue).nodeType(NodeType.AGGREGATE);\n          break;\n\n        case NodeType.APP:\n          cytoscapeGraph = cytoscapeGraph.app(_this.props.dataSource.fetchParameters.node.app).nodeType(NodeType.APP);\n          break;\n\n        case NodeType.SERVICE:\n          graphType = GraphType.SERVICE;\n          cytoscapeGraph = cytoscapeGraph.service(_this.props.dataSource.fetchParameters.node.service);\n          break;\n\n        case NodeType.WORKLOAD:\n          graphType = GraphType.WORKLOAD;\n          cytoscapeGraph = cytoscapeGraph.workload(_this.props.dataSource.fetchParameters.node.workload);\n          break;\n\n        default:\n          // NodeType.BOX is n/a\n          break;\n      }\n\n      var graphUrl = \"/graph/namespaces?graphType=\".concat(graphType, \"&injectServiceNodes=true&namespaces=\").concat(namespace, \"&focusSelector=\").concat(encodeURI(cytoscapeGraph.build()));\n      history.push(graphUrl);\n    };\n\n    _this.onViewNodeGraph = function () {\n      var graphType = _this.props.dataSource.fetchParameters.graphType;\n\n      switch (_this.props.dataSource.fetchParameters.node.nodeType) {\n        case NodeType.APP:\n          graphType = GraphType.APP;\n          break;\n\n        case NodeType.SERVICE:\n          graphType = GraphType.SERVICE;\n          break;\n\n        case NodeType.WORKLOAD:\n          graphType = GraphType.WORKLOAD;\n          break;\n      }\n\n      var urlParams = {\n        activeNamespaces: _this.props.dataSource.fetchParameters.namespaces,\n        duration: _this.props.dataSource.fetchParameters.duration,\n        edgeLabels: _this.props.dataSource.fetchParameters.edgeLabels,\n        graphLayout: store.getState().graph.layout,\n        graphType: graphType,\n        node: _this.props.dataSource.fetchParameters.node,\n        refreshInterval: store.getState().userSettings.refreshInterval,\n        showIdleEdges: _this.props.dataSource.fetchParameters.showIdleEdges,\n        showIdleNodes: _this.props.dataSource.fetchParameters.showIdleNodes,\n        showOperationNodes: _this.props.dataSource.fetchParameters.showOperationNodes,\n        showServiceNodes: true,\n        trafficRates: _this.props.dataSource.fetchParameters.trafficRates\n      }; // To ensure updated components get the updated URL, update the URL first and then the state\n\n      history.push(makeNodeGraphUrlFromParams(urlParams));\n    };\n\n    _this.cytoscapeGraphRef = React.createRef();\n    _this.state = {\n      isKebabOpen: false,\n      graphData: props.dataSource.graphData\n    };\n    return _this;\n  }\n\n  _createClass(MiniGraphCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dataSource.on('fetchSuccess', this.refresh);\n      this.props.dataSource.on('fetchError', this.refresh);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dataSource.removeListener('fetchSuccess', this.refresh);\n      this.props.dataSource.removeListener('fetchError', this.refresh);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var graphCardActions = [/*#__PURE__*/React.createElement(DropdownItem, {\n        key: \"viewFullGraph\",\n        onClick: this.onViewFullGraph,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, \"Show full graph\"), /*#__PURE__*/React.createElement(DropdownItem, {\n        key: \"viewNodeGraph\",\n        onClick: this.onViewNodeGraph,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, \"Show node graph\")];\n      var rangeEnd = this.props.dataSource.graphTimestamp * 1000;\n      var rangeStart = rangeEnd - this.props.dataSource.graphDuration * 1000;\n      var intervalTitle = rangeEnd > 0 ? toRangeString(rangeStart, rangeEnd, {\n        second: '2-digit'\n      }, {\n        second: '2-digit'\n      }) : 'Loading';\n      return /*#__PURE__*/React.createElement(Card, {\n        style: {\n          height: '100%'\n        },\n        id: 'MiniGraphCard',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardHead, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CardActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown, {\n        toggle: /*#__PURE__*/React.createElement(KebabToggle, {\n          onToggle: this.onGraphActionsToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 23\n          }\n        }),\n        dropdownItems: graphCardActions,\n        isPlain: true,\n        isOpen: this.state.isKebabOpen,\n        position: 'right',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(CardHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        style: {\n          float: 'left'\n        },\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, intervalTitle))), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CytoscapeGraph, {\n        compressOnHide: true,\n        containerClassName: this.props.graphContainerStyle ? this.props.graphContainerStyle : initGraphContainerStyle,\n        graphData: {\n          elements: this.state.graphData,\n          errorMessage: !!this.props.dataSource.errorMessage ? this.props.dataSource.errorMessage : undefined,\n          isError: this.props.dataSource.isError,\n          isLoading: this.props.dataSource.isLoading,\n          fetchParams: this.props.dataSource.fetchParameters,\n          timestamp: this.props.dataSource.graphTimestamp\n        },\n        toggleIdleNodes: function toggleIdleNodes() {\n          return undefined;\n        },\n        edgeLabels: this.props.dataSource.fetchParameters.edgeLabels,\n        isMTLSEnabled: this.props.mtlsEnabled,\n        isMiniGraph: true,\n        onEdgeTap: this.props.onEdgeTap,\n        layout: DagreGraph.getLayout(),\n        onNodeTap: this.handleNodeTap,\n        ref: function ref(refInstance) {\n          return _this2.setCytoscapeGraph(refInstance);\n        },\n        refreshInterval: 0,\n        showIdleEdges: false,\n        showMissingSidecars: true,\n        showOperationNodes: false,\n        showSecurity: true,\n        showServiceNodes: true,\n        showTrafficAnimation: false,\n        showIdleNodes: false,\n        showVirtualServices: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"setCytoscapeGraph\",\n    value: function setCytoscapeGraph(cytoscapeGraph) {\n      this.cytoscapeGraphRef.current = cytoscapeGraph;\n    }\n  }]);\n\n  return MiniGraphCard;\n}(React.Component);\n\nexport { MiniGraphCard as default };","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/MiniGraphCard.tsx"],"names":["React","Card","CardActions","CardBody","CardHead","CardHeader","Dropdown","DropdownItem","KebabToggle","Title","history","GraphType","NodeType","CytoscapeGraph","CytoscapeGraphSelectorBuilder","DagreGraph","makeNodeGraphUrlFromParams","store","style","toRangeString","initGraphContainerStyle","width","height","MiniGraphCard","props","cytoscapeGraphRef","refresh","setState","graphData","dataSource","handleNodeTap","e","isInaccessible","isServiceEntry","displayedNode","fetchParameters","node","eNodeType","nodeType","isBox","workload","isSameResource","namespace","name","cy","current","getCy","$","selectify","unselect","unselectify","resource","resourceType","APP","push","onGraphActionsToggle","isOpen","isKebabOpen","onViewFullGraph","namespaces","cytoscapeGraph","graphType","AGGREGATE","aggregate","aggregateValue","app","SERVICE","service","WORKLOAD","graphUrl","encodeURI","build","onViewNodeGraph","urlParams","activeNamespaces","duration","edgeLabels","graphLayout","getState","graph","layout","refreshInterval","userSettings","showIdleEdges","showIdleNodes","showOperationNodes","showServiceNodes","trafficRates","createRef","state","on","removeListener","graphCardActions","rangeEnd","graphTimestamp","rangeStart","graphDuration","intervalTitle","second","float","graphContainerStyle","elements","errorMessage","undefined","isError","isLoading","fetchParams","timestamp","mtlsEnabled","onEdgeTap","getLayout","refInstance","setCytoscapeGraph","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,UALF,EAMEC,QANF,EAOEC,YAPF,EAQEC,WARF,EASEC,KATF,QAUO,wBAVP;AAWA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,SAAiCC,SAAjC,EAA4CC,QAA5C,QAA4D,mBAA5D;AACA,OAAOC,cAAP,MAAqE,kBAArE;AACA,SAASC,6BAAT,QAA8C,0BAA9C;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAAyBC,0BAAzB,QAA2D,yBAA3D;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,aAAT,QAA8B,eAA9B;AAGA,IAAMC,uBAAuB,GAAGF,KAAK,CAAC;AAAEG,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAAD,CAArC;;IAcqBC,a;;;;;AAGnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UAFXC,iBAEW;;AAAA,UAgBXC,OAhBW,GAgBD,YAAM;AACtB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,MAAKJ,KAAL,CAAWK,UAAX,CAAsBD;AAAnC,OAAd;AACD,KAlBkB;;AAAA,UA+FXE,aA/FW,GA+FK,UAACC,CAAD,EAA0B;AAChD;AACA,UAAIA,CAAC,CAACC,cAAF,IAAoBD,CAAC,CAACE,cAA1B,EAA0C;AACxC;AACD,OAJ+C,CAMhD;;;AACA,UAAMC,aAAa,GAAG,MAAKV,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAA5D,CAPgD,CAQhD;;AACA,UAAMC,SAAS,GAAGN,CAAC,CAACO,QAAF,KAAe,KAAf,IAAwBP,CAAC,CAACQ,KAA1B,GAAkCR,CAAC,CAACQ,KAApC,GAA4CR,CAAC,CAACS,QAAF,GAAa,UAAb,GAA0BT,CAAC,CAACO,QAA1F;AACA,UAAMG,cAAc,GAClB,CAAAP,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,SAAf,CAAyBC,IAAzB,MAAkCZ,CAAC,CAACW,SAApC,IACAR,aAAa,CAACI,QAAd,KAA2BD,SAD3B,IAEAH,aAAa,CAACA,aAAa,CAACI,QAAf,CAAb,KAA0CP,CAAC,CAACM,SAAD,CAH7C;;AAKA,UAAII,cAAJ,EAAoB;AAClB;AACD,OAjB+C,CAmBhD;;;AACA,UAAMG,EAAE,GAAG,MAAKnB,iBAAL,CAAuBoB,OAAvB,CAA+BC,KAA/B,EAAX;;AACA,UAAIF,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACG,CAAH,CAAK,WAAL,EAAkBC,SAAlB,GAA8BC,QAA9B,GAAyCC,WAAzC;AACD,OAvB+C,CAyBhD;;;AACA,UAAIC,QAAQ,GAAGpB,CAAC,CAACM,SAAD,CAAhB;AACA,UAAIe,YAAoB,GAAGf,SAAS,KAAKzB,QAAQ,CAACyC,GAAvB,GAA6B,aAA7B,GAA6ChB,SAAxE;AAEA3B,MAAAA,OAAO,CAAC4C,IAAR,uBAA4BvB,CAAC,CAACW,SAA9B,cAA2CU,YAA3C,eAA4DD,QAA5D;AACD,KA7HkB;;AAAA,UA+HXI,oBA/HW,GA+HY,UAACC,MAAD,EAAqB;AAClD,YAAK7B,QAAL,CAAc;AACZ8B,QAAAA,WAAW,EAAED;AADD,OAAd;AAGD,KAnIkB;;AAAA,UAqIXE,eArIW,GAqIO,YAAM;AAC9B,UAAMhB,SAAS,GAAG,MAAKlB,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCwB,UAAtC,CAAiD,CAAjD,EAAoDhB,IAAtE;AACA,UAAIiB,cAAc,GAAG,IAAI9C,6BAAJ,GAAoC4B,SAApC,CAA8CA,SAA9C,CAArB;AACA,UAAImB,SAAoB,GAAGlD,SAAS,CAAC0C,GAArC;;AAEA,cAAQ,MAAK7B,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4CE,QAApD;AACE,aAAK1B,QAAQ,CAACkD,SAAd;AACEF,UAAAA,cAAc,GAAGA,cAAc,CAC5BG,SADc,CAEb,MAAKvC,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4C2B,SAF/B,EAGb,MAAKvC,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4C4B,cAH/B,EAKd1B,QALc,CAKL1B,QAAQ,CAACkD,SALJ,CAAjB;AAMA;;AACF,aAAKlD,QAAQ,CAACyC,GAAd;AACEO,UAAAA,cAAc,GAAGA,cAAc,CAACK,GAAf,CAAmB,MAAKzC,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4C6B,GAA/D,EAAoE3B,QAApE,CAA6E1B,QAAQ,CAACyC,GAAtF,CAAjB;AACA;;AACF,aAAKzC,QAAQ,CAACsD,OAAd;AACEL,UAAAA,SAAS,GAAGlD,SAAS,CAACuD,OAAtB;AACAN,UAAAA,cAAc,GAAGA,cAAc,CAACO,OAAf,CAAuB,MAAK3C,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4C+B,OAAnE,CAAjB;AACA;;AACF,aAAKvD,QAAQ,CAACwD,QAAd;AACEP,UAAAA,SAAS,GAAGlD,SAAS,CAACyD,QAAtB;AACAR,UAAAA,cAAc,GAAGA,cAAc,CAACpB,QAAf,CAAwB,MAAKhB,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4CI,QAApE,CAAjB;AACA;;AACF;AACE;AACA;AAtBJ;;AAyBA,UAAM6B,QAAQ,yCAAkCR,SAAlC,iDAAkFnB,SAAlF,4BAA6G4B,SAAS,CAClIV,cAAc,CAACW,KAAf,EADkI,CAAtH,CAAd;AAIA7D,MAAAA,OAAO,CAAC4C,IAAR,CAAae,QAAb;AACD,KAxKkB;;AAAA,UA0KXG,eA1KW,GA0KO,YAAM;AAC9B,UAAIX,SAAS,GAAG,MAAKrC,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsC0B,SAAtD;;AACA,cAAQ,MAAKrC,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IAAtC,CAA4CE,QAApD;AACE,aAAK1B,QAAQ,CAACyC,GAAd;AACEQ,UAAAA,SAAS,GAAGlD,SAAS,CAAC0C,GAAtB;AACA;;AACF,aAAKzC,QAAQ,CAACsD,OAAd;AACEL,UAAAA,SAAS,GAAGlD,SAAS,CAACuD,OAAtB;AACA;;AACF,aAAKtD,QAAQ,CAACwD,QAAd;AACEP,UAAAA,SAAS,GAAGlD,SAAS,CAACyD,QAAtB;AACA;AATJ;;AAYA,UAAMK,SAAyB,GAAG;AAChCC,QAAAA,gBAAgB,EAAE,MAAKlD,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCwB,UADxB;AAEhCgB,QAAAA,QAAQ,EAAE,MAAKnD,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCwC,QAFhB;AAGhCC,QAAAA,UAAU,EAAE,MAAKpD,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCyC,UAHlB;AAIhCC,QAAAA,WAAW,EAAE5D,KAAK,CAAC6D,QAAN,GAAiBC,KAAjB,CAAuBC,MAJJ;AAKhCnB,QAAAA,SAAS,EAAEA,SALqB;AAMhCzB,QAAAA,IAAI,EAAE,MAAKZ,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCC,IANZ;AAOhC6C,QAAAA,eAAe,EAAEhE,KAAK,CAAC6D,QAAN,GAAiBI,YAAjB,CAA8BD,eAPf;AAQhCE,QAAAA,aAAa,EAAE,MAAK3D,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCgD,aARrB;AAShCC,QAAAA,aAAa,EAAE,MAAK5D,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCiD,aATrB;AAUhCC,QAAAA,kBAAkB,EAAE,MAAK7D,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCkD,kBAV1B;AAWhCC,QAAAA,gBAAgB,EAAE,IAXc;AAYhCC,QAAAA,YAAY,EAAE,MAAK/D,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCoD;AAZpB,OAAlC,CAd8B,CA6B9B;;AACA7E,MAAAA,OAAO,CAAC4C,IAAR,CAAatC,0BAA0B,CAACyD,SAAD,CAAvC;AACD,KAzMkB;;AAEjB,UAAKhD,iBAAL,GAAyBzB,KAAK,CAACwF,SAAN,EAAzB;AACA,UAAKC,KAAL,GAAa;AAAEhC,MAAAA,WAAW,EAAE,KAAf;AAAsB7B,MAAAA,SAAS,EAAEJ,KAAK,CAACK,UAAN,CAAiBD;AAAlD,KAAb;AAHiB;AAIlB;;;;WAED,6BAAoB;AAClB,WAAKJ,KAAL,CAAWK,UAAX,CAAsB6D,EAAtB,CAAyB,cAAzB,EAAyC,KAAKhE,OAA9C;AACA,WAAKF,KAAL,CAAWK,UAAX,CAAsB6D,EAAtB,CAAyB,YAAzB,EAAuC,KAAKhE,OAA5C;AACD;;;WAED,gCAAuB;AACrB,WAAKF,KAAL,CAAWK,UAAX,CAAsB8D,cAAtB,CAAqC,cAArC,EAAqD,KAAKjE,OAA1D;AACA,WAAKF,KAAL,CAAWK,UAAX,CAAsB8D,cAAtB,CAAqC,YAArC,EAAmD,KAAKjE,OAAxD;AACD;;;WAMD,kBAAS;AAAA;;AACP,UAAMkE,gBAAgB,GAAG,cACvB,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,eAAlB;AAAkC,QAAA,OAAO,EAAE,KAAKlC,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADuB,eAIvB,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAC,eAAlB;AAAkC,QAAA,OAAO,EAAE,KAAKc,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJuB,CAAzB;AAQA,UAAMqB,QAA4B,GAAG,KAAKrE,KAAL,CAAWK,UAAX,CAAsBiE,cAAtB,GAAuC,IAA5E;AACA,UAAMC,UAA8B,GAAGF,QAAQ,GAAG,KAAKrE,KAAL,CAAWK,UAAX,CAAsBmE,aAAtB,GAAsC,IAAxF;AACA,UAAMC,aAAa,GACjBJ,QAAQ,GAAG,CAAX,GAAe1E,aAAa,CAAC4E,UAAD,EAAaF,QAAb,EAAuB;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAAvB,EAA8C;AAAEA,QAAAA,MAAM,EAAE;AAAV,OAA9C,CAA5B,GAAmG,SADrG;AAGA,0BACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAE5E,UAAAA,MAAM,EAAE;AAAV,SAAb;AAAiC,QAAA,EAAE,EAAE,eAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AACE,QAAA,MAAM,eAAE,oBAAC,WAAD;AAAa,UAAA,QAAQ,EAAE,KAAKiC,oBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADV;AAEE,QAAA,aAAa,EAAEqC,gBAFjB;AAGE,QAAA,OAAO,MAHT;AAIE,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWhC,WAJrB;AAKE,QAAA,QAAQ,EAAE,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,eAUE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAE0C,UAAAA,KAAK,EAAE;AAAT,SAAd;AAAiC,QAAA,YAAY,EAAC,IAA9C;AAAmD,QAAA,IAAI,EAAC,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,aADH,CADF,CAVF,CADF,eAiBE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,KAAK,EAAE;AAAE3E,UAAAA,MAAM,EAAE;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,cAAD;AACE,QAAA,cAAc,EAAE,IADlB;AAEE,QAAA,kBAAkB,EAChB,KAAKE,KAAL,CAAW4E,mBAAX,GAAiC,KAAK5E,KAAL,CAAW4E,mBAA5C,GAAkEhF,uBAHtE;AAKE,QAAA,SAAS,EAAE;AACTiF,UAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAW7D,SADZ;AAET0E,UAAAA,YAAY,EAAE,CAAC,CAAC,KAAK9E,KAAL,CAAWK,UAAX,CAAsByE,YAAxB,GAAuC,KAAK9E,KAAL,CAAWK,UAAX,CAAsByE,YAA7D,GAA4EC,SAFjF;AAGTC,UAAAA,OAAO,EAAE,KAAKhF,KAAL,CAAWK,UAAX,CAAsB2E,OAHtB;AAITC,UAAAA,SAAS,EAAE,KAAKjF,KAAL,CAAWK,UAAX,CAAsB4E,SAJxB;AAKTC,UAAAA,WAAW,EAAE,KAAKlF,KAAL,CAAWK,UAAX,CAAsBM,eAL1B;AAMTwE,UAAAA,SAAS,EAAE,KAAKnF,KAAL,CAAWK,UAAX,CAAsBiE;AANxB,SALb;AAaE,QAAA,eAAe,EAAE;AAAA,iBAAMS,SAAN;AAAA,SAbnB;AAcE,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWK,UAAX,CAAsBM,eAAtB,CAAsCyC,UAdpD;AAeE,QAAA,aAAa,EAAE,KAAKpD,KAAL,CAAWoF,WAf5B;AAgBE,QAAA,WAAW,EAAE,IAhBf;AAiBE,QAAA,SAAS,EAAE,KAAKpF,KAAL,CAAWqF,SAjBxB;AAkBE,QAAA,MAAM,EAAE9F,UAAU,CAAC+F,SAAX,EAlBV;AAmBE,QAAA,SAAS,EAAE,KAAKhF,aAnBlB;AAoBE,QAAA,GAAG,EAAE,aAAAiF,WAAW;AAAA,iBAAI,MAAI,CAACC,iBAAL,CAAuBD,WAAvB,CAAJ;AAAA,SApBlB;AAqBE,QAAA,eAAe,EAAE,CArBnB;AAsBE,QAAA,aAAa,EAAE,KAtBjB;AAuBE,QAAA,mBAAmB,EAAE,IAvBvB;AAwBE,QAAA,kBAAkB,EAAE,KAxBtB;AAyBE,QAAA,YAAY,EAAE,IAzBhB;AA0BE,QAAA,gBAAgB,EAAE,IA1BpB;AA2BE,QAAA,oBAAoB,EAAE,KA3BxB;AA4BE,QAAA,aAAa,EAAE,KA5BjB;AA6BE,QAAA,mBAAmB,EAAE,IA7BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAjBF,CADF;AAuDD;;;WAED,2BAA0BnD,cAA1B,EAA+C;AAC7C,WAAKnC,iBAAL,CAAuBoB,OAAvB,GAAiCe,cAAjC;AACD;;;;EAhGwC5D,KAAK,CAACiH,S;;SAA5B1F,a","sourcesContent":["import * as React from 'react';\nimport {\n  Card,\n  CardActions,\n  CardBody,\n  CardHead,\n  CardHeader,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Title\n} from '@patternfly/react-core';\nimport history from '../../app/History';\nimport GraphDataSource from '../../services/GraphDataSource';\nimport { DecoratedGraphElements, GraphType, NodeType } from '../../types/Graph';\nimport CytoscapeGraph, { GraphEdgeTapEvent, GraphNodeTapEvent } from './CytoscapeGraph';\nimport { CytoscapeGraphSelectorBuilder } from './CytoscapeGraphSelector';\nimport { DagreGraph } from './graphs/DagreGraph';\nimport { GraphUrlParams, makeNodeGraphUrlFromParams } from 'components/Nav/NavUtils';\nimport { store } from 'store/ConfigStore';\nimport { style } from 'typestyle';\nimport { toRangeString } from '../Time/Utils';\nimport { TimeInMilliseconds } from '../../types/Common';\n\nconst initGraphContainerStyle = style({ width: '100%', height: '100%' });\n\ntype MiniGraphCardProps = {\n  dataSource: GraphDataSource;\n  onEdgeTap?: (e: GraphEdgeTapEvent) => void;\n  mtlsEnabled: boolean;\n  graphContainerStyle?: string;\n};\n\ntype MiniGraphCardState = {\n  isKebabOpen: boolean;\n  graphData: DecoratedGraphElements;\n};\n\nexport default class MiniGraphCard extends React.Component<MiniGraphCardProps, MiniGraphCardState> {\n  private cytoscapeGraphRef: any;\n\n  constructor(props) {\n    super(props);\n    this.cytoscapeGraphRef = React.createRef();\n    this.state = { isKebabOpen: false, graphData: props.dataSource.graphData };\n  }\n\n  componentDidMount() {\n    this.props.dataSource.on('fetchSuccess', this.refresh);\n    this.props.dataSource.on('fetchError', this.refresh);\n  }\n\n  componentWillUnmount() {\n    this.props.dataSource.removeListener('fetchSuccess', this.refresh);\n    this.props.dataSource.removeListener('fetchError', this.refresh);\n  }\n\n  private refresh = () => {\n    this.setState({ graphData: this.props.dataSource.graphData });\n  };\n\n  render() {\n    const graphCardActions = [\n      <DropdownItem key=\"viewFullGraph\" onClick={this.onViewFullGraph}>\n        Show full graph\n      </DropdownItem>,\n      <DropdownItem key=\"viewNodeGraph\" onClick={this.onViewNodeGraph}>\n        Show node graph\n      </DropdownItem>\n    ];\n    const rangeEnd: TimeInMilliseconds = this.props.dataSource.graphTimestamp * 1000;\n    const rangeStart: TimeInMilliseconds = rangeEnd - this.props.dataSource.graphDuration * 1000;\n    const intervalTitle =\n      rangeEnd > 0 ? toRangeString(rangeStart, rangeEnd, { second: '2-digit' }, { second: '2-digit' }) : 'Loading';\n\n    return (\n      <Card style={{ height: '100%' }} id={'MiniGraphCard'}>\n        <CardHead>\n          <CardActions>\n            <Dropdown\n              toggle={<KebabToggle onToggle={this.onGraphActionsToggle} />}\n              dropdownItems={graphCardActions}\n              isPlain\n              isOpen={this.state.isKebabOpen}\n              position={'right'}\n            />\n          </CardActions>\n          <CardHeader>\n            <Title style={{ float: 'left' }} headingLevel=\"h5\" size=\"lg\">\n              {intervalTitle}\n            </Title>\n          </CardHeader>\n        </CardHead>\n        <CardBody>\n          <div style={{ height: '100%' }}>\n            <CytoscapeGraph\n              compressOnHide={true}\n              containerClassName={\n                this.props.graphContainerStyle ? this.props.graphContainerStyle : initGraphContainerStyle\n              }\n              graphData={{\n                elements: this.state.graphData,\n                errorMessage: !!this.props.dataSource.errorMessage ? this.props.dataSource.errorMessage : undefined,\n                isError: this.props.dataSource.isError,\n                isLoading: this.props.dataSource.isLoading,\n                fetchParams: this.props.dataSource.fetchParameters,\n                timestamp: this.props.dataSource.graphTimestamp\n              }}\n              toggleIdleNodes={() => undefined}\n              edgeLabels={this.props.dataSource.fetchParameters.edgeLabels}\n              isMTLSEnabled={this.props.mtlsEnabled}\n              isMiniGraph={true}\n              onEdgeTap={this.props.onEdgeTap}\n              layout={DagreGraph.getLayout()}\n              onNodeTap={this.handleNodeTap}\n              ref={refInstance => this.setCytoscapeGraph(refInstance)}\n              refreshInterval={0}\n              showIdleEdges={false}\n              showMissingSidecars={true}\n              showOperationNodes={false}\n              showSecurity={true}\n              showServiceNodes={true}\n              showTrafficAnimation={false}\n              showIdleNodes={false}\n              showVirtualServices={true}\n            />\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  private setCytoscapeGraph(cytoscapeGraph: any) {\n    this.cytoscapeGraphRef.current = cytoscapeGraph;\n  }\n\n  private handleNodeTap = (e: GraphNodeTapEvent) => {\n    // Do nothing on inaccessible nodes or service entry nodes\n    if (e.isInaccessible || e.isServiceEntry) {\n      return;\n    }\n\n    // If we are already on the details page of the tapped node, do nothing.\n    const displayedNode = this.props.dataSource.fetchParameters.node;\n    // Minigraph will consider box nodes as app\n    const eNodeType = e.nodeType === 'box' && e.isBox ? e.isBox : e.workload ? 'workload' : e.nodeType;\n    const isSameResource =\n      displayedNode?.namespace.name === e.namespace &&\n      displayedNode.nodeType === eNodeType &&\n      displayedNode[displayedNode.nodeType] === e[eNodeType];\n\n    if (isSameResource) {\n      return;\n    }\n\n    // unselect the currently selected node\n    const cy = this.cytoscapeGraphRef.current.getCy();\n    if (cy) {\n      cy.$(':selected').selectify().unselect().unselectify();\n    }\n\n    // Redirect to the details page of the tapped node.\n    let resource = e[eNodeType];\n    let resourceType: string = eNodeType === NodeType.APP ? 'application' : eNodeType;\n\n    history.push(`/namespaces/${e.namespace}/${resourceType}s/${resource}`);\n  };\n\n  private onGraphActionsToggle = (isOpen: boolean) => {\n    this.setState({\n      isKebabOpen: isOpen\n    });\n  };\n\n  private onViewFullGraph = () => {\n    const namespace = this.props.dataSource.fetchParameters.namespaces[0].name;\n    let cytoscapeGraph = new CytoscapeGraphSelectorBuilder().namespace(namespace);\n    let graphType: GraphType = GraphType.APP;\n\n    switch (this.props.dataSource.fetchParameters.node!.nodeType) {\n      case NodeType.AGGREGATE:\n        cytoscapeGraph = cytoscapeGraph\n          .aggregate(\n            this.props.dataSource.fetchParameters.node!.aggregate!,\n            this.props.dataSource.fetchParameters.node!.aggregateValue!\n          )\n          .nodeType(NodeType.AGGREGATE);\n        break;\n      case NodeType.APP:\n        cytoscapeGraph = cytoscapeGraph.app(this.props.dataSource.fetchParameters.node!.app).nodeType(NodeType.APP);\n        break;\n      case NodeType.SERVICE:\n        graphType = GraphType.SERVICE;\n        cytoscapeGraph = cytoscapeGraph.service(this.props.dataSource.fetchParameters.node!.service);\n        break;\n      case NodeType.WORKLOAD:\n        graphType = GraphType.WORKLOAD;\n        cytoscapeGraph = cytoscapeGraph.workload(this.props.dataSource.fetchParameters.node!.workload);\n        break;\n      default:\n        // NodeType.BOX is n/a\n        break;\n    }\n\n    const graphUrl = `/graph/namespaces?graphType=${graphType}&injectServiceNodes=true&namespaces=${namespace}&focusSelector=${encodeURI(\n      cytoscapeGraph.build()\n    )}`;\n\n    history.push(graphUrl);\n  };\n\n  private onViewNodeGraph = () => {\n    let graphType = this.props.dataSource.fetchParameters.graphType;\n    switch (this.props.dataSource.fetchParameters.node!.nodeType) {\n      case NodeType.APP:\n        graphType = GraphType.APP;\n        break;\n      case NodeType.SERVICE:\n        graphType = GraphType.SERVICE;\n        break;\n      case NodeType.WORKLOAD:\n        graphType = GraphType.WORKLOAD;\n        break;\n    }\n\n    const urlParams: GraphUrlParams = {\n      activeNamespaces: this.props.dataSource.fetchParameters.namespaces,\n      duration: this.props.dataSource.fetchParameters.duration,\n      edgeLabels: this.props.dataSource.fetchParameters.edgeLabels,\n      graphLayout: store.getState().graph.layout,\n      graphType: graphType,\n      node: this.props.dataSource.fetchParameters.node!,\n      refreshInterval: store.getState().userSettings.refreshInterval,\n      showIdleEdges: this.props.dataSource.fetchParameters.showIdleEdges,\n      showIdleNodes: this.props.dataSource.fetchParameters.showIdleNodes,\n      showOperationNodes: this.props.dataSource.fetchParameters.showOperationNodes,\n      showServiceNodes: true,\n      trafficRates: this.props.dataSource.fetchParameters.trafficRates\n    };\n\n    // To ensure updated components get the updated URL, update the URL first and then the state\n    history.push(makeNodeGraphUrlFromParams(urlParams));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
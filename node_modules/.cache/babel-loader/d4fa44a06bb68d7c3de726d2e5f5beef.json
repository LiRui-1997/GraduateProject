{"ast":null,"code":"import _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _this = this,\n    _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphPage.tsx\";\n\nimport * as React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport FlexView from 'react-flexview';\nimport { style } from 'typestyle';\nimport history from '../../app/History';\nimport { MessageType } from '../../types/MessageCenter';\nimport { EdgeLabelMode, NodeType, UNKNOWN, BoxByType } from '../../types/Graph';\nimport { computePrometheusRateParams } from '../../services/Prometheus';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport CytoscapeGraph from '../../components/CytoscapeGraph/CytoscapeGraph';\nimport CytoscapeToolbarContainer from '../../components/CytoscapeGraph/CytoscapeToolbar';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\nimport { makeNodeGraphUrlFromParams } from '../../components/Nav/NavUtils'; // import GraphToolbarContainer from './GraphToolbar/GraphToolbar';\n\nimport GraphLegend from './GraphLegend';\nimport EmptyGraphLayout from '../../components/CytoscapeGraph/EmptyGraphLayout';\nimport SummaryPanel from './SummaryPanel';\nimport { activeNamespacesSelector, durationSelector, edgeLabelsSelector, graphTypeSelector, lastRefreshAtSelector, meshWideMTLSEnabledSelector, refreshIntervalSelector, replayActiveSelector, replayQueryTimeSelector, trafficRatesSelector } from '../../store/Selectors';\nimport { GraphActions } from '../../actions/GraphActions';\nimport { GraphToolbarActions } from '../../actions/GraphToolbarActions';\nimport { NodeContextMenuContainer } from '../../components/CytoscapeGraph/ContextMenu/NodeContextMenu';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { TourActions } from 'actions/TourActions';\nimport { arrayEquals } from 'utils/Common';\nimport { isKioskMode, getFocusSelector, unsetFocusSelector, getTraceId } from 'utils/SearchParamUtils';\nimport { Badge, Chip } from '@patternfly/react-core';\nimport { toRangeString } from 'components/Time/Utils';\nimport { replayBorder } from 'components/Time/Replay';\nimport GraphDataSource, { EMPTY_GRAPH_DATA } from '../../services/GraphDataSource';\nimport { NamespaceActions } from '../../actions/NamespaceAction';\nimport GraphThunkActions from '../../actions/GraphThunkActions';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions'; // import GraphTour from 'pages/Graph/GraphHelpTour';\n// import { getNextTourStop, TourInfo } from 'components/Tour/TourStop';\n\nvar NUMBER_OF_DATAPOINTS = 30;\nvar containerStyle = style({\n  minHeight: '350px',\n  // TODO: try flexbox to remove this calc\n  height: 'calc(100vh - 113px)' // View height minus top bar height minus secondary masthead\n\n});\nvar kioskContainerStyle = style({\n  minHeight: '350px',\n  height: 'calc(100vh - 10px)' // View height minus top bar height\n\n});\nvar cytoscapeGraphContainerStyle = style({\n  flex: '1',\n  minWidth: '350px',\n  zIndex: 0,\n  paddingRight: '5px'\n});\nvar cytoscapeGraphWrapperDivStyle = style({\n  position: 'relative',\n  backgroundColor: PFColors.Black150\n});\nvar cytoscapeToolbarWrapperDivStyle = style({\n  position: 'absolute',\n  bottom: '5px',\n  zIndex: 2,\n  borderStyle: 'hidden'\n});\nvar graphTimeRangeDivStyle = style({\n  position: 'absolute',\n  top: '10px',\n  left: '10px',\n  width: 'auto',\n  zIndex: 2,\n  backgroundColor: PFColors.White\n});\nvar whiteBackground = style({\n  backgroundColor: PFColors.White\n});\nvar replayBackground = style({\n  backgroundColor: PFColors.Replay\n});\nvar graphLegendStyle = style({\n  right: '0',\n  bottom: '10px',\n  position: 'absolute',\n  overflow: 'hidden'\n});\n\nvar GraphErrorBoundaryFallback = function GraphErrorBoundaryFallback() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cytoscapeGraphContainerStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EmptyGraphLayout, {\n    isError: true,\n    isMiniGraph: false,\n    namespaces: [],\n    showIdleNodes: false,\n    toggleIdleNodes: function toggleIdleNodes() {\n      return undefined;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport var GraphPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(GraphPage, _React$Component);\n\n  var _super = _createSuper(GraphPage);\n\n  function GraphPage(props) {\n    var _this2;\n\n    _classCallCheck(this, GraphPage);\n\n    _this2 = _super.call(this, props);\n    _this2.errorBoundaryRef = void 0;\n    _this2.cytoscapeGraphRef = void 0;\n    _this2.focusSelector = void 0;\n    _this2.graphDataSource = void 0;\n\n    _this2.handleEmptyGraphAction = function () {\n      _this2.loadGraphDataFromBackend();\n    };\n\n    _this2.handleGraphDataSourceSuccess = function (graphTimestamp, _, elements, fetchParams) {\n      _this2.setState({\n        graphData: {\n          elements: elements,\n          isLoading: false,\n          fetchParams: fetchParams,\n          timestamp: graphTimestamp * 1000\n        }\n      });\n\n      _this2.props.setGraphDefinition(_this2.graphDataSource.graphDefinition);\n    };\n\n    _this2.handleGraphDataSourceError = function (errorMessage, fetchParams) {\n      _this2.setState({\n        graphData: {\n          elements: {\n            edges: [],\n            nodes: []\n          },\n          errorMessage: !!errorMessage ? errorMessage : undefined,\n          isError: true,\n          isLoading: false,\n          fetchParams: fetchParams,\n          timestamp: Date.now()\n        }\n      });\n    };\n\n    _this2.handleGraphDataSourceEmpty = function (fetchParams) {\n      _this2.setState({\n        graphData: {\n          elements: EMPTY_GRAPH_DATA,\n          isLoading: false,\n          fetchParams: fetchParams,\n          timestamp: Date.now()\n        }\n      });\n    };\n\n    _this2.handleGraphDataSourceStart = function (isPreviousDataInvalid, fetchParams) {\n      _this2.setState({\n        graphData: {\n          elements: isPreviousDataInvalid ? EMPTY_GRAPH_DATA : _this2.state.graphData.elements,\n          fetchParams: fetchParams,\n          isLoading: true,\n          timestamp: isPreviousDataInvalid ? Date.now() : _this2.state.graphData.timestamp\n        }\n      });\n    };\n\n    _this2.handleDoubleTap = function (event) {\n      if (event.isInaccessible || event.isServiceEntry || event.nodeType === NodeType.BOX && event.isBox !== BoxByType.APP) {\n        return;\n      }\n\n      if (event.hasMissingSC) {\n        AlertUtils.add(\"A node with a missing sidecar provides no node-specific telemetry and can not provide a node detail graph.\", undefined, MessageType.WARNING);\n        return;\n      }\n\n      if (event.isIdle) {\n        AlertUtils.add(\"An idle node has no node-specific traffic and can not provide a node detail graph.\", undefined, MessageType.WARNING);\n        return;\n      }\n\n      if (event.isOutside && _this2.props.setActiveNamespaces) {\n        _this2.props.setActiveNamespaces([{\n          name: event.namespace\n        }]);\n\n        return;\n      } // If graph is in the drilled-down view, there is the chance that the user\n      // double clicked the same node as in the full graph. Determine if this is\n      // the case.\n\n\n      var sameNode = false;\n      var node = _this2.state.graphData.fetchParams.node;\n\n      if (node) {\n        sameNode = node && node.nodeType === event.nodeType;\n\n        switch (event.nodeType) {\n          case NodeType.AGGREGATE:\n            sameNode = sameNode && node.aggregate === event.aggregate;\n            sameNode = sameNode && node.aggregateValue === event.aggregateValue;\n            break;\n\n          case NodeType.APP:\n            sameNode = sameNode && node.app === event.app;\n            sameNode = sameNode && node.version === event.version;\n            break;\n\n          case NodeType.BOX:\n            // we only support node graphs on app boxes, so assume app box\n            sameNode = sameNode && node.app === event.app;\n            break;\n\n          case NodeType.SERVICE:\n            sameNode = sameNode && node.service === event.service;\n            break;\n\n          case NodeType.WORKLOAD:\n            sameNode = sameNode && node.workload === event.workload;\n            break;\n\n          default:\n            sameNode = true;\n          // don't navigate to unsupported node type\n        }\n      }\n\n      var targetNode = _objectSpread(_objectSpread({}, event), {}, {\n        namespace: {\n          name: event.namespace\n        }\n      }); // If, while in the drilled-down graph, the user double clicked the same\n      // node as in the main graph, it doesn't make sense to re-load the same view.\n      // Instead, assume that the user wants more details for the node and do a\n      // redirect to the details page.\n\n\n      if (sameNode) {\n        _this2.handleDoubleTapSameNode(targetNode);\n\n        return;\n      } // In case user didn't double-tap the same node, or if graph is in\n      // full graph mode, redirect to the drilled-down graph of the chosen node.\n\n\n      var urlParams = {\n        activeNamespaces: _this2.state.graphData.fetchParams.namespaces,\n        duration: _this2.state.graphData.fetchParams.duration,\n        edgeLabels: _this2.state.graphData.fetchParams.edgeLabels,\n        graphLayout: _this2.props.layout,\n        graphType: _this2.state.graphData.fetchParams.graphType,\n        node: targetNode,\n        refreshInterval: _this2.props.refreshInterval,\n        showIdleEdges: _this2.props.showIdleEdges,\n        showIdleNodes: _this2.props.showIdleNodes,\n        showOperationNodes: _this2.props.showOperationNodes,\n        showServiceNodes: _this2.props.showServiceNodes,\n        trafficRates: _this2.state.graphData.fetchParams.trafficRates\n      }; // To ensure updated components get the updated URL, update the URL first and then the state\n\n      history.push(makeNodeGraphUrlFromParams(urlParams));\n    };\n\n    _this2.handleDoubleTapSameNode = function (targetNode) {\n      var makeAppDetailsPageUrl = function makeAppDetailsPageUrl(namespace, nodeType, name) {\n        return \"/namespaces/\".concat(namespace, \"/\").concat(nodeType, \"/\").concat(name);\n      };\n\n      var nodeType = targetNode.nodeType;\n      var urlNodeType = targetNode.nodeType + 's';\n      var name = targetNode.app;\n\n      if (nodeType === 'service') {\n        name = targetNode.service;\n      } else if (nodeType === 'workload') {\n        name = targetNode.workload;\n      } else {\n        urlNodeType = 'applications';\n      }\n\n      var detailsPageUrl = makeAppDetailsPageUrl(targetNode.namespace.name, urlNodeType, name);\n      history.push(detailsPageUrl);\n      return;\n    };\n\n    _this2.loadGraphDataFromBackend = function () {\n      var queryTime = !!_this2.props.replayQueryTime ? _this2.props.replayQueryTime : undefined;\n\n      _this2.graphDataSource.fetchGraphData({\n        boxByCluster: _this2.props.boxByCluster,\n        boxByNamespace: _this2.props.boxByNamespace,\n        duration: _this2.props.duration,\n        edgeLabels: _this2.props.edgeLabels,\n        graphType: _this2.props.graphType,\n        includeHealth: true,\n        injectServiceNodes: _this2.props.showServiceNodes,\n        namespaces: _this2.props.node ? [_this2.props.node.namespace] : _this2.props.activeNamespaces,\n        node: _this2.props.node,\n        queryTime: queryTime,\n        showIdleEdges: _this2.props.showIdleEdges,\n        showIdleNodes: _this2.props.showIdleNodes,\n        showOperationNodes: _this2.props.showOperationNodes,\n        showSecurity: _this2.props.showSecurity,\n        trafficRates: _this2.props.trafficRates\n      });\n    };\n\n    _this2.notifyError = function (error, _componentStack) {\n      AlertUtils.add(\"There was an error when rendering the graph: \".concat(error.message, \", please try a different layout\"));\n    };\n\n    _this2.displayTimeRange = function () {\n      var rangeEnd = _this2.state.graphData.timestamp;\n      var rangeStart = rangeEnd - _this2.props.duration * 1000;\n      return toRangeString(rangeStart, rangeEnd, {\n        second: '2-digit'\n      }, {\n        second: '2-digit'\n      });\n    };\n\n    _this2.errorBoundaryRef = React.createRef();\n    _this2.cytoscapeGraphRef = React.createRef();\n    _this2.focusSelector = getFocusSelector();\n    _this2.graphDataSource = new GraphDataSource();\n    _this2.state = {\n      graphData: {\n        elements: {\n          edges: [],\n          nodes: []\n        },\n        fetchParams: _this2.graphDataSource.fetchParameters,\n        isLoading: true,\n        timestamp: 0\n      }\n    };\n    return _this2;\n  }\n\n  _createClass(GraphPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$trace;\n\n      // Connect to graph data source updates\n      this.graphDataSource.on('loadStart', this.handleGraphDataSourceStart);\n      this.graphDataSource.on('fetchError', this.handleGraphDataSourceError);\n      this.graphDataSource.on('fetchSuccess', this.handleGraphDataSourceSuccess);\n      this.graphDataSource.on('emptyNamespaces', this.handleGraphDataSourceEmpty); // Let URL override current redux state at mount time.  We usually do this in\n      // the constructor but it seems to work better here when the initial URL\n      // is for a node graph.  When setting the node here it is available for the\n      // loadGraphFromBackend() call.\n\n      var urlNode = GraphPage.getNodeParamsFromProps(this.props);\n\n      if (GraphPage.isNodeChanged(urlNode, this.props.node)) {\n        // add the node namespace if necessary, but don't lose previously selected namespaces\n        if (urlNode && !this.props.activeNamespaces.map(function (ns) {\n          return ns.name;\n        }).includes(urlNode.namespace.name)) {\n          this.props.setActiveNamespaces([urlNode.namespace].concat(_toConsumableArray(this.props.activeNamespaces)));\n        }\n\n        this.props.setNode(urlNode);\n      }\n\n      var urlTrace = getTraceId();\n\n      if (urlTrace !== ((_this$props$trace = this.props.trace) === null || _this$props$trace === void 0 ? void 0 : _this$props$trace.traceID)) {\n        this.props.setTraceId(urlTrace);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prev) {\n      var curr = this.props; // Ensure we initialize the graph. We wait for the first update so that\n      // the toolbar can render and ensure all redux props are updated with URL\n      // settings. That in turn ensures the initial fetchParams are correct.\n\n      var isInitialLoad = !this.state.graphData.timestamp;\n      var activeNamespacesChanged = !arrayEquals(prev.activeNamespaces, curr.activeNamespaces, function (n1, n2) {\n        return n1.name === n2.name;\n      }); // Ensure we initialize the graph when there is a change to activeNamespaces.\n\n      if (activeNamespacesChanged) {\n        this.props.onNamespaceChange();\n      }\n\n      if (isInitialLoad || activeNamespacesChanged || prev.boxByCluster !== curr.boxByCluster || prev.boxByNamespace !== curr.boxByNamespace || prev.duration !== curr.duration || prev.edgeLabels !== curr.edgeLabels && ( // test for edge labels that invoke graph gen appenders\n      curr.edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP) || curr.edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP)) || prev.graphType !== curr.graphType || prev.lastRefreshAt !== curr.lastRefreshAt && curr.replayQueryTime === 0 || prev.replayActive !== curr.replayActive && !curr.replayActive || prev.replayQueryTime !== curr.replayQueryTime || prev.showIdleEdges !== curr.showIdleEdges || prev.showOperationNodes !== curr.showOperationNodes || prev.showServiceNodes !== curr.showServiceNodes || prev.showSecurity !== curr.showSecurity || prev.showIdleNodes !== curr.showIdleNodes || prev.trafficRates !== curr.trafficRates || GraphPage.isNodeChanged(prev.node, curr.node)) {\n        this.loadGraphDataFromBackend();\n      }\n\n      if (!!this.focusSelector) {\n        this.focusSelector = undefined;\n        unsetFocusSelector();\n      }\n\n      if (prev.layout.name !== curr.layout.name || activeNamespacesChanged) {\n        this.errorBoundaryRef.current.cleanError();\n      }\n\n      if (curr.showLegend && this.props.activeTour) {\n        this.props.endTour();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect from graph data source updates\n      this.graphDataSource.removeListener('loadStart', this.handleGraphDataSourceStart);\n      this.graphDataSource.removeListener('fetchError', this.handleGraphDataSourceError);\n      this.graphDataSource.removeListener('fetchSuccess', this.handleGraphDataSourceSuccess);\n      this.graphDataSource.removeListener('emptyNamespaces', this.handleGraphDataSourceEmpty);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var conStyle = containerStyle;\n\n      if (isKioskMode()) {\n        conStyle = kioskContainerStyle;\n      }\n\n      var isEmpty = !(this.state.graphData.elements.nodes && Object.keys(this.state.graphData.elements.nodes).length > 0);\n      var isReady = !(isEmpty || this.state.graphData.isError);\n      var isReplayReady = this.props.replayActive && !!this.props.replayQueryTime;\n      var cy = this.cytoscapeGraphRef && this.cytoscapeGraphRef.current ? this.cytoscapeGraphRef.current.getCy() : null;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FlexView, {\n        className: conStyle,\n        column: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FlexView, {\n        grow: true,\n        className: \"\".concat(cytoscapeGraphWrapperDivStyle, \" \").concat(this.props.replayActive && replayBorder),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ErrorBoundary, {\n        ref: this.errorBoundaryRef,\n        onError: this.notifyError,\n        fallBackComponent: /*#__PURE__*/React.createElement(GraphErrorBoundaryFallback, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 34\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }\n      }, this.props.showLegend && /*#__PURE__*/React.createElement(GraphLegend, {\n        className: graphLegendStyle,\n        isMTLSEnabled: this.props.mtlsEnabled,\n        closeLegend: this.props.toggleLegend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 17\n        }\n      }), isReady && /*#__PURE__*/React.createElement(Chip, {\n        className: \"\".concat(graphTimeRangeDivStyle, \" \").concat(this.props.replayActive ? replayBackground : whiteBackground),\n        isOverflowChip: true,\n        isReadOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 17\n        }\n      }, this.props.replayActive && /*#__PURE__*/React.createElement(Badge, {\n        style: {\n          marginRight: '4px'\n        },\n        isRead: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 47\n        }\n      }, \"Replay\"), !isReplayReady && this.props.replayActive && \"click Play to start\", !isReplayReady && !this.props.replayActive && \"\".concat(this.displayTimeRange()), isReplayReady && \"\".concat(this.displayTimeRange())), (!this.props.replayActive || isReplayReady) && /*#__PURE__*/React.createElement(CytoscapeGraph, Object.assign({\n        containerClassName: cytoscapeGraphContainerStyle,\n        contextMenuGroupComponent: NodeContextMenuContainer,\n        contextMenuNodeComponent: NodeContextMenuContainer,\n        focusSelector: this.focusSelector,\n        graphData: this.state.graphData,\n        isMTLSEnabled: this.props.mtlsEnabled,\n        onEmptyGraphAction: this.handleEmptyGraphAction,\n        onNodeDoubleTap: this.handleDoubleTap,\n        ref: function ref(refInstance) {\n          return _this3.setCytoscapeGraph(refInstance);\n        }\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 17\n        }\n      })), isReady && /*#__PURE__*/React.createElement(\"div\", {\n        className: cytoscapeToolbarWrapperDivStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CytoscapeToolbarContainer, {\n        cytoscapeGraphRef: this.cytoscapeGraphRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 19\n        }\n      }))), this.props.summaryData && /*#__PURE__*/React.createElement(SummaryPanel, Object.assign({\n        data: this.props.summaryData,\n        duration: this.state.graphData.fetchParams.duration,\n        graphType: this.props.graphType,\n        injectServiceNodes: this.props.showServiceNodes,\n        isPageVisible: this.props.isPageVisible,\n        namespaces: this.props.activeNamespaces,\n        queryTime: this.state.graphData.timestamp / 1000,\n        trafficRates: this.props.trafficRates\n      }, computePrometheusRateParams(this.props.duration, NUMBER_OF_DATAPOINTS), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }, {\n    key: \"setCytoscapeGraph\",\n    value: // private toggleHelp = () => {\n    //   if (this.props.showLegend) {\n    //     this.props.toggleLegend();\n    //   }\n    //   if (this.props.activeTour) {\n    //     this.props.endTour();\n    //   } else {\n    //     const firstStop = getNextTourStop(GraphTour, -1, 'forward');\n    //     this.props.startTour({ info: GraphTour, stop: firstStop });\n    //   }\n    // };\n    function setCytoscapeGraph(cytoscapeGraph) {\n      this.cytoscapeGraphRef.current = cytoscapeGraph;\n    }\n  }], [{\n    key: \"getNodeParamsFromProps\",\n    value: function getNodeParamsFromProps(props) {\n      var aggregate = props.match.params.aggregate;\n      var aggregateOk = aggregate && aggregate !== UNKNOWN;\n      var aggregateValue = props.match.params.aggregateValue;\n      var aggregateValueOk = aggregateValue && aggregateValue !== UNKNOWN;\n      var app = props.match.params.app;\n      var appOk = app && app !== UNKNOWN;\n      var namespace = props.match.params.namespace;\n      var namespaceOk = namespace && namespace !== UNKNOWN;\n      var service = props.match.params.service;\n      var serviceOk = service && service !== UNKNOWN;\n      var workload = props.match.params.workload;\n      var workloadOk = workload && workload !== UNKNOWN;\n\n      if (!aggregateOk && !aggregateValueOk && !appOk && !namespaceOk && !serviceOk && !workloadOk) {\n        // @ts-ignore\n        return;\n      }\n\n      var nodeType;\n      var version;\n\n      if (aggregateOk) {\n        nodeType = NodeType.AGGREGATE;\n        version = '';\n      } else if (appOk || workloadOk) {\n        nodeType = appOk ? NodeType.APP : NodeType.WORKLOAD;\n        version = props.match.params.version;\n      } else {\n        nodeType = NodeType.SERVICE;\n        version = '';\n      }\n\n      return {\n        aggregate: aggregate,\n        aggregateValue: aggregateValue,\n        app: app,\n        namespace: {\n          name: namespace\n        },\n        nodeType: nodeType,\n        service: service,\n        version: version,\n        workload: workload\n      };\n    }\n  }, {\n    key: \"isNodeChanged\",\n    value: function isNodeChanged(prevNode, node) {\n      if (prevNode === node) {\n        return false;\n      }\n\n      if (prevNode && !node || !prevNode && node) {\n        return true;\n      }\n\n      if (prevNode && node) {\n        var nodeAggregateHasChanged = prevNode.aggregate !== node.aggregate || prevNode.aggregateValue !== node.aggregateValue;\n        var nodeAppHasChanged = prevNode.app !== node.app;\n        var nodeServiceHasChanged = prevNode.service !== node.service;\n        var nodeVersionHasChanged = prevNode.version !== node.version;\n        var nodeTypeHasChanged = prevNode.nodeType !== node.nodeType;\n        var nodeWorkloadHasChanged = prevNode.workload !== node.workload;\n        return nodeAggregateHasChanged || nodeAppHasChanged || nodeServiceHasChanged || nodeVersionHasChanged || nodeWorkloadHasChanged || nodeTypeHasChanged;\n      }\n\n      return false;\n    }\n  }]);\n\n  return GraphPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$jaegerState;\n\n  return {\n    activeNamespaces: activeNamespacesSelector(state),\n    activeTour: state.tourState.activeTour,\n    boxByCluster: state.graph.toolbarState.boxByCluster,\n    boxByNamespace: state.graph.toolbarState.boxByNamespace,\n    compressOnHide: state.graph.toolbarState.compressOnHide,\n    duration: durationSelector(state),\n    edgeLabels: edgeLabelsSelector(state),\n    graphType: graphTypeSelector(state),\n    isPageVisible: state.globalState.isPageVisible,\n    lastRefreshAt: lastRefreshAtSelector(state),\n    layout: state.graph.layout,\n    mtlsEnabled: meshWideMTLSEnabledSelector(state),\n    node: state.graph.node,\n    refreshInterval: refreshIntervalSelector(state),\n    replayActive: replayActiveSelector(state),\n    replayQueryTime: replayQueryTimeSelector(state),\n    showIdleEdges: state.graph.toolbarState.showIdleEdges,\n    showIdleNodes: state.graph.toolbarState.showIdleNodes,\n    showLegend: state.graph.toolbarState.showLegend,\n    showMissingSidecars: state.graph.toolbarState.showMissingSidecars,\n    showOperationNodes: state.graph.toolbarState.showOperationNodes,\n    showSecurity: state.graph.toolbarState.showSecurity,\n    showServiceNodes: state.graph.toolbarState.showServiceNodes,\n    showTrafficAnimation: state.graph.toolbarState.showTrafficAnimation,\n    showVirtualServices: state.graph.toolbarState.showVirtualServices,\n    summaryData: state.graph.summaryData,\n    trace: (_state$jaegerState = state.jaegerState) === null || _state$jaegerState === void 0 ? void 0 : _state$jaegerState.selectedTrace,\n    trafficRates: trafficRatesSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    endTour: bindActionCreators(TourActions.endTour, dispatch),\n    onNamespaceChange: bindActionCreators(GraphActions.onNamespaceChange, dispatch),\n    onReady: function onReady(cy) {\n      return dispatch(GraphThunkActions.graphReady(cy));\n    },\n    setActiveNamespaces: function setActiveNamespaces(namespaces) {\n      return dispatch(NamespaceActions.setActiveNamespaces(namespaces));\n    },\n    setGraphDefinition: bindActionCreators(GraphActions.setGraphDefinition, dispatch),\n    setNode: bindActionCreators(GraphActions.setNode, dispatch),\n    setTraceId: function setTraceId(traceId) {\n      return dispatch(JaegerThunkActions.setTraceId(traceId));\n    },\n    setUpdateTime: function setUpdateTime(val) {\n      return dispatch(GraphActions.setUpdateTime(val));\n    },\n    startTour: bindActionCreators(TourActions.startTour, dispatch),\n    toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch),\n    toggleLegend: bindActionCreators(GraphToolbarActions.toggleLegend, dispatch),\n    updateSummary: function updateSummary(event) {\n      return dispatch(GraphActions.updateSummary(event));\n    }\n  };\n};\n\nvar GraphPageContainer = connect(mapStateToProps, mapDispatchToProps)(GraphPage);\nexport default GraphPageContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphPage.tsx"],"names":["React","bindActionCreators","connect","FlexView","style","history","MessageType","EdgeLabelMode","NodeType","UNKNOWN","BoxByType","computePrometheusRateParams","AlertUtils","CytoscapeGraph","CytoscapeToolbarContainer","ErrorBoundary","makeNodeGraphUrlFromParams","GraphLegend","EmptyGraphLayout","SummaryPanel","activeNamespacesSelector","durationSelector","edgeLabelsSelector","graphTypeSelector","lastRefreshAtSelector","meshWideMTLSEnabledSelector","refreshIntervalSelector","replayActiveSelector","replayQueryTimeSelector","trafficRatesSelector","GraphActions","GraphToolbarActions","NodeContextMenuContainer","PFColors","TourActions","arrayEquals","isKioskMode","getFocusSelector","unsetFocusSelector","getTraceId","Badge","Chip","toRangeString","replayBorder","GraphDataSource","EMPTY_GRAPH_DATA","NamespaceActions","GraphThunkActions","JaegerThunkActions","NUMBER_OF_DATAPOINTS","containerStyle","minHeight","height","kioskContainerStyle","cytoscapeGraphContainerStyle","flex","minWidth","zIndex","paddingRight","cytoscapeGraphWrapperDivStyle","position","backgroundColor","Black150","cytoscapeToolbarWrapperDivStyle","bottom","borderStyle","graphTimeRangeDivStyle","top","left","width","White","whiteBackground","replayBackground","Replay","graphLegendStyle","right","overflow","GraphErrorBoundaryFallback","undefined","GraphPage","props","errorBoundaryRef","cytoscapeGraphRef","focusSelector","graphDataSource","handleEmptyGraphAction","loadGraphDataFromBackend","handleGraphDataSourceSuccess","graphTimestamp","_","elements","fetchParams","setState","graphData","isLoading","timestamp","setGraphDefinition","graphDefinition","handleGraphDataSourceError","errorMessage","edges","nodes","isError","Date","now","handleGraphDataSourceEmpty","handleGraphDataSourceStart","isPreviousDataInvalid","state","handleDoubleTap","event","isInaccessible","isServiceEntry","nodeType","BOX","isBox","APP","hasMissingSC","add","WARNING","isIdle","isOutside","setActiveNamespaces","name","namespace","sameNode","node","AGGREGATE","aggregate","aggregateValue","app","version","SERVICE","service","WORKLOAD","workload","targetNode","handleDoubleTapSameNode","urlParams","activeNamespaces","namespaces","duration","edgeLabels","graphLayout","layout","graphType","refreshInterval","showIdleEdges","showIdleNodes","showOperationNodes","showServiceNodes","trafficRates","push","makeAppDetailsPageUrl","urlNodeType","detailsPageUrl","queryTime","replayQueryTime","fetchGraphData","boxByCluster","boxByNamespace","includeHealth","injectServiceNodes","showSecurity","notifyError","error","_componentStack","message","displayTimeRange","rangeEnd","rangeStart","second","createRef","fetchParameters","on","urlNode","getNodeParamsFromProps","isNodeChanged","map","ns","includes","setNode","urlTrace","trace","traceID","setTraceId","prev","curr","isInitialLoad","activeNamespacesChanged","n1","n2","onNamespaceChange","RESPONSE_TIME_GROUP","THROUGHPUT_GROUP","lastRefreshAt","replayActive","current","cleanError","showLegend","activeTour","endTour","removeListener","conStyle","isEmpty","Object","keys","length","isReady","isReplayReady","cy","getCy","mtlsEnabled","toggleLegend","marginRight","refInstance","setCytoscapeGraph","summaryData","isPageVisible","cytoscapeGraph","match","params","aggregateOk","aggregateValueOk","appOk","namespaceOk","serviceOk","workloadOk","prevNode","nodeAggregateHasChanged","nodeAppHasChanged","nodeServiceHasChanged","nodeVersionHasChanged","nodeTypeHasChanged","nodeWorkloadHasChanged","Component","mapStateToProps","tourState","graph","toolbarState","compressOnHide","globalState","showMissingSidecars","showTrafficAnimation","showVirtualServices","jaegerState","selectedTrace","mapDispatchToProps","dispatch","onReady","graphReady","traceId","setUpdateTime","val","startTour","toggleIdleNodes","updateSummary","GraphPageContainer"],"mappings":"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","sourcesContent":["import * as Cy from 'cytoscape';\nimport * as React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps } from 'react-router-dom';\nimport FlexView from 'react-flexview';\nimport { style } from 'typestyle';\nimport history from '../../app/History';\nimport { DurationInSeconds, IntervalInMilliseconds, TimeInMilliseconds, TimeInSeconds } from '../../types/Common';\nimport { MessageType } from '../../types/MessageCenter';\nimport Namespace from '../../types/Namespace';\nimport {\n  CytoscapeClickEvent,\n  DecoratedGraphElements,\n  EdgeLabelMode,\n  GraphDefinition,\n  GraphType,\n  Layout,\n  NodeParamsType,\n  NodeType,\n  SummaryData,\n  UNKNOWN,\n  BoxByType,\n  TrafficRate\n} from '../../types/Graph';\nimport { computePrometheusRateParams } from '../../services/Prometheus';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport CytoscapeGraph, { GraphNodeDoubleTapEvent } from '../../components/CytoscapeGraph/CytoscapeGraph';\nimport CytoscapeToolbarContainer from '../../components/CytoscapeGraph/CytoscapeToolbar';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\nimport { GraphUrlParams, makeNodeGraphUrlFromParams } from '../../components/Nav/NavUtils';\n// import GraphToolbarContainer from './GraphToolbar/GraphToolbar';\nimport GraphLegend from './GraphLegend';\nimport EmptyGraphLayout from '../../components/CytoscapeGraph/EmptyGraphLayout';\nimport SummaryPanel from './SummaryPanel';\nimport {\n  activeNamespacesSelector,\n  durationSelector,\n  edgeLabelsSelector,\n  graphTypeSelector,\n  lastRefreshAtSelector,\n  meshWideMTLSEnabledSelector,\n  refreshIntervalSelector,\n  replayActiveSelector,\n  replayQueryTimeSelector,\n  trafficRatesSelector\n} from '../../store/Selectors';\nimport { KialiAppState } from '../../store/Store';\nimport { KialiAppAction } from '../../actions/KialiAppAction';\nimport { GraphActions } from '../../actions/GraphActions';\nimport { GraphToolbarActions } from '../../actions/GraphToolbarActions';\nimport { NodeContextMenuContainer } from '../../components/CytoscapeGraph/ContextMenu/NodeContextMenu';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { TourActions } from 'actions/TourActions';\nimport { arrayEquals } from 'utils/Common';\nimport { isKioskMode, getFocusSelector, unsetFocusSelector, getTraceId } from 'utils/SearchParamUtils';\nimport { Badge, Chip } from '@patternfly/react-core';\nimport { toRangeString } from 'components/Time/Utils';\nimport { replayBorder } from 'components/Time/Replay';\nimport GraphDataSource, { FetchParams, EMPTY_GRAPH_DATA } from '../../services/GraphDataSource';\nimport { NamespaceActions } from '../../actions/NamespaceAction';\nimport GraphThunkActions from '../../actions/GraphThunkActions';\nimport { JaegerTrace } from 'types/JaegerInfo';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\n// import GraphTour from 'pages/Graph/GraphHelpTour';\n// import { getNextTourStop, TourInfo } from 'components/Tour/TourStop';\nimport { TourInfo } from 'components/Tour/TourStop';\n\n// GraphURLPathProps holds path variable values.  Currently all path variables are relevant only to a node graph\ntype GraphURLPathProps = {\n  aggregate: string;\n  aggregateValue: string;\n  app: string;\n  namespace: string;\n  service: string;\n  version: string;\n  workload: string;\n};\n\ntype ReduxProps = {\n  activeNamespaces: Namespace[];\n  activeTour?: TourInfo;\n  boxByCluster: boolean;\n  boxByNamespace: boolean;\n  compressOnHide: boolean;\n  duration: DurationInSeconds; // current duration (dropdown) setting\n  edgeLabels: EdgeLabelMode[];\n  endTour: () => void;\n  graphType: GraphType;\n  isPageVisible: boolean;\n  lastRefreshAt: TimeInMilliseconds;\n  layout: Layout;\n  mtlsEnabled: boolean;\n  node?: NodeParamsType;\n  onNamespaceChange: () => void;\n  onReady: (cytoscapeRef: any) => void;\n  refreshInterval: IntervalInMilliseconds;\n  replayActive: boolean;\n  replayQueryTime: TimeInMilliseconds;\n  setActiveNamespaces: (namespaces: Namespace[]) => void;\n  setGraphDefinition: (graphDefinition: GraphDefinition) => void;\n  setNode: (node?: NodeParamsType) => void;\n  setTraceId: (traceId?: string) => void;\n  setUpdateTime: (val: TimeInMilliseconds) => void;\n  showIdleEdges: boolean;\n  showIdleNodes: boolean;\n  showLegend: boolean;\n  showMissingSidecars: boolean;\n  showOperationNodes: boolean;\n  showSecurity: boolean;\n  showServiceNodes: boolean;\n  showTrafficAnimation: boolean;\n  showVirtualServices: boolean;\n  startTour: ({ info: TourInfo, stop: number }) => void;\n  summaryData: SummaryData | null;\n  trace?: JaegerTrace;\n  trafficRates: TrafficRate[];\n  toggleIdleNodes: () => void;\n  toggleLegend: () => void;\n  updateSummary: (event: CytoscapeClickEvent) => void;\n};\n\nexport type GraphPageProps = RouteComponentProps<Partial<GraphURLPathProps>> & ReduxProps;\n\nexport type GraphData = {\n  elements: DecoratedGraphElements;\n  errorMessage?: string;\n  fetchParams: FetchParams;\n  isLoading: boolean;\n  isError?: boolean;\n  timestamp: TimeInMilliseconds;\n};\n\ntype GraphPageState = {\n  graphData: GraphData;\n};\n\nconst NUMBER_OF_DATAPOINTS = 30;\n\nconst containerStyle = style({\n  minHeight: '350px',\n  // TODO: try flexbox to remove this calc\n  height: 'calc(100vh - 113px)' // View height minus top bar height minus secondary masthead\n});\n\nconst kioskContainerStyle = style({\n  minHeight: '350px',\n  height: 'calc(100vh - 10px)' // View height minus top bar height\n});\n\nconst cytoscapeGraphContainerStyle = style({ flex: '1', minWidth: '350px', zIndex: 0, paddingRight: '5px' });\nconst cytoscapeGraphWrapperDivStyle = style({ position: 'relative', backgroundColor: PFColors.Black150 });\nconst cytoscapeToolbarWrapperDivStyle = style({\n  position: 'absolute',\n  bottom: '5px',\n  zIndex: 2,\n  borderStyle: 'hidden'\n});\n\nconst graphTimeRangeDivStyle = style({\n  position: 'absolute',\n  top: '10px',\n  left: '10px',\n  width: 'auto',\n  zIndex: 2,\n  backgroundColor: PFColors.White\n});\n\nconst whiteBackground = style({\n  backgroundColor: PFColors.White\n});\n\nconst replayBackground = style({\n  backgroundColor: PFColors.Replay\n});\n\nconst graphLegendStyle = style({\n  right: '0',\n  bottom: '10px',\n  position: 'absolute',\n  overflow: 'hidden'\n});\n\nconst GraphErrorBoundaryFallback = () => {\n  return (\n    <div className={cytoscapeGraphContainerStyle}>\n      <EmptyGraphLayout\n        isError={true}\n        isMiniGraph={false}\n        namespaces={[]}\n        showIdleNodes={false}\n        toggleIdleNodes={() => undefined}\n      />\n    </div>\n  );\n};\n\nexport class GraphPage extends React.Component<GraphPageProps, GraphPageState> {\n  private readonly errorBoundaryRef: any;\n  private cytoscapeGraphRef: any;\n  private focusSelector?: string;\n  private graphDataSource: GraphDataSource;\n\n  static getNodeParamsFromProps(props: RouteComponentProps<Partial<GraphURLPathProps>>): NodeParamsType | undefined {\n    const aggregate = props.match.params.aggregate;\n    const aggregateOk = aggregate && aggregate !== UNKNOWN;\n    const aggregateValue = props.match.params.aggregateValue;\n    const aggregateValueOk = aggregateValue && aggregateValue !== UNKNOWN;\n    const app = props.match.params.app;\n    const appOk = app && app !== UNKNOWN;\n    const namespace = props.match.params.namespace;\n    const namespaceOk = namespace && namespace !== UNKNOWN;\n    const service = props.match.params.service;\n    const serviceOk = service && service !== UNKNOWN;\n    const workload = props.match.params.workload;\n    const workloadOk = workload && workload !== UNKNOWN;\n    if (!aggregateOk && !aggregateValueOk && !appOk && !namespaceOk && !serviceOk && !workloadOk) {\n      // @ts-ignore\n      return;\n    }\n\n    let nodeType: NodeType;\n    let version: string | undefined;\n    if (aggregateOk) {\n      nodeType = NodeType.AGGREGATE;\n      version = '';\n    } else if (appOk || workloadOk) {\n      nodeType = appOk ? NodeType.APP : NodeType.WORKLOAD;\n      version = props.match.params.version;\n    } else {\n      nodeType = NodeType.SERVICE;\n      version = '';\n    }\n    return {\n      aggregate: aggregate!,\n      aggregateValue: aggregateValue!,\n      app: app!,\n      namespace: { name: namespace! },\n      nodeType: nodeType,\n      service: service!,\n      version: version,\n      workload: workload!\n    };\n  }\n\n  static isNodeChanged(prevNode?: NodeParamsType, node?: NodeParamsType): boolean {\n    if (prevNode === node) {\n      return false;\n    }\n    if ((prevNode && !node) || (!prevNode && node)) {\n      return true;\n    }\n    if (prevNode && node) {\n      const nodeAggregateHasChanged =\n        prevNode.aggregate !== node.aggregate || prevNode.aggregateValue !== node.aggregateValue;\n      const nodeAppHasChanged = prevNode.app !== node.app;\n      const nodeServiceHasChanged = prevNode.service !== node.service;\n      const nodeVersionHasChanged = prevNode.version !== node.version;\n      const nodeTypeHasChanged = prevNode.nodeType !== node.nodeType;\n      const nodeWorkloadHasChanged = prevNode.workload !== node.workload;\n      return (\n        nodeAggregateHasChanged ||\n        nodeAppHasChanged ||\n        nodeServiceHasChanged ||\n        nodeVersionHasChanged ||\n        nodeWorkloadHasChanged ||\n        nodeTypeHasChanged\n      );\n    }\n    return false;\n  }\n\n  constructor(props: GraphPageProps) {\n    super(props);\n    this.errorBoundaryRef = React.createRef();\n    this.cytoscapeGraphRef = React.createRef();\n    this.focusSelector = getFocusSelector();\n\n    this.graphDataSource = new GraphDataSource();\n\n    this.state = {\n      graphData: {\n        elements: { edges: [], nodes: [] },\n        fetchParams: this.graphDataSource.fetchParameters,\n        isLoading: true,\n        timestamp: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Connect to graph data source updates\n    this.graphDataSource.on('loadStart', this.handleGraphDataSourceStart);\n    this.graphDataSource.on('fetchError', this.handleGraphDataSourceError);\n    this.graphDataSource.on('fetchSuccess', this.handleGraphDataSourceSuccess);\n    this.graphDataSource.on('emptyNamespaces', this.handleGraphDataSourceEmpty);\n\n    // Let URL override current redux state at mount time.  We usually do this in\n    // the constructor but it seems to work better here when the initial URL\n    // is for a node graph.  When setting the node here it is available for the\n    // loadGraphFromBackend() call.\n    const urlNode = GraphPage.getNodeParamsFromProps(this.props);\n    if (GraphPage.isNodeChanged(urlNode, this.props.node)) {\n      // add the node namespace if necessary, but don't lose previously selected namespaces\n      if (urlNode && !this.props.activeNamespaces.map(ns => ns.name).includes(urlNode.namespace.name)) {\n        this.props.setActiveNamespaces([urlNode.namespace, ...this.props.activeNamespaces]);\n      }\n      this.props.setNode(urlNode);\n    }\n\n    const urlTrace = getTraceId();\n    if (urlTrace !== this.props.trace?.traceID) {\n      this.props.setTraceId(urlTrace);\n    }\n  }\n\n  componentDidUpdate(prev: GraphPageProps) {\n    const curr = this.props;\n\n    // Ensure we initialize the graph. We wait for the first update so that\n    // the toolbar can render and ensure all redux props are updated with URL\n    // settings. That in turn ensures the initial fetchParams are correct.\n    const isInitialLoad = !this.state.graphData.timestamp;\n\n    const activeNamespacesChanged = !arrayEquals(\n      prev.activeNamespaces,\n      curr.activeNamespaces,\n      (n1, n2) => n1.name === n2.name\n    );\n\n    // Ensure we initialize the graph when there is a change to activeNamespaces.\n    if (activeNamespacesChanged) {\n      this.props.onNamespaceChange();\n    }\n    if (\n      isInitialLoad ||\n      activeNamespacesChanged ||\n      prev.boxByCluster !== curr.boxByCluster ||\n      prev.boxByNamespace !== curr.boxByNamespace ||\n      prev.duration !== curr.duration ||\n      (prev.edgeLabels !== curr.edgeLabels && // test for edge labels that invoke graph gen appenders\n        (curr.edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP) ||\n          curr.edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP))) ||\n      prev.graphType !== curr.graphType ||\n      (prev.lastRefreshAt !== curr.lastRefreshAt && curr.replayQueryTime === 0) ||\n      (prev.replayActive !== curr.replayActive && !curr.replayActive) ||\n      prev.replayQueryTime !== curr.replayQueryTime ||\n      prev.showIdleEdges !== curr.showIdleEdges ||\n      prev.showOperationNodes !== curr.showOperationNodes ||\n      prev.showServiceNodes !== curr.showServiceNodes ||\n      prev.showSecurity !== curr.showSecurity ||\n      prev.showIdleNodes !== curr.showIdleNodes ||\n      prev.trafficRates !== curr.trafficRates ||\n      GraphPage.isNodeChanged(prev.node, curr.node)\n    ) {\n      this.loadGraphDataFromBackend();\n    }\n\n    if (!!this.focusSelector) {\n      this.focusSelector = undefined;\n      unsetFocusSelector();\n    }\n\n    if (prev.layout.name !== curr.layout.name || activeNamespacesChanged) {\n      this.errorBoundaryRef.current.cleanError();\n    }\n\n    if (curr.showLegend && this.props.activeTour) {\n      this.props.endTour();\n    }\n  }\n\n  componentWillUnmount() {\n    // Disconnect from graph data source updates\n    this.graphDataSource.removeListener('loadStart', this.handleGraphDataSourceStart);\n    this.graphDataSource.removeListener('fetchError', this.handleGraphDataSourceError);\n    this.graphDataSource.removeListener('fetchSuccess', this.handleGraphDataSourceSuccess);\n    this.graphDataSource.removeListener('emptyNamespaces', this.handleGraphDataSourceEmpty);\n  }\n\n  render() {\n    let conStyle = containerStyle;\n    if (isKioskMode()) {\n      conStyle = kioskContainerStyle;\n    }\n    const isEmpty = !(\n      this.state.graphData.elements.nodes && Object.keys(this.state.graphData.elements.nodes).length > 0\n    );\n    const isReady = !(isEmpty || this.state.graphData.isError);\n    const isReplayReady = this.props.replayActive && !!this.props.replayQueryTime;\n    const cy = this.cytoscapeGraphRef && this.cytoscapeGraphRef.current ? this.cytoscapeGraphRef.current.getCy() : null;\n    return (\n      <>\n        <FlexView className={conStyle} column={true}>\n          {/* <div>\n            <GraphToolbarContainer cy={cy} disabled={this.state.graphData.isLoading} onToggleHelp={this.toggleHelp} />\n          </div> */}\n          <FlexView\n            grow={true}\n            className={`${cytoscapeGraphWrapperDivStyle} ${this.props.replayActive && replayBorder}`}\n          >\n            <ErrorBoundary\n              ref={this.errorBoundaryRef}\n              onError={this.notifyError}\n              fallBackComponent={<GraphErrorBoundaryFallback />}\n            >\n              {this.props.showLegend && (\n                <GraphLegend\n                  className={graphLegendStyle}\n                  isMTLSEnabled={this.props.mtlsEnabled}\n                  closeLegend={this.props.toggleLegend}\n                />\n              )}\n              {isReady && (\n                <Chip\n                  className={`${graphTimeRangeDivStyle} ${\n                    this.props.replayActive ? replayBackground : whiteBackground\n                  }`}\n                  isOverflowChip={true}\n                  isReadOnly={true}\n                >\n                  {this.props.replayActive && <Badge style={{ marginRight: '4px' }} isRead={true}>{`Replay`}</Badge>}\n                  {!isReplayReady && this.props.replayActive && `click Play to start`}\n                  {!isReplayReady && !this.props.replayActive && `${this.displayTimeRange()}`}\n                  {isReplayReady && `${this.displayTimeRange()}`}\n                </Chip>\n              )}\n              {(!this.props.replayActive || isReplayReady) && (\n                <CytoscapeGraph\n                  containerClassName={cytoscapeGraphContainerStyle}\n                  contextMenuGroupComponent={NodeContextMenuContainer}\n                  contextMenuNodeComponent={NodeContextMenuContainer}\n                  focusSelector={this.focusSelector}\n                  graphData={this.state.graphData}\n                  isMTLSEnabled={this.props.mtlsEnabled}\n                  onEmptyGraphAction={this.handleEmptyGraphAction}\n                  onNodeDoubleTap={this.handleDoubleTap}\n                  ref={refInstance => this.setCytoscapeGraph(refInstance)}\n                  {...this.props}\n                />\n              )}\n              {isReady && (\n                <div className={cytoscapeToolbarWrapperDivStyle}>\n                  <CytoscapeToolbarContainer cytoscapeGraphRef={this.cytoscapeGraphRef} />\n                </div>\n              )}\n            </ErrorBoundary>\n            {this.props.summaryData && (\n              <SummaryPanel\n                data={this.props.summaryData}\n                duration={this.state.graphData.fetchParams.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.showServiceNodes}\n                isPageVisible={this.props.isPageVisible}\n                namespaces={this.props.activeNamespaces}\n                queryTime={this.state.graphData.timestamp / 1000}\n                trafficRates={this.props.trafficRates}\n                {...computePrometheusRateParams(this.props.duration, NUMBER_OF_DATAPOINTS)}\n              />\n            )}\n          </FlexView>\n        </FlexView>\n      </>\n    );\n  }\n\n  private handleEmptyGraphAction = () => {\n    this.loadGraphDataFromBackend();\n  };\n\n  private handleGraphDataSourceSuccess = (\n    graphTimestamp: TimeInSeconds,\n    _,\n    elements: DecoratedGraphElements,\n    fetchParams: FetchParams\n  ) => {\n    this.setState({\n      graphData: {\n        elements: elements,\n        isLoading: false,\n        fetchParams: fetchParams,\n        timestamp: graphTimestamp * 1000\n      }\n    });\n    this.props.setGraphDefinition(this.graphDataSource.graphDefinition);\n  };\n\n  private handleGraphDataSourceError = (errorMessage: string | null, fetchParams: FetchParams) => {\n    this.setState({\n      graphData: {\n        elements: { edges: [], nodes: [] },\n        errorMessage: !!errorMessage ? errorMessage : undefined,\n        isError: true,\n        isLoading: false,\n        fetchParams: fetchParams,\n        timestamp: Date.now()\n      }\n    });\n  };\n\n  private handleGraphDataSourceEmpty = (fetchParams: FetchParams) => {\n    this.setState({\n      graphData: {\n        elements: EMPTY_GRAPH_DATA,\n        isLoading: false,\n        fetchParams: fetchParams,\n        timestamp: Date.now()\n      }\n    });\n  };\n\n  private handleGraphDataSourceStart = (isPreviousDataInvalid: boolean, fetchParams: FetchParams) => {\n    this.setState({\n      graphData: {\n        elements: isPreviousDataInvalid ? EMPTY_GRAPH_DATA : this.state.graphData.elements,\n        fetchParams: fetchParams,\n        isLoading: true,\n        timestamp: isPreviousDataInvalid ? Date.now() : this.state.graphData.timestamp\n      }\n    });\n  };\n\n  private handleDoubleTap = (event: GraphNodeDoubleTapEvent) => {\n    if (\n      event.isInaccessible ||\n      event.isServiceEntry ||\n      (event.nodeType === NodeType.BOX && event.isBox !== BoxByType.APP)\n    ) {\n      return;\n    }\n\n    if (event.hasMissingSC) {\n      AlertUtils.add(\n        `A node with a missing sidecar provides no node-specific telemetry and can not provide a node detail graph.`,\n        undefined,\n        MessageType.WARNING\n      );\n      return;\n    }\n    if (event.isIdle) {\n      AlertUtils.add(\n        `An idle node has no node-specific traffic and can not provide a node detail graph.`,\n        undefined,\n        MessageType.WARNING\n      );\n      return;\n    }\n    if (event.isOutside && this.props.setActiveNamespaces) {\n      this.props.setActiveNamespaces([{ name: event.namespace }]);\n      return;\n    }\n\n    // If graph is in the drilled-down view, there is the chance that the user\n    // double clicked the same node as in the full graph. Determine if this is\n    // the case.\n    let sameNode = false;\n    const node = this.state.graphData.fetchParams.node;\n    if (node) {\n      sameNode = node && node.nodeType === event.nodeType;\n      switch (event.nodeType) {\n        case NodeType.AGGREGATE:\n          sameNode = sameNode && node.aggregate === event.aggregate;\n          sameNode = sameNode && node.aggregateValue === event.aggregateValue;\n          break;\n        case NodeType.APP:\n          sameNode = sameNode && node.app === event.app;\n          sameNode = sameNode && node.version === event.version;\n          break;\n        case NodeType.BOX:\n          // we only support node graphs on app boxes, so assume app box\n          sameNode = sameNode && node.app === event.app;\n          break;\n        case NodeType.SERVICE:\n          sameNode = sameNode && node.service === event.service;\n          break;\n        case NodeType.WORKLOAD:\n          sameNode = sameNode && node.workload === event.workload;\n          break;\n        default:\n          sameNode = true; // don't navigate to unsupported node type\n      }\n    }\n\n    const targetNode: NodeParamsType = { ...event, namespace: { name: event.namespace } };\n\n    // If, while in the drilled-down graph, the user double clicked the same\n    // node as in the main graph, it doesn't make sense to re-load the same view.\n    // Instead, assume that the user wants more details for the node and do a\n    // redirect to the details page.\n    if (sameNode) {\n      this.handleDoubleTapSameNode(targetNode);\n      return;\n    }\n\n    // In case user didn't double-tap the same node, or if graph is in\n    // full graph mode, redirect to the drilled-down graph of the chosen node.\n    const urlParams: GraphUrlParams = {\n      activeNamespaces: this.state.graphData.fetchParams.namespaces,\n      duration: this.state.graphData.fetchParams.duration,\n      edgeLabels: this.state.graphData.fetchParams.edgeLabels,\n      graphLayout: this.props.layout,\n      graphType: this.state.graphData.fetchParams.graphType,\n      node: targetNode,\n      refreshInterval: this.props.refreshInterval,\n      showIdleEdges: this.props.showIdleEdges,\n      showIdleNodes: this.props.showIdleNodes,\n      showOperationNodes: this.props.showOperationNodes,\n      showServiceNodes: this.props.showServiceNodes,\n      trafficRates: this.state.graphData.fetchParams.trafficRates\n    };\n\n    // To ensure updated components get the updated URL, update the URL first and then the state\n    history.push(makeNodeGraphUrlFromParams(urlParams));\n  };\n\n  // This allows us to navigate to the service details page when zoomed in on nodes\n  private handleDoubleTapSameNode = (targetNode: NodeParamsType) => {\n    const makeAppDetailsPageUrl = (namespace: string, nodeType: string, name?: string): string => {\n      return `/namespaces/${namespace}/${nodeType}/${name}`;\n    };\n    const nodeType = targetNode.nodeType;\n    let urlNodeType = targetNode.nodeType + 's';\n    let name = targetNode.app;\n    if (nodeType === 'service') {\n      name = targetNode.service;\n    } else if (nodeType === 'workload') {\n      name = targetNode.workload;\n    } else {\n      urlNodeType = 'applications';\n    }\n    const detailsPageUrl = makeAppDetailsPageUrl(targetNode.namespace.name, urlNodeType, name);\n    history.push(detailsPageUrl);\n    return;\n  };\n\n  // private toggleHelp = () => {\n  //   if (this.props.showLegend) {\n  //     this.props.toggleLegend();\n  //   }\n  //   if (this.props.activeTour) {\n  //     this.props.endTour();\n  //   } else {\n  //     const firstStop = getNextTourStop(GraphTour, -1, 'forward');\n  //     this.props.startTour({ info: GraphTour, stop: firstStop });\n  //   }\n  // };\n\n  private setCytoscapeGraph(cytoscapeGraph: any) {\n    this.cytoscapeGraphRef.current = cytoscapeGraph;\n  }\n\n  private loadGraphDataFromBackend = () => {\n    const queryTime: TimeInMilliseconds | undefined = !!this.props.replayQueryTime\n      ? this.props.replayQueryTime\n      : undefined;\n\n    this.graphDataSource.fetchGraphData({\n      boxByCluster: this.props.boxByCluster,\n      boxByNamespace: this.props.boxByNamespace,\n      duration: this.props.duration,\n      edgeLabels: this.props.edgeLabels,\n      graphType: this.props.graphType,\n      includeHealth: true,\n      injectServiceNodes: this.props.showServiceNodes,\n      namespaces: this.props.node ? [this.props.node.namespace] : this.props.activeNamespaces,\n      node: this.props.node,\n      queryTime: queryTime,\n      showIdleEdges: this.props.showIdleEdges,\n      showIdleNodes: this.props.showIdleNodes,\n      showOperationNodes: this.props.showOperationNodes,\n      showSecurity: this.props.showSecurity,\n      trafficRates: this.props.trafficRates\n    });\n  };\n\n  private notifyError = (error: Error, _componentStack: string) => {\n    AlertUtils.add(`There was an error when rendering the graph: ${error.message}, please try a different layout`);\n  };\n\n  private displayTimeRange = () => {\n    const rangeEnd: TimeInMilliseconds = this.state.graphData.timestamp;\n    const rangeStart: TimeInMilliseconds = rangeEnd - this.props.duration * 1000;\n\n    return toRangeString(rangeStart, rangeEnd, { second: '2-digit' }, { second: '2-digit' });\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  activeNamespaces: activeNamespacesSelector(state),\n  activeTour: state.tourState.activeTour,\n  boxByCluster: state.graph.toolbarState.boxByCluster,\n  boxByNamespace: state.graph.toolbarState.boxByNamespace,\n  compressOnHide: state.graph.toolbarState.compressOnHide,\n  duration: durationSelector(state),\n  edgeLabels: edgeLabelsSelector(state),\n  graphType: graphTypeSelector(state),\n  isPageVisible: state.globalState.isPageVisible,\n  lastRefreshAt: lastRefreshAtSelector(state),\n  layout: state.graph.layout,\n  mtlsEnabled: meshWideMTLSEnabledSelector(state),\n  node: state.graph.node,\n  refreshInterval: refreshIntervalSelector(state),\n  replayActive: replayActiveSelector(state),\n  replayQueryTime: replayQueryTimeSelector(state),\n  showIdleEdges: state.graph.toolbarState.showIdleEdges,\n  showIdleNodes: state.graph.toolbarState.showIdleNodes,\n  showLegend: state.graph.toolbarState.showLegend,\n  showMissingSidecars: state.graph.toolbarState.showMissingSidecars,\n  showOperationNodes: state.graph.toolbarState.showOperationNodes,\n  showSecurity: state.graph.toolbarState.showSecurity,\n  showServiceNodes: state.graph.toolbarState.showServiceNodes,\n  showTrafficAnimation: state.graph.toolbarState.showTrafficAnimation,\n  showVirtualServices: state.graph.toolbarState.showVirtualServices,\n  summaryData: state.graph.summaryData,\n  trace: state.jaegerState?.selectedTrace,\n  trafficRates: trafficRatesSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  endTour: bindActionCreators(TourActions.endTour, dispatch),\n  onNamespaceChange: bindActionCreators(GraphActions.onNamespaceChange, dispatch),\n  onReady: (cy: Cy.Core) => dispatch(GraphThunkActions.graphReady(cy)),\n  setActiveNamespaces: (namespaces: Namespace[]) => dispatch(NamespaceActions.setActiveNamespaces(namespaces)),\n  setGraphDefinition: bindActionCreators(GraphActions.setGraphDefinition, dispatch),\n  setNode: bindActionCreators(GraphActions.setNode, dispatch),\n  setTraceId: (traceId?: string) => dispatch(JaegerThunkActions.setTraceId(traceId)),\n  setUpdateTime: (val: TimeInMilliseconds) => dispatch(GraphActions.setUpdateTime(val)),\n  startTour: bindActionCreators(TourActions.startTour, dispatch),\n  toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch),\n  toggleLegend: bindActionCreators(GraphToolbarActions.toggleLegend, dispatch),\n  updateSummary: (event: CytoscapeClickEvent) => dispatch(GraphActions.updateSummary(event))\n});\n\nconst GraphPageContainer = connect(mapStateToProps, mapDispatchToProps)(GraphPage);\nexport default GraphPageContainer;\n"]},"metadata":{},"sourceType":"module"}
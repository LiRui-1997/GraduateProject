{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/Graph/SummaryPanel.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { style } from 'typestyle';\nimport SummaryPanelEdge from './SummaryPanelEdge'; // import SummaryPanelGraph from './SummaryPanelGraph';\n\nimport SummaryPanelAppBox from './SummaryPanelAppBox';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SummaryPanelNodeContainer from './SummaryPanelNode';\nimport SummaryPanelTraceDetailsContainer from './SummaryPanelTraceDetails';\nimport SummaryPanelClusterBox from './SummaryPanelClusterBox';\nimport SummaryPanelNamespaceBox from './SummaryPanelNamespaceBox';\nimport { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport TourStopContainer from 'components/Tour/TourStop';\nvar mainStyle = style({\n  fontSize: 'var(--graph-side-panel--font-size)',\n  padding: '0',\n  position: 'relative'\n});\nvar expandedStyle = style({\n  height: '100%'\n});\nvar expandedHalfStyle = style({\n  height: '50%'\n});\nvar collapsedStyle = style({\n  $nest: {\n    '& > .panel': {\n      display: 'none'\n    }\n  }\n});\nvar summaryPanelBottomSplit = style({\n  height: '50%',\n  width: '25em',\n  minWidth: '25em',\n  overflowY: 'auto'\n});\nvar toggleSidePanelStyle = style({\n  backgroundColor: 'white',\n  border: '1px #ddd solid',\n  borderRadius: '3px',\n  cursor: 'pointer',\n  left: '-1.6em',\n  minWidth: '5em',\n  position: 'absolute',\n  textAlign: 'center',\n  top: '6.5em',\n  transform: 'rotate(-90deg)',\n  transformOrigin: 'left top 0'\n});\n\nvar SummaryPanel = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanel, _React$Component);\n\n  var _super = _createSuper(SummaryPanel);\n\n  function SummaryPanel(props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanel);\n\n    _this = _super.call(this, props);\n\n    _this.togglePanel = function () {\n      _this.setState(function (state) {\n        return {\n          isVisible: !state.isVisible\n        };\n      });\n    };\n\n    _this.state = {\n      isVisible: true\n    };\n    return _this;\n  }\n\n  _createClass(SummaryPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n        this.setState({\n          isVisible: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$jaegerSta;\n\n      if (!this.props.isPageVisible || !this.props.data.summaryTarget) {\n        return null;\n      }\n\n      var summaryType = this.props.data.summaryType;\n      var boxType = summaryType === 'box' ? this.props.data.summaryTarget.data(CyNode.isBox) : undefined;\n      var mainTopStyle = this.state.isVisible ? this.props.jaegerState.selectedTrace ? expandedHalfStyle : expandedStyle : collapsedStyle;\n      return /*#__PURE__*/React.createElement(TourStopContainer, {\n        info: [GraphTourStops.Graph, GraphTourStops.ContextualMenu, GraphTourStops.SidePanel],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"graph-side-panel\",\n        className: mainStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: mainTopStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: toggleSidePanelStyle,\n        onClick: this.togglePanel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, this.state.isVisible ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.AngleDoubleDown, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }), \" Hide\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.AngleDoubleUp, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 19\n        }\n      }), \" Show\")), summaryType === 'box' && boxType === 'app' && /*#__PURE__*/React.createElement(SummaryPanelAppBox, {\n        data: this.props.data,\n        duration: this.props.duration,\n        graphType: this.props.graphType,\n        injectServiceNodes: this.props.injectServiceNodes,\n        namespaces: this.props.data.summaryTarget.namespaces,\n        queryTime: this.props.queryTime,\n        rateInterval: this.props.rateInterval,\n        step: this.props.step,\n        trafficRates: this.props.trafficRates,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }), summaryType === 'box' && boxType === 'cluster' && /*#__PURE__*/React.createElement(SummaryPanelClusterBox, {\n        data: this.props.data,\n        duration: this.props.duration,\n        graphType: this.props.graphType,\n        injectServiceNodes: this.props.injectServiceNodes,\n        namespaces: this.props.data.summaryTarget.namespaces,\n        queryTime: this.props.queryTime,\n        rateInterval: this.props.rateInterval,\n        step: this.props.step,\n        trafficRates: this.props.trafficRates,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }), summaryType === 'box' && boxType === 'namespace' && /*#__PURE__*/React.createElement(SummaryPanelNamespaceBox, {\n        data: this.props.data,\n        duration: this.props.duration,\n        graphType: this.props.graphType,\n        injectServiceNodes: this.props.injectServiceNodes,\n        namespaces: this.props.data.summaryTarget.namespaces,\n        queryTime: this.props.queryTime,\n        rateInterval: this.props.rateInterval,\n        step: this.props.step,\n        trafficRates: this.props.trafficRates,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }), summaryType === 'edge' && /*#__PURE__*/React.createElement(SummaryPanelEdge, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 40\n        }\n      })), this.props.data.summaryType === 'node' && /*#__PURE__*/React.createElement(SummaryPanelNodeContainer, {\n        data: this.props.data,\n        duration: this.props.duration,\n        graphType: this.props.graphType,\n        injectServiceNodes: this.props.injectServiceNodes,\n        namespaces: this.props.namespaces,\n        rateInterval: this.props.rateInterval,\n        queryTime: this.props.queryTime,\n        step: this.props.step,\n        trafficRates: this.props.trafficRates,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      })), this.props.jaegerState.selectedTrace && this.state.isVisible && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel panel-default \".concat(summaryPanelBottomSplit),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(SummaryPanelTraceDetailsContainer, {\n        trace: this.props.jaegerState.selectedTrace,\n        node: this.props.data.summaryTarget,\n        graphType: this.props.graphType,\n        jaegerURL: (_this$props$jaegerSta = this.props.jaegerState.info) === null || _this$props$jaegerSta === void 0 ? void 0 : _this$props$jaegerSta.url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      })))));\n    }\n  }]);\n\n  return SummaryPanel;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jaegerState: state.jaegerState\n  };\n};\n\nvar SummaryPanelContainer = connect(mapStateToProps)(SummaryPanel);\nexport default SummaryPanelContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Graph/SummaryPanel.tsx"],"names":["React","connect","style","SummaryPanelEdge","SummaryPanelAppBox","KialiIcon","SummaryPanelNodeContainer","SummaryPanelTraceDetailsContainer","SummaryPanelClusterBox","SummaryPanelNamespaceBox","CyNode","GraphTourStops","TourStopContainer","mainStyle","fontSize","padding","position","expandedStyle","height","expandedHalfStyle","collapsedStyle","$nest","display","summaryPanelBottomSplit","width","minWidth","overflowY","toggleSidePanelStyle","backgroundColor","border","borderRadius","cursor","left","textAlign","top","transform","transformOrigin","SummaryPanel","props","togglePanel","setState","state","isVisible","prevProps","data","summaryTarget","isPageVisible","summaryType","boxType","isBox","undefined","mainTopStyle","jaegerState","selectedTrace","Graph","ContextualMenu","SidePanel","duration","graphType","injectServiceNodes","namespaces","queryTime","rateInterval","step","trafficRates","info","url","Component","mapStateToProps","SummaryPanelContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { style } from 'typestyle';\nimport { SummaryPanelPropType, BoxByType } from '../../types/Graph';\nimport SummaryPanelEdge from './SummaryPanelEdge';\n// import SummaryPanelGraph from './SummaryPanelGraph';\nimport SummaryPanelAppBox from './SummaryPanelAppBox';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SummaryPanelNodeContainer from './SummaryPanelNode';\nimport { JaegerState } from 'reducers/JaegerState';\nimport SummaryPanelTraceDetailsContainer from './SummaryPanelTraceDetails';\nimport { KialiAppState } from 'store/Store';\nimport SummaryPanelClusterBox from './SummaryPanelClusterBox';\nimport SummaryPanelNamespaceBox from './SummaryPanelNamespaceBox';\nimport { CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport TourStopContainer from 'components/Tour/TourStop';\n\ntype SummaryPanelState = {\n  isVisible: boolean;\n};\n\ntype MainSummaryPanelPropType = SummaryPanelPropType & {\n  isPageVisible: boolean;\n  jaegerState: JaegerState;\n};\n\nconst mainStyle = style({\n  fontSize: 'var(--graph-side-panel--font-size)',\n  padding: '0',\n  position: 'relative'\n});\n\nconst expandedStyle = style({ height: '100%' });\n\nconst expandedHalfStyle = style({ height: '50%' });\n\nconst collapsedStyle = style({\n  $nest: {\n    '& > .panel': {\n      display: 'none'\n    }\n  }\n});\n\nconst summaryPanelBottomSplit = style({\n  height: '50%',\n  width: '25em',\n  minWidth: '25em',\n  overflowY: 'auto'\n});\n\nconst toggleSidePanelStyle = style({\n  backgroundColor: 'white',\n  border: '1px #ddd solid',\n  borderRadius: '3px',\n  cursor: 'pointer',\n  left: '-1.6em',\n  minWidth: '5em',\n  position: 'absolute',\n  textAlign: 'center',\n  top: '6.5em',\n  transform: 'rotate(-90deg)',\n  transformOrigin: 'left top 0'\n});\n\nclass SummaryPanel extends React.Component<MainSummaryPanelPropType, SummaryPanelState> {\n  constructor(props: MainSummaryPanelPropType) {\n    super(props);\n    this.state = {\n      isVisible: true\n    };\n  }\n\n  componentDidUpdate(prevProps: Readonly<MainSummaryPanelPropType>): void {\n    if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n      this.setState({ isVisible: true });\n    }\n  }\n\n  render() {\n    if (!this.props.isPageVisible || !this.props.data.summaryTarget) {\n      return null;\n    }\n    const summaryType = this.props.data.summaryType as string;\n    const boxType: BoxByType | undefined =\n      summaryType === 'box' ? this.props.data.summaryTarget.data(CyNode.isBox) : undefined;\n\n    const mainTopStyle = this.state.isVisible\n      ? this.props.jaegerState.selectedTrace\n        ? expandedHalfStyle\n        : expandedStyle\n      : collapsedStyle;\n    return (\n      <TourStopContainer info={[GraphTourStops.Graph, GraphTourStops.ContextualMenu, GraphTourStops.SidePanel]}>\n        <div id=\"graph-side-panel\" className={mainStyle}>\n          <div className={mainTopStyle}>\n            <div className={toggleSidePanelStyle} onClick={this.togglePanel}>\n              {this.state.isVisible ? (\n                <>\n                  <KialiIcon.AngleDoubleDown /> Hide\n                </>\n              ) : (\n                <>\n                  <KialiIcon.AngleDoubleUp /> Show\n                </>\n              )}\n            </div>\n            {summaryType === 'box' && boxType === 'app' && (\n              <SummaryPanelAppBox\n                data={this.props.data}\n                duration={this.props.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.injectServiceNodes}\n                namespaces={this.props.data.summaryTarget.namespaces}\n                queryTime={this.props.queryTime}\n                rateInterval={this.props.rateInterval}\n                step={this.props.step}\n                trafficRates={this.props.trafficRates}\n              />\n            )}\n            {summaryType === 'box' && boxType === 'cluster' && (\n              <SummaryPanelClusterBox\n                data={this.props.data}\n                duration={this.props.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.injectServiceNodes}\n                namespaces={this.props.data.summaryTarget.namespaces}\n                queryTime={this.props.queryTime}\n                rateInterval={this.props.rateInterval}\n                step={this.props.step}\n                trafficRates={this.props.trafficRates}\n              />\n            )}\n            {summaryType === 'box' && boxType === 'namespace' && (\n              <SummaryPanelNamespaceBox\n                data={this.props.data}\n                duration={this.props.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.injectServiceNodes}\n                namespaces={this.props.data.summaryTarget.namespaces}\n                queryTime={this.props.queryTime}\n                rateInterval={this.props.rateInterval}\n                step={this.props.step}\n                trafficRates={this.props.trafficRates}\n              />\n            )}\n            {summaryType === 'edge' && <SummaryPanelEdge {...this.props} />}\n            {/* {summaryType === 'graph' && (\n              <SummaryPanelGraph\n                data={this.props.data}\n                duration={this.props.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.injectServiceNodes}\n                namespaces={this.props.namespaces}\n                queryTime={this.props.queryTime}\n                rateInterval={this.props.rateInterval}\n                step={this.props.step}\n                trafficRates={this.props.trafficRates}\n              />\n            )} */}\n            {this.props.data.summaryType === 'node' && (\n              <SummaryPanelNodeContainer\n                data={this.props.data}\n                duration={this.props.duration}\n                graphType={this.props.graphType}\n                injectServiceNodes={this.props.injectServiceNodes}\n                namespaces={this.props.namespaces}\n                rateInterval={this.props.rateInterval}\n                queryTime={this.props.queryTime}\n                step={this.props.step}\n                trafficRates={this.props.trafficRates}\n              />\n            )}\n          </div>\n          {this.props.jaegerState.selectedTrace && this.state.isVisible && (\n            <div className={`panel panel-default ${summaryPanelBottomSplit}`}>\n              <div className=\"panel-body\">\n                <SummaryPanelTraceDetailsContainer\n                  trace={this.props.jaegerState.selectedTrace}\n                  node={this.props.data.summaryTarget}\n                  graphType={this.props.graphType}\n                  jaegerURL={this.props.jaegerState.info?.url}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </TourStopContainer>\n    );\n  }\n\n  private togglePanel = () => {\n    this.setState((state: SummaryPanelState) => ({\n      isVisible: !state.isVisible\n    }));\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  jaegerState: state.jaegerState\n});\n\nconst SummaryPanelContainer = connect(mapStateToProps)(SummaryPanel);\nexport default SummaryPanelContainer;\n"]},"metadata":{},"sourceType":"module"}
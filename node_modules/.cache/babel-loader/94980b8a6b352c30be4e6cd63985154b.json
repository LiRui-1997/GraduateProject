{"ast":null,"code":"import _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphTraffic.tsx\";\nimport { Radio, Dropdown, DropdownToggle, Checkbox, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { TrafficRate, isGrpcRate, isHttpRate, isTcpRate } from '../../../types/Graph';\nimport * as _ from 'lodash';\nimport { trafficRatesSelector } from 'store/Selectors';\nimport { BoundingClientAwareComponent, PropertyType } from 'components/BoundingClientAwareComponent/BoundingClientAwareComponent';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { containerStyle, infoStyle, itemStyleWithInfo, itemStyleWithoutInfo, menuStyle, menuEntryStyle } from 'styles/DropdownStyles';\nvar marginBottom = 20;\n\nvar GraphTraffic = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(GraphTraffic, _React$PureComponent);\n\n  var _super = _createSuper(GraphTraffic);\n\n  function GraphTraffic(props) {\n    var _this;\n\n    _classCallCheck(this, GraphTraffic);\n\n    _this = _super.call(this, props);\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.toggleTrafficRate = function (_, event) {\n      var rate = event.target.value;\n\n      if (_this.props.trafficRates.includes(rate)) {\n        var newRates;\n\n        switch (rate) {\n          case TrafficRate.GRPC_GROUP:\n            newRates = _this.props.trafficRates.filter(function (r) {\n              return !isGrpcRate(r);\n            });\n            break;\n\n          case TrafficRate.HTTP_GROUP:\n            newRates = _this.props.trafficRates.filter(function (r) {\n              return !isHttpRate(r);\n            });\n            break;\n\n          case TrafficRate.TCP_GROUP:\n            newRates = _this.props.trafficRates.filter(function (r) {\n              return !isTcpRate(r);\n            });\n            break;\n\n          default:\n            newRates = _this.props.trafficRates.filter(function (r) {\n              return r !== rate;\n            });\n        }\n\n        _this.props.setTrafficRates(newRates);\n      } else {\n        switch (rate) {\n          case TrafficRate.GRPC_GROUP:\n            _this.props.setTrafficRates([].concat(_toConsumableArray(_this.props.trafficRates), [rate, TrafficRate.GRPC_REQUEST]));\n\n            break;\n\n          case TrafficRate.HTTP_GROUP:\n            _this.props.setTrafficRates([].concat(_toConsumableArray(_this.props.trafficRates), [rate, TrafficRate.HTTP_REQUEST]));\n\n            break;\n\n          case TrafficRate.TCP_GROUP:\n            _this.props.setTrafficRates([].concat(_toConsumableArray(_this.props.trafficRates), [rate, TrafficRate.TCP_SENT]));\n\n            break;\n\n          default:\n            _this.props.setTrafficRates([].concat(_toConsumableArray(_this.props.trafficRates), [rate]));\n\n        }\n      }\n    };\n\n    _this.toggleTrafficRateGrpc = function (_, event) {\n      var rate = event.target.value;\n\n      var newRates = _this.props.trafficRates.filter(function (r) {\n        return !isGrpcRate(r);\n      });\n\n      _this.props.setTrafficRates([].concat(_toConsumableArray(newRates), [TrafficRate.GRPC_GROUP, rate]));\n    };\n\n    _this.toggleTrafficRateHttp = function (_, event) {\n      var rate = event.target.value;\n\n      var newRates = _this.props.trafficRates.filter(function (r) {\n        return !isHttpRate(r);\n      });\n\n      _this.props.setTrafficRates([].concat(_toConsumableArray(newRates), [TrafficRate.HTTP_GROUP, rate]));\n    };\n\n    _this.toggleTrafficRateTcp = function (_, event) {\n      var rate = event.target.value;\n\n      var newRates = _this.props.trafficRates.filter(function (r) {\n        return !isTcpRate(r);\n      });\n\n      _this.props.setTrafficRates([].concat(_toConsumableArray(newRates), [TrafficRate.TCP_GROUP, rate]));\n    };\n\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(GraphTraffic, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          id: \"graph-traffic-dropdown\",\n          onToggle: this.onToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        }, \"Traffic\") // disabled={this.props.disabled}\n        ,\n        disabled: true,\n        isOpen: this.state.isOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, this.getPopoverContent());\n    }\n  }, {\n    key: \"getPopoverContent\",\n    value: function getPopoverContent() {\n      var _this2 = this;\n\n      var trafficRates = this.props.trafficRates;\n      var trafficRateOptions = [{\n        id: TrafficRate.GRPC_GROUP,\n        labelText: _.startCase(TrafficRate.GRPC_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.GRPC_GROUP),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }\n        }, \"Displays active gRPC Edges for the time period, using the selected gRPC rate. To see idle gRPC Edges enable the \\\"Idle Edges\\\" Display menu option. Default: Requests.\")\n      }, {\n        id: TrafficRate.HTTP_GROUP,\n        labelText: _.startCase(TrafficRate.HTTP_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.HTTP_GROUP),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }\n        }, \"Displays active HTTP Edges for the time period, using the selected HTTP rate. To see idle HTTP Edges enable the \\\"Idle Edges\\\" Display menu option. Default: Requests.\")\n      }, {\n        id: TrafficRate.TCP_GROUP,\n        labelText: _.startCase(TrafficRate.TCP_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.TCP_GROUP),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }\n        }, \"Displays active TCP Edges for the time period, using the selected TCP rate. To see inactive TCP Edges enable the \\\"Idle Edges\\\" Display menu option. Default: Sent Bytes.\")\n      }];\n      var grpcOptions = [{\n        id: TrafficRate.GRPC_RECEIVED,\n        labelText: 'Received Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_RECEIVED),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }\n        }, \"Received (i.e. Response) message rate in messages-per-second (mps). Captures server streaming RPCs.\")\n      }, {\n        id: TrafficRate.GRPC_REQUEST,\n        labelText: 'Requests',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_REQUEST),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }\n        }, \"Request message rate in requests-per-second (rps). Captures unary RPC, with status codes.\")\n      }, {\n        id: TrafficRate.GRPC_SENT,\n        labelText: 'Sent Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_SENT),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }\n        }, \"Sent (i.e. Request) message rate in messages-per-second (mps). Captures client streaming RPCs.\")\n      }, {\n        id: TrafficRate.GRPC_TOTAL,\n        labelText: 'Total Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_TOTAL),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }\n        }, \"Combined (Sent + Received) message rate in messages-per-second (mps). Captures all streaming RPCs.\")\n      }];\n      var httpOptions = [{\n        id: TrafficRate.HTTP_REQUEST,\n        labelText: 'Requests',\n        isChecked: trafficRates.includes(TrafficRate.HTTP_REQUEST),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }\n        }, \"Request message rate in requests-per-second (rps). Captures status codes.\")\n      }];\n      var tcpOptions = [{\n        id: TrafficRate.TCP_RECEIVED,\n        labelText: 'Received Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_RECEIVED),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 18\n          }\n        }, \"Received bytes rate in bytes-per-second (bps).\")\n      }, {\n        id: TrafficRate.TCP_SENT,\n        labelText: 'Sent Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_SENT),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 18\n          }\n        }, \"Sent bytes rate in bytes-per-second (bps).\")\n      }, {\n        id: TrafficRate.TCP_TOTAL,\n        labelText: 'Total Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_TOTAL),\n        tooltip: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 11\n          }\n        }, \"Combined (Sent + Received) byte rate in bytes-per-second (mps).\")\n      }];\n      return /*#__PURE__*/React.createElement(BoundingClientAwareComponent, {\n        className: containerStyle,\n        maxHeight: {\n          type: PropertyType.VIEWPORT_HEIGHT_MINUS_TOP,\n          margin: marginBottom\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"graph-traffic-menu\",\n        className: menuStyle,\n        style: {\n          width: '16.5em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }, trafficRateOptions.map(function (trafficRateOption) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: trafficRateOption.id,\n          className: menuEntryStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          key: trafficRateOption.id,\n          className: !!trafficRateOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Checkbox, {\n          id: trafficRateOption.id,\n          name: \"trafficRateOptions\",\n          isChecked: trafficRateOption.isChecked,\n          label: trafficRateOption.labelText,\n          onChange: _this2.toggleTrafficRate,\n          value: trafficRateOption.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }\n        })), !!trafficRateOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tooltip_\".concat(trafficRateOption.id),\n          position: TooltipPosition.right,\n          content: trafficRateOption.tooltip,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          className: infoStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }\n        })), trafficRateOption.id === TrafficRate.GRPC_GROUP && grpcOptions.some(function (o) {\n          return o.isChecked;\n        }) && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }\n        }, grpcOptions.map(function (grpcOption) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: grpcOption.id,\n            className: menuEntryStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            key: grpcOption.id,\n            className: !!grpcOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n            style: {\n              paddingLeft: '35px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Radio, {\n            id: grpcOption.id,\n            style: {\n              paddingLeft: '5px'\n            },\n            name: \"grpcOptions\",\n            isChecked: grpcOption.isChecked,\n            label: grpcOption.labelText,\n            onChange: _this2.toggleTrafficRateGrpc,\n            value: grpcOption.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 25\n            }\n          })), !!grpcOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tooltip_\".concat(grpcOption.id),\n            position: TooltipPosition.right,\n            content: grpcOption.tooltip,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 27\n            }\n          })));\n        })), trafficRateOption.id === TrafficRate.HTTP_GROUP && httpOptions.some(function (o) {\n          return o.isChecked;\n        }) && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }\n        }, httpOptions.map(function (httpOption) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: httpOption.id,\n            className: menuEntryStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            key: httpOption.id,\n            className: !!httpOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n            style: {\n              paddingLeft: '35px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Radio, {\n            id: httpOption.id,\n            style: {\n              paddingLeft: '5px'\n            },\n            name: \"httpOptions\",\n            isChecked: httpOption.isChecked,\n            label: httpOption.labelText,\n            onChange: _this2.toggleTrafficRateHttp,\n            value: httpOption.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 25\n            }\n          })), !!httpOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tooltip_\".concat(httpOption.id),\n            position: TooltipPosition.right,\n            content: httpOption.tooltip,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 27\n            }\n          })));\n        })), trafficRateOption.id === TrafficRate.TCP_GROUP && tcpOptions.some(function (o) {\n          return o.isChecked;\n        }) && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }\n        }, tcpOptions.map(function (tcpOption) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: tcpOption.id,\n            className: menuEntryStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"label\", {\n            key: tcpOption.id,\n            className: !!tcpOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo,\n            style: {\n              paddingLeft: '35px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Radio, {\n            id: tcpOption.id,\n            style: {\n              paddingLeft: '5px'\n            },\n            name: \"tcpOptions\",\n            isChecked: tcpOption.isChecked,\n            label: tcpOption.labelText,\n            onChange: _this2.toggleTrafficRateTcp,\n            value: tcpOption.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 25\n            }\n          })), !!tcpOption.tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n            key: \"tooltip_\".concat(tcpOption.id),\n            position: TooltipPosition.right,\n            content: tcpOption.tooltip,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n            className: infoStyle,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 27\n            }\n          })));\n        })));\n      })));\n    }\n  }]);\n\n  return GraphTraffic;\n}(React.PureComponent); // Allow Redux to map sections of our global app state to our props\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    trafficRates: trafficRatesSelector(state)\n  };\n}; // Map our actions to Redux\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch)\n  };\n}; // hook up to Redux for our State to be mapped to props\n\n\nvar GraphTrafficContainer = connect(mapStateToProps, mapDispatchToProps)(GraphTraffic);\nexport default GraphTrafficContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphTraffic.tsx"],"names":["Radio","Dropdown","DropdownToggle","Checkbox","Tooltip","TooltipPosition","React","connect","bindActionCreators","GraphToolbarActions","TrafficRate","isGrpcRate","isHttpRate","isTcpRate","_","trafficRatesSelector","BoundingClientAwareComponent","PropertyType","KialiIcon","containerStyle","infoStyle","itemStyleWithInfo","itemStyleWithoutInfo","menuStyle","menuEntryStyle","marginBottom","GraphTraffic","props","onToggle","isOpen","setState","toggleTrafficRate","event","rate","target","value","trafficRates","includes","newRates","GRPC_GROUP","filter","r","HTTP_GROUP","TCP_GROUP","setTrafficRates","GRPC_REQUEST","HTTP_REQUEST","TCP_SENT","toggleTrafficRateGrpc","toggleTrafficRateHttp","toggleTrafficRateTcp","state","getPopoverContent","trafficRateOptions","id","labelText","startCase","isChecked","tooltip","textAlign","grpcOptions","GRPC_RECEIVED","GRPC_SENT","GRPC_TOTAL","httpOptions","tcpOptions","TCP_RECEIVED","TCP_TOTAL","type","VIEWPORT_HEIGHT_MINUS_TOP","margin","width","map","trafficRateOption","right","some","o","grpcOption","paddingLeft","httpOption","tcpOption","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","GraphTrafficContainer"],"mappings":"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","sourcesContent":["import { Radio, Dropdown, DropdownToggle, Checkbox, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { bindActionCreators } from 'redux';\nimport { KialiAppState } from '../../../store/Store';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { TrafficRate, isGrpcRate, isHttpRate, isTcpRate } from '../../../types/Graph';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport * as _ from 'lodash';\nimport { trafficRatesSelector } from 'store/Selectors';\nimport {\n  BoundingClientAwareComponent,\n  PropertyType\n} from 'components/BoundingClientAwareComponent/BoundingClientAwareComponent';\nimport { KialiIcon } from 'config/KialiIcon';\nimport {\n  containerStyle,\n  infoStyle,\n  itemStyleWithInfo,\n  itemStyleWithoutInfo,\n  menuStyle,\n  menuEntryStyle\n} from 'styles/DropdownStyles';\n\ntype ReduxProps = {\n  trafficRates: TrafficRate[];\n  setTrafficRates: (trafficRates: TrafficRate[]) => void;\n};\n\ntype GraphTrafficProps = ReduxProps & {\n  disabled: boolean;\n};\n\ntype GraphTrafficState = { isOpen: boolean };\n\ninterface TrafficRateOptionType {\n  id: string;\n  disabled?: boolean;\n  labelText: string;\n  isChecked: boolean;\n  onChange?: () => void;\n  tooltip?: React.ReactNode;\n}\n\nconst marginBottom = 20;\n\nclass GraphTraffic extends React.PureComponent<GraphTrafficProps, GraphTrafficState> {\n  constructor(props: GraphTrafficProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  private onToggle = isOpen => {\n    this.setState({\n      isOpen\n    });\n  };\n\n  render() {\n    return (\n      <Dropdown\n        toggle={\n          <DropdownToggle id=\"graph-traffic-dropdown\" onToggle={this.onToggle}>\n            Traffic\n          </DropdownToggle>\n        }\n        // disabled={this.props.disabled}\n        disabled={true}\n        isOpen={this.state.isOpen}\n      >\n        {this.getPopoverContent()}\n      </Dropdown>\n    );\n  }\n\n  private getPopoverContent() {\n    const trafficRates = this.props.trafficRates;\n\n    const trafficRateOptions: TrafficRateOptionType[] = [\n      {\n        id: TrafficRate.GRPC_GROUP,\n        labelText: _.startCase(TrafficRate.GRPC_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.GRPC_GROUP),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Displays active gRPC Edges for the time period, using the selected gRPC rate. To see idle gRPC Edges enable\n            the \"Idle Edges\" Display menu option. Default: Requests.\n          </div>\n        )\n      },\n      {\n        id: TrafficRate.HTTP_GROUP,\n        labelText: _.startCase(TrafficRate.HTTP_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.HTTP_GROUP),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Displays active HTTP Edges for the time period, using the selected HTTP rate. To see idle HTTP Edges enable\n            the \"Idle Edges\" Display menu option. Default: Requests.\n          </div>\n        )\n      },\n      {\n        id: TrafficRate.TCP_GROUP,\n        labelText: _.startCase(TrafficRate.TCP_GROUP),\n        isChecked: trafficRates.includes(TrafficRate.TCP_GROUP),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Displays active TCP Edges for the time period, using the selected TCP rate. To see inactive TCP Edges enable\n            the \"Idle Edges\" Display menu option. Default: Sent Bytes.\n          </div>\n        )\n      }\n    ];\n\n    const grpcOptions: TrafficRateOptionType[] = [\n      {\n        id: TrafficRate.GRPC_RECEIVED,\n        labelText: 'Received Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_RECEIVED),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Received (i.e. Response) message rate in messages-per-second (mps). Captures server streaming RPCs.\n          </div>\n        )\n      },\n      {\n        id: TrafficRate.GRPC_REQUEST,\n        labelText: 'Requests',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_REQUEST),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Request message rate in requests-per-second (rps). Captures unary RPC, with status codes.\n          </div>\n        )\n      },\n      {\n        id: TrafficRate.GRPC_SENT,\n        labelText: 'Sent Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_SENT),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Sent (i.e. Request) message rate in messages-per-second (mps). Captures client streaming RPCs.\n          </div>\n        )\n      },\n      {\n        id: TrafficRate.GRPC_TOTAL,\n        labelText: 'Total Messages',\n        isChecked: trafficRates.includes(TrafficRate.GRPC_TOTAL),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Combined (Sent + Received) message rate in messages-per-second (mps). Captures all streaming RPCs.\n          </div>\n        )\n      }\n    ];\n\n    const httpOptions: TrafficRateOptionType[] = [\n      {\n        id: TrafficRate.HTTP_REQUEST,\n        labelText: 'Requests',\n        isChecked: trafficRates.includes(TrafficRate.HTTP_REQUEST),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>\n            Request message rate in requests-per-second (rps). Captures status codes.\n          </div>\n        )\n      }\n    ];\n\n    const tcpOptions: TrafficRateOptionType[] = [\n      {\n        id: TrafficRate.TCP_RECEIVED,\n        labelText: 'Received Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_RECEIVED),\n        tooltip: <div style={{ textAlign: 'left' }}>Received bytes rate in bytes-per-second (bps).</div>\n      },\n      {\n        id: TrafficRate.TCP_SENT,\n        labelText: 'Sent Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_SENT),\n        tooltip: <div style={{ textAlign: 'left' }}>Sent bytes rate in bytes-per-second (bps).</div>\n      },\n      {\n        id: TrafficRate.TCP_TOTAL,\n        labelText: 'Total Bytes',\n        isChecked: trafficRates.includes(TrafficRate.TCP_TOTAL),\n        tooltip: (\n          <div style={{ textAlign: 'left' }}>Combined (Sent + Received) byte rate in bytes-per-second (mps).</div>\n        )\n      }\n    ];\n\n    return (\n      <BoundingClientAwareComponent\n        className={containerStyle}\n        maxHeight={{ type: PropertyType.VIEWPORT_HEIGHT_MINUS_TOP, margin: marginBottom }}\n      >\n        <div id=\"graph-traffic-menu\" className={menuStyle} style={{ width: '16.5em' }}>\n          {trafficRateOptions.map((trafficRateOption: TrafficRateOptionType) => (\n            <div key={trafficRateOption.id} className={menuEntryStyle}>\n              <label\n                key={trafficRateOption.id}\n                className={!!trafficRateOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n              >\n                <Checkbox\n                  id={trafficRateOption.id}\n                  name=\"trafficRateOptions\"\n                  isChecked={trafficRateOption.isChecked}\n                  label={trafficRateOption.labelText}\n                  onChange={this.toggleTrafficRate}\n                  value={trafficRateOption.id}\n                />\n              </label>\n              {!!trafficRateOption.tooltip && (\n                <Tooltip\n                  key={`tooltip_${trafficRateOption.id}`}\n                  position={TooltipPosition.right}\n                  content={trafficRateOption.tooltip}\n                >\n                  <KialiIcon.Info className={infoStyle} />\n                </Tooltip>\n              )}\n              {trafficRateOption.id === TrafficRate.GRPC_GROUP && grpcOptions.some(o => o.isChecked) && (\n                <div>\n                  {grpcOptions.map((grpcOption: TrafficRateOptionType) => (\n                    <div key={grpcOption.id} className={menuEntryStyle}>\n                      <label\n                        key={grpcOption.id}\n                        className={!!grpcOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n                        style={{ paddingLeft: '35px' }}\n                      >\n                        <Radio\n                          id={grpcOption.id}\n                          style={{ paddingLeft: '5px' }}\n                          name=\"grpcOptions\"\n                          isChecked={grpcOption.isChecked}\n                          label={grpcOption.labelText}\n                          onChange={this.toggleTrafficRateGrpc}\n                          value={grpcOption.id}\n                        />\n                      </label>\n                      {!!grpcOption.tooltip && (\n                        <Tooltip\n                          key={`tooltip_${grpcOption.id}`}\n                          position={TooltipPosition.right}\n                          content={grpcOption.tooltip}\n                        >\n                          <KialiIcon.Info className={infoStyle} />\n                        </Tooltip>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n              {trafficRateOption.id === TrafficRate.HTTP_GROUP && httpOptions.some(o => o.isChecked) && (\n                <div>\n                  {httpOptions.map((httpOption: TrafficRateOptionType) => (\n                    <div key={httpOption.id} className={menuEntryStyle}>\n                      <label\n                        key={httpOption.id}\n                        className={!!httpOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n                        style={{ paddingLeft: '35px' }}\n                      >\n                        <Radio\n                          id={httpOption.id}\n                          style={{ paddingLeft: '5px' }}\n                          name=\"httpOptions\"\n                          isChecked={httpOption.isChecked}\n                          label={httpOption.labelText}\n                          onChange={this.toggleTrafficRateHttp}\n                          value={httpOption.id}\n                        />\n                      </label>\n                      {!!httpOption.tooltip && (\n                        <Tooltip\n                          key={`tooltip_${httpOption.id}`}\n                          position={TooltipPosition.right}\n                          content={httpOption.tooltip}\n                        >\n                          <KialiIcon.Info className={infoStyle} />\n                        </Tooltip>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n              {trafficRateOption.id === TrafficRate.TCP_GROUP && tcpOptions.some(o => o.isChecked) && (\n                <div>\n                  {tcpOptions.map((tcpOption: TrafficRateOptionType) => (\n                    <div key={tcpOption.id} className={menuEntryStyle}>\n                      <label\n                        key={tcpOption.id}\n                        className={!!tcpOption.tooltip ? itemStyleWithInfo : itemStyleWithoutInfo}\n                        style={{ paddingLeft: '35px' }}\n                      >\n                        <Radio\n                          id={tcpOption.id}\n                          style={{ paddingLeft: '5px' }}\n                          name=\"tcpOptions\"\n                          isChecked={tcpOption.isChecked}\n                          label={tcpOption.labelText}\n                          onChange={this.toggleTrafficRateTcp}\n                          value={tcpOption.id}\n                        />\n                      </label>\n                      {!!tcpOption.tooltip && (\n                        <Tooltip\n                          key={`tooltip_${tcpOption.id}`}\n                          position={TooltipPosition.right}\n                          content={tcpOption.tooltip}\n                        >\n                          <KialiIcon.Info className={infoStyle} />\n                        </Tooltip>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </BoundingClientAwareComponent>\n    );\n  }\n\n  private toggleTrafficRate = (_, event) => {\n    const rate = event.target.value as TrafficRate;\n    if (this.props.trafficRates.includes(rate)) {\n      let newRates;\n      switch (rate) {\n        case TrafficRate.GRPC_GROUP:\n          newRates = this.props.trafficRates.filter(r => !isGrpcRate(r));\n          break;\n        case TrafficRate.HTTP_GROUP:\n          newRates = this.props.trafficRates.filter(r => !isHttpRate(r));\n          break;\n        case TrafficRate.TCP_GROUP:\n          newRates = this.props.trafficRates.filter(r => !isTcpRate(r));\n          break;\n        default:\n          newRates = this.props.trafficRates.filter(r => r !== rate);\n      }\n      this.props.setTrafficRates(newRates);\n    } else {\n      switch (rate) {\n        case TrafficRate.GRPC_GROUP:\n          this.props.setTrafficRates([...this.props.trafficRates, rate, TrafficRate.GRPC_REQUEST]);\n          break;\n        case TrafficRate.HTTP_GROUP:\n          this.props.setTrafficRates([...this.props.trafficRates, rate, TrafficRate.HTTP_REQUEST]);\n          break;\n        case TrafficRate.TCP_GROUP:\n          this.props.setTrafficRates([...this.props.trafficRates, rate, TrafficRate.TCP_SENT]);\n          break;\n        default:\n          this.props.setTrafficRates([...this.props.trafficRates, rate]);\n      }\n    }\n  };\n\n  private toggleTrafficRateGrpc = (_, event) => {\n    const rate = event.target.value as TrafficRate;\n    const newRates = this.props.trafficRates.filter(r => !isGrpcRate(r));\n    this.props.setTrafficRates([...newRates, TrafficRate.GRPC_GROUP, rate]);\n  };\n\n  private toggleTrafficRateHttp = (_, event) => {\n    const rate = event.target.value as TrafficRate;\n    const newRates = this.props.trafficRates.filter(r => !isHttpRate(r));\n    this.props.setTrafficRates([...newRates, TrafficRate.HTTP_GROUP, rate]);\n  };\n\n  private toggleTrafficRateTcp = (_, event) => {\n    const rate = event.target.value as TrafficRate;\n    const newRates = this.props.trafficRates.filter(r => !isTcpRate(r));\n    this.props.setTrafficRates([...newRates, TrafficRate.TCP_GROUP, rate]);\n  };\n}\n\n// Allow Redux to map sections of our global app state to our props\nconst mapStateToProps = (state: KialiAppState) => ({\n  trafficRates: trafficRatesSelector(state)\n});\n\n// Map our actions to Redux\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch)\n  };\n};\n\n// hook up to Redux for our State to be mapped to props\nconst GraphTrafficContainer = connect(mapStateToProps, mapDispatchToProps)(GraphTraffic);\nexport default GraphTrafficContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/Charts/Dashboard.tsx\";\nimport * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { ChartThemeColor, ChartThemeVariant, getTheme } from '@patternfly/react-charts';\nimport { getDataSupplier } from 'utils/VictoryChartsUtils';\nimport KChart from './KChart';\nexport var Dashboard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  var _super = _createSuper(Dashboard);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _super.call(this, props);\n\n    _this.getChartHeight = function () {\n      if (_this.state.maximizedChart) {\n        return _this.props.dashboardHeight;\n      } // Dashboards define the rows that are used\n      // Columns are defined using the spans field in the charts definition using a flex strategy\n      // When columns span the grid (12 spans) charts move to the next row\n      // By default metrics use a 2 row layout\n\n\n      var rows = _this.props.dashboard.rows > 0 ? _this.props.dashboard.rows : 2;\n      return _this.props.dashboardHeight / rows;\n    };\n\n    _this.onToggleMaximized = function (chartKey) {\n      var maximized = _this.state.maximizedChart ? undefined : chartKey;\n\n      _this.setState({\n        maximizedChart: maximized\n      });\n\n      _this.props.expandHandler(maximized);\n    };\n\n    _this.state = {\n      maximizedChart: props.maximizedChart\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.maximizedChart) {\n        var _chart = this.props.dashboard.charts.find(function (c) {\n          return c.name === _this2.state.maximizedChart;\n        });\n\n        if (_chart) {\n          return this.renderChart(_chart);\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, this.props.dashboard.charts.map(function (c) {\n        return /*#__PURE__*/React.createElement(GridItem, {\n          span: c.spans,\n          key: c.name,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }\n        }, _this2.renderChart(c));\n      }));\n    }\n  }, {\n    key: \"renderChart\",\n    value: function renderChart(chart) {\n      var _this3 = this;\n\n      var colors = this.props.colors || getTheme(ChartThemeColor.multi, ChartThemeVariant.default).chart.colorScale;\n      var dataSupplier = getDataSupplier(chart, {\n        values: this.props.labelValues,\n        prettifier: this.props.labelPrettifier\n      }, colors);\n      var onClick = undefined;\n\n      if (this.props.onClick) {\n        onClick = function onClick(datum) {\n          return _this3.props.onClick(chart, datum);\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(KChart, {\n        key: chart.name,\n        chartHeight: this.getChartHeight(),\n        chart: chart,\n        showSpans: this.props.showSpans,\n        data: dataSupplier(),\n        onToggleMaximized: function onToggleMaximized() {\n          return _this3.onToggleMaximized(chart.name);\n        },\n        isMaximized: this.state.maximizedChart !== undefined,\n        overlay: chart.xAxis === 'series' ? undefined : this.props.overlay,\n        onClick: onClick,\n        brushHandlers: this.props.brushHandlers,\n        timeWindow: this.props.timeWindow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);","map":{"version":3,"sources":["/root/GraduateProject/src/components/Charts/Dashboard.tsx"],"names":["React","Grid","GridItem","ChartThemeColor","ChartThemeVariant","getTheme","getDataSupplier","KChart","Dashboard","props","getChartHeight","state","maximizedChart","dashboardHeight","rows","dashboard","onToggleMaximized","chartKey","maximized","undefined","setState","expandHandler","chart","charts","find","c","name","renderChart","map","spans","colors","multi","default","colorScale","dataSupplier","values","labelValues","prettifier","labelPrettifier","onClick","datum","showSpans","xAxis","overlay","brushHandlers","timeWindow","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,wBAA/B;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,QAA7C,QAA6D,0BAA7D;AAIA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAyBA,WAAaC,SAAb;AAAA;;AAAA;;AACE,qBAAYC,KAAZ,EAA6B;AAAA;;AAAA;;AAC3B,8BAAMA,KAAN;;AAD2B,UA4BrBC,cA5BqB,GA4BJ,YAAc;AACrC,UAAI,MAAKC,KAAL,CAAWC,cAAf,EAA+B;AAC7B,eAAO,MAAKH,KAAL,CAAWI,eAAlB;AACD,OAHoC,CAIrC;AACA;AACA;AACA;;;AACA,UAAMC,IAAI,GAAG,MAAKL,KAAL,CAAWM,SAAX,CAAqBD,IAArB,GAA4B,CAA5B,GAAgC,MAAKL,KAAL,CAAWM,SAAX,CAAqBD,IAArD,GAA4D,CAAzE;AACA,aAAO,MAAKL,KAAL,CAAWI,eAAX,GAA6BC,IAApC;AACD,KAtC4B;;AAAA,UAoErBE,iBApEqB,GAoED,UAACC,QAAD,EAA4B;AACtD,UAAMC,SAAS,GAAG,MAAKP,KAAL,CAAWC,cAAX,GAA4BO,SAA5B,GAAwCF,QAA1D;;AACA,YAAKG,QAAL,CAAc;AAAER,QAAAA,cAAc,EAAEM;AAAlB,OAAd;;AACA,YAAKT,KAAL,CAAWY,aAAX,CAAyBH,SAAzB;AACD,KAxE4B;;AAE3B,UAAKP,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAEH,KAAK,CAACG;AADX,KAAb;AAF2B;AAK5B;;AANH;AAAA;AAAA,WAQE,kBAAS;AAAA;;AACP,UAAI,KAAKD,KAAL,CAAWC,cAAf,EAA+B;AAC7B,YAAMU,MAAK,GAAG,KAAKb,KAAL,CAAWM,SAAX,CAAqBQ,MAArB,CAA4BC,IAA5B,CAAiC,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,IAAF,KAAW,MAAI,CAACf,KAAL,CAAWC,cAA1B;AAAA,SAAlC,CAAd;;AACA,YAAIU,MAAJ,EAAW;AACT,iBAAO,KAAKK,WAAL,CAAiBL,MAAjB,CAAP;AACD;AACF;;AAED,0BACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKb,KAAL,CAAWM,SAAX,CAAqBQ,MAArB,CAA4BK,GAA5B,CAAgC,UAAAH,CAAC,EAAI;AACpC,4BACE,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAEA,CAAC,CAACI,KAAlB;AAAyB,UAAA,GAAG,EAAEJ,CAAC,CAACC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,MAAI,CAACC,WAAL,CAAiBF,CAAjB,CADH,CADF;AAKD,OANA,CADH,CADF;AAWD;AA3BH;AAAA;AAAA,WAyCE,qBAAoBH,KAApB,EAAuC;AAAA;;AACrC,UAAMQ,MAAM,GAAG,KAAKrB,KAAL,CAAWqB,MAAX,IAAqBzB,QAAQ,CAACF,eAAe,CAAC4B,KAAjB,EAAwB3B,iBAAiB,CAAC4B,OAA1C,CAAR,CAA2DV,KAA3D,CAAiEW,UAArG;AACA,UAAMC,YAAY,GAAG5B,eAAe,CAClCgB,KADkC,EAElC;AAAEa,QAAAA,MAAM,EAAE,KAAK1B,KAAL,CAAW2B,WAArB;AAAkCC,QAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAW6B;AAAzD,OAFkC,EAGlCR,MAHkC,CAApC;AAKA,UAAIS,OAAsD,GAAGpB,SAA7D;;AACA,UAAI,KAAKV,KAAL,CAAW8B,OAAf,EAAwB;AACtBA,QAAAA,OAAO,GAAG,iBAACC,KAAD;AAAA,iBAA2B,MAAI,CAAC/B,KAAL,CAAW8B,OAAX,CAAoBjB,KAApB,EAA2BkB,KAA3B,CAA3B;AAAA,SAAV;AACD;;AACD,0BACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAElB,KAAK,CAACI,IADb;AAEE,QAAA,WAAW,EAAE,KAAKhB,cAAL,EAFf;AAGE,QAAA,KAAK,EAAEY,KAHT;AAIE,QAAA,SAAS,EAAE,KAAKb,KAAL,CAAWgC,SAJxB;AAKE,QAAA,IAAI,EAAEP,YAAY,EALpB;AAME,QAAA,iBAAiB,EAAE;AAAA,iBAAM,MAAI,CAAClB,iBAAL,CAAuBM,KAAK,CAACI,IAA7B,CAAN;AAAA,SANrB;AAOE,QAAA,WAAW,EAAE,KAAKf,KAAL,CAAWC,cAAX,KAA8BO,SAP7C;AAQE,QAAA,OAAO,EAAEG,KAAK,CAACoB,KAAN,KAAgB,QAAhB,GAA2BvB,SAA3B,GAAuC,KAAKV,KAAL,CAAWkC,OAR7D;AASE,QAAA,OAAO,EAAEJ,OATX;AAUE,QAAA,aAAa,EAAE,KAAK9B,KAAL,CAAWmC,aAV5B;AAWE,QAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWoC,UAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAeD;AAnEH;;AAAA;AAAA,EAAmD7C,KAAK,CAAC8C,SAAzD","sourcesContent":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { ChartThemeColor, ChartThemeVariant, getTheme } from '@patternfly/react-charts';\n\nimport { AllPromLabelsValues } from 'types/Metrics';\nimport { ChartModel, DashboardModel } from 'types/Dashboards';\nimport { getDataSupplier } from 'utils/VictoryChartsUtils';\nimport { Overlay } from 'types/Overlay';\nimport KChart from './KChart';\nimport { LineInfo, RawOrBucket } from 'types/VictoryChartInfo';\nimport { BrushHandlers } from './Container';\n\nexport type Props<T extends LineInfo> = {\n  colors?: string[];\n  dashboard: DashboardModel;\n  maximizedChart?: string;\n  expandHandler: (expandedChart?: string) => void;\n  labelValues: AllPromLabelsValues;\n  labelPrettifier?: (key: string, value: string) => string;\n  onClick?: (chart: ChartModel, datum: RawOrBucket<T>) => void;\n  brushHandlers?: BrushHandlers;\n  template?: string;\n  dashboardHeight: number;\n  showSpans: boolean;\n  customMetric?: boolean;\n  overlay?: Overlay<T>;\n  timeWindow?: [Date, Date];\n};\n\ntype State = {\n  maximizedChart?: string;\n};\n\nexport class Dashboard<T extends LineInfo> extends React.Component<Props<T>, State> {\n  constructor(props: Props<T>) {\n    super(props);\n    this.state = {\n      maximizedChart: props.maximizedChart\n    };\n  }\n\n  render() {\n    if (this.state.maximizedChart) {\n      const chart = this.props.dashboard.charts.find(c => c.name === this.state.maximizedChart);\n      if (chart) {\n        return this.renderChart(chart);\n      }\n    }\n\n    return (\n      <Grid>\n        {this.props.dashboard.charts.map(c => {\n          return (\n            <GridItem span={c.spans} key={c.name}>\n              {this.renderChart(c)}\n            </GridItem>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  private getChartHeight = (): number => {\n    if (this.state.maximizedChart) {\n      return this.props.dashboardHeight;\n    }\n    // Dashboards define the rows that are used\n    // Columns are defined using the spans field in the charts definition using a flex strategy\n    // When columns span the grid (12 spans) charts move to the next row\n    // By default metrics use a 2 row layout\n    const rows = this.props.dashboard.rows > 0 ? this.props.dashboard.rows : 2;\n    return this.props.dashboardHeight / rows;\n  };\n\n  private renderChart(chart: ChartModel) {\n    const colors = this.props.colors || getTheme(ChartThemeColor.multi, ChartThemeVariant.default).chart.colorScale;\n    const dataSupplier = getDataSupplier(\n      chart,\n      { values: this.props.labelValues, prettifier: this.props.labelPrettifier },\n      colors\n    );\n    let onClick: ((datum: RawOrBucket<T>) => void) | undefined = undefined;\n    if (this.props.onClick) {\n      onClick = (datum: RawOrBucket<T>) => this.props.onClick!(chart, datum);\n    }\n    return (\n      <KChart\n        key={chart.name}\n        chartHeight={this.getChartHeight()}\n        chart={chart}\n        showSpans={this.props.showSpans}\n        data={dataSupplier()}\n        onToggleMaximized={() => this.onToggleMaximized(chart.name)}\n        isMaximized={this.state.maximizedChart !== undefined}\n        overlay={chart.xAxis === 'series' ? undefined : this.props.overlay}\n        onClick={onClick}\n        brushHandlers={this.props.brushHandlers}\n        timeWindow={this.props.timeWindow}\n      />\n    );\n  }\n\n  private onToggleMaximized = (chartKey: string): void => {\n    const maximized = this.state.maximizedChart ? undefined : chartKey;\n    this.setState({ maximizedChart: maximized });\n    this.props.expandHandler(maximized);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
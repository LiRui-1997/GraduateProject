{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { TextInputTypes } from '@patternfly/react-core'; // FilterValue maps a Patternfly property. Modify with care.\n\nvar NonInputTypes;\n\n(function (NonInputTypes) {\n  NonInputTypes[\"typeAhead\"] = \"typeahead\";\n  NonInputTypes[\"select\"] = \"select\";\n  NonInputTypes[\"label\"] = \"label\";\n  NonInputTypes[\"nsLabel\"] = \"nsLabel\";\n})(NonInputTypes || (NonInputTypes = {}));\n\nexport var FilterTypes = _objectSpread(_objectSpread({}, TextInputTypes), NonInputTypes);\nexport var FILTER_ACTION_APPEND = 'append';\nexport var FILTER_ACTION_UPDATE = 'update';\nexport var ID_LABEL_OPERATION = 'opLabel';\nexport var DEFAULT_LABEL_OPERATION = 'or';","map":{"version":3,"sources":["/root/kiali-ui/src/types/Filters.ts"],"names":["TextInputTypes","NonInputTypes","FilterTypes","FILTER_ACTION_APPEND","FILTER_ACTION_UPDATE","ID_LABEL_OPERATION","DEFAULT_LABEL_OPERATION"],"mappings":";AAAA,SAASA,cAAT,QAA+B,wBAA/B,C,CAEA;;IAMKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAOL,OAAO,IAAMC,WAAW,mCACnBF,cADmB,GAEnBC,aAFmB,CAAjB;AAsBP,OAAO,IAAME,oBAAoB,GAAG,QAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,QAA7B;AASP,OAAO,IAAMC,kBAAkB,GAAG,SAA3B;AACP,OAAO,IAAMC,uBAAuC,GAAG,IAAhD","sourcesContent":["import { TextInputTypes } from '@patternfly/react-core';\n\n// FilterValue maps a Patternfly property. Modify with care.\nexport interface FilterValue {\n  id: string;\n  title: string;\n}\n\nenum NonInputTypes {\n  typeAhead = 'typeahead',\n  select = 'select',\n  label = 'label',\n  nsLabel = 'nsLabel'\n}\n\nexport const FilterTypes = {\n  ...TextInputTypes,\n  ...NonInputTypes\n};\n\ntype FilterTypes = NonInputTypes | TextInputTypes;\n\n// FilterType maps a Patternfly property. Modify with care.\nexport interface FilterType {\n  id: string;\n  title: string;\n  placeholder: string;\n  filterType: FilterTypes;\n  action: string;\n  filterValues: FilterValue[];\n  loader?: () => Promise<FilterValue[]>;\n}\n\nexport interface RunnableFilter<T> extends FilterType {\n  run: (item: T, filters: ActiveFiltersInfo) => boolean;\n}\n\nexport const FILTER_ACTION_APPEND = 'append';\nexport const FILTER_ACTION_UPDATE = 'update';\n\nexport interface ActiveFilter {\n  id: string;\n  title: string;\n  value: string;\n}\n\nexport type LabelOperation = 'and' | 'or';\nexport const ID_LABEL_OPERATION = 'opLabel';\nexport const DEFAULT_LABEL_OPERATION: LabelOperation = 'or';\n\nexport interface ActiveFiltersInfo {\n  filters: ActiveFilter[];\n  op: LabelOperation;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphFind.tsx\";\nimport * as React from 'react';\nimport { Button, Tooltip, ButtonVariant, TextInput, Form } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { findValueSelector, hideValueSelector, edgeLabelsSelector } from '../../../store/Selectors';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport GraphHelpFind from '../../../pages/Graph/GraphHelpFind';\nimport { CyNode, CyEdge } from '../../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport * as CytoscapeGraphUtils from '../../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { EdgeLabelMode, NodeType } from '../../../types/Graph';\nimport * as AlertUtils from '../../../utils/AlertUtils';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { style } from 'typestyle';\nimport TourStopContainer from 'components/Tour/TourStop';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport { AutoComplete } from 'utils/AutoComplete';\nimport { DEGRADED, FAILURE, HEALTHY } from 'types/Health';\nimport { GraphFindOptions } from './GraphFindOptions';\nimport history, { HistoryManager, URLParam } from '../../../app/History';\nvar inputWidth = {\n  width: 'var(--graph-find-input--width)'\n}; // reduce toolbar padding from 20px to 10px to save space\n\nvar thinGroupStyle = style({\n  paddingLeft: '10px',\n  paddingRight: '10px'\n});\nvar operands = ['%grpcerr', '%grpctraffic', '%httperr', '%httptraffic', 'app', 'circuitbreaker', 'cluster', 'destprincipal', 'faultinjection', 'grpc', 'grpcerr', 'grpcin', 'grpcout', 'healthy', 'http', 'httpin', 'httpout', 'idle', 'mtls', 'name', 'namespace', 'node', 'operation', 'outside', 'protocol', 'requestrouting', 'requesttimeout', 'responsetime', 'service', 'serviceentry', 'sidecar', 'sourceprincipal', 'tcp', 'tcptrafficshifting', 'throughput', 'traffic', 'trafficshifting', 'trafficsource', 'version', 'virtualservice', 'tcpin', 'tcpout', 'workload', 'workloadentry'];\nexport var GraphFind = /*#__PURE__*/function (_React$Component) {\n  _inherits(GraphFind, _React$Component);\n\n  var _super = _createSuper(GraphFind);\n\n  function GraphFind(props) {\n    var _this;\n\n    _classCallCheck(this, GraphFind);\n\n    _this = _super.call(this, props);\n    _this.findAutoComplete = void 0;\n    _this.findInputRef = void 0;\n    _this.hiddenElements = void 0;\n    _this.hideAutoComplete = void 0;\n    _this.hideInputRef = void 0;\n    _this.removedElements = void 0;\n\n    _this.toggleFindHelp = function () {\n      _this.props.toggleFindHelp();\n    };\n\n    _this.checkSpecialKeyFind = function (event) {\n      var keyCode = event.keyCode ? event.keyCode : event.which;\n\n      switch (keyCode) {\n        case 9:\n          // tab (autocomplete)\n          event.preventDefault();\n\n          var next = _this.findAutoComplete.next();\n\n          if (!!next) {\n            _this.findInputRef.value = next;\n            _this.findInputRef.scrollLeft = _this.findInputRef.scrollWidth;\n\n            _this.setState({\n              findInputValue: next,\n              findError: undefined\n            });\n          }\n\n          break;\n\n        case 13:\n          // return (submit)\n          event.preventDefault();\n\n          _this.submitFind();\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.updateFindOption = function (key) {\n      _this.setFind(key);\n    };\n\n    _this.updateFind = function (val) {\n      if ('' === val) {\n        _this.setFind('');\n      } else {\n        var diff = Math.abs(val.length - _this.state.findInputValue.length);\n\n        _this.findAutoComplete.setInput(val, [' ', '!']);\n\n        _this.setState({\n          findInputValue: val,\n          findError: undefined\n        }); // submit if length change is greater than a single key, assume browser suggestion clicked or user paste\n\n\n        if (diff > 1) {\n          _this.props.setFindValue(val);\n        }\n      }\n    };\n\n    _this.setFind = function (val) {\n      // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n      _this.findInputRef.value = val;\n      var htmlInputElement = document.getElementById('graph_find');\n\n      if (htmlInputElement !== null) {\n        htmlInputElement.value = val;\n      }\n\n      _this.findAutoComplete.setInput(val);\n\n      _this.setState({\n        findInputValue: val,\n        findError: undefined\n      });\n\n      _this.props.setFindValue(val);\n    };\n\n    _this.submitFind = function () {\n      if (_this.props.findValue !== _this.state.findInputValue) {\n        _this.props.setFindValue(_this.state.findInputValue);\n      }\n    };\n\n    _this.checkSpecialKeyHide = function (event) {\n      var keyCode = event.keyCode ? event.keyCode : event.which;\n\n      switch (keyCode) {\n        case 9:\n          // tab (autocomplete)\n          event.preventDefault();\n\n          var next = _this.hideAutoComplete.next();\n\n          if (!!next) {\n            _this.hideInputRef.value = next;\n            _this.hideInputRef.scrollLeft = _this.hideInputRef.scrollWidth;\n\n            _this.setState({\n              hideInputValue: next,\n              hideError: undefined\n            });\n          }\n\n          break;\n\n        case 13:\n          // return (submit)\n          event.preventDefault();\n\n          _this.submitHide();\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.updateHideOption = function (key) {\n      _this.setHide(key);\n    };\n\n    _this.updateHide = function (val) {\n      if ('' === val) {\n        _this.setHide('');\n      } else {\n        var diff = Math.abs(val.length - _this.state.hideInputValue.length);\n\n        _this.hideAutoComplete.setInput(val, [' ', '!']);\n\n        _this.setState({\n          hideInputValue: val,\n          hideError: undefined\n        }); // submit if length change is greater than a single key, assume browser suggestion clicked or user paste\n\n\n        if (diff > 1) {\n          _this.props.setHideValue(val);\n        }\n      }\n    };\n\n    _this.submitHide = function () {\n      if (_this.props.hideValue !== _this.state.hideInputValue) {\n        _this.props.setHideValue(_this.state.hideInputValue);\n      }\n    };\n\n    _this.setHide = function (val) {\n      // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n      _this.hideInputRef.value = val;\n      var htmlInputElement = document.getElementById('graph_hide');\n\n      if (htmlInputElement !== null) {\n        htmlInputElement.value = val;\n      }\n\n      _this.hideAutoComplete.setInput(val);\n\n      _this.setState({\n        hideInputValue: val,\n        hideError: undefined\n      });\n\n      _this.props.setHideValue(val);\n    };\n\n    _this.handleHide = function (cy, hideChanged, graphChanged, compressOnHideChanged) {\n      var selector = _this.parseValue(_this.props.hideValue, false);\n\n      console.debug(\"Hide selector=[\".concat(selector, \"]\"));\n      cy.startBatch(); // unhide hidden elements when we are dealing with the same graph. Either way,release for garbage collection\n\n      if (!!_this.hiddenElements && !graphChanged) {\n        _this.hiddenElements.style({\n          visibility: 'visible'\n        });\n      }\n\n      _this.hiddenElements = undefined; // restore removed elements when we are working with the same graph. Either way,release for garbage collection.  If the graph has changed\n\n      if (!!_this.removedElements && !graphChanged) {\n        _this.removedElements.restore();\n      }\n\n      _this.removedElements = undefined;\n\n      if (selector) {\n        // select the new hide-hits\n        var hiddenElements = cy.$(selector); // add the edges connected to hidden nodes\n\n        hiddenElements = hiddenElements.add(hiddenElements.connectedEdges()); // add nodes with only hidden edges (keep idle nodes as that is an explicit option)\n\n        var visibleElements = hiddenElements.absoluteComplement();\n        var nodesWithVisibleEdges = visibleElements.edges().connectedNodes();\n        var nodesWithOnlyHiddenEdges = visibleElements.nodes(\"[^\".concat(CyNode.isIdle, \"]\")).subtract(nodesWithVisibleEdges);\n        hiddenElements = hiddenElements.add(nodesWithOnlyHiddenEdges); // subtract any appbox hits, we only hide empty appboxes\n\n        hiddenElements = hiddenElements.subtract(hiddenElements.filter('$node[isBox]'));\n\n        if (_this.props.compressOnHide) {\n          _this.removedElements = cy.remove(hiddenElements); // now subtract any appboxes that don't have any visible children\n\n          var hiddenAppBoxes = cy.$('$node[isBox]').subtract(cy.$('$node[isBox] > :inside'));\n          _this.removedElements = _this.removedElements.add(cy.remove(hiddenAppBoxes));\n        } else {\n          // set the remaining hide-hits hidden\n          _this.hiddenElements = hiddenElements;\n\n          _this.hiddenElements.style({\n            visibility: 'hidden'\n          }); // now subtract any appboxes that don't have any visible children\n\n\n          var _hiddenAppBoxes = cy.$('$node[isBox]').subtract(cy.$('$node[isBox] > :visible'));\n\n          _hiddenAppBoxes.style({\n            visibility: 'hidden'\n          });\n\n          _this.hiddenElements = _this.hiddenElements.add(_hiddenAppBoxes);\n        }\n      }\n\n      cy.endBatch();\n      var hasRemovedElements = !!_this.removedElements && _this.removedElements.length > 0;\n\n      if (hideChanged || compressOnHideChanged && selector || hasRemovedElements) {\n        CytoscapeGraphUtils.runLayout(cy, _this.props.layout);\n      }\n    };\n\n    _this.handleFind = function (cy) {\n      var selector = _this.parseValue(_this.props.findValue, true);\n\n      console.debug(\"Find selector=[\".concat(selector, \"]\"));\n      cy.startBatch(); // unhighlight old find-hits\n\n      cy.elements('*.find').removeClass('find');\n\n      if (selector) {\n        // add new find-hits\n        cy.elements(selector).addClass('find');\n      }\n\n      cy.endBatch();\n    };\n\n    _this.parseValue = function (val, isFind) {\n      var preparedVal = _this.prepareValue(val);\n\n      if (!preparedVal) {\n        return undefined;\n      } // generate separate selectors for each disjunctive clause and then stitch them together. This\n      // lets us mix node and edge criteria.\n\n\n      var orClauses = preparedVal.split(' OR ');\n      var orSelector;\n\n      var _iterator = _createForOfIteratorHelper(orClauses),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var clause = _step.value;\n          var expressions = clause.split(' AND ');\n          var conjunctive = expressions.length > 1;\n          var selector = void 0;\n\n          var _iterator2 = _createForOfIteratorHelper(expressions),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var expression = _step2.value;\n\n              var parsedExpression = _this.parseExpression(expression, conjunctive, isFind);\n\n              if (!parsedExpression) {\n                return undefined;\n              }\n\n              selector = _this.appendSelector(selector, parsedExpression, isFind);\n\n              if (!selector) {\n                return undefined;\n              }\n            } // parsed successfully, clear any previous error message\n\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _this.setError(undefined, isFind);\n\n          orSelector = !orSelector ? selector : \"\".concat(orSelector, \",\").concat(selector);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return orSelector;\n    };\n\n    _this.prepareValue = function (val) {\n      // remove double spaces\n      val = val.replace(/ +(?= )/g, ''); // remove unnecessary mnemonic qualifiers on unary operators (e.g. 'has cb' -> 'cb').\n\n      val = ' ' + val;\n      val = val.replace(/ is /gi, ' ');\n      val = val.replace(/ has /gi, ' ');\n      val = val.replace(/ !\\s*is /gi, ' ! ');\n      val = val.replace(/ !\\s*has /gi, ' ! '); // replace string operators\n\n      val = val.replace(/ not /gi, ' !');\n      val = val.replace(/ !\\s*contains /gi, ' !*= ');\n      val = val.replace(/ !\\s*startswith /gi, ' !^= ');\n      val = val.replace(/ !\\s*endswith /gi, ' !$= ');\n      val = val.replace(/ contains /gi, ' *= ');\n      val = val.replace(/ startswith /gi, ' ^= ');\n      val = val.replace(/ endswith /gi, ' $= '); // uppercase conjunctions\n\n      val = val.replace(/ and /gi, ' AND ');\n      val = val.replace(/ or /gi, ' OR ');\n      return val.trim();\n    };\n\n    _this.parseExpression = function (expression, conjunctive, isFind) {\n      var op;\n\n      if (expression.includes('!=')) {\n        op = '!=';\n      } else if (expression.includes('!*=')) {\n        op = '!*=';\n      } else if (expression.includes('!$=')) {\n        op = '!$=';\n      } else if (expression.includes('!^=')) {\n        op = '!^=';\n      } else if (expression.includes('>=')) {\n        op = '>=';\n      } else if (expression.includes('<=')) {\n        op = '<=';\n      } else if (expression.includes('*=')) {\n        op = '*='; // substring\n      } else if (expression.includes('$=')) {\n        op = '$='; // starts with\n      } else if (expression.includes('^=')) {\n        op = '^='; // ends with\n      } else if (expression.includes('=')) {\n        op = '=';\n      } else if (expression.includes('>')) {\n        op = '>';\n      } else if (expression.includes('<')) {\n        op = '<';\n      } else if (expression.includes('!')) {\n        op = '!';\n      }\n\n      if (!op) {\n        if (expression.split(' ').length > 1) {\n          return _this.setError(\"No valid operator found in expression\", isFind);\n        }\n\n        var unaryExpression = _this.parseUnaryFindExpression(expression.trim(), false);\n\n        return unaryExpression ? unaryExpression : _this.setError(\"Invalid Node or Edge operand\", isFind);\n      }\n\n      var tokens = expression.split(op);\n\n      if (op === '!') {\n        var _unaryExpression = _this.parseUnaryFindExpression(tokens[1].trim(), true);\n\n        return _unaryExpression ? _unaryExpression : _this.setError(\"Invalid Node or Edge operand\", isFind);\n      }\n\n      var field = tokens[0].trim();\n      var val = tokens[1].trim();\n\n      switch (field.toLowerCase()) {\n        //\n        // nodes...\n        //\n        case 'app':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.app, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'cluster':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.cluster, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'grpcin':\n          {\n            var s = _this.getNumericSelector(CyNode.grpcIn, op, val, expression, isFind);\n\n            return s ? {\n              target: 'node',\n              selector: s\n            } : undefined;\n          }\n\n        case 'grpcout':\n          {\n            var _s = _this.getNumericSelector(CyNode.grpcOut, op, val, expression, isFind);\n\n            return _s ? {\n              target: 'node',\n              selector: _s\n            } : undefined;\n          }\n\n        case 'httpin':\n          {\n            var _s2 = _this.getNumericSelector(CyNode.httpIn, op, val, expression, isFind);\n\n            return _s2 ? {\n              target: 'node',\n              selector: _s2\n            } : undefined;\n          }\n\n        case 'httpout':\n          {\n            var _s3 = _this.getNumericSelector(CyNode.httpOut, op, val, expression, isFind);\n\n            return _s3 ? {\n              target: 'node',\n              selector: _s3\n            } : undefined;\n          }\n\n        case 'name':\n          {\n            var isNegation = op.startsWith('!');\n\n            if (conjunctive) {\n              return _this.setError(\"Can not use 'AND' with 'name' operand\", isFind);\n            }\n\n            var agg = \"[\".concat(CyNode.aggregateValue, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\");\n            var app = \"[\".concat(CyNode.app, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\");\n            var svc = \"[\".concat(CyNode.service, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\");\n            var wl = \"[\".concat(CyNode.workload, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\");\n            return {\n              target: 'node',\n              selector: isNegation ? \"\".concat(agg).concat(app).concat(svc).concat(wl) : \"\".concat(agg, \",\").concat(app, \",\").concat(svc, \",\").concat(wl)\n            };\n          }\n\n        case 'node':\n          var nodeType = val.toLowerCase();\n\n          switch (nodeType) {\n            case 'op':\n            case 'operation':\n              nodeType = NodeType.AGGREGATE;\n              break;\n\n            case 'svc':\n              nodeType = NodeType.SERVICE;\n              break;\n\n            case 'wl':\n              nodeType = NodeType.WORKLOAD;\n              break;\n\n            default:\n              break;\n            // no-op\n          }\n\n          switch (nodeType) {\n            case NodeType.AGGREGATE:\n            case NodeType.APP:\n            case NodeType.SERVICE:\n            case NodeType.WORKLOAD:\n            case NodeType.UNKNOWN:\n              return {\n                target: 'node',\n                selector: \"[\".concat(CyNode.nodeType, \" \").concat(op, \" \\\"\").concat(nodeType, \"\\\"]\")\n              };\n\n            default:\n              _this.setError(\"Invalid node type [\".concat(nodeType, \"]. Expected app | operation | service | unknown | workload\"), isFind);\n\n          }\n\n          return undefined;\n\n        case 'ns':\n        case 'namespace':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.namespace, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'op':\n        case 'operation':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.aggregateValue, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'svc':\n        case 'service':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.service, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'tcpin':\n          {\n            var _s4 = _this.getNumericSelector(CyNode.tcpIn, op, val, expression, isFind);\n\n            return _s4 ? {\n              target: 'node',\n              selector: _s4\n            } : undefined;\n          }\n\n        case 'tcpout':\n          {\n            var _s5 = _this.getNumericSelector(CyNode.tcpOut, op, val, expression, isFind);\n\n            return _s5 ? {\n              target: 'node',\n              selector: _s5\n            } : undefined;\n          }\n\n        case 'version':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.version, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'wl':\n        case 'workload':\n          return {\n            target: 'node',\n            selector: \"[\".concat(CyNode.workload, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n        //\n        // edges..\n        //\n\n        case 'destprincipal':\n          if (!_this.props.showSecurity) {\n            AlertUtils.addSuccess('Enabling \"security\" display option for graph find/hide expression');\n\n            _this.props.toggleGraphSecurity();\n          }\n\n          return {\n            target: 'edge',\n            selector: \"[\".concat(CyEdge.destPrincipal, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'grpc':\n          {\n            var _s6 = _this.getNumericSelector(CyEdge.grpc, op, val, expression, isFind);\n\n            return _s6 ? {\n              target: 'edge',\n              selector: _s6\n            } : undefined;\n          }\n\n        case '%grpcerror':\n        case '%grpcerr':\n          {\n            var _s7 = _this.getNumericSelector(CyEdge.grpcPercentErr, op, val, expression, isFind);\n\n            return _s7 ? {\n              target: 'edge',\n              selector: _s7\n            } : undefined;\n          }\n\n        case '%grpctraffic':\n          {\n            var _s8 = _this.getNumericSelector(CyEdge.grpcPercentReq, op, val, expression, isFind);\n\n            return _s8 ? {\n              target: 'edge',\n              selector: _s8\n            } : undefined;\n          }\n\n        case 'http':\n          {\n            var _s9 = _this.getNumericSelector(CyEdge.http, op, val, expression, isFind);\n\n            return _s9 ? {\n              target: 'edge',\n              selector: _s9\n            } : undefined;\n          }\n\n        case '%httperror':\n        case '%httperr':\n          {\n            var _s10 = _this.getNumericSelector(CyEdge.httpPercentErr, op, val, expression, isFind);\n\n            return _s10 ? {\n              target: 'edge',\n              selector: _s10\n            } : undefined;\n          }\n\n        case '%httptraffic':\n          {\n            var _s11 = _this.getNumericSelector(CyEdge.httpPercentReq, op, val, expression, isFind);\n\n            return _s11 ? {\n              target: 'edge',\n              selector: _s11\n            } : undefined;\n          }\n\n        case 'protocol':\n          {\n            return {\n              target: 'edge',\n              selector: \"[\".concat(CyEdge.protocol, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n            };\n          }\n\n        case 'rt':\n        case 'responsetime':\n          {\n            if (!_this.props.edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP)) {\n              AlertUtils.addSuccess('Enabling [P95] \"Response Time\" edge labels for this graph find/hide expression');\n\n              _this.props.setEdgeLabels([].concat(_toConsumableArray(_this.props.edgeLabels), [EdgeLabelMode.RESPONSE_TIME_GROUP, EdgeLabelMode.RESPONSE_TIME_P95]));\n            }\n\n            var _s12 = _this.getNumericSelector(CyEdge.responseTime, op, val, expression, isFind);\n\n            return _s12 ? {\n              target: 'edge',\n              selector: _s12\n            } : undefined;\n          }\n\n        case 'sourceprincipal':\n          if (!_this.props.showSecurity) {\n            AlertUtils.addSuccess('Enabling \"security\" display option for this graph find/hide expression');\n\n            _this.props.toggleGraphSecurity();\n          }\n\n          return {\n            target: 'edge',\n            selector: \"[\".concat(CyEdge.sourcePrincipal, \" \").concat(op, \" \\\"\").concat(val, \"\\\"]\")\n          };\n\n        case 'tcp':\n          {\n            var _s13 = _this.getNumericSelector(CyEdge.tcp, op, val, expression, isFind);\n\n            return _s13 ? {\n              target: 'edge',\n              selector: _s13\n            } : undefined;\n          }\n\n        case 'throughput':\n          {\n            if (!_this.props.edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP)) {\n              AlertUtils.addSuccess('Enabling [Request] \"Throughput\" edge labels for this graph find/hide expression');\n\n              _this.props.setEdgeLabels([].concat(_toConsumableArray(_this.props.edgeLabels), [EdgeLabelMode.THROUGHPUT_GROUP, EdgeLabelMode.THROUGHPUT_REQUEST]));\n            }\n\n            var _s14 = _this.getNumericSelector(CyEdge.throughput, op, val, expression, isFind);\n\n            return _s14 ? {\n              target: 'edge',\n              selector: _s14\n            } : undefined;\n          }\n\n        default:\n          return _this.setError(\"Invalid operand [\".concat(field, \"]\"), isFind);\n      }\n    };\n\n    _this.parseUnaryFindExpression = function (field, isNegation) {\n      switch (field.toLowerCase()) {\n        //\n        // nodes...\n        //\n        case 'cb':\n        case 'circuitbreaker':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasCB, \"]\") : \"[?\".concat(CyNode.hasCB, \"]\")\n          };\n\n        case 'dead':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isDead, \"]\") : \"[?\".concat(CyNode.isDead, \"]\")\n          };\n\n        case 'fi':\n        case 'faultinjection':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasFaultInjection, \"]\") : \"[?\".concat(CyNode.hasFaultInjection, \"]\")\n          };\n\n        case 'inaccessible':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isInaccessible, \"]\") : \"[?\".concat(CyNode.isInaccessible, \"]\")\n          };\n\n        case 'healthy':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[\".concat(CyNode.healthStatus, \" = \\\"\").concat(FAILURE.name, \"\\\"],[\").concat(CyNode.healthStatus, \" = \\\"\").concat(DEGRADED.name, \"\\\"]\") : \"[\".concat(CyNode.healthStatus, \" = \\\"\").concat(HEALTHY.name, \"\\\"]\")\n          };\n\n        case 'idle':\n          if (!_this.props.showIdleNodes) {\n            AlertUtils.addSuccess('Enabling \"idle nodes\" display option for graph find/hide expression');\n\n            _this.props.toggleIdleNodes();\n          }\n\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isIdle, \"]\") : \"[?\".concat(CyNode.isIdle, \"]\")\n          };\n\n        case 'outside':\n        case 'outsider':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isOutside, \"]\") : \"[?\".concat(CyNode.isOutside, \"]\")\n          };\n\n        case 'rr':\n        case 'requestrouting':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasRequestRouting, \"]\") : \"[?\".concat(CyNode.hasRequestRouting, \"]\")\n          };\n\n        case 'rto':\n        case 'requesttimeout':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasRequestTimeout, \"]\") : \"[?\".concat(CyNode.hasRequestTimeout, \"]\")\n          };\n\n        case 'se':\n        case 'serviceentry':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isServiceEntry, \"]\") : \"[?\".concat(CyNode.isServiceEntry, \"]\")\n          };\n\n        case 'sc':\n        case 'sidecar':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[?\".concat(CyNode.hasMissingSC, \"]\") : \"[^\".concat(CyNode.hasMissingSC, \"]\")\n          };\n\n        case 'tcpts':\n        case 'tcptrafficshifting':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasTCPTrafficShifting, \"]\") : \"[?\".concat(CyNode.hasTCPTrafficShifting, \"]\")\n          };\n\n        case 'ts':\n        case 'trafficshifting':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasTrafficShifting, \"]\") : \"[?\".concat(CyNode.hasTrafficShifting, \"]\")\n          };\n\n        case 'trafficsource':\n        case 'root':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.isRoot, \"]\") : \"[?\".concat(CyNode.isRoot, \"]\")\n          };\n\n        case 'vs':\n        case 'virtualservice':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasVS, \"]\") : \"[?\".concat(CyNode.hasVS, \"]\")\n          };\n\n        case 'we':\n        case 'workloadentry':\n          return {\n            target: 'node',\n            selector: isNegation ? \"[^\".concat(CyNode.hasWorkloadEntry, \"]\") : \"[?\".concat(CyNode.hasWorkloadEntry, \"]\")\n          };\n        //\n        // edges...\n        //\n\n        case 'mtls':\n          if (!_this.props.showSecurity) {\n            AlertUtils.addSuccess('Enabling \"security\" display option for graph find/hide expression');\n\n            _this.props.toggleGraphSecurity();\n          }\n\n          return {\n            target: 'edge',\n            selector: isNegation ? \"[\".concat(CyEdge.isMTLS, \" <= 0]\") : \"[\".concat(CyEdge.isMTLS, \" > 0]\")\n          };\n\n        case 'traffic':\n          {\n            return {\n              target: 'edge',\n              selector: isNegation ? \"[^\".concat(CyEdge.hasTraffic, \"]\") : \"[?\".concat(CyEdge.hasTraffic, \"]\")\n            };\n          }\n\n        default:\n          return undefined;\n      }\n    };\n\n    _this.appendSelector = function (selector, parsedExpression, isFind) {\n      if (!selector) {\n        return parsedExpression.target + parsedExpression.selector;\n      }\n\n      if (!selector.startsWith(parsedExpression.target)) {\n        return _this.setError('Invalid expression. Can not AND node and edge criteria.', isFind);\n      }\n\n      return selector + parsedExpression.selector;\n    };\n\n    _this.findAutoComplete = new AutoComplete(operands);\n    _this.hideAutoComplete = new AutoComplete(operands);\n    var findValue = props.findValue ? props.findValue : '';\n    var hideValue = props.hideValue ? props.hideValue : ''; // Let URL override current redux state at construction time. Update URL as needed.\n\n    var urlParams = new URLSearchParams(history.location.search);\n    var urlFind = HistoryManager.getParam(URLParam.GRAPH_FIND, urlParams);\n\n    if (!!urlFind) {\n      if (urlFind !== findValue) {\n        findValue = urlFind;\n        props.setFindValue(urlFind);\n      }\n    } else if (!!findValue) {\n      HistoryManager.setParam(URLParam.GRAPH_FIND, findValue);\n    }\n\n    var urlHide = HistoryManager.getParam(URLParam.GRAPH_HIDE, urlParams);\n\n    if (!!urlHide) {\n      if (urlHide !== hideValue) {\n        hideValue = urlHide;\n        props.setHideValue(urlHide);\n      }\n    } else if (!!hideValue) {\n      HistoryManager.setParam(URLParam.GRAPH_HIDE, hideValue);\n    }\n\n    _this.state = {\n      findInputValue: findValue,\n      hideInputValue: hideValue\n    };\n\n    if (props.showFindHelp) {\n      props.toggleFindHelp();\n    }\n\n    return _this;\n  } // We only update on a change to the find/hide/compress values, or a graph change.  Although we use other props\n  // in processing (compressOnHide, layout, etc), a change to those settings will generate a graph change, so we\n  // wait for the graph change to do the update.\n\n\n  _createClass(GraphFind, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var cyChanged = this.props.cy !== nextProps.cy;\n      var findChanged = this.props.findValue !== nextProps.findValue;\n      var hideChanged = this.props.hideValue !== nextProps.hideValue;\n      var graphChanged = this.props.updateTime !== nextProps.updateTime;\n      var showFindHelpChanged = this.props.showFindHelp !== nextProps.showFindHelp;\n      var findErrorChanged = this.state.findError !== nextState.findError;\n      var hideErrorChanged = this.state.hideError !== nextState.hideError;\n      return cyChanged || findChanged || hideChanged || graphChanged || showFindHelpChanged || findErrorChanged || hideErrorChanged;\n    } // Note that we may have redux hide/find values set at mount-time. But because the toolbar mounts prior to\n    // the graph loading, we can't perform this graph \"post-processing\" until we have a valid cy graph.  But the\n    // find/hide processing will be initiated externally (CytoscapeGraph:processgraphUpdate) when the graph is ready.\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!this.props.cy) {\n        this.hiddenElements = undefined;\n        this.removedElements = undefined;\n        return;\n      }\n\n      var findChanged = this.props.findValue !== prevProps.findValue;\n      var hideChanged = this.props.hideValue !== prevProps.hideValue;\n      var graphChanged = this.props.updateTime !== prevProps.updateTime; // ensure redux state and URL are aligned\n\n      if (findChanged) {\n        if (!this.props.findValue) {\n          HistoryManager.deleteParam(URLParam.GRAPH_FIND, true);\n        } else {\n          HistoryManager.setParam(URLParam.GRAPH_FIND, this.props.findValue);\n        }\n      }\n\n      if (hideChanged) {\n        if (!this.props.hideValue) {\n          HistoryManager.deleteParam(URLParam.GRAPH_HIDE, true);\n        } else {\n          HistoryManager.setParam(URLParam.GRAPH_HIDE, this.props.hideValue);\n        }\n      } // make sure the value is updated if there was a change\n\n\n      if (findChanged || graphChanged && !!this.props.findValue) {\n        // ensure findInputValue is aligned if findValue is set externally (e.g. resetSettings)\n        if (this.state.findInputValue !== this.props.findValue) {\n          this.setFind(this.props.findValue);\n        }\n\n        this.handleFind(this.props.cy);\n      }\n\n      if (hideChanged || graphChanged && !!this.props.hideValue) {\n        // ensure hideInputValue is aligned if hideValue is set externally (e.g. resetSettings)\n        if (this.state.hideInputValue !== this.props.hideValue) {\n          this.setHide(this.props.hideValue);\n        }\n\n        var compressOnHideChanged = this.props.compressOnHide !== prevProps.compressOnHide;\n        this.handleHide(this.props.cy, hideChanged, graphChanged, compressOnHideChanged);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(TourStopContainer, {\n        info: GraphTourStops.Find,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        style: {\n          float: 'left'\n        },\n        isHorizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: thinGroupStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        id: \"graph_find\",\n        name: \"graph_find\",\n        ref: function ref(_ref) {\n          _this2.findInputRef = _ref;\n        },\n        style: _objectSpread({}, inputWidth),\n        type: \"text\",\n        autoComplete: \"on\",\n        isValid: !this.state.findError,\n        onChange: this.updateFind,\n        defaultValue: this.state.findInputValue,\n        onKeyDownCapture: this.checkSpecialKeyFind,\n        placeholder: \"Find...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(GraphFindOptions, {\n        kind: \"find\",\n        onSelect: this.updateFindOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }\n      }), this.props.findValue && /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"ot_clear_find\",\n        position: \"top\",\n        content: \"Clear Find...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          minWidth: '20px',\n          width: '20px',\n          paddingLeft: '5px',\n          paddingRight: '5px',\n          bottom: '1px'\n        },\n        variant: ButtonVariant.control,\n        onClick: function onClick() {\n          return _this2.setFind('');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Close, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(TextInput, {\n        id: \"graph_hide\",\n        name: \"graph_hide\",\n        ref: function ref(_ref2) {\n          _this2.hideInputRef = _ref2;\n        },\n        style: _objectSpread({}, inputWidth),\n        autoComplete: \"on\",\n        isValid: !this.state.hideError,\n        type: \"text\",\n        onChange: this.updateHide,\n        defaultValue: this.state.hideInputValue,\n        onKeyDownCapture: this.checkSpecialKeyHide,\n        placeholder: \"Hide...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(GraphFindOptions, {\n        kind: \"hide\",\n        onSelect: this.updateHideOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      }), this.props.hideValue && /*#__PURE__*/React.createElement(Tooltip, {\n        key: \"ot_clear_hide\",\n        position: \"top\",\n        content: \"Clear Hide...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          minWidth: '20px',\n          width: '20px',\n          paddingLeft: '5px',\n          paddingRight: '5px',\n          bottom: '1px'\n        },\n        variant: ButtonVariant.control,\n        onClick: function onClick() {\n          return _this2.setHide('');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Close, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 19\n        }\n      }))), this.props.showFindHelp ? /*#__PURE__*/React.createElement(GraphHelpFind, {\n        onClose: this.toggleFindHelp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        style: {\n          paddingLeft: '6px'\n        },\n        onClick: this.toggleFindHelp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 19\n        }\n      }))) : /*#__PURE__*/React.createElement(Tooltip, {\n        key: 'ot_graph_find_help',\n        position: \"top\",\n        content: \"Find/Hide Help...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        style: {\n          paddingLeft: '6px'\n        },\n        onClick: this.toggleFindHelp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 19\n        }\n      }))), this.state.findError && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 38\n        }\n      }, this.state.findError), this.state.hideError && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 38\n        }\n      }, this.state.hideError))));\n    }\n  }, {\n    key: \"setError\",\n    value: function setError(error, isFind) {\n      if (isFind && error !== this.state.findError) {\n        var findError = !!error ? \"Find: \".concat(error) : undefined;\n        this.setState({\n          findError: findError\n        });\n      } else if (error !== this.state.hideError) {\n        var hideError = !!error ? \"Hide: \".concat(error) : undefined;\n        this.setState({\n          hideError: hideError\n        });\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getNumericSelector\",\n    value: function getNumericSelector(field, op, val, _expression, isFind) {\n      switch (op) {\n        case '>':\n        case '<':\n        case '>=':\n        case '<=':\n          if (isNaN(val)) {\n            return this.setError(\"Invalid value [\".concat(val, \"]. Expected a numeric value (use '.' for decimals)\"), isFind);\n          }\n\n          return \"[\".concat(field, \" \").concat(op, \" \").concat(val, \"]\");\n\n        case '=':\n          if (isNaN(val)) {\n            return \"[!\".concat(field, \"]\");\n          }\n\n          return \"[\".concat(field, \" \").concat(op, \" \").concat(val, \"]\");\n\n        case '!=':\n          if (isNaN(val)) {\n            return \"[?\".concat(field, \"]\");\n          }\n\n          return \"[\".concat(field, \" \").concat(op, \" \").concat(val, \"]\");\n\n        default:\n          return this.setError(\"Invalid operator [\".concat(op, \"] for numeric condition\"), isFind);\n      }\n    }\n  }]);\n\n  return GraphFind;\n}(React.Component);\nGraphFind.contextTypes = {\n  router: function router() {\n    return null;\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    compressOnHide: state.graph.toolbarState.compressOnHide,\n    edgeLabels: edgeLabelsSelector(state),\n    findValue: findValueSelector(state),\n    hideValue: hideValueSelector(state),\n    layout: state.graph.layout,\n    showFindHelp: state.graph.toolbarState.showFindHelp,\n    showIdleNodes: state.graph.toolbarState.showIdleNodes,\n    showSecurity: state.graph.toolbarState.showSecurity,\n    updateTime: state.graph.updateTime\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    setFindValue: bindActionCreators(GraphToolbarActions.setFindValue, dispatch),\n    setHideValue: bindActionCreators(GraphToolbarActions.setHideValue, dispatch),\n    toggleFindHelp: bindActionCreators(GraphToolbarActions.toggleFindHelp, dispatch),\n    toggleGraphSecurity: bindActionCreators(GraphToolbarActions.toggleGraphSecurity, dispatch),\n    toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch)\n  };\n};\n\nvar GraphFindContainer = connect(mapStateToProps, mapDispatchToProps)(GraphFind);\nexport default GraphFindContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/GraphToolbar/GraphFind.tsx"],"names":["React","Button","Tooltip","ButtonVariant","TextInput","Form","connect","bindActionCreators","findValueSelector","hideValueSelector","edgeLabelsSelector","GraphToolbarActions","GraphHelpFind","CyNode","CyEdge","CytoscapeGraphUtils","EdgeLabelMode","NodeType","AlertUtils","KialiIcon","defaultIconStyle","style","TourStopContainer","GraphTourStops","AutoComplete","DEGRADED","FAILURE","HEALTHY","GraphFindOptions","history","HistoryManager","URLParam","inputWidth","width","thinGroupStyle","paddingLeft","paddingRight","operands","GraphFind","props","findAutoComplete","findInputRef","hiddenElements","hideAutoComplete","hideInputRef","removedElements","toggleFindHelp","checkSpecialKeyFind","event","keyCode","which","preventDefault","next","value","scrollLeft","scrollWidth","setState","findInputValue","findError","undefined","submitFind","updateFindOption","key","setFind","updateFind","val","diff","Math","abs","length","state","setInput","setFindValue","htmlInputElement","document","getElementById","findValue","checkSpecialKeyHide","hideInputValue","hideError","submitHide","updateHideOption","setHide","updateHide","setHideValue","hideValue","handleHide","cy","hideChanged","graphChanged","compressOnHideChanged","selector","parseValue","console","debug","startBatch","visibility","restore","$","add","connectedEdges","visibleElements","absoluteComplement","nodesWithVisibleEdges","edges","connectedNodes","nodesWithOnlyHiddenEdges","nodes","isIdle","subtract","filter","compressOnHide","remove","hiddenAppBoxes","endBatch","hasRemovedElements","runLayout","layout","handleFind","elements","removeClass","addClass","isFind","preparedVal","prepareValue","orClauses","split","orSelector","clause","expressions","conjunctive","expression","parsedExpression","parseExpression","appendSelector","setError","replace","trim","op","includes","unaryExpression","parseUnaryFindExpression","tokens","field","toLowerCase","target","app","cluster","s","getNumericSelector","grpcIn","grpcOut","httpIn","httpOut","isNegation","startsWith","agg","aggregateValue","svc","service","wl","workload","nodeType","AGGREGATE","SERVICE","WORKLOAD","APP","UNKNOWN","namespace","tcpIn","tcpOut","version","showSecurity","addSuccess","toggleGraphSecurity","destPrincipal","grpc","grpcPercentErr","grpcPercentReq","http","httpPercentErr","httpPercentReq","protocol","edgeLabels","RESPONSE_TIME_GROUP","setEdgeLabels","RESPONSE_TIME_P95","responseTime","sourcePrincipal","tcp","THROUGHPUT_GROUP","THROUGHPUT_REQUEST","throughput","hasCB","isDead","hasFaultInjection","isInaccessible","healthStatus","name","showIdleNodes","toggleIdleNodes","isOutside","hasRequestRouting","hasRequestTimeout","isServiceEntry","hasMissingSC","hasTCPTrafficShifting","hasTrafficShifting","isRoot","hasVS","hasWorkloadEntry","isMTLS","hasTraffic","urlParams","URLSearchParams","location","search","urlFind","getParam","GRAPH_FIND","setParam","urlHide","GRAPH_HIDE","showFindHelp","nextProps","nextState","cyChanged","findChanged","updateTime","showFindHelpChanged","findErrorChanged","hideErrorChanged","prevProps","deleteParam","Find","float","ref","minWidth","bottom","control","link","color","error","_expression","isNaN","Component","contextTypes","router","mapStateToProps","graph","toolbarState","mapDispatchToProps","dispatch","GraphFindContainer"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,aAA1B,EAAyCC,SAAzC,EAAoDC,IAApD,QAAgE,wBAAhE;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,QAAyE,0BAAzE;AACA,SAASC,mBAAT,QAAoC,sCAApC;AAEA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,wDAA/B;AACA,OAAO,KAAKC,mBAAZ,MAAqC,wDAArC;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAgD,sBAAhD;AACA,OAAO,KAAKC,UAAZ,MAA4B,2BAA5B;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,kBAA5C;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,QAA2C,cAA3C;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,OAAP,IAAkBC,cAAlB,EAAkCC,QAAlC,QAAkD,sBAAlD;AAqCA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAAnB,C,CAIA;;AACA,IAAMC,cAAc,GAAGb,KAAK,CAAC;AAC3Bc,EAAAA,WAAW,EAAE,MADc;AAE3BC,EAAAA,YAAY,EAAE;AAFa,CAAD,CAA5B;AAKA,IAAMC,QAAkB,GAAG,CACzB,UADyB,EAEzB,cAFyB,EAGzB,UAHyB,EAIzB,cAJyB,EAKzB,KALyB,EAMzB,gBANyB,EAOzB,SAPyB,EAQzB,eARyB,EASzB,gBATyB,EAUzB,MAVyB,EAWzB,SAXyB,EAYzB,QAZyB,EAazB,SAbyB,EAczB,SAdyB,EAezB,MAfyB,EAgBzB,QAhByB,EAiBzB,SAjByB,EAkBzB,MAlByB,EAmBzB,MAnByB,EAoBzB,MApByB,EAqBzB,WArByB,EAsBzB,MAtByB,EAuBzB,WAvByB,EAwBzB,SAxByB,EAyBzB,UAzByB,EA0BzB,gBA1ByB,EA2BzB,gBA3ByB,EA4BzB,cA5ByB,EA6BzB,SA7ByB,EA8BzB,cA9ByB,EA+BzB,SA/ByB,EAgCzB,iBAhCyB,EAiCzB,KAjCyB,EAkCzB,oBAlCyB,EAmCzB,YAnCyB,EAoCzB,SApCyB,EAqCzB,iBArCyB,EAsCzB,eAtCyB,EAuCzB,SAvCyB,EAwCzB,gBAxCyB,EAyCzB,OAzCyB,EA0CzB,QA1CyB,EA2CzB,UA3CyB,EA4CzB,eA5CyB,CAA3B;AA+CA,WAAaC,SAAb;AAAA;;AAAA;;AAYE,qBAAYC,KAAZ,EAAmC;AAAA;;AAAA;;AACjC,8BAAMA,KAAN;AADiC,UAP3BC,gBAO2B;AAAA,UAN3BC,YAM2B;AAAA,UAL3BC,cAK2B;AAAA,UAJ3BC,gBAI2B;AAAA,UAH3BC,YAG2B;AAAA,UAF3BC,eAE2B;;AAAA,UA+L3BC,cA/L2B,GA+LV,YAAM;AAC7B,YAAKP,KAAL,CAAWO,cAAX;AACD,KAjMkC;;AAAA,UAmM3BC,mBAnM2B,GAmML,UAAAC,KAAK,EAAI;AACrC,UAAMC,OAAO,GAAGD,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgCD,KAAK,CAACE,KAAtD;;AACA,cAAQD,OAAR;AACE,aAAK,CAAL;AAAQ;AACND,UAAAA,KAAK,CAACG,cAAN;;AACA,cAAMC,IAAI,GAAG,MAAKZ,gBAAL,CAAsBY,IAAtB,EAAb;;AACA,cAAI,CAAC,CAACA,IAAN,EAAY;AACV,kBAAKX,YAAL,CAAkBY,KAAlB,GAA0BD,IAA1B;AACA,kBAAKX,YAAL,CAAkBa,UAAlB,GAA+B,MAAKb,YAAL,CAAkBc,WAAjD;;AACA,kBAAKC,QAAL,CAAc;AAAEC,cAAAA,cAAc,EAAEL,IAAlB;AAAwBM,cAAAA,SAAS,EAAEC;AAAnC,aAAd;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPX,UAAAA,KAAK,CAACG,cAAN;;AACA,gBAAKS,UAAL;;AACA;;AACF;AACE;AAfJ;AAiBD,KAtNkC;;AAAA,UAwN3BC,gBAxN2B,GAwNR,UAAAC,GAAG,EAAI;AAChC,YAAKC,OAAL,CAAaD,GAAb;AACD,KA1NkC;;AAAA,UA4N3BE,UA5N2B,GA4Nd,UAAAC,GAAG,EAAI;AAC1B,UAAI,OAAOA,GAAX,EAAgB;AACd,cAAKF,OAAL,CAAa,EAAb;AACD,OAFD,MAEO;AACL,YAAMG,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,GAAG,CAACI,MAAJ,GAAa,MAAKC,KAAL,CAAWb,cAAX,CAA0BY,MAAhD,CAAb;;AACA,cAAK7B,gBAAL,CAAsB+B,QAAtB,CAA+BN,GAA/B,EAAoC,CAAC,GAAD,EAAM,GAAN,CAApC;;AACA,cAAKT,QAAL,CAAc;AAAEC,UAAAA,cAAc,EAAEQ,GAAlB;AAAuBP,UAAAA,SAAS,EAAEC;AAAlC,SAAd,EAHK,CAIL;;;AACA,YAAIO,IAAI,GAAG,CAAX,EAAc;AACZ,gBAAK3B,KAAL,CAAWiC,YAAX,CAAwBP,GAAxB;AACD;AACF;AACF,KAxOkC;;AAAA,UA0O3BF,OA1O2B,GA0OjB,UAAAE,GAAG,EAAI;AACvB;AACA,YAAKxB,YAAL,CAAkBY,KAAlB,GAA0BY,GAA1B;AACA,UAAMQ,gBAAkC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAA3C;;AACA,UAAIF,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,QAAAA,gBAAgB,CAACpB,KAAjB,GAAyBY,GAAzB;AACD;;AACD,YAAKzB,gBAAL,CAAsB+B,QAAtB,CAA+BN,GAA/B;;AACA,YAAKT,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAEQ,GAAlB;AAAuBP,QAAAA,SAAS,EAAEC;AAAlC,OAAd;;AACA,YAAKpB,KAAL,CAAWiC,YAAX,CAAwBP,GAAxB;AACD,KApPkC;;AAAA,UAsP3BL,UAtP2B,GAsPd,YAAM;AACzB,UAAI,MAAKrB,KAAL,CAAWqC,SAAX,KAAyB,MAAKN,KAAL,CAAWb,cAAxC,EAAwD;AACtD,cAAKlB,KAAL,CAAWiC,YAAX,CAAwB,MAAKF,KAAL,CAAWb,cAAnC;AACD;AACF,KA1PkC;;AAAA,UA4P3BoB,mBA5P2B,GA4PL,UAAA7B,KAAK,EAAI;AACrC,UAAMC,OAAO,GAAGD,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgCD,KAAK,CAACE,KAAtD;;AACA,cAAQD,OAAR;AACE,aAAK,CAAL;AAAQ;AACND,UAAAA,KAAK,CAACG,cAAN;;AACA,cAAMC,IAAI,GAAG,MAAKT,gBAAL,CAAsBS,IAAtB,EAAb;;AACA,cAAI,CAAC,CAACA,IAAN,EAAY;AACV,kBAAKR,YAAL,CAAkBS,KAAlB,GAA0BD,IAA1B;AACA,kBAAKR,YAAL,CAAkBU,UAAlB,GAA+B,MAAKV,YAAL,CAAkBW,WAAjD;;AACA,kBAAKC,QAAL,CAAc;AAAEsB,cAAAA,cAAc,EAAE1B,IAAlB;AAAwB2B,cAAAA,SAAS,EAAEpB;AAAnC,aAAd;AACD;;AACD;;AACF,aAAK,EAAL;AAAS;AACPX,UAAAA,KAAK,CAACG,cAAN;;AACA,gBAAK6B,UAAL;;AACA;;AACF;AACE;AAfJ;AAiBD,KA/QkC;;AAAA,UAiR3BC,gBAjR2B,GAiRR,UAAAnB,GAAG,EAAI;AAChC,YAAKoB,OAAL,CAAapB,GAAb;AACD,KAnRkC;;AAAA,UAqR3BqB,UArR2B,GAqRd,UAAAlB,GAAG,EAAI;AAC1B,UAAI,OAAOA,GAAX,EAAgB;AACd,cAAKiB,OAAL,CAAa,EAAb;AACD,OAFD,MAEO;AACL,YAAMhB,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,GAAG,CAACI,MAAJ,GAAa,MAAKC,KAAL,CAAWQ,cAAX,CAA0BT,MAAhD,CAAb;;AACA,cAAK1B,gBAAL,CAAsB4B,QAAtB,CAA+BN,GAA/B,EAAoC,CAAC,GAAD,EAAM,GAAN,CAApC;;AACA,cAAKT,QAAL,CAAc;AAAEsB,UAAAA,cAAc,EAAEb,GAAlB;AAAuBc,UAAAA,SAAS,EAAEpB;AAAlC,SAAd,EAHK,CAIL;;;AACA,YAAIO,IAAI,GAAG,CAAX,EAAc;AACZ,gBAAK3B,KAAL,CAAW6C,YAAX,CAAwBnB,GAAxB;AACD;AACF;AACF,KAjSkC;;AAAA,UAmS3Be,UAnS2B,GAmSd,YAAM;AACzB,UAAI,MAAKzC,KAAL,CAAW8C,SAAX,KAAyB,MAAKf,KAAL,CAAWQ,cAAxC,EAAwD;AACtD,cAAKvC,KAAL,CAAW6C,YAAX,CAAwB,MAAKd,KAAL,CAAWQ,cAAnC;AACD;AACF,KAvSkC;;AAAA,UAyS3BI,OAzS2B,GAySjB,UAAAjB,GAAG,EAAI;AACvB;AACA,YAAKrB,YAAL,CAAkBS,KAAlB,GAA0BY,GAA1B;AACA,UAAMQ,gBAAkC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAA3C;;AACA,UAAIF,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,QAAAA,gBAAgB,CAACpB,KAAjB,GAAyBY,GAAzB;AACD;;AACD,YAAKtB,gBAAL,CAAsB4B,QAAtB,CAA+BN,GAA/B;;AACA,YAAKT,QAAL,CAAc;AAAEsB,QAAAA,cAAc,EAAEb,GAAlB;AAAuBc,QAAAA,SAAS,EAAEpB;AAAlC,OAAd;;AACA,YAAKpB,KAAL,CAAW6C,YAAX,CAAwBnB,GAAxB;AACD,KAnTkC;;AAAA,UAqT3BqB,UArT2B,GAqTd,UAACC,EAAD,EAAUC,WAAV,EAAgCC,YAAhC,EAAuDC,qBAAvD,EAA0F;AAC7G,UAAMC,QAAQ,GAAG,MAAKC,UAAL,CAAgB,MAAKrD,KAAL,CAAW8C,SAA3B,EAAsC,KAAtC,CAAjB;;AACAQ,MAAAA,OAAO,CAACC,KAAR,0BAAgCH,QAAhC;AAEAJ,MAAAA,EAAE,CAACQ,UAAH,GAJ6G,CAM7G;;AACA,UAAI,CAAC,CAAC,MAAKrD,cAAP,IAAyB,CAAC+C,YAA9B,EAA4C;AAC1C,cAAK/C,cAAL,CAAoBrB,KAApB,CAA0B;AAAE2E,UAAAA,UAAU,EAAE;AAAd,SAA1B;AACD;;AACD,YAAKtD,cAAL,GAAsBiB,SAAtB,CAV6G,CAY7G;;AACA,UAAI,CAAC,CAAC,MAAKd,eAAP,IAA0B,CAAC4C,YAA/B,EAA6C;AAC3C,cAAK5C,eAAL,CAAqBoD,OAArB;AACD;;AACD,YAAKpD,eAAL,GAAuBc,SAAvB;;AAEA,UAAIgC,QAAJ,EAAc;AACZ;AACA,YAAIjD,cAAc,GAAG6C,EAAE,CAACW,CAAH,CAAKP,QAAL,CAArB,CAFY,CAGZ;;AACAjD,QAAAA,cAAc,GAAGA,cAAc,CAACyD,GAAf,CAAmBzD,cAAc,CAAC0D,cAAf,EAAnB,CAAjB,CAJY,CAKZ;;AACA,YAAMC,eAAe,GAAG3D,cAAc,CAAC4D,kBAAf,EAAxB;AACA,YAAMC,qBAAqB,GAAGF,eAAe,CAACG,KAAhB,GAAwBC,cAAxB,EAA9B;AACA,YAAMC,wBAAwB,GAAGL,eAAe,CAACM,KAAhB,aAA2B9F,MAAM,CAAC+F,MAAlC,QAA6CC,QAA7C,CAAsDN,qBAAtD,CAAjC;AACA7D,QAAAA,cAAc,GAAGA,cAAc,CAACyD,GAAf,CAAmBO,wBAAnB,CAAjB,CATY,CAUZ;;AACAhE,QAAAA,cAAc,GAAGA,cAAc,CAACmE,QAAf,CAAwBnE,cAAc,CAACoE,MAAf,CAAsB,cAAtB,CAAxB,CAAjB;;AAEA,YAAI,MAAKvE,KAAL,CAAWwE,cAAf,EAA+B;AAC7B,gBAAKlE,eAAL,GAAuB0C,EAAE,CAACyB,MAAH,CAAUtE,cAAV,CAAvB,CAD6B,CAE7B;;AACA,cAAMuE,cAAc,GAAG1B,EAAE,CAACW,CAAH,CAAK,cAAL,EAAqBW,QAArB,CAA8BtB,EAAE,CAACW,CAAH,CAAK,wBAAL,CAA9B,CAAvB;AACA,gBAAKrD,eAAL,GAAuB,MAAKA,eAAL,CAAqBsD,GAArB,CAAyBZ,EAAE,CAACyB,MAAH,CAAUC,cAAV,CAAzB,CAAvB;AACD,SALD,MAKO;AACL;AACA,gBAAKvE,cAAL,GAAsBA,cAAtB;;AACA,gBAAKA,cAAL,CAAoBrB,KAApB,CAA0B;AAAE2E,YAAAA,UAAU,EAAE;AAAd,WAA1B,EAHK,CAIL;;;AACA,cAAMiB,eAAc,GAAG1B,EAAE,CAACW,CAAH,CAAK,cAAL,EAAqBW,QAArB,CAA8BtB,EAAE,CAACW,CAAH,CAAK,yBAAL,CAA9B,CAAvB;;AACAe,UAAAA,eAAc,CAAC5F,KAAf,CAAqB;AAAE2E,YAAAA,UAAU,EAAE;AAAd,WAArB;;AACA,gBAAKtD,cAAL,GAAsB,MAAKA,cAAL,CAAoByD,GAApB,CAAwBc,eAAxB,CAAtB;AACD;AACF;;AAED1B,MAAAA,EAAE,CAAC2B,QAAH;AAEA,UAAMC,kBAA2B,GAAG,CAAC,CAAC,MAAKtE,eAAP,IAA0B,MAAKA,eAAL,CAAqBwB,MAArB,GAA8B,CAA5F;;AACA,UAAImB,WAAW,IAAKE,qBAAqB,IAAIC,QAAzC,IAAsDwB,kBAA1D,EAA8E;AAC5EpG,QAAAA,mBAAmB,CAACqG,SAApB,CAA8B7B,EAA9B,EAAkC,MAAKhD,KAAL,CAAW8E,MAA7C;AACD;AACF,KA1WkC;;AAAA,UA4W3BC,UA5W2B,GA4Wd,UAAC/B,EAAD,EAAa;AAChC,UAAMI,QAAQ,GAAG,MAAKC,UAAL,CAAgB,MAAKrD,KAAL,CAAWqC,SAA3B,EAAsC,IAAtC,CAAjB;;AACAiB,MAAAA,OAAO,CAACC,KAAR,0BAAgCH,QAAhC;AAEAJ,MAAAA,EAAE,CAACQ,UAAH,GAJgC,CAKhC;;AACAR,MAAAA,EAAE,CAACgC,QAAH,CAAY,QAAZ,EAAsBC,WAAtB,CAAkC,MAAlC;;AACA,UAAI7B,QAAJ,EAAc;AACZ;AACAJ,QAAAA,EAAE,CAACgC,QAAH,CAAY5B,QAAZ,EAAsB8B,QAAtB,CAA+B,MAA/B;AACD;;AACDlC,MAAAA,EAAE,CAAC2B,QAAH;AACD,KAxXkC;;AAAA,UAqY3BtB,UArY2B,GAqYd,UAAC3B,GAAD,EAAcyD,MAAd,EAAsD;AACzE,UAAIC,WAAW,GAAG,MAAKC,YAAL,CAAkB3D,GAAlB,CAAlB;;AACA,UAAI,CAAC0D,WAAL,EAAkB;AAChB,eAAOhE,SAAP;AACD,OAJwE,CAMzE;AACA;;;AACA,UAAMkE,SAAS,GAAGF,WAAW,CAACG,KAAZ,CAAkB,MAAlB,CAAlB;AACA,UAAIC,UAAJ;;AATyE,iDAWpDF,SAXoD;AAAA;;AAAA;AAWzE,4DAAgC;AAAA,cAArBG,MAAqB;AAC9B,cAAMC,WAAW,GAAGD,MAAM,CAACF,KAAP,CAAa,OAAb,CAApB;AACA,cAAMI,WAAW,GAAGD,WAAW,CAAC5D,MAAZ,GAAqB,CAAzC;AACA,cAAIsB,QAAQ,SAAZ;;AAH8B,sDAKLsC,WALK;AAAA;;AAAA;AAK9B,mEAAsC;AAAA,kBAA3BE,UAA2B;;AACpC,kBAAMC,gBAAgB,GAAG,MAAKC,eAAL,CAAqBF,UAArB,EAAiCD,WAAjC,EAA8CR,MAA9C,CAAzB;;AACA,kBAAI,CAACU,gBAAL,EAAuB;AACrB,uBAAOzE,SAAP;AACD;;AACDgC,cAAAA,QAAQ,GAAG,MAAK2C,cAAL,CAAoB3C,QAApB,EAA8ByC,gBAA9B,EAAgDV,MAAhD,CAAX;;AACA,kBAAI,CAAC/B,QAAL,EAAe;AACb,uBAAOhC,SAAP;AACD;AACF,aAd6B,CAe9B;;AAf8B;AAAA;AAAA;AAAA;AAAA;;AAgB9B,gBAAK4E,QAAL,CAAc5E,SAAd,EAAyB+D,MAAzB;;AACAK,UAAAA,UAAU,GAAG,CAACA,UAAD,GAAcpC,QAAd,aAA4BoC,UAA5B,cAA0CpC,QAA1C,CAAb;AACD;AA7BwE;AAAA;AAAA;AAAA;AAAA;;AA+BzE,aAAOoC,UAAP;AACD,KArakC;;AAAA,UAua3BH,YAva2B,GAuaZ,UAAC3D,GAAD,EAAyB;AAC9C;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAN,CAF8C,CAI9C;;AACAvE,MAAAA,GAAG,GAAG,MAAMA,GAAZ;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,QAAZ,EAAsB,GAAtB,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,SAAZ,EAAuB,GAAvB,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,YAAZ,EAA0B,KAA1B,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,aAAZ,EAA2B,KAA3B,CAAN,CAT8C,CAW9C;;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,SAAZ,EAAuB,IAAvB,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,kBAAZ,EAAgC,OAAhC,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,oBAAZ,EAAkC,OAAlC,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,kBAAZ,EAAgC,OAAhC,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,cAAZ,EAA4B,MAA5B,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,gBAAZ,EAA8B,MAA9B,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,cAAZ,EAA4B,MAA5B,CAAN,CAlB8C,CAoB9C;;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,SAAZ,EAAuB,OAAvB,CAAN;AACAvE,MAAAA,GAAG,GAAGA,GAAG,CAACuE,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAN;AAEA,aAAOvE,GAAG,CAACwE,IAAJ,EAAP;AACD,KAhckC;;AAAA,UAkc3BJ,eAlc2B,GAkcT,UACxBF,UADwB,EAExBD,WAFwB,EAGxBR,MAHwB,EAIS;AACjC,UAAIgB,EAAJ;;AACA,UAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AAC7BD,QAAAA,EAAE,GAAG,IAAL;AACD,OAFD,MAEO,IAAIP,UAAU,CAACQ,QAAX,CAAoB,KAApB,CAAJ,EAAgC;AACrCD,QAAAA,EAAE,GAAG,KAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,KAApB,CAAJ,EAAgC;AACrCD,QAAAA,EAAE,GAAG,KAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,KAApB,CAAJ,EAAgC;AACrCD,QAAAA,EAAE,GAAG,KAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AACpCD,QAAAA,EAAE,GAAG,IAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AACpCD,QAAAA,EAAE,GAAG,IAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AACpCD,QAAAA,EAAE,GAAG,IAAL,CADoC,CACzB;AACZ,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AACpCD,QAAAA,EAAE,GAAG,IAAL,CADoC,CACzB;AACZ,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AACpCD,QAAAA,EAAE,GAAG,IAAL,CADoC,CACzB;AACZ,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AACnCD,QAAAA,EAAE,GAAG,GAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AACnCD,QAAAA,EAAE,GAAG,GAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AACnCD,QAAAA,EAAE,GAAG,GAAL;AACD,OAFM,MAEA,IAAIP,UAAU,CAACQ,QAAX,CAAoB,GAApB,CAAJ,EAA8B;AACnCD,QAAAA,EAAE,GAAG,GAAL;AACD;;AACD,UAAI,CAACA,EAAL,EAAS;AACP,YAAIP,UAAU,CAACL,KAAX,CAAiB,GAAjB,EAAsBzD,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,iBAAO,MAAKkE,QAAL,0CAAuDb,MAAvD,CAAP;AACD;;AAED,YAAMkB,eAAe,GAAG,MAAKC,wBAAL,CAA8BV,UAAU,CAACM,IAAX,EAA9B,EAAiD,KAAjD,CAAxB;;AACA,eAAOG,eAAe,GAAGA,eAAH,GAAqB,MAAKL,QAAL,iCAA8Cb,MAA9C,CAA3C;AACD;;AAED,UAAMoB,MAAM,GAAGX,UAAU,CAACL,KAAX,CAAiBY,EAAjB,CAAf;;AACA,UAAIA,EAAE,KAAK,GAAX,EAAgB;AACd,YAAME,gBAAe,GAAG,MAAKC,wBAAL,CAA8BC,MAAM,CAAC,CAAD,CAAN,CAAUL,IAAV,EAA9B,EAAgD,IAAhD,CAAxB;;AACA,eAAOG,gBAAe,GAAGA,gBAAH,GAAqB,MAAKL,QAAL,iCAA8Cb,MAA9C,CAA3C;AACD;;AAED,UAAMqB,KAAK,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUL,IAAV,EAAd;AACA,UAAMxE,GAAG,GAAG6E,MAAM,CAAC,CAAD,CAAN,CAAUL,IAAV,EAAZ;;AAEA,cAAQM,KAAK,CAACC,WAAN,EAAR;AACE;AACA;AACA;AACA,aAAK,KAAL;AACE,iBAAO;AAAEC,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAACqI,GAAb,cAAoBR,EAApB,gBAA2BzE,GAA3B;AAA1B,WAAP;;AACF,aAAK,SAAL;AACE,iBAAO;AAAEgF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAACsI,OAAb,cAAwBT,EAAxB,gBAA+BzE,GAA/B;AAA1B,WAAP;;AACF,aAAK,QAAL;AAAe;AACb,gBAAMmF,CAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAACyI,MAA/B,EAAuCZ,EAAvC,EAA2CzE,GAA3C,EAAgDkE,UAAhD,EAA4DT,MAA5D,CAAV;;AACA,mBAAO0B,CAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,gBAAMyF,EAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAAC0I,OAA/B,EAAwCb,EAAxC,EAA4CzE,GAA5C,EAAiDkE,UAAjD,EAA6DT,MAA7D,CAAV;;AACA,mBAAO0B,EAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,QAAL;AAAe;AACb,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAAC2I,MAA/B,EAAuCd,EAAvC,EAA2CzE,GAA3C,EAAgDkE,UAAhD,EAA4DT,MAA5D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAAC4I,OAA/B,EAAwCf,EAAxC,EAA4CzE,GAA5C,EAAiDkE,UAAjD,EAA6DT,MAA7D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,MAAL;AAAa;AACX,gBAAM+F,UAAU,GAAGhB,EAAE,CAACiB,UAAH,CAAc,GAAd,CAAnB;;AACA,gBAAIzB,WAAJ,EAAiB;AACf,qBAAO,MAAKK,QAAL,0CAAuDb,MAAvD,CAAP;AACD;;AACD,gBAAMkC,GAAG,cAAO/I,MAAM,CAACgJ,cAAd,cAAgCnB,EAAhC,gBAAuCzE,GAAvC,QAAT;AACA,gBAAMiF,GAAG,cAAOrI,MAAM,CAACqI,GAAd,cAAqBR,EAArB,gBAA4BzE,GAA5B,QAAT;AACA,gBAAM6F,GAAG,cAAOjJ,MAAM,CAACkJ,OAAd,cAAyBrB,EAAzB,gBAAgCzE,GAAhC,QAAT;AACA,gBAAM+F,EAAE,cAAOnJ,MAAM,CAACoJ,QAAd,cAA0BvB,EAA1B,gBAAiCzE,GAAjC,QAAR;AACA,mBAAO;AAAEgF,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAE+D,UAAU,aAAME,GAAN,SAAYV,GAAZ,SAAkBY,GAAlB,SAAwBE,EAAxB,cAAkCJ,GAAlC,cAAyCV,GAAzC,cAAgDY,GAAhD,cAAuDE,EAAvD;AAAtC,aAAP;AACD;;AACD,aAAK,MAAL;AACE,cAAIE,QAAQ,GAAGjG,GAAG,CAAC+E,WAAJ,EAAf;;AACA,kBAAQkB,QAAR;AACE,iBAAK,IAAL;AACA,iBAAK,WAAL;AACEA,cAAAA,QAAQ,GAAGjJ,QAAQ,CAACkJ,SAApB;AACA;;AACF,iBAAK,KAAL;AACED,cAAAA,QAAQ,GAAGjJ,QAAQ,CAACmJ,OAApB;AACA;;AACF,iBAAK,IAAL;AACEF,cAAAA,QAAQ,GAAGjJ,QAAQ,CAACoJ,QAApB;AACA;;AACF;AACE;AAAO;AAZX;;AAcA,kBAAQH,QAAR;AACE,iBAAKjJ,QAAQ,CAACkJ,SAAd;AACA,iBAAKlJ,QAAQ,CAACqJ,GAAd;AACA,iBAAKrJ,QAAQ,CAACmJ,OAAd;AACA,iBAAKnJ,QAAQ,CAACoJ,QAAd;AACA,iBAAKpJ,QAAQ,CAACsJ,OAAd;AACE,qBAAO;AAAEtB,gBAAAA,MAAM,EAAE,MAAV;AAAkBtD,gBAAAA,QAAQ,aAAM9E,MAAM,CAACqJ,QAAb,cAAyBxB,EAAzB,gBAAgCwB,QAAhC;AAA1B,eAAP;;AACF;AACE,oBAAK3B,QAAL,8BACwB2B,QADxB,iEAEExC,MAFF;;AARJ;;AAaA,iBAAO/D,SAAP;;AACF,aAAK,IAAL;AACA,aAAK,WAAL;AACE,iBAAO;AAAEsF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAAC2J,SAAb,cAA0B9B,EAA1B,gBAAiCzE,GAAjC;AAA1B,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,WAAL;AACE,iBAAO;AAAEgF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAACgJ,cAAb,cAA+BnB,EAA/B,gBAAsCzE,GAAtC;AAA1B,WAAP;;AACF,aAAK,KAAL;AACA,aAAK,SAAL;AACE,iBAAO;AAAEgF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAACkJ,OAAb,cAAwBrB,EAAxB,gBAA+BzE,GAA/B;AAA1B,WAAP;;AACF,aAAK,OAAL;AAAc;AACZ,gBAAMmF,GAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAAC4J,KAA/B,EAAsC/B,EAAtC,EAA0CzE,GAA1C,EAA+CkE,UAA/C,EAA2DT,MAA3D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,QAAL;AAAe;AACb,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBxI,MAAM,CAAC6J,MAA/B,EAAuChC,EAAvC,EAA2CzE,GAA3C,EAAgDkE,UAAhD,EAA4DT,MAA5D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,SAAL;AACE,iBAAO;AAAEsF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAAC8J,OAAb,cAAwBjC,EAAxB,gBAA+BzE,GAA/B;AAA1B,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,UAAL;AACE,iBAAO;AAAEgF,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM9E,MAAM,CAACoJ,QAAb,cAAyBvB,EAAzB,gBAAgCzE,GAAhC;AAA1B,WAAP;AACF;AACA;AACA;;AACA,aAAK,eAAL;AACE,cAAI,CAAC,MAAK1B,KAAL,CAAWqI,YAAhB,EAA8B;AAC5B1J,YAAAA,UAAU,CAAC2J,UAAX,CAAsB,mEAAtB;;AACA,kBAAKtI,KAAL,CAAWuI,mBAAX;AACD;;AACD,iBAAO;AAAE7B,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM7E,MAAM,CAACiK,aAAb,cAA8BrC,EAA9B,gBAAqCzE,GAArC;AAA1B,WAAP;;AACF,aAAK,MAAL;AAAa;AACX,gBAAMmF,GAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACkK,IAA/B,EAAqCtC,EAArC,EAAyCzE,GAAzC,EAA8CkE,UAA9C,EAA0DT,MAA1D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,YAAL;AACA,aAAK,UAAL;AAAiB;AACf,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACmK,cAA/B,EAA+CvC,EAA/C,EAAmDzE,GAAnD,EAAwDkE,UAAxD,EAAoET,MAApE,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,cAAL;AAAqB;AACnB,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACoK,cAA/B,EAA+CxC,EAA/C,EAAmDzE,GAAnD,EAAwDkE,UAAxD,EAAoET,MAApE,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,MAAL;AAAa;AACX,gBAAMyF,GAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACqK,IAA/B,EAAqCzC,EAArC,EAAyCzE,GAAzC,EAA8CkE,UAA9C,EAA0DT,MAA1D,CAAV;;AACA,mBAAO0B,GAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,YAAL;AACA,aAAK,UAAL;AAAiB;AACf,gBAAMyF,IAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACsK,cAA/B,EAA+C1C,EAA/C,EAAmDzE,GAAnD,EAAwDkE,UAAxD,EAAoET,MAApE,CAAV;;AACA,mBAAO0B,IAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,cAAL;AAAqB;AACnB,gBAAMyF,IAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACuK,cAA/B,EAA+C3C,EAA/C,EAAmDzE,GAAnD,EAAwDkE,UAAxD,EAAoET,MAApE,CAAV;;AACA,mBAAO0B,IAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,UAAL;AAAiB;AACf,mBAAO;AAAEsF,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,aAAM7E,MAAM,CAACwK,QAAb,cAAyB5C,EAAzB,gBAAgCzE,GAAhC;AAA1B,aAAP;AACD;;AACD,aAAK,IAAL;AACA,aAAK,cAAL;AAAqB;AACnB,gBAAI,CAAC,MAAK1B,KAAL,CAAWgJ,UAAX,CAAsB5C,QAAtB,CAA+B3H,aAAa,CAACwK,mBAA7C,CAAL,EAAwE;AACtEtK,cAAAA,UAAU,CAAC2J,UAAX,CAAsB,gFAAtB;;AACA,oBAAKtI,KAAL,CAAWkJ,aAAX,8BACK,MAAKlJ,KAAL,CAAWgJ,UADhB,IAEEvK,aAAa,CAACwK,mBAFhB,EAGExK,aAAa,CAAC0K,iBAHhB;AAKD;;AACD,gBAAMtC,IAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAAC6K,YAA/B,EAA6CjD,EAA7C,EAAiDzE,GAAjD,EAAsDkE,UAAtD,EAAkET,MAAlE,CAAV;;AACA,mBAAO0B,IAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,iBAAL;AACE,cAAI,CAAC,MAAKpB,KAAL,CAAWqI,YAAhB,EAA8B;AAC5B1J,YAAAA,UAAU,CAAC2J,UAAX,CAAsB,wEAAtB;;AACA,kBAAKtI,KAAL,CAAWuI,mBAAX;AACD;;AACD,iBAAO;AAAE7B,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,aAAM7E,MAAM,CAAC8K,eAAb,cAAgClD,EAAhC,gBAAuCzE,GAAvC;AAA1B,WAAP;;AACF,aAAK,KAAL;AAAY;AACV,gBAAMmF,IAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAAC+K,GAA/B,EAAoCnD,EAApC,EAAwCzE,GAAxC,EAA6CkE,UAA7C,EAAyDT,MAAzD,CAAV;;AACA,mBAAO0B,IAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD,aAAK,YAAL;AAAmB;AACjB,gBAAI,CAAC,MAAKpB,KAAL,CAAWgJ,UAAX,CAAsB5C,QAAtB,CAA+B3H,aAAa,CAAC8K,gBAA7C,CAAL,EAAqE;AACnE5K,cAAAA,UAAU,CAAC2J,UAAX,CAAsB,iFAAtB;;AACA,oBAAKtI,KAAL,CAAWkJ,aAAX,8BACK,MAAKlJ,KAAL,CAAWgJ,UADhB,IAEEvK,aAAa,CAAC8K,gBAFhB,EAGE9K,aAAa,CAAC+K,kBAHhB;AAKD;;AACD,gBAAM3C,IAAC,GAAG,MAAKC,kBAAL,CAAwBvI,MAAM,CAACkL,UAA/B,EAA2CtD,EAA3C,EAA+CzE,GAA/C,EAAoDkE,UAApD,EAAgET,MAAhE,CAAV;;AACA,mBAAO0B,IAAC,GAAG;AAAEH,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAEyD;AAA5B,aAAH,GAAqCzF,SAA7C;AACD;;AACD;AACE,iBAAO,MAAK4E,QAAL,4BAAkCQ,KAAlC,QAA4CrB,MAA5C,CAAP;AAjKJ;AAmKD,KAxpBkC;;AAAA,UAyrB3BmB,wBAzrB2B,GAyrBA,UAACE,KAAD,EAAgBW,UAAhB,EAA6D;AAC9F,cAAQX,KAAK,CAACC,WAAN,EAAR;AACE;AACA;AACA;AACA,aAAK,IAAL;AACA,aAAK,gBAAL;AACE,iBAAO;AAAEC,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACoL,KAAf,qBAA+BpL,MAAM,CAACoL,KAAtC;AAAtC,WAAP;;AACF,aAAK,MAAL;AACE,iBAAO;AAAEhD,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACqL,MAAf,qBAAgCrL,MAAM,CAACqL,MAAvC;AAAtC,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,gBAAL;AACE,iBAAO;AACLjD,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACsL,iBAAf,qBAA2CtL,MAAM,CAACsL,iBAAlD;AAFf,WAAP;;AAIF,aAAK,cAAL;AACE,iBAAO;AAAElD,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACuL,cAAf,qBAAwCvL,MAAM,CAACuL,cAA/C;AAAtC,WAAP;;AACF,aAAK,SAAL;AACE,iBAAO;AACLnD,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,cACZ7I,MAAM,CAACwL,YADK,kBACc3K,OAAO,CAAC4K,IADtB,kBACiCzL,MAAM,CAACwL,YADxC,kBAC2D5K,QAAQ,CAAC6K,IADpE,sBAEZzL,MAAM,CAACwL,YAFK,kBAEc1K,OAAO,CAAC2K,IAFtB;AAFf,WAAP;;AAMF,aAAK,MAAL;AACE,cAAI,CAAC,MAAK/J,KAAL,CAAWgK,aAAhB,EAA+B;AAC7BrL,YAAAA,UAAU,CAAC2J,UAAX,CAAsB,qEAAtB;;AACA,kBAAKtI,KAAL,CAAWiK,eAAX;AACD;;AACD,iBAAO;AAAEvD,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAAC+F,MAAf,qBAAgC/F,MAAM,CAAC+F,MAAvC;AAAtC,WAAP;;AACF,aAAK,SAAL;AACA,aAAK,UAAL;AACE,iBAAO;AAAEqC,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAAC4L,SAAf,qBAAmC5L,MAAM,CAAC4L,SAA1C;AAAtC,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,gBAAL;AACE,iBAAO;AACLxD,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAAC6L,iBAAf,qBAA2C7L,MAAM,CAAC6L,iBAAlD;AAFf,WAAP;;AAIF,aAAK,KAAL;AACA,aAAK,gBAAL;AACE,iBAAO;AACLzD,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAAC8L,iBAAf,qBAA2C9L,MAAM,CAAC8L,iBAAlD;AAFf,WAAP;;AAIF,aAAK,IAAL;AACA,aAAK,cAAL;AACE,iBAAO;AAAE1D,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAAC+L,cAAf,qBAAwC/L,MAAM,CAAC+L,cAA/C;AAAtC,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,SAAL;AACE,iBAAO;AAAE3D,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACgM,YAAf,qBAAsChM,MAAM,CAACgM,YAA7C;AAAtC,WAAP;;AACF,aAAK,OAAL;AACA,aAAK,oBAAL;AACE,iBAAO;AACL5D,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACiM,qBAAf,qBAA+CjM,MAAM,CAACiM,qBAAtD;AAFf,WAAP;;AAIF,aAAK,IAAL;AACA,aAAK,iBAAL;AACE,iBAAO;AACL7D,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACkM,kBAAf,qBAA4ClM,MAAM,CAACkM,kBAAnD;AAFf,WAAP;;AAIF,aAAK,eAAL;AACA,aAAK,MAAL;AACE,iBAAO;AAAE9D,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACmM,MAAf,qBAAgCnM,MAAM,CAACmM,MAAvC;AAAtC,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,gBAAL;AACE,iBAAO;AAAE/D,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACoM,KAAf,qBAA+BpM,MAAM,CAACoM,KAAtC;AAAtC,WAAP;;AACF,aAAK,IAAL;AACA,aAAK,eAAL;AACE,iBAAO;AACLhE,YAAAA,MAAM,EAAE,MADH;AAELtD,YAAAA,QAAQ,EAAE+D,UAAU,eAAQ7I,MAAM,CAACqM,gBAAf,qBAA0CrM,MAAM,CAACqM,gBAAjD;AAFf,WAAP;AAIF;AACA;AACA;;AACA,aAAK,MAAL;AACE,cAAI,CAAC,MAAK3K,KAAL,CAAWqI,YAAhB,EAA8B;AAC5B1J,YAAAA,UAAU,CAAC2J,UAAX,CAAsB,mEAAtB;;AACA,kBAAKtI,KAAL,CAAWuI,mBAAX;AACD;;AACD,iBAAO;AAAE7B,YAAAA,MAAM,EAAE,MAAV;AAAkBtD,YAAAA,QAAQ,EAAE+D,UAAU,cAAO5I,MAAM,CAACqM,MAAd,yBAAmCrM,MAAM,CAACqM,MAA1C;AAAtC,WAAP;;AACF,aAAK,SAAL;AAAgB;AACd,mBAAO;AAAElE,cAAAA,MAAM,EAAE,MAAV;AAAkBtD,cAAAA,QAAQ,EAAE+D,UAAU,eAAQ5I,MAAM,CAACsM,UAAf,qBAAoCtM,MAAM,CAACsM,UAA3C;AAAtC,aAAP;AACD;;AACD;AACE,iBAAOzJ,SAAP;AAxFJ;AA0FD,KApxBkC;;AAAA,UAsxB3B2E,cAtxB2B,GAsxBV,UACvB3C,QADuB,EAEvByC,gBAFuB,EAGvBV,MAHuB,EAIA;AACvB,UAAI,CAAC/B,QAAL,EAAe;AACb,eAAOyC,gBAAgB,CAACa,MAAjB,GAA0Bb,gBAAgB,CAACzC,QAAlD;AACD;;AACD,UAAI,CAACA,QAAQ,CAACgE,UAAT,CAAoBvB,gBAAgB,CAACa,MAArC,CAAL,EAAmD;AACjD,eAAO,MAAKV,QAAL,CAAc,yDAAd,EAAyEb,MAAzE,CAAP;AACD;;AACD,aAAO/B,QAAQ,GAAGyC,gBAAgB,CAACzC,QAAnC;AACD,KAlyBkC;;AAGjC,UAAKnD,gBAAL,GAAwB,IAAIhB,YAAJ,CAAiBa,QAAjB,CAAxB;AACA,UAAKM,gBAAL,GAAwB,IAAInB,YAAJ,CAAiBa,QAAjB,CAAxB;AAEA,QAAIuC,SAAS,GAAGrC,KAAK,CAACqC,SAAN,GAAkBrC,KAAK,CAACqC,SAAxB,GAAoC,EAApD;AACA,QAAIS,SAAS,GAAG9C,KAAK,CAAC8C,SAAN,GAAkB9C,KAAK,CAAC8C,SAAxB,GAAoC,EAApD,CAPiC,CASjC;;AACA,QAAMgI,SAAS,GAAG,IAAIC,eAAJ,CAAoBzL,OAAO,CAAC0L,QAAR,CAAiBC,MAArC,CAAlB;AACA,QAAMC,OAAO,GAAG3L,cAAc,CAAC4L,QAAf,CAAwB3L,QAAQ,CAAC4L,UAAjC,EAA6CN,SAA7C,CAAhB;;AACA,QAAI,CAAC,CAACI,OAAN,EAAe;AACb,UAAIA,OAAO,KAAK7I,SAAhB,EAA2B;AACzBA,QAAAA,SAAS,GAAG6I,OAAZ;AACAlL,QAAAA,KAAK,CAACiC,YAAN,CAAmBiJ,OAAnB;AACD;AACF,KALD,MAKO,IAAI,CAAC,CAAC7I,SAAN,EAAiB;AACtB9C,MAAAA,cAAc,CAAC8L,QAAf,CAAwB7L,QAAQ,CAAC4L,UAAjC,EAA6C/I,SAA7C;AACD;;AACD,QAAMiJ,OAAO,GAAG/L,cAAc,CAAC4L,QAAf,CAAwB3L,QAAQ,CAAC+L,UAAjC,EAA6CT,SAA7C,CAAhB;;AACA,QAAI,CAAC,CAACQ,OAAN,EAAe;AACb,UAAIA,OAAO,KAAKxI,SAAhB,EAA2B;AACzBA,QAAAA,SAAS,GAAGwI,OAAZ;AACAtL,QAAAA,KAAK,CAAC6C,YAAN,CAAmByI,OAAnB;AACD;AACF,KALD,MAKO,IAAI,CAAC,CAACxI,SAAN,EAAiB;AACtBvD,MAAAA,cAAc,CAAC8L,QAAf,CAAwB7L,QAAQ,CAAC+L,UAAjC,EAA6CzI,SAA7C;AACD;;AAED,UAAKf,KAAL,GAAa;AAAEb,MAAAA,cAAc,EAAEmB,SAAlB;AAA6BE,MAAAA,cAAc,EAAEO;AAA7C,KAAb;;AAEA,QAAI9C,KAAK,CAACwL,YAAV,EAAwB;AACtBxL,MAAAA,KAAK,CAACO,cAAN;AACD;;AAlCgC;AAmClC,GA/CH,CAiDE;AACA;AACA;;;AAnDF;AAAA;AAAA,WAoDE,+BAAsBkL,SAAtB,EAAiDC,SAAjD,EAA4E;AAC1E,UAAMC,SAAS,GAAG,KAAK3L,KAAL,CAAWgD,EAAX,KAAkByI,SAAS,CAACzI,EAA9C;AACA,UAAM4I,WAAW,GAAG,KAAK5L,KAAL,CAAWqC,SAAX,KAAyBoJ,SAAS,CAACpJ,SAAvD;AACA,UAAMY,WAAW,GAAG,KAAKjD,KAAL,CAAW8C,SAAX,KAAyB2I,SAAS,CAAC3I,SAAvD;AACA,UAAMI,YAAY,GAAG,KAAKlD,KAAL,CAAW6L,UAAX,KAA0BJ,SAAS,CAACI,UAAzD;AACA,UAAMC,mBAAmB,GAAG,KAAK9L,KAAL,CAAWwL,YAAX,KAA4BC,SAAS,CAACD,YAAlE;AACA,UAAMO,gBAAgB,GAAG,KAAKhK,KAAL,CAAWZ,SAAX,KAAyBuK,SAAS,CAACvK,SAA5D;AACA,UAAM6K,gBAAgB,GAAG,KAAKjK,KAAL,CAAWS,SAAX,KAAyBkJ,SAAS,CAAClJ,SAA5D;AAEA,aACEmJ,SAAS,IACTC,WADA,IAEA3I,WAFA,IAGAC,YAHA,IAIA4I,mBAJA,IAKAC,gBALA,IAMAC,gBAPF;AASD,KAtEH,CAwEE;AACA;AACA;;AA1EF;AAAA;AAAA,WA2EE,4BAAmBC,SAAnB,EAA8C;AAC5C,UAAI,CAAC,KAAKjM,KAAL,CAAWgD,EAAhB,EAAoB;AAClB,aAAK7C,cAAL,GAAsBiB,SAAtB;AACA,aAAKd,eAAL,GAAuBc,SAAvB;AACA;AACD;;AAED,UAAMwK,WAAW,GAAG,KAAK5L,KAAL,CAAWqC,SAAX,KAAyB4J,SAAS,CAAC5J,SAAvD;AACA,UAAMY,WAAW,GAAG,KAAKjD,KAAL,CAAW8C,SAAX,KAAyBmJ,SAAS,CAACnJ,SAAvD;AACA,UAAMI,YAAY,GAAG,KAAKlD,KAAL,CAAW6L,UAAX,KAA0BI,SAAS,CAACJ,UAAzD,CAT4C,CAW5C;;AACA,UAAID,WAAJ,EAAiB;AACf,YAAI,CAAC,KAAK5L,KAAL,CAAWqC,SAAhB,EAA2B;AACzB9C,UAAAA,cAAc,CAAC2M,WAAf,CAA2B1M,QAAQ,CAAC4L,UAApC,EAAgD,IAAhD;AACD,SAFD,MAEO;AACL7L,UAAAA,cAAc,CAAC8L,QAAf,CAAwB7L,QAAQ,CAAC4L,UAAjC,EAA6C,KAAKpL,KAAL,CAAWqC,SAAxD;AACD;AACF;;AACD,UAAIY,WAAJ,EAAiB;AACf,YAAI,CAAC,KAAKjD,KAAL,CAAW8C,SAAhB,EAA2B;AACzBvD,UAAAA,cAAc,CAAC2M,WAAf,CAA2B1M,QAAQ,CAAC+L,UAApC,EAAgD,IAAhD;AACD,SAFD,MAEO;AACLhM,UAAAA,cAAc,CAAC8L,QAAf,CAAwB7L,QAAQ,CAAC+L,UAAjC,EAA6C,KAAKvL,KAAL,CAAW8C,SAAxD;AACD;AACF,OAzB2C,CA2B5C;;;AACA,UAAI8I,WAAW,IAAK1I,YAAY,IAAI,CAAC,CAAC,KAAKlD,KAAL,CAAWqC,SAAjD,EAA6D;AAC3D;AACA,YAAI,KAAKN,KAAL,CAAWb,cAAX,KAA8B,KAAKlB,KAAL,CAAWqC,SAA7C,EAAwD;AACtD,eAAKb,OAAL,CAAa,KAAKxB,KAAL,CAAWqC,SAAxB;AACD;;AAED,aAAK0C,UAAL,CAAgB,KAAK/E,KAAL,CAAWgD,EAA3B;AACD;;AAED,UAAIC,WAAW,IAAKC,YAAY,IAAI,CAAC,CAAC,KAAKlD,KAAL,CAAW8C,SAAjD,EAA6D;AAC3D;AACA,YAAI,KAAKf,KAAL,CAAWQ,cAAX,KAA8B,KAAKvC,KAAL,CAAW8C,SAA7C,EAAwD;AACtD,eAAKH,OAAL,CAAa,KAAK3C,KAAL,CAAW8C,SAAxB;AACD;;AAED,YAAMK,qBAAqB,GAAG,KAAKnD,KAAL,CAAWwE,cAAX,KAA8ByH,SAAS,CAACzH,cAAtE;AACA,aAAKzB,UAAL,CAAgB,KAAK/C,KAAL,CAAWgD,EAA3B,EAA+BC,WAA/B,EAA4CC,YAA5C,EAA0DC,qBAA1D;AACD;AACF;AAzHH;AAAA;AAAA,WA2HE,kBAAS;AAAA;;AACP,0BACE,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAEnE,cAAc,CAACmN,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAgC,QAAA,YAAY,EAAE,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,SAAS,EAAEzM,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,IAAI,EAAC,YAFP;AAGE,QAAA,GAAG,EAAE,aAAA0M,IAAG,EAAI;AACV,UAAA,MAAI,CAACnM,YAAL,GAAoBmM,IAApB;AACD,SALH;AAME,QAAA,KAAK,oBAAO5M,UAAP,CANP;AAOE,QAAA,IAAI,EAAC,MAPP;AAQE,QAAA,YAAY,EAAC,IARf;AASE,QAAA,OAAO,EAAE,CAAC,KAAKsC,KAAL,CAAWZ,SATvB;AAUE,QAAA,QAAQ,EAAE,KAAKM,UAVjB;AAWE,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWb,cAX3B;AAYE,QAAA,gBAAgB,EAAE,KAAKV,mBAZzB;AAaE,QAAA,WAAW,EAAC,SAbd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAgBE,oBAAC,gBAAD;AAAkB,QAAA,IAAI,EAAC,MAAvB;AAA8B,QAAA,QAAQ,EAAE,KAAKc,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,EAiBG,KAAKtB,KAAL,CAAWqC,SAAX,iBACC,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,eAAb;AAA6B,QAAA,QAAQ,EAAC,KAAtC;AAA4C,QAAA,OAAO,EAAC,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAEiK,UAAAA,QAAQ,EAAE,MAAZ;AAAoB5M,UAAAA,KAAK,EAAE,MAA3B;AAAmCE,UAAAA,WAAW,EAAE,KAAhD;AAAuDC,UAAAA,YAAY,EAAE,KAArE;AAA4E0M,UAAAA,MAAM,EAAE;AAApF,SADT;AAEE,QAAA,OAAO,EAAE3O,aAAa,CAAC4O,OAFzB;AAGE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAChL,OAAL,CAAa,EAAb,CAAN;AAAA,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE,oBAAC,SAAD,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CAlBJ,eA4BE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,IAAI,EAAC,YAFP;AAGE,QAAA,GAAG,EAAE,aAAA6K,KAAG,EAAI;AACV,UAAA,MAAI,CAAChM,YAAL,GAAoBgM,KAApB;AACD,SALH;AAME,QAAA,KAAK,oBAAO5M,UAAP,CANP;AAOE,QAAA,YAAY,EAAC,IAPf;AAQE,QAAA,OAAO,EAAE,CAAC,KAAKsC,KAAL,CAAWS,SARvB;AASE,QAAA,IAAI,EAAC,MATP;AAUE,QAAA,QAAQ,EAAE,KAAKI,UAVjB;AAWE,QAAA,YAAY,EAAE,KAAKb,KAAL,CAAWQ,cAX3B;AAYE,QAAA,gBAAgB,EAAE,KAAKD,mBAZzB;AAaE,QAAA,WAAW,EAAC,SAbd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BF,eA2CE,oBAAC,gBAAD;AAAkB,QAAA,IAAI,EAAC,MAAvB;AAA8B,QAAA,QAAQ,EAAE,KAAKI,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3CF,EA4CG,KAAK1C,KAAL,CAAW8C,SAAX,iBACC,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,eAAb;AAA6B,QAAA,QAAQ,EAAC,KAAtC;AAA4C,QAAA,OAAO,EAAC,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAEwJ,UAAAA,QAAQ,EAAE,MAAZ;AAAoB5M,UAAAA,KAAK,EAAE,MAA3B;AAAmCE,UAAAA,WAAW,EAAE,KAAhD;AAAuDC,UAAAA,YAAY,EAAE,KAArE;AAA4E0M,UAAAA,MAAM,EAAE;AAApF,SADT;AAEE,QAAA,OAAO,EAAE3O,aAAa,CAAC4O,OAFzB;AAGE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC7J,OAAL,CAAa,EAAb,CAAN;AAAA,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE,oBAAC,SAAD,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CA7CJ,EAuDG,KAAK3C,KAAL,CAAWwL,YAAX,gBACC,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAE,KAAKjL,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE3C,aAAa,CAAC6O,IAA/B;AAAqC,QAAA,KAAK,EAAE;AAAE7M,UAAAA,WAAW,EAAE;AAAf,SAA5C;AAAoE,QAAA,OAAO,EAAE,KAAKW,cAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,SAAS,EAAE1B,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADD,gBAOC,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAE,oBAAd;AAAoC,QAAA,QAAQ,EAAC,KAA7C;AAAmD,QAAA,OAAO,EAAC,mBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEjB,aAAa,CAAC6O,IAA/B;AAAqC,QAAA,KAAK,EAAE;AAAE7M,UAAAA,WAAW,EAAE;AAAf,SAA5C;AAAoE,QAAA,OAAO,EAAE,KAAKW,cAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,SAAS,EAAE1B,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CA9DJ,EAoEG,KAAKkD,KAAL,CAAWZ,SAAX,iBAAwB;AAAK,QAAA,KAAK,EAAE;AAAEuL,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAK3K,KAAL,CAAWZ,SAA1C,CApE3B,EAqEG,KAAKY,KAAL,CAAWS,SAAX,iBAAwB;AAAK,QAAA,KAAK,EAAE;AAAEkK,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAK3K,KAAL,CAAWS,SAA1C,CArE3B,CADF,CADF,CADF;AA6ED;AAzMH;AAAA;AAAA,WAsYE,kBAAiBmK,KAAjB,EAA4CxH,MAA5C,EAAwE;AACtE,UAAIA,MAAM,IAAIwH,KAAK,KAAK,KAAK5K,KAAL,CAAWZ,SAAnC,EAA8C;AAC5C,YAAMA,SAAS,GAAG,CAAC,CAACwL,KAAF,mBAAmBA,KAAnB,IAA6BvL,SAA/C;AACA,aAAKH,QAAL,CAAc;AAAEE,UAAAA,SAAS,EAAEA;AAAb,SAAd;AACD,OAHD,MAGO,IAAIwL,KAAK,KAAK,KAAK5K,KAAL,CAAWS,SAAzB,EAAoC;AACzC,YAAMA,SAAS,GAAG,CAAC,CAACmK,KAAF,mBAAmBA,KAAnB,IAA6BvL,SAA/C;AACA,aAAKH,QAAL,CAAc;AAAEuB,UAAAA,SAAS,EAAEA;AAAb,SAAd;AACD;;AACD,aAAOpB,SAAP;AACD;AA/YH;AAAA;AAAA,WAsqBE,4BACEoF,KADF,EAEEL,EAFF,EAGEzE,GAHF,EAIEkL,WAJF,EAKEzH,MALF,EAMsB;AACpB,cAAQgB,EAAR;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACE,cAAI0G,KAAK,CAACnL,GAAD,CAAT,EAAgB;AACd,mBAAO,KAAKsE,QAAL,0BAAgCtE,GAAhC,yDAAyFyD,MAAzF,CAAP;AACD;;AACD,4BAAWqB,KAAX,cAAoBL,EAApB,cAA0BzE,GAA1B;;AACF,aAAK,GAAL;AACE,cAAImL,KAAK,CAACnL,GAAD,CAAT,EAAgB;AACd,+BAAY8E,KAAZ;AACD;;AACD,4BAAWA,KAAX,cAAoBL,EAApB,cAA0BzE,GAA1B;;AACF,aAAK,IAAL;AACE,cAAImL,KAAK,CAACnL,GAAD,CAAT,EAAgB;AACd,+BAAY8E,KAAZ;AACD;;AACD,4BAAWA,KAAX,cAAoBL,EAApB,cAA0BzE,GAA1B;;AACF;AACE,iBAAO,KAAKsE,QAAL,6BAAmCG,EAAnC,8BAAgEhB,MAAhE,CAAP;AApBJ;AAsBD;AAnsBH;;AAAA;AAAA,EAA+B1H,KAAK,CAACqP,SAArC;AAAa/M,S,CACJgN,Y,GAAe;AACpBC,EAAAA,MAAM,EAAE;AAAA,WAAM,IAAN;AAAA;AADY,C;;AAgzBxB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAClL,KAAD;AAAA,SAA2B;AACjDyC,IAAAA,cAAc,EAAEzC,KAAK,CAACmL,KAAN,CAAYC,YAAZ,CAAyB3I,cADQ;AAEjDwE,IAAAA,UAAU,EAAE7K,kBAAkB,CAAC4D,KAAD,CAFmB;AAGjDM,IAAAA,SAAS,EAAEpE,iBAAiB,CAAC8D,KAAD,CAHqB;AAIjDe,IAAAA,SAAS,EAAE5E,iBAAiB,CAAC6D,KAAD,CAJqB;AAKjD+C,IAAAA,MAAM,EAAE/C,KAAK,CAACmL,KAAN,CAAYpI,MAL6B;AAMjD0G,IAAAA,YAAY,EAAEzJ,KAAK,CAACmL,KAAN,CAAYC,YAAZ,CAAyB3B,YANU;AAOjDxB,IAAAA,aAAa,EAAEjI,KAAK,CAACmL,KAAN,CAAYC,YAAZ,CAAyBnD,aAPS;AAQjD3B,IAAAA,YAAY,EAAEtG,KAAK,CAACmL,KAAN,CAAYC,YAAZ,CAAyB9E,YARU;AASjDwD,IAAAA,UAAU,EAAE9J,KAAK,CAACmL,KAAN,CAAYrB;AATyB,GAA3B;AAAA,CAAxB;;AAYA,IAAMuB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAkE;AAC3F,SAAO;AACLnE,IAAAA,aAAa,EAAElL,kBAAkB,CAACI,mBAAmB,CAAC8K,aAArB,EAAoCmE,QAApC,CAD5B;AAELpL,IAAAA,YAAY,EAAEjE,kBAAkB,CAACI,mBAAmB,CAAC6D,YAArB,EAAmCoL,QAAnC,CAF3B;AAGLxK,IAAAA,YAAY,EAAE7E,kBAAkB,CAACI,mBAAmB,CAACyE,YAArB,EAAmCwK,QAAnC,CAH3B;AAIL9M,IAAAA,cAAc,EAAEvC,kBAAkB,CAACI,mBAAmB,CAACmC,cAArB,EAAqC8M,QAArC,CAJ7B;AAKL9E,IAAAA,mBAAmB,EAAEvK,kBAAkB,CAACI,mBAAmB,CAACmK,mBAArB,EAA0C8E,QAA1C,CALlC;AAMLpD,IAAAA,eAAe,EAAEjM,kBAAkB,CAACI,mBAAmB,CAAC6L,eAArB,EAAsCoD,QAAtC;AAN9B,GAAP;AAQD,CATD;;AAWA,IAAMC,kBAAkB,GAAGvP,OAAO,CAACkP,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CrN,SAA7C,CAA3B;AAEA,eAAeuN,kBAAf","sourcesContent":["import * as React from 'react';\nimport { Button, Tooltip, ButtonVariant, TextInput, Form } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { bindActionCreators } from 'redux';\nimport { KialiAppState } from '../../../store/Store';\nimport { findValueSelector, hideValueSelector, edgeLabelsSelector } from '../../../store/Selectors';\nimport { GraphToolbarActions } from '../../../actions/GraphToolbarActions';\nimport { KialiAppAction } from '../../../actions/KialiAppAction';\nimport GraphHelpFind from '../../../pages/Graph/GraphHelpFind';\nimport { CyNode, CyEdge } from '../../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport * as CytoscapeGraphUtils from '../../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { EdgeLabelMode, NodeType, Layout } from '../../../types/Graph';\nimport * as AlertUtils from '../../../utils/AlertUtils';\nimport { KialiIcon, defaultIconStyle } from 'config/KialiIcon';\nimport { style } from 'typestyle';\nimport TourStopContainer from 'components/Tour/TourStop';\nimport { GraphTourStops } from 'pages/Graph/GraphHelpTour';\nimport { TimeInMilliseconds } from 'types/Common';\nimport { AutoComplete } from 'utils/AutoComplete';\nimport { DEGRADED, FAILURE, HEALTHY } from 'types/Health';\nimport { GraphFindOptions } from './GraphFindOptions';\nimport history, { HistoryManager, URLParam } from '../../../app/History';\n\ntype ReduxProps = {\n  compressOnHide: boolean;\n  edgeLabels: EdgeLabelMode[];\n  findValue: string;\n  hideValue: string;\n  layout: Layout;\n  showFindHelp: boolean;\n  showIdleNodes: boolean;\n  showSecurity: boolean;\n  updateTime: TimeInMilliseconds;\n\n  setEdgeLabels: (vals: EdgeLabelMode[]) => void;\n  setFindValue: (val: string) => void;\n  setHideValue: (val: string) => void;\n  toggleFindHelp: () => void;\n  toggleGraphSecurity: () => void;\n  toggleIdleNodes: () => void;\n};\n\ntype GraphFindProps = ReduxProps & {\n  cy: any;\n};\n\ntype GraphFindState = {\n  findError?: string;\n  findInputValue: string;\n  hideError?: string;\n  hideInputValue: string;\n};\n\ntype ParsedExpression = {\n  target: 'node' | 'edge';\n  selector: string;\n};\n\nconst inputWidth = {\n  width: 'var(--graph-find-input--width)'\n};\n\n// reduce toolbar padding from 20px to 10px to save space\nconst thinGroupStyle = style({\n  paddingLeft: '10px',\n  paddingRight: '10px'\n});\n\nconst operands: string[] = [\n  '%grpcerr',\n  '%grpctraffic',\n  '%httperr',\n  '%httptraffic',\n  'app',\n  'circuitbreaker',\n  'cluster',\n  'destprincipal',\n  'faultinjection',\n  'grpc',\n  'grpcerr',\n  'grpcin',\n  'grpcout',\n  'healthy',\n  'http',\n  'httpin',\n  'httpout',\n  'idle',\n  'mtls',\n  'name',\n  'namespace',\n  'node',\n  'operation',\n  'outside',\n  'protocol',\n  'requestrouting',\n  'requesttimeout',\n  'responsetime',\n  'service',\n  'serviceentry',\n  'sidecar',\n  'sourceprincipal',\n  'tcp',\n  'tcptrafficshifting',\n  'throughput',\n  'traffic',\n  'trafficshifting',\n  'trafficsource',\n  'version',\n  'virtualservice',\n  'tcpin',\n  'tcpout',\n  'workload',\n  'workloadentry'\n];\n\nexport class GraphFind extends React.Component<GraphFindProps, GraphFindState> {\n  static contextTypes = {\n    router: () => null\n  };\n\n  private findAutoComplete: AutoComplete;\n  private findInputRef;\n  private hiddenElements: any | undefined;\n  private hideAutoComplete: AutoComplete;\n  private hideInputRef;\n  private removedElements: any | undefined;\n\n  constructor(props: GraphFindProps) {\n    super(props);\n\n    this.findAutoComplete = new AutoComplete(operands);\n    this.hideAutoComplete = new AutoComplete(operands);\n\n    let findValue = props.findValue ? props.findValue : '';\n    let hideValue = props.hideValue ? props.hideValue : '';\n\n    // Let URL override current redux state at construction time. Update URL as needed.\n    const urlParams = new URLSearchParams(history.location.search);\n    const urlFind = HistoryManager.getParam(URLParam.GRAPH_FIND, urlParams);\n    if (!!urlFind) {\n      if (urlFind !== findValue) {\n        findValue = urlFind;\n        props.setFindValue(urlFind);\n      }\n    } else if (!!findValue) {\n      HistoryManager.setParam(URLParam.GRAPH_FIND, findValue);\n    }\n    const urlHide = HistoryManager.getParam(URLParam.GRAPH_HIDE, urlParams);\n    if (!!urlHide) {\n      if (urlHide !== hideValue) {\n        hideValue = urlHide;\n        props.setHideValue(urlHide);\n      }\n    } else if (!!hideValue) {\n      HistoryManager.setParam(URLParam.GRAPH_HIDE, hideValue);\n    }\n\n    this.state = { findInputValue: findValue, hideInputValue: hideValue };\n\n    if (props.showFindHelp) {\n      props.toggleFindHelp();\n    }\n  }\n\n  // We only update on a change to the find/hide/compress values, or a graph change.  Although we use other props\n  // in processing (compressOnHide, layout, etc), a change to those settings will generate a graph change, so we\n  // wait for the graph change to do the update.\n  shouldComponentUpdate(nextProps: GraphFindProps, nextState: GraphFindState) {\n    const cyChanged = this.props.cy !== nextProps.cy;\n    const findChanged = this.props.findValue !== nextProps.findValue;\n    const hideChanged = this.props.hideValue !== nextProps.hideValue;\n    const graphChanged = this.props.updateTime !== nextProps.updateTime;\n    const showFindHelpChanged = this.props.showFindHelp !== nextProps.showFindHelp;\n    const findErrorChanged = this.state.findError !== nextState.findError;\n    const hideErrorChanged = this.state.hideError !== nextState.hideError;\n\n    return (\n      cyChanged ||\n      findChanged ||\n      hideChanged ||\n      graphChanged ||\n      showFindHelpChanged ||\n      findErrorChanged ||\n      hideErrorChanged\n    );\n  }\n\n  // Note that we may have redux hide/find values set at mount-time. But because the toolbar mounts prior to\n  // the graph loading, we can't perform this graph \"post-processing\" until we have a valid cy graph.  But the\n  // find/hide processing will be initiated externally (CytoscapeGraph:processgraphUpdate) when the graph is ready.\n  componentDidUpdate(prevProps: GraphFindProps) {\n    if (!this.props.cy) {\n      this.hiddenElements = undefined;\n      this.removedElements = undefined;\n      return;\n    }\n\n    const findChanged = this.props.findValue !== prevProps.findValue;\n    const hideChanged = this.props.hideValue !== prevProps.hideValue;\n    const graphChanged = this.props.updateTime !== prevProps.updateTime;\n\n    // ensure redux state and URL are aligned\n    if (findChanged) {\n      if (!this.props.findValue) {\n        HistoryManager.deleteParam(URLParam.GRAPH_FIND, true);\n      } else {\n        HistoryManager.setParam(URLParam.GRAPH_FIND, this.props.findValue);\n      }\n    }\n    if (hideChanged) {\n      if (!this.props.hideValue) {\n        HistoryManager.deleteParam(URLParam.GRAPH_HIDE, true);\n      } else {\n        HistoryManager.setParam(URLParam.GRAPH_HIDE, this.props.hideValue);\n      }\n    }\n\n    // make sure the value is updated if there was a change\n    if (findChanged || (graphChanged && !!this.props.findValue)) {\n      // ensure findInputValue is aligned if findValue is set externally (e.g. resetSettings)\n      if (this.state.findInputValue !== this.props.findValue) {\n        this.setFind(this.props.findValue);\n      }\n\n      this.handleFind(this.props.cy);\n    }\n\n    if (hideChanged || (graphChanged && !!this.props.hideValue)) {\n      // ensure hideInputValue is aligned if hideValue is set externally (e.g. resetSettings)\n      if (this.state.hideInputValue !== this.props.hideValue) {\n        this.setHide(this.props.hideValue);\n      }\n\n      const compressOnHideChanged = this.props.compressOnHide !== prevProps.compressOnHide;\n      this.handleHide(this.props.cy, hideChanged, graphChanged, compressOnHideChanged);\n    }\n  }\n\n  render() {\n    return (\n      <TourStopContainer info={GraphTourStops.Find}>\n        <Form style={{ float: 'left' }} isHorizontal={true}>\n          <span className={thinGroupStyle}>\n            <TextInput\n              id=\"graph_find\"\n              name=\"graph_find\"\n              ref={ref => {\n                this.findInputRef = ref;\n              }}\n              style={{ ...inputWidth }}\n              type=\"text\"\n              autoComplete=\"on\"\n              isValid={!this.state.findError}\n              onChange={this.updateFind}\n              defaultValue={this.state.findInputValue}\n              onKeyDownCapture={this.checkSpecialKeyFind}\n              placeholder=\"Find...\"\n            />\n            <GraphFindOptions kind=\"find\" onSelect={this.updateFindOption} />\n            {this.props.findValue && (\n              <Tooltip key=\"ot_clear_find\" position=\"top\" content=\"Clear Find...\">\n                <Button\n                  style={{ minWidth: '20px', width: '20px', paddingLeft: '5px', paddingRight: '5px', bottom: '1px' }}\n                  variant={ButtonVariant.control}\n                  onClick={() => this.setFind('')}\n                >\n                  <KialiIcon.Close />\n                </Button>\n              </Tooltip>\n            )}\n            <TextInput\n              id=\"graph_hide\"\n              name=\"graph_hide\"\n              ref={ref => {\n                this.hideInputRef = ref;\n              }}\n              style={{ ...inputWidth }}\n              autoComplete=\"on\"\n              isValid={!this.state.hideError}\n              type=\"text\"\n              onChange={this.updateHide}\n              defaultValue={this.state.hideInputValue}\n              onKeyDownCapture={this.checkSpecialKeyHide}\n              placeholder=\"Hide...\"\n            />\n            <GraphFindOptions kind=\"hide\" onSelect={this.updateHideOption} />\n            {this.props.hideValue && (\n              <Tooltip key=\"ot_clear_hide\" position=\"top\" content=\"Clear Hide...\">\n                <Button\n                  style={{ minWidth: '20px', width: '20px', paddingLeft: '5px', paddingRight: '5px', bottom: '1px' }}\n                  variant={ButtonVariant.control}\n                  onClick={() => this.setHide('')}\n                >\n                  <KialiIcon.Close />\n                </Button>\n              </Tooltip>\n            )}\n            {this.props.showFindHelp ? (\n              <GraphHelpFind onClose={this.toggleFindHelp}>\n                <Button variant={ButtonVariant.link} style={{ paddingLeft: '6px' }} onClick={this.toggleFindHelp}>\n                  <KialiIcon.Info className={defaultIconStyle} />\n                </Button>\n              </GraphHelpFind>\n            ) : (\n              <Tooltip key={'ot_graph_find_help'} position=\"top\" content=\"Find/Hide Help...\">\n                <Button variant={ButtonVariant.link} style={{ paddingLeft: '6px' }} onClick={this.toggleFindHelp}>\n                  <KialiIcon.Info className={defaultIconStyle} />\n                </Button>\n              </Tooltip>\n            )}\n            {this.state.findError && <div style={{ color: 'red' }}>{this.state.findError}</div>}\n            {this.state.hideError && <div style={{ color: 'red' }}>{this.state.hideError}</div>}\n          </span>\n        </Form>\n      </TourStopContainer>\n    );\n  }\n\n  private toggleFindHelp = () => {\n    this.props.toggleFindHelp();\n  };\n\n  private checkSpecialKeyFind = event => {\n    const keyCode = event.keyCode ? event.keyCode : event.which;\n    switch (keyCode) {\n      case 9: // tab (autocomplete)\n        event.preventDefault();\n        const next = this.findAutoComplete.next();\n        if (!!next) {\n          this.findInputRef.value = next;\n          this.findInputRef.scrollLeft = this.findInputRef.scrollWidth;\n          this.setState({ findInputValue: next, findError: undefined });\n        }\n        break;\n      case 13: // return (submit)\n        event.preventDefault();\n        this.submitFind();\n        break;\n      default:\n        break;\n    }\n  };\n\n  private updateFindOption = key => {\n    this.setFind(key);\n  };\n\n  private updateFind = val => {\n    if ('' === val) {\n      this.setFind('');\n    } else {\n      const diff = Math.abs(val.length - this.state.findInputValue.length);\n      this.findAutoComplete.setInput(val, [' ', '!']);\n      this.setState({ findInputValue: val, findError: undefined });\n      // submit if length change is greater than a single key, assume browser suggestion clicked or user paste\n      if (diff > 1) {\n        this.props.setFindValue(val);\n      }\n    }\n  };\n\n  private setFind = val => {\n    // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n    this.findInputRef.value = val;\n    const htmlInputElement: HTMLInputElement = document.getElementById('graph_find') as HTMLInputElement;\n    if (htmlInputElement !== null) {\n      htmlInputElement.value = val;\n    }\n    this.findAutoComplete.setInput(val);\n    this.setState({ findInputValue: val, findError: undefined });\n    this.props.setFindValue(val);\n  };\n\n  private submitFind = () => {\n    if (this.props.findValue !== this.state.findInputValue) {\n      this.props.setFindValue(this.state.findInputValue);\n    }\n  };\n\n  private checkSpecialKeyHide = event => {\n    const keyCode = event.keyCode ? event.keyCode : event.which;\n    switch (keyCode) {\n      case 9: // tab (autocomplete)\n        event.preventDefault();\n        const next = this.hideAutoComplete.next();\n        if (!!next) {\n          this.hideInputRef.value = next;\n          this.hideInputRef.scrollLeft = this.hideInputRef.scrollWidth;\n          this.setState({ hideInputValue: next, hideError: undefined });\n        }\n        break;\n      case 13: // return (submit)\n        event.preventDefault();\n        this.submitHide();\n        break;\n      default:\n        break;\n    }\n  };\n\n  private updateHideOption = key => {\n    this.setHide(key);\n  };\n\n  private updateHide = val => {\n    if ('' === val) {\n      this.setHide('');\n    } else {\n      const diff = Math.abs(val.length - this.state.hideInputValue.length);\n      this.hideAutoComplete.setInput(val, [' ', '!']);\n      this.setState({ hideInputValue: val, hideError: undefined });\n      // submit if length change is greater than a single key, assume browser suggestion clicked or user paste\n      if (diff > 1) {\n        this.props.setHideValue(val);\n      }\n    }\n  };\n\n  private submitHide = () => {\n    if (this.props.hideValue !== this.state.hideInputValue) {\n      this.props.setHideValue(this.state.hideInputValue);\n    }\n  };\n\n  private setHide = val => {\n    // TODO: when TextInput refs are fixed in PF4 then use the ref and remove the direct HTMLElement usage\n    this.hideInputRef.value = val;\n    const htmlInputElement: HTMLInputElement = document.getElementById('graph_hide') as HTMLInputElement;\n    if (htmlInputElement !== null) {\n      htmlInputElement.value = val;\n    }\n    this.hideAutoComplete.setInput(val);\n    this.setState({ hideInputValue: val, hideError: undefined });\n    this.props.setHideValue(val);\n  };\n\n  private handleHide = (cy: any, hideChanged: boolean, graphChanged: boolean, compressOnHideChanged: boolean) => {\n    const selector = this.parseValue(this.props.hideValue, false);\n    console.debug(`Hide selector=[${selector}]`);\n\n    cy.startBatch();\n\n    // unhide hidden elements when we are dealing with the same graph. Either way,release for garbage collection\n    if (!!this.hiddenElements && !graphChanged) {\n      this.hiddenElements.style({ visibility: 'visible' });\n    }\n    this.hiddenElements = undefined;\n\n    // restore removed elements when we are working with the same graph. Either way,release for garbage collection.  If the graph has changed\n    if (!!this.removedElements && !graphChanged) {\n      this.removedElements.restore();\n    }\n    this.removedElements = undefined;\n\n    if (selector) {\n      // select the new hide-hits\n      let hiddenElements = cy.$(selector);\n      // add the edges connected to hidden nodes\n      hiddenElements = hiddenElements.add(hiddenElements.connectedEdges());\n      // add nodes with only hidden edges (keep idle nodes as that is an explicit option)\n      const visibleElements = hiddenElements.absoluteComplement();\n      const nodesWithVisibleEdges = visibleElements.edges().connectedNodes();\n      const nodesWithOnlyHiddenEdges = visibleElements.nodes(`[^${CyNode.isIdle}]`).subtract(nodesWithVisibleEdges);\n      hiddenElements = hiddenElements.add(nodesWithOnlyHiddenEdges);\n      // subtract any appbox hits, we only hide empty appboxes\n      hiddenElements = hiddenElements.subtract(hiddenElements.filter('$node[isBox]'));\n\n      if (this.props.compressOnHide) {\n        this.removedElements = cy.remove(hiddenElements);\n        // now subtract any appboxes that don't have any visible children\n        const hiddenAppBoxes = cy.$('$node[isBox]').subtract(cy.$('$node[isBox] > :inside'));\n        this.removedElements = this.removedElements.add(cy.remove(hiddenAppBoxes));\n      } else {\n        // set the remaining hide-hits hidden\n        this.hiddenElements = hiddenElements;\n        this.hiddenElements.style({ visibility: 'hidden' });\n        // now subtract any appboxes that don't have any visible children\n        const hiddenAppBoxes = cy.$('$node[isBox]').subtract(cy.$('$node[isBox] > :visible'));\n        hiddenAppBoxes.style({ visibility: 'hidden' });\n        this.hiddenElements = this.hiddenElements.add(hiddenAppBoxes);\n      }\n    }\n\n    cy.endBatch();\n\n    const hasRemovedElements: boolean = !!this.removedElements && this.removedElements.length > 0;\n    if (hideChanged || (compressOnHideChanged && selector) || hasRemovedElements) {\n      CytoscapeGraphUtils.runLayout(cy, this.props.layout);\n    }\n  };\n\n  private handleFind = (cy: any) => {\n    const selector = this.parseValue(this.props.findValue, true);\n    console.debug(`Find selector=[${selector}]`);\n\n    cy.startBatch();\n    // unhighlight old find-hits\n    cy.elements('*.find').removeClass('find');\n    if (selector) {\n      // add new find-hits\n      cy.elements(selector).addClass('find');\n    }\n    cy.endBatch();\n  };\n\n  private setError(error: string | undefined, isFind: boolean): undefined {\n    if (isFind && error !== this.state.findError) {\n      const findError = !!error ? `Find: ${error}` : undefined;\n      this.setState({ findError: findError });\n    } else if (error !== this.state.hideError) {\n      const hideError = !!error ? `Hide: ${error}` : undefined;\n      this.setState({ hideError: hideError });\n    }\n    return undefined;\n  }\n\n  private parseValue = (val: string, isFind: boolean): string | undefined => {\n    let preparedVal = this.prepareValue(val);\n    if (!preparedVal) {\n      return undefined;\n    }\n\n    // generate separate selectors for each disjunctive clause and then stitch them together. This\n    // lets us mix node and edge criteria.\n    const orClauses = preparedVal.split(' OR ');\n    let orSelector;\n\n    for (const clause of orClauses) {\n      const expressions = clause.split(' AND ');\n      const conjunctive = expressions.length > 1;\n      let selector;\n\n      for (const expression of expressions) {\n        const parsedExpression = this.parseExpression(expression, conjunctive, isFind);\n        if (!parsedExpression) {\n          return undefined;\n        }\n        selector = this.appendSelector(selector, parsedExpression, isFind);\n        if (!selector) {\n          return undefined;\n        }\n      }\n      // parsed successfully, clear any previous error message\n      this.setError(undefined, isFind);\n      orSelector = !orSelector ? selector : `${orSelector},${selector}`;\n    }\n\n    return orSelector;\n  };\n\n  private prepareValue = (val: string): string => {\n    // remove double spaces\n    val = val.replace(/ +(?= )/g, '');\n\n    // remove unnecessary mnemonic qualifiers on unary operators (e.g. 'has cb' -> 'cb').\n    val = ' ' + val;\n    val = val.replace(/ is /gi, ' ');\n    val = val.replace(/ has /gi, ' ');\n    val = val.replace(/ !\\s*is /gi, ' ! ');\n    val = val.replace(/ !\\s*has /gi, ' ! ');\n\n    // replace string operators\n    val = val.replace(/ not /gi, ' !');\n    val = val.replace(/ !\\s*contains /gi, ' !*= ');\n    val = val.replace(/ !\\s*startswith /gi, ' !^= ');\n    val = val.replace(/ !\\s*endswith /gi, ' !$= ');\n    val = val.replace(/ contains /gi, ' *= ');\n    val = val.replace(/ startswith /gi, ' ^= ');\n    val = val.replace(/ endswith /gi, ' $= ');\n\n    // uppercase conjunctions\n    val = val.replace(/ and /gi, ' AND ');\n    val = val.replace(/ or /gi, ' OR ');\n\n    return val.trim();\n  };\n\n  private parseExpression = (\n    expression: string,\n    conjunctive: boolean,\n    isFind: boolean\n  ): ParsedExpression | undefined => {\n    let op;\n    if (expression.includes('!=')) {\n      op = '!=';\n    } else if (expression.includes('!*=')) {\n      op = '!*=';\n    } else if (expression.includes('!$=')) {\n      op = '!$=';\n    } else if (expression.includes('!^=')) {\n      op = '!^=';\n    } else if (expression.includes('>=')) {\n      op = '>=';\n    } else if (expression.includes('<=')) {\n      op = '<=';\n    } else if (expression.includes('*=')) {\n      op = '*='; // substring\n    } else if (expression.includes('$=')) {\n      op = '$='; // starts with\n    } else if (expression.includes('^=')) {\n      op = '^='; // ends with\n    } else if (expression.includes('=')) {\n      op = '=';\n    } else if (expression.includes('>')) {\n      op = '>';\n    } else if (expression.includes('<')) {\n      op = '<';\n    } else if (expression.includes('!')) {\n      op = '!';\n    }\n    if (!op) {\n      if (expression.split(' ').length > 1) {\n        return this.setError(`No valid operator found in expression`, isFind);\n      }\n\n      const unaryExpression = this.parseUnaryFindExpression(expression.trim(), false);\n      return unaryExpression ? unaryExpression : this.setError(`Invalid Node or Edge operand`, isFind);\n    }\n\n    const tokens = expression.split(op);\n    if (op === '!') {\n      const unaryExpression = this.parseUnaryFindExpression(tokens[1].trim(), true);\n      return unaryExpression ? unaryExpression : this.setError(`Invalid Node or Edge operand`, isFind);\n    }\n\n    const field = tokens[0].trim();\n    const val = tokens[1].trim();\n\n    switch (field.toLowerCase()) {\n      //\n      // nodes...\n      //\n      case 'app':\n        return { target: 'node', selector: `[${CyNode.app} ${op} \"${val}\"]` };\n      case 'cluster':\n        return { target: 'node', selector: `[${CyNode.cluster} ${op} \"${val}\"]` };\n      case 'grpcin': {\n        const s = this.getNumericSelector(CyNode.grpcIn, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'grpcout': {\n        const s = this.getNumericSelector(CyNode.grpcOut, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'httpin': {\n        const s = this.getNumericSelector(CyNode.httpIn, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'httpout': {\n        const s = this.getNumericSelector(CyNode.httpOut, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'name': {\n        const isNegation = op.startsWith('!');\n        if (conjunctive) {\n          return this.setError(`Can not use 'AND' with 'name' operand`, isFind);\n        }\n        const agg = `[${CyNode.aggregateValue} ${op} \"${val}\"]`;\n        const app = `[${CyNode.app} ${op} \"${val}\"]`;\n        const svc = `[${CyNode.service} ${op} \"${val}\"]`;\n        const wl = `[${CyNode.workload} ${op} \"${val}\"]`;\n        return { target: 'node', selector: isNegation ? `${agg}${app}${svc}${wl}` : `${agg},${app},${svc},${wl}` };\n      }\n      case 'node':\n        let nodeType = val.toLowerCase();\n        switch (nodeType) {\n          case 'op':\n          case 'operation':\n            nodeType = NodeType.AGGREGATE;\n            break;\n          case 'svc':\n            nodeType = NodeType.SERVICE;\n            break;\n          case 'wl':\n            nodeType = NodeType.WORKLOAD;\n            break;\n          default:\n            break; // no-op\n        }\n        switch (nodeType) {\n          case NodeType.AGGREGATE:\n          case NodeType.APP:\n          case NodeType.SERVICE:\n          case NodeType.WORKLOAD:\n          case NodeType.UNKNOWN:\n            return { target: 'node', selector: `[${CyNode.nodeType} ${op} \"${nodeType}\"]` };\n          default:\n            this.setError(\n              `Invalid node type [${nodeType}]. Expected app | operation | service | unknown | workload`,\n              isFind\n            );\n        }\n        return undefined;\n      case 'ns':\n      case 'namespace':\n        return { target: 'node', selector: `[${CyNode.namespace} ${op} \"${val}\"]` };\n      case 'op':\n      case 'operation':\n        return { target: 'node', selector: `[${CyNode.aggregateValue} ${op} \"${val}\"]` };\n      case 'svc':\n      case 'service':\n        return { target: 'node', selector: `[${CyNode.service} ${op} \"${val}\"]` };\n      case 'tcpin': {\n        const s = this.getNumericSelector(CyNode.tcpIn, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'tcpout': {\n        const s = this.getNumericSelector(CyNode.tcpOut, op, val, expression, isFind);\n        return s ? { target: 'node', selector: s } : undefined;\n      }\n      case 'version':\n        return { target: 'node', selector: `[${CyNode.version} ${op} \"${val}\"]` };\n      case 'wl':\n      case 'workload':\n        return { target: 'node', selector: `[${CyNode.workload} ${op} \"${val}\"]` };\n      //\n      // edges..\n      //\n      case 'destprincipal':\n        if (!this.props.showSecurity) {\n          AlertUtils.addSuccess('Enabling \"security\" display option for graph find/hide expression');\n          this.props.toggleGraphSecurity();\n        }\n        return { target: 'edge', selector: `[${CyEdge.destPrincipal} ${op} \"${val}\"]` };\n      case 'grpc': {\n        const s = this.getNumericSelector(CyEdge.grpc, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case '%grpcerror':\n      case '%grpcerr': {\n        const s = this.getNumericSelector(CyEdge.grpcPercentErr, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case '%grpctraffic': {\n        const s = this.getNumericSelector(CyEdge.grpcPercentReq, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case 'http': {\n        const s = this.getNumericSelector(CyEdge.http, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case '%httperror':\n      case '%httperr': {\n        const s = this.getNumericSelector(CyEdge.httpPercentErr, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case '%httptraffic': {\n        const s = this.getNumericSelector(CyEdge.httpPercentReq, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case 'protocol': {\n        return { target: 'edge', selector: `[${CyEdge.protocol} ${op} \"${val}\"]` };\n      }\n      case 'rt':\n      case 'responsetime': {\n        if (!this.props.edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP)) {\n          AlertUtils.addSuccess('Enabling [P95] \"Response Time\" edge labels for this graph find/hide expression');\n          this.props.setEdgeLabels([\n            ...this.props.edgeLabels,\n            EdgeLabelMode.RESPONSE_TIME_GROUP,\n            EdgeLabelMode.RESPONSE_TIME_P95\n          ]);\n        }\n        const s = this.getNumericSelector(CyEdge.responseTime, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case 'sourceprincipal':\n        if (!this.props.showSecurity) {\n          AlertUtils.addSuccess('Enabling \"security\" display option for this graph find/hide expression');\n          this.props.toggleGraphSecurity();\n        }\n        return { target: 'edge', selector: `[${CyEdge.sourcePrincipal} ${op} \"${val}\"]` };\n      case 'tcp': {\n        const s = this.getNumericSelector(CyEdge.tcp, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      case 'throughput': {\n        if (!this.props.edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP)) {\n          AlertUtils.addSuccess('Enabling [Request] \"Throughput\" edge labels for this graph find/hide expression');\n          this.props.setEdgeLabels([\n            ...this.props.edgeLabels,\n            EdgeLabelMode.THROUGHPUT_GROUP,\n            EdgeLabelMode.THROUGHPUT_REQUEST\n          ]);\n        }\n        const s = this.getNumericSelector(CyEdge.throughput, op, val, expression, isFind);\n        return s ? { target: 'edge', selector: s } : undefined;\n      }\n      default:\n        return this.setError(`Invalid operand [${field}]`, isFind);\n    }\n  };\n\n  private getNumericSelector(\n    field: string,\n    op: string,\n    val: any,\n    _expression: string,\n    isFind: boolean\n  ): string | undefined {\n    switch (op) {\n      case '>':\n      case '<':\n      case '>=':\n      case '<=':\n        if (isNaN(val)) {\n          return this.setError(`Invalid value [${val}]. Expected a numeric value (use '.' for decimals)`, isFind);\n        }\n        return `[${field} ${op} ${val}]`;\n      case '=':\n        if (isNaN(val)) {\n          return `[!${field}]`;\n        }\n        return `[${field} ${op} ${val}]`;\n      case '!=':\n        if (isNaN(val)) {\n          return `[?${field}]`;\n        }\n        return `[${field} ${op} ${val}]`;\n      default:\n        return this.setError(`Invalid operator [${op}] for numeric condition`, isFind);\n    }\n  }\n\n  private parseUnaryFindExpression = (field: string, isNegation): ParsedExpression | undefined => {\n    switch (field.toLowerCase()) {\n      //\n      // nodes...\n      //\n      case 'cb':\n      case 'circuitbreaker':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.hasCB}]` : `[?${CyNode.hasCB}]` };\n      case 'dead':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isDead}]` : `[?${CyNode.isDead}]` };\n      case 'fi':\n      case 'faultinjection':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasFaultInjection}]` : `[?${CyNode.hasFaultInjection}]`\n        };\n      case 'inaccessible':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isInaccessible}]` : `[?${CyNode.isInaccessible}]` };\n      case 'healthy':\n        return {\n          target: 'node',\n          selector: isNegation\n            ? `[${CyNode.healthStatus} = \"${FAILURE.name}\"],[${CyNode.healthStatus} = \"${DEGRADED.name}\"]`\n            : `[${CyNode.healthStatus} = \"${HEALTHY.name}\"]`\n        };\n      case 'idle':\n        if (!this.props.showIdleNodes) {\n          AlertUtils.addSuccess('Enabling \"idle nodes\" display option for graph find/hide expression');\n          this.props.toggleIdleNodes();\n        }\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isIdle}]` : `[?${CyNode.isIdle}]` };\n      case 'outside':\n      case 'outsider':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isOutside}]` : `[?${CyNode.isOutside}]` };\n      case 'rr':\n      case 'requestrouting':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasRequestRouting}]` : `[?${CyNode.hasRequestRouting}]`\n        };\n      case 'rto':\n      case 'requesttimeout':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasRequestTimeout}]` : `[?${CyNode.hasRequestTimeout}]`\n        };\n      case 'se':\n      case 'serviceentry':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isServiceEntry}]` : `[?${CyNode.isServiceEntry}]` };\n      case 'sc':\n      case 'sidecar':\n        return { target: 'node', selector: isNegation ? `[?${CyNode.hasMissingSC}]` : `[^${CyNode.hasMissingSC}]` };\n      case 'tcpts':\n      case 'tcptrafficshifting':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasTCPTrafficShifting}]` : `[?${CyNode.hasTCPTrafficShifting}]`\n        };\n      case 'ts':\n      case 'trafficshifting':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasTrafficShifting}]` : `[?${CyNode.hasTrafficShifting}]`\n        };\n      case 'trafficsource':\n      case 'root':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.isRoot}]` : `[?${CyNode.isRoot}]` };\n      case 'vs':\n      case 'virtualservice':\n        return { target: 'node', selector: isNegation ? `[^${CyNode.hasVS}]` : `[?${CyNode.hasVS}]` };\n      case 'we':\n      case 'workloadentry':\n        return {\n          target: 'node',\n          selector: isNegation ? `[^${CyNode.hasWorkloadEntry}]` : `[?${CyNode.hasWorkloadEntry}]`\n        };\n      //\n      // edges...\n      //\n      case 'mtls':\n        if (!this.props.showSecurity) {\n          AlertUtils.addSuccess('Enabling \"security\" display option for graph find/hide expression');\n          this.props.toggleGraphSecurity();\n        }\n        return { target: 'edge', selector: isNegation ? `[${CyEdge.isMTLS} <= 0]` : `[${CyEdge.isMTLS} > 0]` };\n      case 'traffic': {\n        return { target: 'edge', selector: isNegation ? `[^${CyEdge.hasTraffic}]` : `[?${CyEdge.hasTraffic}]` };\n      }\n      default:\n        return undefined;\n    }\n  };\n\n  private appendSelector = (\n    selector: string,\n    parsedExpression: ParsedExpression,\n    isFind: boolean\n  ): string | undefined => {\n    if (!selector) {\n      return parsedExpression.target + parsedExpression.selector;\n    }\n    if (!selector.startsWith(parsedExpression.target)) {\n      return this.setError('Invalid expression. Can not AND node and edge criteria.', isFind);\n    }\n    return selector + parsedExpression.selector;\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  compressOnHide: state.graph.toolbarState.compressOnHide,\n  edgeLabels: edgeLabelsSelector(state),\n  findValue: findValueSelector(state),\n  hideValue: hideValueSelector(state),\n  layout: state.graph.layout,\n  showFindHelp: state.graph.toolbarState.showFindHelp,\n  showIdleNodes: state.graph.toolbarState.showIdleNodes,\n  showSecurity: state.graph.toolbarState.showSecurity,\n  updateTime: state.graph.updateTime\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setEdgeLabels: bindActionCreators(GraphToolbarActions.setEdgeLabels, dispatch),\n    setFindValue: bindActionCreators(GraphToolbarActions.setFindValue, dispatch),\n    setHideValue: bindActionCreators(GraphToolbarActions.setHideValue, dispatch),\n    toggleFindHelp: bindActionCreators(GraphToolbarActions.toggleFindHelp, dispatch),\n    toggleGraphSecurity: bindActionCreators(GraphToolbarActions.toggleGraphSecurity, dispatch),\n    toggleIdleNodes: bindActionCreators(GraphToolbarActions.toggleIdleNodes, dispatch)\n  };\n};\n\nconst GraphFindContainer = connect(mapStateToProps, mapDispatchToProps)(GraphFind);\n\nexport default GraphFindContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport moment from 'moment';\nimport { style } from 'typestyle';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { formatDuration, formatRelativeDate, isErrorTag } from 'utils/tracing/TracingHelper';\nexport var shortIDStyle = style({\n  color: PFColors.Black600,\n  padding: 4,\n  fontSize: 12\n});\nexport var fullIDStyle = style({\n  color: PFColors.Black600,\n  paddingLeft: 10,\n  fontSize: 14\n});\nexport var FormattedTraceInfo = /*#__PURE__*/function () {\n  function FormattedTraceInfo(trace) {\n    _classCallCheck(this, FormattedTraceInfo);\n\n    this.trace = trace;\n    this.mDate = void 0;\n    this.numErrors = void 0;\n    this.mDate = moment(trace.startTime / 1000);\n    this.numErrors = this.trace.spans.filter(function (sp) {\n      return sp.tags.some(isErrorTag);\n    }).length;\n  }\n\n  _createClass(FormattedTraceInfo, [{\n    key: \"name\",\n    value: function name() {\n      return this.trace.traceName ? this.trace.traceName : '(Missing root span)';\n    }\n  }, {\n    key: \"fullID\",\n    value: function fullID() {\n      return this.trace.traceID;\n    }\n  }, {\n    key: \"shortID\",\n    value: function shortID() {\n      return this.trace.traceID.slice(0, 6);\n    }\n  }, {\n    key: \"duration\",\n    value: function duration() {\n      return formatDuration(this.trace.duration);\n    }\n  }, {\n    key: \"hasErrors\",\n    value: function hasErrors() {\n      return this.numErrors !== 0;\n    }\n  }, {\n    key: \"relativeDate\",\n    value: function relativeDate() {\n      return formatRelativeDate(this.trace.startTime / 1000);\n    }\n  }, {\n    key: \"absTime\",\n    value: function absTime() {\n      var timeStr = this.mDate.format('h:mm:ss a');\n      return timeStr.slice(0, -3) + ' ' + timeStr.slice(-2);\n    }\n  }, {\n    key: \"fromNow\",\n    value: function fromNow() {\n      return this.mDate.fromNow();\n    }\n  }]);\n\n  return FormattedTraceInfo;\n}();","map":{"version":3,"sources":["/root/GraduateProject/src/components/JaegerIntegration/JaegerResults/FormattedTraceInfo.ts"],"names":["moment","style","PFColors","formatDuration","formatRelativeDate","isErrorTag","shortIDStyle","color","Black600","padding","fontSize","fullIDStyle","paddingLeft","FormattedTraceInfo","trace","mDate","numErrors","startTime","spans","filter","sp","tags","some","length","traceName","traceID","slice","duration","timeStr","format","fromNow"],"mappings":";;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,UAA7C,QAA+D,6BAA/D;AAEA,OAAO,IAAMC,YAAY,GAAGL,KAAK,CAAC;AAChCM,EAAAA,KAAK,EAAEL,QAAQ,CAACM,QADgB;AAEhCC,EAAAA,OAAO,EAAE,CAFuB;AAGhCC,EAAAA,QAAQ,EAAE;AAHsB,CAAD,CAA1B;AAMP,OAAO,IAAMC,WAAW,GAAGV,KAAK,CAAC;AAC/BM,EAAAA,KAAK,EAAEL,QAAQ,CAACM,QADe;AAE/BI,EAAAA,WAAW,EAAE,EAFkB;AAG/BF,EAAAA,QAAQ,EAAE;AAHqB,CAAD,CAAzB;AAMP,WAAaG,kBAAb;AAIE,8BAAoBC,KAApB,EAAwC;AAAA;;AAAA,SAApBA,KAAoB,GAApBA,KAAoB;AAAA,SAHhCC,KAGgC;AAAA,SAFjCC,SAEiC;AACtC,SAAKD,KAAL,GAAaf,MAAM,CAACc,KAAK,CAACG,SAAN,GAAkB,IAAnB,CAAnB;AACA,SAAKD,SAAL,GAAiB,KAAKF,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwB,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACC,IAAH,CAAQC,IAAR,CAAajB,UAAb,CAAJ;AAAA,KAA1B,EAAwDkB,MAAzE;AACD;;AAPH;AAAA;AAAA,WASE,gBAAO;AACL,aAAO,KAAKT,KAAL,CAAWU,SAAX,GAAuB,KAAKV,KAAL,CAAWU,SAAlC,GAA8C,qBAArD;AACD;AAXH;AAAA;AAAA,WAaE,kBAAS;AACP,aAAO,KAAKV,KAAL,CAAWW,OAAlB;AACD;AAfH;AAAA;AAAA,WAiBE,mBAAU;AACR,aAAO,KAAKX,KAAL,CAAWW,OAAX,CAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAP;AACD;AAnBH;AAAA;AAAA,WAqBE,oBAAW;AACT,aAAOvB,cAAc,CAAC,KAAKW,KAAL,CAAWa,QAAZ,CAArB;AACD;AAvBH;AAAA;AAAA,WAyBE,qBAAY;AACV,aAAO,KAAKX,SAAL,KAAmB,CAA1B;AACD;AA3BH;AAAA;AAAA,WA6BE,wBAAe;AACb,aAAOZ,kBAAkB,CAAC,KAAKU,KAAL,CAAWG,SAAX,GAAuB,IAAxB,CAAzB;AACD;AA/BH;AAAA;AAAA,WAiCE,mBAAU;AACR,UAAMW,OAAO,GAAG,KAAKb,KAAL,CAAWc,MAAX,CAAkB,WAAlB,CAAhB;AACA,aAAOD,OAAO,CAACF,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,IAAuB,GAAvB,GAA6BE,OAAO,CAACF,KAAR,CAAc,CAAC,CAAf,CAApC;AACD;AApCH;AAAA;AAAA,WAsCE,mBAAU;AACR,aAAO,KAAKX,KAAL,CAAWe,OAAX,EAAP;AACD;AAxCH;;AAAA;AAAA","sourcesContent":["import { JaegerTrace } from '../../../types/JaegerInfo';\nimport moment from 'moment';\nimport { style } from 'typestyle';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { formatDuration, formatRelativeDate, isErrorTag } from 'utils/tracing/TracingHelper';\n\nexport const shortIDStyle = style({\n  color: PFColors.Black600,\n  padding: 4,\n  fontSize: 12\n});\n\nexport const fullIDStyle = style({\n  color: PFColors.Black600,\n  paddingLeft: 10,\n  fontSize: 14\n});\n\nexport class FormattedTraceInfo {\n  private mDate: moment.Moment;\n  public numErrors: number;\n\n  constructor(private trace: JaegerTrace) {\n    this.mDate = moment(trace.startTime / 1000);\n    this.numErrors = this.trace.spans.filter(sp => sp.tags.some(isErrorTag)).length;\n  }\n\n  name() {\n    return this.trace.traceName ? this.trace.traceName : '(Missing root span)';\n  }\n\n  fullID() {\n    return this.trace.traceID;\n  }\n\n  shortID() {\n    return this.trace.traceID.slice(0, 6);\n  }\n\n  duration() {\n    return formatDuration(this.trace.duration);\n  }\n\n  hasErrors() {\n    return this.numErrors !== 0;\n  }\n\n  relativeDate() {\n    return formatRelativeDate(this.trace.startTime / 1000);\n  }\n\n  absTime() {\n    const timeStr = this.mDate.format('h:mm:ss a');\n    return timeStr.slice(0, -3) + ' ' + timeStr.slice(-2);\n  }\n\n  fromNow() {\n    return this.mDate.fromNow();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
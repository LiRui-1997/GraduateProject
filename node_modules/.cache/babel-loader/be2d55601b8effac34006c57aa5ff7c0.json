{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/root/GraduateProject/src/components/JaegerIntegration/TraceListItem.tsx\";\n\nimport * as React from 'react';\nimport { style } from 'typestyle';\nimport { pluralize, Tooltip } from '@patternfly/react-core';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { FormattedTraceInfo, shortIDStyle } from './JaegerResults/FormattedTraceInfo';\nvar parentDivStyle = style({\n  fontSize: 'var(--graph-side-panel--font-size)',\n  lineHeight: 1.3\n});\nvar nameStyle = style({\n  display: 'inline-block',\n  maxWidth: 175,\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n});\nvar errorStyle = style({\n  color: PFColors.Danger\n});\nvar secondaryLeftStyle = style({\n  color: PFColors.Black600\n});\nvar secondaryRightStyle = style({\n  color: PFColors.Black600,\n  float: 'right'\n});\nexport var TraceListItem = function TraceListItem(props) {\n  var formattedTrace = new FormattedTraceInfo(props.trace);\n  var nameStyleToUse = formattedTrace.hasErrors() ? nameStyle + ' ' + errorStyle : nameStyle;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, formattedTrace.name(), /*#__PURE__*/React.createElement(\"span\", {\n      className: shortIDStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, formattedTrace.shortID())),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: parentDivStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: nameStyleToUse,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, formattedTrace.name()), formattedTrace.duration() ? /*#__PURE__*/React.createElement(\"span\", {\n    className: secondaryRightStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 38\n    }\n  }, formattedTrace.duration()) : '', /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: secondaryLeftStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, pluralize(props.trace.spans.length, 'Span')), /*#__PURE__*/React.createElement(\"span\", {\n    className: secondaryRightStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, formattedTrace.fromNow())));\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/JaegerIntegration/TraceListItem.tsx"],"names":["React","style","pluralize","Tooltip","PFColors","FormattedTraceInfo","shortIDStyle","parentDivStyle","fontSize","lineHeight","nameStyle","display","maxWidth","textOverflow","overflow","whiteSpace","errorStyle","color","Danger","secondaryLeftStyle","Black600","secondaryRightStyle","float","TraceListItem","props","formattedTrace","trace","nameStyleToUse","hasErrors","name","shortID","duration","spans","length","fromNow"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,wBAAnC;AAGA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,oCAAjD;AAMA,IAAMC,cAAc,GAAGN,KAAK,CAAC;AAC3BO,EAAAA,QAAQ,EAAE,oCADiB;AAE3BC,EAAAA,UAAU,EAAE;AAFe,CAAD,CAA5B;AAKA,IAAMC,SAAS,GAAGT,KAAK,CAAC;AACtBU,EAAAA,OAAO,EAAE,cADa;AAEtBC,EAAAA,QAAQ,EAAE,GAFY;AAGtBC,EAAAA,YAAY,EAAE,UAHQ;AAItBC,EAAAA,QAAQ,EAAE,QAJY;AAKtBC,EAAAA,UAAU,EAAE;AALU,CAAD,CAAvB;AAQA,IAAMC,UAAU,GAAGf,KAAK,CAAC;AACvBgB,EAAAA,KAAK,EAAEb,QAAQ,CAACc;AADO,CAAD,CAAxB;AAIA,IAAMC,kBAAkB,GAAGlB,KAAK,CAAC;AAC/BgB,EAAAA,KAAK,EAAEb,QAAQ,CAACgB;AADe,CAAD,CAAhC;AAIA,IAAMC,mBAAmB,GAAGpB,KAAK,CAAC;AAChCgB,EAAAA,KAAK,EAAEb,QAAQ,CAACgB,QADgB;AAEhCE,EAAAA,KAAK,EAAE;AAFyB,CAAD,CAAjC;AAKA,OAAO,IAAMC,aAA6C,GAAG,SAAhDA,aAAgD,CAAAC,KAAK,EAAI;AACpE,MAAMC,cAAc,GAAG,IAAIpB,kBAAJ,CAAuBmB,KAAK,CAACE,KAA7B,CAAvB;AACA,MAAMC,cAAc,GAAGF,cAAc,CAACG,SAAf,KAA6BlB,SAAS,GAAG,GAAZ,GAAkBM,UAA/C,GAA4DN,SAAnF;AACA,sBACE,oBAAC,OAAD;AACE,IAAA,OAAO,eACL,0CACGe,cAAc,CAACI,IAAf,EADH,eAEE;AAAM,MAAA,SAAS,EAAEvB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCmB,cAAc,CAACK,OAAf,EAAhC,CAFF,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAK,IAAA,SAAS,EAAEvB,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAEoB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCF,cAAc,CAACI,IAAf,EAAlC,CADF,EAEGJ,cAAc,CAACM,QAAf,kBAA4B;AAAM,IAAA,SAAS,EAAEV,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCI,cAAc,CAACM,QAAf,EAAvC,CAA5B,GAAuG,EAF1G,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAM,IAAA,SAAS,EAAEZ,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCjB,SAAS,CAACsB,KAAK,CAACE,KAAN,CAAYM,KAAZ,CAAkBC,MAAnB,EAA2B,MAA3B,CAA/C,CAJF,eAKE;AAAM,IAAA,SAAS,EAAEZ,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCI,cAAc,CAACS,OAAf,EAAvC,CALF,CARF,CADF;AAkBD,CArBM","sourcesContent":["import * as React from 'react';\nimport { style } from 'typestyle';\nimport { pluralize, Tooltip } from '@patternfly/react-core';\n\nimport { JaegerTrace } from '../../types/JaegerInfo';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { FormattedTraceInfo, shortIDStyle } from './JaegerResults/FormattedTraceInfo';\n\ninterface Props {\n  trace: JaegerTrace;\n}\n\nconst parentDivStyle = style({\n  fontSize: 'var(--graph-side-panel--font-size)',\n  lineHeight: 1.3\n});\n\nconst nameStyle = style({\n  display: 'inline-block',\n  maxWidth: 175,\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n});\n\nconst errorStyle = style({\n  color: PFColors.Danger\n});\n\nconst secondaryLeftStyle = style({\n  color: PFColors.Black600\n});\n\nconst secondaryRightStyle = style({\n  color: PFColors.Black600,\n  float: 'right'\n});\n\nexport const TraceListItem: React.FunctionComponent<Props> = props => {\n  const formattedTrace = new FormattedTraceInfo(props.trace);\n  const nameStyleToUse = formattedTrace.hasErrors() ? nameStyle + ' ' + errorStyle : nameStyle;\n  return (\n    <Tooltip\n      content={\n        <>\n          {formattedTrace.name()}\n          <span className={shortIDStyle}>{formattedTrace.shortID()}</span>\n        </>\n      }\n    >\n      <div className={parentDivStyle}>\n        <span className={nameStyleToUse}>{formattedTrace.name()}</span>\n        {formattedTrace.duration() ? <span className={secondaryRightStyle}>{formattedTrace.duration()}</span> : ''}\n        <br />\n        <span className={secondaryLeftStyle}>{pluralize(props.trace.spans.length, 'Span')}</span>\n        <span className={secondaryRightStyle}>{formattedTrace.fromNow()}</span>\n      </div>\n    </Tooltip>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelEdge.tsx\";\nimport * as React from 'react';\nimport { RateTableGrpc, RateTableHttp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { ResponseTimeChart } from '../../components/SummaryPanel/ResponseTimeChart';\nimport { GraphType, NodeType, Protocol, UNKNOWN, TrafficRate } from '../../types/Graph';\nimport { renderBadgedLink } from './SummaryLink';\nimport { shouldRefreshData, getDatapoints, getNodeMetrics, getNodeMetricType, hr, renderNoTraffic, NodeMetricType, summaryHeader, summaryBodyTabs, summaryPanel, summaryFont } from './SummaryPanelCommon';\nimport { makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { decoratedEdgeData, decoratedNodeData } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { ResponseFlagsTable } from 'components/SummaryPanel/ResponseFlagsTable';\nimport { ResponseHostsTable } from 'components/SummaryPanel/ResponseHostsTable';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { Tab, Tooltip } from '@patternfly/react-core';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { style } from 'typestyle';\nvar defaultMetricsState = {\n  rates: [],\n  errRates: [],\n  rtAvg: [],\n  rtMed: [],\n  rt95: [],\n  rt99: [],\n  sent: [],\n  received: [],\n  unit: 'ms'\n};\n\nvar defaultState = _objectSpread({\n  edge: null,\n  loading: false,\n  metricsLoadError: null\n}, defaultMetricsState);\n\nvar principalStyle = style({\n  display: 'inline-block',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  width: '100%',\n  whiteSpace: 'nowrap'\n});\n\nvar SummaryPanelEdge = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelEdge, _React$Component);\n\n  var _super = _createSuper(SummaryPanelEdge);\n\n  function SummaryPanelEdge(_props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelEdge);\n\n    _this = _super.call(this, _props);\n    _this.metricsPromise = void 0;\n    _this.mainDivRef = void 0;\n\n    _this.getByLabels = function (sourceMetricType, destMetricType) {\n      var label;\n\n      switch (sourceMetricType) {\n        case NodeMetricType.AGGREGATE:\n          switch (destMetricType) {\n            case NodeMetricType.APP:\n              label = 'destination_app';\n              break;\n\n            case NodeMetricType.SERVICE:\n              label = 'destination_service_name';\n              break;\n\n            case NodeMetricType.WORKLOAD: // fall through, workload is default\n\n            default:\n              label = 'destination_workload';\n              break;\n          }\n\n          break;\n\n        case NodeMetricType.APP:\n          label = 'source_app';\n          break;\n\n        case NodeMetricType.SERVICE:\n          label = 'destination_service_name';\n          break;\n\n        case NodeMetricType.WORKLOAD: // fall through, workload is default\n\n        default:\n          label = 'source_workload';\n          break;\n      } // For special service dest nodes we want to narrow the data to only TS with 'unknown' workloads (see the related\n      // comparator in getNodeDatapoints).\n\n\n      return _this.isSpecialServiceDest(destMetricType) ? [label, 'destination_workload'] : [label];\n    };\n\n    _this.getNodeDataPoints = function (m, sourceMetricType, destMetricType, data, isServiceEntry) {\n      if (isServiceEntry) {\n        // For service entries, metrics are grouped by destination_service_name and we need to match it per \"data.destServices\"\n        return getDatapoints(m, function (labels) {\n          return data.destServices ? data.destServices.some(function (svc) {\n            return svc.name === labels['destination_service_name'];\n          }) : false;\n        });\n      }\n\n      var label;\n      var value;\n\n      switch (sourceMetricType) {\n        case NodeMetricType.AGGREGATE:\n          switch (destMetricType) {\n            case NodeMetricType.APP:\n              label = 'destination_app';\n              value = data.app;\n              break;\n\n            case NodeMetricType.SERVICE:\n              label = 'destination_service_name';\n              value = data.service;\n              break;\n\n            case NodeMetricType.WORKLOAD: // fall through, workload is default\n\n            default:\n              label = 'destination_workload';\n              value = data.workload;\n              break;\n          }\n\n          break;\n\n        case NodeMetricType.APP:\n          label = 'source_app';\n          value = data.app;\n          break;\n\n        case NodeMetricType.SERVICE:\n          label = 'destination_service_name';\n          value = data.service;\n          break;\n\n        case NodeMetricType.WORKLOAD: // fall through, use workload as the default\n\n        default:\n          label = 'source_workload';\n          value = data.workload;\n      }\n\n      var comparator = _this.isSpecialServiceDest(destMetricType) ? function (labels) {\n        return labels[label] === value && labels.destination_workload === UNKNOWN;\n      } : function (labels) {\n        return labels[label] === value;\n      };\n      return getDatapoints(m, comparator);\n    };\n\n    _this.updateCharts = function (props) {\n      var edge = props.data.summaryTarget;\n      var edgeData = decoratedEdgeData(edge);\n      var sourceData = decoratedNodeData(edge.source());\n      var destData = decoratedNodeData(edge.target());\n      var sourceMetricType = getNodeMetricType(sourceData);\n      var destMetricType = getNodeMetricType(destData);\n      var protocol = edgeData.protocol;\n      var isGrpc = protocol === Protocol.GRPC;\n      var isHttp = protocol === Protocol.HTTP;\n      var isTcp = protocol === Protocol.TCP;\n\n      var isRequests = isHttp || isGrpc && _this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n\n      if (_this.metricsPromise) {\n        _this.metricsPromise.cancel();\n\n        _this.metricsPromise = undefined;\n      } // Just return if the metric types are unset, there is no data, destination node is \"unknown\" or charts are unsupported\n\n\n      if (!destMetricType || !sourceMetricType || !_this.hasSupportedCharts(edge) || !isGrpc && !isHttp && !isTcp || destData.isInaccessible) {\n        _this.setState({\n          loading: false\n        });\n\n        return;\n      } // use dest node metrics unless dest is a serviceEntry or source is an aggregate\n\n\n      var isSourceAggregate = sourceData.nodeType === NodeType.AGGREGATE;\n      var isDestServiceEntry = !!destData.isServiceEntry;\n      var useDestMetrics = isDestServiceEntry || isSourceAggregate ? false : true;\n      var metricsNode = useDestMetrics ? edge.target() : edge.source();\n      var metricsNodeData = useDestMetrics ? destData : sourceData;\n      var direction = useDestMetrics || isSourceAggregate ? 'inbound' : 'outbound';\n      var metricType = useDestMetrics ? destMetricType : sourceMetricType;\n      var byLabels = isDestServiceEntry ? ['destination_service_name'] : _this.getByLabels(sourceMetricType, destMetricType);\n      var otherEndData = useDestMetrics ? sourceData : destData;\n      var quantiles = ['0.5', '0.95', '0.99'];\n      var promiseRequests, promiseStream;\n\n      if (isHttp || isGrpc && isRequests) {\n        var reporterRps = [NodeType.SERVICE, NodeType.UNKNOWN].includes(sourceData.nodeType) || NodeType.AGGREGATE === metricsNodeData.nodeType || edge.source().isIstio || edge.target().isIstio ? 'destination' : 'source';\n        var filtersRps = ['request_count', 'request_duration_millis', 'request_error_count'];\n        promiseRequests = getNodeMetrics(metricType, metricsNode, props, filtersRps, direction, reporterRps, protocol, quantiles, byLabels);\n      } else if (isGrpc) {\n        // gRPC messages uses slightly different reporting\n        var reporter = [NodeType.AGGREGATE, NodeType.UNKNOWN].includes(sourceData.nodeType) || sourceData.isIstio ? 'destination' : 'source';\n        var filters = ['grpc_sent', 'grpc_received'];\n        promiseStream = getNodeMetrics(metricType, metricsNode, props, filters, direction, reporter, undefined, // streams (tcp, grpc-messages) use dedicated metrics (i.e. no request_protocol label)\n        quantiles, byLabels);\n      } else {\n        // TCP uses slightly different reporting\n        var reporterTCP = [NodeType.AGGREGATE, NodeType.UNKNOWN].includes(sourceData.nodeType) || sourceData.isIstio ? 'destination' : 'source';\n        var filtersTCP = ['tcp_sent', 'tcp_received'];\n        promiseStream = getNodeMetrics(metricType, metricsNode, props, filtersTCP, direction, reporterTCP, undefined, // streams (tcp, grpc-messages) use dedicated metrics (i.e. no request_protocol label)\n        quantiles, byLabels);\n      }\n\n      _this.metricsPromise = makeCancelablePromise(promiseRequests ? promiseRequests : promiseStream);\n\n      _this.metricsPromise.promise.then(function (response) {\n        var metrics = response.data;\n        var reqRates = defaultMetricsState.rates,\n            errRates = defaultMetricsState.errRates,\n            rtAvg = defaultMetricsState.rtAvg,\n            rtMed = defaultMetricsState.rtMed,\n            rt95 = defaultMetricsState.rt95,\n            rt99 = defaultMetricsState.rt99,\n            sent = defaultMetricsState.sent,\n            received = defaultMetricsState.received,\n            unit = defaultMetricsState.unit;\n\n        if (isHttp || isGrpc && isRequests) {\n          reqRates = _this.getNodeDataPoints(metrics.request_count, sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          errRates = _this.getNodeDataPoints(metrics.request_error_count, sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          var duration = metrics.request_duration_millis || [];\n          rtAvg = _this.getNodeDataPoints(duration.filter(function (m) {\n            return m.stat === 'avg';\n          }), sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          rtMed = _this.getNodeDataPoints(duration.filter(function (m) {\n            return m.stat === '0.5';\n          }), sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          rt95 = _this.getNodeDataPoints(duration.filter(function (m) {\n            return m.stat === '0.95';\n          }), sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          rt99 = _this.getNodeDataPoints(duration.filter(function (m) {\n            return m.stat === '0.99';\n          }), sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n        } else {\n          // TCP or gRPC stream\n          sent = _this.getNodeDataPoints(isTcp ? metrics.tcp_sent : metrics.grpc_sent, sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n          received = _this.getNodeDataPoints(isTcp ? metrics.tcp_received : metrics.grpc_received, sourceMetricType, destMetricType, otherEndData, isDestServiceEntry);\n        }\n\n        _this.setState({\n          loading: false,\n          rates: reqRates,\n          errRates: errRates,\n          rtAvg: rtAvg,\n          rtMed: rtMed,\n          rt95: rt95,\n          rt99: rt99,\n          sent: sent,\n          received: received,\n          unit: unit\n        });\n      }).catch(function (error) {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelEdge: Ignore fetch error (canceled).');\n          return;\n        }\n\n        var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n\n        _this.setState(_objectSpread({\n          loading: false,\n          metricsLoadError: errorMsg\n        }, defaultMetricsState));\n      });\n\n      _this.setState({\n        loading: true,\n        metricsLoadError: null\n      });\n    };\n\n    _this.safeRate = function (s) {\n      return isNaN(s) ? 0.0 : Number(s);\n    };\n\n    _this.renderCharts = function (edge, isGrpc, isHttp, isTcp, isRequests) {\n      if (!_this.hasSupportedCharts(edge)) {\n        return isGrpc || isHttp ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 11\n          }\n        }), \" Service graphs do not support service-to-service aggregate sparklines. See the chart above for aggregate traffic or use the workload graph type to observe individual workload-to-service edge sparklines.\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 11\n          }\n        }), \" Service graphs do not support service-to-service aggregate sparklines. Use the workload graph type to observe individual workload-to-service edge sparklines.\");\n      }\n\n      var target = decoratedNodeData(edge.target());\n\n      if (target.isInaccessible) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 11\n          }\n        }), \" Sparkline charts cannot be shown because the destination is inaccessible.\");\n      }\n\n      if (_this.state.loading) {\n        return /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 14\n          }\n        }, \"Loading charts...\");\n      }\n\n      if (_this.state.metricsLoadError) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 11\n          }\n        }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 33\n          }\n        }, \"Error loading metrics: \"), _this.state.metricsLoadError);\n      }\n\n      var requestChart, streamChart;\n\n      if (isGrpc || isHttp) {\n        if (isRequests) {\n          var labelRps = isGrpc ? 'gRPC Request Traffic' : 'HTTP Request Traffic';\n          var labelRt = isGrpc ? 'gRPC Request Response Time (ms)' : 'HTTP Request Response Time (ms)';\n          requestChart = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RequestChart, {\n            label: labelRps,\n            dataRps: _this.state.rates,\n            dataErrors: _this.state.errRates,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 13\n            }\n          }), hr(), /*#__PURE__*/React.createElement(ResponseTimeChart, {\n            label: labelRt,\n            rtAvg: _this.state.rtAvg,\n            rtMed: _this.state.rtMed,\n            rt95: _this.state.rt95,\n            rt99: _this.state.rt99,\n            unit: _this.state.unit,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 13\n            }\n          }));\n        } else {\n          // assume gRPC messages, it's the only option other than requests\n          requestChart = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StreamChart, {\n            label: \"gRPC Message Traffic\",\n            sentRates: _this.state.sent,\n            receivedRates: _this.state.received,\n            unit: \"messages\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 13\n            }\n          }));\n        }\n      } else if (isTcp) {\n        streamChart = /*#__PURE__*/React.createElement(StreamChart, {\n          label: \"TCP Traffic\",\n          sentRates: _this.state.sent,\n          receivedRates: _this.state.received,\n          unit: \"bytes\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, requestChart, streamChart);\n    };\n\n    _this.hasSupportedCharts = function (edge) {\n      var sourceData = decoratedNodeData(edge.source());\n      var destData = decoratedNodeData(edge.target());\n      var sourceMetricType = getNodeMetricType(sourceData);\n      var destMetricType = getNodeMetricType(destData); // service-to-service edges are unsupported because they represent aggregations (of multiple workload to service edges)\n\n      var chartsSupported = sourceMetricType !== NodeMetricType.SERVICE || destMetricType !== NodeMetricType.SERVICE;\n      return chartsSupported;\n    };\n\n    _this.renderMTLSSummary = function (mTLSPercentage) {\n      var mtls = 'mTLS Enabled';\n      var isMtls = mTLSPercentage > 0;\n\n      if (isMtls && mTLSPercentage < 100.0) {\n        mtls = \"\".concat(mtls, \" [\").concat(mTLSPercentage, \"% of request traffic]\");\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, isMtls && /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.MtlsLock, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '6px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }\n      }, mtls)));\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    _this.mainDivRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(SummaryPanelEdge, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateCharts(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n        if (this.mainDivRef.current) {\n          this.mainDivRef.current.scrollTop = 0;\n        }\n      }\n\n      if (shouldRefreshData(prevProps, this.props)) {\n        this.updateCharts(this.props);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.metricsPromise) {\n        this.metricsPromise.cancel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var target = this.props.data.summaryTarget;\n      var source = decoratedNodeData(target.source());\n      var dest = decoratedNodeData(target.target());\n      var edge = decoratedEdgeData(target);\n      var mTLSPercentage = edge.isMTLS;\n      var isMtls = mTLSPercentage && mTLSPercentage > 0;\n      var hasPrincipals = !!edge.sourcePrincipal || !!edge.destPrincipal;\n      var hasSecurity = isMtls || hasPrincipals;\n      var protocol = edge.protocol;\n      var isGrpc = protocol === Protocol.GRPC;\n      var isHttp = protocol === Protocol.HTTP;\n      var isTcp = protocol === Protocol.TCP;\n      var isRequests = isHttp || isGrpc && this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n\n      var SecurityBlock = function SecurityBlock() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"panel-heading\",\n          style: summaryHeader,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 9\n          }\n        }, isMtls && _this2.renderMTLSSummary(mTLSPercentage), hasPrincipals && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            padding: '5px 0 2px 0'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }\n        }, \"Principals:\")), /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tt_src_ppl\",\n          position: \"top\",\n          content: \"Source principal: \".concat(edge.sourcePrincipal),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: principalStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }\n        }, edge.sourcePrincipal || 'unknown')), /*#__PURE__*/React.createElement(Tooltip, {\n          key: \"tt_src_ppl\",\n          position: \"top\",\n          content: \"Destination principal: \".concat(edge.destPrincipal),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: principalStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, edge.destPrincipal || 'unknown'))));\n      };\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.mainDivRef,\n        className: \"panel panel-default \".concat(summaryPanel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-heading\",\n        style: summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, renderBadgedLink(source, undefined, 'From:  '), renderBadgedLink(dest, undefined, 'To:        ')), hasSecurity && /*#__PURE__*/React.createElement(SecurityBlock, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }), (isHttp || isGrpc) && /*#__PURE__*/React.createElement(\"div\", {\n        className: summaryBodyTabs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SimpleTabs, {\n        id: \"edge_summary_rate_tabs\",\n        defaultTab: 0,\n        style: {\n          paddingBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Traffic\",\n        eventKey: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }, isGrpc && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isRequests,\n        rate: this.safeRate(edge.grpc),\n        rateGrpcErr: this.safeRate(edge.grpcErr),\n        rateNR: this.safeRate(edge.grpcNoResponse),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 23\n        }\n      })), isHttp && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP requests per second:\",\n        rate: this.safeRate(edge.http),\n        rate3xx: this.safeRate(edge.http3xx),\n        rate4xx: this.safeRate(edge.http4xx),\n        rate5xx: this.safeRate(edge.http5xx),\n        rateNR: this.safeRate(edge.httpNoResponse),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 23\n        }\n      })))), isRequests && /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Flags\",\n        eventKey: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ResponseFlagsTable, {\n        title: 'Response flags by ' + (isGrpc ? 'GRPC code:' : 'HTTP code:'),\n        responses: edge.responses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Hosts\",\n        eventKey: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ResponseHostsTable, {\n        title: 'Hosts by ' + (isGrpc ? 'GRPC code:' : 'HTTP code:'),\n        responses: edge.responses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 19\n        }\n      })))), hr(), this.renderCharts(target, isGrpc, isHttp, isTcp, isRequests)), isTcp && /*#__PURE__*/React.createElement(\"div\", {\n        className: summaryBodyTabs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SimpleTabs, {\n        id: \"edge_summary_flag_hosts_tabs\",\n        defaultTab: 0,\n        style: {\n          paddingBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        eventKey: 0,\n        title: \"Flags\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ResponseFlagsTable, {\n        title: \"Response flags by code:\",\n        responses: edge.responses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        eventKey: 1,\n        title: \"Hosts\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ResponseHostsTable, {\n        title: \"Hosts by code:\",\n        responses: edge.responses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 19\n        }\n      })))), hr(), this.renderCharts(target, isGrpc, isHttp, isTcp, isRequests)), !isGrpc && !isHttp && !isTcp && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 42\n        }\n      }, renderNoTraffic()));\n    }\n  }, {\n    key: \"isSpecialServiceDest\",\n    value: // We need to handle the special case of a dest service node showing client failures. These service nodes show up in\n    // non-service graphs, even when not injecting service nodes.\n    function isSpecialServiceDest(destMetricType) {\n      return destMetricType === NodeMetricType.SERVICE && !this.props.injectServiceNodes && this.props.graphType !== GraphType.SERVICE;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // if the summaryTarget (i.e. selected edge) has changed, then init the state and set to loading. The loading\n      // will actually be kicked off after the render (in componentDidMount/Update).\n      return props.data.summaryTarget !== state.edge ? _objectSpread({\n        edge: props.data.summaryTarget,\n        loading: true\n      }, defaultMetricsState) : null;\n    }\n  }]);\n\n  return SummaryPanelEdge;\n}(React.Component);\n\nexport { SummaryPanelEdge as default };","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelEdge.tsx"],"names":["React","RateTableGrpc","RateTableHttp","RequestChart","StreamChart","ResponseTimeChart","GraphType","NodeType","Protocol","UNKNOWN","TrafficRate","renderBadgedLink","shouldRefreshData","getDatapoints","getNodeMetrics","getNodeMetricType","hr","renderNoTraffic","NodeMetricType","summaryHeader","summaryBodyTabs","summaryPanel","summaryFont","makeCancelablePromise","decoratedEdgeData","decoratedNodeData","ResponseFlagsTable","ResponseHostsTable","KialiIcon","Tab","Tooltip","SimpleTabs","style","defaultMetricsState","rates","errRates","rtAvg","rtMed","rt95","rt99","sent","received","unit","defaultState","edge","loading","metricsLoadError","principalStyle","display","overflow","textOverflow","width","whiteSpace","SummaryPanelEdge","props","metricsPromise","mainDivRef","getByLabels","sourceMetricType","destMetricType","label","AGGREGATE","APP","SERVICE","WORKLOAD","isSpecialServiceDest","getNodeDataPoints","m","data","isServiceEntry","labels","destServices","some","svc","name","value","app","service","workload","comparator","destination_workload","updateCharts","summaryTarget","edgeData","sourceData","source","destData","target","protocol","isGrpc","GRPC","isHttp","HTTP","isTcp","TCP","isRequests","trafficRates","includes","GRPC_REQUEST","cancel","undefined","hasSupportedCharts","isInaccessible","setState","isSourceAggregate","nodeType","isDestServiceEntry","useDestMetrics","metricsNode","metricsNodeData","direction","metricType","byLabels","otherEndData","quantiles","promiseRequests","promiseStream","reporterRps","isIstio","filtersRps","reporter","filters","reporterTCP","filtersTCP","promise","then","response","metrics","reqRates","request_count","request_error_count","duration","request_duration_millis","filter","stat","tcp_sent","grpc_sent","tcp_received","grpc_received","catch","error","isCanceled","console","debug","errorMsg","message","safeRate","s","isNaN","Number","renderCharts","state","requestChart","streamChart","labelRps","labelRt","chartsSupported","renderMTLSSummary","mTLSPercentage","mtls","isMtls","paddingLeft","createRef","prevProps","current","scrollTop","dest","isMTLS","hasPrincipals","sourcePrincipal","destPrincipal","hasSecurity","SecurityBlock","padding","paddingBottom","grpc","grpcErr","grpcNoResponse","http","http3xx","http4xx","http5xx","httpNoResponse","responses","injectServiceNodes","graphType","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { RateTableGrpc, RateTableHttp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { ResponseTimeChart, ResponseTimeUnit } from '../../components/SummaryPanel/ResponseTimeChart';\nimport {\n  GraphType,\n  NodeType,\n  Protocol,\n  SummaryPanelPropType,\n  DecoratedGraphNodeData,\n  UNKNOWN,\n  TrafficRate\n} from '../../types/Graph';\nimport { renderBadgedLink } from './SummaryLink';\nimport {\n  shouldRefreshData,\n  getDatapoints,\n  getNodeMetrics,\n  getNodeMetricType,\n  hr,\n  renderNoTraffic,\n  NodeMetricType,\n  summaryHeader,\n  summaryBodyTabs,\n  summaryPanel,\n  summaryFont\n} from './SummaryPanelCommon';\nimport { Metric, Datapoint, IstioMetricsMap, Labels } from '../../types/Metrics';\nimport { Response } from '../../services/Api';\nimport { CancelablePromise, makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { decoratedEdgeData, decoratedNodeData } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { ResponseFlagsTable } from 'components/SummaryPanel/ResponseFlagsTable';\nimport { ResponseHostsTable } from 'components/SummaryPanel/ResponseHostsTable';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { Tab, Tooltip } from '@patternfly/react-core';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { Direction } from 'types/MetricsOptions';\nimport { style } from 'typestyle';\n\ntype SummaryPanelEdgeMetricsState = {\n  rates: Datapoint[];\n  errRates: Datapoint[];\n  rtAvg: Datapoint[];\n  rtMed: Datapoint[];\n  rt95: Datapoint[];\n  rt99: Datapoint[];\n  sent: Datapoint[];\n  received: Datapoint[];\n  unit: ResponseTimeUnit;\n};\n\ntype SummaryPanelEdgeState = SummaryPanelEdgeMetricsState & {\n  edge: any;\n  loading: boolean;\n  metricsLoadError: string | null;\n};\n\nconst defaultMetricsState: SummaryPanelEdgeMetricsState = {\n  rates: [],\n  errRates: [],\n  rtAvg: [],\n  rtMed: [],\n  rt95: [],\n  rt99: [],\n  sent: [],\n  received: [],\n  unit: 'ms'\n};\n\nconst defaultState: SummaryPanelEdgeState = {\n  edge: null,\n  loading: false,\n  metricsLoadError: null,\n  ...defaultMetricsState\n};\n\nconst principalStyle = style({\n  display: 'inline-block',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  width: '100%',\n  whiteSpace: 'nowrap'\n});\n\nexport default class SummaryPanelEdge extends React.Component<SummaryPanelPropType, SummaryPanelEdgeState> {\n  private metricsPromise?: CancelablePromise<Response<IstioMetricsMap>>;\n  private readonly mainDivRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: SummaryPanelPropType) {\n    super(props);\n\n    this.state = { ...defaultState };\n    this.mainDivRef = React.createRef<HTMLDivElement>();\n  }\n\n  static getDerivedStateFromProps(props: SummaryPanelPropType, state: SummaryPanelEdgeState) {\n    // if the summaryTarget (i.e. selected edge) has changed, then init the state and set to loading. The loading\n    // will actually be kicked off after the render (in componentDidMount/Update).\n    return props.data.summaryTarget !== state.edge\n      ? { edge: props.data.summaryTarget, loading: true, ...defaultMetricsState }\n      : null;\n  }\n\n  componentDidMount() {\n    this.updateCharts(this.props);\n  }\n\n  componentDidUpdate(prevProps: SummaryPanelPropType) {\n    if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n      if (this.mainDivRef.current) {\n        this.mainDivRef.current.scrollTop = 0;\n      }\n    }\n    if (shouldRefreshData(prevProps, this.props)) {\n      this.updateCharts(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n    }\n  }\n\n  render() {\n    const target = this.props.data.summaryTarget;\n    const source = decoratedNodeData(target.source());\n    const dest = decoratedNodeData(target.target());\n    const edge = decoratedEdgeData(target);\n    const mTLSPercentage = edge.isMTLS;\n    const isMtls = mTLSPercentage && mTLSPercentage > 0;\n    const hasPrincipals = !!edge.sourcePrincipal || !!edge.destPrincipal;\n    const hasSecurity = isMtls || hasPrincipals;\n    const protocol = edge.protocol;\n    const isGrpc = protocol === Protocol.GRPC;\n    const isHttp = protocol === Protocol.HTTP;\n    const isTcp = protocol === Protocol.TCP;\n    const isRequests = isHttp || (isGrpc && this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST));\n\n    const SecurityBlock = () => {\n      return (\n        <div className=\"panel-heading\" style={summaryHeader}>\n          {isMtls && this.renderMTLSSummary(mTLSPercentage)}\n          {hasPrincipals && (\n            <>\n              <div style={{ padding: '5px 0 2px 0' }}>\n                <strong>Principals:</strong>\n              </div>\n              <Tooltip key=\"tt_src_ppl\" position=\"top\" content={`Source principal: ${edge.sourcePrincipal}`}>\n                <span className={principalStyle}>{edge.sourcePrincipal || 'unknown'}</span>\n              </Tooltip>\n              <Tooltip key=\"tt_src_ppl\" position=\"top\" content={`Destination principal: ${edge.destPrincipal}`}>\n                <span className={principalStyle}>{edge.destPrincipal || 'unknown'}</span>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      );\n    };\n\n    return (\n      <div ref={this.mainDivRef} className={`panel panel-default ${summaryPanel}`}>\n        <div className=\"panel-heading\" style={summaryHeader}>\n          {renderBadgedLink(source, undefined, 'From:  ')}\n          {renderBadgedLink(dest, undefined, 'To:        ')}\n        </div>\n        {hasSecurity && <SecurityBlock />}\n        {(isHttp || isGrpc) && (\n          <div className={summaryBodyTabs}>\n            <SimpleTabs id=\"edge_summary_rate_tabs\" defaultTab={0} style={{ paddingBottom: '10px' }}>\n              <Tab style={summaryFont} title=\"Traffic\" eventKey={0}>\n                <div style={summaryFont}>\n                  {isGrpc && (\n                    <>\n                      <RateTableGrpc\n                        isRequests={isRequests}\n                        rate={this.safeRate(edge.grpc)}\n                        rateGrpcErr={this.safeRate(edge.grpcErr)}\n                        rateNR={this.safeRate(edge.grpcNoResponse)}\n                      />\n                    </>\n                  )}\n                  {isHttp && (\n                    <>\n                      <RateTableHttp\n                        title=\"HTTP requests per second:\"\n                        rate={this.safeRate(edge.http)}\n                        rate3xx={this.safeRate(edge.http3xx)}\n                        rate4xx={this.safeRate(edge.http4xx)}\n                        rate5xx={this.safeRate(edge.http5xx)}\n                        rateNR={this.safeRate(edge.httpNoResponse)}\n                      />\n                    </>\n                  )}\n                </div>\n              </Tab>\n              {isRequests && (\n                <Tab style={summaryFont} title=\"Flags\" eventKey={1}>\n                  <div style={summaryFont}>\n                    <ResponseFlagsTable\n                      title={'Response flags by ' + (isGrpc ? 'GRPC code:' : 'HTTP code:')}\n                      responses={edge.responses}\n                    />\n                  </div>\n                </Tab>\n              )}\n              <Tab style={summaryFont} title=\"Hosts\" eventKey={2}>\n                <div style={summaryFont}>\n                  <ResponseHostsTable\n                    title={'Hosts by ' + (isGrpc ? 'GRPC code:' : 'HTTP code:')}\n                    responses={edge.responses}\n                  />\n                </div>\n              </Tab>\n            </SimpleTabs>\n            {hr()}\n            {this.renderCharts(target, isGrpc, isHttp, isTcp, isRequests)}\n          </div>\n        )}\n        {isTcp && (\n          <div className={summaryBodyTabs}>\n            <SimpleTabs id=\"edge_summary_flag_hosts_tabs\" defaultTab={0} style={{ paddingBottom: '10px' }}>\n              <Tab style={summaryFont} eventKey={0} title=\"Flags\">\n                <div style={summaryFont}>\n                  <ResponseFlagsTable title=\"Response flags by code:\" responses={edge.responses} />\n                </div>\n              </Tab>\n              <Tab style={summaryFont} eventKey={1} title=\"Hosts\">\n                <div style={summaryFont}>\n                  <ResponseHostsTable title=\"Hosts by code:\" responses={edge.responses} />\n                </div>\n              </Tab>\n            </SimpleTabs>\n            {hr()}\n            {this.renderCharts(target, isGrpc, isHttp, isTcp, isRequests)}\n          </div>\n        )}\n        {!isGrpc && !isHttp && !isTcp && <div className=\"panel-body\">{renderNoTraffic()}</div>}\n      </div>\n    );\n  }\n\n  private getByLabels = (sourceMetricType: NodeMetricType, destMetricType: NodeMetricType) => {\n    let label: string;\n    switch (sourceMetricType) {\n      case NodeMetricType.AGGREGATE:\n        switch (destMetricType) {\n          case NodeMetricType.APP:\n            label = 'destination_app';\n            break;\n          case NodeMetricType.SERVICE:\n            label = 'destination_service_name';\n            break;\n          case NodeMetricType.WORKLOAD:\n          // fall through, workload is default\n          default:\n            label = 'destination_workload';\n            break;\n        }\n        break;\n      case NodeMetricType.APP:\n        label = 'source_app';\n        break;\n      case NodeMetricType.SERVICE:\n        label = 'destination_service_name';\n        break;\n      case NodeMetricType.WORKLOAD:\n      // fall through, workload is default\n      default:\n        label = 'source_workload';\n        break;\n    }\n    // For special service dest nodes we want to narrow the data to only TS with 'unknown' workloads (see the related\n    // comparator in getNodeDatapoints).\n    return this.isSpecialServiceDest(destMetricType) ? [label, 'destination_workload'] : [label];\n  };\n\n  private getNodeDataPoints = (\n    m: Metric[] | undefined,\n    sourceMetricType: NodeMetricType,\n    destMetricType: NodeMetricType,\n    data: DecoratedGraphNodeData,\n    isServiceEntry: boolean\n  ) => {\n    if (isServiceEntry) {\n      // For service entries, metrics are grouped by destination_service_name and we need to match it per \"data.destServices\"\n      return getDatapoints(m, (labels: Labels) => {\n        return data.destServices\n          ? data.destServices.some(svc => svc.name === labels['destination_service_name'])\n          : false;\n      });\n    }\n    let label: string;\n    let value: string | undefined;\n    switch (sourceMetricType) {\n      case NodeMetricType.AGGREGATE:\n        switch (destMetricType) {\n          case NodeMetricType.APP:\n            label = 'destination_app';\n            value = data.app;\n            break;\n          case NodeMetricType.SERVICE:\n            label = 'destination_service_name';\n            value = data.service;\n            break;\n          case NodeMetricType.WORKLOAD:\n          // fall through, workload is default\n          default:\n            label = 'destination_workload';\n            value = data.workload;\n            break;\n        }\n        break;\n      case NodeMetricType.APP:\n        label = 'source_app';\n        value = data.app;\n        break;\n      case NodeMetricType.SERVICE:\n        label = 'destination_service_name';\n        value = data.service;\n        break;\n      case NodeMetricType.WORKLOAD:\n      // fall through, use workload as the default\n      default:\n        label = 'source_workload';\n        value = data.workload;\n    }\n    const comparator = this.isSpecialServiceDest(destMetricType)\n      ? (labels: Labels) => labels[label] === value && labels.destination_workload === UNKNOWN\n      : (labels: Labels) => labels[label] === value;\n    return getDatapoints(m, comparator);\n  };\n\n  private updateCharts = (props: SummaryPanelPropType) => {\n    const edge = props.data.summaryTarget;\n    const edgeData = decoratedEdgeData(edge);\n    const sourceData = decoratedNodeData(edge.source());\n    const destData = decoratedNodeData(edge.target());\n    const sourceMetricType = getNodeMetricType(sourceData);\n    const destMetricType = getNodeMetricType(destData);\n    const protocol = edgeData.protocol;\n    const isGrpc = protocol === Protocol.GRPC;\n    const isHttp = protocol === Protocol.HTTP;\n    const isTcp = protocol === Protocol.TCP;\n    const isRequests = isHttp || (isGrpc && this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST));\n\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n      this.metricsPromise = undefined;\n    }\n\n    // Just return if the metric types are unset, there is no data, destination node is \"unknown\" or charts are unsupported\n    if (\n      !destMetricType ||\n      !sourceMetricType ||\n      !this.hasSupportedCharts(edge) ||\n      (!isGrpc && !isHttp && !isTcp) ||\n      destData.isInaccessible\n    ) {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    // use dest node metrics unless dest is a serviceEntry or source is an aggregate\n    const isSourceAggregate = sourceData.nodeType === NodeType.AGGREGATE;\n    const isDestServiceEntry = !!destData.isServiceEntry;\n    const useDestMetrics = isDestServiceEntry || isSourceAggregate ? false : true;\n    const metricsNode = useDestMetrics ? edge.target() : edge.source();\n    const metricsNodeData = useDestMetrics ? destData : sourceData;\n    const direction: Direction = useDestMetrics || isSourceAggregate ? 'inbound' : 'outbound';\n    const metricType = useDestMetrics ? destMetricType : sourceMetricType;\n    const byLabels = isDestServiceEntry\n      ? ['destination_service_name']\n      : this.getByLabels(sourceMetricType, destMetricType);\n    const otherEndData = useDestMetrics ? sourceData : destData;\n    const quantiles = ['0.5', '0.95', '0.99'];\n\n    let promiseRequests, promiseStream;\n    if (isHttp || (isGrpc && isRequests)) {\n      const reporterRps =\n        [NodeType.SERVICE, NodeType.UNKNOWN].includes(sourceData.nodeType) ||\n        NodeType.AGGREGATE === metricsNodeData.nodeType ||\n        edge.source().isIstio ||\n        edge.target().isIstio\n          ? 'destination'\n          : 'source';\n      const filtersRps = ['request_count', 'request_duration_millis', 'request_error_count'];\n      promiseRequests = getNodeMetrics(\n        metricType,\n        metricsNode,\n        props,\n        filtersRps,\n        direction,\n        reporterRps,\n        protocol,\n        quantiles,\n        byLabels\n      );\n    } else if (isGrpc) {\n      // gRPC messages uses slightly different reporting\n      const reporter =\n        [NodeType.AGGREGATE, NodeType.UNKNOWN].includes(sourceData.nodeType) || sourceData.isIstio\n          ? 'destination'\n          : 'source';\n      const filters = ['grpc_sent', 'grpc_received'];\n      promiseStream = getNodeMetrics(\n        metricType,\n        metricsNode,\n        props,\n        filters,\n        direction,\n        reporter,\n        undefined, // streams (tcp, grpc-messages) use dedicated metrics (i.e. no request_protocol label)\n        quantiles,\n        byLabels\n      );\n    } else {\n      // TCP uses slightly different reporting\n      const reporterTCP =\n        [NodeType.AGGREGATE, NodeType.UNKNOWN].includes(sourceData.nodeType) || sourceData.isIstio\n          ? 'destination'\n          : 'source';\n      const filtersTCP = ['tcp_sent', 'tcp_received'];\n      promiseStream = getNodeMetrics(\n        metricType,\n        metricsNode,\n        props,\n        filtersTCP,\n        direction,\n        reporterTCP,\n        undefined, // streams (tcp, grpc-messages) use dedicated metrics (i.e. no request_protocol label)\n        quantiles,\n        byLabels\n      );\n    }\n    this.metricsPromise = makeCancelablePromise(promiseRequests ? promiseRequests : promiseStream);\n    this.metricsPromise.promise\n      .then(response => {\n        const metrics = response.data;\n        let { rates: reqRates, errRates, rtAvg, rtMed, rt95, rt99, sent, received, unit } = defaultMetricsState;\n        if (isHttp || (isGrpc && isRequests)) {\n          reqRates = this.getNodeDataPoints(\n            metrics.request_count,\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          errRates = this.getNodeDataPoints(\n            metrics.request_error_count,\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          const duration = metrics.request_duration_millis || [];\n          rtAvg = this.getNodeDataPoints(\n            duration.filter(m => m.stat === 'avg'),\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          rtMed = this.getNodeDataPoints(\n            duration.filter(m => m.stat === '0.5'),\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          rt95 = this.getNodeDataPoints(\n            duration.filter(m => m.stat === '0.95'),\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          rt99 = this.getNodeDataPoints(\n            duration.filter(m => m.stat === '0.99'),\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n        } else {\n          // TCP or gRPC stream\n          sent = this.getNodeDataPoints(\n            isTcp ? metrics.tcp_sent : metrics.grpc_sent,\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n          received = this.getNodeDataPoints(\n            isTcp ? metrics.tcp_received : metrics.grpc_received,\n            sourceMetricType,\n            destMetricType,\n            otherEndData,\n            isDestServiceEntry\n          );\n        }\n\n        this.setState({\n          loading: false,\n          rates: reqRates,\n          errRates: errRates,\n          rtAvg: rtAvg,\n          rtMed: rtMed,\n          rt95: rt95,\n          rt99: rt99,\n          sent: sent,\n          received: received,\n          unit: unit\n        });\n      })\n      .catch(error => {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelEdge: Ignore fetch error (canceled).');\n          return;\n        }\n        const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        this.setState({\n          loading: false,\n          metricsLoadError: errorMsg,\n          ...defaultMetricsState\n        });\n      });\n\n    this.setState({ loading: true, metricsLoadError: null });\n  };\n\n  private safeRate = (s: any) => {\n    return isNaN(s) ? 0.0 : Number(s);\n  };\n\n  private renderCharts = (edge, isGrpc, isHttp, isTcp, isRequests) => {\n    if (!this.hasSupportedCharts(edge)) {\n      return isGrpc || isHttp ? (\n        <>\n          <KialiIcon.Info /> Service graphs do not support service-to-service aggregate sparklines. See the chart above\n          for aggregate traffic or use the workload graph type to observe individual workload-to-service edge\n          sparklines.\n        </>\n      ) : (\n        <>\n          <KialiIcon.Info /> Service graphs do not support service-to-service aggregate sparklines. Use the workload\n          graph type to observe individual workload-to-service edge sparklines.\n        </>\n      );\n    }\n\n    const target = decoratedNodeData(edge.target());\n    if (target.isInaccessible) {\n      return (\n        <>\n          <KialiIcon.Info /> Sparkline charts cannot be shown because the destination is inaccessible.\n        </>\n      );\n    }\n\n    if (this.state.loading) {\n      return <strong>Loading charts...</strong>;\n    }\n\n    if (this.state.metricsLoadError) {\n      return (\n        <div>\n          <KialiIcon.Warning /> <strong>Error loading metrics: </strong>\n          {this.state.metricsLoadError}\n        </div>\n      );\n    }\n\n    let requestChart, streamChart;\n    if (isGrpc || isHttp) {\n      if (isRequests) {\n        const labelRps = isGrpc ? 'gRPC Request Traffic' : 'HTTP Request Traffic';\n        const labelRt = isGrpc ? 'gRPC Request Response Time (ms)' : 'HTTP Request Response Time (ms)';\n        requestChart = (\n          <>\n            <RequestChart label={labelRps} dataRps={this.state.rates!} dataErrors={this.state.errRates} />\n            {hr()}\n            <ResponseTimeChart\n              label={labelRt}\n              rtAvg={this.state.rtAvg}\n              rtMed={this.state.rtMed}\n              rt95={this.state.rt95}\n              rt99={this.state.rt99}\n              unit={this.state.unit}\n            />\n          </>\n        );\n      } else {\n        // assume gRPC messages, it's the only option other than requests\n        requestChart = (\n          <>\n            <StreamChart\n              label=\"gRPC Message Traffic\"\n              sentRates={this.state.sent!}\n              receivedRates={this.state.received}\n              unit=\"messages\"\n            />\n          </>\n        );\n      }\n    } else if (isTcp) {\n      streamChart = (\n        <StreamChart label=\"TCP Traffic\" sentRates={this.state.sent} receivedRates={this.state.received} unit=\"bytes\" />\n      );\n    }\n\n    return (\n      <>\n        {requestChart}\n        {streamChart}\n      </>\n    );\n  };\n\n  private hasSupportedCharts = edge => {\n    const sourceData = decoratedNodeData(edge.source());\n    const destData = decoratedNodeData(edge.target());\n    const sourceMetricType = getNodeMetricType(sourceData);\n    const destMetricType = getNodeMetricType(destData);\n\n    // service-to-service edges are unsupported because they represent aggregations (of multiple workload to service edges)\n    const chartsSupported = sourceMetricType !== NodeMetricType.SERVICE || destMetricType !== NodeMetricType.SERVICE;\n    return chartsSupported;\n  };\n\n  // We need to handle the special case of a dest service node showing client failures. These service nodes show up in\n  // non-service graphs, even when not injecting service nodes.\n  private isSpecialServiceDest(destMetricType: NodeMetricType) {\n    return (\n      destMetricType === NodeMetricType.SERVICE &&\n      !this.props.injectServiceNodes &&\n      this.props.graphType !== GraphType.SERVICE\n    );\n  }\n\n  private renderMTLSSummary = (mTLSPercentage: number) => {\n    let mtls = 'mTLS Enabled';\n    const isMtls = mTLSPercentage > 0;\n    if (isMtls && mTLSPercentage < 100.0) {\n      mtls = `${mtls} [${mTLSPercentage}% of request traffic]`;\n    }\n    return (\n      <>\n        {isMtls && (\n          <div>\n            <KialiIcon.MtlsLock />\n            <span style={{ paddingLeft: '6px' }}>{mtls}</span>\n          </div>\n        )}\n      </>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
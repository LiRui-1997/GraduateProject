{"ast":null,"code":"/**\n * Created by jljsj on 20/12/2.\n * The algorithm from GSAP(utils/paths.js) VERSION: 3.0.x\n */\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\nexport var pointsToSegment = function pointsToSegment(points, curviness) {\n  var l = points.length - 2;\n  var x = +points[0];\n  var y = +points[1];\n  var nextX = +points[2];\n  var nextY = +points[3];\n  var segment = [x, y, x, y];\n  var dx2 = nextX - x;\n  var dy2 = nextY - y;\n  var closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001;\n  var cornerThreshold = Math.PI / 10;\n\n  if (closed) {\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n  var slope;\n\n  for (var i = 2; i < l; i += 2) {\n    var prevX = x;\n    var prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n    var dx1 = dx2;\n    var dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    var dx3 = nextX - prevX;\n    var dy3 = nextY - prevY;\n    var a = dx1 * dx1 + dy1 * dy1;\n    var b = dx2 * dx2 + dy2 * dy2;\n    var c = dx3 * dx3 + dy3 * dy3;\n    var angle = Math.acos((a + b - c) / Math.sqrt(4 * a * b));\n    var d2 = angle / Math.PI * curviness;\n    var d1 = Math.sqrt(a) * d2;\n    d2 *= Math.sqrt(b);\n\n    if (x !== prevX || y !== prevY) {\n      if (angle > cornerThreshold) {\n        slope = Math.atan2(dy3, dx3);\n        segment.push(Math.round(x - Math.cos(slope) * d1), Math.round(y - Math.sin(slope) * d1), Math.round(x), Math.round(y), Math.round(x + Math.cos(slope) * d2), Math.round(y + Math.sin(slope) * d2));\n      } else {\n        slope = Math.atan2(dy1, dx1);\n        segment.push(Math.round(x - Math.cos(slope) * d1), Math.round(y - Math.sin(slope) * d1));\n        slope = Math.atan2(dy2, dx2);\n        segment.push(Math.round(x), Math.round(y), Math.round(x + Math.cos(slope) * d2), Math.round(y + Math.sin(slope) * d2));\n      }\n    }\n  }\n\n  segment.push(Math.round(nextX), Math.round(nextY), Math.round(nextX), Math.round(nextY));\n\n  if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n};\n\nvar softPointsToCubic = function softPointsToCubic(points, curviness) {\n  points.unshift(points[0]);\n  !curviness && curviness !== 0 && (curviness = 1);\n  curviness *= 2 / 3;\n  var d = points[0];\n  var result = [d];\n  var l = points.length - 1;\n\n  for (var i = 1; i < l; i++) {\n    var a = d;\n    var b = {};\n    var c = {};\n    d = {};\n    var p1 = points[i];\n    var p2 = points[i + 1];\n\n    for (var p in a) {\n      var _ref;\n\n      var v1 = a[p];\n      var v2 = p1[p];\n      b[p] = v1 + ((_ref = v2 - v1) !== null && _ref !== void 0 ? _ref : 0) * curviness;\n      d[p] = v1 = i === l - 1 ? p2[p] : (v2 + p2[p]) / 2;\n      c[p] = v1 + (v2 - v1) * curviness;\n    }\n\n    result.push(b, c, d);\n  }\n\n  return result;\n};\n\nexport var populateSegmentFromArray = function populateSegmentFromArray(segment, values, property, mode) {\n  var l = values.length;\n  var si = mode === 2 ? 0 : mode;\n\n  for (var i = 0; i < l; i++) {\n    segment[si] = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n};\n\nvar relativize = function relativize(segment) {\n  var x = segment[0],\n      y = segment[1];\n\n  for (var i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n};\n\nexport var arrayToRawPath = function arrayToRawPath(values, vars) {\n  var _vars$curviness = vars.curviness,\n      curviness = _vars$curviness === void 0 ? 1 : _vars$curviness,\n      _vars$type = vars.type,\n      type = _vars$type === void 0 ? 'thru' : _vars$type,\n      relative = vars.relative,\n      _vars$x = vars.x,\n      x = _vars$x === void 0 ? 'x' : _vars$x,\n      _vars$y = vars.y,\n      y = _vars$y === void 0 ? 'y' : _vars$y;\n  var toCubic;\n  values = values.filter(function (c) {\n    return c;\n  });\n\n  if (type === 'soft') {\n    toCubic = true;\n    values = softPointsToCubic(values, curviness);\n  }\n\n  var segment = populateSegmentFromArray(populateSegmentFromArray([], values, x, 0), values, y, 1);\n  relative && relativize(segment);\n  var t = [type === 'cubic' || toCubic ? segment : pointsToSegment(segment, curviness)];\n  return t;\n};\nexport var rawPathToString = function rawPathToString(rawPath) {\n  if (isNumber(rawPath[0])) {\n    rawPath = [rawPath];\n  }\n\n  var result = '';\n  var l = rawPath.length;\n\n  for (var s = 0; s < l; s++) {\n    var segment = rawPath[s];\n    result += \"M\".concat(Math.round(segment[0]), \",\").concat(Math.round(segment[1]), \" C\");\n    var sl = segment.length;\n\n    for (var i = 2; i < sl; i++) {\n      result += \"\".concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i++] || segment[sl - 1]), \" \").concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i++] || segment[sl - 1]), \" \").concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i] || segment[sl - 1]), \" \\n      \");\n    }\n\n    if (segment.closed) {\n      result += 'z';\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/root/GraduateProject/node_modules/tween-one/es/plugins/path-utils.js"],"names":["isNumber","value","pointsToSegment","points","curviness","l","length","x","y","nextX","nextY","segment","dx2","dy2","closed","Math","abs","cornerThreshold","PI","push","unshift","slope","i","prevX","prevY","dx1","dy1","dx3","dy3","a","b","c","angle","acos","sqrt","d2","d1","atan2","round","cos","sin","splice","softPointsToCubic","d","result","p1","p2","p","_ref","v1","v2","populateSegmentFromArray","values","property","mode","si","parseFloat","relativize","arrayToRawPath","vars","_vars$curviness","_vars$type","type","relative","_vars$x","_vars$y","toCubic","filter","t","rawPathToString","rawPath","s","concat","sl"],"mappings":"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","sourcesContent":["/**\n * Created by jljsj on 20/12/2.\n * The algorithm from GSAP(utils/paths.js) VERSION: 3.0.x\n */\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\nexport var pointsToSegment = function pointsToSegment(points, curviness) {\n  var l = points.length - 2;\n  var x = +points[0];\n  var y = +points[1];\n  var nextX = +points[2];\n  var nextY = +points[3];\n  var segment = [x, y, x, y];\n  var dx2 = nextX - x;\n  var dy2 = nextY - y;\n  var closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001;\n  var cornerThreshold = Math.PI / 10;\n\n  if (closed) {\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n  var slope;\n\n  for (var i = 2; i < l; i += 2) {\n    var prevX = x;\n    var prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n    var dx1 = dx2;\n    var dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    var dx3 = nextX - prevX;\n    var dy3 = nextY - prevY;\n    var a = dx1 * dx1 + dy1 * dy1;\n    var b = dx2 * dx2 + dy2 * dy2;\n    var c = dx3 * dx3 + dy3 * dy3;\n    var angle = Math.acos((a + b - c) / Math.sqrt(4 * a * b));\n    var d2 = angle / Math.PI * curviness;\n    var d1 = Math.sqrt(a) * d2;\n    d2 *= Math.sqrt(b);\n\n    if (x !== prevX || y !== prevY) {\n      if (angle > cornerThreshold) {\n        slope = Math.atan2(dy3, dx3);\n        segment.push(Math.round(x - Math.cos(slope) * d1), Math.round(y - Math.sin(slope) * d1), Math.round(x), Math.round(y), Math.round(x + Math.cos(slope) * d2), Math.round(y + Math.sin(slope) * d2));\n      } else {\n        slope = Math.atan2(dy1, dx1);\n        segment.push(Math.round(x - Math.cos(slope) * d1), Math.round(y - Math.sin(slope) * d1));\n        slope = Math.atan2(dy2, dx2);\n        segment.push(Math.round(x), Math.round(y), Math.round(x + Math.cos(slope) * d2), Math.round(y + Math.sin(slope) * d2));\n      }\n    }\n  }\n\n  segment.push(Math.round(nextX), Math.round(nextY), Math.round(nextX), Math.round(nextY));\n\n  if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n};\n\nvar softPointsToCubic = function softPointsToCubic(points, curviness) {\n  points.unshift(points[0]);\n  !curviness && curviness !== 0 && (curviness = 1);\n  curviness *= 2 / 3;\n  var d = points[0];\n  var result = [d];\n  var l = points.length - 1;\n\n  for (var i = 1; i < l; i++) {\n    var a = d;\n    var b = {};\n    var c = {};\n    d = {};\n    var p1 = points[i];\n    var p2 = points[i + 1];\n\n    for (var p in a) {\n      var _ref;\n\n      var v1 = a[p];\n      var v2 = p1[p];\n      b[p] = v1 + ((_ref = v2 - v1) !== null && _ref !== void 0 ? _ref : 0) * curviness;\n      d[p] = v1 = i === l - 1 ? p2[p] : (v2 + p2[p]) / 2;\n      c[p] = v1 + (v2 - v1) * curviness;\n    }\n\n    result.push(b, c, d);\n  }\n\n  return result;\n};\n\nexport var populateSegmentFromArray = function populateSegmentFromArray(segment, values, property, mode) {\n  var l = values.length;\n  var si = mode === 2 ? 0 : mode;\n\n  for (var i = 0; i < l; i++) {\n    segment[si] = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n};\n\nvar relativize = function relativize(segment) {\n  var x = segment[0],\n      y = segment[1];\n\n  for (var i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n};\n\nexport var arrayToRawPath = function arrayToRawPath(values, vars) {\n  var _vars$curviness = vars.curviness,\n      curviness = _vars$curviness === void 0 ? 1 : _vars$curviness,\n      _vars$type = vars.type,\n      type = _vars$type === void 0 ? 'thru' : _vars$type,\n      relative = vars.relative,\n      _vars$x = vars.x,\n      x = _vars$x === void 0 ? 'x' : _vars$x,\n      _vars$y = vars.y,\n      y = _vars$y === void 0 ? 'y' : _vars$y;\n  var toCubic;\n  values = values.filter(function (c) {\n    return c;\n  });\n\n  if (type === 'soft') {\n    toCubic = true;\n    values = softPointsToCubic(values, curviness);\n  }\n\n  var segment = populateSegmentFromArray(populateSegmentFromArray([], values, x, 0), values, y, 1);\n  relative && relativize(segment);\n  var t = [type === 'cubic' || toCubic ? segment : pointsToSegment(segment, curviness)];\n  return t;\n};\nexport var rawPathToString = function rawPathToString(rawPath) {\n  if (isNumber(rawPath[0])) {\n    rawPath = [rawPath];\n  }\n\n  var result = '';\n  var l = rawPath.length;\n\n  for (var s = 0; s < l; s++) {\n    var segment = rawPath[s];\n    result += \"M\".concat(Math.round(segment[0]), \",\").concat(Math.round(segment[1]), \" C\");\n    var sl = segment.length;\n\n    for (var i = 2; i < sl; i++) {\n      result += \"\".concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i++] || segment[sl - 1]), \" \").concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i++] || segment[sl - 1]), \" \").concat(Math.round(segment[i++] || segment[sl - 2]), \",\").concat(Math.round(segment[i] || segment[sl - 1]), \" \\n      \");\n    }\n\n    if (segment.closed) {\n      result += 'z';\n    }\n  }\n\n  return result;\n};"]},"metadata":{},"sourceType":"module"}
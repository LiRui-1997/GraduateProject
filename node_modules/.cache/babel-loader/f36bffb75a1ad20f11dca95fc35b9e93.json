{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { style } from 'typestyle';\nimport { PFColors, PFColorVals } from '../../../components/Pf/PfColors';\nimport { DEGRADED, FAILURE } from '../../../types/Health';\nimport { BoxByType, CytoscapeGlobalScratchNamespace, EdgeLabelMode, GraphType, NodeType, numLabels, Protocol, TrafficRate, UNKNOWN } from '../../../types/Graph';\nimport { icons } from '../../../config';\nimport NodeImageTopology from '../../../assets/img/node-background-topology.png';\nimport NodeImageKey from '../../../assets/img/node-background-key.png';\nimport { CyNode, decoratedEdgeData, decoratedNodeData } from '../CytoscapeGraphUtils';\nimport _ from 'lodash';\nimport { getEdgeHealth } from '../../../types/ErrorRate';\nimport { PFBadges } from 'components/Pf/PfBadges';\nimport { config } from 'config/Config';\nexport var DimClass = 'mousedim';\nexport var HighlightClass = 'mousehighlight';\nexport var HoveredClass = 'mousehover';\nvar EdgeColor;\nvar EdgeColorDead;\nvar EdgeColorDegraded;\nvar EdgeColorFailure;\nvar EdgeColorTCPWithTraffic;\nvar EdgeIconMTLS = icons.istio.mtls.ascii; // lock\n\nvar EdgeTextOutlineColor;\nvar EdgeTextOutlineWidth = '1px';\nvar EdgeTextFont = 'Verdana,Arial,Helvetica,sans-serif,pficon';\nvar EdgeTextFontSize = '6px';\nvar EdgeTextFontSizeHover = '10px';\nvar EdgeWidth = 2;\nvar EdgeWidthSelected = 4;\nvar NodeBorderWidth = '1px';\nvar NodeBorderWidthSelected = '3px';\nvar NodeColorBorder;\nvar NodeColorBorderBox;\nvar NodeColorBorderDegraded;\nvar NodeColorBorderFailure;\nvar NodeColorBorderHover;\nvar NodeColorBorderSelected;\nvar NodeColorFill;\nvar NodeColorFillBoxApp;\nvar NodeColorFillBoxCluster;\nvar NodeColorFillBoxNamespace;\nvar NodeColorFillHover;\nvar NodeColorFillHoverDegraded;\nvar NodeColorFillHoverFailure;\nvar NodeHeight = '25px';\nvar NodeIconCB = icons.istio.circuitBreaker.className; // bolt\n\nvar NodeIconFaultInjection = icons.istio.faultInjection.className; // ban\n\nvar NodeIconGateway = icons.istio.gateway.className; // globe\n\nvar NodeIconMS = icons.istio.missingSidecar.className; // exclamation\n\nvar NodeIconRoot = icons.istio.root.className; // alt-arrow-circle-right\n\nvar NodeIconVS = icons.istio.virtualService.className; // code-branch\n\nvar NodeIconRequestRouting = icons.istio.requestRouting.className; // code-branch\n\nvar NodeIconRequestTimeout = icons.istio.requestTimeout.className; // clock\n\nvar NodeIconTrafficShifting = icons.istio.trafficShifting.className; // share-alt\n\nvar NodeIconWorkloadEntry = icons.istio.workloadEntry.className; // pf-icon-virtual-machine\n\nvar NodeTextColor = PFColors.Black1000;\nvar NodeTextColorBox = PFColors.White;\nvar NodeTextBackgroundColor = PFColors.White;\nvar NodeTextBackgroundColorBox = PFColors.Black700;\nvar NodeBadgeBackgroundColor = PFColors.Purple400;\nvar NodeBadgeColor = PFColors.White;\nvar NodeBadgeFontSize = '12px';\nvar NodeTextFont = EdgeTextFont;\nvar NodeTextFontSize = '8px';\nvar NodeTextFontSizeBox = '10px';\nvar NodeTextFontSizeHover = '11px';\nvar NodeTextFontSizeHoverBox = '13px';\nvar NodeWidth = NodeHeight; // Puts a little more space between icons when a badge has multiple icons\n\nvar iconMargin = function iconMargin(existingIcons) {\n  return existingIcons === '' ? style({\n    marginLeft: '1px'\n  }) : style({\n    marginRight: '2px'\n  });\n};\n\nvar iconsDefault = style({\n  alignItems: 'center',\n  backgroundColor: NodeBadgeBackgroundColor,\n  borderTopLeftRadius: '3px',\n  borderBottomLeftRadius: '3px',\n  color: NodeBadgeColor,\n  display: 'flex',\n  fontSize: NodeBadgeFontSize,\n  padding: '3px 3px'\n});\nvar contentBoxPfBadge = style({\n  backgroundColor: PFColors.Badge,\n  fontSize: NodeTextFontSizeBox,\n  marginRight: '5px',\n  minWidth: '24px',\n  // reduce typical minWidth for badge to save label space\n  paddingLeft: '0px',\n  paddingRight: '0px'\n});\nvar contentDefault = style({\n  alignItems: 'center',\n  backgroundColor: NodeTextBackgroundColor,\n  borderRadius: '3px',\n  borderWidth: '1px',\n  color: NodeTextColor,\n  display: 'flex',\n  fontSize: NodeTextFontSize,\n  padding: '3px 5px'\n});\nvar contentBox = style({\n  backgroundColor: NodeTextBackgroundColorBox,\n  color: NodeTextColorBox,\n  fontSize: NodeTextFontSizeBox\n});\nvar contentWithBadges = style({\n  borderBottomLeftRadius: 'unset',\n  borderColor: NodeBadgeBackgroundColor,\n  borderStyle: 'solid',\n  borderTopLeftRadius: 'unset',\n  borderLeft: '0'\n});\nvar hostsClass = style({\n  borderTop: \"1px solid \".concat(PFColors.Black600),\n  textAlign: 'initial',\n  fontSize: NodeTextFontSize,\n  marginTop: '0.5em',\n  paddingTop: '0.5em',\n  $nest: {\n    '& div:last-child': {\n      display: 'none'\n    },\n    '&:hover div:last-child': {\n      display: 'block'\n    },\n    '&:hover div:first-child': {\n      display: 'none'\n    }\n  }\n});\nvar labelDefault = style({\n  borderRadius: '3px',\n  boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 2px 8px 0 rgba(0, 0, 0, 0.19)',\n  display: 'inline-flex',\n  fontFamily: NodeTextFont,\n  fontSize: '0',\n  fontWeight: 'normal',\n  marginTop: '4px',\n  lineHeight: '11px',\n  textAlign: 'center'\n});\nvar labelBox = style({\n  marginTop: '13px'\n});\nexport var GraphStyles = /*#__PURE__*/function () {\n  function GraphStyles() {\n    _classCallCheck(this, GraphStyles);\n  }\n\n  _createClass(GraphStyles, null, [{\n    key: \"options\",\n    value: // Our node color choices are defined by UX here:\n    // - https://github.com/kiali/kiali/issues/2435#issuecomment-404640317\n    // - https://github.com/kiali/kiali/issues/3675#issuecomment-807403919\n    function options() {\n      return {\n        wheelSensitivity: 0.1,\n        autounselectify: false,\n        autoungrabify: true\n      };\n    }\n  }, {\n    key: \"getNodeLabel\",\n    value: function getNodeLabel(ele) {\n      var _node$hasVS, _node$hasVS$hostnames, _node$isGateway2, _node$isGateway2$ingr, _node$isGateway2$ingr2;\n\n      var getCyGlobalData = function getCyGlobalData(ele) {\n        return ele.cy().scratch(CytoscapeGlobalScratchNamespace);\n      };\n\n      var cyGlobal = getCyGlobalData(ele);\n      var node = decoratedNodeData(ele);\n      var app = node.app || '';\n      var cluster = node.cluster;\n      var namespace = node.namespace;\n      var nodeType = node.nodeType;\n      var service = node.service || '';\n      var version = node.version || '';\n      var workload = node.workload || '';\n      var isBox = node.isBox;\n      var isBoxed = node.parent;\n      var box1 = isBoxed ? ele.parent()[0] : undefined;\n      var box1Type = box1 ? box1.data().isBox : undefined;\n      var box2 = box1 && box1.parent() ? box1.parent()[0] : undefined;\n      var box2Type = box2 ? box2.data().isBox : undefined; // const box3 = box2 && box2.parent() ? box2.parent()[0] : undefined;\n      // const box3Type = box3 ? box3.data().isBox : undefined;\n\n      var isAppBoxed = box1Type === BoxByType.APP;\n      var isNamespaceBoxed = box1Type === BoxByType.NAMESPACE || box2Type === BoxByType.NAMESPACE; // const isClusterBoxed = box1Type === BoxByType.CLUSTER || box2Type === BoxByType.CLUSTER || box3Type === BoxByType.CLUSTER;\n\n      var isMultiNamespace = cyGlobal.activeNamespaces.length > 1;\n      var isOutside = node.isOutside;\n      var icons = '';\n\n      if (cyGlobal.showMissingSidecars && node.hasMissingSC) {\n        icons = \"<span class=\\\"\".concat(NodeIconMS, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n      }\n\n      if (cyGlobal.showVirtualServices) {\n        if (node.hasCB) {\n          icons = \"<span class=\\\"\".concat(NodeIconCB, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n        } // If there's an additional traffic scenario present then it's assumed\n        // that there is a VS present so the VS badge is omitted.\n\n\n        if (node.hasVS) {\n          var hasKialiScenario = node.hasFaultInjection || node.hasRequestRouting || node.hasRequestTimeout || node.hasTCPTrafficShifting || node.hasTrafficShifting;\n\n          if (!hasKialiScenario) {\n            icons = \"<span class=\\\"\".concat(NodeIconVS, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n          } else {\n            if (node.hasFaultInjection) {\n              icons = \"<span class=\\\"\".concat(NodeIconFaultInjection, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n            }\n\n            if (node.hasTrafficShifting || node.hasTCPTrafficShifting) {\n              icons = \"<span class=\\\"\".concat(NodeIconTrafficShifting, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n            }\n\n            if (node.hasRequestTimeout) {\n              icons = \"<span class=\\\"\".concat(NodeIconRequestTimeout, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n            }\n\n            if (node.hasRequestRouting) {\n              icons = \"<span class=\\\"\".concat(NodeIconRequestRouting, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n            }\n          }\n        }\n      }\n\n      if (node.hasWorkloadEntry) {\n        icons = \"<span class=\\\"\".concat(NodeIconWorkloadEntry, \" \").concat(iconMargin(icons), \"\\\"></span> \").concat(icons);\n      }\n\n      if (node.isRoot) {\n        var _node$isGateway, _node$isGateway$ingre, _node$isGateway$ingre2;\n\n        if (((_node$isGateway = node.isGateway) === null || _node$isGateway === void 0 ? void 0 : (_node$isGateway$ingre = _node$isGateway.ingressInfo) === null || _node$isGateway$ingre === void 0 ? void 0 : (_node$isGateway$ingre2 = _node$isGateway$ingre.hostnames) === null || _node$isGateway$ingre2 === void 0 ? void 0 : _node$isGateway$ingre2.length) !== undefined) {\n          icons = \"<span class='\".concat(NodeIconGateway, \" \").concat(iconMargin(icons), \"'></span> \").concat(icons);\n        }\n\n        icons = \"<span class='\".concat(NodeIconRoot, \" \").concat(iconMargin(icons), \"'></span> \").concat(icons);\n      }\n\n      var hasIcon = icons.length > 0;\n\n      if (hasIcon) {\n        icons = \"<div class=\".concat(iconsDefault, \">\").concat(icons, \"</div>\");\n      }\n\n      var labelStyle = '';\n\n      if (ele.hasClass(HighlightClass)) {\n        labelStyle += 'font-size: ' + NodeTextFontSizeHover + ';';\n      }\n\n      if (ele.hasClass(DimClass)) {\n        labelStyle += 'opacity: 0.6;';\n      }\n\n      var contentStyle = '';\n\n      if (ele.hasClass(HighlightClass)) {\n        var fontSize = isBox && isBox !== BoxByType.APP ? NodeTextFontSizeHoverBox : NodeTextFontSizeHover;\n        contentStyle += 'font-size: ' + fontSize + ';';\n      }\n\n      var content = []; // append namespace if necessary\n\n      if ((isMultiNamespace || isOutside) && !!namespace && namespace !== UNKNOWN && !isAppBoxed && !isNamespaceBoxed && isBox !== BoxByType.NAMESPACE) {\n        content.push(\"(\".concat(namespace, \")\"));\n      } // append cluster if necessary\n\n\n      if (!!cluster && cluster !== UNKNOWN && cluster !== cyGlobal.homeCluster && !isBoxed && isBox !== BoxByType.CLUSTER) {\n        content.push(\"(\".concat(cluster, \")\"));\n      }\n\n      switch (nodeType) {\n        case NodeType.AGGREGATE:\n          content.unshift(node.aggregateValue);\n          break;\n\n        case NodeType.APP:\n          if (isAppBoxed) {\n            if (cyGlobal.graphType === GraphType.APP) {\n              content.unshift(app);\n            } else if (version && version !== UNKNOWN) {\n              content.unshift(version);\n            } else {\n              content.unshift(workload ? workload : app);\n            }\n          } else {\n            if (cyGlobal.graphType === GraphType.APP || version === UNKNOWN) {\n              content.unshift(app);\n            } else {\n              content.unshift(version);\n              content.unshift(app);\n            }\n          }\n\n          break;\n\n        case NodeType.BOX:\n          switch (isBox) {\n            case BoxByType.APP:\n              content.unshift(app);\n              break;\n\n            case BoxByType.CLUSTER:\n              content.unshift(node.cluster);\n              break;\n\n            case BoxByType.NAMESPACE:\n              content.unshift(node.namespace);\n              break;\n          }\n\n          break;\n\n        case NodeType.SERVICE:\n          content.unshift(service);\n          break;\n\n        case NodeType.UNKNOWN:\n          content.unshift(UNKNOWN);\n          break;\n\n        case NodeType.WORKLOAD:\n          content.unshift(workload);\n          break;\n\n        default:\n          content.unshift('error');\n      }\n\n      var contentText = content.join('<br/>');\n      var contentClasses = hasIcon ? \"\".concat(contentDefault, \" \").concat(contentWithBadges) : \"\".concat(contentDefault);\n      var appBoxStyle = '';\n\n      if (isBox) {\n        var badge = '';\n\n        switch (isBox) {\n          case BoxByType.APP:\n            badge = PFBadges.App.badge;\n            appBoxStyle += \"font-size: \".concat(NodeTextFontSize, \";\");\n            break;\n\n          case BoxByType.CLUSTER:\n            badge = PFBadges.Cluster.badge;\n            break;\n\n          case BoxByType.NAMESPACE:\n            badge = PFBadges.Namespace.badge;\n            break;\n\n          default:\n            console.warn(\"GraphSyles: Unexpected box [\".concat(isBox, \"] \"));\n        }\n\n        var contentBadge = \"<span class=\\\"pf-c-badge pf-m-unread \".concat(contentBoxPfBadge, \"\\\" style=\\\"\").concat(appBoxStyle, \"\\\">\").concat(badge, \"</span>\");\n\n        var _contentSpan = \"<span class=\\\"\".concat(contentClasses, \" \").concat(contentBox, \"\\\" style=\\\" \").concat(appBoxStyle).concat(contentStyle, \"\\\">\").concat(contentBadge).concat(contentText, \"</span>\");\n\n        return \"<div class=\\\"\".concat(labelDefault, \" \").concat(labelBox, \"\\\" style=\\\"\").concat(labelStyle, \"\\\">\").concat(icons).concat(_contentSpan, \"</div>\");\n      }\n\n      var hosts = [];\n      (_node$hasVS = node.hasVS) === null || _node$hasVS === void 0 ? void 0 : (_node$hasVS$hostnames = _node$hasVS.hostnames) === null || _node$hasVS$hostnames === void 0 ? void 0 : _node$hasVS$hostnames.forEach(function (h) {\n        return hosts.push(h === '*' ? '* (all hosts)' : h);\n      });\n      (_node$isGateway2 = node.isGateway) === null || _node$isGateway2 === void 0 ? void 0 : (_node$isGateway2$ingr = _node$isGateway2.ingressInfo) === null || _node$isGateway2$ingr === void 0 ? void 0 : (_node$isGateway2$ingr2 = _node$isGateway2$ingr.hostnames) === null || _node$isGateway2$ingr2 === void 0 ? void 0 : _node$isGateway2$ingr2.forEach(function (h) {\n        return hosts.push(h === '*' ? '* (all hosts)' : h);\n      });\n      var htmlHosts = '';\n\n      if (hosts.length !== 0) {\n        var hostsToShow = hosts;\n\n        if (hostsToShow.length > config.graph.maxHosts) {\n          hostsToShow = hosts.slice(0, config.graph.maxHosts);\n          hostsToShow.push(hosts.length - config.graph.maxHosts === 1 ? '1 more host...' : \"\".concat(hosts.length - config.graph.maxHosts, \" more hosts...\"));\n        }\n\n        htmlHosts = \"<div class='\".concat(hostsClass, \"'><div>\").concat(hosts.length, \" \").concat(hosts.length === 1 ? 'host' : 'hosts', \"</div><div>\").concat(hostsToShow.join('<br/>'), \"</div></div>\");\n      }\n\n      var contentSpan = \"<div class=\\\"\".concat(contentClasses, \"\\\" style=\\\"display: block; \").concat(contentStyle, \"\\\"><div>\").concat(contentText, \"</div><div></div>\").concat(htmlHosts, \"</div></div>\");\n      return \"<div class=\\\"\".concat(labelDefault, \"\\\" style=\\\"\").concat(labelStyle, \"\\\">\").concat(icons).concat(contentSpan, \"</div>\");\n    }\n  }, {\n    key: \"htmlNodeLabels\",\n    value: function htmlNodeLabels(cy) {\n      var _this = this;\n\n      return [{\n        query: 'node:visible',\n        halign: 'center',\n        valign: 'bottom',\n        halignBox: 'center',\n        valignBox: 'bottom',\n        tpl: function tpl(data) {\n          return _this.getNodeLabel(cy.$id(data.id));\n        }\n      }];\n    }\n  }, {\n    key: \"styles\",\n    value: function styles() {\n      GraphStyles.setRuntimeColors();\n\n      var getCyGlobalData = function getCyGlobalData(ele) {\n        return ele.cy().scratch(CytoscapeGlobalScratchNamespace);\n      };\n\n      var getEdgeColor = function getEdgeColor(ele) {\n        var edgeData = decoratedEdgeData(ele);\n        var cyGlobal = getCyGlobalData(ele);\n\n        if (!edgeData.hasTraffic) {\n          return EdgeColorDead;\n        }\n\n        if (edgeData.protocol === 'tcp') {\n          return EdgeColorTCPWithTraffic;\n        }\n\n        if (edgeData.protocol === 'grpc' && !cyGlobal.trafficRates.includes(TrafficRate.GRPC_REQUEST)) {\n          return EdgeColor;\n        }\n\n        var sourceNodeData = decoratedNodeData(ele.source());\n        var destNodeData = decoratedNodeData(ele.target());\n        var statusEdge = getEdgeHealth(edgeData, sourceNodeData, destNodeData);\n\n        switch (statusEdge.status) {\n          case FAILURE:\n            return EdgeColorFailure;\n\n          case DEGRADED:\n            return EdgeColorDegraded;\n\n          default:\n            return EdgeColor;\n        }\n      };\n\n      var getEdgeLabel = function getEdgeLabel(ele, isVerbose) {\n        var cyGlobal = getCyGlobalData(ele);\n        var edgeLabels = cyGlobal.edgeLabels;\n        var edgeData = decoratedEdgeData(ele);\n        var includeUnits = isVerbose || numLabels(edgeLabels) > 1;\n        var labels = [];\n\n        if (edgeLabels.includes(EdgeLabelMode.TRAFFIC_RATE)) {\n          var rate = 0;\n          var pErr = 0;\n\n          if (edgeData.http > 0) {\n            rate = edgeData.http;\n            pErr = edgeData.httpPercentErr > 0 ? edgeData.httpPercentErr : 0;\n          } else if (edgeData.grpc > 0) {\n            rate = edgeData.grpc;\n            pErr = edgeData.grpcPercentErr > 0 ? edgeData.grpcPercentErr : 0;\n          } else if (edgeData.tcp > 0) {\n            rate = edgeData.tcp;\n          }\n\n          if (rate > 0) {\n            if (pErr > 0) {\n              labels.push(\"\".concat(toFixedRequestRate(rate, includeUnits), \"\\n\").concat(toFixedErrRate(pErr)));\n            } else {\n              switch (edgeData.protocol) {\n                case Protocol.GRPC:\n                  if (cyGlobal.trafficRates.includes(TrafficRate.GRPC_REQUEST)) {\n                    labels.push(toFixedRequestRate(rate, includeUnits));\n                  } else {\n                    labels.push(toFixedRequestRate(rate, includeUnits, 'mps'));\n                  }\n\n                  break;\n\n                case Protocol.TCP:\n                  labels.push(toFixedByteRate(rate, includeUnits));\n                  break;\n\n                default:\n                  labels.push(toFixedRequestRate(rate, includeUnits));\n                  break;\n              }\n            }\n          }\n        }\n\n        if (edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP)) {\n          // todo: remove this logging once we figure out the strangeness going on with responseTime\n          var logResponseTime = edgeData.responseTime;\n\n          if (!isNaN(logResponseTime) && !Number.isInteger(logResponseTime)) {\n            console.log(\"Unexpected string responseTime=|\".concat(logResponseTime, \"|\"));\n          } // hack to fix responseTime is sometimes a string during runtime even though its type is number\n\n\n          var responseTimeNumber = parseInt(String(edgeData.responseTime));\n          var responseTime = responseTimeNumber > 0 ? responseTimeNumber : 0;\n\n          if (responseTime && responseTime > 0) {\n            labels.push(toFixedDuration(responseTime));\n          }\n        }\n\n        if (edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP)) {\n          var _rate = edgeData.throughput;\n\n          if (_rate > 0) {\n            labels.push(toFixedByteRate(_rate, includeUnits));\n          }\n        }\n\n        if (edgeLabels.includes(EdgeLabelMode.TRAFFIC_DISTRIBUTION)) {\n          var pReq;\n\n          if (edgeData.httpPercentReq > 0) {\n            pReq = edgeData.httpPercentReq;\n          } else if (edgeData.grpcPercentReq > 0) {\n            pReq = edgeData.grpcPercentReq;\n          }\n\n          if (pReq > 0 && pReq < 100) {\n            labels.push(toFixedPercent(pReq));\n          }\n        }\n\n        var label = labels.join('\\n');\n\n        if (isVerbose) {\n          var protocol = edgeData.protocol;\n          label = protocol ? \"\".concat(protocol, \"\\n\").concat(label) : label;\n        }\n\n        var mtlsPercentage = edgeData.isMTLS;\n        var lockIcon = false;\n\n        if (cyGlobal.showSecurity && edgeData.hasTraffic) {\n          if (mtlsPercentage && mtlsPercentage > 0) {\n            lockIcon = true;\n            label = \"\".concat(EdgeIconMTLS, \"\\n\").concat(label);\n          }\n        }\n\n        if (edgeData.hasTraffic && edgeData.responses) {\n          var dest = decoratedNodeData(ele.target());\n\n          if (dest.hasCB) {\n            var responses = edgeData.responses;\n\n            var _iterator = _createForOfIteratorHelper(_.keys(responses)),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var code = _step.value;\n\n                // TODO: Not 100% sure we want \"UH\" code here (\"no healthy upstream hosts\") but based on timing I have\n                // seen this code returned and not \"UO\". \"UO\" is returned only when the circuit breaker is caught open.\n                // But if open CB is responsible for removing possible destinations the \"UH\" code seems preferred.\n                if (responses[code]['UO'] || responses[code]['UH']) {\n                  label = lockIcon ? \"\".concat(NodeIconCB, \" \").concat(label) : \"\".concat(NodeIconCB, \"\\n\").concat(label);\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        }\n\n        return label;\n      };\n\n      var trimFixed = function trimFixed(fixed) {\n        if (!fixed.includes('.')) {\n          return fixed;\n        }\n\n        while (fixed.endsWith('0')) {\n          fixed = fixed.slice(0, -1);\n        }\n\n        return fixed.endsWith('.') ? fixed = fixed.slice(0, -1) : fixed;\n      };\n\n      var toFixedRequestRate = function toFixedRequestRate(num, includeUnits, units) {\n        var rate = trimFixed(num.toFixed(2));\n        return includeUnits ? \"\".concat(rate, \" \").concat(units || 'rps') : rate;\n      };\n\n      var toFixedErrRate = function toFixedErrRate(num) {\n        return \"\".concat(trimFixed(num.toFixed(num < 1 ? 1 : 0)), \"% err\");\n      };\n\n      var toFixedByteRate = function toFixedByteRate(num, includeUnits) {\n        if (num < 1024.0) {\n          var _rate2 = num < 1.0 ? trimFixed(num.toFixed(2)) : num.toFixed(0);\n\n          return includeUnits ? \"\".concat(_rate2, \" bps\") : _rate2;\n        }\n\n        var rate = trimFixed((num / 1024.0).toFixed(2));\n        return includeUnits ? \"\".concat(rate, \" kps\") : rate;\n      };\n\n      var toFixedPercent = function toFixedPercent(num) {\n        return \"\".concat(trimFixed(num.toFixed(1)), \"%\");\n      };\n\n      var toFixedDuration = function toFixedDuration(num) {\n        if (num < 1000) {\n          return \"\".concat(num.toFixed(0), \"ms\");\n        }\n\n        return \"\".concat(trimFixed((num / 1000.0).toFixed(2)), \"s\");\n      };\n\n      var getNodeBackgroundImage = function getNodeBackgroundImage(ele) {\n        var nodeData = decoratedNodeData(ele);\n        var isInaccessible = nodeData.isInaccessible;\n        var isServiceEntry = nodeData.isServiceEntry;\n        var isBox = nodeData.isBox;\n\n        if (isInaccessible && !isServiceEntry && !isBox) {\n          return NodeImageKey;\n        }\n\n        var isOutside = nodeData.isOutside;\n\n        if (isOutside && !isBox) {\n          return NodeImageTopology;\n        }\n\n        return 'none';\n      };\n\n      var getNodeBackgroundPositionX = function getNodeBackgroundPositionX(ele) {\n        if (getNodeShape(ele) === 'round-tag') {\n          return '0';\n        }\n\n        return '50%';\n      };\n\n      var getNodeBackgroundPositionY = function getNodeBackgroundPositionY(ele) {\n        if (getNodeShape(ele) === 'round-triangle') {\n          return '6px';\n        }\n\n        return '50%';\n      };\n\n      var getNodeBorderColor = function getNodeBorderColor(ele) {\n        var isBox = ele.data(CyNode.isBox);\n\n        if (isBox && isBox !== BoxByType.APP) {\n          return NodeColorBorderBox;\n        }\n\n        var healthStatus = ele.data(CyNode.healthStatus);\n\n        switch (healthStatus) {\n          case DEGRADED.name:\n            return NodeColorBorderDegraded;\n\n          case FAILURE.name:\n            return NodeColorBorderFailure;\n\n          default:\n            return NodeColorBorder;\n        }\n      };\n\n      var getNodeShape = function getNodeShape(ele) {\n        var nodeData = decoratedNodeData(ele);\n        var nodeType = nodeData.nodeType;\n\n        switch (nodeType) {\n          case NodeType.AGGREGATE:\n            return 'round-pentagon';\n\n          case NodeType.APP:\n            return 'round-rectangle';\n\n          case NodeType.BOX:\n            return 'round-rectangle';\n\n          case NodeType.SERVICE:\n            return nodeData.isServiceEntry ? 'round-tag' : 'round-triangle';\n\n          case NodeType.UNKNOWN:\n            return 'ellipse';\n\n          case NodeType.WORKLOAD:\n            return 'ellipse';\n\n          default:\n            return 'ellipse';\n        }\n      };\n\n      var nodeSelectedStyle = {\n        'border-color': function borderColor(ele) {\n          switch (ele.data(CyNode.healthStatus)) {\n            case DEGRADED.name:\n              return NodeColorBorderDegraded;\n\n            case FAILURE.name:\n              return NodeColorBorderFailure;\n\n            default:\n              return NodeColorBorderSelected;\n          }\n        },\n        'border-width': NodeBorderWidthSelected\n      };\n      return [// Node Defaults\n      {\n        selector: 'node',\n        css: {\n          'background-color': NodeColorFill,\n          'background-image': function backgroundImage(ele) {\n            return getNodeBackgroundImage(ele);\n          },\n          'background-width': '80%',\n          'background-height': '80%',\n          'background-position-x': getNodeBackgroundPositionX,\n          'background-position-y': getNodeBackgroundPositionY,\n          'border-color': function borderColor(ele) {\n            return getNodeBorderColor(ele);\n          },\n          'border-style': function borderStyle(ele) {\n            return decoratedNodeData(ele).isIdle ? 'dotted' : 'solid';\n          },\n          'border-width': NodeBorderWidth,\n          ghost: 'yes',\n          'ghost-offset-x': 1,\n          'ghost-offset-y': 1,\n          'ghost-opacity': 0.4,\n          height: NodeHeight,\n          shape: function shape(ele) {\n            return getNodeShape(ele);\n          },\n          width: NodeWidth,\n          'z-index': 10\n        }\n      }, // Node is a Cluster Box\n      {\n        selector: \"node[isBox=\\\"\".concat(BoxByType.CLUSTER, \"\\\"]\"),\n        css: {\n          'background-color': NodeColorFillBoxCluster\n        }\n      }, // Node is a Namespace Box\n      {\n        selector: \"node[isBox=\\\"\".concat(BoxByType.NAMESPACE, \"\\\"]\"),\n        css: {\n          'background-color': NodeColorFillBoxNamespace\n        }\n      }, // Node is an App Box\n      {\n        selector: \"node[isBox=\\\"\".concat(BoxByType.APP, \"\\\"]\"),\n        css: {\n          'background-color': NodeColorFillBoxApp\n        }\n      }, // Node is selected\n      {\n        selector: 'node:selected',\n        style: nodeSelectedStyle\n      }, // Node is highlighted (see GraphHighlighter.ts)\n      {\n        selector: \"node.\".concat(HighlightClass),\n        style: {\n          'font-size': NodeTextFontSizeHover\n        }\n      }, // Node other than Box is highlighted (see GraphHighlighter.ts)\n      {\n        selector: \"node.\".concat(HighlightClass, \"[^isBox]\"),\n        style: {\n          'background-color': function backgroundColor(ele) {\n            switch (ele.data(CyNode.healthStatus)) {\n              case DEGRADED.name:\n                return NodeColorFillHoverDegraded;\n\n              case FAILURE.name:\n                return NodeColorFillHoverFailure;\n\n              default:\n                return NodeColorFillHover;\n            }\n          },\n          'border-color': function borderColor(ele) {\n            switch (ele.data(CyNode.healthStatus)) {\n              case DEGRADED.name:\n                return NodeColorBorderDegraded;\n\n              case FAILURE.name:\n                return NodeColorBorderFailure;\n\n              default:\n                return NodeColorBorderHover;\n            }\n          }\n        }\n      }, // Node is dimmed (see GraphHighlighter.ts)\n      {\n        selector: \"node.\".concat(DimClass),\n        style: {\n          opacity: 0.6\n        }\n      }, {\n        selector: 'edge',\n        css: {\n          'curve-style': 'bezier',\n          'font-family': EdgeTextFont,\n          'font-size': EdgeTextFontSize,\n          label: function label(ele) {\n            return getEdgeLabel(ele);\n          },\n          'line-color': function lineColor(ele) {\n            return getEdgeColor(ele);\n          },\n          'line-style': 'solid',\n          'target-arrow-shape': 'vee',\n          'target-arrow-color': function targetArrowColor(ele) {\n            return getEdgeColor(ele);\n          },\n          'text-events': 'yes',\n          'text-outline-color': EdgeTextOutlineColor,\n          'text-outline-width': EdgeTextOutlineWidth,\n          'text-wrap': 'wrap',\n          width: EdgeWidth\n        }\n      }, {\n        selector: 'edge:selected',\n        css: {\n          width: EdgeWidthSelected,\n          label: function label(ele) {\n            return getEdgeLabel(ele, true);\n          }\n        }\n      }, {\n        selector: 'edge[protocol=\"tcp\"]',\n        css: {\n          'target-arrow-shape': 'triangle-cross',\n          'line-style': 'solid'\n        }\n      }, {\n        selector: \"edge.\".concat(HighlightClass),\n        style: {\n          'font-size': EdgeTextFontSizeHover\n        }\n      }, {\n        selector: \"edge.\".concat(HoveredClass),\n        style: {\n          label: function label(ele) {\n            return getEdgeLabel(ele, true);\n          }\n        }\n      }, {\n        selector: \"edge.\".concat(DimClass),\n        style: {\n          opacity: 0.3\n        }\n      }, {\n        selector: '*.find[^isBox]',\n        style: {\n          'overlay-color': PFColorVals.Gold400,\n          'overlay-padding': '7px',\n          'overlay-opacity': 0.3\n        }\n      }, {\n        selector: '*.span[^isBox]',\n        style: {\n          'overlay-color': PFColorVals.Purple200,\n          'overlay-padding': '7px',\n          'overlay-opacity': 0.3\n        }\n      }];\n    }\n  }]);\n\n  return GraphStyles;\n}();\nGraphStyles.runtimeColorsSet = void 0;\n\nGraphStyles.setRuntimeColors = function () {\n  if (GraphStyles.runtimeColorsSet) {\n    return;\n  }\n\n  GraphStyles.runtimeColorsSet = true;\n  EdgeColor = PFColorVals.Success;\n  EdgeColorDead = PFColorVals.Black500;\n  EdgeColorDegraded = PFColorVals.Warning;\n  EdgeColorFailure = PFColorVals.Danger;\n  EdgeColorTCPWithTraffic = PFColorVals.Blue600;\n  EdgeTextOutlineColor = PFColorVals.White;\n  NodeColorBorder = PFColorVals.Black400;\n  NodeColorBorderBox = PFColorVals.Black600;\n  NodeColorBorderDegraded = PFColorVals.Warning;\n  NodeColorBorderFailure = PFColorVals.Danger;\n  NodeColorBorderHover = PFColorVals.Blue300;\n  NodeColorBorderSelected = PFColorVals.Blue300;\n  NodeColorFill = PFColorVals.White;\n  NodeColorFillBoxApp = PFColorVals.White;\n  NodeColorFillBoxCluster = PFColorVals.Black200;\n  NodeColorFillBoxNamespace = PFColorVals.Black100;\n  NodeColorFillHover = PFColorVals.Blue50;\n  NodeColorFillHoverDegraded = '#fdf2e5'; // roughly an Orange50 if it were defined\n\n  NodeColorFillHoverFailure = '#ffe6e6'; // very close to Red50 if we want to change\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/graphs/GraphStyles.ts"],"names":["style","PFColors","PFColorVals","DEGRADED","FAILURE","BoxByType","CytoscapeGlobalScratchNamespace","EdgeLabelMode","GraphType","NodeType","numLabels","Protocol","TrafficRate","UNKNOWN","icons","NodeImageTopology","NodeImageKey","CyNode","decoratedEdgeData","decoratedNodeData","_","getEdgeHealth","PFBadges","config","DimClass","HighlightClass","HoveredClass","EdgeColor","EdgeColorDead","EdgeColorDegraded","EdgeColorFailure","EdgeColorTCPWithTraffic","EdgeIconMTLS","istio","mtls","ascii","EdgeTextOutlineColor","EdgeTextOutlineWidth","EdgeTextFont","EdgeTextFontSize","EdgeTextFontSizeHover","EdgeWidth","EdgeWidthSelected","NodeBorderWidth","NodeBorderWidthSelected","NodeColorBorder","NodeColorBorderBox","NodeColorBorderDegraded","NodeColorBorderFailure","NodeColorBorderHover","NodeColorBorderSelected","NodeColorFill","NodeColorFillBoxApp","NodeColorFillBoxCluster","NodeColorFillBoxNamespace","NodeColorFillHover","NodeColorFillHoverDegraded","NodeColorFillHoverFailure","NodeHeight","NodeIconCB","circuitBreaker","className","NodeIconFaultInjection","faultInjection","NodeIconGateway","gateway","NodeIconMS","missingSidecar","NodeIconRoot","root","NodeIconVS","virtualService","NodeIconRequestRouting","requestRouting","NodeIconRequestTimeout","requestTimeout","NodeIconTrafficShifting","trafficShifting","NodeIconWorkloadEntry","workloadEntry","NodeTextColor","Black1000","NodeTextColorBox","White","NodeTextBackgroundColor","NodeTextBackgroundColorBox","Black700","NodeBadgeBackgroundColor","Purple400","NodeBadgeColor","NodeBadgeFontSize","NodeTextFont","NodeTextFontSize","NodeTextFontSizeBox","NodeTextFontSizeHover","NodeTextFontSizeHoverBox","NodeWidth","iconMargin","existingIcons","marginLeft","marginRight","iconsDefault","alignItems","backgroundColor","borderTopLeftRadius","borderBottomLeftRadius","color","display","fontSize","padding","contentBoxPfBadge","Badge","minWidth","paddingLeft","paddingRight","contentDefault","borderRadius","borderWidth","contentBox","contentWithBadges","borderColor","borderStyle","borderLeft","hostsClass","borderTop","Black600","textAlign","marginTop","paddingTop","$nest","labelDefault","boxShadow","fontFamily","fontWeight","lineHeight","labelBox","GraphStyles","wheelSensitivity","autounselectify","autoungrabify","ele","getCyGlobalData","cy","scratch","cyGlobal","node","app","cluster","namespace","nodeType","service","version","workload","isBox","isBoxed","parent","box1","undefined","box1Type","data","box2","box2Type","isAppBoxed","APP","isNamespaceBoxed","NAMESPACE","isMultiNamespace","activeNamespaces","length","isOutside","showMissingSidecars","hasMissingSC","showVirtualServices","hasCB","hasVS","hasKialiScenario","hasFaultInjection","hasRequestRouting","hasRequestTimeout","hasTCPTrafficShifting","hasTrafficShifting","hasWorkloadEntry","isRoot","isGateway","ingressInfo","hostnames","hasIcon","labelStyle","hasClass","contentStyle","content","push","homeCluster","CLUSTER","AGGREGATE","unshift","aggregateValue","graphType","BOX","SERVICE","WORKLOAD","contentText","join","contentClasses","appBoxStyle","badge","App","Cluster","Namespace","console","warn","contentBadge","contentSpan","hosts","forEach","h","htmlHosts","hostsToShow","graph","maxHosts","slice","query","halign","valign","halignBox","valignBox","tpl","getNodeLabel","$id","id","setRuntimeColors","getEdgeColor","edgeData","hasTraffic","protocol","trafficRates","includes","GRPC_REQUEST","sourceNodeData","source","destNodeData","target","statusEdge","status","getEdgeLabel","isVerbose","edgeLabels","includeUnits","labels","TRAFFIC_RATE","rate","pErr","http","httpPercentErr","grpc","grpcPercentErr","tcp","toFixedRequestRate","toFixedErrRate","GRPC","TCP","toFixedByteRate","RESPONSE_TIME_GROUP","logResponseTime","responseTime","isNaN","Number","isInteger","log","responseTimeNumber","parseInt","String","toFixedDuration","THROUGHPUT_GROUP","throughput","TRAFFIC_DISTRIBUTION","pReq","httpPercentReq","grpcPercentReq","toFixedPercent","label","mtlsPercentage","isMTLS","lockIcon","showSecurity","responses","dest","keys","code","trimFixed","fixed","endsWith","num","units","toFixed","getNodeBackgroundImage","nodeData","isInaccessible","isServiceEntry","getNodeBackgroundPositionX","getNodeShape","getNodeBackgroundPositionY","getNodeBorderColor","healthStatus","name","nodeSelectedStyle","selector","css","isIdle","ghost","height","shape","width","opacity","Gold400","Purple200","runtimeColorsSet","Success","Black500","Warning","Danger","Blue600","Black400","Blue300","Black200","Black100","Blue50"],"mappings":"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","sourcesContent":["import { style } from 'typestyle';\nimport { PFColors, PFColorVal, PFColorVals } from '../../../components/Pf/PfColors';\nimport { DEGRADED, FAILURE } from '../../../types/Health';\nimport {\n  BoxByType,\n  CytoscapeGlobalScratchData,\n  CytoscapeGlobalScratchNamespace,\n  EdgeLabelMode,\n  GraphType,\n  NodeType,\n  numLabels,\n  Protocol,\n  TrafficRate,\n  UNKNOWN\n} from '../../../types/Graph';\nimport { icons } from '../../../config';\nimport NodeImageTopology from '../../../assets/img/node-background-topology.png';\nimport NodeImageKey from '../../../assets/img/node-background-key.png';\nimport { CyNode, decoratedEdgeData, decoratedNodeData } from '../CytoscapeGraphUtils';\nimport _ from 'lodash';\nimport * as Cy from 'cytoscape';\nimport { getEdgeHealth } from '../../../types/ErrorRate';\nimport { PFBadges } from 'components/Pf/PfBadges';\nimport { config } from 'config/Config';\n\nexport const DimClass = 'mousedim';\nexport const HighlightClass = 'mousehighlight';\nexport const HoveredClass = 'mousehover';\n\nlet EdgeColor: PFColorVal;\nlet EdgeColorDead: PFColorVal;\nlet EdgeColorDegraded: PFColorVal;\nlet EdgeColorFailure: PFColorVal;\nlet EdgeColorTCPWithTraffic: PFColorVal;\nconst EdgeIconMTLS = icons.istio.mtls.ascii; // lock\nlet EdgeTextOutlineColor: PFColorVal;\nconst EdgeTextOutlineWidth = '1px';\nconst EdgeTextFont = 'Verdana,Arial,Helvetica,sans-serif,pficon';\nconst EdgeTextFontSize = '6px';\nconst EdgeTextFontSizeHover = '10px';\nconst EdgeWidth = 2;\nconst EdgeWidthSelected = 4;\nconst NodeBorderWidth = '1px';\nconst NodeBorderWidthSelected = '3px';\nlet NodeColorBorder: PFColorVal;\nlet NodeColorBorderBox: PFColorVal;\nlet NodeColorBorderDegraded: PFColorVal;\nlet NodeColorBorderFailure: PFColorVal;\nlet NodeColorBorderHover: PFColorVal;\nlet NodeColorBorderSelected: PFColorVal;\nlet NodeColorFill: PFColorVal;\nlet NodeColorFillBoxApp: PFColorVal;\nlet NodeColorFillBoxCluster: PFColorVal;\nlet NodeColorFillBoxNamespace: PFColorVal;\nlet NodeColorFillHover: PFColorVal;\nlet NodeColorFillHoverDegraded: PFColorVal;\nlet NodeColorFillHoverFailure: PFColorVal;\nconst NodeHeight = '25px';\nconst NodeIconCB = icons.istio.circuitBreaker.className; // bolt\nconst NodeIconFaultInjection = icons.istio.faultInjection.className; // ban\nconst NodeIconGateway = icons.istio.gateway.className; // globe\nconst NodeIconMS = icons.istio.missingSidecar.className; // exclamation\nconst NodeIconRoot = icons.istio.root.className; // alt-arrow-circle-right\nconst NodeIconVS = icons.istio.virtualService.className; // code-branch\nconst NodeIconRequestRouting = icons.istio.requestRouting.className; // code-branch\nconst NodeIconRequestTimeout = icons.istio.requestTimeout.className; // clock\nconst NodeIconTrafficShifting = icons.istio.trafficShifting.className; // share-alt\nconst NodeIconWorkloadEntry = icons.istio.workloadEntry.className; // pf-icon-virtual-machine\nconst NodeTextColor = PFColors.Black1000;\nconst NodeTextColorBox = PFColors.White;\nconst NodeTextBackgroundColor = PFColors.White;\nconst NodeTextBackgroundColorBox = PFColors.Black700;\nconst NodeBadgeBackgroundColor = PFColors.Purple400;\nconst NodeBadgeColor = PFColors.White;\nconst NodeBadgeFontSize = '12px';\nconst NodeTextFont = EdgeTextFont;\nconst NodeTextFontSize = '8px';\nconst NodeTextFontSizeBox = '10px';\nconst NodeTextFontSizeHover = '11px';\nconst NodeTextFontSizeHoverBox = '13px';\nconst NodeWidth = NodeHeight;\n\n// Puts a little more space between icons when a badge has multiple icons\nconst iconMargin = (existingIcons: string) =>\n  existingIcons === '' ? style({ marginLeft: '1px' }) : style({ marginRight: '2px' });\n\nconst iconsDefault = style({\n  alignItems: 'center',\n  backgroundColor: NodeBadgeBackgroundColor,\n  borderTopLeftRadius: '3px',\n  borderBottomLeftRadius: '3px',\n  color: NodeBadgeColor,\n  display: 'flex',\n  fontSize: NodeBadgeFontSize,\n  padding: '3px 3px'\n});\n\nconst contentBoxPfBadge = style({\n  backgroundColor: PFColors.Badge,\n  fontSize: NodeTextFontSizeBox,\n  marginRight: '5px',\n  minWidth: '24px', // reduce typical minWidth for badge to save label space\n  paddingLeft: '0px',\n  paddingRight: '0px'\n});\n\nconst contentDefault = style({\n  alignItems: 'center',\n  backgroundColor: NodeTextBackgroundColor,\n  borderRadius: '3px',\n  borderWidth: '1px',\n  color: NodeTextColor,\n  display: 'flex',\n  fontSize: NodeTextFontSize,\n  padding: '3px 5px'\n});\n\nconst contentBox = style({\n  backgroundColor: NodeTextBackgroundColorBox,\n  color: NodeTextColorBox,\n  fontSize: NodeTextFontSizeBox\n});\n\nconst contentWithBadges = style({\n  borderBottomLeftRadius: 'unset',\n  borderColor: NodeBadgeBackgroundColor,\n  borderStyle: 'solid',\n  borderTopLeftRadius: 'unset',\n  borderLeft: '0'\n});\n\nconst hostsClass = style({\n  borderTop: `1px solid ${PFColors.Black600}`,\n  textAlign: 'initial',\n  fontSize: NodeTextFontSize,\n  marginTop: '0.5em',\n  paddingTop: '0.5em',\n  $nest: {\n    '& div:last-child': {\n      display: 'none'\n    },\n    '&:hover div:last-child': {\n      display: 'block'\n    },\n    '&:hover div:first-child': {\n      display: 'none'\n    }\n  }\n});\n\nconst labelDefault = style({\n  borderRadius: '3px',\n  boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 2px 8px 0 rgba(0, 0, 0, 0.19)',\n  display: 'inline-flex',\n  fontFamily: NodeTextFont,\n  fontSize: '0',\n  fontWeight: 'normal',\n  marginTop: '4px',\n  lineHeight: '11px',\n  textAlign: 'center'\n});\n\nconst labelBox = style({\n  marginTop: '13px'\n});\n\nexport class GraphStyles {\n  static runtimeColorsSet: boolean;\n\n  // Our node color choices are defined by UX here:\n  // - https://github.com/kiali/kiali/issues/2435#issuecomment-404640317\n  // - https://github.com/kiali/kiali/issues/3675#issuecomment-807403919\n  static setRuntimeColors = () => {\n    if (GraphStyles.runtimeColorsSet) {\n      return;\n    }\n    GraphStyles.runtimeColorsSet = true;\n\n    EdgeColor = PFColorVals.Success;\n    EdgeColorDead = PFColorVals.Black500;\n    EdgeColorDegraded = PFColorVals.Warning;\n    EdgeColorFailure = PFColorVals.Danger;\n    EdgeColorTCPWithTraffic = PFColorVals.Blue600;\n    EdgeTextOutlineColor = PFColorVals.White;\n    NodeColorBorder = PFColorVals.Black400;\n    NodeColorBorderBox = PFColorVals.Black600;\n    NodeColorBorderDegraded = PFColorVals.Warning;\n    NodeColorBorderFailure = PFColorVals.Danger;\n    NodeColorBorderHover = PFColorVals.Blue300;\n    NodeColorBorderSelected = PFColorVals.Blue300;\n    NodeColorFill = PFColorVals.White;\n    NodeColorFillBoxApp = PFColorVals.White;\n    NodeColorFillBoxCluster = PFColorVals.Black200;\n    NodeColorFillBoxNamespace = PFColorVals.Black100;\n    NodeColorFillHover = PFColorVals.Blue50;\n    NodeColorFillHoverDegraded = '#fdf2e5'; // roughly an Orange50 if it were defined\n    NodeColorFillHoverFailure = '#ffe6e6'; // very close to Red50 if we want to change\n  };\n\n  static options() {\n    return { wheelSensitivity: 0.1, autounselectify: false, autoungrabify: true };\n  }\n\n  static getNodeLabel(ele: Cy.NodeSingular) {\n    const getCyGlobalData = (ele: Cy.NodeSingular): CytoscapeGlobalScratchData => {\n      return ele.cy().scratch(CytoscapeGlobalScratchNamespace);\n    };\n\n    const cyGlobal = getCyGlobalData(ele);\n    const node = decoratedNodeData(ele);\n    const app = node.app || '';\n    const cluster = node.cluster;\n    const namespace = node.namespace;\n    const nodeType = node.nodeType;\n    const service = node.service || '';\n    const version = node.version || '';\n    const workload = node.workload || '';\n    const isBox = node.isBox;\n    const isBoxed = node.parent;\n    const box1 = isBoxed ? ele.parent()[0] : undefined;\n    const box1Type = box1 ? box1.data().isBox : undefined;\n    const box2 = box1 && box1.parent() ? box1.parent()[0] : undefined;\n    const box2Type = box2 ? box2.data().isBox : undefined;\n    // const box3 = box2 && box2.parent() ? box2.parent()[0] : undefined;\n    // const box3Type = box3 ? box3.data().isBox : undefined;\n    const isAppBoxed = box1Type === BoxByType.APP;\n    const isNamespaceBoxed = box1Type === BoxByType.NAMESPACE || box2Type === BoxByType.NAMESPACE;\n    // const isClusterBoxed = box1Type === BoxByType.CLUSTER || box2Type === BoxByType.CLUSTER || box3Type === BoxByType.CLUSTER;\n    const isMultiNamespace = cyGlobal.activeNamespaces.length > 1;\n    const isOutside = node.isOutside;\n\n    let icons = '';\n    if (cyGlobal.showMissingSidecars && node.hasMissingSC) {\n      icons = `<span class=\"${NodeIconMS} ${iconMargin(icons)}\"></span> ${icons}`;\n    }\n    if (cyGlobal.showVirtualServices) {\n      if (node.hasCB) {\n        icons = `<span class=\"${NodeIconCB} ${iconMargin(icons)}\"></span> ${icons}`;\n      }\n      // If there's an additional traffic scenario present then it's assumed\n      // that there is a VS present so the VS badge is omitted.\n      if (node.hasVS) {\n        const hasKialiScenario =\n          node.hasFaultInjection ||\n          node.hasRequestRouting ||\n          node.hasRequestTimeout ||\n          node.hasTCPTrafficShifting ||\n          node.hasTrafficShifting;\n        if (!hasKialiScenario) {\n          icons = `<span class=\"${NodeIconVS} ${iconMargin(icons)}\"></span> ${icons}`;\n        } else {\n          if (node.hasFaultInjection) {\n            icons = `<span class=\"${NodeIconFaultInjection} ${iconMargin(icons)}\"></span> ${icons}`;\n          }\n          if (node.hasTrafficShifting || node.hasTCPTrafficShifting) {\n            icons = `<span class=\"${NodeIconTrafficShifting} ${iconMargin(icons)}\"></span> ${icons}`;\n          }\n          if (node.hasRequestTimeout) {\n            icons = `<span class=\"${NodeIconRequestTimeout} ${iconMargin(icons)}\"></span> ${icons}`;\n          }\n          if (node.hasRequestRouting) {\n            icons = `<span class=\"${NodeIconRequestRouting} ${iconMargin(icons)}\"></span> ${icons}`;\n          }\n        }\n      }\n    }\n\n    if (node.hasWorkloadEntry) {\n      icons = `<span class=\"${NodeIconWorkloadEntry} ${iconMargin(icons)}\"></span> ${icons}`;\n    }\n\n    if (node.isRoot) {\n      if (node.isGateway?.ingressInfo?.hostnames?.length !== undefined) {\n        icons = `<span class='${NodeIconGateway} ${iconMargin(icons)}'></span> ${icons}`;\n      }\n      icons = `<span class='${NodeIconRoot} ${iconMargin(icons)}'></span> ${icons}`;\n    }\n\n    const hasIcon = icons.length > 0;\n    if (hasIcon) {\n      icons = `<div class=${iconsDefault}>${icons}</div>`;\n    }\n\n    let labelStyle = '';\n    if (ele.hasClass(HighlightClass)) {\n      labelStyle += 'font-size: ' + NodeTextFontSizeHover + ';';\n    }\n    if (ele.hasClass(DimClass)) {\n      labelStyle += 'opacity: 0.6;';\n    }\n\n    let contentStyle = '';\n    if (ele.hasClass(HighlightClass)) {\n      const fontSize = isBox && isBox !== BoxByType.APP ? NodeTextFontSizeHoverBox : NodeTextFontSizeHover;\n      contentStyle += 'font-size: ' + fontSize + ';';\n    }\n\n    const content: string[] = [];\n\n    // append namespace if necessary\n    if (\n      (isMultiNamespace || isOutside) &&\n      !!namespace &&\n      namespace !== UNKNOWN &&\n      !isAppBoxed &&\n      !isNamespaceBoxed &&\n      isBox !== BoxByType.NAMESPACE\n    ) {\n      content.push(`(${namespace})`);\n    }\n\n    // append cluster if necessary\n    if (\n      !!cluster &&\n      cluster !== UNKNOWN &&\n      cluster !== cyGlobal.homeCluster &&\n      !isBoxed &&\n      isBox !== BoxByType.CLUSTER\n    ) {\n      content.push(`(${cluster})`);\n    }\n\n    switch (nodeType) {\n      case NodeType.AGGREGATE:\n        content.unshift(node.aggregateValue!);\n        break;\n      case NodeType.APP:\n        if (isAppBoxed) {\n          if (cyGlobal.graphType === GraphType.APP) {\n            content.unshift(app);\n          } else if (version && version !== UNKNOWN) {\n            content.unshift(version);\n          } else {\n            content.unshift(workload ? workload : app);\n          }\n        } else {\n          if (cyGlobal.graphType === GraphType.APP || version === UNKNOWN) {\n            content.unshift(app);\n          } else {\n            content.unshift(version);\n            content.unshift(app);\n          }\n        }\n        break;\n      case NodeType.BOX:\n        switch (isBox) {\n          case BoxByType.APP:\n            content.unshift(app);\n            break;\n          case BoxByType.CLUSTER:\n            content.unshift(node.cluster);\n            break;\n          case BoxByType.NAMESPACE:\n            content.unshift(node.namespace);\n            break;\n        }\n        break;\n      case NodeType.SERVICE:\n        content.unshift(service);\n        break;\n      case NodeType.UNKNOWN:\n        content.unshift(UNKNOWN);\n        break;\n      case NodeType.WORKLOAD:\n        content.unshift(workload);\n        break;\n      default:\n        content.unshift('error');\n    }\n\n    const contentText = content.join('<br/>');\n    const contentClasses = hasIcon ? `${contentDefault} ${contentWithBadges}` : `${contentDefault}`;\n    let appBoxStyle = '';\n    if (isBox) {\n      let badge = '';\n      switch (isBox) {\n        case BoxByType.APP:\n          badge = PFBadges.App.badge;\n          appBoxStyle += `font-size: ${NodeTextFontSize};`;\n          break;\n        case BoxByType.CLUSTER:\n          badge = PFBadges.Cluster.badge;\n          break;\n        case BoxByType.NAMESPACE:\n          badge = PFBadges.Namespace.badge;\n          break;\n        default:\n          console.warn(`GraphSyles: Unexpected box [${isBox}] `);\n      }\n      const contentBadge = `<span class=\"pf-c-badge pf-m-unread ${contentBoxPfBadge}\" style=\"${appBoxStyle}\">${badge}</span>`;\n      const contentSpan = `<span class=\"${contentClasses} ${contentBox}\" style=\" ${appBoxStyle}${contentStyle}\">${contentBadge}${contentText}</span>`;\n      return `<div class=\"${labelDefault} ${labelBox}\" style=\"${labelStyle}\">${icons}${contentSpan}</div>`;\n    }\n\n    let hosts: string[] = [];\n    node.hasVS?.hostnames?.forEach(h => hosts.push(h === '*' ? '* (all hosts)' : h));\n    node.isGateway?.ingressInfo?.hostnames?.forEach(h => hosts.push(h === '*' ? '* (all hosts)' : h));\n\n    let htmlHosts = '';\n    if (hosts.length !== 0) {\n      let hostsToShow = hosts;\n      if (hostsToShow.length > config.graph.maxHosts) {\n        hostsToShow = hosts.slice(0, config.graph.maxHosts);\n        hostsToShow.push(\n          hosts.length - config.graph.maxHosts === 1\n            ? '1 more host...'\n            : `${hosts.length - config.graph.maxHosts} more hosts...`\n        );\n      }\n      htmlHosts = `<div class='${hostsClass}'><div>${hosts.length} ${\n        hosts.length === 1 ? 'host' : 'hosts'\n      }</div><div>${hostsToShow.join('<br/>')}</div></div>`;\n    }\n\n    const contentSpan = `<div class=\"${contentClasses}\" style=\"display: block; ${contentStyle}\"><div>${contentText}</div><div></div>${htmlHosts}</div></div>`;\n    return `<div class=\"${labelDefault}\" style=\"${labelStyle}\">${icons}${contentSpan}</div>`;\n  }\n\n  static htmlNodeLabels(cy: Cy.Core) {\n    return [\n      {\n        query: 'node:visible',\n        halign: 'center',\n        valign: 'bottom',\n        halignBox: 'center',\n        valignBox: 'bottom',\n        tpl: (data: any) => this.getNodeLabel(cy.$id(data.id))\n      }\n    ];\n  }\n\n  static styles(): Cy.Stylesheet[] {\n    GraphStyles.setRuntimeColors();\n\n    const getCyGlobalData = (ele: Cy.NodeSingular | Cy.EdgeSingular): CytoscapeGlobalScratchData => {\n      return ele.cy().scratch(CytoscapeGlobalScratchNamespace);\n    };\n\n    const getEdgeColor = (ele: Cy.EdgeSingular): string => {\n      const edgeData = decoratedEdgeData(ele);\n      const cyGlobal = getCyGlobalData(ele);\n\n      if (!edgeData.hasTraffic) {\n        return EdgeColorDead;\n      }\n      if (edgeData.protocol === 'tcp') {\n        return EdgeColorTCPWithTraffic;\n      }\n      if (edgeData.protocol === 'grpc' && !cyGlobal.trafficRates.includes(TrafficRate.GRPC_REQUEST)) {\n        return EdgeColor;\n      }\n\n      const sourceNodeData = decoratedNodeData(ele.source());\n      const destNodeData = decoratedNodeData(ele.target());\n      const statusEdge = getEdgeHealth(edgeData, sourceNodeData, destNodeData);\n\n      switch (statusEdge.status) {\n        case FAILURE:\n          return EdgeColorFailure;\n        case DEGRADED:\n          return EdgeColorDegraded;\n        default:\n          return EdgeColor;\n      }\n    };\n\n    const getEdgeLabel = (ele: Cy.EdgeSingular, isVerbose?: boolean): string => {\n      const cyGlobal = getCyGlobalData(ele);\n      const edgeLabels = cyGlobal.edgeLabels;\n      const edgeData = decoratedEdgeData(ele);\n      const includeUnits = isVerbose || numLabels(edgeLabels) > 1;\n      let labels = [] as string[];\n\n      if (edgeLabels.includes(EdgeLabelMode.TRAFFIC_RATE)) {\n        let rate = 0;\n        let pErr = 0;\n        if (edgeData.http > 0) {\n          rate = edgeData.http;\n          pErr = edgeData.httpPercentErr > 0 ? edgeData.httpPercentErr : 0;\n        } else if (edgeData.grpc > 0) {\n          rate = edgeData.grpc;\n          pErr = edgeData.grpcPercentErr > 0 ? edgeData.grpcPercentErr : 0;\n        } else if (edgeData.tcp > 0) {\n          rate = edgeData.tcp;\n        }\n\n        if (rate > 0) {\n          if (pErr > 0) {\n            labels.push(`${toFixedRequestRate(rate, includeUnits)}\\n${toFixedErrRate(pErr)}`);\n          } else {\n            switch (edgeData.protocol) {\n              case Protocol.GRPC:\n                if (cyGlobal.trafficRates.includes(TrafficRate.GRPC_REQUEST)) {\n                  labels.push(toFixedRequestRate(rate, includeUnits));\n                } else {\n                  labels.push(toFixedRequestRate(rate, includeUnits, 'mps'));\n                }\n                break;\n              case Protocol.TCP:\n                labels.push(toFixedByteRate(rate, includeUnits));\n                break;\n              default:\n                labels.push(toFixedRequestRate(rate, includeUnits));\n                break;\n            }\n          }\n        }\n      }\n\n      if (edgeLabels.includes(EdgeLabelMode.RESPONSE_TIME_GROUP)) {\n        // todo: remove this logging once we figure out the strangeness going on with responseTime\n        let logResponseTime = edgeData.responseTime;\n        if (!isNaN(logResponseTime) && !Number.isInteger(logResponseTime)) {\n          console.log(`Unexpected string responseTime=|${logResponseTime}|`);\n        }\n        // hack to fix responseTime is sometimes a string during runtime even though its type is number\n        const responseTimeNumber = parseInt(String(edgeData.responseTime));\n        const responseTime = responseTimeNumber > 0 ? responseTimeNumber : 0;\n        if (responseTime && responseTime > 0) {\n          labels.push(toFixedDuration(responseTime));\n        }\n      }\n\n      if (edgeLabels.includes(EdgeLabelMode.THROUGHPUT_GROUP)) {\n        let rate = edgeData.throughput;\n\n        if (rate > 0) {\n          labels.push(toFixedByteRate(rate, includeUnits));\n        }\n      }\n\n      if (edgeLabels.includes(EdgeLabelMode.TRAFFIC_DISTRIBUTION)) {\n        let pReq;\n        if (edgeData.httpPercentReq > 0) {\n          pReq = edgeData.httpPercentReq;\n        } else if (edgeData.grpcPercentReq > 0) {\n          pReq = edgeData.grpcPercentReq;\n        }\n        if (pReq > 0 && pReq < 100) {\n          labels.push(toFixedPercent(pReq));\n        }\n      }\n\n      let label = labels.join('\\n');\n\n      if (isVerbose) {\n        const protocol = edgeData.protocol;\n        label = protocol ? `${protocol}\\n${label}` : label;\n      }\n\n      const mtlsPercentage = edgeData.isMTLS;\n      let lockIcon = false;\n      if (cyGlobal.showSecurity && edgeData.hasTraffic) {\n        if (mtlsPercentage && mtlsPercentage > 0) {\n          lockIcon = true;\n          label = `${EdgeIconMTLS}\\n${label}`;\n        }\n      }\n\n      if (edgeData.hasTraffic && edgeData.responses) {\n        const dest = decoratedNodeData(ele.target());\n        if (dest.hasCB) {\n          const responses = edgeData.responses;\n          for (let code of _.keys(responses)) {\n            // TODO: Not 100% sure we want \"UH\" code here (\"no healthy upstream hosts\") but based on timing I have\n            // seen this code returned and not \"UO\". \"UO\" is returned only when the circuit breaker is caught open.\n            // But if open CB is responsible for removing possible destinations the \"UH\" code seems preferred.\n            if (responses[code]['UO'] || responses[code]['UH']) {\n              label = lockIcon ? `${NodeIconCB} ${label}` : `${NodeIconCB}\\n${label}`;\n              break;\n            }\n          }\n        }\n      }\n\n      return label;\n    };\n\n    const trimFixed = (fixed: string): string => {\n      if (!fixed.includes('.')) {\n        return fixed;\n      }\n      while (fixed.endsWith('0')) {\n        fixed = fixed.slice(0, -1);\n      }\n      return fixed.endsWith('.') ? (fixed = fixed.slice(0, -1)) : fixed;\n    };\n\n    const toFixedRequestRate = (num: number, includeUnits: boolean, units?: string): string => {\n      const rate = trimFixed(num.toFixed(2));\n      return includeUnits ? `${rate} ${units || 'rps'}` : rate;\n    };\n\n    const toFixedErrRate = (num: number): string => {\n      return `${trimFixed(num.toFixed(num < 1 ? 1 : 0))}% err`;\n    };\n\n    const toFixedByteRate = (num: number, includeUnits: boolean): string => {\n      if (num < 1024.0) {\n        const rate = num < 1.0 ? trimFixed(num.toFixed(2)) : num.toFixed(0);\n        return includeUnits ? `${rate} bps` : rate;\n      }\n      const rate = trimFixed((num / 1024.0).toFixed(2));\n      return includeUnits ? `${rate} kps` : rate;\n    };\n\n    const toFixedPercent = (num: number): string => {\n      return `${trimFixed(num.toFixed(1))}%`;\n    };\n\n    const toFixedDuration = (num: number): string => {\n      if (num < 1000) {\n        return `${num.toFixed(0)}ms`;\n      }\n      return `${trimFixed((num / 1000.0).toFixed(2))}s`;\n    };\n\n    const getNodeBackgroundImage = (ele: Cy.NodeSingular): string => {\n      const nodeData = decoratedNodeData(ele);\n      const isInaccessible = nodeData.isInaccessible;\n      const isServiceEntry = nodeData.isServiceEntry;\n      const isBox = nodeData.isBox;\n      if (isInaccessible && !isServiceEntry && !isBox) {\n        return NodeImageKey;\n      }\n      const isOutside = nodeData.isOutside;\n      if (isOutside && !isBox) {\n        return NodeImageTopology;\n      }\n      return 'none';\n    };\n\n    const getNodeBackgroundPositionX = (ele: Cy.NodeSingular): string => {\n      if (getNodeShape(ele) === 'round-tag') {\n        return '0';\n      }\n      return '50%';\n    };\n\n    const getNodeBackgroundPositionY = (ele: Cy.NodeSingular): string => {\n      if (getNodeShape(ele) === 'round-triangle') {\n        return '6px';\n      }\n      return '50%';\n    };\n\n    const getNodeBorderColor = (ele: Cy.NodeSingular): string => {\n      const isBox = ele.data(CyNode.isBox);\n      if (isBox && isBox !== BoxByType.APP) {\n        return NodeColorBorderBox;\n      }\n\n      const healthStatus = ele.data(CyNode.healthStatus);\n      switch (healthStatus) {\n        case DEGRADED.name:\n          return NodeColorBorderDegraded;\n        case FAILURE.name:\n          return NodeColorBorderFailure;\n        default:\n          return NodeColorBorder;\n      }\n    };\n\n    const getNodeShape = (ele: Cy.NodeSingular): Cy.Css.NodeShape => {\n      const nodeData = decoratedNodeData(ele);\n      const nodeType = nodeData.nodeType;\n      switch (nodeType) {\n        case NodeType.AGGREGATE:\n          return 'round-pentagon';\n        case NodeType.APP:\n          return 'round-rectangle';\n        case NodeType.BOX:\n          return 'round-rectangle';\n        case NodeType.SERVICE:\n          return nodeData.isServiceEntry ? 'round-tag' : 'round-triangle';\n        case NodeType.UNKNOWN:\n          return 'ellipse';\n        case NodeType.WORKLOAD:\n          return 'ellipse';\n        default:\n          return 'ellipse';\n      }\n    };\n\n    const nodeSelectedStyle = {\n      'border-color': (ele: Cy.NodeSingular) => {\n        switch (ele.data(CyNode.healthStatus)) {\n          case DEGRADED.name:\n            return NodeColorBorderDegraded;\n          case FAILURE.name:\n            return NodeColorBorderFailure;\n          default:\n            return NodeColorBorderSelected;\n        }\n      },\n      'border-width': NodeBorderWidthSelected\n    };\n\n    return [\n      // Node Defaults\n      {\n        selector: 'node',\n        css: {\n          'background-color': NodeColorFill,\n          'background-image': (ele: Cy.NodeSingular) => {\n            return getNodeBackgroundImage(ele);\n          },\n          'background-width': '80%',\n          'background-height': '80%',\n          'background-position-x': getNodeBackgroundPositionX,\n          'background-position-y': getNodeBackgroundPositionY,\n          'border-color': (ele: Cy.NodeSingular) => {\n            return getNodeBorderColor(ele);\n          },\n          'border-style': (ele: Cy.NodeSingular) => {\n            return decoratedNodeData(ele).isIdle ? 'dotted' : 'solid';\n          },\n          'border-width': NodeBorderWidth,\n          ghost: 'yes',\n          'ghost-offset-x': 1,\n          'ghost-offset-y': 1,\n          'ghost-opacity': 0.4,\n          height: NodeHeight,\n          shape: (ele: Cy.NodeSingular) => {\n            return getNodeShape(ele);\n          },\n          width: NodeWidth,\n          'z-index': 10\n        }\n      },\n      // Node is a Cluster Box\n      {\n        selector: `node[isBox=\"${BoxByType.CLUSTER}\"]`,\n        css: {\n          'background-color': NodeColorFillBoxCluster\n        }\n      },\n      // Node is a Namespace Box\n      {\n        selector: `node[isBox=\"${BoxByType.NAMESPACE}\"]`,\n        css: {\n          'background-color': NodeColorFillBoxNamespace\n        }\n      },\n      // Node is an App Box\n      {\n        selector: `node[isBox=\"${BoxByType.APP}\"]`,\n        css: {\n          'background-color': NodeColorFillBoxApp\n        }\n      },\n      // Node is selected\n      {\n        selector: 'node:selected',\n        style: nodeSelectedStyle\n      },\n      // Node is highlighted (see GraphHighlighter.ts)\n      {\n        selector: `node.${HighlightClass}`,\n        style: {\n          'font-size': NodeTextFontSizeHover\n        }\n      },\n      // Node other than Box is highlighted (see GraphHighlighter.ts)\n      {\n        selector: `node.${HighlightClass}[^isBox]`,\n        style: {\n          'background-color': (ele: Cy.NodeSingular) => {\n            switch (ele.data(CyNode.healthStatus)) {\n              case DEGRADED.name:\n                return NodeColorFillHoverDegraded;\n              case FAILURE.name:\n                return NodeColorFillHoverFailure;\n              default:\n                return NodeColorFillHover;\n            }\n          },\n          'border-color': (ele: Cy.NodeSingular) => {\n            switch (ele.data(CyNode.healthStatus)) {\n              case DEGRADED.name:\n                return NodeColorBorderDegraded;\n              case FAILURE.name:\n                return NodeColorBorderFailure;\n              default:\n                return NodeColorBorderHover;\n            }\n          }\n        }\n      },\n      // Node is dimmed (see GraphHighlighter.ts)\n      {\n        selector: `node.${DimClass}`,\n        style: {\n          opacity: 0.6\n        }\n      },\n      {\n        selector: 'edge',\n        css: {\n          'curve-style': 'bezier',\n          'font-family': EdgeTextFont,\n          'font-size': EdgeTextFontSize,\n          label: (ele: Cy.EdgeSingular) => {\n            return getEdgeLabel(ele);\n          },\n          'line-color': (ele: Cy.EdgeSingular) => {\n            return getEdgeColor(ele);\n          },\n          'line-style': 'solid',\n          'target-arrow-shape': 'vee',\n          'target-arrow-color': (ele: Cy.EdgeSingular) => {\n            return getEdgeColor(ele);\n          },\n          'text-events': 'yes',\n          'text-outline-color': EdgeTextOutlineColor,\n          'text-outline-width': EdgeTextOutlineWidth,\n          'text-wrap': 'wrap',\n          width: EdgeWidth\n        }\n      },\n      {\n        selector: 'edge:selected',\n        css: {\n          width: EdgeWidthSelected,\n          label: (ele: Cy.EdgeSingular) => getEdgeLabel(ele, true)\n        }\n      },\n      {\n        selector: 'edge[protocol=\"tcp\"]',\n        css: {\n          'target-arrow-shape': 'triangle-cross',\n          'line-style': 'solid'\n        }\n      },\n      {\n        selector: `edge.${HighlightClass}`,\n        style: {\n          'font-size': EdgeTextFontSizeHover\n        }\n      },\n      {\n        selector: `edge.${HoveredClass}`,\n        style: {\n          label: (ele: Cy.EdgeSingular) => {\n            return getEdgeLabel(ele, true);\n          }\n        }\n      },\n      {\n        selector: `edge.${DimClass}`,\n        style: {\n          opacity: 0.3\n        }\n      },\n      {\n        selector: '*.find[^isBox]',\n        style: {\n          'overlay-color': PFColorVals.Gold400,\n          'overlay-padding': '7px',\n          'overlay-opacity': 0.3\n        }\n      },\n      {\n        selector: '*.span[^isBox]',\n        style: {\n          'overlay-color': PFColorVals.Purple200,\n          'overlay-padding': '7px',\n          'overlay-opacity': 0.3\n        }\n      }\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
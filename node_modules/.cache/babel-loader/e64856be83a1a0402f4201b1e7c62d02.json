{"ast":null,"code":"import _slicedToArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentList/ExperimentListPage.tsx\";\nimport * as React from 'react';\nimport * as FilterHelper from '../../../../components/FilterList/FilterHelper';\nimport { RenderContent } from '../../../../components/Nav/Page';\nimport * as ExpListFilters from './FiltersAndSorts';\nimport { style } from 'typestyle';\nimport { cellWidth, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { PromisesRegistry } from '../../../../utils/CancelablePromises';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport * as Iter8ExperimentListFilters from './FiltersAndSorts';\nimport { FilterSelected, StatefulFilters } from '../../../../components/Filters/StatefulFilters';\nimport { namespaceEquals } from '../../../../utils/Common';\nimport history from '../../../../app/History';\nimport { Dropdown, DropdownItem, DropdownPosition, DropdownToggle, EmptyState, EmptyStateBody, EmptyStateVariant, PopoverPosition, Text, TextContent, TextVariants, Title, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { KialiIcon } from '../../../../config/KialiIcon';\nimport { OkIcon, PowerOffIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport { activeNamespacesSelector, durationSelector } from '../../../../store/Selectors';\nimport { connect } from 'react-redux';\nimport DefaultSecondaryMasthead from '../../../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport RefreshContainer from '../../../../components/Refresh/Refresh';\nimport { PFBadges, PFBadge } from 'components/Pf/PfBadges'; // Style constants\n\nvar containerPadding = style({\n  padding: '20px 20px 20px 20px'\n});\nvar greenIconStyle = style({\n  fontSize: '1.0em',\n  color: 'green'\n});\nvar redIconStyle = style({\n  fontSize: '1.0em',\n  color: 'red'\n});\nvar statusIconStyle = style({\n  fontSize: '1.0em'\n});\nvar columns = [{\n  title: '实验名称',\n  transforms: [sortable]\n}, {\n  title: 'Namespace',\n  transforms: [sortable]\n}, {\n  title: 'Service',\n  transforms: [sortable]\n}, {\n  title: 'Phase',\n  transforms: [sortable, cellWidth(5)]\n}, {\n  title: 'Baseline',\n  transforms: [sortable]\n}, {\n  title: 'Candidate',\n  transforms: [sortable]\n}];\n\nvar ExperimentListPageComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentListPageComponent, _React$Component);\n\n  var _super = _createSuper(ExperimentListPageComponent);\n\n  function ExperimentListPageComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ExperimentListPageComponent);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n\n    _this.fetchExperiments = function (namespaces) {\n      API.getIter8Info().then(function (result) {\n        var iter8Info = result.data;\n\n        if (iter8Info.enabled) {\n          if (!iter8Info.supportedVersion) {\n            if (iter8Info.analyticsImgVersion !== '' && iter8Info.analyticsImgVersion.startsWith('2')) {\n              AlertUtils.addError('Iter8 v' + iter8Info.analyticsImgVersion + ' is not supported, please use the supported version (v1.x).');\n              return;\n            }\n\n            AlertUtils.addError('You are running an unsupported Iter8 version, please upgrade to supported version  (v0.2+) to take advantage of the full features of Iter8 .');\n            return;\n          }\n\n          if (namespaces.length > 0) {\n            API.getExperiments(namespaces).then(function (result) {\n              _this.setState(function (prevState) {\n                return {\n                  iter8Info: iter8Info,\n                  experimentLists: Iter8ExperimentListFilters.filterBy(result.data, FilterSelected.getSelected()),\n                  sortBy: prevState.sortBy\n                };\n              });\n            }).catch(function (error) {\n              AlertUtils.addError('Could not fetch Iter8 Experiments.', error);\n            });\n          }\n        } else {\n          AlertUtils.addError('Kiali has Iter8 extension enabled but it is not detected in the cluster under namespace ' + iter8Info.namespace);\n        }\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch Iter8 Info.', error);\n      });\n    };\n\n    _this.paramsAreSynced = function (prevProps) {\n      var activeNamespacesCompare = namespaceEquals(prevProps.activeNamespaces, _this.props.activeNamespaces);\n      var paramsSynced = activeNamespacesCompare;\n      return [paramsSynced, activeNamespacesCompare];\n    };\n\n    _this.onSort = function (_event, index, direction) {\n      var experimentList = _this.state.experimentLists.sort(function (a, b) {\n        switch (index) {\n          case 0:\n            return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n\n          case 1:\n            return a.namespace < b.namespace ? -1 : a.namespace > b.namespace ? 1 : 0;\n\n          case 2:\n            return a.phase < b.phase ? -1 : a.phase > b.phase ? 1 : 0;\n\n          case 3:\n            return a.status < b.status ? -1 : a.status > b.status ? 1 : 0;\n\n          case 4:\n            return a.baseline < b.baseline ? -1 : a.baseline > b.baseline ? 1 : 0;\n        }\n\n        return 0;\n      });\n\n      _this.setState({\n        experimentLists: direction === SortByDirection.asc ? experimentList : experimentList.reverse(),\n        sortBy: {\n          index: index,\n          direction: direction\n        }\n      });\n    };\n\n    _this.updateListItems = function () {\n      _this.promises.cancelAll();\n\n      var namespacesSelected = _this.props.activeNamespaces.map(function (item) {\n        return item.name;\n      });\n\n      if (namespacesSelected.length !== 0) {\n        _this.fetchExperiments(namespacesSelected);\n      } else {\n        _this.setState({\n          experimentLists: []\n        });\n      }\n    };\n\n    _this.goNewExperimentPage = function () {\n      history.push('/extensions/iter8/new');\n    };\n\n    _this.goNewExperimentFromFile = function () {\n      history.push('/extensions/iter8/newfromfile');\n    };\n\n    _this.actionsToolbar = function () {\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        id: \"actions\",\n        title: \"Actions\",\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          onToggle: function onToggle(toggle) {\n            return _this.setState({\n              dropdownOpen: toggle\n            });\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }\n        }, \"Actions\"),\n        onSelect: function onSelect() {\n          return _this.setState({\n            dropdownOpen: !_this.state.dropdownOpen\n          });\n        },\n        position: DropdownPosition.right,\n        isOpen: _this.state.dropdownOpen,\n        dropdownItems: [/*#__PURE__*/React.createElement(DropdownItem, {\n          key: \"createExperiment\",\n          isDisabled: !_this.state.iter8Info.enabled,\n          onClick: function onClick() {\n            return _this.goNewExperimentPage();\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }\n        }, \"Create New Experiment\"), /*#__PURE__*/React.createElement(DropdownItem, {\n          key: \"createExperimentFromFile\",\n          isDisabled: !_this.state.iter8Info.enabled,\n          onClick: function onClick() {\n            return _this.goNewExperimentFromFile();\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }\n        }, \"Create New Experiment from YAML\")],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.onFilterChange = function () {\n      // Resetting pagination when filters change\n      _this.updateListItems();\n    };\n\n    _this.toolbar = function () {\n      return /*#__PURE__*/React.createElement(StatefulFilters, {\n        initialFilters: Iter8ExperimentListFilters.availableFilters,\n        onFilterChange: _this.onFilterChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.getStatusTooltip = function (phase, status, winnerFound, winnerName, baselineName) {\n      var statusValue = 'Status: In Progress';\n      var retStatus = status;\n\n      if (status.length > 0) {\n        var values = status.split(':');\n\n        if (values.length > 1) {\n          retStatus = values.slice(1)[0];\n        }\n\n        if (status.includes('Failed')) {\n          statusValue = 'Status: Failed';\n        } else if (status.includes('Completed')) {\n          statusValue = 'Status: Completed';\n\n          if (winnerName === baselineName) {\n            retStatus = 'Traffic to Baseline';\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(TextContent, {\n        style: {\n          color: PFColors.White\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, \"Phase: \"), \" \", phase), /*#__PURE__*/React.createElement(Text, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }\n      }, statusValue), \" \", retStatus), /*#__PURE__*/React.createElement(Text, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }\n      }, \"Winner Found: \", winnerFound ? winnerName : 'False'), /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.p,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }\n      }, \"(Winning version as identified by iter8 analytics)\")));\n    };\n\n    _this.experimentStatusIcon = function (key, phase, winnerStatus, status, baselineName) {\n      var className = greenIconStyle;\n      var toBaseline = false;\n\n      var statusString = _this.getStatusTooltip(phase, status, winnerStatus.winning_version_found, winnerStatus.name, baselineName);\n\n      if (status.includes('Abort')) {\n        className = greenIconStyle;\n      } else if (!winnerStatus.winning_version_found) {\n        className = redIconStyle;\n      }\n\n      if (winnerStatus.name === baselineName) {\n        toBaseline = true;\n        className = redIconStyle;\n      }\n\n      switch (phase) {\n        case 'Initializing':\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'Initializing_' + key,\n            \"aria-label\": 'Status indicator',\n            position: PopoverPosition.auto,\n            className: 'health_indicator',\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.InProgressIcon, {\n            className: statusIconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 13\n            }\n          }));\n\n        case 'Progressing':\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'Progressing_' + key,\n            \"aria-label\": 'Status indicator',\n            position: PopoverPosition.auto,\n            className: 'health_indicator',\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.OnRunningIcon, {\n            className: statusIconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 13\n            }\n          }));\n\n        case 'Pause':\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'Pause_' + key,\n            \"aria-label\": 'Status indicator',\n            position: PopoverPosition.auto,\n            className: 'health_indicator',\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.PauseCircle, {\n            className: statusIconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 13\n            }\n          }));\n\n        case 'Completed':\n          if (status.includes('Abort')) {\n            return /*#__PURE__*/React.createElement(Tooltip, {\n              key: 'Completed_' + key,\n              \"aria-label\": 'Status indicator',\n              position: PopoverPosition.auto,\n              className: 'health_indicator',\n              content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(PowerOffIcon, {\n              className: className,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 15\n              }\n            }));\n          } else if (toBaseline) {\n            return /*#__PURE__*/React.createElement(Tooltip, {\n              key: 'Completed_' + key,\n              \"aria-label\": 'Status indicator',\n              position: PopoverPosition.auto,\n              className: 'health_indicator',\n              content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(OkIcon, {\n              className: className,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 15\n              }\n            }));\n          }\n\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'Completed_' + key,\n            \"aria-label\": 'Status indicator',\n            position: PopoverPosition.auto,\n            className: 'health_indicator',\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(OkIcon, {\n            className: className,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 13\n            }\n          }));\n\n        default:\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            key: 'default_' + key,\n            \"aria-label\": 'Status indicator',\n            position: PopoverPosition.auto,\n            className: 'health_indicator',\n            content: /*#__PURE__*/React.createElement(React.Fragment, null, statusString),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(KialiIcon.OnRunningIcon, {\n            className: statusIconStyle,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 13\n            }\n          }));\n      }\n    };\n\n    _this.rows = function () {\n      return _this.state.experimentLists.map(function (h) {\n        var candidates = [];\n\n        var _iterator = _createForOfIteratorHelper(h.candidates),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n            candidates.push(c.name);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return {\n          cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PFBadge, {\n            key: \"TooltipExtensionIter8Name_\".concat(h.name),\n            badge: PFBadges.Iter8,\n            position: TooltipPosition.top,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(PFBadge, {\n            badge: {\n              badge: h.experimentKind\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(Link, {\n            to: \"/extensions/namespaces/\".concat(h.namespace, \"/iter8/\").concat(h.name, \"?target=\").concat(h.targetService, \"&startTime=\").concat(h.startTime, \"&endTime=\").concat(h.endTime, \"&baseline=\").concat(h.baseline.name, \"&candidates=\").concat(candidates),\n            key: 'Experiment_' + h.namespace + '_' + h.namespace,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 13\n            }\n          }, h.name)), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PFBadge, {\n            key: \"TooltipExtensionNamespace_\".concat(h.namespace),\n            badge: PFBadges.Namespace,\n            position: TooltipPosition.top,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 13\n            }\n          }), h.namespace), /*#__PURE__*/React.createElement(React.Fragment, null, h.kind === 'Deployment' ? _this.redirectLink(h.namespace, h.targetService, 'Service') : _this.redirectLink(h.namespace, '', h.kind)), /*#__PURE__*/React.createElement(React.Fragment, null, _this.experimentStatusIcon(h.name + '_' + h.namespace, h.phase, h.winner, h.status, h.baseline.name)), /*#__PURE__*/React.createElement(React.Fragment, null, _this.redirectLink(h.namespace, h.baseline.name, h.kind), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 13\n            }\n          }), \" \", h.baseline.weight, \"%\"), /*#__PURE__*/React.createElement(React.Fragment, null, h.candidates.map(function (can) {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, _this.redirectLink(h.namespace, can.name, h.kind), \"\\xA0\", can.weight, \"% \", /*#__PURE__*/React.createElement(\"br\", {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 39\n              }\n            }));\n          }))]\n        };\n      });\n    };\n\n    var prevCurrentSortField = FilterHelper.currentSortField(ExpListFilters.sortFields);\n    var prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n    _this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        controllerImgVersion: '',\n        analyticsImgVersion: '',\n        namespace: 'iter8'\n      },\n      experimentLists: [],\n      sortBy: {},\n      dropdownOpen: false,\n      listItems: [],\n      currentSortField: prevCurrentSortField,\n      isSortAscending: prevIsSortAscending,\n      onFilterChange: false\n    };\n    return _this;\n  }\n\n  _createClass(ExperimentListPageComponent, [{\n    key: \"componentDidMount\",\n    value: // It invokes backend when component is mounted\n    function componentDidMount() {\n      this.updateListItems();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState, _snapshot) {\n      var _this$paramsAreSynced = this.paramsAreSynced(prevProps),\n          _this$paramsAreSynced2 = _slicedToArray(_this$paramsAreSynced, 1),\n          paramsSynced = _this$paramsAreSynced2[0];\n\n      if (!paramsSynced) {\n        this.setState({\n          currentSortField: this.props.currentSortField,\n          isSortAscending: this.props.isSortAscending\n        });\n        this.updateListItems();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"redirectLink\",\n    value: function redirectLink(namespace, name, kind) {\n      if (kind === 'Deployment') {\n        var linkTo = '/namespaces/' + namespace + '/workloads/' + name;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PFBadge, {\n          badge: {\n            badge: 'W'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(Link, {\n          to: linkTo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 11\n          }\n        }, name));\n      } else {\n        if (name !== '') {\n          var _linkTo = '/namespaces/' + namespace + '/services/' + name;\n\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PFBadge, {\n            badge: {\n              badge: 'S'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(Link, {\n            to: _linkTo,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 13\n            }\n          }, name));\n        } else {\n          return 'N/A';\n        }\n      }\n    } // Helper used to build the table content.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DefaultSecondaryMasthead, {\n        rightToolbar: /*#__PURE__*/React.createElement(RefreshContainer, {\n          id: \"exp_list_refresh\",\n          disabled: false,\n          hideLabel: true,\n          handleRefresh: this.updateListItems,\n          manageURL: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }\n        }),\n        actionsToolbar: this.actionsToolbar(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(RenderContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: containerPadding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }\n      }, this.toolbar(), /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Sortable Table\",\n        sortBy: this.state.sortBy,\n        cells: columns,\n        rows: this.rows(),\n        onSort: this.onSort,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 15\n        }\n      }), this.state.experimentLists.length > 0 ? /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: columns.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 19\n        }\n      }, this.props.activeNamespaces.length > 0 ? /*#__PURE__*/React.createElement(EmptyState, {\n        variant: EmptyStateVariant.full,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 25\n        }\n      }, \"No Iter8 Experiments found\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 25\n        }\n      }, \"No Iter8 Experiments in namespace\", this.props.activeNamespaces.length === 1 ? \" \".concat(this.props.activeNamespaces[0].name) : \"s: \".concat(this.props.activeNamespaces.map(function (ns) {\n        return ns.name;\n      }).join(', ')))) : /*#__PURE__*/React.createElement(EmptyState, {\n        variant: EmptyStateVariant.full,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        headingLevel: \"h5\",\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 25\n        }\n      }, \"No namespace is selected\"), /*#__PURE__*/React.createElement(EmptyStateBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 25\n        }\n      }, \"There is currently no namespace selected, please select one using the Namespace selector.\"))))))));\n    }\n  }]);\n\n  return ExperimentListPageComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    activeNamespaces: activeNamespacesSelector(state),\n    duration: durationSelector(state)\n  };\n};\n\nvar ExperimentListPage = connect(mapStateToProps)(ExperimentListPageComponent);\nexport default ExperimentListPage;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentList/ExperimentListPage.tsx"],"names":["React","FilterHelper","RenderContent","ExpListFilters","style","cellWidth","sortable","SortByDirection","Table","TableBody","TableHeader","PromisesRegistry","API","AlertUtils","Iter8ExperimentListFilters","FilterSelected","StatefulFilters","namespaceEquals","history","Dropdown","DropdownItem","DropdownPosition","DropdownToggle","EmptyState","EmptyStateBody","EmptyStateVariant","PopoverPosition","Text","TextContent","TextVariants","Title","Tooltip","TooltipPosition","PFColors","KialiIcon","OkIcon","PowerOffIcon","Link","activeNamespacesSelector","durationSelector","connect","DefaultSecondaryMasthead","RefreshContainer","PFBadges","PFBadge","containerPadding","padding","greenIconStyle","fontSize","color","redIconStyle","statusIconStyle","columns","title","transforms","ExperimentListPageComponent","props","promises","fetchExperiments","namespaces","getIter8Info","then","result","iter8Info","data","enabled","supportedVersion","analyticsImgVersion","startsWith","addError","length","getExperiments","setState","prevState","experimentLists","filterBy","getSelected","sortBy","catch","error","namespace","paramsAreSynced","prevProps","activeNamespacesCompare","activeNamespaces","paramsSynced","onSort","_event","index","direction","experimentList","state","sort","a","b","name","phase","status","baseline","asc","reverse","updateListItems","cancelAll","namespacesSelected","map","item","goNewExperimentPage","push","goNewExperimentFromFile","actionsToolbar","toggle","dropdownOpen","right","onFilterChange","toolbar","availableFilters","getStatusTooltip","winnerFound","winnerName","baselineName","statusValue","retStatus","values","split","slice","includes","White","p","experimentStatusIcon","key","winnerStatus","className","toBaseline","statusString","winning_version_found","auto","rows","h","candidates","c","cells","Iter8","top","badge","experimentKind","targetService","startTime","endTime","Namespace","kind","redirectLink","winner","weight","can","prevCurrentSortField","currentSortField","sortFields","prevIsSortAscending","isCurrentSortAscending","controllerImgVersion","listItems","isSortAscending","_prevState","_snapshot","linkTo","backgroundColor","full","ns","join","Component","mapStateToProps","duration","ExperimentListPage"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as FilterHelper from '../../../../components/FilterList/FilterHelper';\nimport { RenderContent } from '../../../../components/Nav/Page';\nimport * as ExpListFilters from './FiltersAndSorts';\nimport { style } from 'typestyle';\nimport * as FilterComponent from '../../../../components/FilterList/FilterComponent';\nimport { Iter8Experiment, Iter8Info, Winner } from '../../../../types/Iter8';\nimport Namespace from '../../../../types/Namespace';\nimport {\n  cellWidth,\n  IRow,\n  ISortBy,\n  sortable,\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader\n} from '@patternfly/react-table';\nimport { PromisesRegistry } from '../../../../utils/CancelablePromises';\nimport * as API from '../../../../services/Api';\nimport * as AlertUtils from '../../../../utils/AlertUtils';\nimport * as Iter8ExperimentListFilters from './FiltersAndSorts';\nimport { FilterSelected, StatefulFilters } from '../../../../components/Filters/StatefulFilters';\nimport { namespaceEquals } from '../../../../utils/Common';\nimport history from '../../../../app/History';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PopoverPosition,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  Tooltip,\n  TooltipPosition\n} from '@patternfly/react-core';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { KialiIcon } from '../../../../config/KialiIcon';\nimport { OkIcon, PowerOffIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport { KialiAppState } from '../../../../store/Store';\nimport { activeNamespacesSelector, durationSelector } from '../../../../store/Selectors';\nimport { connect } from 'react-redux';\nimport DefaultSecondaryMasthead from '../../../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\nimport RefreshContainer from '../../../../components/Refresh/Refresh';\nimport { PFBadges, PFBadge } from 'components/Pf/PfBadges';\n\n// Style constants\nconst containerPadding = style({ padding: '20px 20px 20px 20px' });\nconst greenIconStyle = style({\n  fontSize: '1.0em',\n  color: 'green'\n});\nconst redIconStyle = style({\n  fontSize: '1.0em',\n  color: 'red'\n});\nconst statusIconStyle = style({\n  fontSize: '1.0em'\n});\n\ninterface Props extends FilterComponent.Props<Iter8Experiment> {\n  activeNamespaces: Namespace[];\n}\n\n// State of the component/page\n// It stores the visual state of the components and the experiments fetched from the backend.\ninterface State extends FilterComponent.State<Iter8Experiment> {\n  iter8Info: Iter8Info;\n  experimentLists: Iter8Experiment[];\n  sortBy: ISortBy;\n  dropdownOpen: boolean;\n  onFilterChange: boolean;\n}\n\nconst columns = [\n  {\n    title: '实验名称',\n    transforms: [sortable]\n  },\n  {\n    title: 'Namespace',\n    transforms: [sortable]\n  },\n  {\n    title: 'Service',\n    transforms: [sortable]\n  },\n  {\n    title: 'Phase',\n    transforms: [sortable, cellWidth(5) as any]\n  },\n  {\n    title: 'Baseline',\n    transforms: [sortable]\n  },\n  {\n    title: 'Candidate',\n    transforms: [sortable]\n  }\n];\n\nclass ExperimentListPageComponent extends React.Component<Props, State> {\n  private promises = new PromisesRegistry();\n\n  constructor(props: Props) {\n    super(props);\n    const prevCurrentSortField = FilterHelper.currentSortField(ExpListFilters.sortFields);\n    const prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n    this.state = {\n      iter8Info: {\n        enabled: false,\n        supportedVersion: false,\n        controllerImgVersion: '',\n        analyticsImgVersion: '',\n        namespace: 'iter8'\n      },\n      experimentLists: [],\n      sortBy: {},\n      dropdownOpen: false,\n      listItems: [],\n      currentSortField: prevCurrentSortField,\n      isSortAscending: prevIsSortAscending,\n      onFilterChange: false\n    };\n  }\n\n  fetchExperiments = (namespaces: string[]) => {\n    API.getIter8Info()\n      .then(result => {\n        const iter8Info = result.data;\n        if (iter8Info.enabled) {\n          if (!iter8Info.supportedVersion) {\n            if (iter8Info.analyticsImgVersion !== '' && iter8Info.analyticsImgVersion.startsWith('2')) {\n              AlertUtils.addError(\n                'Iter8 v' +\n                  iter8Info.analyticsImgVersion +\n                  ' is not supported, please use the supported version (v1.x).'\n              );\n              return;\n            }\n            AlertUtils.addError(\n              'You are running an unsupported Iter8 version, please upgrade to supported version  (v0.2+) to take advantage of the full features of Iter8 .'\n            );\n            return;\n          }\n          if (namespaces.length > 0) {\n            API.getExperiments(namespaces)\n              .then(result => {\n                this.setState(prevState => {\n                  return {\n                    iter8Info: iter8Info,\n                    experimentLists: Iter8ExperimentListFilters.filterBy(result.data, FilterSelected.getSelected()),\n                    sortBy: prevState.sortBy\n                  };\n                });\n              })\n              .catch(error => {\n                AlertUtils.addError('Could not fetch Iter8 Experiments.', error);\n              });\n          }\n        } else {\n          AlertUtils.addError(\n            'Kiali has Iter8 extension enabled but it is not detected in the cluster under namespace ' +\n              iter8Info.namespace\n          );\n        }\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch Iter8 Info.', error);\n      });\n  };\n\n  // It invokes backend when component is mounted\n  componentDidMount() {\n    this.updateListItems();\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State, _snapshot: any) {\n    const [paramsSynced] = this.paramsAreSynced(prevProps);\n    if (!paramsSynced) {\n      this.setState({\n        currentSortField: this.props.currentSortField,\n        isSortAscending: this.props.isSortAscending\n      });\n\n      this.updateListItems();\n    }\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  paramsAreSynced = (prevProps: Props): [boolean, boolean] => {\n    const activeNamespacesCompare = namespaceEquals(prevProps.activeNamespaces, this.props.activeNamespaces);\n    const paramsSynced = activeNamespacesCompare;\n    return [paramsSynced, activeNamespacesCompare];\n  };\n\n  // Helper used for Table to sort handlers based on index column == field\n  onSort = (_event, index, direction) => {\n    const experimentList = this.state.experimentLists.sort((a, b) => {\n      switch (index) {\n        case 0:\n          return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n        case 1:\n          return a.namespace < b.namespace ? -1 : a.namespace > b.namespace ? 1 : 0;\n        case 2:\n          return a.phase < b.phase ? -1 : a.phase > b.phase ? 1 : 0;\n        case 3:\n          return a.status < b.status ? -1 : a.status > b.status ? 1 : 0;\n        case 4:\n          return a.baseline < b.baseline ? -1 : a.baseline > b.baseline ? 1 : 0;\n      }\n      return 0;\n    });\n    this.setState({\n      experimentLists: direction === SortByDirection.asc ? experimentList : experimentList.reverse(),\n      sortBy: {\n        index,\n        direction\n      }\n    });\n  };\n\n  updateListItems = () => {\n    this.promises.cancelAll();\n    const namespacesSelected = this.props.activeNamespaces.map(item => item.name);\n    if (namespacesSelected.length !== 0) {\n      this.fetchExperiments(namespacesSelected);\n    } else {\n      this.setState({ experimentLists: [] });\n    }\n  };\n\n  // Invoke the history object to update and URL and start a routing\n  goNewExperimentPage = () => {\n    history.push('/extensions/iter8/new');\n  };\n\n  goNewExperimentFromFile = () => {\n    history.push('/extensions/iter8/newfromfile');\n  };\n\n  // It contains a create new experiment action.\n  actionsToolbar = () => {\n    return (\n      <Dropdown\n        id=\"actions\"\n        title=\"Actions\"\n        toggle={<DropdownToggle onToggle={toggle => this.setState({ dropdownOpen: toggle })}>Actions</DropdownToggle>}\n        onSelect={() => this.setState({ dropdownOpen: !this.state.dropdownOpen })}\n        position={DropdownPosition.right}\n        isOpen={this.state.dropdownOpen}\n        dropdownItems={[\n          <DropdownItem\n            key=\"createExperiment\"\n            isDisabled={!this.state.iter8Info.enabled}\n            onClick={() => this.goNewExperimentPage()}\n          >\n            Create New Experiment\n          </DropdownItem>,\n          <DropdownItem\n            key=\"createExperimentFromFile\"\n            isDisabled={!this.state.iter8Info.enabled}\n            onClick={() => this.goNewExperimentFromFile()}\n          >\n            Create New Experiment from YAML\n          </DropdownItem>\n        ]}\n      />\n    );\n  };\n\n  onFilterChange = () => {\n    // Resetting pagination when filters change\n    this.updateListItems();\n  };\n\n  toolbar = () => {\n    return (\n      <StatefulFilters\n        initialFilters={Iter8ExperimentListFilters.availableFilters}\n        onFilterChange={this.onFilterChange}\n      />\n    );\n  };\n\n  getStatusTooltip = (\n    phase: string,\n    status: string,\n    winnerFound: boolean,\n    winnerName: string,\n    baselineName: string\n  ) => {\n    let statusValue = 'Status: In Progress';\n    let retStatus = status;\n    if (status.length > 0) {\n      const values = status.split(':');\n      if (values.length > 1) {\n        retStatus = values.slice(1)[0];\n      }\n      if (status.includes('Failed')) {\n        statusValue = 'Status: Failed';\n      } else if (status.includes('Completed')) {\n        statusValue = 'Status: Completed';\n        if (winnerName === baselineName) {\n          retStatus = 'Traffic to Baseline';\n        }\n      }\n    }\n    return (\n      <TextContent style={{ color: PFColors.White }}>\n        <Text>\n          <h2>Phase: </h2> {phase}\n        </Text>\n        <Text>\n          <h2>{statusValue}</h2> {retStatus}\n        </Text>\n        <Text>\n          <h2>Winner Found: {winnerFound ? winnerName : 'False'}</h2>\n          <Text component={TextVariants.p}>(Winning version as identified by iter8 analytics)</Text>\n        </Text>\n      </TextContent>\n    );\n  };\n\n  experimentStatusIcon = (key: string, phase: string, winnerStatus: Winner, status: string, baselineName: string) => {\n    let className = greenIconStyle;\n    let toBaseline = false;\n    let statusString = this.getStatusTooltip(\n      phase,\n      status,\n      winnerStatus.winning_version_found,\n      winnerStatus.name,\n      baselineName\n    );\n    if (status.includes('Abort')) {\n      className = greenIconStyle;\n    } else if (!winnerStatus.winning_version_found) {\n      className = redIconStyle;\n    }\n\n    if (winnerStatus.name === baselineName) {\n      toBaseline = true;\n      className = redIconStyle;\n    }\n    switch (phase) {\n      case 'Initializing':\n        return (\n          <Tooltip\n            key={'Initializing_' + key}\n            aria-label={'Status indicator'}\n            position={PopoverPosition.auto}\n            className={'health_indicator'}\n            content={<>{statusString}</>}\n          >\n            <KialiIcon.InProgressIcon className={statusIconStyle} />\n          </Tooltip>\n        );\n      case 'Progressing':\n        return (\n          <Tooltip\n            key={'Progressing_' + key}\n            aria-label={'Status indicator'}\n            position={PopoverPosition.auto}\n            className={'health_indicator'}\n            content={<>{statusString}</>}\n          >\n            <KialiIcon.OnRunningIcon className={statusIconStyle} />\n          </Tooltip>\n        );\n      case 'Pause':\n        return (\n          <Tooltip\n            key={'Pause_' + key}\n            aria-label={'Status indicator'}\n            position={PopoverPosition.auto}\n            className={'health_indicator'}\n            content={<>{statusString}</>}\n          >\n            <KialiIcon.PauseCircle className={statusIconStyle} />\n          </Tooltip>\n        );\n      case 'Completed':\n        if (status.includes('Abort')) {\n          return (\n            <Tooltip\n              key={'Completed_' + key}\n              aria-label={'Status indicator'}\n              position={PopoverPosition.auto}\n              className={'health_indicator'}\n              content={<>{statusString}</>}\n            >\n              <PowerOffIcon className={className} />\n            </Tooltip>\n          );\n        } else if (toBaseline) {\n          return (\n            <Tooltip\n              key={'Completed_' + key}\n              aria-label={'Status indicator'}\n              position={PopoverPosition.auto}\n              className={'health_indicator'}\n              content={<>{statusString}</>}\n            >\n              <OkIcon className={className} />\n            </Tooltip>\n          );\n        }\n        return (\n          <Tooltip\n            key={'Completed_' + key}\n            aria-label={'Status indicator'}\n            position={PopoverPosition.auto}\n            className={'health_indicator'}\n            content={<>{statusString}</>}\n          >\n            <OkIcon className={className} />\n          </Tooltip>\n        );\n      default:\n        return (\n          <Tooltip\n            key={'default_' + key}\n            aria-label={'Status indicator'}\n            position={PopoverPosition.auto}\n            className={'health_indicator'}\n            content={<>{statusString}</>}\n          >\n            <KialiIcon.OnRunningIcon className={statusIconStyle} />\n          </Tooltip>\n        );\n    }\n  };\n\n  redirectLink(namespace: string, name: string, kind: string) {\n    if (kind === 'Deployment') {\n      let linkTo = '/namespaces/' + namespace + '/workloads/' + name;\n      return (\n        <>\n          <PFBadge badge={{ badge: 'W' }} />\n          <Link to={linkTo}>{name}</Link>\n        </>\n      );\n    } else {\n      if (name !== '') {\n        let linkTo = '/namespaces/' + namespace + '/services/' + name;\n        return (\n          <>\n            <PFBadge badge={{ badge: 'S' }} />\n            <Link to={linkTo}>{name}</Link>\n          </>\n        );\n      } else {\n        return 'N/A';\n      }\n    }\n  }\n\n  // Helper used to build the table content.\n  rows = (): IRow[] => {\n    return this.state.experimentLists.map(h => {\n      let candidates: string[] = [];\n      for (const c of h.candidates) {\n        candidates.push(c.name);\n      }\n\n      return {\n        cells: [\n          <>\n            <PFBadge\n              key={`TooltipExtensionIter8Name_${h.name}`}\n              badge={PFBadges.Iter8}\n              position={TooltipPosition.top}\n            />\n            <PFBadge badge={{ badge: h.experimentKind }} />\n            <Link\n              to={`/extensions/namespaces/${h.namespace}/iter8/${h.name}?target=${h.targetService}&startTime=${h.startTime}&endTime=${h.endTime}&baseline=${h.baseline.name}&candidates=${candidates}`}\n              key={'Experiment_' + h.namespace + '_' + h.namespace}\n            >\n              {h.name}\n            </Link>\n          </>,\n          <>\n            <PFBadge\n              key={`TooltipExtensionNamespace_${h.namespace}`}\n              badge={PFBadges.Namespace}\n              position={TooltipPosition.top}\n            />\n            {h.namespace}\n          </>,\n          <>\n            {h.kind === 'Deployment'\n              ? this.redirectLink(h.namespace, h.targetService, 'Service')\n              : this.redirectLink(h.namespace, '', h.kind)}\n          </>,\n          <>{this.experimentStatusIcon(h.name + '_' + h.namespace, h.phase, h.winner, h.status, h.baseline.name)}</>,\n\n          <>\n            {this.redirectLink(h.namespace, h.baseline.name, h.kind)}\n            <br /> {h.baseline.weight}%\n          </>,\n          <>\n            {h.candidates.map(can => {\n              return (\n                <>\n                  {this.redirectLink(h.namespace, can.name, h.kind)}\n                  &nbsp;{can.weight}% <br />\n                </>\n              );\n            })}\n          </>\n        ]\n      };\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div style={{ backgroundColor: '#fff' }}>\n          <DefaultSecondaryMasthead\n            rightToolbar={\n              <RefreshContainer\n                id=\"exp_list_refresh\"\n                disabled={false}\n                hideLabel={true}\n                handleRefresh={this.updateListItems}\n                manageURL={true}\n              />\n            }\n            actionsToolbar={this.actionsToolbar()}\n          />\n        </div>\n        <RenderContent>\n          <div className={containerPadding}>\n            {this.toolbar()}\n            <Table\n              aria-label=\"Sortable Table\"\n              sortBy={this.state.sortBy}\n              cells={columns}\n              rows={this.rows()}\n              onSort={this.onSort}\n            >\n              <TableHeader />\n              {this.state.experimentLists.length > 0 ? (\n                <TableBody />\n              ) : (\n                <tr>\n                  <td colSpan={columns.length}>\n                    {this.props.activeNamespaces.length > 0 ? (\n                      <EmptyState variant={EmptyStateVariant.full}>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                          No Iter8 Experiments found\n                        </Title>\n                        <EmptyStateBody>\n                          No Iter8 Experiments in namespace\n                          {this.props.activeNamespaces.length === 1\n                            ? ` ${this.props.activeNamespaces[0].name}`\n                            : `s: ${this.props.activeNamespaces.map(ns => ns.name).join(', ')}`}\n                        </EmptyStateBody>\n                      </EmptyState>\n                    ) : (\n                      <EmptyState variant={EmptyStateVariant.full}>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                          No namespace is selected\n                        </Title>\n                        <EmptyStateBody>\n                          There is currently no namespace selected, please select one using the Namespace selector.\n                        </EmptyStateBody>\n                      </EmptyState>\n                    )}\n                  </td>\n                </tr>\n              )}\n            </Table>\n          </div>\n        </RenderContent>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  activeNamespaces: activeNamespacesSelector(state),\n  duration: durationSelector(state)\n});\n\nconst ExperimentListPage = connect(mapStateToProps)(ExperimentListPageComponent);\nexport default ExperimentListPage;\n"]},"metadata":{},"sourceType":"module"}
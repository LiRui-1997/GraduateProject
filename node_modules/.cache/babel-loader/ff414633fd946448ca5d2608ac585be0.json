{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/IstioConfigList/IstioConfigListPage.tsx\";\nimport * as React from 'react';\nimport * as FilterHelper from '../../components/FilterList/FilterHelper';\nimport { RenderContent } from '../../components/Nav/Page';\nimport * as IstioConfigListFilters from './FiltersAndSorts';\nimport * as FilterComponent from '../../components/FilterList/FilterComponent';\nimport { dicIstioType, filterByConfigValidation, filterByName, toIstioItems } from '../../types/IstioConfigList';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { namespaceEquals } from '../../utils/Common';\nimport { FilterSelected, StatefulFilters } from '../../components/Filters/StatefulFilters';\nimport { getFilterSelectedValues } from '../../components/Filters/CommonFilters';\nimport * as API from '../../services/Api';\nimport { showInMessageCenter } from '../../utils/IstioValidationUtils';\nimport VirtualList from '../../components/VirtualList/VirtualList';\nimport { activeNamespacesSelector } from '../../store/Selectors';\nimport { connect } from 'react-redux';\n\nvar IstioConfigListPageComponent = /*#__PURE__*/function (_FilterComponent$Comp) {\n  _inherits(IstioConfigListPageComponent, _FilterComponent$Comp);\n\n  var _super = _createSuper(IstioConfigListPageComponent);\n\n  function IstioConfigListPageComponent(props) {\n    var _this;\n\n    _classCallCheck(this, IstioConfigListPageComponent);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n    var prevCurrentSortField = FilterHelper.currentSortField(IstioConfigListFilters.sortFields);\n    var prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n    _this.state = {\n      listItems: [],\n      currentSortField: prevCurrentSortField,\n      isSortAscending: prevIsSortAscending\n    };\n    return _this;\n  }\n\n  _createClass(IstioConfigListPageComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateListItems();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState, _snapshot) {\n      var prevCurrentSortField = FilterHelper.currentSortField(IstioConfigListFilters.sortFields);\n      var prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n\n      if (!namespaceEquals(this.props.activeNamespaces, prevProps.activeNamespaces) || this.state.currentSortField !== prevCurrentSortField || this.state.isSortAscending !== prevIsSortAscending) {\n        this.setState({\n          currentSortField: prevCurrentSortField,\n          isSortAscending: prevIsSortAscending\n        });\n        this.updateListItems();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"sortItemList\",\n    value: function sortItemList(apps, sortField, isAscending) {\n      return IstioConfigListFilters.sortIstioItems(apps, sortField, isAscending);\n    }\n  }, {\n    key: \"updateListItems\",\n    value: function updateListItems() {\n      this.promises.cancelAll();\n      var activeFilters = FilterSelected.getSelected();\n      var namespacesSelected = this.props.activeNamespaces.map(function (item) {\n        return item.name;\n      });\n      var istioTypeFilters = getFilterSelectedValues(IstioConfigListFilters.istioTypeFilter, activeFilters).map(function (value) {\n        return dicIstioType[value];\n      });\n      var istioNameFilters = getFilterSelectedValues(IstioConfigListFilters.istioNameFilter, activeFilters);\n      var configValidationFilters = getFilterSelectedValues(IstioConfigListFilters.configValidationFilter, activeFilters);\n\n      if (namespacesSelected.length !== 0) {\n        this.fetchConfigs(namespacesSelected, istioTypeFilters, istioNameFilters, configValidationFilters);\n      } else {\n        this.setState({\n          listItems: []\n        });\n      }\n    }\n  }, {\n    key: \"fetchConfigs\",\n    value: function fetchConfigs(namespaces, istioTypeFilters, istioNameFilters, configValidationFilters) {\n      var _this2 = this;\n\n      var configsPromises = this.fetchIstioConfigs(namespaces, istioTypeFilters, istioNameFilters);\n      configsPromises.then(function (items) {\n        return items.map(function (item) {\n          return item.validation;\n        }).filter(function (validation) {\n          return validation !== undefined;\n        });\n      }).then(function (validations) {\n        return showInMessageCenter(validations);\n      });\n      configsPromises.then(function (items) {\n        return IstioConfigListFilters.sortIstioItems(items, _this2.state.currentSortField, _this2.state.isSortAscending);\n      }).then(function (configItems) {\n        return filterByConfigValidation(configItems, configValidationFilters);\n      }).then(function (sorted) {\n        // Update the view when data is fetched\n        _this2.setState({\n          listItems: sorted\n        });\n      }).catch(function (istioError) {\n        console.log(istioError);\n\n        if (!istioError.isCanceled) {\n          _this2.handleAxiosError('Could not fetch Istio objects list', istioError);\n        }\n      });\n    } // Fetch the Istio configs, apply filters and map them into flattened list items\n\n  }, {\n    key: \"fetchIstioConfigs\",\n    value: function fetchIstioConfigs(namespaces, typeFilters, istioNameFilters) {\n      return this.promises.registerAll('configs', namespaces.map(function (ns) {\n        return API.getIstioConfig(ns, typeFilters, true, '', '');\n      })).then(function (responses) {\n        var istioItems = [];\n        responses.forEach(function (response) {\n          istioItems = istioItems.concat(toIstioItems(filterByName(response.data, istioNameFilters)));\n        });\n        return istioItems;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VirtualList, {\n        rows: this.state.listItems,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(StatefulFilters, {\n        initialFilters: IstioConfigListFilters.availableFilters,\n        onFilterChange: this.onFilterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return IstioConfigListPageComponent;\n}(FilterComponent.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    activeNamespaces: activeNamespacesSelector(state)\n  };\n};\n\nvar IstioConfigListPage = connect(mapStateToProps, null)(IstioConfigListPageComponent);\nexport default IstioConfigListPage;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/IstioConfigList/IstioConfigListPage.tsx"],"names":["React","FilterHelper","RenderContent","IstioConfigListFilters","FilterComponent","dicIstioType","filterByConfigValidation","filterByName","toIstioItems","PromisesRegistry","namespaceEquals","FilterSelected","StatefulFilters","getFilterSelectedValues","API","showInMessageCenter","VirtualList","activeNamespacesSelector","connect","IstioConfigListPageComponent","props","promises","prevCurrentSortField","currentSortField","sortFields","prevIsSortAscending","isCurrentSortAscending","state","listItems","isSortAscending","updateListItems","prevProps","_prevState","_snapshot","activeNamespaces","setState","cancelAll","apps","sortField","isAscending","sortIstioItems","activeFilters","getSelected","namespacesSelected","map","item","name","istioTypeFilters","istioTypeFilter","value","istioNameFilters","istioNameFilter","configValidationFilters","configValidationFilter","length","fetchConfigs","namespaces","configsPromises","fetchIstioConfigs","then","items","validation","filter","undefined","validations","configItems","sorted","catch","istioError","console","log","isCanceled","handleAxiosError","typeFilters","registerAll","ns","getIstioConfig","responses","istioItems","forEach","response","concat","data","availableFilters","onFilterChange","Component","mapStateToProps","IstioConfigListPage"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as FilterHelper from '../../components/FilterList/FilterHelper';\nimport { RenderContent } from '../../components/Nav/Page';\nimport * as IstioConfigListFilters from './FiltersAndSorts';\nimport * as FilterComponent from '../../components/FilterList/FilterComponent';\nimport {\n  dicIstioType,\n  filterByConfigValidation,\n  filterByName,\n  IstioConfigItem,\n  toIstioItems\n} from '../../types/IstioConfigList';\nimport Namespace from '../../types/Namespace';\nimport { PromisesRegistry } from '../../utils/CancelablePromises';\nimport { namespaceEquals } from '../../utils/Common';\nimport { SortField } from '../../types/SortFilters';\nimport { ActiveFiltersInfo } from '../../types/Filters';\nimport { FilterSelected, StatefulFilters } from '../../components/Filters/StatefulFilters';\nimport { getFilterSelectedValues } from '../../components/Filters/CommonFilters';\nimport * as API from '../../services/Api';\nimport { ObjectValidation } from '../../types/IstioObjects';\nimport { showInMessageCenter } from '../../utils/IstioValidationUtils';\nimport VirtualList from '../../components/VirtualList/VirtualList';\nimport RefreshButtonContainer from '../../components/Refresh/RefreshButton';\nimport IstioActionsNamespaceDropdown from '../../components/IstioActions/IstioActionsNamespaceDropdown';\nimport { KialiAppState } from '../../store/Store';\nimport { activeNamespacesSelector } from '../../store/Selectors';\nimport { connect } from 'react-redux';\nimport DefaultSecondaryMasthead from '../../components/DefaultSecondaryMasthead/DefaultSecondaryMasthead';\n\ninterface IstioConfigListPageState extends FilterComponent.State<IstioConfigItem> {}\ninterface IstioConfigListPageProps extends FilterComponent.Props<IstioConfigItem> {\n  activeNamespaces: Namespace[];\n}\n\nclass IstioConfigListPageComponent extends FilterComponent.Component<\n  IstioConfigListPageProps,\n  IstioConfigListPageState,\n  IstioConfigItem\n> {\n  private promises = new PromisesRegistry();\n\n  constructor(props: IstioConfigListPageProps) {\n    super(props);\n    const prevCurrentSortField = FilterHelper.currentSortField(IstioConfigListFilters.sortFields);\n    const prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n\n    this.state = {\n      listItems: [],\n      currentSortField: prevCurrentSortField,\n      isSortAscending: prevIsSortAscending\n    };\n  }\n\n  componentDidMount() {\n    this.updateListItems();\n  }\n\n  componentDidUpdate(prevProps: IstioConfigListPageProps, _prevState: IstioConfigListPageState, _snapshot: any) {\n    const prevCurrentSortField = FilterHelper.currentSortField(IstioConfigListFilters.sortFields);\n    const prevIsSortAscending = FilterHelper.isCurrentSortAscending();\n    if (\n      !namespaceEquals(this.props.activeNamespaces, prevProps.activeNamespaces) ||\n      this.state.currentSortField !== prevCurrentSortField ||\n      this.state.isSortAscending !== prevIsSortAscending\n    ) {\n      this.setState({\n        currentSortField: prevCurrentSortField,\n        isSortAscending: prevIsSortAscending\n      });\n\n      this.updateListItems();\n    }\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  sortItemList(apps: IstioConfigItem[], sortField: SortField<IstioConfigItem>, isAscending: boolean) {\n    return IstioConfigListFilters.sortIstioItems(apps, sortField, isAscending);\n  }\n\n  updateListItems() {\n    this.promises.cancelAll();\n\n    const activeFilters: ActiveFiltersInfo = FilterSelected.getSelected();\n    const namespacesSelected = this.props.activeNamespaces!.map(item => item.name);\n    const istioTypeFilters = getFilterSelectedValues(IstioConfigListFilters.istioTypeFilter, activeFilters).map(\n      value => dicIstioType[value]\n    );\n    const istioNameFilters = getFilterSelectedValues(IstioConfigListFilters.istioNameFilter, activeFilters);\n    const configValidationFilters = getFilterSelectedValues(\n      IstioConfigListFilters.configValidationFilter,\n      activeFilters\n    );\n\n    if (namespacesSelected.length !== 0) {\n      this.fetchConfigs(namespacesSelected, istioTypeFilters, istioNameFilters, configValidationFilters);\n    } else {\n      this.setState({ listItems: [] });\n    }\n  }\n\n  fetchConfigs(\n    namespaces: string[],\n    istioTypeFilters: string[],\n    istioNameFilters: string[],\n    configValidationFilters: string[]\n  ) {\n    const configsPromises = this.fetchIstioConfigs(namespaces, istioTypeFilters, istioNameFilters);\n\n    configsPromises\n      .then(items =>\n        items\n          .map(item => item.validation)\n          .filter((validation): validation is ObjectValidation => validation !== undefined)\n      )\n      .then(validations => showInMessageCenter(validations));\n\n    configsPromises\n      .then(items =>\n        IstioConfigListFilters.sortIstioItems(items, this.state.currentSortField, this.state.isSortAscending)\n      )\n      .then(configItems => filterByConfigValidation(configItems, configValidationFilters))\n      .then(sorted => {\n        // Update the view when data is fetched\n        this.setState({\n          listItems: sorted\n        });\n      })\n      .catch(istioError => {\n        console.log(istioError);\n        if (!istioError.isCanceled) {\n          this.handleAxiosError('Could not fetch Istio objects list', istioError);\n        }\n      });\n  }\n\n  // Fetch the Istio configs, apply filters and map them into flattened list items\n  fetchIstioConfigs(namespaces: string[], typeFilters: string[], istioNameFilters: string[]) {\n    return this.promises\n      .registerAll(\n        'configs',\n        namespaces.map(ns => API.getIstioConfig(ns, typeFilters, true, '', ''))\n      )\n      .then(responses => {\n        let istioItems: IstioConfigItem[] = [];\n        responses.forEach(response => {\n          istioItems = istioItems.concat(toIstioItems(filterByName(response.data, istioNameFilters)));\n        });\n        return istioItems;\n      });\n  }\n\n  render() {\n    return (\n      <>\n        {/* <div style={{ backgroundColor: '#fff' }}>\n          <DefaultSecondaryMasthead\n            rightToolbar={<RefreshButtonContainer key={'Refresh'} handleRefresh={this.updateListItems} />}\n            actionsToolbar={<IstioActionsNamespaceDropdown />}\n          />\n        </div> */}\n        <RenderContent>\n          <VirtualList rows={this.state.listItems}>\n            <StatefulFilters\n              initialFilters={IstioConfigListFilters.availableFilters}\n              onFilterChange={this.onFilterChange}\n            />\n          </VirtualList>\n        </RenderContent>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  activeNamespaces: activeNamespacesSelector(state)\n});\n\nconst IstioConfigListPage = connect(mapStateToProps, null)(IstioConfigListPageComponent);\nexport default IstioConfigListPage;\n"]},"metadata":{},"sourceType":"module"}
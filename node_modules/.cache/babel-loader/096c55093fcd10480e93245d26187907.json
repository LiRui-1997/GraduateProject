{"ast":null,"code":"import _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { getPrimaryDotMeasureData, getComparativeErrorMeasureData, getComparativeWarningMeasureData, getPrimarySegmentedMeasureData, getQualitativeRangeData } from './chart-bullet-data';\nimport { getBulletTheme } from '../../ChartUtils';\n\nvar getLegendColorScale = function getLegendColorScale(computedData, legendData) {\n  var colorScale = [];\n  legendData.forEach(function (data, index) {\n    var _iterator = _createForOfIteratorHelper(computedData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n\n        if (index === i._index) {\n          colorScale.push(i._color);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  });\n  return colorScale;\n};\n\nexport var getColorScale = function getColorScale(_ref) {\n  var comparativeErrorMeasureData = _ref.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref.comparativeWarningMeasureLegendData,\n      invert = _ref.invert,\n      primaryDotMeasureData = _ref.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref.qualitativeRangeLegendData,\n      themeColor = _ref.themeColor,\n      themeVariant = _ref.themeVariant;\n  var colorScale = [];\n\n  if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n    var computedData = getPrimaryDotMeasureData({\n      data: primaryDotMeasureData,\n      invert: invert\n    });\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(computedData, primaryDotMeasureLegendData)));\n  }\n\n  if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n    var _computedData = getPrimarySegmentedMeasureData({\n      data: primarySegmentedMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData, primarySegmentedMeasureLegendData)));\n  }\n\n  if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n    var _computedData2 = getComparativeWarningMeasureData({\n      data: comparativeWarningMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData2, comparativeWarningMeasureLegendData)));\n  }\n\n  if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n    var _computedData3 = getComparativeErrorMeasureData({\n      data: comparativeErrorMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData3, comparativeErrorMeasureLegendData)));\n  }\n\n  if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n    var _computedData4 = getQualitativeRangeData({\n      data: qualitativeRangeData,\n      invert: invert\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData4, qualitativeRangeLegendData)));\n  }\n\n  return colorScale;\n}; // Get bullet chart theme with legend color scale\n\nexport var getBulletThemeWithLegendColorScale = function getBulletThemeWithLegendColorScale(_ref2) {\n  var comparativeErrorMeasureData = _ref2.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref2.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref2.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref2.comparativeWarningMeasureLegendData,\n      invert = _ref2.invert,\n      primaryDotMeasureData = _ref2.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref2.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref2.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref2.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref2.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref2.qualitativeRangeLegendData,\n      themeColor = _ref2.themeColor,\n      themeVariant = _ref2.themeVariant;\n  var colorScale = getColorScale({\n    comparativeErrorMeasureData: comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData: comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData: comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData: comparativeWarningMeasureLegendData,\n    invert: invert,\n    primaryDotMeasureData: primaryDotMeasureData,\n    primaryDotMeasureLegendData: primaryDotMeasureLegendData,\n    primarySegmentedMeasureData: primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData: primarySegmentedMeasureLegendData,\n    qualitativeRangeData: qualitativeRangeData,\n    qualitativeRangeLegendData: qualitativeRangeLegendData,\n    themeColor: themeColor,\n    themeVariant: themeVariant\n  });\n  var theme = getBulletTheme(themeColor, themeVariant);\n  theme.legend.colorScale = _toConsumableArray(colorScale);\n  return theme;\n};","map":{"version":3,"sources":["/root/kiali-ui/node_modules/@patternfly/react-charts/dist/esm/components/ChartBullet/utils/chart-bullet-theme.js"],"names":["getPrimaryDotMeasureData","getComparativeErrorMeasureData","getComparativeWarningMeasureData","getPrimarySegmentedMeasureData","getQualitativeRangeData","getBulletTheme","getLegendColorScale","computedData","legendData","colorScale","forEach","data","index","i","_index","push","_color","getColorScale","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","comparativeWarningMeasureData","comparativeWarningMeasureLegendData","invert","primaryDotMeasureData","primaryDotMeasureLegendData","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","themeColor","themeVariant","length","getBulletThemeWithLegendColorScale","theme","legend"],"mappings":"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","sourcesContent":["import { getPrimaryDotMeasureData, getComparativeErrorMeasureData, getComparativeWarningMeasureData, getPrimarySegmentedMeasureData, getQualitativeRangeData } from './chart-bullet-data';\nimport { getBulletTheme } from '../../ChartUtils';\n\nconst getLegendColorScale = (computedData, legendData) => {\n  const colorScale = [];\n  legendData.forEach((data, index) => {\n    for (const i of computedData) {\n      if (index === i._index) {\n        colorScale.push(i._color);\n      }\n    }\n  });\n  return colorScale;\n};\n\nexport const getColorScale = ({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor,\n  themeVariant\n}) => {\n  const colorScale = [];\n\n  if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n    const computedData = getPrimaryDotMeasureData({\n      data: primaryDotMeasureData,\n      invert\n    });\n    colorScale.push(...getLegendColorScale(computedData, primaryDotMeasureLegendData));\n  }\n\n  if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n    const computedData = getPrimarySegmentedMeasureData({\n      data: primarySegmentedMeasureData,\n      invert,\n      themeColor,\n      themeVariant\n    });\n    colorScale.push(...getLegendColorScale(computedData, primarySegmentedMeasureLegendData));\n  }\n\n  if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n    const computedData = getComparativeWarningMeasureData({\n      data: comparativeWarningMeasureData,\n      invert,\n      themeColor,\n      themeVariant\n    });\n    colorScale.push(...getLegendColorScale(computedData, comparativeWarningMeasureLegendData));\n  }\n\n  if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n    const computedData = getComparativeErrorMeasureData({\n      data: comparativeErrorMeasureData,\n      invert,\n      themeColor,\n      themeVariant\n    });\n    colorScale.push(...getLegendColorScale(computedData, comparativeErrorMeasureLegendData));\n  }\n\n  if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n    const computedData = getQualitativeRangeData({\n      data: qualitativeRangeData,\n      invert\n    });\n    colorScale.push(...getLegendColorScale(computedData, qualitativeRangeLegendData));\n  }\n\n  return colorScale;\n}; // Get bullet chart theme with legend color scale\n\nexport const getBulletThemeWithLegendColorScale = ({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor,\n  themeVariant\n}) => {\n  const colorScale = getColorScale({\n    comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData,\n    invert,\n    primaryDotMeasureData,\n    primaryDotMeasureLegendData,\n    primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData,\n    qualitativeRangeData,\n    qualitativeRangeLegendData,\n    themeColor,\n    themeVariant\n  });\n  const theme = getBulletTheme(themeColor, themeVariant);\n  theme.legend.colorScale = [...colorScale];\n  return theme;\n};\n//# sourceMappingURL=chart-bullet-theme.js.map"]},"metadata":{},"sourceType":"module"}
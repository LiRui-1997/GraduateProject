{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentTrafficForm.tsx\";\nimport { initCriteria } from '../../../../types/Iter8';\nimport * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport Matches from './../../../../components/IstioWizards/RequestRouting/Matches';\nimport ExperimentMatchBuilder, { ANYTHING, EXACT, HEADERS, PRESENCE, REGEX, URI } from './ExperimentMatchBuilder';\nimport { style } from 'typestyle';\nimport { PFColors } from './../../../../components/Pf/PfColors';\nimport ExperimentRules from './ExperimentRules';\nimport { OnRemoveFromListOptions } from './ExperimentCreatePage';\nvar MSG_SAME_MATCHING = 'A Rule with same matching criteria is already added.';\nvar MSG_HEADER_NAME_NON_EMPTY = 'Header name must be non empty';\nvar MSG_HEADER_VALUE_NON_EMPTY = 'Header value must be non empty';\nvar addRuleStyle = style({\n  width: '100%',\n  textAlign: 'right'\n});\nvar validationStyle = style({\n  marginRight: 20,\n  color: PFColors.Red100,\n  display: 'inline'\n});\nexport var initMatch = function initMatch() {\n  return {\n    matchStringToHeaderMatch: {},\n    focusElementName: 'Unknown',\n    validName: false,\n    validationMsg: '',\n    // Match state\n    // MatchBuilder props\n    category: URI,\n    operator: EXACT,\n    headerName: '',\n    matchValue: '',\n    isValid: true\n  };\n}; // Create Success Criteria, can be multiple with same metric, but different sampleSize, etc...\n\nvar ExperimentTrafficForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentTrafficForm, _React$Component);\n\n  var _super = _createSuper(ExperimentTrafficForm);\n\n  function ExperimentTrafficForm(props) {\n    var _this;\n\n    _classCallCheck(this, ExperimentTrafficForm);\n\n    _this = _super.call(this, props);\n\n    _this.isMatchesIncluded = function (rules, newRule) {\n      return rules.some(function (rule) {\n        return rule.matches.length === newRule.matches.length && rule.matches.every(function (match) {\n          return newRule.matches.includes(match);\n        });\n      });\n    };\n\n    _this.onHeaderNameChange = function (headerName) {\n      var validationMsg = '';\n\n      if (_this.state.matchValue !== '' && headerName === '') {\n        validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n      }\n\n      if (_this.state.matchValue === '' && headerName !== '' && _this.state.operator !== PRESENCE) {\n        validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n      }\n\n      _this.setState({\n        headerName: headerName,\n        validationMsg: validationMsg\n      });\n    };\n\n    _this.onMatchValueChange = function (matchValue) {\n      var validationMsg = '';\n\n      if (_this.state.category === HEADERS) {\n        if (_this.state.headerName === '' && matchValue !== '') {\n          validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n        }\n\n        if (_this.state.headerName !== '' && matchValue === '') {\n          validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n        }\n      }\n\n      if (matchValue === '') {\n        validationMsg = '';\n      } // Setting match state\n\n\n      _this.setState({\n        matchValue: matchValue,\n        validationMsg: validationMsg\n      });\n    };\n\n    _this.httpMatchesToRules = function (matches) {\n      return matches.map(function (match) {\n        var rule = {\n          matches: [],\n          workloadWeights: []\n        }; // URI and header matches are added separately\n\n        if (match.uri && match.uri.match && match.uri.stringMatch) {\n          rule.matches.push(_this.matchToIstioMatchString(URI, match.uri.match, match.uri.stringMatch));\n        }\n\n        if (match.headers) {\n          match.headers.forEach(function (header) {\n            rule.matches.push(_this.matchToIstioMatchString(HEADERS, header.match, header.stringMatch, header.key));\n          });\n        }\n\n        return rule;\n      });\n    };\n\n    _this.matchToIstioMatchString = function (matchOption, operator, stringMatch, headerName) {\n      if (stringMatch !== '') {\n        return matchOption + (matchOption === HEADERS ? ' [' + headerName + '] ' : ' ') + operator + ' ' + stringMatch;\n      } else {\n        return matchOption + ' [' + headerName + '] ' + REGEX + ' ' + ANYTHING;\n      }\n    };\n\n    _this.getIstioMatchStrings = function () {\n      var matches = Object.keys(_this.state.matchStringToHeaderMatch);\n\n      if (_this.state.uriMatchString) {\n        matches.push(_this.state.uriMatchString);\n      }\n\n      return matches;\n    };\n\n    _this.onAddMatch = function () {\n      _this.setState(function (prevState) {\n        var istioMatchString = _this.matchToIstioMatchString(prevState.category, prevState.operator, prevState.matchValue, prevState.headerName);\n\n        var uriMatchState = {};\n\n        if (prevState.category === URI && prevState.matchValue.length > 0) {\n          uriMatchState.uriMatchString = istioMatchString;\n          uriMatchState.uriMatch = {\n            match: prevState.operator,\n            stringMatch: prevState.matchValue\n          };\n        } else if (prevState.category === HEADERS) {\n          var httpMatch = {\n            key: prevState.headerName,\n            match: prevState.operator,\n            stringMatch: prevState.matchValue\n          };\n          prevState.matchStringToHeaderMatch[istioMatchString] = httpMatch;\n        }\n\n        return _objectSpread(_objectSpread({}, uriMatchState), {}, {\n          matchStringToHeaderMatch: prevState.matchStringToHeaderMatch,\n          // Reset headerName and matchValue for next match\n          headerName: '',\n          matchValue: ''\n        });\n      });\n    };\n\n    _this.onRemoveMatch = function (matchToRemove) {\n      _this.setState(function (prevState) {\n        var uriMatchState = {};\n\n        if (prevState.uriMatchString) {\n          uriMatchState.uriMatchString = undefined;\n          uriMatchState.uriMatch = undefined;\n        } else if (matchToRemove in prevState.matchStringToHeaderMatch) {\n          delete prevState.matchStringToHeaderMatch[matchToRemove];\n        }\n\n        return _objectSpread(_objectSpread({}, uriMatchState), {}, {\n          matchStringToHeaderMatch: prevState.matchStringToHeaderMatch,\n          validationMsg: prevState.validationMsg === MSG_SAME_MATCHING ? '' : prevState.validationMsg\n        });\n      });\n    };\n\n    _this.onAddRule = function (rules) {\n      var _this$state$uriMatch, _this$state$uriMatch2;\n\n      if (((_this$state$uriMatch = _this.state.uriMatch) === null || _this$state$uriMatch === void 0 ? void 0 : _this$state$uriMatch.match) && ((_this$state$uriMatch2 = _this.state.uriMatch) === null || _this$state$uriMatch2 === void 0 ? void 0 : _this$state$uriMatch2.stringMatch)) {\n        var matches = _this.getIstioMatchStrings();\n\n        var rule = {\n          matches: matches,\n          workloadWeights: []\n        };\n        var httpMatch = {\n          uri: {\n            match: _this.state.uriMatch.match,\n            stringMatch: _this.state.uriMatch.stringMatch\n          },\n          headers: Object.values(_this.state.matchStringToHeaderMatch)\n        };\n\n        if (!_this.isMatchesIncluded(rules, rule)) {\n          _this.props.onAdd(initCriteria(), {\n            name: '',\n            gateway: ''\n          }, httpMatch);\n        }\n      }\n    };\n\n    _this.state = initMatch();\n    return _this;\n  } // TODO: Is this necessary?\n\n\n  _createClass(ExperimentTrafficForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.focusElementName !== '') {\n        var focusElement = document.getElementById(this.state.focusElementName);\n\n        if (focusElement) {\n          focusElement.focus();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rules = this.httpMatchesToRules(this.props.matches);\n      var matches = this.getIstioMatchStrings();\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ExperimentMatchBuilder, {\n        category: this.state.category,\n        operator: this.state.operator,\n        headerName: this.state.headerName,\n        matchValue: this.state.matchValue,\n        isValid: this.state.validationMsg === '',\n        onSelectCategory: function onSelectCategory(category) {\n          _this2.setState(function (prevState) {\n            // PRESENCE operator only applies to HEADERS\n            return {\n              category: category,\n              operator: prevState.operator === PRESENCE && category !== HEADERS ? EXACT : prevState.operator\n            };\n          });\n        },\n        onHeaderNameChange: this.onHeaderNameChange,\n        onSelectOperator: function onSelectOperator(operator) {\n          return _this2.setState({\n            operator: operator\n          });\n        },\n        onMatchValueChange: this.onMatchValueChange,\n        onAddMatch: this.onAddMatch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Matches, {\n        matches: matches,\n        onRemoveMatch: this.onRemoveMatch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: addRuleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }, this.state.validationMsg.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: validationStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 53\n        }\n      }, this.state.validationMsg), /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        isDisabled: !this.state.isValid,\n        onClick: function onClick() {\n          _this2.onAddRule(rules);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }\n      }, \"Add Rule\"))), /*#__PURE__*/React.createElement(ExperimentRules, {\n        rules: rules,\n        onRemoveRule: function onRemoveRule(index) {\n          _this2.props.onRemove(OnRemoveFromListOptions.Match, index);\n        },\n        onMoveRule: this.props.onMoveMatchRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ExperimentTrafficForm;\n}(React.Component);\n\nexport default ExperimentTrafficForm;","map":{"version":3,"sources":["/root/kiali-ui/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentTrafficForm.tsx"],"names":["initCriteria","React","Button","Matches","ExperimentMatchBuilder","ANYTHING","EXACT","HEADERS","PRESENCE","REGEX","URI","style","PFColors","ExperimentRules","OnRemoveFromListOptions","MSG_SAME_MATCHING","MSG_HEADER_NAME_NON_EMPTY","MSG_HEADER_VALUE_NON_EMPTY","addRuleStyle","width","textAlign","validationStyle","marginRight","color","Red100","display","initMatch","matchStringToHeaderMatch","focusElementName","validName","validationMsg","category","operator","headerName","matchValue","isValid","ExperimentTrafficForm","props","isMatchesIncluded","rules","newRule","some","rule","matches","length","every","match","includes","onHeaderNameChange","state","setState","onMatchValueChange","httpMatchesToRules","map","workloadWeights","uri","stringMatch","push","matchToIstioMatchString","headers","forEach","header","key","matchOption","getIstioMatchStrings","Object","keys","uriMatchString","onAddMatch","prevState","istioMatchString","uriMatchState","uriMatch","httpMatch","onRemoveMatch","matchToRemove","undefined","onAddRule","values","onAdd","name","gateway","focusElement","document","getElementById","focus","marginTop","index","onRemove","Match","onMoveMatchRule","Component"],"mappings":"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","sourcesContent":["import { Criteria, HeaderMatch, Host, HttpMatch, initCriteria, URIMatch } from '../../../../types/Iter8';\nimport * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport Matches from './../../../../components/IstioWizards/RequestRouting/Matches';\nimport ExperimentMatchBuilder, { ANYTHING, EXACT, HEADERS, PRESENCE, REGEX, URI } from './ExperimentMatchBuilder';\nimport { style } from 'typestyle';\nimport { PFColors } from './../../../../components/Pf/PfColors';\nimport ExperimentRules, { MOVE_TYPE, Rule } from './ExperimentRules';\nimport { OnRemoveFromListOptions } from './ExperimentCreatePage';\n\nconst MSG_SAME_MATCHING = 'A Rule with same matching criteria is already added.';\nconst MSG_HEADER_NAME_NON_EMPTY = 'Header name must be non empty';\nconst MSG_HEADER_VALUE_NON_EMPTY = 'Header value must be non empty';\n\nconst addRuleStyle = style({\n  width: '100%',\n  textAlign: 'right'\n});\n\nconst validationStyle = style({\n  marginRight: 20,\n  color: PFColors.Red100,\n  display: 'inline'\n});\n\ntype Props = {\n  matches: HttpMatch[];\n\n  onRemove: (type: OnRemoveFromListOptions, index: number) => void;\n  onAdd: (criteria: Criteria, host: Host, match: any) => void;\n  onMoveMatchRule: (index: number, move: MOVE_TYPE) => void;\n};\n\ntype URIMatchState = {\n  uriMatchString?: string;\n  uriMatch?: URIMatch;\n};\n\nexport type TrafficState = {\n  uriMatchString?: string;\n  uriMatch?: URIMatch;\n  matchStringToHeaderMatch: { [matchString: string]: HeaderMatch };\n\n  focusElementName: string;\n  validName: boolean;\n\n  validationMsg: string;\n\n  // Match state\n  // MatchBuilder props\n  category: string;\n  operator: string;\n  headerName: string;\n  matchValue: string;\n  isValid: boolean;\n};\n\nexport const initMatch = (): TrafficState => ({\n  matchStringToHeaderMatch: {},\n\n  focusElementName: 'Unknown',\n  validName: false,\n\n  validationMsg: '',\n\n  // Match state\n  // MatchBuilder props\n  category: URI,\n  operator: EXACT,\n  headerName: '',\n  matchValue: '',\n  isValid: true\n});\n\n// Create Success Criteria, can be multiple with same metric, but different sampleSize, etc...\nclass ExperimentTrafficForm extends React.Component<Props, TrafficState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initMatch();\n  }\n\n  // TODO: Is this necessary?\n  componentDidUpdate() {\n    if (this.state.focusElementName !== '') {\n      const focusElement = document.getElementById(this.state.focusElementName);\n      if (focusElement) {\n        focusElement.focus();\n      }\n    }\n  }\n\n  isMatchesIncluded = (rules: Rule[], newRule: Rule) => {\n    return rules.some(rule => {\n      return (\n        rule.matches.length === newRule.matches.length && rule.matches.every(match => newRule.matches.includes(match))\n      );\n    });\n  };\n\n  onHeaderNameChange = (headerName: string) => {\n    let validationMsg = '';\n    if (this.state.matchValue !== '' && headerName === '') {\n      validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n    }\n    if (this.state.matchValue === '' && headerName !== '' && this.state.operator !== PRESENCE) {\n      validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n    }\n    this.setState({\n      headerName: headerName,\n      validationMsg: validationMsg\n    });\n  };\n\n  onMatchValueChange = (matchValue: string) => {\n    let validationMsg = '';\n    if (this.state.category === HEADERS) {\n      if (this.state.headerName === '' && matchValue !== '') {\n        validationMsg = MSG_HEADER_NAME_NON_EMPTY;\n      }\n      if (this.state.headerName !== '' && matchValue === '') {\n        validationMsg = MSG_HEADER_VALUE_NON_EMPTY;\n      }\n    }\n    if (matchValue === '') {\n      validationMsg = '';\n    }\n\n    // Setting match state\n    this.setState({\n      matchValue: matchValue,\n      validationMsg: validationMsg\n    });\n  };\n\n  // Simply for converting between HttpMatch and Rule types\n  // Only supports URI and HEADERS\n  httpMatchesToRules = (matches: HttpMatch[]): Rule[] => {\n    return matches.map(match => {\n      let rule: Rule = {\n        matches: [],\n        workloadWeights: []\n      };\n\n      // URI and header matches are added separately\n      if (match.uri && match.uri.match && match.uri.stringMatch) {\n        rule.matches.push(this.matchToIstioMatchString(URI, match.uri.match, match.uri.stringMatch));\n      }\n\n      if (match.headers) {\n        match.headers.forEach(header => {\n          rule.matches.push(this.matchToIstioMatchString(HEADERS, header.match, header.stringMatch, header.key));\n        });\n      }\n\n      return rule;\n    });\n  };\n\n  matchToIstioMatchString = (\n    matchOption: string,\n    operator: string,\n    stringMatch: string,\n    headerName?: string\n  ): string => {\n    if (stringMatch !== '') {\n      return matchOption + (matchOption === HEADERS ? ' [' + headerName + '] ' : ' ') + operator + ' ' + stringMatch;\n    } else {\n      return matchOption + ' [' + headerName + '] ' + REGEX + ' ' + ANYTHING;\n    }\n  };\n\n  getIstioMatchStrings = () => {\n    const matches = Object.keys(this.state.matchStringToHeaderMatch);\n    if (this.state.uriMatchString) {\n      matches.push(this.state.uriMatchString);\n    }\n\n    return matches;\n  };\n\n  onAddMatch = () => {\n    this.setState(prevState => {\n      const istioMatchString = this.matchToIstioMatchString(\n        prevState.category,\n        prevState.operator,\n        prevState.matchValue,\n        prevState.headerName\n      );\n\n      const uriMatchState: URIMatchState = {};\n\n      if (prevState.category === URI && prevState.matchValue.length > 0) {\n        uriMatchState.uriMatchString = istioMatchString;\n        uriMatchState.uriMatch = {\n          match: prevState.operator,\n          stringMatch: prevState.matchValue\n        };\n      } else if (prevState.category === HEADERS) {\n        const httpMatch: HeaderMatch = {\n          key: prevState.headerName,\n          match: prevState.operator,\n          stringMatch: prevState.matchValue\n        };\n\n        prevState.matchStringToHeaderMatch[istioMatchString] = httpMatch;\n      }\n\n      return {\n        /**\n         * URIMatchState just sets the uriMatchString and the uriMatch in the\n         * state.\n         *\n         * By using the destructure statement, we can avoid calling setState()\n         * multiple times.\n         */\n        ...uriMatchState,\n\n        matchStringToHeaderMatch: prevState.matchStringToHeaderMatch,\n\n        // Reset headerName and matchValue for next match\n        headerName: '',\n        matchValue: ''\n      };\n    });\n  };\n\n  onRemoveMatch = (matchToRemove: string) => {\n    this.setState(prevState => {\n      const uriMatchState: URIMatchState = {};\n\n      if (prevState.uriMatchString) {\n        uriMatchState.uriMatchString = undefined;\n        uriMatchState.uriMatch = undefined;\n      } else if (matchToRemove in prevState.matchStringToHeaderMatch) {\n        delete prevState.matchStringToHeaderMatch[matchToRemove];\n      }\n\n      return {\n        /**\n         * URIMatchState just sets the uriMatchString and the uriMatch in the\n         * state.\n         *\n         * By using the destructure statement, we can avoid calling setState()\n         * multiple times.\n         */\n        ...uriMatchState,\n\n        matchStringToHeaderMatch: prevState.matchStringToHeaderMatch,\n        validationMsg: prevState.validationMsg === MSG_SAME_MATCHING ? '' : prevState.validationMsg\n      };\n    });\n  };\n\n  onAddRule = (rules: Rule[]) => {\n    if (this.state.uriMatch?.match && this.state.uriMatch?.stringMatch) {\n      const matches = this.getIstioMatchStrings();\n\n      const rule: Rule = {\n        matches,\n        workloadWeights: []\n      };\n\n      const httpMatch: HttpMatch = {\n        uri: {\n          match: this.state.uriMatch.match,\n          stringMatch: this.state.uriMatch.stringMatch\n        },\n        headers: Object.values(this.state.matchStringToHeaderMatch)\n      };\n\n      if (!this.isMatchesIncluded(rules, rule)) {\n        this.props.onAdd(initCriteria(), { name: '', gateway: '' }, httpMatch);\n      }\n    }\n  };\n\n  render() {\n    const rules = this.httpMatchesToRules(this.props.matches);\n    const matches = this.getIstioMatchStrings();\n\n    return (\n      <>\n        <div style={{ marginTop: '20px' }}>\n          <ExperimentMatchBuilder\n            category={this.state.category}\n            operator={this.state.operator}\n            headerName={this.state.headerName}\n            matchValue={this.state.matchValue}\n            isValid={this.state.validationMsg === ''}\n            onSelectCategory={(category: string) => {\n              this.setState(prevState => {\n                // PRESENCE operator only applies to HEADERS\n                return {\n                  category: category,\n                  operator: prevState.operator === PRESENCE && category !== HEADERS ? EXACT : prevState.operator\n                };\n              });\n            }}\n            onHeaderNameChange={this.onHeaderNameChange}\n            onSelectOperator={(operator: string) => this.setState({ operator: operator })}\n            onMatchValueChange={this.onMatchValueChange}\n            onAddMatch={this.onAddMatch}\n          />\n          <Matches matches={matches} onRemoveMatch={this.onRemoveMatch} />\n        </div>\n        <div className={addRuleStyle}>\n          <span>\n            {this.state.validationMsg.length > 0 && <div className={validationStyle}>{this.state.validationMsg}</div>}\n            <Button\n              variant=\"secondary\"\n              isDisabled={!this.state.isValid}\n              onClick={() => {\n                this.onAddRule(rules);\n              }}\n            >\n              Add Rule\n            </Button>\n          </span>\n        </div>\n        <ExperimentRules\n          rules={rules}\n          onRemoveRule={index => {\n            this.props.onRemove(OnRemoveFromListOptions.Match, index);\n          }}\n          onMoveRule={this.props.onMoveMatchRule}\n        />\n      </>\n    );\n  }\n}\n\nexport default ExperimentTrafficForm;\n"]},"metadata":{},"sourceType":"module"}
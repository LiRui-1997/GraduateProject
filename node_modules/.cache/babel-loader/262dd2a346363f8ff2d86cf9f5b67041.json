{"ast":null,"code":"export var getUnit = function getUnit(d3Format, unit, val) {\n  // Round to dismiss float imprecision\n  val = Math.round(val * 10000) / 10000;\n  var unitResult = '';\n\n  switch (unit) {\n    case 'seconds':\n      unitResult = formatSI(d3Format, val, 's', true);\n      break;\n\n    case 'bytes':\n    case 'bytes-si':\n      unitResult = formatDataSI(d3Format, val, 'B', true);\n      break;\n\n    case 'bytes-iec':\n      unitResult = formatDataIEC(d3Format, val, 'B', true);\n      break;\n\n    case 'bitrate':\n    case 'bitrate-si':\n      unitResult = formatDataSI(d3Format, val, 'bit/s', true);\n      break;\n\n    case 'bitrate-iec':\n      unitResult = formatDataIEC(d3Format, val, 'bit/s', true);\n      break;\n\n    case 'connrate':\n      unitResult = formatDataSI(d3Format, val, 'conn/s', true);\n      break;\n\n    case 'msgrate':\n      unitResult = formatDataSI(d3Format, val, 'msg/s', true);\n      break;\n\n    default:\n      // Fallback to default SI scaler:\n      unitResult = formatDataSI(d3Format, val, unit, true);\n      break;\n  }\n\n  return unitResult.split(' ')[1];\n};\nexport var getFormatter = function getFormatter(d3Format, unit) {\n  var withUnit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return function (val) {\n    // Round to dismiss float imprecision\n    val = Math.round(val * 10000) / 10000;\n\n    switch (unit) {\n      case 'seconds':\n        return formatSI(d3Format, val, 's', withUnit);\n\n      case 'bytes':\n      case 'bytes-si':\n        return formatDataSI(d3Format, val, 'B', withUnit);\n\n      case 'bytes-iec':\n        return formatDataIEC(d3Format, val, 'B', withUnit);\n\n      case 'bitrate':\n      case 'bitrate-si':\n        return formatDataSI(d3Format, val, 'bit/s', withUnit);\n\n      case 'bitrate-iec':\n        return formatDataIEC(d3Format, val, 'bit/s', withUnit);\n\n      case 'connrate':\n        return formatDataSI(d3Format, val, 'conn/s', withUnit);\n\n      case 'msgrate':\n        return formatDataSI(d3Format, val, 'msg/s', withUnit);\n\n      default:\n        // Fallback to default SI scaler:\n        return formatDataSI(d3Format, val, unit, withUnit);\n    }\n  };\n};\n\nvar formatDataSI = function formatDataSI(d3Format, val, suffix, withUnit) {\n  var formD = formatData(d3Format, val, 1000, ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], withUnit);\n  return withUnit ? formD + suffix : formD;\n};\n\nvar formatDataIEC = function formatDataIEC(d3Format, val, suffix, withUnit) {\n  var formD = formatData(d3Format, val, 1024, ['Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi'], withUnit);\n  return withUnit ? formD + suffix : formD;\n};\n\nvar formatData = function formatData(d3Format, val, threshold, units, withUnit) {\n  if (Math.abs(val) < threshold) {\n    return val + ' ';\n  }\n\n  var u = -1;\n\n  do {\n    val /= threshold;\n    ++u;\n  } while (Math.abs(val) >= threshold && u < units.length - 1);\n\n  var unit = d3Format('~r')(val);\n  return withUnit ? unit + ' ' + units[u] : unit;\n};\n\nvar formatSI = function formatSI(d3Format, val, suffix, withUnit) {\n  var fmt = d3Format('~s')(val);\n  var si = ''; // Insert space before SI\n  // \"fmt\" can be something like:\n  // - \"9k\" => we want \"9 kB\"\n  // - \"9\" => we want \"9 B\"\n\n  for (var i = fmt.length - 1; i >= 0; i--) {\n    var c = fmt.charAt(i);\n\n    if (c >= '0' && c <= '9') {\n      var res = fmt.substr(0, i + 1);\n      return withUnit ? res + ' ' + si + suffix : res;\n    }\n\n    si = c + si;\n  } // Weird: no number found?\n\n\n  return withUnit ? fmt + suffix : fmt;\n};","map":{"version":3,"sources":["/root/kiali-ui/src/utils/Formatter.ts"],"names":["getUnit","d3Format","unit","val","Math","round","unitResult","formatSI","formatDataSI","formatDataIEC","split","getFormatter","withUnit","suffix","formD","formatData","threshold","units","abs","u","length","fmt","si","i","c","charAt","res","substr"],"mappings":"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","sourcesContent":["type D3FormatFunc = (specifier: string) => (n: number | { valueOf(): number }) => string;\n\nexport const getUnit = (d3Format: D3FormatFunc, unit: string, val: number) => {\n  // Round to dismiss float imprecision\n  val = Math.round(val * 10000) / 10000;\n  var unitResult = '';\n  switch (unit) {\n    case 'seconds':\n      unitResult = formatSI(d3Format, val, 's', true);\n      break;\n    case 'bytes':\n    case 'bytes-si':\n      unitResult = formatDataSI(d3Format, val, 'B', true);\n      break;\n    case 'bytes-iec':\n      unitResult = formatDataIEC(d3Format, val, 'B', true);\n      break;\n    case 'bitrate':\n    case 'bitrate-si':\n      unitResult = formatDataSI(d3Format, val, 'bit/s', true);\n      break;\n    case 'bitrate-iec':\n      unitResult = formatDataIEC(d3Format, val, 'bit/s', true);\n      break;\n    case 'connrate':\n      unitResult = formatDataSI(d3Format, val, 'conn/s', true);\n      break;\n    case 'msgrate':\n      unitResult = formatDataSI(d3Format, val, 'msg/s', true);\n      break;\n    default:\n      // Fallback to default SI scaler:\n      unitResult = formatDataSI(d3Format, val, unit, true);\n      break;\n  }\n  return unitResult.split(' ')[1];\n};\n\nexport const getFormatter = (d3Format: D3FormatFunc, unit: string, withUnit: boolean = false) => {\n  return (val: number): string => {\n    // Round to dismiss float imprecision\n    val = Math.round(val * 10000) / 10000;\n    switch (unit) {\n      case 'seconds':\n        return formatSI(d3Format, val, 's', withUnit);\n      case 'bytes':\n      case 'bytes-si':\n        return formatDataSI(d3Format, val, 'B', withUnit);\n      case 'bytes-iec':\n        return formatDataIEC(d3Format, val, 'B', withUnit);\n      case 'bitrate':\n      case 'bitrate-si':\n        return formatDataSI(d3Format, val, 'bit/s', withUnit);\n      case 'bitrate-iec':\n        return formatDataIEC(d3Format, val, 'bit/s', withUnit);\n      case 'connrate':\n        return formatDataSI(d3Format, val, 'conn/s', withUnit);\n      case 'msgrate':\n        return formatDataSI(d3Format, val, 'msg/s', withUnit);\n      default:\n        // Fallback to default SI scaler:\n        return formatDataSI(d3Format, val, unit, withUnit);\n    }\n  };\n};\n\nconst formatDataSI = (d3Format: D3FormatFunc, val: number, suffix: string, withUnit: boolean): string => {\n  const formD = formatData(d3Format, val, 1000, ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], withUnit);\n  return withUnit ? formD + suffix : formD;\n};\n\nconst formatDataIEC = (d3Format: D3FormatFunc, val: number, suffix: string, withUnit: boolean): string => {\n  const formD = formatData(d3Format, val, 1024, ['Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi'], withUnit);\n  return withUnit ? formD + suffix : formD;\n};\n\nconst formatData = (\n  d3Format: D3FormatFunc,\n  val: number,\n  threshold: number,\n  units: string[],\n  withUnit: boolean\n): string => {\n  if (Math.abs(val) < threshold) {\n    return val + ' ';\n  }\n  let u = -1;\n  do {\n    val /= threshold;\n    ++u;\n  } while (Math.abs(val) >= threshold && u < units.length - 1);\n  const unit = d3Format('~r')(val);\n  return withUnit ? unit + ' ' + units[u] : unit;\n};\n\nconst formatSI = (d3Format: D3FormatFunc, val: number, suffix: string, withUnit: boolean): string => {\n  const fmt = d3Format('~s')(val);\n  let si = '';\n  // Insert space before SI\n  // \"fmt\" can be something like:\n  // - \"9k\" => we want \"9 kB\"\n  // - \"9\" => we want \"9 B\"\n  for (let i = fmt.length - 1; i >= 0; i--) {\n    const c = fmt.charAt(i);\n    if (c >= '0' && c <= '9') {\n      const res = fmt.substr(0, i + 1);\n      return withUnit ? res + ' ' + si + suffix : res;\n    }\n    si = c + si;\n  }\n  // Weird: no number found?\n  return withUnit ? fmt + suffix : fmt;\n};\n"]},"metadata":{},"sourceType":"module"}
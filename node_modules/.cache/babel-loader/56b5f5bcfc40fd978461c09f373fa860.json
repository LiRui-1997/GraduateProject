{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/MetricsOptions/MetricsReporter.tsx\";\nimport * as React from 'react';\nimport { URLParam, HistoryManager } from '../../app/History';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { KialiIcon } from '../../config/KialiIcon';\nimport { style } from 'typestyle';\nvar infoStyle = style({\n  margin: '0px 5px 2px 5px',\n  verticalAlign: '-5px !important'\n});\n\nvar MetricsReporter = /*#__PURE__*/function (_React$Component) {\n  _inherits(MetricsReporter, _React$Component);\n\n  var _super = _createSuper(MetricsReporter);\n\n  function MetricsReporter(props) {\n    var _this;\n\n    _classCallCheck(this, MetricsReporter);\n\n    _this = _super.call(this, props);\n    _this.reporter = void 0;\n\n    _this.onReporterChanged = function (reporter) {\n      HistoryManager.setParam(URLParam.REPORTER, reporter);\n      _this.reporter = reporter;\n\n      _this.props.onChanged(_this.reporter);\n    };\n\n    _this.reportTooltip = /*#__PURE__*/React.createElement(\"div\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      style: {\n        listStyleType: 'none'\n      },\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'inline-block'\n      },\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"Select the reporter for the metrics displayed. Each Istio metric can be reported by the Source (workload which emitted the request) and by the Destination (workload which received the request). In general, the timeseries will look exactly the same because Source and Destination report the same data.\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'inline-block'\n      },\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"There are some exceptions:\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      style: {\n        listStyleType: 'circle',\n        marginLeft: '20px'\n      },\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, \"An opened circuit breaker would cause networking failures only reported by the Source\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Fault-injected failures only reported by the Source\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: _assertThisInitialized(_this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, \"Traffic coming from unknown sources (anything that is not under the Istio mesh) would only be reported by the Destination\")))));\n    _this.reporter = MetricsReporter.initialReporter(props.direction);\n    return _this;\n  }\n\n  _createClass(MetricsReporter, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: 'metrics_filter_reporter',\n        disabled: false,\n        handleSelect: this.onReporterChanged,\n        nameDropdown: 'Reported from',\n        value: this.reporter,\n        initialLabel: MetricsReporter.ReporterOptions[this.reporter],\n        options: MetricsReporter.ReporterOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 27\n          }\n        }, this.reportTooltip),\n        position: TooltipPosition.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        className: infoStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return MetricsReporter;\n}(React.Component);\n\nMetricsReporter.ReporterOptions = {\n  destination: 'Destination',\n  source: 'Source'\n};\n\nMetricsReporter.initialReporter = function (direction) {\n  var reporterParam = HistoryManager.getParam(URLParam.REPORTER);\n\n  if (reporterParam !== undefined) {\n    return reporterParam;\n  }\n\n  return direction === 'inbound' ? 'destination' : 'source';\n};\n\nexport { MetricsReporter as default };","map":{"version":3,"sources":["/root/kiali-ui/src/components/MetricsOptions/MetricsReporter.tsx"],"names":["React","URLParam","HistoryManager","ToolbarDropdown","Tooltip","TooltipPosition","KialiIcon","style","infoStyle","margin","verticalAlign","MetricsReporter","props","reporter","onReporterChanged","setParam","REPORTER","onChanged","reportTooltip","listStyleType","display","marginLeft","initialReporter","direction","ReporterOptions","textAlign","top","Component","destination","source","reporterParam","getParam","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { URLParam, HistoryManager } from '../../app/History';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\nimport { Reporter, Direction } from '../../types/MetricsOptions';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { KialiIcon } from '../../config/KialiIcon';\nimport { style } from 'typestyle';\n\ninterface Props {\n  onChanged: (reproter: Reporter) => void;\n  direction: Direction;\n}\n\nconst infoStyle = style({\n  margin: '0px 5px 2px 5px',\n  verticalAlign: '-5px !important'\n});\n\nexport default class MetricsReporter extends React.Component<Props> {\n  static ReporterOptions: { [key: string]: string } = {\n    destination: 'Destination',\n    source: 'Source'\n  };\n\n  private reporter: Reporter;\n\n  static initialReporter = (direction: Direction): Reporter => {\n    const reporterParam = HistoryManager.getParam(URLParam.REPORTER);\n    if (reporterParam !== undefined) {\n      return reporterParam as Reporter;\n    }\n    return direction === 'inbound' ? 'destination' : 'source';\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.reporter = MetricsReporter.initialReporter(props.direction);\n  }\n\n  onReporterChanged = (reporter: string) => {\n    HistoryManager.setParam(URLParam.REPORTER, reporter);\n    this.reporter = reporter as Reporter;\n    this.props.onChanged(this.reporter);\n  };\n\n  reportTooltip = (\n    <div>\n      <ul style={{ listStyleType: 'none' }}>\n        <li>\n          <div style={{ display: 'inline-block' }}>\n            Select the reporter for the metrics displayed. Each Istio metric can be reported by the Source (workload\n            which emitted the request) and by the Destination (workload which received the request). In general, the\n            timeseries will look exactly the same because Source and Destination report the same data.\n          </div>\n        </li>\n        <li>\n          <div style={{ display: 'inline-block' }}>There are some exceptions:</div>\n        </li>\n        <li>\n          <ul style={{ listStyleType: 'circle', marginLeft: '20px' }}>\n            <li>An opened circuit breaker would cause networking failures only reported by the Source</li>\n            <li>Fault-injected failures only reported by the Source</li>\n            <li>\n              Traffic coming from unknown sources (anything that is not under the Istio mesh) would only be reported by\n              the Destination\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  );\n\n  render() {\n    return (\n      <span>\n        <ToolbarDropdown\n          id={'metrics_filter_reporter'}\n          disabled={false}\n          handleSelect={this.onReporterChanged}\n          nameDropdown={'Reported from'}\n          value={this.reporter}\n          initialLabel={MetricsReporter.ReporterOptions[this.reporter]}\n          options={MetricsReporter.ReporterOptions}\n        />\n        <Tooltip content={<div style={{ textAlign: 'left' }}>{this.reportTooltip}</div>} position={TooltipPosition.top}>\n          <KialiIcon.Info className={infoStyle} />\n        </Tooltip>\n      </span>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBulletThemeWithLegendColorScale = exports.getColorScale = void 0;\n\nvar _chartBulletData = require(\"./chart-bullet-data\");\n\nvar _ChartUtils = require(\"../../ChartUtils\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar getLegendColorScale = function getLegendColorScale(computedData, legendData) {\n  var colorScale = [];\n  legendData.forEach(function (data, index) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = computedData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var i = _step.value;\n\n        if (index === i._index) {\n          colorScale.push(i._color);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return colorScale;\n};\n\nvar getColorScale = function getColorScale(_ref) {\n  var comparativeErrorMeasureData = _ref.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref.comparativeWarningMeasureLegendData,\n      invert = _ref.invert,\n      primaryDotMeasureData = _ref.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref.qualitativeRangeLegendData,\n      themeColor = _ref.themeColor,\n      themeVariant = _ref.themeVariant;\n  var colorScale = [];\n\n  if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n    var computedData = (0, _chartBulletData.getPrimaryDotMeasureData)({\n      data: primaryDotMeasureData,\n      invert: invert\n    });\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(computedData, primaryDotMeasureLegendData)));\n  }\n\n  if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n    var _computedData = (0, _chartBulletData.getPrimarySegmentedMeasureData)({\n      data: primarySegmentedMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData, primarySegmentedMeasureLegendData)));\n  }\n\n  if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n    var _computedData2 = (0, _chartBulletData.getComparativeWarningMeasureData)({\n      data: comparativeWarningMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData2, comparativeWarningMeasureLegendData)));\n  }\n\n  if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n    var _computedData3 = (0, _chartBulletData.getComparativeErrorMeasureData)({\n      data: comparativeErrorMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData3, comparativeErrorMeasureLegendData)));\n  }\n\n  if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n    var _computedData4 = (0, _chartBulletData.getQualitativeRangeData)({\n      data: qualitativeRangeData,\n      invert: invert\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData4, qualitativeRangeLegendData)));\n  }\n\n  return colorScale;\n}; // Get bullet chart theme with legend color scale\n\n\nexports.getColorScale = getColorScale;\n\nvar getBulletThemeWithLegendColorScale = function getBulletThemeWithLegendColorScale(_ref2) {\n  var comparativeErrorMeasureData = _ref2.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref2.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref2.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref2.comparativeWarningMeasureLegendData,\n      invert = _ref2.invert,\n      primaryDotMeasureData = _ref2.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref2.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref2.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref2.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref2.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref2.qualitativeRangeLegendData,\n      themeColor = _ref2.themeColor,\n      themeVariant = _ref2.themeVariant;\n  var colorScale = getColorScale({\n    comparativeErrorMeasureData: comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData: comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData: comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData: comparativeWarningMeasureLegendData,\n    invert: invert,\n    primaryDotMeasureData: primaryDotMeasureData,\n    primaryDotMeasureLegendData: primaryDotMeasureLegendData,\n    primarySegmentedMeasureData: primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData: primarySegmentedMeasureLegendData,\n    qualitativeRangeData: qualitativeRangeData,\n    qualitativeRangeLegendData: qualitativeRangeLegendData,\n    themeColor: themeColor,\n    themeVariant: themeVariant\n  });\n  var theme = (0, _ChartUtils.getBulletTheme)(themeColor, themeVariant);\n  theme.legend.colorScale = _toConsumableArray(colorScale);\n  return theme;\n};\n\nexports.getBulletThemeWithLegendColorScale = getBulletThemeWithLegendColorScale;","map":{"version":3,"sources":["/root/kiali-ui/node_modules/@patternfly/react-charts/dist/js/components/ChartBullet/utils/chart-bullet-theme.js"],"names":["Object","defineProperty","exports","value","getBulletThemeWithLegendColorScale","getColorScale","_chartBulletData","require","_ChartUtils","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","isArray","i","arr2","length","getLegendColorScale","computedData","legendData","colorScale","forEach","data","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","_step","next","done","_index","push","_color","err","_ref","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","comparativeWarningMeasureData","comparativeWarningMeasureLegendData","invert","primaryDotMeasureData","primaryDotMeasureLegendData","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","themeColor","themeVariant","getPrimaryDotMeasureData","apply","_computedData","getPrimarySegmentedMeasureData","_computedData2","getComparativeWarningMeasureData","_computedData3","getComparativeErrorMeasureData","_computedData4","getQualitativeRangeData","_ref2","theme","getBulletTheme","legend"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBulletThemeWithLegendColorScale = exports.getColorScale = void 0;\n\nvar _chartBulletData = require(\"./chart-bullet-data\");\n\nvar _ChartUtils = require(\"../../ChartUtils\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar getLegendColorScale = function getLegendColorScale(computedData, legendData) {\n  var colorScale = [];\n  legendData.forEach(function (data, index) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = computedData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var i = _step.value;\n\n        if (index === i._index) {\n          colorScale.push(i._color);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return colorScale;\n};\n\nvar getColorScale = function getColorScale(_ref) {\n  var comparativeErrorMeasureData = _ref.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref.comparativeWarningMeasureLegendData,\n      invert = _ref.invert,\n      primaryDotMeasureData = _ref.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref.qualitativeRangeLegendData,\n      themeColor = _ref.themeColor,\n      themeVariant = _ref.themeVariant;\n  var colorScale = [];\n\n  if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n    var computedData = (0, _chartBulletData.getPrimaryDotMeasureData)({\n      data: primaryDotMeasureData,\n      invert: invert\n    });\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(computedData, primaryDotMeasureLegendData)));\n  }\n\n  if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n    var _computedData = (0, _chartBulletData.getPrimarySegmentedMeasureData)({\n      data: primarySegmentedMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData, primarySegmentedMeasureLegendData)));\n  }\n\n  if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n    var _computedData2 = (0, _chartBulletData.getComparativeWarningMeasureData)({\n      data: comparativeWarningMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData2, comparativeWarningMeasureLegendData)));\n  }\n\n  if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n    var _computedData3 = (0, _chartBulletData.getComparativeErrorMeasureData)({\n      data: comparativeErrorMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData3, comparativeErrorMeasureLegendData)));\n  }\n\n  if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n    var _computedData4 = (0, _chartBulletData.getQualitativeRangeData)({\n      data: qualitativeRangeData,\n      invert: invert\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData4, qualitativeRangeLegendData)));\n  }\n\n  return colorScale;\n}; // Get bullet chart theme with legend color scale\n\n\nexports.getColorScale = getColorScale;\n\nvar getBulletThemeWithLegendColorScale = function getBulletThemeWithLegendColorScale(_ref2) {\n  var comparativeErrorMeasureData = _ref2.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref2.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref2.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref2.comparativeWarningMeasureLegendData,\n      invert = _ref2.invert,\n      primaryDotMeasureData = _ref2.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref2.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref2.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref2.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref2.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref2.qualitativeRangeLegendData,\n      themeColor = _ref2.themeColor,\n      themeVariant = _ref2.themeVariant;\n  var colorScale = getColorScale({\n    comparativeErrorMeasureData: comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData: comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData: comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData: comparativeWarningMeasureLegendData,\n    invert: invert,\n    primaryDotMeasureData: primaryDotMeasureData,\n    primaryDotMeasureLegendData: primaryDotMeasureLegendData,\n    primarySegmentedMeasureData: primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData: primarySegmentedMeasureLegendData,\n    qualitativeRangeData: qualitativeRangeData,\n    qualitativeRangeLegendData: qualitativeRangeLegendData,\n    themeColor: themeColor,\n    themeVariant: themeVariant\n  });\n  var theme = (0, _ChartUtils.getBulletTheme)(themeColor, themeVariant);\n  theme.legend.colorScale = _toConsumableArray(colorScale);\n  return theme;\n};\n\nexports.getBulletThemeWithLegendColorScale = getBulletThemeWithLegendColorScale;\n//# sourceMappingURL=chart-bullet-theme.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/Graph/SummaryPanelNodeTraces.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { SimpleList, SimpleListItem, Button, Checkbox, Divider } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { style } from 'typestyle';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport history from '../../app/History';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { PromisesRegistry } from 'utils/CancelablePromises';\nimport { TraceListItem } from 'components/JaegerIntegration/TraceListItem';\nimport { summaryFont } from './SummaryPanelCommon';\nimport transformTraceData from 'utils/tracing/TraceTransform';\nvar tracesLimit = 15;\nvar refreshDivStyle = style({\n  display: 'inline-flex',\n  width: '100%'\n});\nvar checkboxStyle = style({\n  paddingBottom: 10,\n  $nest: {\n    '& > label': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: '4px'\n    }\n  }\n});\nvar refreshButtonStyle = style({\n  padding: '2px 10px',\n  margin: '5px 0 5px auto',\n  top: -4\n});\nvar dividerStyle = style({\n  paddingBottom: '3px'\n});\n\nvar SummaryPanelNodeTraces = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelNodeTraces, _React$Component);\n\n  var _super = _createSuper(SummaryPanelNodeTraces);\n\n  function SummaryPanelNodeTraces(props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelNodeTraces);\n\n    _this = _super.call(this, props);\n    _this.promises = new PromisesRegistry();\n    _this.state = {\n      traces: [],\n      useGraphRefresh: false\n    };\n    return _this;\n  }\n\n  _createClass(SummaryPanelNodeTraces, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadTraces();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.state.useGraphRefresh && prevProps.queryTime !== this.props.queryTime || prevProps.nodeData.namespace !== this.props.nodeData.namespace || prevProps.nodeData.app !== this.props.nodeData.app || prevProps.nodeData.workload !== this.props.nodeData.workload || prevProps.nodeData.service !== this.props.nodeData.service) {\n        this.loadTraces();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.promises.cancelAll();\n    }\n  }, {\n    key: \"loadTraces\",\n    value: function loadTraces() {\n      var _this2 = this;\n\n      // Convert seconds to microseconds\n      var params = {\n        startMicros: this.props.queryTime * 1000000,\n        limit: tracesLimit\n      };\n      var d = this.props.nodeData;\n      var promise = d.workload ? API.getWorkloadTraces(d.namespace, d.workload, params) : d.service ? API.getServiceTraces(d.namespace, d.service, params) : API.getAppTraces(d.namespace, d.app, params);\n      this.promises.cancelAll();\n      this.promises.register('traces', promise).then(function (response) {\n        var traces = response.data.data ? response.data.data.map(function (trace) {\n          return transformTraceData(trace);\n        }).filter(function (trace) {\n          return trace !== null;\n        }) : [];\n\n        if (_this2.props.selectedTrace && !traces.some(function (t) {\n          return t.traceID === _this2.props.selectedTrace.traceID;\n        })) {\n          // Put selected trace back in list\n          traces.push(_this2.props.selectedTrace);\n        }\n\n        _this2.setState({\n          traces: traces\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch traces.', error);\n      });\n    }\n  }, {\n    key: \"onClickTrace\",\n    value: function onClickTrace(trace) {\n      var _this$props$selectedT;\n\n      if (((_this$props$selectedT = this.props.selectedTrace) === null || _this$props$selectedT === void 0 ? void 0 : _this$props$selectedT.traceID) === trace.traceID) {\n        // Deselect\n        this.props.setTraceId(undefined);\n      } else {\n        this.props.setTraceId(trace.traceID);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$selectedT2,\n          _this3 = this;\n\n      var d = this.props.nodeData;\n      var tracesDetailsURL = \"/namespaces/\".concat(d.namespace) + (d.workload ? \"/workloads/\".concat(d.workload) : d.service ? \"/services/\".concat(d.service) : \"/applications/\".concat(d.app)) + '?tab=traces';\n      var currentID = (_this$props$selectedT2 = this.props.selectedTrace) === null || _this$props$selectedT2 === void 0 ? void 0 : _this$props$selectedT2.traceID;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginBottom: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: refreshDivStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        id: \"use-graph-refresh\",\n        label: \"Use graph refresh\",\n        className: checkboxStyle,\n        isChecked: this.state.useGraphRefresh,\n        onChange: function onChange(checked) {\n          return _this3.setState({\n            useGraphRefresh: checked\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        id: \"manual-refresh\",\n        isDisabled: this.state.useGraphRefresh,\n        onClick: function onClick() {\n          return _this3.loadTraces();\n        },\n        \"aria-label\": \"Refresh\",\n        variant: \"secondary\",\n        className: refreshButtonStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(SyncAltIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(Divider, {\n        className: dividerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }), this.state.traces.length > 0 && /*#__PURE__*/React.createElement(SimpleList, {\n        style: {\n          marginBottom: 8\n        },\n        \"aria-label\": \"Traces list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      }, this.state.traces.map(function (trace) {\n        return /*#__PURE__*/React.createElement(SimpleListItem, {\n          key: 'trace_' + trace.traceID,\n          onClick: function onClick() {\n            return _this3.onClickTrace(trace);\n          },\n          isCurrent: trace.traceID === currentID,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(TraceListItem, {\n          trace: trace,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }\n        }));\n      })), /*#__PURE__*/React.createElement(Button, {\n        style: summaryFont,\n        onClick: function onClick() {\n          return history.push(tracesDetailsURL);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }, \"Show Traces\"));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // Update the selected trace within list because it may have more up-to-date data after being selected hence fetched again\n      if (props.selectedTrace) {\n        var index = state.traces.findIndex(function (t) {\n          return t.traceID === props.selectedTrace.traceID;\n        });\n\n        if (index >= 0) {\n          state.traces[index] = props.selectedTrace;\n        }\n      }\n\n      return state;\n    }\n  }]);\n\n  return SummaryPanelNodeTraces;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectedTrace: state.jaegerState.selectedTrace\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setTraceId: function setTraceId(traceId) {\n      return dispatch(JaegerThunkActions.setTraceId(traceId));\n    }\n  };\n};\n\nvar SummaryPanelNodeTracesContainer = connect(mapStateToProps, mapDispatchToProps)(SummaryPanelNodeTraces);\nexport default SummaryPanelNodeTracesContainer;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Graph/SummaryPanelNodeTraces.tsx"],"names":["React","connect","SimpleList","SimpleListItem","Button","Checkbox","Divider","SyncAltIcon","style","JaegerThunkActions","history","API","AlertUtils","PromisesRegistry","TraceListItem","summaryFont","transformTraceData","tracesLimit","refreshDivStyle","display","width","checkboxStyle","paddingBottom","$nest","fontSize","paddingTop","refreshButtonStyle","padding","margin","top","dividerStyle","SummaryPanelNodeTraces","props","promises","state","traces","useGraphRefresh","loadTraces","prevProps","queryTime","nodeData","namespace","app","workload","service","cancelAll","params","startMicros","limit","d","promise","getWorkloadTraces","getServiceTraces","getAppTraces","register","then","response","data","map","trace","filter","selectedTrace","some","t","traceID","push","setState","catch","error","addError","setTraceId","undefined","tracesDetailsURL","currentID","marginBottom","checked","length","onClickTrace","index","findIndex","Component","mapStateToProps","jaegerState","mapDispatchToProps","dispatch","traceId","SummaryPanelNodeTracesContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { SimpleList, SimpleListItem, Button, Checkbox, Divider } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { style } from 'typestyle';\n\nimport { KialiAppState } from 'store/Store';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { JaegerThunkActions } from 'actions/JaegerThunkActions';\nimport history from '../../app/History';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport { JaegerTrace } from 'types/JaegerInfo';\nimport { PromisesRegistry } from 'utils/CancelablePromises';\nimport { TracingQuery } from 'types/Tracing';\nimport { TimeInSeconds } from 'types/Common';\nimport { TraceListItem } from 'components/JaegerIntegration/TraceListItem';\nimport { summaryFont } from './SummaryPanelCommon';\nimport { DecoratedGraphNodeData } from 'types/Graph';\nimport transformTraceData from 'utils/tracing/TraceTransform';\n\ntype Props = {\n  nodeData: DecoratedGraphNodeData;\n  queryTime: TimeInSeconds;\n  setTraceId: (traceId?: string) => void;\n  selectedTrace?: JaegerTrace;\n};\n\ntype State = {\n  traces: JaegerTrace[];\n  useGraphRefresh: boolean;\n};\n\nconst tracesLimit = 15;\n\nconst refreshDivStyle = style({\n  display: 'inline-flex',\n  width: '100%'\n});\n\nconst checkboxStyle = style({\n  paddingBottom: 10,\n  $nest: {\n    '& > label': {\n      fontSize: 'var(--graph-side-panel--font-size)',\n      paddingTop: '4px'\n    }\n  }\n});\n\nconst refreshButtonStyle = style({\n  padding: '2px 10px',\n  margin: '5px 0 5px auto',\n  top: -4\n});\n\nconst dividerStyle = style({\n  paddingBottom: '3px'\n});\n\nclass SummaryPanelNodeTraces extends React.Component<Props, State> {\n  private promises = new PromisesRegistry();\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    // Update the selected trace within list because it may have more up-to-date data after being selected hence fetched again\n    if (props.selectedTrace) {\n      const index = state.traces.findIndex(t => t.traceID === props.selectedTrace!.traceID);\n      if (index >= 0) {\n        state.traces[index] = props.selectedTrace;\n      }\n    }\n    return state;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { traces: [], useGraphRefresh: false };\n  }\n\n  componentDidMount() {\n    this.loadTraces();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      (this.state.useGraphRefresh && prevProps.queryTime !== this.props.queryTime) ||\n      prevProps.nodeData.namespace !== this.props.nodeData.namespace ||\n      prevProps.nodeData.app !== this.props.nodeData.app ||\n      prevProps.nodeData.workload !== this.props.nodeData.workload ||\n      prevProps.nodeData.service !== this.props.nodeData.service\n    ) {\n      this.loadTraces();\n    }\n  }\n\n  componentWillUnmount() {\n    this.promises.cancelAll();\n  }\n\n  private loadTraces() {\n    // Convert seconds to microseconds\n    const params: TracingQuery = {\n      startMicros: this.props.queryTime * 1000000,\n      limit: tracesLimit\n    };\n    const d = this.props.nodeData;\n    const promise = d.workload\n      ? API.getWorkloadTraces(d.namespace, d.workload, params)\n      : d.service\n      ? API.getServiceTraces(d.namespace, d.service, params)\n      : API.getAppTraces(d.namespace, d.app!, params);\n    this.promises.cancelAll();\n    this.promises\n      .register('traces', promise)\n      .then(response => {\n        const traces = response.data.data\n          ? (response.data.data\n              .map(trace => transformTraceData(trace))\n              .filter(trace => trace !== null) as JaegerTrace[])\n          : [];\n        if (this.props.selectedTrace && !traces.some(t => t.traceID === this.props.selectedTrace!.traceID)) {\n          // Put selected trace back in list\n          traces.push(this.props.selectedTrace);\n        }\n        this.setState({ traces: traces });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch traces.', error);\n      });\n  }\n\n  private onClickTrace(trace: JaegerTrace) {\n    if (this.props.selectedTrace?.traceID === trace.traceID) {\n      // Deselect\n      this.props.setTraceId(undefined);\n    } else {\n      this.props.setTraceId(trace.traceID);\n    }\n  }\n\n  render() {\n    const d = this.props.nodeData;\n    const tracesDetailsURL =\n      `/namespaces/${d.namespace}` +\n      (d.workload ? `/workloads/${d.workload}` : d.service ? `/services/${d.service}` : `/applications/${d.app!}`) +\n      '?tab=traces';\n    const currentID = this.props.selectedTrace?.traceID;\n\n    return (\n      <div style={{ marginBottom: 8 }}>\n        <div className={refreshDivStyle}>\n          <Checkbox\n            id=\"use-graph-refresh\"\n            label=\"Use graph refresh\"\n            className={checkboxStyle}\n            isChecked={this.state.useGraphRefresh}\n            onChange={checked => this.setState({ useGraphRefresh: checked })}\n          />\n          <Button\n            id=\"manual-refresh\"\n            isDisabled={this.state.useGraphRefresh}\n            onClick={() => this.loadTraces()}\n            aria-label=\"Refresh\"\n            variant=\"secondary\"\n            className={refreshButtonStyle}\n          >\n            <SyncAltIcon />\n          </Button>\n        </div>\n        <Divider className={dividerStyle} />\n        {this.state.traces.length > 0 && (\n          <SimpleList style={{ marginBottom: 8 }} aria-label=\"Traces list\">\n            {this.state.traces.map(trace => {\n              return (\n                <SimpleListItem\n                  key={'trace_' + trace.traceID}\n                  onClick={() => this.onClickTrace(trace)}\n                  isCurrent={trace.traceID === currentID}\n                >\n                  <TraceListItem trace={trace} />\n                </SimpleListItem>\n              );\n            })}\n          </SimpleList>\n        )}\n        <Button style={summaryFont} onClick={() => history.push(tracesDetailsURL)}>\n          Show Traces\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  selectedTrace: state.jaegerState.selectedTrace\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => ({\n  setTraceId: (traceId?: string) => dispatch(JaegerThunkActions.setTraceId(traceId))\n});\n\nconst SummaryPanelNodeTracesContainer = connect(mapStateToProps, mapDispatchToProps)(SummaryPanelNodeTraces);\nexport default SummaryPanelNodeTracesContainer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/IstioConfigNew/GatewayForm/ServerBuilder.tsx\";\nimport * as React from 'react';\nimport { Button, FormGroup, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../components/Pf/PfColors';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { isGatewayHostValid } from '../../../utils/IstioConfigUtils';\nvar warningStyle = style({\n  marginLeft: 25,\n  color: PFColors.Red100,\n  textAlign: 'center'\n});\nvar addServerStyle = style({\n  marginLeft: 0,\n  paddingLeft: 0\n});\nvar portHeader = [{\n  title: 'Port Number',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Port Name',\n  transforms: [cellWidth(20)],\n  props: {}\n}, {\n  title: 'Protocol',\n  transforms: [cellWidth(20)],\n  props: {}\n}];\nvar protocols = ['HTTP', 'HTTPS', 'GRPC', 'HTTP2', 'MONGO', 'TCP', 'TLS'];\nvar tlsModes = ['PASSTHROUGH', 'SIMPLE', 'MUTUAL', 'AUTO_PASSTHROUGH', 'ISTIO_MUTUAL'];\n\nvar ServerBuilder = /*#__PURE__*/function (_React$Component) {\n  _inherits(ServerBuilder, _React$Component);\n\n  var _super = _createSuper(ServerBuilder);\n\n  function ServerBuilder(props) {\n    var _this;\n\n    _classCallCheck(this, ServerBuilder);\n\n    _this = _super.call(this, props);\n\n    _this.canAddServer = function () {\n      var hostValid = _this.state.isHostsValid;\n      var portNumberValid = _this.state.newPortNumber.length > 0 && !isNaN(Number(_this.state.newPortNumber));\n      var portNameValid = _this.state.newPortName.length > 0;\n      var tlsRequired = _this.state.newPortProtocol === 'HTTPS' || _this.state.newPortProtocol === 'TLS';\n      var tlsCertsValid = tlsRequired ? _this.state.newTlsMode === 'SIMPLE' || _this.state.newTlsMode === 'MUTUAL' ? _this.state.newTlsServerCertificate.length > 0 && _this.state.newTlsPrivateKey.length > 0 : true : true;\n      var tlsCaValid = tlsRequired && _this.state.newTlsMode === 'MUTUAL' ? _this.state.newTlsCaCertificate.length > 0 : true;\n      return hostValid && portNumberValid && portNameValid && tlsCertsValid && tlsCaValid;\n    };\n\n    _this.areValidHosts = function (hosts) {\n      if (hosts.length === 0) {\n        return false;\n      }\n\n      var isValid = true;\n\n      for (var i = 0; i < hosts.length; i++) {\n        if (!isGatewayHostValid(hosts[i])) {\n          isValid = false;\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    _this.onAddHosts = function (value, _) {\n      var hosts = value.trim().length === 0 ? [] : value.split(',').map(function (host) {\n        return host.trim();\n      });\n\n      _this.setState({\n        newHosts: hosts,\n        isHostsValid: _this.areValidHosts(hosts)\n      });\n    };\n\n    _this.onAddPortNumber = function (value, _) {\n      _this.setState({\n        newPortNumber: value.trim()\n      });\n    };\n\n    _this.onAddPortName = function (value, _) {\n      _this.setState({\n        newPortName: value.trim()\n      });\n    };\n\n    _this.onAddPortProtocol = function (value, _) {\n      _this.setState({\n        newPortProtocol: value\n      });\n    };\n\n    _this.onAddServer = function () {\n      var newServer = {\n        hosts: _this.state.newHosts,\n        port: {\n          number: +_this.state.newPortNumber,\n          name: _this.state.newPortName,\n          protocol: _this.state.newPortProtocol\n        }\n      };\n\n      if (_this.state.newPortProtocol === 'HTTPS' || _this.state.newPortProtocol === 'TLS') {\n        newServer.tls = {\n          mode: _this.state.newTlsMode\n        };\n\n        if (_this.state.newTlsMode === 'SIMPLE' || _this.state.newTlsMode === 'MUTUAL') {\n          newServer.tls.privateKey = _this.state.newTlsPrivateKey;\n          newServer.tls.serverCertificate = _this.state.newTlsServerCertificate;\n        }\n\n        if (_this.state.newTlsMode === 'MUTUAL') {\n          newServer.tls.caCertificates = _this.state.newTlsCaCertificate;\n        }\n      }\n\n      _this.setState({\n        newHosts: [],\n        isHostsValid: false,\n        newPortNumber: '',\n        newPortName: '',\n        newPortProtocol: protocols[0],\n        newTlsMode: tlsModes[1],\n        // SIMPLE\n        newTlsServerCertificate: '',\n        newTlsPrivateKey: '',\n        newTlsCaCertificate: ''\n      }, function () {\n        return _this.props.onAddServer(newServer);\n      });\n    };\n\n    _this.onAddTlsMode = function (value, _) {\n      _this.setState({\n        newTlsMode: value\n      });\n    };\n\n    _this.onAddTlsServerCertificate = function (value, _) {\n      _this.setState({\n        newTlsServerCertificate: value\n      });\n    };\n\n    _this.onAddTlsPrivateKey = function (value, _) {\n      _this.setState({\n        newTlsPrivateKey: value\n      });\n    };\n\n    _this.onAddTlsCaCertificate = function (value, _) {\n      _this.setState({\n        newTlsCaCertificate: value\n      });\n    };\n\n    _this.state = {\n      newHosts: [],\n      isHostsValid: false,\n      newPortNumber: '',\n      newPortName: '',\n      newPortProtocol: protocols[0],\n      newTlsMode: tlsModes[1],\n      // SIMPLE\n      newTlsServerCertificate: '',\n      newTlsPrivateKey: '',\n      newTlsCaCertificate: ''\n    };\n    return _this;\n  }\n\n  _createClass(ServerBuilder, [{\n    key: \"portRows\",\n    value: function portRows() {\n      var _this2 = this;\n\n      return [{\n        keys: 'gatewayPortNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.newPortNumber,\n          type: \"text\",\n          id: \"addPortNumber\",\n          \"aria-describedby\": \"add port number\",\n          name: \"addPortNumber\",\n          onChange: this.onAddPortNumber,\n          isValid: this.state.newPortNumber.length > 0 && !isNaN(Number(this.state.newPortNumber)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: this.state.newPortName,\n          type: \"text\",\n          id: \"addPortName\",\n          \"aria-describedby\": \"add port name\",\n          name: \"addPortName\",\n          onChange: this.onAddPortName,\n          isValid: this.state.newPortName.length > 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }\n        })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelect, {\n          value: this.state.newPortProtocol,\n          id: \"addPortProtocol\",\n          name: \"addPortProtocol\",\n          onChange: this.onAddPortProtocol,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }\n        }, protocols.map(function (option, index) {\n          return /*#__PURE__*/React.createElement(FormSelectOption, {\n            isDisabled: false,\n            key: 'p' + index,\n            value: option,\n            label: option,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }\n          });\n        })))]\n      }];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var showTls = this.state.newPortProtocol === 'HTTPS' || this.state.newPortProtocol === 'TLS';\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Hosts\",\n        isRequired: true,\n        fieldId: \"gateway-selector\",\n        helperText: \"One or more hosts exposed by this Gateway.\",\n        helperTextInvalid: \"Invalid hosts for this Gateway. Enter one or hosts separated by comma.\",\n        isValid: this.state.isHostsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.newHosts.join(','),\n        isRequired: true,\n        type: \"text\",\n        id: \"hosts\",\n        \"aria-describedby\": \"hosts\",\n        name: \"hosts\",\n        onChange: this.onAddHosts,\n        isValid: this.state.isHostsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Port\",\n        isRequired: true,\n        fieldId: \"server-port\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Port Level MTLS\",\n        cells: portHeader,\n        rows: this.portRows(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }\n      }))), showTls && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"TLS Mode\",\n        isRequired: true,\n        fieldId: \"addTlsMode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormSelect, {\n        value: this.state.newTlsMode,\n        id: \"addTlsMode\",\n        name: \"addTlsMode\",\n        onChange: this.onAddTlsMode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }\n      }, tlsModes.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(FormSelectOption, {\n          isDisabled: false,\n          key: 'p' + index,\n          value: option,\n          label: option,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }\n        });\n      }))), showTls && (this.state.newTlsMode === 'SIMPLE' || this.state.newTlsMode === 'MUTUAL') && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Server Certificate\",\n        isRequired: true,\n        fieldId: \"server-certificate\",\n        isValid: this.state.newTlsServerCertificate.length > 0,\n        helperTextInvalid: 'The path to the file holding the server-side TLS certificate to use.',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.newTlsServerCertificate,\n        isRequired: true,\n        type: \"text\",\n        id: \"server-certificate\",\n        \"aria-describedby\": \"server-certificate\",\n        name: \"server-certificate\",\n        onChange: this.onAddTlsServerCertificate,\n        isValid: this.state.newTlsServerCertificate.length > 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Private Key\",\n        isRequired: true,\n        fieldId: \"private-key\",\n        isValid: this.state.newTlsPrivateKey.length > 0,\n        helperTextInvalid: 'The path to the file holding the server’s private key.',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.newTlsPrivateKey,\n        isRequired: true,\n        type: \"text\",\n        id: \"private-key\",\n        \"aria-describedby\": \"private-key\",\n        name: \"private-key\",\n        onChange: this.onAddTlsPrivateKey,\n        isValid: this.state.newTlsPrivateKey.length > 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }))), showTls && this.state.newTlsMode === 'MUTUAL' && /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"CA Certificate\",\n        isRequired: true,\n        fieldId: \"ca-certificate\",\n        isValid: this.state.newTlsCaCertificate.length > 0,\n        helperTextInvalid: 'The path to a file containing certificate authority certificates to use in verifying a presented client side certificate.',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        value: this.state.newTlsCaCertificate,\n        isRequired: true,\n        type: \"text\",\n        id: \"ca-certificate\",\n        \"aria-describedby\": \"ca-certificate\",\n        name: \"ca-certificate\",\n        onChange: this.onAddTlsCaCertificate,\n        isValid: this.state.newTlsCaCertificate.length > 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        fieldId: \"addRule\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 19\n          }\n        }),\n        onClick: this.onAddServer,\n        isDisabled: !this.canAddServer(),\n        className: addServerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }\n      }, \"Add Server to Server List\"), !this.canAddServer() && /*#__PURE__*/React.createElement(\"span\", {\n        className: warningStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 36\n        }\n      }, \"A Server needs Hosts and Port sections defined\")));\n    }\n  }]);\n\n  return ServerBuilder;\n}(React.Component);\n\nexport default ServerBuilder;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/IstioConfigNew/GatewayForm/ServerBuilder.tsx"],"names":["React","Button","FormGroup","FormSelect","FormSelectOption","TextInputBase","TextInput","cellWidth","Table","TableBody","TableHeader","style","PFColors","PlusCircleIcon","isGatewayHostValid","warningStyle","marginLeft","color","Red100","textAlign","addServerStyle","paddingLeft","portHeader","title","transforms","props","protocols","tlsModes","ServerBuilder","canAddServer","hostValid","state","isHostsValid","portNumberValid","newPortNumber","length","isNaN","Number","portNameValid","newPortName","tlsRequired","newPortProtocol","tlsCertsValid","newTlsMode","newTlsServerCertificate","newTlsPrivateKey","tlsCaValid","newTlsCaCertificate","areValidHosts","hosts","isValid","i","onAddHosts","value","_","trim","split","map","host","setState","newHosts","onAddPortNumber","onAddPortName","onAddPortProtocol","onAddServer","newServer","port","number","name","protocol","tls","mode","privateKey","serverCertificate","caCertificates","onAddTlsMode","onAddTlsServerCertificate","onAddTlsPrivateKey","onAddTlsCaCertificate","keys","cells","option","index","showTls","join","portRows","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, FormGroup, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { TextInputBase as TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../components/Pf/PfColors';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { isGatewayHostValid } from '../../../utils/IstioConfigUtils';\nimport { Server } from '../../../types/IstioObjects';\n\ntype Props = {\n  onAddServer: (server: Server) => void;\n};\n\ntype State = {\n  newHosts: string[];\n  isHostsValid: boolean;\n  newPortNumber: string;\n  newPortName: string;\n  newPortProtocol: string;\n  newTlsMode: string;\n  newTlsServerCertificate: string;\n  newTlsPrivateKey: string;\n  newTlsCaCertificate: string;\n};\n\nconst warningStyle = style({\n  marginLeft: 25,\n  color: PFColors.Red100,\n  textAlign: 'center'\n});\n\nconst addServerStyle = style({\n  marginLeft: 0,\n  paddingLeft: 0\n});\n\nconst portHeader: ICell[] = [\n  {\n    title: 'Port Number',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Port Name',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  },\n  {\n    title: 'Protocol',\n    transforms: [cellWidth(20) as any],\n    props: {}\n  }\n];\n\nconst protocols = ['HTTP', 'HTTPS', 'GRPC', 'HTTP2', 'MONGO', 'TCP', 'TLS'];\n\nconst tlsModes = ['PASSTHROUGH', 'SIMPLE', 'MUTUAL', 'AUTO_PASSTHROUGH', 'ISTIO_MUTUAL'];\n\nclass ServerBuilder extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      newHosts: [],\n      isHostsValid: false,\n      newPortNumber: '',\n      newPortName: '',\n      newPortProtocol: protocols[0],\n      newTlsMode: tlsModes[1], // SIMPLE\n      newTlsServerCertificate: '',\n      newTlsPrivateKey: '',\n      newTlsCaCertificate: ''\n    };\n  }\n\n  canAddServer = (): boolean => {\n    const hostValid = this.state.isHostsValid;\n    const portNumberValid = this.state.newPortNumber.length > 0 && !isNaN(Number(this.state.newPortNumber));\n    const portNameValid = this.state.newPortName.length > 0;\n    const tlsRequired = this.state.newPortProtocol === 'HTTPS' || this.state.newPortProtocol === 'TLS';\n    const tlsCertsValid = tlsRequired\n      ? this.state.newTlsMode === 'SIMPLE' || this.state.newTlsMode === 'MUTUAL'\n        ? this.state.newTlsServerCertificate.length > 0 && this.state.newTlsPrivateKey.length > 0\n        : true\n      : true;\n    const tlsCaValid =\n      tlsRequired && this.state.newTlsMode === 'MUTUAL' ? this.state.newTlsCaCertificate.length > 0 : true;\n    return hostValid && portNumberValid && portNameValid && tlsCertsValid && tlsCaValid;\n  };\n\n  areValidHosts = (hosts: string[]): boolean => {\n    if (hosts.length === 0) {\n      return false;\n    }\n    let isValid = true;\n    for (let i = 0; i < hosts.length; i++) {\n      if (!isGatewayHostValid(hosts[i])) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  };\n\n  onAddHosts = (value: string, _) => {\n    const hosts = value.trim().length === 0 ? [] : value.split(',').map(host => host.trim());\n    this.setState({\n      newHosts: hosts,\n      isHostsValid: this.areValidHosts(hosts)\n    });\n  };\n\n  onAddPortNumber = (value: string, _) => {\n    this.setState({\n      newPortNumber: value.trim()\n    });\n  };\n\n  onAddPortName = (value: string, _) => {\n    this.setState({\n      newPortName: value.trim()\n    });\n  };\n\n  onAddPortProtocol = (value: string, _) => {\n    this.setState({\n      newPortProtocol: value\n    });\n  };\n\n  onAddServer = () => {\n    const newServer: Server = {\n      hosts: this.state.newHosts,\n      port: {\n        number: +this.state.newPortNumber,\n        name: this.state.newPortName,\n        protocol: this.state.newPortProtocol\n      }\n    };\n    if (this.state.newPortProtocol === 'HTTPS' || this.state.newPortProtocol === 'TLS') {\n      newServer.tls = {\n        mode: this.state.newTlsMode\n      };\n      if (this.state.newTlsMode === 'SIMPLE' || this.state.newTlsMode === 'MUTUAL') {\n        newServer.tls.privateKey = this.state.newTlsPrivateKey;\n        newServer.tls.serverCertificate = this.state.newTlsServerCertificate;\n      }\n      if (this.state.newTlsMode === 'MUTUAL') {\n        newServer.tls.caCertificates = this.state.newTlsCaCertificate;\n      }\n    }\n    this.setState(\n      {\n        newHosts: [],\n        isHostsValid: false,\n        newPortNumber: '',\n        newPortName: '',\n        newPortProtocol: protocols[0],\n        newTlsMode: tlsModes[1], // SIMPLE\n        newTlsServerCertificate: '',\n        newTlsPrivateKey: '',\n        newTlsCaCertificate: ''\n      },\n      () => this.props.onAddServer(newServer)\n    );\n  };\n\n  onAddTlsMode = (value: string, _) => {\n    this.setState({\n      newTlsMode: value\n    });\n  };\n\n  onAddTlsServerCertificate = (value: string, _) => {\n    this.setState({\n      newTlsServerCertificate: value\n    });\n  };\n\n  onAddTlsPrivateKey = (value: string, _) => {\n    this.setState({\n      newTlsPrivateKey: value\n    });\n  };\n\n  onAddTlsCaCertificate = (value: string, _) => {\n    this.setState({\n      newTlsCaCertificate: value\n    });\n  };\n\n  portRows() {\n    return [\n      {\n        keys: 'gatewayPortNew',\n        cells: [\n          <>\n            <TextInput\n              value={this.state.newPortNumber}\n              type=\"text\"\n              id=\"addPortNumber\"\n              aria-describedby=\"add port number\"\n              name=\"addPortNumber\"\n              onChange={this.onAddPortNumber}\n              isValid={this.state.newPortNumber.length > 0 && !isNaN(Number(this.state.newPortNumber))}\n            />\n          </>,\n          <>\n            <TextInput\n              value={this.state.newPortName}\n              type=\"text\"\n              id=\"addPortName\"\n              aria-describedby=\"add port name\"\n              name=\"addPortName\"\n              onChange={this.onAddPortName}\n              isValid={this.state.newPortName.length > 0}\n            />\n          </>,\n          <>\n            <FormSelect\n              value={this.state.newPortProtocol}\n              id=\"addPortProtocol\"\n              name=\"addPortProtocol\"\n              onChange={this.onAddPortProtocol}\n            >\n              {protocols.map((option, index) => (\n                <FormSelectOption isDisabled={false} key={'p' + index} value={option} label={option} />\n              ))}\n            </FormSelect>\n          </>\n        ]\n      }\n    ];\n  }\n\n  render() {\n    const showTls = this.state.newPortProtocol === 'HTTPS' || this.state.newPortProtocol === 'TLS';\n    return (\n      <>\n        <FormGroup\n          label=\"Hosts\"\n          isRequired={true}\n          fieldId=\"gateway-selector\"\n          helperText=\"One or more hosts exposed by this Gateway.\"\n          helperTextInvalid=\"Invalid hosts for this Gateway. Enter one or hosts separated by comma.\"\n          isValid={this.state.isHostsValid}\n        >\n          <TextInput\n            value={this.state.newHosts.join(',')}\n            isRequired={true}\n            type=\"text\"\n            id=\"hosts\"\n            aria-describedby=\"hosts\"\n            name=\"hosts\"\n            onChange={this.onAddHosts}\n            isValid={this.state.isHostsValid}\n          />\n        </FormGroup>\n        <FormGroup label=\"Port\" isRequired={true} fieldId=\"server-port\">\n          <Table aria-label=\"Port Level MTLS\" cells={portHeader} rows={this.portRows()}>\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </FormGroup>\n        {showTls && (\n          <FormGroup label=\"TLS Mode\" isRequired={true} fieldId=\"addTlsMode\">\n            <FormSelect value={this.state.newTlsMode} id=\"addTlsMode\" name=\"addTlsMode\" onChange={this.onAddTlsMode}>\n              {tlsModes.map((option, index) => (\n                <FormSelectOption isDisabled={false} key={'p' + index} value={option} label={option} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n        )}\n        {showTls && (this.state.newTlsMode === 'SIMPLE' || this.state.newTlsMode === 'MUTUAL') && (\n          <>\n            <FormGroup\n              label=\"Server Certificate\"\n              isRequired={true}\n              fieldId=\"server-certificate\"\n              isValid={this.state.newTlsServerCertificate.length > 0}\n              helperTextInvalid={'The path to the file holding the server-side TLS certificate to use.'}\n            >\n              <TextInput\n                value={this.state.newTlsServerCertificate}\n                isRequired={true}\n                type=\"text\"\n                id=\"server-certificate\"\n                aria-describedby=\"server-certificate\"\n                name=\"server-certificate\"\n                onChange={this.onAddTlsServerCertificate}\n                isValid={this.state.newTlsServerCertificate.length > 0}\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Private Key\"\n              isRequired={true}\n              fieldId=\"private-key\"\n              isValid={this.state.newTlsPrivateKey.length > 0}\n              helperTextInvalid={'The path to the file holding the server’s private key.'}\n            >\n              <TextInput\n                value={this.state.newTlsPrivateKey}\n                isRequired={true}\n                type=\"text\"\n                id=\"private-key\"\n                aria-describedby=\"private-key\"\n                name=\"private-key\"\n                onChange={this.onAddTlsPrivateKey}\n                isValid={this.state.newTlsPrivateKey.length > 0}\n              />\n            </FormGroup>\n          </>\n        )}\n        {showTls && this.state.newTlsMode === 'MUTUAL' && (\n          <FormGroup\n            label=\"CA Certificate\"\n            isRequired={true}\n            fieldId=\"ca-certificate\"\n            isValid={this.state.newTlsCaCertificate.length > 0}\n            helperTextInvalid={\n              'The path to a file containing certificate authority certificates to use in verifying a presented client side certificate.'\n            }\n          >\n            <TextInput\n              value={this.state.newTlsCaCertificate}\n              isRequired={true}\n              type=\"text\"\n              id=\"ca-certificate\"\n              aria-describedby=\"ca-certificate\"\n              name=\"ca-certificate\"\n              onChange={this.onAddTlsCaCertificate}\n              isValid={this.state.newTlsCaCertificate.length > 0}\n            />\n          </FormGroup>\n        )}\n        <FormGroup fieldId=\"addRule\">\n          <Button\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            onClick={this.onAddServer}\n            isDisabled={!this.canAddServer()}\n            className={addServerStyle}\n          >\n            Add Server to Server List\n          </Button>\n          {!this.canAddServer() && <span className={warningStyle}>A Server needs Hosts and Port sections defined</span>}\n        </FormGroup>\n      </>\n    );\n  }\n}\n\nexport default ServerBuilder;\n"]},"metadata":{},"sourceType":"module"}
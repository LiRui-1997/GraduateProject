{"ast":null,"code":"import { NodeType } from '../Graph';\nimport { aggregate, checkExpr, getRateHealthConfig, transformEdgeResponses } from './utils';\nimport { calculateStatusGraph } from './GraphEdgeStatus';\nimport { RateHealth } from '../HealthAnnotation';\n/*\n Calculate Health for DetailsTraffic\n*/\n\nexport var getTrafficHealth = function getTrafficHealth(item, direction) {\n  // Get the annotation configuration\n  var annotation = item.node.type !== NodeType.APP && item.node.healthAnnotation ? new RateHealth(item.node.healthAnnotation) : undefined; // Get the configuration for the node\n\n  var config = annotation && annotation.toleranceConfig ? annotation.toleranceConfig : getRateHealthConfig(item.node.namespace, item.node.name, item.node.type).tolerance; // Get tolerances of the configuration for the direction provided\n\n  var tolerances = config.filter(function (tol) {\n    return checkExpr(tol.direction, direction);\n  }); // Get the responses like a item with traffic\n\n  var traffic = item.traffic; // Aggregate the responses and transform them for calculate the status\n\n  var agg = aggregate(transformEdgeResponses(traffic.responses, traffic.protocol), tolerances, true);\n  return calculateStatusGraph(agg, traffic.responses).status;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/ErrorRate/TrafficHealth.ts"],"names":["NodeType","aggregate","checkExpr","getRateHealthConfig","transformEdgeResponses","calculateStatusGraph","RateHealth","getTrafficHealth","item","direction","annotation","node","type","APP","healthAnnotation","undefined","config","toleranceConfig","namespace","name","tolerance","tolerances","filter","tol","traffic","agg","responses","protocol","status"],"mappings":"AAEA,SAASA,QAAT,QAA8C,UAA9C;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,mBAA/B,EAAoDC,sBAApD,QAAkF,SAAlF;AACA,SAASC,oBAAT,QAAqC,mBAArC;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAoBC,SAApB,EAA8D;AAC5F;AACA,MAAMC,UAAU,GACdF,IAAI,CAACG,IAAL,CAAUC,IAAV,KAAmBZ,QAAQ,CAACa,GAA5B,IAAmCL,IAAI,CAACG,IAAL,CAAUG,gBAA7C,GACI,IAAIR,UAAJ,CAAeE,IAAI,CAACG,IAAL,CAAUG,gBAAzB,CADJ,GAEIC,SAHN,CAF4F,CAM5F;;AACA,MAAMC,MAAM,GACVN,UAAU,IAAIA,UAAU,CAACO,eAAzB,GACIP,UAAU,CAACO,eADf,GAEId,mBAAmB,CAACK,IAAI,CAACG,IAAL,CAAUO,SAAX,EAAsBV,IAAI,CAACG,IAAL,CAAUQ,IAAhC,EAAsCX,IAAI,CAACG,IAAL,CAAUC,IAAhD,CAAnB,CAAyEQ,SAH/E,CAP4F,CAY5F;;AACA,MAAMC,UAAU,GAAGL,MAAM,CAACM,MAAP,CAAc,UAAAC,GAAG;AAAA,WAAIrB,SAAS,CAACqB,GAAG,CAACd,SAAL,EAAgBA,SAAhB,CAAb;AAAA,GAAjB,CAAnB,CAb4F,CAc5F;;AACA,MAAMe,OAAO,GAAGhB,IAAI,CAACgB,OAArB,CAf4F,CAgB5F;;AACA,MAAMC,GAAG,GAAGxB,SAAS,CAACG,sBAAsB,CAACoB,OAAO,CAACE,SAAT,EAAoBF,OAAO,CAACG,QAA5B,CAAvB,EAA8DN,UAA9D,EAA0E,IAA1E,CAArB;AACA,SAAOhB,oBAAoB,CAACoB,GAAD,EAAMD,OAAO,CAACE,SAAd,CAApB,CAA6CE,MAApD;AACD,CAnBM","sourcesContent":["import { Direction } from '../MetricsOptions';\nimport { ThresholdStatus } from '../Health';\nimport { NodeType, ProtocolWithTraffic } from '../Graph';\nimport { aggregate, checkExpr, getRateHealthConfig, transformEdgeResponses } from './utils';\nimport { calculateStatusGraph } from './GraphEdgeStatus';\nimport { TrafficItem } from 'components/TrafficList/TrafficDetails';\nimport { RateHealth } from '../HealthAnnotation';\n\n/*\n Calculate Health for DetailsTraffic\n*/\nexport const getTrafficHealth = (item: TrafficItem, direction: Direction): ThresholdStatus => {\n  // Get the annotation configuration\n  const annotation =\n    item.node.type !== NodeType.APP && item.node.healthAnnotation\n      ? new RateHealth(item.node.healthAnnotation)\n      : undefined;\n  // Get the configuration for the node\n  const config =\n    annotation && annotation.toleranceConfig\n      ? annotation.toleranceConfig\n      : getRateHealthConfig(item.node.namespace, item.node.name, item.node.type).tolerance;\n\n  // Get tolerances of the configuration for the direction provided\n  const tolerances = config.filter(tol => checkExpr(tol.direction, direction));\n  // Get the responses like a item with traffic\n  const traffic = item.traffic as ProtocolWithTraffic;\n  // Aggregate the responses and transform them for calculate the status\n  const agg = aggregate(transformEdgeResponses(traffic.responses, traffic.protocol), tolerances, true);\n  return calculateStatusGraph(agg, traffic.responses).status;\n};\n"]},"metadata":{},"sourceType":"module"}
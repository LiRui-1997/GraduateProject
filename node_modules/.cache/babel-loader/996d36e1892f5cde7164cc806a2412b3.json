{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { FILTER_ACTION_APPEND } from '../../types/Filters';\nimport { calculateErrorRate } from '../../types/ErrorRate';\nimport { hasHealth } from '../../types/Health';\nimport { istioSidecarFilter, healthFilter, getPresenceFilterValue, getFilterSelectedValues, filterByHealth, labelFilter } from '../../components/Filters/CommonFilters';\nimport { hasMissingSidecar } from '../../components/VirtualList/Config';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { filterByLabel } from '../../helpers/LabelFilterHelper';\nimport { istioTypeFilter } from '../IstioConfigList/FiltersAndSorts';\nexport var sortFields = [{\n  id: 'namespace',\n  title: 'Namespace',\n  isNumeric: false,\n  param: 'ns',\n  compare: function compare(a, b) {\n    var sortValue = a.namespace.localeCompare(b.namespace);\n\n    if (sortValue === 0) {\n      sortValue = a.name.localeCompare(b.name);\n    }\n\n    return sortValue;\n  }\n}, {\n  id: 'appname',\n  title: 'App Name',\n  isNumeric: false,\n  param: 'wn',\n  compare: function compare(a, b) {\n    return a.name.localeCompare(b.name);\n  }\n}, {\n  id: 'details',\n  title: 'Details',\n  isNumeric: false,\n  param: 'is',\n  compare: function compare(a, b) {\n    // First sort by missing sidecar\n    var aSC = hasMissingSidecar(a) ? 1 : 0;\n    var bSC = hasMissingSidecar(b) ? 1 : 0;\n\n    if (aSC !== bSC) {\n      return aSC - bSC;\n    } // Second by Details\n\n\n    var iRefA = a.istioReferences;\n    var iRefB = b.istioReferences;\n    var cmpRefs = compareObjectReferences(iRefA, iRefB);\n\n    if (cmpRefs !== 0) {\n      return cmpRefs;\n    } // Finally by name\n\n\n    return a.name.localeCompare(b.name);\n  }\n}, {\n  id: 'health',\n  title: 'Health',\n  isNumeric: false,\n  param: 'he',\n  compare: function compare(a, b) {\n    if (hasHealth(a) && hasHealth(b)) {\n      var statusForA = a.health.getGlobalStatus();\n      var statusForB = b.health.getGlobalStatus();\n\n      if (statusForA.priority === statusForB.priority) {\n        // If both apps have same health status, use error rate to determine order.\n        var ratioA = calculateErrorRate(a.namespace, a.name, 'app', a.health.requests).errorRatio.global.status.value;\n        var ratioB = calculateErrorRate(b.namespace, b.name, 'app', b.health.requests).errorRatio.global.status.value;\n        return ratioA === ratioB ? a.name.localeCompare(b.name) : ratioB - ratioA;\n      }\n\n      return statusForB.priority - statusForA.priority;\n    } else {\n      return 0;\n    }\n  }\n}];\nvar appNameFilter = {\n  id: 'appname',\n  title: 'App Name',\n  placeholder: 'Filter by App Name',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\nexport var availableFilters = [appNameFilter, istioSidecarFilter, istioTypeFilter, healthFilter, labelFilter];\n/** Filter Method */\n\nvar filterByName = function filterByName(items, names) {\n  return items.filter(function (item) {\n    var appNameFiltered = true;\n\n    if (names.length > 0) {\n      appNameFiltered = false;\n\n      for (var i = 0; i < names.length; i++) {\n        if (item.name.includes(names[i])) {\n          appNameFiltered = true;\n          break;\n        }\n      }\n    }\n\n    return appNameFiltered;\n  });\n};\n\nvar filterByIstioSidecar = function filterByIstioSidecar(items, istioSidecar) {\n  return items.filter(function (item) {\n    return item.istioSidecar === istioSidecar;\n  });\n};\n\nvar filterByIstioType = function filterByIstioType(items, istioTypes) {\n  return items.filter(function (item) {\n    return item.istioReferences.filter(function (ref) {\n      return istioTypes.includes(ref.objectType);\n    }).length !== 0;\n  });\n};\n\nexport var filterBy = function filterBy(appsList, filters) {\n  var ret = appsList;\n  var istioSidecar = getPresenceFilterValue(istioSidecarFilter, filters);\n\n  if (istioSidecar !== undefined) {\n    ret = filterByIstioSidecar(ret, istioSidecar);\n  }\n\n  var appNamesSelected = getFilterSelectedValues(appNameFilter, filters);\n\n  if (appNamesSelected.length > 0) {\n    ret = filterByName(ret, appNamesSelected);\n  }\n\n  var appLabelsSelected = getFilterSelectedValues(labelFilter, filters);\n\n  if (appLabelsSelected.length > 0) {\n    ret = filterByLabel(ret, appLabelsSelected, filters.op);\n  } // We may have to perform a second round of filtering, using data fetched asynchronously (health)\n  // If not, exit fast\n\n\n  var healthSelected = getFilterSelectedValues(healthFilter, filters);\n\n  if (healthSelected.length > 0) {\n    return filterByHealth(ret, healthSelected);\n  }\n\n  var istioTypeSelected = getFilterSelectedValues(istioTypeFilter, filters);\n\n  if (istioTypeSelected.length > 0) {\n    return filterByIstioType(ret, istioTypeSelected);\n  }\n\n  return ret;\n};\n/** Sort Method */\n\nexport var sortAppsItems = function sortAppsItems(unsorted, sortField, isAscending) {\n  if (sortField.title === 'Health') {\n    // In the case of health sorting, we may not have all health promises ready yet\n    // So we need to get them all before actually sorting\n    var allHealthPromises = unsorted.map(function (item) {\n      return item.healthPromise.then(function (health) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          health: health\n        });\n      });\n    });\n    return Promise.all(allHealthPromises).then(function (arr) {\n      return arr.sort(isAscending ? sortField.compare : function (a, b) {\n        return sortField.compare(b, a);\n      });\n    });\n  }\n\n  var sorted = unsorted.sort(isAscending ? sortField.compare : function (a, b) {\n    return sortField.compare(b, a);\n  });\n  return Promise.resolve(sorted);\n};\nexport var compareObjectReference = function compareObjectReference(a, b) {\n  var cmpObjectType = a.objectType.localeCompare(b.objectType);\n\n  if (cmpObjectType !== 0) {\n    return cmpObjectType;\n  }\n\n  var cmpName = a.name.localeCompare(b.name);\n\n  if (cmpName !== 0) {\n    return cmpName;\n  }\n\n  return a.namespace.localeCompare(b.namespace);\n}; // It assumes that is sorted\n\nexport var compareObjectReferences = function compareObjectReferences(a, b) {\n  if (a.length === 0 && b.length === 0) {\n    return 0;\n  }\n\n  if (a.length === 0 && b.length > 0) {\n    return -1;\n  }\n\n  if (a.length > 0 && b.length === 0) {\n    return 1;\n  }\n\n  if (a.length !== b.length) {\n    return a.length - b.length;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    var cmp = compareObjectReference(a[i], b[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  return 0;\n}; // Remove duplicates and sort references\n\nexport var sortIstioReferences = function sortIstioReferences(unsorted, isAscending) {\n  var unique = unsorted.filter(function (item, index) {\n    return unsorted.indexOf(item) === index;\n  });\n  return unique.sort(function (a, b) {\n    return isAscending ? compareObjectReference(a, b) : compareObjectReference(b, a);\n  });\n};","map":{"version":3,"sources":["/root/GraduateProject/src/pages/AppList/FiltersAndSorts.ts"],"names":["FILTER_ACTION_APPEND","calculateErrorRate","hasHealth","istioSidecarFilter","healthFilter","getPresenceFilterValue","getFilterSelectedValues","filterByHealth","labelFilter","hasMissingSidecar","TextInputTypes","filterByLabel","istioTypeFilter","sortFields","id","title","isNumeric","param","compare","a","b","sortValue","namespace","localeCompare","name","aSC","bSC","iRefA","istioReferences","iRefB","cmpRefs","compareObjectReferences","statusForA","health","getGlobalStatus","statusForB","priority","ratioA","requests","errorRatio","global","status","value","ratioB","appNameFilter","placeholder","filterType","text","action","filterValues","availableFilters","filterByName","items","names","filter","item","appNameFiltered","length","i","includes","filterByIstioSidecar","istioSidecar","filterByIstioType","istioTypes","ref","objectType","filterBy","appsList","filters","ret","undefined","appNamesSelected","appLabelsSelected","op","healthSelected","istioTypeSelected","sortAppsItems","unsorted","sortField","isAscending","allHealthPromises","map","healthPromise","then","Promise","all","arr","sort","sorted","resolve","compareObjectReference","cmpObjectType","cmpName","cmp","sortIstioReferences","unique","index","indexOf"],"mappings":"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","sourcesContent":["import { ActiveFiltersInfo, FILTER_ACTION_APPEND, FilterType } from '../../types/Filters';\nimport { calculateErrorRate } from '../../types/ErrorRate';\nimport { AppListItem } from '../../types/AppList';\nimport { SortField } from '../../types/SortFilters';\nimport { WithAppHealth, hasHealth } from '../../types/Health';\nimport {\n  istioSidecarFilter,\n  healthFilter,\n  getPresenceFilterValue,\n  getFilterSelectedValues,\n  filterByHealth,\n  labelFilter\n} from '../../components/Filters/CommonFilters';\nimport { hasMissingSidecar } from '../../components/VirtualList/Config';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { filterByLabel } from '../../helpers/LabelFilterHelper';\nimport { istioTypeFilter } from '../IstioConfigList/FiltersAndSorts';\nimport { ObjectReference } from '../../types/IstioObjects';\n\nexport const sortFields: SortField<AppListItem>[] = [\n  {\n    id: 'namespace',\n    title: 'Namespace',\n    isNumeric: false,\n    param: 'ns',\n    compare: (a, b) => {\n      let sortValue = a.namespace.localeCompare(b.namespace);\n      if (sortValue === 0) {\n        sortValue = a.name.localeCompare(b.name);\n      }\n      return sortValue;\n    }\n  },\n  {\n    id: 'appname',\n    title: 'App Name',\n    isNumeric: false,\n    param: 'wn',\n    compare: (a, b) => a.name.localeCompare(b.name)\n  },\n  {\n    id: 'details',\n    title: 'Details',\n    isNumeric: false,\n    param: 'is',\n    compare: (a, b) => {\n      // First sort by missing sidecar\n      const aSC = hasMissingSidecar(a) ? 1 : 0;\n      const bSC = hasMissingSidecar(b) ? 1 : 0;\n      if (aSC !== bSC) {\n        return aSC - bSC;\n      }\n\n      // Second by Details\n      const iRefA = a.istioReferences;\n      const iRefB = b.istioReferences;\n      const cmpRefs = compareObjectReferences(iRefA, iRefB);\n      if (cmpRefs !== 0) {\n        return cmpRefs;\n      }\n\n      // Finally by name\n      return a.name.localeCompare(b.name);\n    }\n  },\n  {\n    id: 'health',\n    title: 'Health',\n    isNumeric: false,\n    param: 'he',\n    compare: (a, b) => {\n      if (hasHealth(a) && hasHealth(b)) {\n        const statusForA = a.health.getGlobalStatus();\n        const statusForB = b.health.getGlobalStatus();\n\n        if (statusForA.priority === statusForB.priority) {\n          // If both apps have same health status, use error rate to determine order.\n          const ratioA = calculateErrorRate(a.namespace, a.name, 'app', a.health.requests).errorRatio.global.status\n            .value;\n          const ratioB = calculateErrorRate(b.namespace, b.name, 'app', b.health.requests).errorRatio.global.status\n            .value;\n          return ratioA === ratioB ? a.name.localeCompare(b.name) : ratioB - ratioA;\n        }\n\n        return statusForB.priority - statusForA.priority;\n      } else {\n        return 0;\n      }\n    }\n  }\n];\n\nconst appNameFilter: FilterType = {\n  id: 'appname',\n  title: 'App Name',\n  placeholder: 'Filter by App Name',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: []\n};\n\nexport const availableFilters: FilterType[] = [\n  appNameFilter,\n  istioSidecarFilter,\n  istioTypeFilter,\n  healthFilter,\n  labelFilter\n];\n\n/** Filter Method */\n\nconst filterByName = (items: AppListItem[], names: string[]): AppListItem[] => {\n  return items.filter(item => {\n    let appNameFiltered = true;\n    if (names.length > 0) {\n      appNameFiltered = false;\n      for (let i = 0; i < names.length; i++) {\n        if (item.name.includes(names[i])) {\n          appNameFiltered = true;\n          break;\n        }\n      }\n    }\n    return appNameFiltered;\n  });\n};\n\nconst filterByIstioSidecar = (items: AppListItem[], istioSidecar: boolean): AppListItem[] => {\n  return items.filter(item => item.istioSidecar === istioSidecar);\n};\n\nconst filterByIstioType = (items: AppListItem[], istioTypes: string[]): AppListItem[] => {\n  return items.filter(item => item.istioReferences.filter(ref => istioTypes.includes(ref.objectType)).length !== 0);\n};\n\nexport const filterBy = (\n  appsList: AppListItem[],\n  filters: ActiveFiltersInfo\n): Promise<AppListItem[]> | AppListItem[] => {\n  let ret = appsList;\n  const istioSidecar = getPresenceFilterValue(istioSidecarFilter, filters);\n  if (istioSidecar !== undefined) {\n    ret = filterByIstioSidecar(ret, istioSidecar);\n  }\n\n  const appNamesSelected = getFilterSelectedValues(appNameFilter, filters);\n  if (appNamesSelected.length > 0) {\n    ret = filterByName(ret, appNamesSelected);\n  }\n\n  const appLabelsSelected = getFilterSelectedValues(labelFilter, filters);\n  if (appLabelsSelected.length > 0) {\n    ret = filterByLabel(ret, appLabelsSelected, filters.op) as AppListItem[];\n  }\n\n  // We may have to perform a second round of filtering, using data fetched asynchronously (health)\n  // If not, exit fast\n  const healthSelected = getFilterSelectedValues(healthFilter, filters);\n  if (healthSelected.length > 0) {\n    return filterByHealth(ret, healthSelected);\n  }\n\n  const istioTypeSelected = getFilterSelectedValues(istioTypeFilter, filters);\n  if (istioTypeSelected.length > 0) {\n    return filterByIstioType(ret, istioTypeSelected);\n  }\n  return ret;\n};\n\n/** Sort Method */\n\nexport const sortAppsItems = (\n  unsorted: AppListItem[],\n  sortField: SortField<AppListItem>,\n  isAscending: boolean\n): Promise<AppListItem[]> => {\n  if (sortField.title === 'Health') {\n    // In the case of health sorting, we may not have all health promises ready yet\n    // So we need to get them all before actually sorting\n    const allHealthPromises: Promise<WithAppHealth<AppListItem>>[] = unsorted.map(item => {\n      return item.healthPromise.then((health): WithAppHealth<AppListItem> => ({ ...item, health }));\n    });\n    return Promise.all(allHealthPromises).then(arr => {\n      return arr.sort(isAscending ? sortField.compare : (a, b) => sortField.compare(b, a));\n    });\n  }\n  const sorted = unsorted.sort(isAscending ? sortField.compare : (a, b) => sortField.compare(b, a));\n  return Promise.resolve(sorted);\n};\n\nexport const compareObjectReference = (a: ObjectReference, b: ObjectReference): number => {\n  const cmpObjectType = a.objectType.localeCompare(b.objectType);\n  if (cmpObjectType !== 0) {\n    return cmpObjectType;\n  }\n  const cmpName = a.name.localeCompare(b.name);\n  if (cmpName !== 0) {\n    return cmpName;\n  }\n\n  return a.namespace.localeCompare(b.namespace);\n};\n\n// It assumes that is sorted\nexport const compareObjectReferences = (a: ObjectReference[], b: ObjectReference[]): number => {\n  if (a.length === 0 && b.length === 0) {\n    return 0;\n  }\n  if (a.length === 0 && b.length > 0) {\n    return -1;\n  }\n  if (a.length > 0 && b.length === 0) {\n    return 1;\n  }\n  if (a.length !== b.length) {\n    return a.length - b.length;\n  }\n  for (let i = 0; i < a.length; i++) {\n    const cmp = compareObjectReference(a[i], b[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  return 0;\n};\n\n// Remove duplicates and sort references\nexport const sortIstioReferences = (unsorted: ObjectReference[], isAscending: boolean): ObjectReference[] => {\n  const unique = unsorted.filter((item, index) => unsorted.indexOf(item) === index);\n  return unique.sort((a, b) => {\n    return isAscending ? compareObjectReference(a, b) : compareObjectReference(b, a);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
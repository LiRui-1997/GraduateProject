{"ast":null,"code":"import _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nexport var TrafficPointRenderer = function TrafficPointRenderer() {\n  _classCallCheck(this, TrafficPointRenderer);\n};\nexport var TrafficPointCircleRenderer = /*#__PURE__*/function (_TrafficPointRenderer) {\n  _inherits(TrafficPointCircleRenderer, _TrafficPointRenderer);\n\n  var _super = _createSuper(TrafficPointCircleRenderer);\n\n  function TrafficPointCircleRenderer(radius, backgroundColor, borderColor, lineWidth) {\n    var _this;\n\n    _classCallCheck(this, TrafficPointCircleRenderer);\n\n    _this = _super.call(this);\n    _this.radius = void 0;\n    _this.backgroundColor = void 0;\n    _this.borderColor = void 0;\n    _this.lineWidth = void 0;\n    _this.radius = radius;\n    _this.backgroundColor = backgroundColor;\n    _this.borderColor = borderColor;\n    _this.lineWidth = lineWidth;\n    return _this;\n  }\n\n  _createClass(TrafficPointCircleRenderer, [{\n    key: \"render\",\n    value: function render(context, point) {\n      context.fillStyle = this.backgroundColor;\n      context.strokeStyle = this.borderColor;\n      context.lineWidth = this.lineWidth;\n      context.beginPath();\n      context.arc(point.x, point.y, this.radius, 0, 2 * Math.PI, true);\n      context.stroke();\n      context.fill();\n    }\n  }]);\n\n  return TrafficPointCircleRenderer;\n}(TrafficPointRenderer);\nexport var TrafficPointConcentricDiamondRenderer = /*#__PURE__*/function (_TrafficPointRenderer2) {\n  _inherits(TrafficPointConcentricDiamondRenderer, _TrafficPointRenderer2);\n\n  var _super2 = _createSuper(TrafficPointConcentricDiamondRenderer);\n\n  function TrafficPointConcentricDiamondRenderer(outerDiamond, innerDiamond) {\n    var _this2;\n\n    _classCallCheck(this, TrafficPointConcentricDiamondRenderer);\n\n    _this2 = _super2.call(this);\n    _this2.outerDiamond = void 0;\n    _this2.innerDiamond = void 0;\n    _this2.outerDiamond = outerDiamond;\n    _this2.innerDiamond = innerDiamond;\n    return _this2;\n  }\n\n  _createClass(TrafficPointConcentricDiamondRenderer, [{\n    key: \"render\",\n    value: function render(context, point) {\n      TrafficPointConcentricDiamondRenderer.diamondPath(context, point, this.outerDiamond);\n      TrafficPointConcentricDiamondRenderer.diamondPath(context, point, this.innerDiamond);\n    }\n  }], [{\n    key: \"diamondPath\",\n    value: function diamondPath(context, point, diamond) {\n      context.fillStyle = diamond.backgroundColor;\n      context.strokeStyle = diamond.borderColor;\n      context.lineWidth = diamond.lineWidth;\n      context.beginPath();\n      context.moveTo(point.x, point.y - diamond.radius);\n      context.lineTo(point.x + diamond.radius, point.y);\n      context.lineTo(point.x, point.y + diamond.radius);\n      context.lineTo(point.x - diamond.radius, point.y);\n      context.lineTo(point.x, point.y - diamond.radius);\n      context.stroke();\n      context.fill();\n    }\n  }]);\n\n  return TrafficPointConcentricDiamondRenderer;\n}(TrafficPointRenderer);\nexport var Diamond = function Diamond(radius, backgroundColor, borderColor, lineWidth) {\n  _classCallCheck(this, Diamond);\n\n  this.radius = void 0;\n  this.backgroundColor = void 0;\n  this.borderColor = void 0;\n  this.lineWidth = void 0;\n  this.radius = radius;\n  this.backgroundColor = backgroundColor;\n  this.borderColor = borderColor;\n  this.lineWidth = lineWidth;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/CytoscapeGraph/TrafficAnimation/TrafficPointRenderer.ts"],"names":["TrafficPointRenderer","TrafficPointCircleRenderer","radius","backgroundColor","borderColor","lineWidth","context","point","fillStyle","strokeStyle","beginPath","arc","x","y","Math","PI","stroke","fill","TrafficPointConcentricDiamondRenderer","outerDiamond","innerDiamond","diamondPath","diamond","moveTo","lineTo","Diamond"],"mappings":"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","sourcesContent":["import { Point } from '../../../utils/MathUtils';\n\nexport abstract class TrafficPointRenderer {\n  abstract render(context: any, point: Point);\n}\n\nexport class TrafficPointCircleRenderer extends TrafficPointRenderer {\n  readonly radius: number;\n  readonly backgroundColor: string;\n  readonly borderColor: string;\n  readonly lineWidth: number;\n\n  constructor(radius: number, backgroundColor: string, borderColor: string, lineWidth: number) {\n    super();\n    this.radius = radius;\n    this.backgroundColor = backgroundColor;\n    this.borderColor = borderColor;\n    this.lineWidth = lineWidth;\n  }\n\n  render(context: any, point: Point) {\n    context.fillStyle = this.backgroundColor;\n    context.strokeStyle = this.borderColor;\n    context.lineWidth = this.lineWidth;\n    context.beginPath();\n    context.arc(point.x, point.y, this.radius, 0, 2 * Math.PI, true);\n    context.stroke();\n    context.fill();\n  }\n}\n\nexport class TrafficPointConcentricDiamondRenderer extends TrafficPointRenderer {\n  readonly outerDiamond: Diamond;\n  readonly innerDiamond: Diamond;\n\n  private static diamondPath(context: any, point: Point, diamond: Diamond) {\n    context.fillStyle = diamond.backgroundColor;\n    context.strokeStyle = diamond.borderColor;\n    context.lineWidth = diamond.lineWidth;\n    context.beginPath();\n    context.moveTo(point.x, point.y - diamond.radius);\n    context.lineTo(point.x + diamond.radius, point.y);\n    context.lineTo(point.x, point.y + diamond.radius);\n    context.lineTo(point.x - diamond.radius, point.y);\n    context.lineTo(point.x, point.y - diamond.radius);\n    context.stroke();\n    context.fill();\n  }\n\n  constructor(outerDiamond: Diamond, innerDiamond: Diamond) {\n    super();\n    this.outerDiamond = outerDiamond;\n    this.innerDiamond = innerDiamond;\n  }\n\n  render(context: any, point: Point) {\n    TrafficPointConcentricDiamondRenderer.diamondPath(context, point, this.outerDiamond);\n    TrafficPointConcentricDiamondRenderer.diamondPath(context, point, this.innerDiamond);\n  }\n}\n\nexport class Diamond {\n  radius: number;\n  backgroundColor: string;\n  borderColor: string;\n  lineWidth: number;\n\n  constructor(radius: number, backgroundColor: string, borderColor: string, lineWidth: number) {\n    this.radius = radius;\n    this.backgroundColor = backgroundColor;\n    this.borderColor = borderColor;\n    this.lineWidth = lineWidth;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/root/kiali-ui/src/pages/Graph/SummaryPanelGraph.tsx\";\nimport * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport _ from 'lodash';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { NodeType, Protocol, TrafficRate, UNKNOWN } from '../../types/Graph';\nimport { getAccumulatedTrafficRateGrpc, getAccumulatedTrafficRateHttp, getAccumulatedTrafficRateTcp } from '../../utils/TrafficRate';\nimport * as API from '../../services/Api';\nimport { getDatapoints, getFirstDatapoints, hr, shouldRefreshData, summaryBodyTabs, summaryFont, summaryHeader } from './SummaryPanelCommon';\nimport { makeCancelablePromise, PromisesRegistry } from '../../utils/CancelablePromises';\nimport { CyNode } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport ValidationSummary from 'components/Validations/ValidationSummary';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport ValidationSummaryLink from '../../components/Link/ValidationSummaryLink';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\nvar defaultMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nvar defaultState = _objectSpread({\n  graph: null,\n  loading: false,\n  metricsLoadError: null,\n  validationsMap: new Map()\n}, defaultMetricsState);\n\nvar topologyStyle = style({\n  margin: '0 1em'\n});\n\nvar SummaryPanelGraph = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelGraph, _React$Component);\n\n  var _super = _createSuper(SummaryPanelGraph);\n\n  function SummaryPanelGraph(_props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelGraph);\n\n    _this = _super.call(this, _props);\n    _this.graphTraffic = void 0;\n    _this.metricsPromise = void 0;\n    _this.validationSummaryPromises = new PromisesRegistry();\n\n    _this.getGraphTraffic = function () {\n      // when getting total traffic rates don't count requests from injected service nodes\n      var cy = _this.props.data.summaryTarget;\n      var totalEdges = cy.$(\"node[nodeType != \\\"\".concat(NodeType.SERVICE, \"\\\"][!isBox]\")).edgesTo('*');\n      var inboundEdges = cy.$(\"node[?\".concat(CyNode.isRoot, \"]\")).edgesTo('*');\n      var outboundEdges = cy.nodes().leaves(\"node[?\".concat(CyNode.isOutside, \"],[?\").concat(CyNode.isServiceEntry, \"]\")).connectedEdges();\n      return {\n        grpcIn: getAccumulatedTrafficRateGrpc(inboundEdges),\n        grpcOut: getAccumulatedTrafficRateGrpc(outboundEdges),\n        grpcTotal: getAccumulatedTrafficRateGrpc(totalEdges),\n        httpIn: getAccumulatedTrafficRateHttp(inboundEdges),\n        httpOut: getAccumulatedTrafficRateHttp(outboundEdges),\n        httpTotal: getAccumulatedTrafficRateHttp(totalEdges),\n        isGrpcRequests: _this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST),\n        tcpIn: getAccumulatedTrafficRateTcp(inboundEdges),\n        tcpOut: getAccumulatedTrafficRateTcp(outboundEdges),\n        tcpTotal: getAccumulatedTrafficRateTcp(totalEdges)\n      };\n    };\n\n    _this.countApps = function (cy) {\n      var appVersions = {};\n      cy.$(\"node[nodeType = \\\"\".concat(NodeType.APP, \"\\\"]\")).forEach(function (node) {\n        var app = node.data(CyNode.app);\n\n        if (appVersions[app] === undefined) {\n          appVersions[app] = new Set();\n        }\n\n        appVersions[app].add(node.data(CyNode.version));\n      });\n      return {\n        numApps: Object.getOwnPropertyNames(appVersions).length,\n        numVersions: Object.getOwnPropertyNames(appVersions).reduce(function (totalCount, version) {\n          return totalCount + appVersions[version].size;\n        }, 0)\n      };\n    };\n\n    _this.renderNamespacesSummary = function () {\n      return _this.props.namespaces.map(function (namespace) {\n        return _this.renderNamespace(namespace.name);\n      });\n    };\n\n    _this.renderValidations = function (ns) {\n      var validation = _this.state.validationsMap[ns];\n\n      if (!validation) {\n        return undefined;\n      }\n\n      return /*#__PURE__*/React.createElement(ValidationSummaryLink, {\n        namespace: ns,\n        objectCount: validation.objectCount,\n        errors: validation.errors,\n        warnings: validation.warnings,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ValidationSummary, {\n        id: 'ns-val-' + ns,\n        errors: validation.errors,\n        warnings: validation.warnings,\n        objectCount: validation.objectCount,\n        style: {\n          marginLeft: '5px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderNamespace = function (ns) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: ns,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: PFBadges.Namespace,\n        style: {\n          marginBottom: '2px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }\n      }), ns, \" \", _this.renderValidations(ns)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderTopologySummary = function (numSvc, numWorkloads, numApps, numVersions, numEdges) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, numApps > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Applications, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }\n      }), numApps.toString(), \" \", numApps === 1 ? 'app ' : 'apps ', numVersions > 0 && \"(\".concat(numVersions, \" versions)\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }\n      })), numSvc > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Services, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }\n      }), numSvc.toString(), \" \", numSvc === 1 ? 'service' : 'services', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }\n      })), numWorkloads > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Workloads, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }\n      }), numWorkloads.toString(), \" \", numWorkloads === 1 ? 'workload' : 'workloads', /*#__PURE__*/React.createElement(\"br\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }\n      })), numEdges > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Topology, {\n        className: topologyStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }\n      }), numEdges.toString(), \" \", numEdges === 1 ? 'edge' : 'edges'));\n    };\n\n    _this.renderCharts = function () {\n      var props = _this.props;\n      var namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n      if (_this.state.loading) {\n        return /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 14\n          }\n        }, \"Loading chart...\");\n      } else if (_this.state.metricsLoadError) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 11\n          }\n        }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 33\n          }\n        }, \"Error loading metrics: \"), _this.state.metricsLoadError);\n      } else if (namespace === UNKNOWN) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n      } // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n      // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n      // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n      // includes traffic within the namespace.\n\n\n      var _ref = _this.graphTraffic,\n          grpcTotal = _ref.grpcTotal,\n          httpTotal = _ref.httpTotal,\n          isGrpcRequests = _ref.isGrpcRequests,\n          tcpTotal = _ref.tcpTotal;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, grpcTotal.rate > 0 && isGrpcRequests && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"gRPC - Inbound Request Traffic\",\n        dataRps: _this.state.grpcRequestIn,\n        dataErrors: _this.state.grpcRequestErrIn,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"gRPC - Outbound Request Traffic\",\n        dataRps: _this.state.grpcRequestOut,\n        dataErrors: _this.state.grpcRequestErrOut,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }\n      })), grpcTotal.rate > 0 && !isGrpcRequests && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"gRPC - Inbound Traffic\",\n        receivedRates: _this.state.grpcReceivedIn,\n        sentRates: _this.state.grpcSentIn,\n        unit: \"messages\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"gRPC - Outbound Traffic\",\n        receivedRates: _this.state.grpcReceivedOut,\n        sentRates: _this.state.grpcSentOut,\n        unit: \"messages\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }\n      })), httpTotal.rate > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"HTTP - Inbound Request Traffic\",\n        dataRps: _this.state.httpRequestIn,\n        dataErrors: _this.state.httpRequestErrIn,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RequestChart, {\n        label: \"HTTP - Outbound Request Traffic\",\n        dataRps: _this.state.httpRequestOut,\n        dataErrors: _this.state.httpRequestErrOut,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }\n      })), tcpTotal.rate > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"TCP - Inbound Traffic\",\n        receivedRates: _this.state.tcpReceivedIn,\n        sentRates: _this.state.tcpSentIn,\n        unit: \"bytes\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(StreamChart, {\n        label: \"TCP - Outbound Traffic\",\n        receivedRates: _this.state.tcpReceivedOut,\n        sentRates: _this.state.tcpSentOut,\n        unit: \"bytes\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }\n      })));\n    };\n\n    _this.updateCharts = function () {\n      var props = _this.props;\n      var namespace = props.namespaces[0].name;\n\n      if (namespace === UNKNOWN) {\n        _this.setState({\n          loading: false\n        });\n\n        return;\n      } // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n      // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n      // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n      // includes traffic within the namespace.\n\n\n      var _ref2 = _this.graphTraffic,\n          grpcTotal = _ref2.grpcTotal,\n          httpTotal = _ref2.httpTotal,\n          isGrpcRequests = _ref2.isGrpcRequests,\n          tcpTotal = _ref2.tcpTotal;\n\n      if (_this.metricsPromise) {\n        _this.metricsPromise.cancel();\n\n        _this.metricsPromise = undefined;\n      }\n\n      var promiseIn = Promise.resolve({\n        data: {}\n      });\n      var promiseOut = Promise.resolve({\n        data: {}\n      });\n      var filters = [];\n\n      if (grpcTotal.rate > 0 && !isGrpcRequests) {\n        filters.push('grpc_sent', 'grpc_received');\n      }\n\n      if (httpTotal.rate > 0 || grpcTotal.rate > 0 && isGrpcRequests) {\n        filters.push('request_count', 'request_error_count');\n      }\n\n      if (tcpTotal.rate > 0) {\n        filters.push('tcp_sent', 'tcp_received');\n      }\n\n      if (filters.length > 0) {\n        promiseIn = API.getNamespaceMetrics(namespace, {\n          byLabels: ['request_protocol'],\n          // ignored by prom if it doesn't exist\n          direction: 'inbound',\n          duration: props.duration,\n          filters: filters,\n          queryTime: props.queryTime,\n          rateInterval: props.rateInterval,\n          reporter: 'destination',\n          step: props.step\n        });\n        promiseOut = API.getNamespaceMetrics(namespace, {\n          byLabels: ['request_protocol'],\n          // ignored by prom if it doesn't exist\n          direction: 'outbound',\n          duration: props.duration,\n          filters: filters,\n          queryTime: props.queryTime,\n          rateInterval: props.rateInterval,\n          reporter: 'source',\n          step: props.step\n        });\n      }\n\n      _this.metricsPromise = makeCancelablePromise(Promise.all([promiseIn, promiseOut]));\n\n      _this.metricsPromise.promise.then(function (responses) {\n        var comparator = function comparator(labels, protocol) {\n          return protocol ? labels.request_protocol === protocol : true;\n        };\n\n        var metricsIn = responses[0].data;\n        var metricsOut = responses[1].data;\n\n        _this.setState({\n          loading: false,\n          grpcReceivedIn: getFirstDatapoints(metricsIn.grpc_received),\n          grpcReceivedOut: getFirstDatapoints(metricsOut.grpc_received),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcSentIn: getFirstDatapoints(metricsIn.grpc_sent),\n          grpcSentOut: getFirstDatapoints(metricsOut.grpc_sent),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          tcpReceivedIn: getFirstDatapoints(metricsIn.tcp_received),\n          tcpReceivedOut: getFirstDatapoints(metricsOut.tcp_received),\n          tcpSentIn: getFirstDatapoints(metricsIn.tcp_sent),\n          tcpSentOut: getFirstDatapoints(metricsOut.tcp_sent)\n        });\n      }).catch(function (error) {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelGraph: Ignore fetch error (canceled).');\n          return;\n        }\n\n        var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n\n        _this.setState(_objectSpread({\n          loading: false,\n          metricsLoadError: errorMsg\n        }, defaultMetricsState));\n      });\n\n      _this.setState({\n        loading: true,\n        metricsLoadError: null\n      });\n    };\n\n    _this.updateValidations = function () {\n      var newValidationsMap = new Map();\n\n      _.chunk(_this.props.namespaces, 10).forEach(function (chunk) {\n        _this.validationSummaryPromises.registerChained('validationSummaryChunks', undefined, function () {\n          return _this.fetchValidationsChunk(chunk, newValidationsMap);\n        }).then(function () {\n          _this.setState({\n            validationsMap: newValidationsMap\n          });\n        });\n      });\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    return _this;\n  }\n\n  _createClass(SummaryPanelGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.shouldShowCharts()) {\n        this.graphTraffic = this.getGraphTraffic();\n        this.updateCharts();\n      }\n\n      this.updateValidations();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (shouldRefreshData(prevProps, this.props)) {\n        if (this.shouldShowCharts()) {\n          this.graphTraffic = this.getGraphTraffic();\n          this.updateCharts();\n        }\n\n        this.updateValidations();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.metricsPromise) {\n        this.metricsPromise.cancel();\n      }\n\n      if (this.validationSummaryPromises) {\n        this.validationSummaryPromises.cancelAll();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cy = this.props.data.summaryTarget;\n\n      if (!cy) {\n        return null;\n      }\n\n      var numSvc = cy.$(\"node[nodeType = \\\"\".concat(NodeType.SERVICE, \"\\\"]\")).size();\n      var numWorkloads = cy.$(\"node[nodeType = \\\"\".concat(NodeType.WORKLOAD, \"\\\"]\")).size();\n\n      var _this$countApps = this.countApps(cy),\n          numApps = _this$countApps.numApps,\n          numVersions = _this$countApps.numVersions;\n\n      var numEdges = cy.edges().size();\n\n      var _ref3 = this.graphTraffic || this.getGraphTraffic(),\n          grpcIn = _ref3.grpcIn,\n          grpcOut = _ref3.grpcOut,\n          grpcTotal = _ref3.grpcTotal,\n          httpIn = _ref3.httpIn,\n          httpOut = _ref3.httpOut,\n          httpTotal = _ref3.httpTotal,\n          isGrpcRequests = _ref3.isGrpcRequests,\n          tcpIn = _ref3.tcpIn,\n          tcpOut = _ref3.tcpOut,\n          tcpTotal = _ref3.tcpTotal;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel panel-default\",\n        style: SummaryPanelGraph.panelStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-heading\",\n        style: summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      }, \"Current Graph:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }), this.renderNamespacesSummary(), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }), this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)), /*#__PURE__*/React.createElement(\"div\", {\n        className: summaryBodyTabs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SimpleTabs, {\n        id: \"graph_summary_tabs\",\n        defaultTab: 0,\n        style: {\n          paddingBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Inbound\",\n        eventKey: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }\n      }, grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }\n      }), \" No inbound traffic.\"), grpcIn.rate > 0 && isGrpcRequests && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcIn.rate,\n        rateGrpcErr: grpcIn.rateGrpcErr,\n        rateNR: grpcIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 19\n        }\n      }), httpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpIn.rate,\n        rate3xx: httpIn.rate3xx,\n        rate4xx: httpIn.rate4xx,\n        rate5xx: httpIn.rate5xx,\n        rateNR: httpIn.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 19\n        }\n      }), tcpIn.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpIn.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 36\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Outbound\",\n        eventKey: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }\n      }, grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }\n      }), \" No outbound traffic.\"), grpcOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcOut.rate,\n        rateGrpcErr: grpcOut.rateGrpcErr,\n        rateNR: grpcOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 19\n        }\n      }), httpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpOut.rate,\n        rate3xx: httpOut.rate3xx,\n        rate4xx: httpOut.rate4xx,\n        rate5xx: httpOut.rate5xx,\n        rateNR: httpOut.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 19\n        }\n      }), tcpOut.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpOut.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        style: summaryFont,\n        title: \"Total\",\n        eventKey: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: summaryFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }\n      }, grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KialiIcon.Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }\n      }), \" No traffic.\"), grpcTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableGrpc, {\n        isRequests: isGrpcRequests,\n        rate: grpcTotal.rate,\n        rateGrpcErr: grpcTotal.rateGrpcErr,\n        rateNR: grpcTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 19\n        }\n      }), httpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        rate: httpTotal.rate,\n        rate3xx: httpTotal.rate3xx,\n        rate4xx: httpTotal.rate4xx,\n        rate5xx: httpTotal.rate5xx,\n        rateNR: httpTotal.rateNoResponse,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 19\n        }\n      }), tcpTotal.rate > 0 && /*#__PURE__*/React.createElement(RateTableTcp, {\n        rate: tcpTotal.rate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 39\n        }\n      }), this.shouldShowCharts() && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }\n      }, hr(), this.renderCharts()))))));\n    }\n  }, {\n    key: \"shouldShowCharts\",\n    value: function shouldShowCharts() {\n      // TODO we omit the charts when dealing with multiple namespaces. There is no backend\n      // API support to gather the data. The whole-graph chart is of nominal value, it will likely be OK.\n      return this.props.namespaces.length === 1;\n    }\n  }, {\n    key: \"fetchValidationsChunk\",\n    value: function fetchValidationsChunk(chunk, validationsMap) {\n      return Promise.all(chunk.map(function (ns) {\n        return API.getNamespaceValidations(ns.name).then(function (rs) {\n          return {\n            validation: rs.data,\n            ns: ns\n          };\n        });\n      })).then(function (results) {\n        results.forEach(function (result) {\n          validationsMap[result.ns.name] = result.validation;\n        });\n      }).catch(function (err) {\n        if (!err.isCanceled) {\n          console.log(\"SummaryPanelGraph: Error fetching validation status: \".concat(API.getErrorString(err)));\n        }\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // if the summaryTarget (i.e. graph) has changed, then init the state and set to loading. The loading\n      // will actually be kicked off after the render (in componentDidMount/Update).\n      return props.data.summaryTarget !== state.graph ? _objectSpread({\n        graph: props.data.summaryTarget,\n        loading: true\n      }, defaultMetricsState) : null;\n    }\n  }]);\n\n  return SummaryPanelGraph;\n}(React.Component);\n\nSummaryPanelGraph.panelStyle = {\n  height: '100%',\n  margin: 0,\n  minWidth: '25em',\n  overflowY: 'auto',\n  backgroundColor: PFColors.White,\n  width: '25em'\n};\nexport { SummaryPanelGraph as default };","map":{"version":3,"sources":["/root/kiali-ui/src/pages/Graph/SummaryPanelGraph.tsx"],"names":["React","Tab","style","_","RateTableGrpc","RateTableHttp","RateTableTcp","RequestChart","StreamChart","NodeType","Protocol","TrafficRate","UNKNOWN","getAccumulatedTrafficRateGrpc","getAccumulatedTrafficRateHttp","getAccumulatedTrafficRateTcp","API","getDatapoints","getFirstDatapoints","hr","shouldRefreshData","summaryBodyTabs","summaryFont","summaryHeader","makeCancelablePromise","PromisesRegistry","CyNode","KialiIcon","SimpleTabs","ValidationSummary","PFColors","ValidationSummaryLink","PFBadge","PFBadges","defaultMetricsState","grpcRequestIn","grpcRequestOut","grpcRequestErrIn","grpcRequestErrOut","grpcSentIn","grpcSentOut","grpcReceivedIn","grpcReceivedOut","httpRequestIn","httpRequestOut","httpRequestErrIn","httpRequestErrOut","tcpSentIn","tcpSentOut","tcpReceivedIn","tcpReceivedOut","defaultState","graph","loading","metricsLoadError","validationsMap","Map","topologyStyle","margin","SummaryPanelGraph","props","graphTraffic","metricsPromise","validationSummaryPromises","getGraphTraffic","cy","data","summaryTarget","totalEdges","$","SERVICE","edgesTo","inboundEdges","isRoot","outboundEdges","nodes","leaves","isOutside","isServiceEntry","connectedEdges","grpcIn","grpcOut","grpcTotal","httpIn","httpOut","httpTotal","isGrpcRequests","trafficRates","includes","GRPC_REQUEST","tcpIn","tcpOut","tcpTotal","countApps","appVersions","APP","forEach","node","app","undefined","Set","add","version","numApps","Object","getOwnPropertyNames","length","numVersions","reduce","totalCount","size","renderNamespacesSummary","namespaces","map","namespace","renderNamespace","name","renderValidations","ns","validation","state","objectCount","errors","warnings","marginLeft","Namespace","marginBottom","renderTopologySummary","numSvc","numWorkloads","numEdges","toString","renderCharts","rate","updateCharts","setState","cancel","promiseIn","Promise","resolve","promiseOut","filters","push","getNamespaceMetrics","byLabels","direction","duration","queryTime","rateInterval","reporter","step","all","promise","then","responses","comparator","labels","protocol","request_protocol","metricsIn","metricsOut","grpc_received","request_count","GRPC","request_error_count","grpc_sent","HTTP","tcp_received","tcp_sent","catch","error","isCanceled","console","debug","errorMsg","response","message","updateValidations","newValidationsMap","chunk","registerChained","fetchValidationsChunk","shouldShowCharts","prevProps","cancelAll","WORKLOAD","edges","panelStyle","paddingBottom","rateGrpcErr","rateNoResponse","rate3xx","rate4xx","rate5xx","getNamespaceValidations","rs","results","result","err","log","getErrorString","Component","height","minWidth","overflowY","backgroundColor","White","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tab } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport _ from 'lodash';\nimport { RateTableGrpc, RateTableHttp, RateTableTcp } from '../../components/SummaryPanel/RateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { NodeType, Protocol, SummaryPanelPropType, TrafficRate, UNKNOWN } from '../../types/Graph';\nimport {\n  getAccumulatedTrafficRateGrpc,\n  getAccumulatedTrafficRateHttp,\n  getAccumulatedTrafficRateTcp,\n  TrafficRateGrpc,\n  TrafficRateHttp,\n  TrafficRateTcp\n} from '../../utils/TrafficRate';\nimport * as API from '../../services/Api';\nimport { Response } from '../../services/Api';\nimport {\n  getDatapoints,\n  getFirstDatapoints,\n  hr,\n  shouldRefreshData,\n  summaryBodyTabs,\n  summaryFont,\n  summaryHeader\n} from './SummaryPanelCommon';\nimport { Datapoint, IstioMetricsMap, Labels } from '../../types/Metrics';\nimport { IstioMetricsOptions } from '../../types/MetricsOptions';\nimport { CancelablePromise, makeCancelablePromise, PromisesRegistry } from '../../utils/CancelablePromises';\nimport { CyNode } from '../../components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { KialiIcon } from 'config/KialiIcon';\nimport SimpleTabs from 'components/Tab/SimpleTabs';\nimport { ValidationStatus } from 'types/IstioObjects';\nimport Namespace from 'types/Namespace';\nimport ValidationSummary from 'components/Validations/ValidationSummary';\nimport { PFColors } from '../../components/Pf/PfColors';\nimport ValidationSummaryLink from '../../components/Link/ValidationSummaryLink';\nimport { PFBadge, PFBadges } from 'components/Pf/PfBadges';\n\ntype SummaryPanelGraphMetricsState = {\n  grpcRequestIn: Datapoint[];\n  grpcRequestOut: Datapoint[];\n  grpcRequestErrIn: Datapoint[];\n  grpcRequestErrOut: Datapoint[];\n  grpcSentIn: Datapoint[];\n  grpcSentOut: Datapoint[];\n  grpcReceivedIn: Datapoint[];\n  grpcReceivedOut: Datapoint[];\n  httpRequestIn: Datapoint[];\n  httpRequestOut: Datapoint[];\n  httpRequestErrIn: Datapoint[];\n  httpRequestErrOut: Datapoint[];\n  tcpSentIn: Datapoint[];\n  tcpSentOut: Datapoint[];\n  tcpReceivedIn: Datapoint[];\n  tcpReceivedOut: Datapoint[];\n};\n\n// TODO replace with real type\ntype ValidationsMap = Map<string, ValidationStatus>;\n\ntype SummaryPanelGraphState = SummaryPanelGraphMetricsState & {\n  graph: any;\n  loading: boolean;\n  metricsLoadError: string | null;\n  validationsMap: ValidationsMap;\n};\n\ntype SummaryPanelGraphTraffic = {\n  grpcIn: TrafficRateGrpc;\n  grpcOut: TrafficRateGrpc;\n  grpcTotal: TrafficRateGrpc;\n  httpIn: TrafficRateHttp;\n  httpOut: TrafficRateHttp;\n  httpTotal: TrafficRateHttp;\n  isGrpcRequests: boolean;\n  tcpIn: TrafficRateTcp;\n  tcpOut: TrafficRateTcp;\n  tcpTotal: TrafficRateTcp;\n};\n\nconst defaultMetricsState: SummaryPanelGraphMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nconst defaultState: SummaryPanelGraphState = {\n  graph: null,\n  loading: false,\n  metricsLoadError: null,\n  validationsMap: new Map<string, ValidationStatus>(),\n  ...defaultMetricsState\n};\n\nconst topologyStyle = style({\n  margin: '0 1em'\n});\n\nexport default class SummaryPanelGraph extends React.Component<SummaryPanelPropType, SummaryPanelGraphState> {\n  static readonly panelStyle = {\n    height: '100%',\n    margin: 0,\n    minWidth: '25em',\n    overflowY: 'auto' as 'auto',\n    backgroundColor: PFColors.White,\n    width: '25em'\n  };\n\n  private graphTraffic?: SummaryPanelGraphTraffic;\n  private metricsPromise?: CancelablePromise<Response<IstioMetricsMap>[]>;\n  private validationSummaryPromises: PromisesRegistry = new PromisesRegistry();\n\n  constructor(props: SummaryPanelPropType) {\n    super(props);\n\n    this.state = { ...defaultState };\n  }\n\n  static getDerivedStateFromProps(props: SummaryPanelPropType, state: SummaryPanelGraphState) {\n    // if the summaryTarget (i.e. graph) has changed, then init the state and set to loading. The loading\n    // will actually be kicked off after the render (in componentDidMount/Update).\n    return props.data.summaryTarget !== state.graph\n      ? { graph: props.data.summaryTarget, loading: true, ...defaultMetricsState }\n      : null;\n  }\n\n  componentDidMount() {\n    if (this.shouldShowCharts()) {\n      this.graphTraffic = this.getGraphTraffic();\n      this.updateCharts();\n    }\n    this.updateValidations();\n  }\n\n  componentDidUpdate(prevProps: SummaryPanelPropType) {\n    if (shouldRefreshData(prevProps, this.props)) {\n      if (this.shouldShowCharts()) {\n        this.graphTraffic = this.getGraphTraffic();\n        this.updateCharts();\n      }\n      this.updateValidations();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n    }\n    if (this.validationSummaryPromises) {\n      this.validationSummaryPromises.cancelAll();\n    }\n  }\n\n  render() {\n    const cy = this.props.data.summaryTarget;\n    if (!cy) {\n      return null;\n    }\n\n    const numSvc = cy.$(`node[nodeType = \"${NodeType.SERVICE}\"]`).size();\n    const numWorkloads = cy.$(`node[nodeType = \"${NodeType.WORKLOAD}\"]`).size();\n    const { numApps, numVersions } = this.countApps(cy);\n    const numEdges = cy.edges().size();\n\n    const { grpcIn, grpcOut, grpcTotal, httpIn, httpOut, httpTotal, isGrpcRequests, tcpIn, tcpOut, tcpTotal } =\n      this.graphTraffic || this.getGraphTraffic();\n\n    return (\n      <div className=\"panel panel-default\" style={SummaryPanelGraph.panelStyle}>\n        <div className=\"panel-heading\" style={summaryHeader}>\n          <strong>Current Graph:</strong>\n          <br />\n          <br />\n          {this.renderNamespacesSummary()}\n          <br />\n          {this.renderTopologySummary(numSvc, numWorkloads, numApps, numVersions, numEdges)}\n        </div>\n        <div className={summaryBodyTabs}>\n          <SimpleTabs id=\"graph_summary_tabs\" defaultTab={0} style={{ paddingBottom: '10px' }}>\n            <Tab style={summaryFont} title=\"Inbound\" eventKey={0}>\n              <div style={summaryFont}>\n                {grpcIn.rate === 0 && httpIn.rate === 0 && tcpIn.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No inbound traffic.\n                  </>\n                )}\n                {grpcIn.rate > 0 && isGrpcRequests && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcIn.rate}\n                    rateGrpcErr={grpcIn.rateGrpcErr}\n                    rateNR={grpcIn.rateNoResponse}\n                  />\n                )}\n                {httpIn.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpIn.rate}\n                    rate3xx={httpIn.rate3xx}\n                    rate4xx={httpIn.rate4xx}\n                    rate5xx={httpIn.rate5xx}\n                    rateNR={httpIn.rateNoResponse}\n                  />\n                )}\n                {tcpIn.rate > 0 && <RateTableTcp rate={tcpIn.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Outbound\" eventKey={1}>\n              <div style={summaryFont}>\n                {grpcOut.rate === 0 && httpOut.rate === 0 && tcpOut.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No outbound traffic.\n                  </>\n                )}\n                {grpcOut.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcOut.rate}\n                    rateGrpcErr={grpcOut.rateGrpcErr}\n                    rateNR={grpcOut.rateNoResponse}\n                  />\n                )}\n                {httpOut.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpOut.rate}\n                    rate3xx={httpOut.rate3xx}\n                    rate4xx={httpOut.rate4xx}\n                    rate5xx={httpOut.rate5xx}\n                    rateNR={httpOut.rateNoResponse}\n                  />\n                )}\n                {tcpOut.rate > 0 && <RateTableTcp rate={tcpOut.rate} />}\n                {\n                  // We don't show a sparkline here because we need to aggregate the traffic of an\n                  // ad hoc set of [root] nodes. We don't have backend support for that aggregation.\n                }\n              </div>\n            </Tab>\n            <Tab style={summaryFont} title=\"Total\" eventKey={2}>\n              <div style={summaryFont}>\n                {grpcTotal.rate === 0 && httpTotal.rate === 0 && tcpTotal.rate === 0 && (\n                  <>\n                    <KialiIcon.Info /> No traffic.\n                  </>\n                )}\n                {grpcTotal.rate > 0 && (\n                  <RateTableGrpc\n                    isRequests={isGrpcRequests}\n                    rate={grpcTotal.rate}\n                    rateGrpcErr={grpcTotal.rateGrpcErr}\n                    rateNR={grpcTotal.rateNoResponse}\n                  />\n                )}\n                {httpTotal.rate > 0 && (\n                  <RateTableHttp\n                    title=\"HTTP (requests per second):\"\n                    rate={httpTotal.rate}\n                    rate3xx={httpTotal.rate3xx}\n                    rate4xx={httpTotal.rate4xx}\n                    rate5xx={httpTotal.rate5xx}\n                    rateNR={httpTotal.rateNoResponse}\n                  />\n                )}\n                {tcpTotal.rate > 0 && <RateTableTcp rate={tcpTotal.rate} />}\n                {this.shouldShowCharts() && (\n                  <div>\n                    {hr()}\n                    {this.renderCharts()}\n                  </div>\n                )}\n              </div>\n            </Tab>\n          </SimpleTabs>\n        </div>\n      </div>\n    );\n  }\n\n  private getGraphTraffic = (): SummaryPanelGraphTraffic => {\n    // when getting total traffic rates don't count requests from injected service nodes\n    const cy = this.props.data.summaryTarget;\n    const totalEdges = cy.$(`node[nodeType != \"${NodeType.SERVICE}\"][!isBox]`).edgesTo('*');\n    const inboundEdges = cy.$(`node[?${CyNode.isRoot}]`).edgesTo('*');\n    const outboundEdges = cy.nodes().leaves(`node[?${CyNode.isOutside}],[?${CyNode.isServiceEntry}]`).connectedEdges();\n\n    return {\n      grpcIn: getAccumulatedTrafficRateGrpc(inboundEdges),\n      grpcOut: getAccumulatedTrafficRateGrpc(outboundEdges),\n      grpcTotal: getAccumulatedTrafficRateGrpc(totalEdges),\n      httpIn: getAccumulatedTrafficRateHttp(inboundEdges),\n      httpOut: getAccumulatedTrafficRateHttp(outboundEdges),\n      httpTotal: getAccumulatedTrafficRateHttp(totalEdges),\n      isGrpcRequests: this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST),\n      tcpIn: getAccumulatedTrafficRateTcp(inboundEdges),\n      tcpOut: getAccumulatedTrafficRateTcp(outboundEdges),\n      tcpTotal: getAccumulatedTrafficRateTcp(totalEdges)\n    };\n  };\n\n  private countApps = (cy): { numApps: number; numVersions: number } => {\n    const appVersions: { [key: string]: Set<string> } = {};\n\n    cy.$(`node[nodeType = \"${NodeType.APP}\"]`).forEach(node => {\n      const app = node.data(CyNode.app);\n      if (appVersions[app] === undefined) {\n        appVersions[app] = new Set();\n      }\n      appVersions[app].add(node.data(CyNode.version));\n    });\n\n    return {\n      numApps: Object.getOwnPropertyNames(appVersions).length,\n      numVersions: Object.getOwnPropertyNames(appVersions).reduce((totalCount: number, version: string) => {\n        return totalCount + appVersions[version].size;\n      }, 0)\n    };\n  };\n\n  private renderNamespacesSummary = () => {\n    return this.props.namespaces.map(namespace => this.renderNamespace(namespace.name));\n  };\n\n  private renderValidations = (ns: string) => {\n    const validation: ValidationStatus = this.state.validationsMap[ns];\n    if (!validation) {\n      return undefined;\n    }\n    return (\n      <ValidationSummaryLink\n        namespace={ns}\n        objectCount={validation.objectCount}\n        errors={validation.errors}\n        warnings={validation.warnings}\n      >\n        <ValidationSummary\n          id={'ns-val-' + ns}\n          errors={validation.errors}\n          warnings={validation.warnings}\n          objectCount={validation.objectCount}\n          style={{ marginLeft: '5px' }}\n        />\n      </ValidationSummaryLink>\n    );\n  };\n\n  private renderNamespace = (ns: string) => {\n    return (\n      <React.Fragment key={ns}>\n        <span>\n          <PFBadge badge={PFBadges.Namespace} style={{ marginBottom: '2px' }} />\n          {ns} {this.renderValidations(ns)}\n        </span>\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  private renderTopologySummary = (\n    numSvc: number,\n    numWorkloads: number,\n    numApps: number,\n    numVersions: number,\n    numEdges: number\n  ) => (\n    <>\n      {numApps > 0 && (\n        <>\n          <KialiIcon.Applications className={topologyStyle} />\n          {numApps.toString()} {numApps === 1 ? 'app ' : 'apps '}\n          {numVersions > 0 && `(${numVersions} versions)`}\n          <br />\n        </>\n      )}\n      {numSvc > 0 && (\n        <>\n          <KialiIcon.Services className={topologyStyle} />\n          {numSvc.toString()} {numSvc === 1 ? 'service' : 'services'}\n          <br />\n        </>\n      )}\n      {numWorkloads > 0 && (\n        <>\n          <KialiIcon.Workloads className={topologyStyle} />\n          {numWorkloads.toString()} {numWorkloads === 1 ? 'workload' : 'workloads'}\n          <br />\n        </>\n      )}\n      {numEdges > 0 && (\n        <>\n          <KialiIcon.Topology className={topologyStyle} />\n          {numEdges.toString()} {numEdges === 1 ? 'edge' : 'edges'}\n        </>\n      )}\n    </>\n  );\n\n  private shouldShowCharts() {\n    // TODO we omit the charts when dealing with multiple namespaces. There is no backend\n    // API support to gather the data. The whole-graph chart is of nominal value, it will likely be OK.\n    return this.props.namespaces.length === 1;\n  }\n\n  private renderCharts = () => {\n    const props: SummaryPanelPropType = this.props;\n    const namespace = props.data.summaryTarget.data(CyNode.namespace);\n\n    if (this.state.loading) {\n      return <strong>Loading chart...</strong>;\n    } else if (this.state.metricsLoadError) {\n      return (\n        <div>\n          <KialiIcon.Warning /> <strong>Error loading metrics: </strong>\n          {this.state.metricsLoadError}\n        </div>\n      );\n    } else if (namespace === UNKNOWN) {\n      return <></>;\n    }\n\n    // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n    // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n    // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n    // includes traffic within the namespace.\n    const { grpcTotal, httpTotal, isGrpcRequests, tcpTotal } = this.graphTraffic!;\n\n    return (\n      <>\n        {grpcTotal.rate > 0 && isGrpcRequests && (\n          <>\n            <RequestChart\n              label=\"gRPC - Inbound Request Traffic\"\n              dataRps={this.state.grpcRequestIn}\n              dataErrors={this.state.grpcRequestErrIn}\n            />\n            <RequestChart\n              label=\"gRPC - Outbound Request Traffic\"\n              dataRps={this.state.grpcRequestOut}\n              dataErrors={this.state.grpcRequestErrOut}\n            />\n          </>\n        )}\n        {grpcTotal.rate > 0 && !isGrpcRequests && (\n          <>\n            <StreamChart\n              label=\"gRPC - Inbound Traffic\"\n              receivedRates={this.state.grpcReceivedIn}\n              sentRates={this.state.grpcSentIn}\n              unit=\"messages\"\n            />\n            <StreamChart\n              label=\"gRPC - Outbound Traffic\"\n              receivedRates={this.state.grpcReceivedOut}\n              sentRates={this.state.grpcSentOut}\n              unit=\"messages\"\n            />\n          </>\n        )}\n        {httpTotal.rate > 0 && (\n          <>\n            <RequestChart\n              label=\"HTTP - Inbound Request Traffic\"\n              dataRps={this.state.httpRequestIn}\n              dataErrors={this.state.httpRequestErrIn}\n            />\n            <RequestChart\n              label=\"HTTP - Outbound Request Traffic\"\n              dataRps={this.state.httpRequestOut}\n              dataErrors={this.state.httpRequestErrOut}\n            />\n          </>\n        )}\n        {tcpTotal.rate > 0 && (\n          <>\n            <StreamChart\n              label=\"TCP - Inbound Traffic\"\n              receivedRates={this.state.tcpReceivedIn}\n              sentRates={this.state.tcpSentIn}\n              unit=\"bytes\"\n            />\n            <StreamChart\n              label=\"TCP - Outbound Traffic\"\n              receivedRates={this.state.tcpReceivedOut}\n              sentRates={this.state.tcpSentOut}\n              unit=\"bytes\"\n            />\n          </>\n        )}\n      </>\n    );\n  };\n\n  private updateCharts = () => {\n    const props: SummaryPanelPropType = this.props;\n    const namespace = props.namespaces[0].name;\n\n    if (namespace === UNKNOWN) {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    // When there is any traffic for the protocol, show both inbound and outbound charts. It's a little\n    // confusing because for the tabs inbound is limited to just traffic entering the namespace, and outbound\n    // is limited to just traffic exitingt the namespace.  But in the charts inbound ad outbound also\n    // includes traffic within the namespace.\n    const { grpcTotal, httpTotal, isGrpcRequests, tcpTotal } = this.graphTraffic!;\n\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n      this.metricsPromise = undefined;\n    }\n\n    let promiseIn: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n    let promiseOut: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n\n    let filters: string[] = [];\n    if (grpcTotal.rate > 0 && !isGrpcRequests) {\n      filters.push('grpc_sent', 'grpc_received');\n    }\n    if (httpTotal.rate > 0 || (grpcTotal.rate > 0 && isGrpcRequests)) {\n      filters.push('request_count', 'request_error_count');\n    }\n    if (tcpTotal.rate > 0) {\n      filters.push('tcp_sent', 'tcp_received');\n    }\n\n    if (filters.length > 0) {\n      promiseIn = API.getNamespaceMetrics(namespace, {\n        byLabels: ['request_protocol'], // ignored by prom if it doesn't exist\n        direction: 'inbound',\n        duration: props.duration,\n        filters: filters,\n        queryTime: props.queryTime,\n        rateInterval: props.rateInterval,\n        reporter: 'destination',\n        step: props.step\n      } as IstioMetricsOptions);\n      promiseOut = API.getNamespaceMetrics(namespace, {\n        byLabels: ['request_protocol'], // ignored by prom if it doesn't exist\n        direction: 'outbound',\n        duration: props.duration,\n        filters: filters,\n        queryTime: props.queryTime,\n        rateInterval: props.rateInterval,\n        reporter: 'source',\n        step: props.step\n      } as IstioMetricsOptions);\n    }\n\n    this.metricsPromise = makeCancelablePromise(Promise.all([promiseIn, promiseOut]));\n\n    this.metricsPromise.promise\n      .then(responses => {\n        const comparator = (labels: Labels, protocol?: Protocol) => {\n          return protocol ? labels.request_protocol === protocol : true;\n        };\n        const metricsIn = responses[0].data;\n        const metricsOut = responses[1].data;\n\n        this.setState({\n          loading: false,\n          grpcReceivedIn: getFirstDatapoints(metricsIn.grpc_received),\n          grpcReceivedOut: getFirstDatapoints(metricsOut.grpc_received),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcSentIn: getFirstDatapoints(metricsIn.grpc_sent),\n          grpcSentOut: getFirstDatapoints(metricsOut.grpc_sent),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          tcpReceivedIn: getFirstDatapoints(metricsIn.tcp_received),\n          tcpReceivedOut: getFirstDatapoints(metricsOut.tcp_received),\n          tcpSentIn: getFirstDatapoints(metricsIn.tcp_sent),\n          tcpSentOut: getFirstDatapoints(metricsOut.tcp_sent)\n        });\n      })\n      .catch(error => {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelGraph: Ignore fetch error (canceled).');\n          return;\n        }\n        const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        this.setState({\n          loading: false,\n          metricsLoadError: errorMsg,\n          ...defaultMetricsState\n        });\n      });\n\n    this.setState({ loading: true, metricsLoadError: null });\n  };\n\n  private updateValidations = () => {\n    const newValidationsMap = new Map<string, ValidationStatus>();\n    _.chunk(this.props.namespaces, 10).forEach(chunk => {\n      this.validationSummaryPromises\n        .registerChained('validationSummaryChunks', undefined, () =>\n          this.fetchValidationsChunk(chunk, newValidationsMap)\n        )\n        .then(() => {\n          this.setState({ validationsMap: newValidationsMap });\n        });\n    });\n  };\n\n  fetchValidationsChunk(chunk: Namespace[], validationsMap: ValidationsMap) {\n    return Promise.all(\n      chunk.map(ns => {\n        return API.getNamespaceValidations(ns.name).then(rs => ({ validation: rs.data, ns: ns }));\n      })\n    )\n      .then(results => {\n        results.forEach(result => {\n          validationsMap[result.ns.name] = result.validation;\n        });\n      })\n      .catch(err => {\n        if (!err.isCanceled) {\n          console.log(`SummaryPanelGraph: Error fetching validation status: ${API.getErrorString(err)}`);\n        }\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
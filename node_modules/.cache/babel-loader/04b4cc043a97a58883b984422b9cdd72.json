{"ast":null,"code":"import _slicedToArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/IstioWizards/ServiceWizard.tsx\";\nimport * as React from 'react';\nimport { Button, Expandable, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport * as API from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport RequestRouting from './RequestRouting';\nimport TrafficShifting from './TrafficShifting';\nimport TrafficPolicyContainer, { ConsistentHashType, UNSET } from '../../components/IstioWizards/TrafficPolicy';\nimport { ROUND_ROBIN } from './TrafficPolicy';\nimport FaultInjection from './FaultInjection';\nimport { buildIstioConfig, fqdnServiceName, getInitGateway, getInitHosts, getInitLoadBalancer, getInitPeerAuthentication, getInitRules, getInitTlsMode, getInitWeights, hasGateway, WIZARD_REQUEST_ROUTING, WIZARD_FAULT_INJECTION, WIZARD_TITLES, WIZARD_TRAFFIC_SHIFTING, getInitFaultInjectionRoute, WIZARD_REQUEST_TIMEOUTS, getInitTimeoutRetryRoute, getInitConnectionPool, getInitOutlierDetection, WIZARD_TCP_TRAFFIC_SHIFTING } from './WizardActions';\nimport { MessageType } from '../../types/MessageCenter';\nimport GatewaySelector from './GatewaySelector';\nimport VirtualServiceHosts from './VirtualServiceHosts';\nimport { PeerAuthenticationMutualTLSMode } from '../../types/IstioObjects';\nimport { style } from 'typestyle';\nimport RequestTimeouts from './RequestTimeouts';\nimport CircuitBreaker from './CircuitBreaker';\nimport _ from 'lodash';\n\nvar emptyServiceWizardState = function emptyServiceWizardState(fqdnServiceName) {\n  return {\n    showWizard: false,\n    showAdvanced: false,\n    advancedTabKey: 0,\n    workloads: [],\n    rules: [],\n    faultInjectionRoute: {\n      workloads: [],\n      delayed: false,\n      delay: {\n        percentage: {\n          value: 100\n        },\n        fixedDelay: '5s'\n      },\n      isValidDelay: true,\n      aborted: false,\n      abort: {\n        percentage: {\n          value: 100\n        },\n        httpStatus: 503\n      },\n      isValidAbort: true\n    },\n    timeoutRetryRoute: {\n      workloads: [],\n      isTimeout: false,\n      timeout: '2s',\n      isValidTimeout: true,\n      isRetry: false,\n      retries: {\n        attempts: 3,\n        perTryTimeout: '2s',\n        retryOn: 'gateway-error,connect-failure,refused-stream'\n      },\n      isValidRetry: true\n    },\n    valid: {\n      mainWizard: true,\n      vsHosts: true,\n      tls: true,\n      lb: true,\n      gateway: true,\n      cp: true,\n      od: true\n    },\n    advancedOptionsValid: true,\n    vsHosts: [fqdnServiceName],\n    trafficPolicy: {\n      tlsModified: false,\n      mtlsMode: UNSET,\n      clientCertificate: '',\n      privateKey: '',\n      caCertificates: '',\n      addLoadBalancer: false,\n      simpleLB: false,\n      consistentHashType: ConsistentHashType.HTTP_HEADER_NAME,\n      loadBalancer: {\n        simple: ROUND_ROBIN\n      },\n      peerAuthnSelector: {\n        addPeerAuthentication: false,\n        addPeerAuthnModified: false,\n        mode: PeerAuthenticationMutualTLSMode.UNSET\n      },\n      addConnectionPool: false,\n      connectionPool: {},\n      addOutlierDetection: false,\n      outlierDetection: {}\n    },\n    gateway: undefined\n  };\n};\n\nvar advancedOptionsStyle = style({\n  marginTop: 10\n});\n\nvar ServiceWizard = /*#__PURE__*/function (_React$Component) {\n  _inherits(ServiceWizard, _React$Component);\n\n  var _super = _createSuper(ServiceWizard);\n\n  function ServiceWizard(props) {\n    var _this;\n\n    _classCallCheck(this, ServiceWizard);\n\n    _this = _super.call(this, props);\n\n    _this.compareWorkloads = function (prev, current) {\n      if (prev.length !== current.length) {\n        return false;\n      }\n\n      var _loop = function _loop(i) {\n        if (!current.some(function (w) {\n          return _.isEqual(w, prev[i]);\n        })) {\n          return {\n            v: false\n          };\n        }\n      };\n\n      for (var i = 0; i < prev.length; i++) {\n        var _ret = _loop(i);\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      return true;\n    };\n\n    _this.onClose = function (changed) {\n      _this.setState(emptyServiceWizardState(fqdnServiceName(_this.props.serviceName, _this.props.namespace)));\n\n      _this.props.onClose(changed);\n    };\n\n    _this.onCreateUpdate = function () {\n      var promises = [];\n\n      switch (_this.props.type) {\n        case WIZARD_TRAFFIC_SHIFTING:\n        case WIZARD_TCP_TRAFFIC_SHIFTING:\n        case WIZARD_REQUEST_ROUTING:\n        case WIZARD_FAULT_INJECTION:\n        case WIZARD_REQUEST_TIMEOUTS:\n          var _buildIstioConfig = buildIstioConfig(_this.props, _this.state),\n              _buildIstioConfig2 = _slicedToArray(_buildIstioConfig, 4),\n              dr = _buildIstioConfig2[0],\n              vs = _buildIstioConfig2[1],\n              gw = _buildIstioConfig2[2],\n              pa = _buildIstioConfig2[3]; // Gateway is only created when user has explicit selected this option\n\n\n          if (gw) {\n            promises.push(API.createIstioConfigDetail(_this.props.namespace, 'gateways', JSON.stringify(gw)));\n          }\n\n          if (_this.props.update) {\n            promises.push(API.updateIstioConfigDetail(_this.props.namespace, 'destinationrules', dr.metadata.name, JSON.stringify(dr)));\n            promises.push(API.updateIstioConfigDetail(_this.props.namespace, 'virtualservices', vs.metadata.name, JSON.stringify(vs)));\n\n            _this.handlePeerAuthnUpdate(pa, dr, promises); // Note that Gateways are not updated from the Wizard, only the VS hosts/gateways sections are updated\n\n          } else {\n            promises.push(API.createIstioConfigDetail(_this.props.namespace, 'destinationrules', JSON.stringify(dr)));\n            promises.push(API.createIstioConfigDetail(_this.props.namespace, 'virtualservices', JSON.stringify(vs)));\n\n            if (pa) {\n              promises.push(API.createIstioConfigDetail(_this.props.namespace, 'peerauthentications', JSON.stringify(pa)));\n            }\n          }\n\n          break;\n\n        default:\n      } // Disable button before promise is completed. Then Wizard is closed.\n\n\n      _this.setState(function (prevState) {\n        prevState.valid.mainWizard = false;\n        return {\n          valid: prevState.valid\n        };\n      });\n\n      Promise.all(promises).then(function (results) {\n        if (results.length > 0) {\n          AlertUtils.add('Istio Config ' + (_this.props.update ? 'updated' : 'created') + ' for ' + _this.props.serviceName + ' service.', 'default', MessageType.SUCCESS);\n        }\n\n        _this.onClose(true);\n      }).catch(function (error) {\n        AlertUtils.addError('Could not ' + (_this.props.update ? 'update' : 'create') + ' Istio config objects.', error);\n\n        _this.onClose(true);\n      });\n    };\n\n    _this.handlePeerAuthnUpdate = function (pa, dr, promises) {\n      if (pa) {\n        if (_this.state.trafficPolicy.peerAuthnSelector.addPeerAuthnModified) {\n          promises.push(API.createIstioConfigDetail(_this.props.namespace, 'peerauthentications', JSON.stringify(pa)));\n        } else {\n          promises.push(API.updateIstioConfigDetail(_this.props.namespace, 'peerauthentications', dr.metadata.name, JSON.stringify(pa)));\n        }\n      } else if (_this.state.trafficPolicy.peerAuthnSelector.addPeerAuthnModified) {\n        promises.push(API.deleteIstioConfigDetail(_this.props.namespace, 'peerauthentications', dr.metadata.name));\n      }\n    };\n\n    _this.onVsHosts = function (valid, vsHosts) {\n      _this.setState(function (prevState) {\n        prevState.valid.vsHosts = valid; // When adding a new Gateway, VirtualService host should be synced with Gateway host\n\n        if (prevState.gateway && prevState.gateway.addGateway && prevState.gateway.newGateway) {\n          prevState.gateway.gwHosts = vsHosts.join(',');\n        }\n\n        return {\n          valid: prevState.valid,\n          vsHosts: vsHosts\n        };\n      });\n    };\n\n    _this.onTrafficPolicy = function (valid, trafficPolicy) {\n      _this.setState(function (prevState) {\n        // At the moment this callback only updates the valid of the loadbalancer\n        // tls is always true, but I maintain it on the structure for consistency\n        prevState.valid.tls = valid;\n        prevState.valid.lb = valid;\n        return {\n          valid: prevState.valid,\n          trafficPolicy: trafficPolicy\n        };\n      });\n    };\n\n    _this.onCircuitBreaker = function (circuitBreaker) {\n      _this.setState(function (prevState) {\n        prevState.valid.cp = circuitBreaker.isValidConnectionPool;\n        prevState.valid.od = circuitBreaker.isValidOutlierDetection;\n        prevState.trafficPolicy.addConnectionPool = circuitBreaker.addConnectionPool;\n        prevState.trafficPolicy.connectionPool = circuitBreaker.connectionPool;\n        prevState.trafficPolicy.addOutlierDetection = circuitBreaker.addOutlierDetection;\n        prevState.trafficPolicy.outlierDetection = circuitBreaker.outlierDetection;\n        return {\n          valid: prevState.valid,\n          trafficPolicy: prevState.trafficPolicy\n        };\n      });\n    };\n\n    _this.onGateway = function (valid, gateway) {\n      _this.setState(function (prevState) {\n        prevState.valid.gateway = valid; // When adding a new Gateway, VirtualService host should be synced with Gateway host\n\n        return {\n          valid: prevState.valid,\n          gateway: gateway,\n          vsHosts: gateway.addGateway && gateway.newGateway && gateway.gwHosts.length > 0 ? gateway.gwHosts.split(',') : prevState.vsHosts\n        };\n      });\n    };\n\n    _this.onWeightsChange = function (valid, workloads) {\n      _this.setState(function (prevState) {\n        prevState.valid.mainWizard = valid;\n        return {\n          valid: prevState.valid,\n          workloads: workloads\n        };\n      });\n    };\n\n    _this.onRulesChange = function (valid, rules) {\n      _this.setState(function (prevState) {\n        prevState.valid.mainWizard = valid;\n        return {\n          valid: prevState.valid,\n          rules: rules\n        };\n      });\n    };\n\n    _this.onFaultInjectionRouteChange = function (valid, faultInjectionRoute) {\n      _this.setState(function (prevState) {\n        prevState.valid.mainWizard = valid;\n        return {\n          valid: prevState.valid,\n          faultInjectionRoute: faultInjectionRoute\n        };\n      });\n    };\n\n    _this.onTimeoutRetryRouteChange = function (valid, timeoutRetryRoute) {\n      _this.setState(function (prevState) {\n        prevState.valid.mainWizard = valid;\n        return {\n          valid: prevState.valid,\n          timeoutRetryRoute: timeoutRetryRoute\n        };\n      });\n    };\n\n    _this.isValid = function (state) {\n      return state.valid.mainWizard && state.valid.vsHosts && state.valid.tls && state.valid.lb && state.valid.gateway && state.valid.cp && state.valid.od;\n    };\n\n    _this.advancedHandleTabClick = function (_event, tabIndex) {\n      _this.setState({\n        advancedTabKey: tabIndex\n      });\n    };\n\n    _this.state = emptyServiceWizardState(fqdnServiceName(props.serviceName, props.namespace));\n    return _this;\n  }\n\n  _createClass(ServiceWizard, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.show !== this.props.show || !this.compareWorkloads(prevProps.workloads, this.props.workloads)) {\n        var isMainWizardValid;\n\n        switch (this.props.type) {\n          // By default the rule of Weighted routing should be valid\n          case WIZARD_TRAFFIC_SHIFTING:\n            isMainWizardValid = true;\n            break;\n          // By default no rules is a no valid scenario\n\n          case WIZARD_REQUEST_ROUTING:\n            isMainWizardValid = false;\n            break;\n\n          case WIZARD_FAULT_INJECTION:\n          case WIZARD_REQUEST_TIMEOUTS:\n          default:\n            isMainWizardValid = true;\n            break;\n        }\n\n        var initVsHosts = getInitHosts(this.props.virtualServices);\n\n        var _getInitTlsMode = getInitTlsMode(this.props.destinationRules),\n            _getInitTlsMode2 = _slicedToArray(_getInitTlsMode, 4),\n            initMtlsMode = _getInitTlsMode2[0],\n            initClientCertificate = _getInitTlsMode2[1],\n            initPrivateKey = _getInitTlsMode2[2],\n            initCaCertificates = _getInitTlsMode2[3];\n\n        var initLoadBalancer = getInitLoadBalancer(this.props.destinationRules);\n        var initConsistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n\n        if (initLoadBalancer && initLoadBalancer.consistentHash) {\n          if (initLoadBalancer.consistentHash.httpHeaderName) {\n            initConsistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n          } else if (initLoadBalancer.consistentHash.httpCookie) {\n            initConsistentHashType = ConsistentHashType.HTTP_COOKIE;\n          } else if (initLoadBalancer.consistentHash.useSourceIp) {\n            initConsistentHashType = ConsistentHashType.USE_SOURCE_IP;\n          }\n        }\n\n        var initPeerAuthentication = getInitPeerAuthentication(this.props.destinationRules, this.props.peerAuthentications);\n        var initConnetionPool = getInitConnectionPool(this.props.destinationRules);\n        var initOutlierDetection = getInitOutlierDetection(this.props.destinationRules);\n        var trafficPolicy = {\n          tlsModified: initMtlsMode !== '',\n          mtlsMode: initMtlsMode !== '' ? initMtlsMode : UNSET,\n          clientCertificate: initClientCertificate,\n          privateKey: initPrivateKey,\n          caCertificates: initCaCertificates,\n          addLoadBalancer: initLoadBalancer !== undefined,\n          simpleLB: initLoadBalancer !== undefined && initLoadBalancer.simple !== undefined,\n          consistentHashType: initConsistentHashType,\n          loadBalancer: initLoadBalancer ? initLoadBalancer : {\n            simple: ROUND_ROBIN\n          },\n          peerAuthnSelector: {\n            addPeerAuthentication: initPeerAuthentication !== undefined,\n            addPeerAuthnModified: false,\n            mode: initPeerAuthentication || PeerAuthenticationMutualTLSMode.UNSET\n          },\n          addConnectionPool: initConnetionPool ? true : false,\n          connectionPool: initConnetionPool ? initConnetionPool : {\n            tcp: {\n              maxConnections: 1\n            },\n            http: {\n              http1MaxPendingRequests: 1\n            }\n          },\n          addOutlierDetection: initOutlierDetection ? true : false,\n          outlierDetection: initOutlierDetection ? initOutlierDetection : {\n            consecutiveErrors: 1\n          }\n        };\n        var gateway = {\n          addGateway: false,\n          gwHosts: '',\n          gwHostsValid: false,\n          newGateway: false,\n          selectedGateway: '',\n          addMesh: false,\n          port: 80\n        };\n\n        if (hasGateway(this.props.virtualServices)) {\n          var _getInitGateway = getInitGateway(this.props.virtualServices),\n              _getInitGateway2 = _slicedToArray(_getInitGateway, 2),\n              gatewaySelected = _getInitGateway2[0],\n              isMesh = _getInitGateway2[1];\n\n          gateway.addGateway = true;\n          gateway.selectedGateway = gatewaySelected;\n          gateway.addMesh = isMesh;\n        }\n\n        this.setState({\n          showWizard: this.props.show,\n          workloads: [],\n          rules: [],\n          valid: {\n            mainWizard: isMainWizardValid,\n            vsHosts: true,\n            tls: true,\n            lb: true,\n            gateway: true,\n            cp: true,\n            od: true\n          },\n          vsHosts: initVsHosts.length > 1 || initVsHosts.length === 1 && initVsHosts[0].length > 0 ? initVsHosts : [fqdnServiceName(this.props.serviceName, this.props.namespace)],\n          trafficPolicy: trafficPolicy,\n          gateway: gateway\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _getInitGateway3 = getInitGateway(this.props.virtualServices),\n          _getInitGateway4 = _slicedToArray(_getInitGateway3, 2),\n          gatewaySelected = _getInitGateway4[0],\n          isMesh = _getInitGateway4[1];\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        width: '75%',\n        title: this.props.type.length > 0 ? this.props.update ? 'Update ' + WIZARD_TITLES[this.props.type] : 'Create ' + WIZARD_TITLES[this.props.type] : '',\n        isOpen: this.state.showWizard,\n        onClose: function onClose() {\n          return _this2.onClose(false);\n        },\n        onKeyPress: function onKeyPress(e) {\n          if (e.key === 'Enter' && _this2.isValid(_this2.state)) {\n            _this2.onCreateUpdate();\n          }\n        },\n        actions: [/*#__PURE__*/React.createElement(Button, {\n          key: \"cancel\",\n          variant: \"secondary\",\n          onClick: function onClick() {\n            return _this2.onClose(false);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 11\n          }\n        }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n          isDisabled: !this.isValid(this.state),\n          key: \"confirm\",\n          variant: \"primary\",\n          onClick: this.onCreateUpdate,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 11\n          }\n        }, this.props.update ? 'Update' : 'Create')],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 7\n        }\n      }, this.props.type === WIZARD_REQUEST_ROUTING && /*#__PURE__*/React.createElement(RequestRouting, {\n        serviceName: this.props.serviceName,\n        workloads: this.props.workloads,\n        initRules: getInitRules(this.props.workloads, this.props.virtualServices, this.props.destinationRules),\n        onChange: this.onRulesChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }\n      }), this.props.type === WIZARD_FAULT_INJECTION && /*#__PURE__*/React.createElement(FaultInjection, {\n        initFaultInjectionRoute: getInitFaultInjectionRoute(this.props.workloads, this.props.virtualServices, this.props.destinationRules),\n        onChange: this.onFaultInjectionRouteChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }\n      }), (this.props.type === WIZARD_TRAFFIC_SHIFTING || this.props.type === WIZARD_TCP_TRAFFIC_SHIFTING) && /*#__PURE__*/React.createElement(TrafficShifting, {\n        showValid: true,\n        workloads: this.props.workloads,\n        initWeights: getInitWeights(this.props.workloads, this.props.virtualServices, this.props.destinationRules),\n        showMirror: this.props.type === WIZARD_TRAFFIC_SHIFTING,\n        onChange: this.onWeightsChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }\n      }), this.props.type === WIZARD_REQUEST_TIMEOUTS && /*#__PURE__*/React.createElement(RequestTimeouts, {\n        initTimeoutRetry: getInitTimeoutRetryRoute(this.props.workloads, this.props.virtualServices, this.props.destinationRules),\n        onChange: this.onTimeoutRetryRouteChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }\n      }), (this.props.type === WIZARD_REQUEST_ROUTING || this.props.type === WIZARD_FAULT_INJECTION || this.props.type === WIZARD_TRAFFIC_SHIFTING || this.props.type === WIZARD_TCP_TRAFFIC_SHIFTING || this.props.type === WIZARD_REQUEST_TIMEOUTS) && /*#__PURE__*/React.createElement(Expandable, {\n        className: advancedOptionsStyle,\n        isExpanded: this.state.showAdvanced,\n        toggleText: (this.state.showAdvanced ? 'Hide' : 'Show') + ' Advanced Options',\n        onToggle: function onToggle() {\n          _this2.setState({\n            showAdvanced: !_this2.state.showAdvanced\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        isFilled: true,\n        activeKey: this.state.advancedTabKey,\n        onSelect: this.advancedHandleTabClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 0,\n        title: 'Destination Hosts',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(VirtualServiceHosts, {\n        vsHosts: this.state.vsHosts,\n        onVsHostsChange: this.onVsHosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 1,\n        title: 'Gateways',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(GatewaySelector, {\n        serviceName: this.props.serviceName,\n        hasGateway: hasGateway(this.props.virtualServices),\n        gateway: gatewaySelected,\n        isMesh: isMesh,\n        gateways: this.props.gateways,\n        onGatewayChange: this.onGateway,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 2,\n        title: 'Traffic Policy',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TrafficPolicyContainer, {\n        mtlsMode: this.state.trafficPolicy.mtlsMode,\n        clientCertificate: this.state.trafficPolicy.clientCertificate,\n        privateKey: this.state.trafficPolicy.privateKey,\n        caCertificates: this.state.trafficPolicy.caCertificates,\n        hasLoadBalancer: this.state.trafficPolicy.addLoadBalancer,\n        loadBalancer: this.state.trafficPolicy.loadBalancer,\n        nsWideStatus: this.props.tlsStatus,\n        hasPeerAuthentication: this.state.trafficPolicy.peerAuthnSelector.addPeerAuthentication,\n        peerAuthenticationMode: this.state.trafficPolicy.peerAuthnSelector.mode,\n        addConnectionPool: this.state.trafficPolicy.addConnectionPool,\n        connectionPool: this.state.trafficPolicy.connectionPool,\n        addOutlierDetection: this.state.trafficPolicy.addOutlierDetection,\n        outlierDetection: this.state.trafficPolicy.outlierDetection,\n        onTrafficPolicyChange: this.onTrafficPolicy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 19\n        }\n      }))), this.props.type !== WIZARD_TCP_TRAFFIC_SHIFTING && /*#__PURE__*/React.createElement(Tab, {\n        eventKey: 3,\n        title: 'Circuit Breaker',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(CircuitBreaker, {\n        hasConnectionPool: this.state.trafficPolicy.addConnectionPool,\n        connectionPool: this.state.trafficPolicy.connectionPool,\n        hasOutlierDetection: this.state.trafficPolicy.addOutlierDetection,\n        outlierDetection: this.state.trafficPolicy.outlierDetection,\n        onCircuitBreakerChange: this.onCircuitBreaker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 21\n        }\n      }))))));\n    }\n  }]);\n\n  return ServiceWizard;\n}(React.Component);\n\nexport default ServiceWizard;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioWizards/ServiceWizard.tsx"],"names":["React","Button","Expandable","Modal","Tab","Tabs","API","AlertUtils","RequestRouting","TrafficShifting","TrafficPolicyContainer","ConsistentHashType","UNSET","ROUND_ROBIN","FaultInjection","buildIstioConfig","fqdnServiceName","getInitGateway","getInitHosts","getInitLoadBalancer","getInitPeerAuthentication","getInitRules","getInitTlsMode","getInitWeights","hasGateway","WIZARD_REQUEST_ROUTING","WIZARD_FAULT_INJECTION","WIZARD_TITLES","WIZARD_TRAFFIC_SHIFTING","getInitFaultInjectionRoute","WIZARD_REQUEST_TIMEOUTS","getInitTimeoutRetryRoute","getInitConnectionPool","getInitOutlierDetection","WIZARD_TCP_TRAFFIC_SHIFTING","MessageType","GatewaySelector","VirtualServiceHosts","PeerAuthenticationMutualTLSMode","style","RequestTimeouts","CircuitBreaker","_","emptyServiceWizardState","showWizard","showAdvanced","advancedTabKey","workloads","rules","faultInjectionRoute","delayed","delay","percentage","value","fixedDelay","isValidDelay","aborted","abort","httpStatus","isValidAbort","timeoutRetryRoute","isTimeout","timeout","isValidTimeout","isRetry","retries","attempts","perTryTimeout","retryOn","isValidRetry","valid","mainWizard","vsHosts","tls","lb","gateway","cp","od","advancedOptionsValid","trafficPolicy","tlsModified","mtlsMode","clientCertificate","privateKey","caCertificates","addLoadBalancer","simpleLB","consistentHashType","HTTP_HEADER_NAME","loadBalancer","simple","peerAuthnSelector","addPeerAuthentication","addPeerAuthnModified","mode","addConnectionPool","connectionPool","addOutlierDetection","outlierDetection","undefined","advancedOptionsStyle","marginTop","ServiceWizard","props","compareWorkloads","prev","current","length","i","some","w","isEqual","onClose","changed","setState","serviceName","namespace","onCreateUpdate","promises","type","state","dr","vs","gw","pa","push","createIstioConfigDetail","JSON","stringify","update","updateIstioConfigDetail","metadata","name","handlePeerAuthnUpdate","prevState","Promise","all","then","results","add","SUCCESS","catch","error","addError","deleteIstioConfigDetail","onVsHosts","addGateway","newGateway","gwHosts","join","onTrafficPolicy","onCircuitBreaker","circuitBreaker","isValidConnectionPool","isValidOutlierDetection","onGateway","split","onWeightsChange","onRulesChange","onFaultInjectionRouteChange","onTimeoutRetryRouteChange","isValid","advancedHandleTabClick","_event","tabIndex","prevProps","show","isMainWizardValid","initVsHosts","virtualServices","destinationRules","initMtlsMode","initClientCertificate","initPrivateKey","initCaCertificates","initLoadBalancer","initConsistentHashType","consistentHash","httpHeaderName","httpCookie","HTTP_COOKIE","useSourceIp","USE_SOURCE_IP","initPeerAuthentication","peerAuthentications","initConnetionPool","initOutlierDetection","tcp","maxConnections","http","http1MaxPendingRequests","consecutiveErrors","gwHostsValid","selectedGateway","addMesh","port","gatewaySelected","isMesh","e","key","marginBottom","gateways","tlsStatus","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Expandable, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { WorkloadOverview } from '../../types/ServiceInfo';\nimport * as API from '../../services/Api';\nimport { Response } from '../../services/Api';\nimport * as AlertUtils from '../../utils/AlertUtils';\nimport RequestRouting from './RequestRouting';\nimport TrafficShifting, { WorkloadWeight } from './TrafficShifting';\nimport TrafficPolicyContainer, {\n  ConsistentHashType,\n  TrafficPolicyState,\n  UNSET\n} from '../../components/IstioWizards/TrafficPolicy';\nimport { ROUND_ROBIN } from './TrafficPolicy';\nimport FaultInjection, { FaultInjectionRoute } from './FaultInjection';\nimport { Rule } from './RequestRouting/Rules';\nimport {\n  buildIstioConfig,\n  fqdnServiceName,\n  getInitGateway,\n  getInitHosts,\n  getInitLoadBalancer,\n  getInitPeerAuthentication,\n  getInitRules,\n  getInitTlsMode,\n  getInitWeights,\n  hasGateway,\n  WIZARD_REQUEST_ROUTING,\n  WIZARD_FAULT_INJECTION,\n  WIZARD_TITLES,\n  WIZARD_TRAFFIC_SHIFTING,\n  ServiceWizardProps,\n  ServiceWizardState,\n  getInitFaultInjectionRoute,\n  WIZARD_REQUEST_TIMEOUTS,\n  getInitTimeoutRetryRoute,\n  getInitConnectionPool,\n  getInitOutlierDetection,\n  WIZARD_TCP_TRAFFIC_SHIFTING\n} from './WizardActions';\nimport { MessageType } from '../../types/MessageCenter';\nimport GatewaySelector, { GatewaySelectorState } from './GatewaySelector';\nimport VirtualServiceHosts from './VirtualServiceHosts';\nimport { DestinationRule, PeerAuthentication, PeerAuthenticationMutualTLSMode } from '../../types/IstioObjects';\nimport { style } from 'typestyle';\nimport RequestTimeouts, { TimeoutRetryRoute } from './RequestTimeouts';\nimport CircuitBreaker, { CircuitBreakerState } from './CircuitBreaker';\nimport _ from 'lodash';\n\nconst emptyServiceWizardState = (fqdnServiceName: string): ServiceWizardState => {\n  return {\n    showWizard: false,\n    showAdvanced: false,\n    advancedTabKey: 0,\n    workloads: [],\n    rules: [],\n    faultInjectionRoute: {\n      workloads: [],\n      delayed: false,\n      delay: {\n        percentage: {\n          value: 100\n        },\n        fixedDelay: '5s'\n      },\n      isValidDelay: true,\n      aborted: false,\n      abort: {\n        percentage: {\n          value: 100\n        },\n        httpStatus: 503\n      },\n      isValidAbort: true\n    },\n    timeoutRetryRoute: {\n      workloads: [],\n      isTimeout: false,\n      timeout: '2s',\n      isValidTimeout: true,\n      isRetry: false,\n      retries: {\n        attempts: 3,\n        perTryTimeout: '2s',\n        retryOn: 'gateway-error,connect-failure,refused-stream'\n      },\n      isValidRetry: true\n    },\n    valid: {\n      mainWizard: true,\n      vsHosts: true,\n      tls: true,\n      lb: true,\n      gateway: true,\n      cp: true,\n      od: true\n    },\n    advancedOptionsValid: true,\n    vsHosts: [fqdnServiceName],\n    trafficPolicy: {\n      tlsModified: false,\n      mtlsMode: UNSET,\n      clientCertificate: '',\n      privateKey: '',\n      caCertificates: '',\n      addLoadBalancer: false,\n      simpleLB: false,\n      consistentHashType: ConsistentHashType.HTTP_HEADER_NAME,\n      loadBalancer: {\n        simple: ROUND_ROBIN\n      },\n      peerAuthnSelector: {\n        addPeerAuthentication: false,\n        addPeerAuthnModified: false,\n        mode: PeerAuthenticationMutualTLSMode.UNSET\n      },\n      addConnectionPool: false,\n      connectionPool: {},\n      addOutlierDetection: false,\n      outlierDetection: {}\n    },\n    gateway: undefined\n  };\n};\n\nconst advancedOptionsStyle = style({\n  marginTop: 10\n});\n\nclass ServiceWizard extends React.Component<ServiceWizardProps, ServiceWizardState> {\n  constructor(props: ServiceWizardProps) {\n    super(props);\n    this.state = emptyServiceWizardState(fqdnServiceName(props.serviceName, props.namespace));\n  }\n\n  componentDidUpdate(prevProps: ServiceWizardProps) {\n    if (prevProps.show !== this.props.show || !this.compareWorkloads(prevProps.workloads, this.props.workloads)) {\n      let isMainWizardValid: boolean;\n      switch (this.props.type) {\n        // By default the rule of Weighted routing should be valid\n        case WIZARD_TRAFFIC_SHIFTING:\n          isMainWizardValid = true;\n          break;\n        // By default no rules is a no valid scenario\n        case WIZARD_REQUEST_ROUTING:\n          isMainWizardValid = false;\n          break;\n        case WIZARD_FAULT_INJECTION:\n        case WIZARD_REQUEST_TIMEOUTS:\n        default:\n          isMainWizardValid = true;\n          break;\n      }\n      const initVsHosts = getInitHosts(this.props.virtualServices);\n      const [initMtlsMode, initClientCertificate, initPrivateKey, initCaCertificates] = getInitTlsMode(\n        this.props.destinationRules\n      );\n      const initLoadBalancer = getInitLoadBalancer(this.props.destinationRules);\n      let initConsistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n      if (initLoadBalancer && initLoadBalancer.consistentHash) {\n        if (initLoadBalancer.consistentHash.httpHeaderName) {\n          initConsistentHashType = ConsistentHashType.HTTP_HEADER_NAME;\n        } else if (initLoadBalancer.consistentHash.httpCookie) {\n          initConsistentHashType = ConsistentHashType.HTTP_COOKIE;\n        } else if (initLoadBalancer.consistentHash.useSourceIp) {\n          initConsistentHashType = ConsistentHashType.USE_SOURCE_IP;\n        }\n      }\n\n      const initPeerAuthentication = getInitPeerAuthentication(\n        this.props.destinationRules,\n        this.props.peerAuthentications\n      );\n      const initConnetionPool = getInitConnectionPool(this.props.destinationRules);\n      const initOutlierDetection = getInitOutlierDetection(this.props.destinationRules);\n      const trafficPolicy: TrafficPolicyState = {\n        tlsModified: initMtlsMode !== '',\n        mtlsMode: initMtlsMode !== '' ? initMtlsMode : UNSET,\n        clientCertificate: initClientCertificate,\n        privateKey: initPrivateKey,\n        caCertificates: initCaCertificates,\n        addLoadBalancer: initLoadBalancer !== undefined,\n        simpleLB: initLoadBalancer !== undefined && initLoadBalancer.simple !== undefined,\n        consistentHashType: initConsistentHashType,\n        loadBalancer: initLoadBalancer\n          ? initLoadBalancer\n          : {\n              simple: ROUND_ROBIN\n            },\n        peerAuthnSelector: {\n          addPeerAuthentication: initPeerAuthentication !== undefined,\n          addPeerAuthnModified: false,\n          mode: initPeerAuthentication || PeerAuthenticationMutualTLSMode.UNSET\n        },\n        addConnectionPool: initConnetionPool ? true : false,\n        connectionPool: initConnetionPool\n          ? initConnetionPool\n          : {\n              tcp: {\n                maxConnections: 1\n              },\n              http: {\n                http1MaxPendingRequests: 1\n              }\n            },\n        addOutlierDetection: initOutlierDetection ? true : false,\n        outlierDetection: initOutlierDetection\n          ? initOutlierDetection\n          : {\n              consecutiveErrors: 1\n            }\n      };\n      const gateway: GatewaySelectorState = {\n        addGateway: false,\n        gwHosts: '',\n        gwHostsValid: false,\n        newGateway: false,\n        selectedGateway: '',\n        addMesh: false,\n        port: 80\n      };\n      if (hasGateway(this.props.virtualServices)) {\n        const [gatewaySelected, isMesh] = getInitGateway(this.props.virtualServices);\n        gateway.addGateway = true;\n        gateway.selectedGateway = gatewaySelected;\n        gateway.addMesh = isMesh;\n      }\n\n      this.setState({\n        showWizard: this.props.show,\n        workloads: [],\n        rules: [],\n        valid: {\n          mainWizard: isMainWizardValid,\n          vsHosts: true,\n          tls: true,\n          lb: true,\n          gateway: true,\n          cp: true,\n          od: true\n        },\n        vsHosts:\n          initVsHosts.length > 1 || (initVsHosts.length === 1 && initVsHosts[0].length > 0)\n            ? initVsHosts\n            : [fqdnServiceName(this.props.serviceName, this.props.namespace)],\n        trafficPolicy: trafficPolicy,\n        gateway: gateway\n      });\n    }\n  }\n\n  compareWorkloads = (prev: WorkloadOverview[], current: WorkloadOverview[]): boolean => {\n    if (prev.length !== current.length) {\n      return false;\n    }\n    for (let i = 0; i < prev.length; i++) {\n      if (!current.some(w => _.isEqual(w, prev[i]))) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  onClose = (changed: boolean) => {\n    this.setState(emptyServiceWizardState(fqdnServiceName(this.props.serviceName, this.props.namespace)));\n    this.props.onClose(changed);\n  };\n\n  onCreateUpdate = () => {\n    const promises: Promise<Response<string>>[] = [];\n    switch (this.props.type) {\n      case WIZARD_TRAFFIC_SHIFTING:\n      case WIZARD_TCP_TRAFFIC_SHIFTING:\n      case WIZARD_REQUEST_ROUTING:\n      case WIZARD_FAULT_INJECTION:\n      case WIZARD_REQUEST_TIMEOUTS:\n        const [dr, vs, gw, pa] = buildIstioConfig(this.props, this.state);\n        // Gateway is only created when user has explicit selected this option\n        if (gw) {\n          promises.push(API.createIstioConfigDetail(this.props.namespace, 'gateways', JSON.stringify(gw)));\n        }\n\n        if (this.props.update) {\n          promises.push(\n            API.updateIstioConfigDetail(this.props.namespace, 'destinationrules', dr.metadata.name, JSON.stringify(dr))\n          );\n          promises.push(\n            API.updateIstioConfigDetail(this.props.namespace, 'virtualservices', vs.metadata.name, JSON.stringify(vs))\n          );\n\n          this.handlePeerAuthnUpdate(pa, dr, promises);\n          // Note that Gateways are not updated from the Wizard, only the VS hosts/gateways sections are updated\n        } else {\n          promises.push(API.createIstioConfigDetail(this.props.namespace, 'destinationrules', JSON.stringify(dr)));\n          promises.push(API.createIstioConfigDetail(this.props.namespace, 'virtualservices', JSON.stringify(vs)));\n\n          if (pa) {\n            promises.push(API.createIstioConfigDetail(this.props.namespace, 'peerauthentications', JSON.stringify(pa)));\n          }\n        }\n        break;\n      default:\n    }\n    // Disable button before promise is completed. Then Wizard is closed.\n    this.setState(prevState => {\n      prevState.valid.mainWizard = false;\n      return {\n        valid: prevState.valid\n      };\n    });\n    Promise.all(promises)\n      .then(results => {\n        if (results.length > 0) {\n          AlertUtils.add(\n            'Istio Config ' +\n              (this.props.update ? 'updated' : 'created') +\n              ' for ' +\n              this.props.serviceName +\n              ' service.',\n            'default',\n            MessageType.SUCCESS\n          );\n        }\n        this.onClose(true);\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not ' + (this.props.update ? 'update' : 'create') + ' Istio config objects.', error);\n        this.onClose(true);\n      });\n  };\n\n  handlePeerAuthnUpdate = (\n    pa: PeerAuthentication | undefined,\n    dr: DestinationRule,\n    promises: Promise<Response<string>>[]\n  ): void => {\n    if (pa) {\n      if (this.state.trafficPolicy.peerAuthnSelector.addPeerAuthnModified) {\n        promises.push(API.createIstioConfigDetail(this.props.namespace, 'peerauthentications', JSON.stringify(pa)));\n      } else {\n        promises.push(\n          API.updateIstioConfigDetail(this.props.namespace, 'peerauthentications', dr.metadata.name, JSON.stringify(pa))\n        );\n      }\n    } else if (this.state.trafficPolicy.peerAuthnSelector.addPeerAuthnModified) {\n      promises.push(API.deleteIstioConfigDetail(this.props.namespace, 'peerauthentications', dr.metadata.name));\n    }\n  };\n\n  onVsHosts = (valid: boolean, vsHosts: string[]) => {\n    this.setState(prevState => {\n      prevState.valid.vsHosts = valid;\n      // When adding a new Gateway, VirtualService host should be synced with Gateway host\n      if (prevState.gateway && prevState.gateway.addGateway && prevState.gateway.newGateway) {\n        prevState.gateway.gwHosts = vsHosts.join(',');\n      }\n      return {\n        valid: prevState.valid,\n        vsHosts: vsHosts\n      };\n    });\n  };\n\n  onTrafficPolicy = (valid: boolean, trafficPolicy: TrafficPolicyState) => {\n    this.setState(prevState => {\n      // At the moment this callback only updates the valid of the loadbalancer\n      // tls is always true, but I maintain it on the structure for consistency\n      prevState.valid.tls = valid;\n      prevState.valid.lb = valid;\n      return {\n        valid: prevState.valid,\n        trafficPolicy: trafficPolicy\n      };\n    });\n  };\n\n  onCircuitBreaker = (circuitBreaker: CircuitBreakerState) => {\n    this.setState(prevState => {\n      prevState.valid.cp = circuitBreaker.isValidConnectionPool;\n      prevState.valid.od = circuitBreaker.isValidOutlierDetection;\n      prevState.trafficPolicy.addConnectionPool = circuitBreaker.addConnectionPool;\n      prevState.trafficPolicy.connectionPool = circuitBreaker.connectionPool;\n      prevState.trafficPolicy.addOutlierDetection = circuitBreaker.addOutlierDetection;\n      prevState.trafficPolicy.outlierDetection = circuitBreaker.outlierDetection;\n      return {\n        valid: prevState.valid,\n        trafficPolicy: prevState.trafficPolicy\n      };\n    });\n  };\n\n  onGateway = (valid: boolean, gateway: GatewaySelectorState) => {\n    this.setState(prevState => {\n      prevState.valid.gateway = valid;\n      // When adding a new Gateway, VirtualService host should be synced with Gateway host\n      return {\n        valid: prevState.valid,\n        gateway: gateway,\n        vsHosts:\n          gateway.addGateway && gateway.newGateway && gateway.gwHosts.length > 0\n            ? gateway.gwHosts.split(',')\n            : prevState.vsHosts\n      };\n    });\n  };\n\n  onWeightsChange = (valid: boolean, workloads: WorkloadWeight[]) => {\n    this.setState(prevState => {\n      prevState.valid.mainWizard = valid;\n      return {\n        valid: prevState.valid,\n        workloads: workloads\n      };\n    });\n  };\n\n  onRulesChange = (valid: boolean, rules: Rule[]) => {\n    this.setState(prevState => {\n      prevState.valid.mainWizard = valid;\n      return {\n        valid: prevState.valid,\n        rules: rules\n      };\n    });\n  };\n\n  onFaultInjectionRouteChange = (valid: boolean, faultInjectionRoute: FaultInjectionRoute) => {\n    this.setState(prevState => {\n      prevState.valid.mainWizard = valid;\n      return {\n        valid: prevState.valid,\n        faultInjectionRoute: faultInjectionRoute\n      };\n    });\n  };\n\n  onTimeoutRetryRouteChange = (valid: boolean, timeoutRetryRoute: TimeoutRetryRoute) => {\n    this.setState(prevState => {\n      prevState.valid.mainWizard = valid;\n      return {\n        valid: prevState.valid,\n        timeoutRetryRoute: timeoutRetryRoute\n      };\n    });\n  };\n\n  isValid = (state: ServiceWizardState): boolean => {\n    return (\n      state.valid.mainWizard &&\n      state.valid.vsHosts &&\n      state.valid.tls &&\n      state.valid.lb &&\n      state.valid.gateway &&\n      state.valid.cp &&\n      state.valid.od\n    );\n  };\n\n  advancedHandleTabClick = (_event, tabIndex) => {\n    this.setState({\n      advancedTabKey: tabIndex\n    });\n  };\n\n  render() {\n    const [gatewaySelected, isMesh] = getInitGateway(this.props.virtualServices);\n    return (\n      <Modal\n        width={'75%'}\n        title={\n          this.props.type.length > 0\n            ? this.props.update\n              ? 'Update ' + WIZARD_TITLES[this.props.type]\n              : 'Create ' + WIZARD_TITLES[this.props.type]\n            : ''\n        }\n        isOpen={this.state.showWizard}\n        onClose={() => this.onClose(false)}\n        onKeyPress={e => {\n          if (e.key === 'Enter' && this.isValid(this.state)) {\n            this.onCreateUpdate();\n          }\n        }}\n        actions={[\n          <Button key=\"cancel\" variant=\"secondary\" onClick={() => this.onClose(false)}>\n            Cancel\n          </Button>,\n          <Button isDisabled={!this.isValid(this.state)} key=\"confirm\" variant=\"primary\" onClick={this.onCreateUpdate}>\n            {this.props.update ? 'Update' : 'Create'}\n          </Button>\n        ]}\n      >\n        {this.props.type === WIZARD_REQUEST_ROUTING && (\n          <RequestRouting\n            serviceName={this.props.serviceName}\n            workloads={this.props.workloads}\n            initRules={getInitRules(this.props.workloads, this.props.virtualServices, this.props.destinationRules)}\n            onChange={this.onRulesChange}\n          />\n        )}\n        {this.props.type === WIZARD_FAULT_INJECTION && (\n          <FaultInjection\n            initFaultInjectionRoute={getInitFaultInjectionRoute(\n              this.props.workloads,\n              this.props.virtualServices,\n              this.props.destinationRules\n            )}\n            onChange={this.onFaultInjectionRouteChange}\n          />\n        )}\n        {(this.props.type === WIZARD_TRAFFIC_SHIFTING || this.props.type === WIZARD_TCP_TRAFFIC_SHIFTING) && (\n          <TrafficShifting\n            showValid={true}\n            workloads={this.props.workloads}\n            initWeights={getInitWeights(this.props.workloads, this.props.virtualServices, this.props.destinationRules)}\n            showMirror={this.props.type === WIZARD_TRAFFIC_SHIFTING}\n            onChange={this.onWeightsChange}\n          />\n        )}\n        {this.props.type === WIZARD_REQUEST_TIMEOUTS && (\n          <RequestTimeouts\n            initTimeoutRetry={getInitTimeoutRetryRoute(\n              this.props.workloads,\n              this.props.virtualServices,\n              this.props.destinationRules\n            )}\n            onChange={this.onTimeoutRetryRouteChange}\n          />\n        )}\n        {(this.props.type === WIZARD_REQUEST_ROUTING ||\n          this.props.type === WIZARD_FAULT_INJECTION ||\n          this.props.type === WIZARD_TRAFFIC_SHIFTING ||\n          this.props.type === WIZARD_TCP_TRAFFIC_SHIFTING ||\n          this.props.type === WIZARD_REQUEST_TIMEOUTS) && (\n          <Expandable\n            className={advancedOptionsStyle}\n            isExpanded={this.state.showAdvanced}\n            toggleText={(this.state.showAdvanced ? 'Hide' : 'Show') + ' Advanced Options'}\n            onToggle={() => {\n              this.setState({\n                showAdvanced: !this.state.showAdvanced\n              });\n            }}\n          >\n            <Tabs isFilled={true} activeKey={this.state.advancedTabKey} onSelect={this.advancedHandleTabClick}>\n              <Tab eventKey={0} title={'Destination Hosts'}>\n                <div style={{ marginTop: '20px' }}>\n                  <VirtualServiceHosts vsHosts={this.state.vsHosts} onVsHostsChange={this.onVsHosts} />\n                </div>\n              </Tab>\n              <Tab eventKey={1} title={'Gateways'}>\n                <div style={{ marginTop: '20px', marginBottom: '10px' }}>\n                  <GatewaySelector\n                    serviceName={this.props.serviceName}\n                    hasGateway={hasGateway(this.props.virtualServices)}\n                    gateway={gatewaySelected}\n                    isMesh={isMesh}\n                    gateways={this.props.gateways}\n                    onGatewayChange={this.onGateway}\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey={2} title={'Traffic Policy'}>\n                <div style={{ marginTop: '20px', marginBottom: '10px' }}>\n                  <TrafficPolicyContainer\n                    mtlsMode={this.state.trafficPolicy.mtlsMode}\n                    clientCertificate={this.state.trafficPolicy.clientCertificate}\n                    privateKey={this.state.trafficPolicy.privateKey}\n                    caCertificates={this.state.trafficPolicy.caCertificates}\n                    hasLoadBalancer={this.state.trafficPolicy.addLoadBalancer}\n                    loadBalancer={this.state.trafficPolicy.loadBalancer}\n                    nsWideStatus={this.props.tlsStatus}\n                    hasPeerAuthentication={this.state.trafficPolicy.peerAuthnSelector.addPeerAuthentication}\n                    peerAuthenticationMode={this.state.trafficPolicy.peerAuthnSelector.mode}\n                    addConnectionPool={this.state.trafficPolicy.addConnectionPool}\n                    connectionPool={this.state.trafficPolicy.connectionPool}\n                    addOutlierDetection={this.state.trafficPolicy.addOutlierDetection}\n                    outlierDetection={this.state.trafficPolicy.outlierDetection}\n                    onTrafficPolicyChange={this.onTrafficPolicy}\n                  />\n                </div>\n              </Tab>\n              {this.props.type !== WIZARD_TCP_TRAFFIC_SHIFTING && (\n                <Tab eventKey={3} title={'Circuit Breaker'}>\n                  <div style={{ marginTop: '20px', marginBottom: '10px' }}>\n                    <CircuitBreaker\n                      hasConnectionPool={this.state.trafficPolicy.addConnectionPool}\n                      connectionPool={this.state.trafficPolicy.connectionPool}\n                      hasOutlierDetection={this.state.trafficPolicy.addOutlierDetection}\n                      outlierDetection={this.state.trafficPolicy.outlierDetection}\n                      onCircuitBreakerChange={this.onCircuitBreaker}\n                    />\n                  </div>\n                </Tab>\n              )}\n            </Tabs>\n          </Expandable>\n        )}\n      </Modal>\n    );\n  }\n}\n\nexport default ServiceWizard;\n"]},"metadata":{},"sourceType":"module"}
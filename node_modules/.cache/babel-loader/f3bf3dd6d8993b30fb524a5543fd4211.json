{"ast":null,"code":"import _toConsumableArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Charts/ChartWithLegend.tsx\";\nimport * as React from 'react';\nimport { Chart, ChartGroup, ChartScatter } from '@patternfly/react-charts';\nimport { VictoryAxis, VictoryBoxPlot, VictoryLabel, VictoryLegend, VictoryPortal, VictoryTheme } from 'victory';\nimport { format as d3Format } from 'd3-format';\nimport { getFormatter, getUnit } from 'utils/Formatter';\nimport { newBrushVoronoiContainer } from './Container';\nimport { toBuckets } from 'utils/VictoryChartsUtils';\nimport { addLegendEvent } from 'utils/VictoryEvents';\nimport { CustomTooltip } from './CustomTooltip';\nimport { INTERPOTALION_STRATEGY } from './SparklineChart';\nimport { KialiIcon } from '../../config/KialiIcon';\nimport { Button, ButtonVariant, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nvar overlayName = 'overlay';\nvar AxisStyle = {\n  tickLabels: {\n    fontSize: 12,\n    padding: 2\n  },\n  grid: {\n    fill: 'none',\n    stroke: '#ECEFF1',\n    strokeDasharray: '10, 5',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n    pointerEvents: 'painted'\n  }\n};\nexport var MIN_HEIGHT = 20;\nexport var MIN_HEIGHT_YAXIS = 70;\nexport var MIN_WIDTH = 275;\nexport var LEGEND_HEIGHT = 25;\nvar FONT_SIZE_LEGEND = 14;\nvar moreLegendIconStyle = style({\n  margin: '0px 5px 2px 10px',\n  verticalAlign: '-4px !important'\n});\nvar noEnoughHeightStyle = style({\n  margin: '0px 0px 0px 0px',\n  verticalAlign: '-4px !important'\n});\n\nvar ChartWithLegend = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartWithLegend, _React$Component);\n\n  var _super = _createSuper(ChartWithLegend);\n\n  function ChartWithLegend(_props) {\n    var _this;\n\n    _classCallCheck(this, ChartWithLegend);\n\n    _this = _super.call(this, _props);\n    _this.containerRef = void 0;\n    _this.hoveredItem = void 0;\n    _this.mouseOnLegend = false;\n\n    _this.onTooltipOpen = function (points) {\n      if (points && points.length > 0) {\n        _this.hoveredItem = points[0];\n      } else {\n        _this.hoveredItem = undefined;\n      }\n    };\n\n    _this.onTooltipClose = function () {\n      _this.hoveredItem = undefined;\n    };\n\n    _this.onShowMoreLegend = function () {\n      _this.setState(function (prevState) {\n        return {\n          showMoreLegend: !prevState.showMoreLegend\n        };\n      });\n    };\n\n    _this.renderTimeSeries = function (height) {\n      var groupOffset = _this.props.groupOffset || 0;\n      return /*#__PURE__*/React.createElement(ChartGroup, {\n        offset: groupOffset,\n        height: height,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 7\n        }\n      }, _this.props.data.map(function (serie, idx) {\n        if (_this.state.hiddenSeries.has(serie.legendItem.name)) {\n          return undefined;\n        }\n\n        return React.cloneElement(_this.props.seriesComponent, _this.withStyle({\n          key: 'serie-' + idx,\n          name: 'serie-' + idx,\n          data: serie.datapoints,\n          interpolation: INTERPOTALION_STRATEGY\n        }, serie.color));\n      }));\n    };\n\n    _this.renderCategories = function () {\n      var domainX = 1;\n      var nbSeries = _this.props.data.length - _this.state.hiddenSeries.size;\n      var size = (_this.props.sizeRatio || 1) * _this.state.width / Math.max(nbSeries, 1);\n      return _this.props.data.map(function (serie, idx) {\n        if (_this.state.hiddenSeries.has(serie.legendItem.name)) {\n          return undefined;\n        }\n\n        return React.cloneElement(_this.props.seriesComponent, _this.withStyle({\n          key: 'serie-' + idx,\n          name: 'serie-' + idx,\n          data: serie.datapoints.map(function (d) {\n            return _objectSpread(_objectSpread({\n              size: size\n            }, d), {}, {\n              x: domainX++\n            });\n          }),\n          barWidth: size\n        }, serie.color));\n      });\n    };\n\n    _this.withStyle = function (props, color) {\n      return _this.props.overrideSeriesComponentStyle === false ? props : _objectSpread(_objectSpread({}, props), {}, {\n        style: {\n          data: {\n            fill: _this.props.fill ? color : undefined,\n            stroke: _this.props.stroke ? color : undefined\n          }\n        }\n      });\n    };\n\n    _this.handleResize = function () {\n      if (_this.containerRef && _this.containerRef.current) {\n        _this.setState({\n          width: _this.containerRef.current.clientWidth\n        });\n      }\n    };\n\n    _this.containerRef = React.createRef();\n    _this.state = {\n      width: 0,\n      hiddenSeries: new Set([overlayName]),\n      showMoreLegend: false\n    };\n    return _this;\n  }\n\n  _createClass(ChartWithLegend, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.handleResize();\n\n        window.addEventListener('resize', _this2.handleResize);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n          _this$props$overlay;\n\n      var scaleInfo = this.scaledAxisInfo(this.props.data);\n      var fullLegendData = this.buildFullLegendData();\n      var filteredLegendData = this.buildFilteredLegendData(fullLegendData);\n      var showMoreLegend = fullLegendData.length > filteredLegendData.length;\n      var chartHeight = this.props.chartHeight || 300;\n      var overlayIdx = this.props.data.length;\n      var showOverlay = this.props.overlay && this.props.showSpans || false;\n      var overlayRightPadding = showOverlay ? 15 : 0;\n      var padding = {\n        top: 0,\n        bottom: chartHeight > MIN_HEIGHT_YAXIS ? LEGEND_HEIGHT : 0,\n        left: 0,\n        right: 10 + overlayRightPadding\n      };\n      var events = [];\n\n      if (this.props.onClick) {\n        events.push({\n          target: 'parent',\n          eventHandlers: {\n            onClick: function onClick() {\n              if (_this3.hoveredItem) {\n                _this3.props.onClick(_this3.hoveredItem);\n              }\n\n              return [];\n            }\n          }\n        });\n      }\n\n      this.props.data.forEach(function (s, idx) {\n        return _this3.registerEvents(events, idx, 'serie-' + idx, s.legendItem.name);\n      });\n      var useSecondAxis = showOverlay;\n      var normalizedOverlay = [];\n      var overlayFactor = 1.0;\n      var mainMax = Math.max.apply(Math, _toConsumableArray(this.props.data.map(function (line) {\n        return Math.max.apply(Math, _toConsumableArray(line.datapoints.map(function (d) {\n          return d.y;\n        })));\n      })));\n\n      if (this.props.overlay) {\n        this.registerEvents(events, overlayIdx, overlayName, overlayName); // Normalization for y-axis display to match y-axis domain of the main data\n        // (see https://formidable.com/open-source/victory/gallery/multiple-dependent-axes/)\n\n        var overlayMax = Math.max.apply(Math, _toConsumableArray(this.props.overlay.vcLine.datapoints.map(function (d) {\n          return d.y;\n        })));\n\n        if (overlayMax !== 0) {\n          overlayFactor = mainMax / overlayMax;\n        }\n\n        if (this.props.unit === this.props.overlay.info.lineInfo.unit && overlayFactor > 0.5 && overlayFactor < 2) {\n          // Looks like it's fine to re-use the existing axis\n          useSecondAxis = false;\n          overlayFactor = 1.0;\n        }\n\n        normalizedOverlay = this.normalizeOverlay(overlayFactor);\n\n        if (this.props.overlay.info.buckets) {\n          // Transform to bucketed stats\n          var model = _objectSpread(_objectSpread({}, this.props.overlay.info.lineInfo), {}, {\n            scaleFactor: overlayFactor\n          });\n\n          normalizedOverlay = toBuckets(this.props.overlay.info.buckets, normalizedOverlay, model, this.props.timeWindow);\n        }\n      }\n\n      var tooltipHooks = {\n        onOpen: this.onTooltipOpen,\n        onClose: this.onTooltipClose\n      };\n      var labelComponent = this.props.labelComponent ? React.cloneElement(this.props.labelComponent, tooltipHooks) : /*#__PURE__*/React.createElement(CustomTooltip, Object.assign({\n        showTime: true\n      }, tooltipHooks, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 7\n        }\n      }));\n      var filteredData = this.props.data.filter(function (s) {\n        return !_this3.state.hiddenSeries.has(s.legendItem.name);\n      });\n      var chart = /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.containerRef,\n        style: {\n          marginTop: '0px',\n          height: chartHeight\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Chart, Object.assign({\n        width: this.state.width,\n        padding: padding,\n        events: events,\n        height: chartHeight,\n        containerComponent: newBrushVoronoiContainer(labelComponent, this.props.brushHandlers, function () {\n          return _this3.mouseOnLegend;\n        }),\n        scale: {\n          x: this.props.xAxis === 'series' ? 'linear' : 'time'\n        } // Hack: 1 pxl on Y domain padding to prevent harsh clipping (https://github.com/kiali/kiali/issues/2069)\n        ,\n        domainPadding: {\n          y: 1,\n          x: this.props.xAxis === 'series' ? 50 : undefined\n        }\n      }, this.props.moreChartProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }), // Use width to change style of the x series supporting narrow scenarios\n      this.props.xAxis === 'series' ? /*#__PURE__*/React.createElement(VictoryAxis, {\n        domain: [0, filteredData.length + 1],\n        style: AxisStyle,\n        tickValues: filteredData.map(function (s) {\n          return s.legendItem.name;\n        }),\n        theme: VictoryTheme.material,\n        tickFormat: function tickFormat() {\n          return '';\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }\n      }) : this.state.width <= MIN_WIDTH ? /*#__PURE__*/React.createElement(VictoryAxis, {\n        tickCount: scaleInfo.count,\n        style: AxisStyle,\n        theme: VictoryTheme.material,\n        domain: this.props.timeWindow,\n        tickFormat: function tickFormat(t) {\n          return \":\".concat(t.getMinutes());\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(VictoryAxis, {\n        tickCount: scaleInfo.count,\n        style: AxisStyle,\n        theme: VictoryTheme.material,\n        domain: this.props.timeWindow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        tickLabelComponent: /*#__PURE__*/React.createElement(VictoryPortal, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(VictoryLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }\n        })),\n        dependentAxis: true,\n        tickCount: chartHeight <= MIN_HEIGHT_YAXIS ? 1 : undefined,\n        tickFormat: getFormatter(d3Format, this.props.unit),\n        label: getUnit(d3Format, this.props.unit, mainMax),\n        axisLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, {\n          y: -10,\n          x: -15,\n          angle: 0,\n          renderInPortal: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 33\n          }\n        }),\n        theme: VictoryTheme.material,\n        style: AxisStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }), useSecondAxis && this.props.overlay && /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        offsetX: this.state.width - overlayRightPadding,\n        style: AxisStyle,\n        tickCount: chartHeight <= MIN_HEIGHT_YAXIS ? 1 : undefined,\n        tickFormat: function tickFormat(t) {\n          var _this3$props$overlay;\n\n          return getFormatter(d3Format, ((_this3$props$overlay = _this3.props.overlay) === null || _this3$props$overlay === void 0 ? void 0 : _this3$props$overlay.info.lineInfo.unit) || '')(t / overlayFactor);\n        },\n        tickLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, {\n          dx: 15,\n          textAnchor: 'start',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 35\n          }\n        }),\n        theme: VictoryTheme.material,\n        label: getUnit(d3Format, ((_this$props$overlay = this.props.overlay) === null || _this$props$overlay === void 0 ? void 0 : _this$props$overlay.info.lineInfo.unit) || '', Math.max.apply(Math, _toConsumableArray(this.props.overlay.vcLine.datapoints.map(function (d) {\n          return d.y;\n        })))),\n        axisLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, {\n          y: -10,\n          x: this.state.width,\n          angle: 0,\n          renderInPortal: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 35\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }\n      }), this.props.xAxis === 'series' ? this.renderCategories() : this.renderTimeSeries(chartHeight > MIN_HEIGHT_YAXIS ? chartHeight - LEGEND_HEIGHT : chartHeight), showOverlay && (this.props.overlay.info.buckets ? /*#__PURE__*/React.createElement(VictoryBoxPlot, {\n        key: \"overlay\",\n        name: overlayName,\n        data: normalizedOverlay,\n        style: {\n          data: this.props.overlay.info.dataStyle,\n          min: {\n            stroke: this.props.overlay.info.lineInfo.color,\n            strokeWidth: 2\n          },\n          max: {\n            stroke: this.props.overlay.info.lineInfo.color,\n            strokeWidth: 2\n          },\n          q1: {\n            fill: this.props.overlay.info.lineInfo.color\n          },\n          q3: {\n            fill: this.props.overlay.info.lineInfo.color\n          },\n          median: {\n            stroke: 'white',\n            strokeWidth: 2\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(ChartScatter, {\n        key: \"overlay\",\n        name: overlayName,\n        data: normalizedOverlay,\n        style: {\n          data: this.props.overlay.info.dataStyle\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 15\n        }\n      })), chartHeight > MIN_HEIGHT_YAXIS ? /*#__PURE__*/React.createElement(VictoryLegend, {\n        name: 'serie-legend',\n        data: filteredLegendData,\n        x: 0,\n        y: chartHeight,\n        height: LEGEND_HEIGHT,\n        width: this.state.width,\n        style: {\n          data: {\n            cursor: 'pointer',\n            padding: 0\n          },\n          labels: {\n            cursor: 'pointer',\n            fontSize: FONT_SIZE_LEGEND\n          }\n        },\n        borderPadding: {\n          top: 5,\n          left: 0,\n          right: 0,\n          bottom: 0\n        },\n        symbolSpacer: 5,\n        gutter: {\n          left: 0,\n          right: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      }) : undefined), showMoreLegend && chartHeight > MIN_HEIGHT_YAXIS && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'relative',\n          left: this.state.width - 31,\n          width: 16,\n          height: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        position: TooltipPosition.left,\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 24\n          }\n        }, \"Show full legend\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        isInline: true,\n        onClick: function onClick() {\n          return _this3.onShowMoreLegend();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.MoreLegend, {\n        className: moreLegendIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 17\n        }\n      })))), this.state.showMoreLegend && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          flexDirection: 'column',\n          position: 'relative',\n          width: this.state.width,\n          height: chartHeight,\n          top: -(chartHeight + LEGEND_HEIGHT),\n          background: 'var(--pf-global--BackgroundColor--dark-100)',\n          opacity: 0.7,\n          overflow: 'auto'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }\n      }, fullLegendData.map(function (ld) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            color: 'white',\n            margin: 'auto'\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'inline-block',\n            backgroundColor: ld.symbol.fill,\n            marginRight: '5px',\n            width: '9px',\n            height: '9px'\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }\n        }), ld.name);\n      })));\n      return chartHeight > MIN_HEIGHT ? chart : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        position: TooltipPosition.right,\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            textAlign: 'left'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 20\n          }\n        }, \"Increase height of the chart\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        isInline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.MoreLegend, {\n        className: noEnoughHeightStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"buildFullLegendData\",\n    value: function buildFullLegendData() {\n      var _this4 = this;\n\n      return this.props.data.map(function (s) {\n        var name = s.legendItem.name;\n\n        if (_this4.state.hiddenSeries.has(s.legendItem.name)) {\n          return {\n            name: name,\n            symbol: _objectSpread(_objectSpread({}, s.legendItem.symbol), {}, {\n              fill: '#72767b'\n            })\n          };\n        }\n\n        return _objectSpread(_objectSpread({}, s.legendItem), {}, {\n          name: name\n        });\n      });\n    }\n  }, {\n    key: \"buildFilteredLegendData\",\n    value: function buildFilteredLegendData(fullLegendData) {\n      // 30px == \"more legend\" left button width\n      // 10px == \"more legend\" left padding\n      var maxWidth = this.state.width - 30 - 10;\n      var filtered = [];\n      var currentWidth = 0;\n\n      for (var i = 0; i < fullLegendData.length; i++) {\n        var item = fullLegendData[i]; // 12px == legend icon + space\n        // 7px == char size\n        // 15px == right padding\n\n        currentWidth += 12 + item.name.length * 7 + 15;\n\n        if (currentWidth >= maxWidth) {\n          break;\n        }\n\n        filtered.push(item);\n      }\n\n      return filtered;\n    }\n  }, {\n    key: \"registerEvents\",\n    value: function registerEvents(events, idx, serieID, serieName) {\n      var _this5 = this;\n\n      addLegendEvent(events, {\n        legendName: 'serie-legend',\n        idx: idx,\n        serieID: serieID,\n        onMouseOver: function onMouseOver(props) {\n          _this5.mouseOnLegend = true;\n          return serieName === 'overlay' ? null : {\n            style: _objectSpread(_objectSpread({}, props.style), {}, {\n              strokeWidth: 4,\n              fillOpacity: 0\n            })\n          };\n        },\n        onMouseOut: function onMouseOut() {\n          _this5.mouseOnLegend = false;\n          return null;\n        },\n        onClick: function onClick() {\n          if (!_this5.state.hiddenSeries.delete(serieName)) {\n            // Was not already hidden => add to set\n            _this5.state.hiddenSeries.add(serieName);\n          }\n\n          _this5.setState({\n            hiddenSeries: new Set(_this5.state.hiddenSeries)\n          });\n\n          return null;\n        }\n      });\n    }\n  }, {\n    key: \"scaledAxisInfo\",\n    value: function scaledAxisInfo(data) {\n      var ticks = Math.max.apply(Math, _toConsumableArray(data.map(function (s) {\n        return s.datapoints.length;\n      })));\n\n      if (this.state.width < 500) {\n        return {\n          count: Math.min(5, ticks),\n          format: '%H:%M'\n        };\n      } else if (this.state.width < 700) {\n        return {\n          count: Math.min(10, ticks),\n          format: '%H:%M'\n        };\n      }\n\n      return {\n        count: Math.min(15, ticks),\n        format: '%H:%M:%S'\n      };\n    }\n  }, {\n    key: \"normalizeOverlay\",\n    value: function normalizeOverlay(factor) {\n      // All data is relative to the first Y-axis, even if a second one is in use\n      // To make it appear as relative to the second axis, we need to normalize it, ie. apply the same scale factor that exists between the two axis\n      // This scale factor is stored in every datapoint so that it can be \"reverted\" when we need to retrieve the original value, e.g. in tooltips\n      return this.props.overlay.vcLine.datapoints.map(function (dp) {\n        return _objectSpread(_objectSpread({}, dp), {}, {\n          y: dp.y * factor,\n          scaleFactor: factor\n        });\n      });\n    }\n  }]);\n\n  return ChartWithLegend;\n}(React.Component);\n\nexport default ChartWithLegend;","map":{"version":3,"sources":["/root/kiali-ui/src/components/Charts/ChartWithLegend.tsx"],"names":["React","Chart","ChartGroup","ChartScatter","VictoryAxis","VictoryBoxPlot","VictoryLabel","VictoryLegend","VictoryPortal","VictoryTheme","format","d3Format","getFormatter","getUnit","newBrushVoronoiContainer","toBuckets","addLegendEvent","CustomTooltip","INTERPOTALION_STRATEGY","KialiIcon","Button","ButtonVariant","Tooltip","TooltipPosition","style","overlayName","AxisStyle","tickLabels","fontSize","padding","grid","fill","stroke","strokeDasharray","strokeLinecap","strokeLinejoin","pointerEvents","MIN_HEIGHT","MIN_HEIGHT_YAXIS","MIN_WIDTH","LEGEND_HEIGHT","FONT_SIZE_LEGEND","moreLegendIconStyle","margin","verticalAlign","noEnoughHeightStyle","ChartWithLegend","props","containerRef","hoveredItem","mouseOnLegend","onTooltipOpen","points","length","undefined","onTooltipClose","onShowMoreLegend","setState","prevState","showMoreLegend","renderTimeSeries","height","groupOffset","data","map","serie","idx","state","hiddenSeries","has","legendItem","name","cloneElement","seriesComponent","withStyle","key","datapoints","interpolation","color","renderCategories","domainX","nbSeries","size","sizeRatio","width","Math","max","d","x","barWidth","overrideSeriesComponentStyle","handleResize","current","clientWidth","createRef","Set","setTimeout","window","addEventListener","removeEventListener","scaleInfo","scaledAxisInfo","fullLegendData","buildFullLegendData","filteredLegendData","buildFilteredLegendData","chartHeight","overlayIdx","showOverlay","overlay","showSpans","overlayRightPadding","top","bottom","left","right","events","onClick","push","target","eventHandlers","forEach","s","registerEvents","useSecondAxis","normalizedOverlay","overlayFactor","mainMax","line","y","overlayMax","vcLine","unit","info","lineInfo","normalizeOverlay","buckets","model","scaleFactor","timeWindow","tooltipHooks","onOpen","onClose","labelComponent","filteredData","filter","chart","marginTop","brushHandlers","xAxis","moreChartProps","material","count","t","getMinutes","dataStyle","min","strokeWidth","q1","q3","median","cursor","labels","position","textAlign","link","display","flexWrap","flexDirection","background","opacity","overflow","ld","backgroundColor","symbol","marginRight","maxWidth","filtered","currentWidth","i","item","serieID","serieName","legendName","onMouseOver","fillOpacity","onMouseOut","delete","add","ticks","factor","dp","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Chart, ChartGroup, ChartScatter, ChartProps, ChartTooltipProps } from '@patternfly/react-charts';\nimport { VictoryAxis, VictoryBoxPlot, VictoryLabel, VictoryLegend, VictoryPortal, VictoryTheme } from 'victory';\nimport { format as d3Format } from 'd3-format';\nimport { getFormatter, getUnit } from 'utils/Formatter';\nimport { VCLines, LegendItem, LineInfo, RichDataPoint, RawOrBucket, VCDataPoint } from 'types/VictoryChartInfo';\nimport { Overlay } from 'types/Overlay';\nimport { newBrushVoronoiContainer, BrushHandlers } from './Container';\nimport { toBuckets } from 'utils/VictoryChartsUtils';\nimport { VCEvent, addLegendEvent } from 'utils/VictoryEvents';\nimport { XAxisType } from 'types/Dashboards';\nimport { CustomTooltip } from './CustomTooltip';\nimport { INTERPOTALION_STRATEGY } from './SparklineChart';\nimport { KialiIcon } from '../../config/KialiIcon';\nimport { Button, ButtonVariant, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { style } from 'typestyle';\n\ntype Props<T extends RichDataPoint, O extends LineInfo> = {\n  chartHeight?: number;\n  data: VCLines<T & VCDataPoint>;\n  seriesComponent: React.ReactElement;\n  overrideSeriesComponentStyle?: boolean;\n  stroke?: boolean;\n  fill?: boolean;\n  showSpans?: boolean;\n  isMaximized?: boolean;\n  groupOffset?: number;\n  sizeRatio?: number;\n  moreChartProps?: ChartProps;\n  onClick?: (datum: RawOrBucket<O>) => void;\n  brushHandlers?: BrushHandlers;\n  overlay?: Overlay<O>;\n  timeWindow?: [Date, Date];\n  unit: string;\n  xAxis?: XAxisType;\n  labelComponent?: React.ReactElement<ChartTooltipProps>;\n};\n\ntype State = {\n  width: number;\n  hiddenSeries: Set<string>;\n  showMoreLegend: boolean;\n};\n\ntype Padding = { top: number; left: number; right: number; bottom: number };\n\nconst overlayName = 'overlay';\n\nconst AxisStyle = {\n  tickLabels: { fontSize: 12, padding: 2 },\n  grid: {\n    fill: 'none',\n    stroke: '#ECEFF1',\n    strokeDasharray: '10, 5',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n    pointerEvents: 'painted'\n  }\n};\n\nexport const MIN_HEIGHT = 20;\nexport const MIN_HEIGHT_YAXIS = 70;\nexport const MIN_WIDTH = 275;\nexport const LEGEND_HEIGHT = 25;\nconst FONT_SIZE_LEGEND = 14;\n\nconst moreLegendIconStyle = style({\n  margin: '0px 5px 2px 10px',\n  verticalAlign: '-4px !important'\n});\n\nconst noEnoughHeightStyle = style({\n  margin: '0px 0px 0px 0px',\n  verticalAlign: '-4px !important'\n});\n\nclass ChartWithLegend<T extends RichDataPoint, O extends LineInfo> extends React.Component<Props<T, O>, State> {\n  containerRef: React.RefObject<HTMLDivElement>;\n  hoveredItem?: VCDataPoint;\n  mouseOnLegend = false;\n\n  constructor(props: Props<T, O>) {\n    super(props);\n    this.containerRef = React.createRef<HTMLDivElement>();\n    this.state = {\n      width: 0,\n      hiddenSeries: new Set([overlayName]),\n      showMoreLegend: false\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.handleResize();\n      window.addEventListener('resize', this.handleResize);\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  private onTooltipOpen = (points?: VCDataPoint[]) => {\n    if (points && points.length > 0) {\n      this.hoveredItem = points[0];\n    } else {\n      this.hoveredItem = undefined;\n    }\n  };\n\n  private onTooltipClose = () => {\n    this.hoveredItem = undefined;\n  };\n\n  private onShowMoreLegend = () => {\n    this.setState(prevState => {\n      return {\n        showMoreLegend: !prevState.showMoreLegend\n      };\n    });\n  };\n\n  render() {\n    const scaleInfo = this.scaledAxisInfo(this.props.data);\n    const fullLegendData = this.buildFullLegendData();\n    const filteredLegendData = this.buildFilteredLegendData(fullLegendData);\n    const showMoreLegend = fullLegendData.length > filteredLegendData.length;\n    const chartHeight = this.props.chartHeight || 300;\n    const overlayIdx = this.props.data.length;\n    const showOverlay = (this.props.overlay && this.props.showSpans) || false;\n    const overlayRightPadding = showOverlay ? 15 : 0;\n    const padding: Padding = {\n      top: 0,\n      bottom: chartHeight > MIN_HEIGHT_YAXIS ? LEGEND_HEIGHT : 0,\n      left: 0,\n      right: 10 + overlayRightPadding\n    };\n\n    const events: VCEvent[] = [];\n    if (this.props.onClick) {\n      events.push({\n        target: 'parent',\n        eventHandlers: {\n          onClick: () => {\n            if (this.hoveredItem) {\n              this.props.onClick!(this.hoveredItem as RawOrBucket<O>);\n            }\n            return [];\n          }\n        }\n      });\n    }\n    this.props.data.forEach((s, idx) => this.registerEvents(events, idx, 'serie-' + idx, s.legendItem.name));\n    let useSecondAxis = showOverlay;\n    let normalizedOverlay: RawOrBucket<O>[] = [];\n    let overlayFactor = 1.0;\n    const mainMax = Math.max(...this.props.data.map(line => Math.max(...line.datapoints.map(d => d.y))));\n    if (this.props.overlay) {\n      this.registerEvents(events, overlayIdx, overlayName, overlayName);\n      // Normalization for y-axis display to match y-axis domain of the main data\n      // (see https://formidable.com/open-source/victory/gallery/multiple-dependent-axes/)\n      const overlayMax = Math.max(...this.props.overlay.vcLine.datapoints.map(d => d.y));\n      if (overlayMax !== 0) {\n        overlayFactor = mainMax / overlayMax;\n      }\n      if (this.props.unit === this.props.overlay.info.lineInfo.unit && overlayFactor > 0.5 && overlayFactor < 2) {\n        // Looks like it's fine to re-use the existing axis\n        useSecondAxis = false;\n        overlayFactor = 1.0;\n      }\n      normalizedOverlay = this.normalizeOverlay(overlayFactor);\n      if (this.props.overlay.info.buckets) {\n        // Transform to bucketed stats\n        const model: O = { ...this.props.overlay.info.lineInfo, scaleFactor: overlayFactor };\n        normalizedOverlay = toBuckets(\n          this.props.overlay.info.buckets,\n          normalizedOverlay as (VCDataPoint & O)[],\n          model,\n          this.props.timeWindow\n        );\n      }\n    }\n    const tooltipHooks = { onOpen: this.onTooltipOpen, onClose: this.onTooltipClose };\n    const labelComponent = this.props.labelComponent ? (\n      React.cloneElement(this.props.labelComponent as any, tooltipHooks)\n    ) : (\n      <CustomTooltip showTime={true} {...tooltipHooks} />\n    );\n    const filteredData = this.props.data.filter(s => !this.state.hiddenSeries.has(s.legendItem.name));\n\n    const chart = (\n      <div ref={this.containerRef} style={{ marginTop: '0px', height: chartHeight }}>\n        <Chart\n          width={this.state.width}\n          padding={padding}\n          events={events}\n          height={chartHeight}\n          containerComponent={newBrushVoronoiContainer(\n            labelComponent,\n            this.props.brushHandlers,\n            () => this.mouseOnLegend\n          )}\n          scale={{ x: this.props.xAxis === 'series' ? 'linear' : 'time' }}\n          // Hack: 1 pxl on Y domain padding to prevent harsh clipping (https://github.com/kiali/kiali/issues/2069)\n          domainPadding={{ y: 1, x: this.props.xAxis === 'series' ? 50 : undefined }}\n          {...this.props.moreChartProps}\n        >\n          {\n            // Use width to change style of the x series supporting narrow scenarios\n            this.props.xAxis === 'series' ? (\n              <VictoryAxis\n                domain={[0, filteredData.length + 1]}\n                style={AxisStyle}\n                tickValues={filteredData.map(s => s.legendItem.name)}\n                theme={VictoryTheme.material}\n                tickFormat={() => ''}\n              />\n            ) : this.state.width <= MIN_WIDTH ? (\n              <VictoryAxis\n                tickCount={scaleInfo.count}\n                style={AxisStyle}\n                theme={VictoryTheme.material}\n                domain={this.props.timeWindow}\n                tickFormat={t => {\n                  return `:${t.getMinutes()}`;\n                }}\n              />\n            ) : (\n              <VictoryAxis\n                tickCount={scaleInfo.count}\n                style={AxisStyle}\n                theme={VictoryTheme.material}\n                domain={this.props.timeWindow}\n              />\n            )\n          }\n          <VictoryAxis\n            tickLabelComponent={\n              <VictoryPortal>\n                <VictoryLabel />\n              </VictoryPortal>\n            }\n            dependentAxis={true}\n            tickCount={chartHeight <= MIN_HEIGHT_YAXIS ? 1 : undefined}\n            tickFormat={getFormatter(d3Format, this.props.unit)}\n            label={getUnit(d3Format, this.props.unit, mainMax)}\n            axisLabelComponent={<VictoryLabel y={-10} x={-15} angle={0} renderInPortal={true} />}\n            theme={VictoryTheme.material}\n            style={AxisStyle}\n          />\n          {useSecondAxis && this.props.overlay && (\n            <VictoryAxis\n              dependentAxis={true}\n              offsetX={this.state.width - overlayRightPadding}\n              style={AxisStyle}\n              tickCount={chartHeight <= MIN_HEIGHT_YAXIS ? 1 : undefined}\n              tickFormat={t => getFormatter(d3Format, this.props.overlay?.info.lineInfo.unit || '')(t / overlayFactor)}\n              tickLabelComponent={<VictoryLabel dx={15} textAnchor={'start'} />}\n              theme={VictoryTheme.material}\n              label={getUnit(\n                d3Format,\n                this.props.overlay?.info.lineInfo.unit || '',\n                Math.max(...this.props.overlay.vcLine.datapoints.map(d => d.y))\n              )}\n              axisLabelComponent={<VictoryLabel y={-10} x={this.state.width} angle={0} renderInPortal={true} />}\n            />\n          )}\n          {this.props.xAxis === 'series'\n            ? this.renderCategories()\n            : this.renderTimeSeries(chartHeight > MIN_HEIGHT_YAXIS ? chartHeight - LEGEND_HEIGHT : chartHeight)}\n          {showOverlay &&\n            (this.props.overlay!.info.buckets ? (\n              <VictoryBoxPlot\n                key=\"overlay\"\n                name={overlayName}\n                data={normalizedOverlay}\n                style={{\n                  data: this.props.overlay!.info.dataStyle,\n                  min: { stroke: this.props.overlay!.info.lineInfo.color, strokeWidth: 2 },\n                  max: { stroke: this.props.overlay!.info.lineInfo.color, strokeWidth: 2 },\n                  q1: { fill: this.props.overlay!.info.lineInfo.color },\n                  q3: { fill: this.props.overlay!.info.lineInfo.color },\n                  median: { stroke: 'white', strokeWidth: 2 }\n                }}\n              />\n            ) : (\n              <ChartScatter\n                key=\"overlay\"\n                name={overlayName}\n                data={normalizedOverlay}\n                style={{ data: this.props.overlay!.info.dataStyle }}\n              />\n            ))}\n          {chartHeight > MIN_HEIGHT_YAXIS ? (\n            <VictoryLegend\n              name={'serie-legend'}\n              data={filteredLegendData}\n              x={0}\n              y={chartHeight}\n              height={LEGEND_HEIGHT}\n              width={this.state.width}\n              style={{\n                data: { cursor: 'pointer', padding: 0 },\n                labels: { cursor: 'pointer', fontSize: FONT_SIZE_LEGEND }\n              }}\n              borderPadding={{\n                top: 5,\n                left: 0,\n                right: 0,\n                bottom: 0\n              }}\n              symbolSpacer={5}\n              gutter={{\n                left: 0,\n                right: 15\n              }}\n            />\n          ) : undefined}\n        </Chart>\n        {showMoreLegend && chartHeight > MIN_HEIGHT_YAXIS && (\n          <div\n            style={{\n              position: 'relative',\n              left: this.state.width - 31,\n              width: 16,\n              height: 16\n            }}\n          >\n            <Tooltip\n              position={TooltipPosition.left}\n              content={<div style={{ textAlign: 'left' }}>Show full legend</div>}\n            >\n              <Button variant={ButtonVariant.link} isInline onClick={() => this.onShowMoreLegend()}>\n                <KialiIcon.MoreLegend className={moreLegendIconStyle} />\n              </Button>\n            </Tooltip>\n          </div>\n        )}\n        {this.state.showMoreLegend && (\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              flexDirection: 'column',\n              position: 'relative',\n              width: this.state.width,\n              height: chartHeight,\n              top: -(chartHeight + LEGEND_HEIGHT),\n              background: 'var(--pf-global--BackgroundColor--dark-100)',\n              opacity: 0.7,\n              overflow: 'auto'\n            }}\n          >\n            {fullLegendData.map(ld => (\n              <div\n                style={{\n                  color: 'white',\n                  margin: 'auto'\n                }}\n              >\n                <div\n                  style={{\n                    display: 'inline-block',\n                    backgroundColor: ld.symbol.fill,\n                    marginRight: '5px',\n                    width: '9px',\n                    height: '9px'\n                  }}\n                ></div>\n                {ld.name}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n\n    return chartHeight > MIN_HEIGHT ? (\n      chart\n    ) : (\n      <div>\n        <Tooltip\n          position={TooltipPosition.right}\n          content={<div style={{ textAlign: 'left' }}>Increase height of the chart</div>}\n        >\n          <Button variant={ButtonVariant.link} isInline>\n            <KialiIcon.MoreLegend className={noEnoughHeightStyle} />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  private renderTimeSeries = (height: number) => {\n    const groupOffset = this.props.groupOffset || 0;\n    return (\n      <ChartGroup offset={groupOffset} height={height}>\n        {this.props.data.map((serie, idx) => {\n          if (this.state.hiddenSeries.has(serie.legendItem.name)) {\n            return undefined;\n          }\n          return React.cloneElement(\n            this.props.seriesComponent,\n            this.withStyle(\n              {\n                key: 'serie-' + idx,\n                name: 'serie-' + idx,\n                data: serie.datapoints,\n                interpolation: INTERPOTALION_STRATEGY\n              },\n              serie.color\n            )\n          );\n        })}\n      </ChartGroup>\n    );\n  };\n\n  private renderCategories = () => {\n    let domainX = 1;\n    const nbSeries = this.props.data.length - this.state.hiddenSeries.size;\n    const size = ((this.props.sizeRatio || 1) * this.state.width) / Math.max(nbSeries, 1);\n    return this.props.data.map((serie, idx) => {\n      if (this.state.hiddenSeries.has(serie.legendItem.name)) {\n        return undefined;\n      }\n      return React.cloneElement(\n        this.props.seriesComponent,\n        this.withStyle(\n          {\n            key: 'serie-' + idx,\n            name: 'serie-' + idx,\n            data: serie.datapoints.map(d => ({ size: size, ...d, x: domainX++ })),\n            barWidth: size\n          },\n          serie.color\n        )\n      );\n    });\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private withStyle = (props: any, color?: string) => {\n    return this.props.overrideSeriesComponentStyle === false\n      ? props\n      : {\n          ...props,\n          style: { data: { fill: this.props.fill ? color : undefined, stroke: this.props.stroke ? color : undefined } }\n        };\n  };\n\n  private handleResize = () => {\n    if (this.containerRef && this.containerRef.current) {\n      this.setState({ width: this.containerRef.current.clientWidth });\n    }\n  };\n\n  private buildFullLegendData(): LegendItem[] {\n    return this.props.data.map(s => {\n      const name = s.legendItem.name;\n      if (this.state.hiddenSeries.has(s.legendItem.name)) {\n        return { name, symbol: { ...s.legendItem.symbol, fill: '#72767b' } };\n      }\n      return { ...s.legendItem, name };\n    });\n  }\n\n  private buildFilteredLegendData(fullLegendData: LegendItem[]): LegendItem[] {\n    // 30px == \"more legend\" left button width\n    // 10px == \"more legend\" left padding\n    const maxWidth = this.state.width - 30 - 10;\n    const filtered: LegendItem[] = [];\n    let currentWidth = 0;\n    for (let i = 0; i < fullLegendData.length; i++) {\n      const item = fullLegendData[i];\n      // 12px == legend icon + space\n      // 7px == char size\n      // 15px == right padding\n      currentWidth += 12 + item.name.length * 7 + 15;\n      if (currentWidth >= maxWidth) {\n        break;\n      }\n      filtered.push(item);\n    }\n    return filtered;\n  }\n\n  private registerEvents(events: VCEvent[], idx: number, serieID: string, serieName: string) {\n    addLegendEvent(events, {\n      legendName: 'serie-legend',\n      idx: idx,\n      serieID: serieID,\n      onMouseOver: props => {\n        this.mouseOnLegend = true;\n        return serieName === 'overlay'\n          ? null\n          : {\n              style: { ...props.style, strokeWidth: 4, fillOpacity: 0 }\n            };\n      },\n      onMouseOut: () => {\n        this.mouseOnLegend = false;\n        return null;\n      },\n      onClick: () => {\n        if (!this.state.hiddenSeries.delete(serieName)) {\n          // Was not already hidden => add to set\n          this.state.hiddenSeries.add(serieName);\n        }\n        this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        return null;\n      }\n    });\n  }\n\n  private scaledAxisInfo(data: VCLines<VCDataPoint & T>) {\n    const ticks = Math.max(...data.map(s => s.datapoints.length));\n    if (this.state.width < 500) {\n      return {\n        count: Math.min(5, ticks),\n        format: '%H:%M'\n      };\n    } else if (this.state.width < 700) {\n      return {\n        count: Math.min(10, ticks),\n        format: '%H:%M'\n      };\n    }\n    return {\n      count: Math.min(15, ticks),\n      format: '%H:%M:%S'\n    };\n  }\n\n  private normalizeOverlay(factor: number): (VCDataPoint & O)[] {\n    // All data is relative to the first Y-axis, even if a second one is in use\n    // To make it appear as relative to the second axis, we need to normalize it, ie. apply the same scale factor that exists between the two axis\n    // This scale factor is stored in every datapoint so that it can be \"reverted\" when we need to retrieve the original value, e.g. in tooltips\n    return this.props.overlay!.vcLine.datapoints.map(dp => ({ ...dp, y: dp.y * factor, scaleFactor: factor }));\n  }\n}\n\nexport default ChartWithLegend;\n"]},"metadata":{},"sourceType":"module"}
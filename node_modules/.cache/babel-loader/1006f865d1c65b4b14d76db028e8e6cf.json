{"ast":null,"code":"/*!\n* Tippy.js v3.4.1\n* (c) 2017-2019 atomiks\n* MIT\n*/\nimport Popper from 'popper.js';\nvar version = \"3.4.1\";\nvar isBrowser = typeof window !== 'undefined';\nvar nav = isBrowser ? navigator : {};\nvar win = isBrowser ? window : {};\nvar isIE = /MSIE |Trident\\//.test(nav.userAgent);\nvar isIOS = /iPhone|iPad|iPod/.test(nav.platform) && !win.MSStream;\nvar supportsTouch = ('ontouchstart' in win);\nvar Defaults = {\n  a11y: true,\n  allowHTML: true,\n  animateFill: true,\n  animation: 'shift-away',\n  appendTo: function appendTo() {\n    return document.body;\n  },\n  aria: 'describedby',\n  arrow: false,\n  arrowTransform: '',\n  arrowType: 'sharp',\n  autoFocus: true,\n  boundary: 'scrollParent',\n  content: '',\n  delay: [0, 20],\n  distance: 10,\n  duration: [325, 275],\n  flip: true,\n  flipBehavior: 'flip',\n  followCursor: false,\n  hideOnClick: true,\n  inertia: false,\n  interactive: false,\n  interactiveBorder: 2,\n  interactiveDebounce: 0,\n  lazy: true,\n  livePlacement: true,\n  maxWidth: '',\n  multiple: false,\n  offset: 0,\n  onHidden: function onHidden() {},\n  onHide: function onHide() {},\n  onMount: function onMount() {},\n  onShow: function onShow() {},\n  onShown: function onShown() {},\n  performance: false,\n  placement: 'top',\n  popperOptions: {},\n  shouldPopperHideOnBlur: function shouldPopperHideOnBlur() {\n    return true;\n  },\n  showOnInit: false,\n  size: 'regular',\n  sticky: false,\n  target: '',\n  theme: 'dark',\n  touch: true,\n  touchHold: false,\n  trigger: 'mouseenter focus',\n  updateDuration: 200,\n  wait: null,\n  zIndex: 9999\n  /**\n   * If the set() method encounters one of these, the popperInstance must be\n   * recreated\n   */\n\n};\nvar POPPER_INSTANCE_RELATED_PROPS = ['arrow', 'arrowType', 'distance', 'flip', 'flipBehavior', 'offset', 'placement', 'popperOptions'];\nvar Selectors = {\n  POPPER: '.tippy-popper',\n  TOOLTIP: '.tippy-tooltip',\n  CONTENT: '.tippy-content',\n  BACKDROP: '.tippy-backdrop',\n  ARROW: '.tippy-arrow',\n  ROUND_ARROW: '.tippy-roundarrow'\n};\nvar elementProto = isBrowser ? Element.prototype : {};\nvar matches = elementProto.matches || elementProto.matchesSelector || elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector || elementProto.msMatchesSelector;\n/**\n * Ponyfill for Array.from - converts iterable values to an array\n * @param {Array-like} value\n * @return {Array}\n */\n\nfunction arrayFrom(value) {\n  return [].slice.call(value);\n}\n/**\n * Ponyfill for Element.prototype.closest\n * @param {Element} element\n * @param {String} parentSelector\n * @return {Element}\n */\n\n\nfunction closest(element, parentSelector) {\n  return (elementProto.closest || function (selector) {\n    var el = this;\n\n    while (el) {\n      if (matches.call(el, selector)) return el;\n      el = el.parentElement;\n    }\n  }).call(element, parentSelector);\n}\n/**\n * Works like Element.prototype.closest, but uses a callback instead\n * @param {Element} element\n * @param {Function} callback\n * @return {Element}\n */\n\n\nfunction closestCallback(element, callback) {\n  while (element) {\n    if (callback(element)) return element;\n    element = element.parentElement;\n  }\n}\n\nvar PASSIVE = {\n  passive: true\n};\nvar FF_EXTENSION_TRICK = {\n  x: true\n};\n/**\n * Returns a new `div` element\n * @return {HTMLDivElement}\n */\n\nfunction div() {\n  return document.createElement('div');\n}\n/**\n * Sets the innerHTML of an element while tricking linters & minifiers\n * @param {HTMLElement} el\n * @param {Element|String} html\n */\n\n\nfunction setInnerHTML(el, html) {\n  el[FF_EXTENSION_TRICK.x && 'innerHTML'] = html instanceof Element ? html[FF_EXTENSION_TRICK.x && 'innerHTML'] : html;\n}\n/**\n * Sets the content of a tooltip\n * @param {HTMLElement} contentEl\n * @param {Object} props\n */\n\n\nfunction setContent(contentEl, props) {\n  if (props.content instanceof Element) {\n    setInnerHTML(contentEl, '');\n    contentEl.appendChild(props.content);\n  } else {\n    contentEl[props.allowHTML ? 'innerHTML' : 'textContent'] = props.content;\n  }\n}\n/**\n * Returns the child elements of a popper element\n * @param {HTMLElement} popper\n */\n\n\nfunction getChildren(popper) {\n  return {\n    tooltip: popper.querySelector(Selectors.TOOLTIP),\n    backdrop: popper.querySelector(Selectors.BACKDROP),\n    content: popper.querySelector(Selectors.CONTENT),\n    arrow: popper.querySelector(Selectors.ARROW) || popper.querySelector(Selectors.ROUND_ARROW)\n  };\n}\n/**\n * Adds `data-inertia` attribute\n * @param {HTMLElement} tooltip\n */\n\n\nfunction addInertia(tooltip) {\n  tooltip.setAttribute('data-inertia', '');\n}\n/**\n * Removes `data-inertia` attribute\n * @param {HTMLElement} tooltip\n */\n\n\nfunction removeInertia(tooltip) {\n  tooltip.removeAttribute('data-inertia');\n}\n/**\n * Creates an arrow element and returns it\n */\n\n\nfunction createArrowElement(arrowType) {\n  var arrow = div();\n\n  if (arrowType === 'round') {\n    arrow.className = 'tippy-roundarrow';\n    setInnerHTML(arrow, '<svg viewBox=\"0 0 24 8\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z\"/></svg>');\n  } else {\n    arrow.className = 'tippy-arrow';\n  }\n\n  return arrow;\n}\n/**\n * Creates a backdrop element and returns it\n */\n\n\nfunction createBackdropElement() {\n  var backdrop = div();\n  backdrop.className = 'tippy-backdrop';\n  backdrop.setAttribute('data-state', 'hidden');\n  return backdrop;\n}\n/**\n * Adds interactive-related attributes\n * @param {HTMLElement} popper\n * @param {HTMLElement} tooltip\n */\n\n\nfunction addInteractive(popper, tooltip) {\n  popper.setAttribute('tabindex', '-1');\n  tooltip.setAttribute('data-interactive', '');\n}\n/**\n * Removes interactive-related attributes\n * @param {HTMLElement} popper\n * @param {HTMLElement} tooltip\n */\n\n\nfunction removeInteractive(popper, tooltip) {\n  popper.removeAttribute('tabindex');\n  tooltip.removeAttribute('data-interactive');\n}\n/**\n * Applies a transition duration to a list of elements\n * @param {Array} els\n * @param {Number} value\n */\n\n\nfunction applyTransitionDuration(els, value) {\n  els.forEach(function (el) {\n    if (el) {\n      el.style.transitionDuration = value + 'ms';\n    }\n  });\n}\n/**\n * Add/remove transitionend listener from tooltip\n * @param {Element} tooltip\n * @param {String} action\n * @param {Function} listener\n */\n\n\nfunction toggleTransitionEndListener(tooltip, action, listener) {\n  tooltip[action + 'EventListener']('transitionend', listener);\n}\n/**\n * Returns the popper's placement, ignoring shifting (top-start, etc)\n * @param {Element} popper\n * @return {String}\n */\n\n\nfunction getPopperPlacement(popper) {\n  var fullPlacement = popper.getAttribute('x-placement');\n  return fullPlacement ? fullPlacement.split('-')[0] : '';\n}\n/**\n * Sets the visibility state to elements so they can begin to transition\n * @param {Array} els\n * @param {String} state\n */\n\n\nfunction setVisibilityState(els, state) {\n  els.forEach(function (el) {\n    if (el) {\n      el.setAttribute('data-state', state);\n    }\n  });\n}\n/**\n * Triggers reflow\n * @param {Element} popper\n */\n\n\nfunction reflow(popper) {\n  void popper.offsetHeight;\n}\n/**\n * Constructs the popper element and returns it\n * @param {Number} id\n * @param {Object} props\n */\n\n\nfunction createPopperElement(id, props) {\n  var popper = div();\n  popper.className = 'tippy-popper';\n  popper.setAttribute('role', 'tooltip');\n  popper.id = 'tippy-' + id;\n  popper.style.zIndex = props.zIndex;\n  var tooltip = div();\n  tooltip.className = 'tippy-tooltip';\n  tooltip.style.maxWidth = props.maxWidth + (typeof props.maxWidth === 'number' ? 'px' : '');\n  tooltip.setAttribute('data-size', props.size);\n  tooltip.setAttribute('data-animation', props.animation);\n  tooltip.setAttribute('data-state', 'hidden');\n  props.theme.split(' ').forEach(function (t) {\n    tooltip.classList.add(t + '-theme');\n  });\n  var content = div();\n  content.className = 'tippy-content';\n  content.setAttribute('data-state', 'hidden');\n\n  if (props.interactive) {\n    addInteractive(popper, tooltip);\n  }\n\n  if (props.arrow) {\n    tooltip.appendChild(createArrowElement(props.arrowType));\n  }\n\n  if (props.animateFill) {\n    tooltip.appendChild(createBackdropElement());\n    tooltip.setAttribute('data-animatefill', '');\n  }\n\n  if (props.inertia) {\n    addInertia(tooltip);\n  }\n\n  setContent(content, props);\n  tooltip.appendChild(content);\n  popper.appendChild(tooltip);\n  popper.addEventListener('focusout', function (e) {\n    if (e.relatedTarget && popper._tippy && !closestCallback(e.relatedTarget, function (el) {\n      return el === popper;\n    }) && e.relatedTarget !== popper._tippy.reference && popper._tippy.props.shouldPopperHideOnBlur(e)) {\n      popper._tippy.hide();\n    }\n  });\n  return popper;\n}\n/**\n * Updates the popper element based on the new props\n * @param {HTMLElement} popper\n * @param {Object} prevProps\n * @param {Object} nextProps\n */\n\n\nfunction updatePopperElement(popper, prevProps, nextProps) {\n  var _getChildren = getChildren(popper),\n      tooltip = _getChildren.tooltip,\n      content = _getChildren.content,\n      backdrop = _getChildren.backdrop,\n      arrow = _getChildren.arrow;\n\n  popper.style.zIndex = nextProps.zIndex;\n  tooltip.setAttribute('data-size', nextProps.size);\n  tooltip.setAttribute('data-animation', nextProps.animation);\n  tooltip.style.maxWidth = nextProps.maxWidth + (typeof nextProps.maxWidth === 'number' ? 'px' : '');\n\n  if (prevProps.content !== nextProps.content) {\n    setContent(content, nextProps);\n  } // animateFill\n\n\n  if (!prevProps.animateFill && nextProps.animateFill) {\n    tooltip.appendChild(createBackdropElement());\n    tooltip.setAttribute('data-animatefill', '');\n  } else if (prevProps.animateFill && !nextProps.animateFill) {\n    tooltip.removeChild(backdrop);\n    tooltip.removeAttribute('data-animatefill');\n  } // arrow\n\n\n  if (!prevProps.arrow && nextProps.arrow) {\n    tooltip.appendChild(createArrowElement(nextProps.arrowType));\n  } else if (prevProps.arrow && !nextProps.arrow) {\n    tooltip.removeChild(arrow);\n  } // arrowType\n\n\n  if (prevProps.arrow && nextProps.arrow && prevProps.arrowType !== nextProps.arrowType) {\n    tooltip.replaceChild(createArrowElement(nextProps.arrowType), arrow);\n  } // interactive\n\n\n  if (!prevProps.interactive && nextProps.interactive) {\n    addInteractive(popper, tooltip);\n  } else if (prevProps.interactive && !nextProps.interactive) {\n    removeInteractive(popper, tooltip);\n  } // inertia\n\n\n  if (!prevProps.inertia && nextProps.inertia) {\n    addInertia(tooltip);\n  } else if (prevProps.inertia && !nextProps.inertia) {\n    removeInertia(tooltip);\n  } // theme\n\n\n  if (prevProps.theme !== nextProps.theme) {\n    prevProps.theme.split(' ').forEach(function (theme) {\n      tooltip.classList.remove(theme + '-theme');\n    });\n    nextProps.theme.split(' ').forEach(function (theme) {\n      tooltip.classList.add(theme + '-theme');\n    });\n  }\n}\n/**\n * Runs the callback after the popper's position has been updated\n * update() is debounced with Promise.resolve() or setTimeout()\n * scheduleUpdate() is update() wrapped in requestAnimationFrame()\n * @param {Popper} popperInstance\n * @param {Function} callback\n */\n\n\nfunction afterPopperPositionUpdates(popperInstance, callback) {\n  var popper = popperInstance.popper,\n      options = popperInstance.options;\n  var onCreate = options.onCreate,\n      onUpdate = options.onUpdate;\n\n  options.onCreate = options.onUpdate = function () {\n    reflow(popper);\n    callback();\n    onUpdate();\n    options.onCreate = onCreate;\n    options.onUpdate = onUpdate;\n  };\n}\n/**\n * Hides all visible poppers on the document, optionally excluding one\n * @param {Tippy} tippyInstanceToExclude\n */\n\n\nfunction hideAllPoppers(tippyInstanceToExclude) {\n  arrayFrom(document.querySelectorAll(Selectors.POPPER)).forEach(function (popper) {\n    var tip = popper._tippy;\n\n    if (tip && tip.props.hideOnClick === true && (!tippyInstanceToExclude || popper !== tippyInstanceToExclude.popper)) {\n      tip.hide();\n    }\n  });\n}\n/**\n * Determines if the mouse cursor is outside of the popper's interactive border\n * region\n * @param {String} popperPlacement\n * @param {Object} popperRect\n * @param {MouseEvent} event\n * @param {Object} props\n */\n\n\nfunction isCursorOutsideInteractiveBorder(popperPlacement, popperRect, event, props) {\n  if (!popperPlacement) {\n    return true;\n  }\n\n  var x = event.clientX,\n      y = event.clientY;\n  var interactiveBorder = props.interactiveBorder,\n      distance = props.distance;\n  var exceedsTop = popperRect.top - y > (popperPlacement === 'top' ? interactiveBorder + distance : interactiveBorder);\n  var exceedsBottom = y - popperRect.bottom > (popperPlacement === 'bottom' ? interactiveBorder + distance : interactiveBorder);\n  var exceedsLeft = popperRect.left - x > (popperPlacement === 'left' ? interactiveBorder + distance : interactiveBorder);\n  var exceedsRight = x - popperRect.right > (popperPlacement === 'right' ? interactiveBorder + distance : interactiveBorder);\n  return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;\n}\n/**\n * Returns the distance offset, taking into account the default offset due to\n * the transform: translate() rule in CSS\n * @param {Number} distance\n * @param {Number} defaultDistance\n */\n\n\nfunction getOffsetDistanceInPx(distance, defaultDistance) {\n  return -(distance - defaultDistance) + 'px';\n}\n/**\n * Determines if a value is a plain object\n * @param {any} value\n * @return {Boolean}\n */\n\n\nfunction isPlainObject(value) {\n  return {}.toString.call(value) === '[object Object]';\n}\n/**\n * Safe .hasOwnProperty check, for prototype-less objects\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\n\nfunction hasOwnProperty(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\n/**\n * Determines if a value is numeric\n * @param {any} value\n * @return {Boolean}\n */\n\n\nfunction isNumeric(value) {\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}\n/**\n * Returns an array of elements based on the value\n * @param {any} value\n * @return {Array}\n */\n\n\nfunction getArrayOfElements(value) {\n  if (value instanceof Element || isPlainObject(value)) {\n    return [value];\n  }\n\n  if (value instanceof NodeList) {\n    return arrayFrom(value);\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  try {\n    return arrayFrom(document.querySelectorAll(value));\n  } catch (e) {\n    return [];\n  }\n}\n/**\n * Returns a value at a given index depending on if it's an array or number\n * @param {any} value\n * @param {Number} index\n * @param {any} defaultValue\n */\n\n\nfunction getValue(value, index, defaultValue) {\n  if (Array.isArray(value)) {\n    var v = value[index];\n    return v == null ? defaultValue : v;\n  }\n\n  return value;\n}\n/**\n * Focuses an element while preventing a scroll jump if it's not within the\n * viewport\n * @param {Element} el\n */\n\n\nfunction focus(el) {\n  var x = window.scrollX || window.pageXOffset;\n  var y = window.scrollY || window.pageYOffset;\n  el.focus();\n  scroll(x, y);\n}\n/**\n * Defers a function's execution until the call stack has cleared\n * @param {Function} fn\n */\n\n\nfunction defer(fn) {\n  setTimeout(fn, 1);\n}\n/**\n * Debounce utility\n * @param {Function} fn\n * @param {Number} ms\n */\n\n\nfunction debounce(fn, ms) {\n  var timeoutId = void 0;\n  return function () {\n    var _this = this,\n        _arguments = arguments;\n\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(function () {\n      return fn.apply(_this, _arguments);\n    }, ms);\n  };\n}\n/**\n * Prevents errors from being thrown while accessing nested modifier objects\n * in `popperOptions`\n * @param {Object} obj\n * @param {String} key\n * @return {Object|undefined}\n */\n\n\nfunction getModifier(obj, key) {\n  return obj && obj.modifiers && obj.modifiers[key];\n}\n/**\n * Determines if an array or string includes a value\n * @param {Array|String} a\n * @param {any} b\n * @return {Boolean}\n */\n\n\nfunction includes(a, b) {\n  return a.indexOf(b) > -1;\n}\n\nvar isUsingTouch = false;\n\nfunction onDocumentTouch() {\n  if (isUsingTouch) {\n    return;\n  }\n\n  isUsingTouch = true;\n\n  if (isIOS) {\n    document.body.classList.add('tippy-iOS');\n  }\n\n  if (window.performance) {\n    document.addEventListener('mousemove', onDocumentMouseMove);\n  }\n}\n\nvar lastMouseMoveTime = 0;\n\nfunction onDocumentMouseMove() {\n  var now = performance.now(); // Chrome 60+ is 1 mousemove per animation frame, use 20ms time difference\n\n  if (now - lastMouseMoveTime < 20) {\n    isUsingTouch = false;\n    document.removeEventListener('mousemove', onDocumentMouseMove);\n\n    if (!isIOS) {\n      document.body.classList.remove('tippy-iOS');\n    }\n  }\n\n  lastMouseMoveTime = now;\n}\n\nfunction onDocumentClick(_ref) {\n  var target = _ref.target; // Simulated events dispatched on the document\n\n  if (!(target instanceof Element)) {\n    return hideAllPoppers();\n  } // Clicked on an interactive popper\n\n\n  var popper = closest(target, Selectors.POPPER);\n\n  if (popper && popper._tippy && popper._tippy.props.interactive) {\n    return;\n  } // Clicked on a reference\n\n\n  var reference = closestCallback(target, function (el) {\n    return el._tippy && el._tippy.reference === el;\n  });\n\n  if (reference) {\n    var tip = reference._tippy;\n    var isClickTrigger = includes(tip.props.trigger, 'click');\n\n    if (isUsingTouch || isClickTrigger) {\n      return hideAllPoppers(tip);\n    }\n\n    if (tip.props.hideOnClick !== true || isClickTrigger) {\n      return;\n    }\n\n    tip.clearDelayTimeouts();\n  }\n\n  hideAllPoppers();\n}\n\nfunction onWindowBlur() {\n  var _document = document,\n      activeElement = _document.activeElement;\n\n  if (activeElement && activeElement.blur && activeElement._tippy) {\n    activeElement.blur();\n  }\n}\n\nfunction onWindowResize() {\n  arrayFrom(document.querySelectorAll(Selectors.POPPER)).forEach(function (popper) {\n    var tippyInstance = popper._tippy;\n\n    if (!tippyInstance.props.livePlacement) {\n      tippyInstance.popperInstance.scheduleUpdate();\n    }\n  });\n}\n/**\n * Adds the needed global event listeners\n */\n\n\nfunction bindGlobalEventListeners() {\n  document.addEventListener('click', onDocumentClick, true);\n  document.addEventListener('touchstart', onDocumentTouch, PASSIVE);\n  window.addEventListener('blur', onWindowBlur);\n  window.addEventListener('resize', onWindowResize);\n\n  if (!supportsTouch && (navigator.maxTouchPoints || navigator.msMaxTouchPoints)) {\n    document.addEventListener('pointerdown', onDocumentTouch);\n  }\n}\n\nvar keys = Object.keys(Defaults);\n/**\n * Determines if an element can receive focus\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction canReceiveFocus(el) {\n  return el instanceof Element ? matches.call(el, 'a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]') && !el.hasAttribute('disabled') : true;\n}\n/**\n * Returns an object of optional props from data-tippy-* attributes\n * @param {Element} reference\n * @return {Object}\n */\n\n\nfunction getDataAttributeOptions(reference) {\n  return keys.reduce(function (acc, key) {\n    var valueAsString = (reference.getAttribute('data-tippy-' + key) || '').trim();\n\n    if (!valueAsString) {\n      return acc;\n    }\n\n    if (key === 'content') {\n      acc[key] = valueAsString;\n    } else if (valueAsString === 'true') {\n      acc[key] = true;\n    } else if (valueAsString === 'false') {\n      acc[key] = false;\n    } else if (isNumeric(valueAsString)) {\n      acc[key] = Number(valueAsString);\n    } else if (valueAsString[0] === '[' || valueAsString[0] === '{') {\n      acc[key] = JSON.parse(valueAsString);\n    } else {\n      acc[key] = valueAsString;\n    }\n\n    return acc;\n  }, {});\n}\n/**\n * Polyfills the virtual reference (plain object) with Element.prototype props\n * Mutating because DOM elements are mutated, adds `_tippy` property\n * @param {Object} virtualReference\n * @return {Object}\n */\n\n\nfunction polyfillElementPrototypeProperties(virtualReference) {\n  var polyfills = {\n    isVirtual: true,\n    attributes: virtualReference.attributes || {},\n    setAttribute: function setAttribute(key, value) {\n      virtualReference.attributes[key] = value;\n    },\n    getAttribute: function getAttribute(key) {\n      return virtualReference.attributes[key];\n    },\n    removeAttribute: function removeAttribute(key) {\n      delete virtualReference.attributes[key];\n    },\n    hasAttribute: function hasAttribute(key) {\n      return key in virtualReference.attributes;\n    },\n    addEventListener: function addEventListener() {},\n    removeEventListener: function removeEventListener() {},\n    classList: {\n      classNames: {},\n      add: function add(key) {\n        virtualReference.classList.classNames[key] = true;\n      },\n      remove: function remove(key) {\n        delete virtualReference.classList.classNames[key];\n      },\n      contains: function contains(key) {\n        return key in virtualReference.classList.classNames;\n      }\n    }\n  };\n\n  for (var key in polyfills) {\n    virtualReference[key] = polyfills[key];\n  }\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Evaluates the props object\n * @param {Element} reference\n * @param {Object} props\n * @return {Object}\n */\n\n\nfunction evaluateProps(reference, props) {\n  var out = _extends({}, props, props.performance ? {} : getDataAttributeOptions(reference));\n\n  if (out.arrow) {\n    out.animateFill = false;\n  }\n\n  if (typeof out.appendTo === 'function') {\n    out.appendTo = props.appendTo(reference);\n  }\n\n  if (typeof out.content === 'function') {\n    out.content = props.content(reference);\n  }\n\n  return out;\n}\n/**\n * Validates an object of options with the valid default props object\n * @param {Object} options\n * @param {Object} defaults\n */\n\n\nfunction validateOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults$$1 = arguments[1];\n  Object.keys(options).forEach(function (option) {\n    if (!hasOwnProperty(defaults$$1, option)) {\n      throw new Error('[tippy]: `' + option + '` is not a valid option');\n    }\n  });\n} // =============================================================================\n// DEPRECATED\n// All of this code (for the `arrowTransform` option) will be removed in v4\n// =============================================================================\n\n\nvar TRANSFORM_NUMBER_RE = {\n  translate: /translateX?Y?\\(([^)]+)\\)/,\n  scale: /scaleX?Y?\\(([^)]+)\\)/\n  /**\n   * Transforms the x/y axis based on the placement\n   */\n\n};\n\nfunction transformAxisBasedOnPlacement(axis, isVertical) {\n  return (isVertical ? axis : {\n    X: 'Y',\n    Y: 'X'\n  }[axis]) || '';\n}\n/**\n * Transforms the scale/translate numbers based on the placement\n */\n\n\nfunction transformNumbersBasedOnPlacement(type, numbers, isVertical, isReverse) {\n  /**\n   * Avoid destructuring because a large boilerplate function is generated\n   * by Babel\n   */\n  var a = numbers[0];\n  var b = numbers[1];\n\n  if (!a && !b) {\n    return '';\n  }\n\n  var transforms = {\n    scale: function () {\n      if (!b) {\n        return '' + a;\n      } else {\n        return isVertical ? a + ', ' + b : b + ', ' + a;\n      }\n    }(),\n    translate: function () {\n      if (!b) {\n        return isReverse ? -a + 'px' : a + 'px';\n      } else {\n        if (isVertical) {\n          return isReverse ? a + 'px, ' + -b + 'px' : a + 'px, ' + b + 'px';\n        } else {\n          return isReverse ? -b + 'px, ' + a + 'px' : b + 'px, ' + a + 'px';\n        }\n      }\n    }()\n  };\n  return transforms[type];\n}\n/**\n * Returns the axis for a CSS function (translate or scale)\n */\n\n\nfunction getTransformAxis(str, cssFunction) {\n  var match = str.match(new RegExp(cssFunction + '([XY])'));\n  return match ? match[1] : '';\n}\n/**\n * Returns the numbers given to the CSS function\n */\n\n\nfunction getTransformNumbers(str, regex) {\n  var match = str.match(regex);\n  return match ? match[1].split(',').map(function (n) {\n    return parseFloat(n, 10);\n  }) : [];\n}\n/**\n * Computes the arrow's transform so that it is correct for any placement\n */\n\n\nfunction computeArrowTransform(arrow, arrowTransform) {\n  var placement = getPopperPlacement(closest(arrow, Selectors.POPPER));\n  var isVertical = includes(['top', 'bottom'], placement);\n  var isReverse = includes(['right', 'bottom'], placement);\n  var matches$$1 = {\n    translate: {\n      axis: getTransformAxis(arrowTransform, 'translate'),\n      numbers: getTransformNumbers(arrowTransform, TRANSFORM_NUMBER_RE.translate)\n    },\n    scale: {\n      axis: getTransformAxis(arrowTransform, 'scale'),\n      numbers: getTransformNumbers(arrowTransform, TRANSFORM_NUMBER_RE.scale)\n    }\n  };\n  var computedTransform = arrowTransform.replace(TRANSFORM_NUMBER_RE.translate, 'translate' + transformAxisBasedOnPlacement(matches$$1.translate.axis, isVertical) + '(' + transformNumbersBasedOnPlacement('translate', matches$$1.translate.numbers, isVertical, isReverse) + ')').replace(TRANSFORM_NUMBER_RE.scale, 'scale' + transformAxisBasedOnPlacement(matches$$1.scale.axis, isVertical) + '(' + transformNumbersBasedOnPlacement('scale', matches$$1.scale.numbers, isVertical, isReverse) + ')');\n  arrow.style[typeof document.body.style.transform !== 'undefined' ? 'transform' : 'webkitTransform'] = computedTransform;\n}\n\nvar idCounter = 1;\n/**\n * Creates and returns a Tippy object. We're using a closure pattern instead of\n * a class so that the exposed object API is clean without private members\n * prefixed with `_`.\n * @param {Element} reference\n * @param {Object} collectionProps\n * @return {Object} instance\n */\n\nfunction createTippy(reference, collectionProps) {\n  var props = evaluateProps(reference, collectionProps); // If the reference shouldn't have multiple tippys, return null early\n\n  if (!props.multiple && reference._tippy) {\n    return null;\n  }\n  /* ======================= 🔒 Private members 🔒 ======================= */\n  // The popper element's mutation observer\n\n\n  var popperMutationObserver = null; // The last trigger event object that caused the tippy to show\n\n  var lastTriggerEvent = {}; // The last mousemove event object created by the document mousemove event\n\n  var lastMouseMoveEvent = null; // Timeout created by the show delay\n\n  var showTimeoutId = 0; // Timeout created by the hide delay\n\n  var hideTimeoutId = 0; // Flag to determine if the tippy is preparing to show due to the show timeout\n\n  var isPreparingToShow = false; // The current `transitionend` callback reference\n\n  var transitionEndListener = function transitionEndListener() {}; // Array of event listeners currently attached to the reference element\n\n\n  var listeners = []; // Flag to determine if the reference was recently programmatically focused\n\n  var referenceJustProgrammaticallyFocused = false; // Private onMouseMove handler reference, debounced or not\n\n  var debouncedOnMouseMove = props.interactiveDebounce > 0 ? debounce(onMouseMove, props.interactiveDebounce) : onMouseMove;\n  /* ======================= 🔑 Public members 🔑 ======================= */\n  // id used for the `aria-describedby` / `aria-labelledby` attribute\n\n  var id = idCounter++; // Popper element reference\n\n  var popper = createPopperElement(id, props); // Prevent a tippy with a delay from hiding if the cursor left then returned\n  // before it started hiding\n\n  popper.addEventListener('mouseenter', function (event) {\n    if (tip.props.interactive && tip.state.isVisible && lastTriggerEvent.type === 'mouseenter') {\n      prepareShow(event);\n    }\n  });\n  popper.addEventListener('mouseleave', function (event) {\n    if (tip.props.interactive && lastTriggerEvent.type === 'mouseenter' && tip.props.interactiveDebounce === 0 && isCursorOutsideInteractiveBorder(getPopperPlacement(popper), popper.getBoundingClientRect(), event, tip.props)) {\n      prepareHide();\n    }\n  }); // Popper element children: { arrow, backdrop, content, tooltip }\n\n  var popperChildren = getChildren(popper); // The state of the tippy\n\n  var state = {\n    // If the tippy is currently enabled\n    isEnabled: true,\n    // show() invoked, not currently transitioning out\n    isVisible: false,\n    // If the tippy has been destroyed\n    isDestroyed: false,\n    // If the tippy is on the DOM (transitioning out or in)\n    isMounted: false,\n    // show() transition finished\n    isShown: false // Popper.js instance for the tippy is lazily created\n\n  };\n  var popperInstance = null; // 🌟 tippy instance\n\n  var tip = {\n    // properties\n    id: id,\n    reference: reference,\n    popper: popper,\n    popperChildren: popperChildren,\n    popperInstance: popperInstance,\n    props: props,\n    state: state,\n    // methods\n    clearDelayTimeouts: clearDelayTimeouts,\n    set: set$$1,\n    setContent: setContent$$1,\n    show: show,\n    hide: hide,\n    enable: enable,\n    disable: disable,\n    destroy: destroy\n  };\n  addTriggersToReference();\n  reference.addEventListener('click', onReferenceClick);\n\n  if (!props.lazy) {\n    tip.popperInstance = createPopperInstance();\n    tip.popperInstance.disableEventListeners();\n  }\n\n  if (props.showOnInit) {\n    prepareShow();\n  } // Ensure the reference element can receive focus (and is not a delegate)\n\n\n  if (props.a11y && !props.target && !canReceiveFocus(reference)) {\n    reference.setAttribute('tabindex', '0');\n  } // Install shortcuts\n\n\n  reference._tippy = tip;\n  popper._tippy = tip;\n  return tip;\n  /* ======================= 🔒 Private methods 🔒 ======================= */\n\n  /**\n   * If the reference was clicked, it also receives focus\n   */\n\n  function onReferenceClick() {\n    defer(function () {\n      referenceJustProgrammaticallyFocused = false;\n    });\n  }\n  /**\n   * Ensure the popper's position stays correct if its dimensions change. Use\n   * update() over .scheduleUpdate() so there is no 1 frame flash due to\n   * async update\n   */\n\n\n  function addMutationObserver() {\n    popperMutationObserver = new MutationObserver(function () {\n      tip.popperInstance.update();\n    });\n    popperMutationObserver.observe(popper, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n  /**\n   * Positions the virtual reference near the mouse cursor\n   */\n\n\n  function positionVirtualReferenceNearCursor(event) {\n    var _lastMouseMoveEvent = lastMouseMoveEvent = event,\n        clientX = _lastMouseMoveEvent.clientX,\n        clientY = _lastMouseMoveEvent.clientY;\n\n    if (!tip.popperInstance) {\n      return;\n    } // Ensure virtual reference is padded by 5px to prevent tooltip from\n    // overflowing. Maybe Popper.js issue?\n\n\n    var placement = getPopperPlacement(tip.popper);\n    var padding = tip.popperChildren.arrow ? 20 : 5;\n    var isVerticalPlacement = includes(['top', 'bottom'], placement);\n    var isHorizontalPlacement = includes(['left', 'right'], placement); // Top / left boundary\n\n    var x = isVerticalPlacement ? Math.max(padding, clientX) : clientX;\n    var y = isHorizontalPlacement ? Math.max(padding, clientY) : clientY; // Bottom / right boundary\n\n    if (isVerticalPlacement && x > padding) {\n      x = Math.min(clientX, window.innerWidth - padding);\n    }\n\n    if (isHorizontalPlacement && y > padding) {\n      y = Math.min(clientY, window.innerHeight - padding);\n    }\n\n    var rect = tip.reference.getBoundingClientRect();\n    var followCursor = tip.props.followCursor;\n    var isHorizontal = followCursor === 'horizontal';\n    var isVertical = followCursor === 'vertical';\n    tip.popperInstance.reference = {\n      getBoundingClientRect: function getBoundingClientRect() {\n        return {\n          width: 0,\n          height: 0,\n          top: isHorizontal ? rect.top : y,\n          bottom: isHorizontal ? rect.bottom : y,\n          left: isVertical ? rect.left : x,\n          right: isVertical ? rect.right : x\n        };\n      },\n      clientWidth: 0,\n      clientHeight: 0\n    };\n    tip.popperInstance.scheduleUpdate();\n\n    if (followCursor === 'initial' && tip.state.isVisible) {\n      removeFollowCursorListener();\n    }\n  }\n  /**\n   * Creates the tippy instance for a delegate when it's been triggered\n   */\n\n\n  function createDelegateChildTippy(event) {\n    var targetEl = closest(event.target, tip.props.target);\n\n    if (targetEl && !targetEl._tippy) {\n      createTippy(targetEl, _extends({}, tip.props, {\n        target: '',\n        showOnInit: true\n      }));\n      prepareShow(event);\n    }\n  }\n  /**\n   * Setup before show() is invoked (delays, etc.)\n   */\n\n\n  function prepareShow(event) {\n    clearDelayTimeouts();\n\n    if (tip.state.isVisible) {\n      return;\n    } // Is a delegate, create an instance for the child target\n\n\n    if (tip.props.target) {\n      return createDelegateChildTippy(event);\n    }\n\n    isPreparingToShow = true;\n\n    if (tip.props.wait) {\n      return tip.props.wait(tip, event);\n    } // If the tooltip has a delay, we need to be listening to the mousemove as\n    // soon as the trigger event is fired, so that it's in the correct position\n    // upon mount.\n    // Edge case: if the tooltip is still mounted, but then prepareShow() is\n    // called, it causes a jump.\n\n\n    if (hasFollowCursorBehavior() && !tip.state.isMounted) {\n      document.addEventListener('mousemove', positionVirtualReferenceNearCursor);\n    }\n\n    var delay = getValue(tip.props.delay, 0, Defaults.delay);\n\n    if (delay) {\n      showTimeoutId = setTimeout(function () {\n        show();\n      }, delay);\n    } else {\n      show();\n    }\n  }\n  /**\n   * Setup before hide() is invoked (delays, etc.)\n   */\n\n\n  function prepareHide() {\n    clearDelayTimeouts();\n\n    if (!tip.state.isVisible) {\n      return removeFollowCursorListener();\n    }\n\n    isPreparingToShow = false;\n    var delay = getValue(tip.props.delay, 1, Defaults.delay);\n\n    if (delay) {\n      hideTimeoutId = setTimeout(function () {\n        if (tip.state.isVisible) {\n          hide();\n        }\n      }, delay);\n    } else {\n      hide();\n    }\n  }\n  /**\n   * Removes the follow cursor listener\n   */\n\n\n  function removeFollowCursorListener() {\n    document.removeEventListener('mousemove', positionVirtualReferenceNearCursor);\n    lastMouseMoveEvent = null;\n  }\n  /**\n   * Cleans up old listeners\n   */\n\n\n  function cleanupOldMouseListeners() {\n    document.body.removeEventListener('mouseleave', prepareHide);\n    document.removeEventListener('mousemove', debouncedOnMouseMove);\n  }\n  /**\n   * Event listener invoked upon trigger\n   */\n\n\n  function onTrigger(event) {\n    if (!tip.state.isEnabled || isEventListenerStopped(event)) {\n      return;\n    }\n\n    if (!tip.state.isVisible) {\n      lastTriggerEvent = event;\n    } // Toggle show/hide when clicking click-triggered tooltips\n\n\n    if (event.type === 'click' && tip.props.hideOnClick !== false && tip.state.isVisible) {\n      prepareHide();\n    } else {\n      prepareShow(event);\n    }\n  }\n  /**\n   * Event listener used for interactive tooltips to detect when they should\n   * hide\n   */\n\n\n  function onMouseMove(event) {\n    var referenceTheCursorIsOver = closestCallback(event.target, function (el) {\n      return el._tippy;\n    });\n    var isCursorOverPopper = closest(event.target, Selectors.POPPER) === tip.popper;\n    var isCursorOverReference = referenceTheCursorIsOver === tip.reference;\n\n    if (isCursorOverPopper || isCursorOverReference) {\n      return;\n    }\n\n    if (isCursorOutsideInteractiveBorder(getPopperPlacement(tip.popper), tip.popper.getBoundingClientRect(), event, tip.props)) {\n      cleanupOldMouseListeners();\n      prepareHide();\n    }\n  }\n  /**\n   * Event listener invoked upon mouseleave\n   */\n\n\n  function onMouseLeave(event) {\n    if (isEventListenerStopped(event)) {\n      return;\n    }\n\n    if (tip.props.interactive) {\n      document.body.addEventListener('mouseleave', prepareHide);\n      document.addEventListener('mousemove', debouncedOnMouseMove);\n      return;\n    }\n\n    prepareHide();\n  }\n  /**\n   * Event listener invoked upon blur\n   */\n\n\n  function onBlur(event) {\n    if (event.target !== tip.reference) {\n      return;\n    }\n\n    if (tip.props.interactive) {\n      if (!event.relatedTarget) {\n        return;\n      }\n\n      if (closest(event.relatedTarget, Selectors.POPPER)) {\n        return;\n      }\n    }\n\n    prepareHide();\n  }\n  /**\n   * Event listener invoked when a child target is triggered\n   */\n\n\n  function onDelegateShow(event) {\n    if (closest(event.target, tip.props.target)) {\n      prepareShow(event);\n    }\n  }\n  /**\n   * Event listener invoked when a child target should hide\n   */\n\n\n  function onDelegateHide(event) {\n    if (closest(event.target, tip.props.target)) {\n      prepareHide();\n    }\n  }\n  /**\n   * Determines if an event listener should stop further execution due to the\n   * `touchHold` option\n   */\n\n\n  function isEventListenerStopped(event) {\n    var isTouchEvent = includes(event.type, 'touch');\n    var caseA = supportsTouch && isUsingTouch && tip.props.touchHold && !isTouchEvent;\n    var caseB = isUsingTouch && !tip.props.touchHold && isTouchEvent;\n    return caseA || caseB;\n  }\n  /**\n   * Creates the popper instance for the tip\n   */\n\n\n  function createPopperInstance() {\n    var popperOptions = tip.props.popperOptions;\n    var _tip$popperChildren = tip.popperChildren,\n        tooltip = _tip$popperChildren.tooltip,\n        arrow = _tip$popperChildren.arrow;\n    return new Popper(tip.reference, tip.popper, _extends({\n      placement: tip.props.placement\n    }, popperOptions, {\n      modifiers: _extends({}, popperOptions ? popperOptions.modifiers : {}, {\n        preventOverflow: _extends({\n          boundariesElement: tip.props.boundary\n        }, getModifier(popperOptions, 'preventOverflow')),\n        arrow: _extends({\n          element: arrow,\n          enabled: !!arrow\n        }, getModifier(popperOptions, 'arrow')),\n        flip: _extends({\n          enabled: tip.props.flip,\n          padding: tip.props.distance + 5\n          /* 5px from viewport boundary */\n          ,\n          behavior: tip.props.flipBehavior\n        }, getModifier(popperOptions, 'flip')),\n        offset: _extends({\n          offset: tip.props.offset\n        }, getModifier(popperOptions, 'offset'))\n      }),\n      onCreate: function onCreate() {\n        tooltip.style[getPopperPlacement(tip.popper)] = getOffsetDistanceInPx(tip.props.distance, Defaults.distance);\n\n        if (arrow && tip.props.arrowTransform) {\n          computeArrowTransform(arrow, tip.props.arrowTransform);\n        }\n      },\n      onUpdate: function onUpdate() {\n        var styles = tooltip.style;\n        styles.top = '';\n        styles.bottom = '';\n        styles.left = '';\n        styles.right = '';\n        styles[getPopperPlacement(tip.popper)] = getOffsetDistanceInPx(tip.props.distance, Defaults.distance);\n\n        if (arrow && tip.props.arrowTransform) {\n          computeArrowTransform(arrow, tip.props.arrowTransform);\n        }\n      }\n    }));\n  }\n  /**\n   * Mounts the tooltip to the DOM, callback to show tooltip is run **after**\n   * popper's position has updated\n   */\n\n\n  function mount(callback) {\n    if (!tip.popperInstance) {\n      tip.popperInstance = createPopperInstance();\n      addMutationObserver();\n\n      if (!tip.props.livePlacement || hasFollowCursorBehavior()) {\n        tip.popperInstance.disableEventListeners();\n      }\n    } else {\n      if (!hasFollowCursorBehavior()) {\n        tip.popperInstance.scheduleUpdate();\n\n        if (tip.props.livePlacement) {\n          tip.popperInstance.enableEventListeners();\n        }\n      }\n    } // If the instance previously had followCursor behavior, it will be\n    // positioned incorrectly if triggered by `focus` afterwards.\n    // Update the reference back to the real DOM element\n\n\n    tip.popperInstance.reference = tip.reference;\n    var arrow = tip.popperChildren.arrow;\n\n    if (hasFollowCursorBehavior()) {\n      if (arrow) {\n        arrow.style.margin = '0';\n      }\n\n      var delay = getValue(tip.props.delay, 0, Defaults.delay);\n\n      if (lastTriggerEvent.type) {\n        positionVirtualReferenceNearCursor(delay && lastMouseMoveEvent ? lastMouseMoveEvent : lastTriggerEvent);\n      }\n    } else if (arrow) {\n      arrow.style.margin = '';\n    }\n\n    afterPopperPositionUpdates(tip.popperInstance, callback);\n\n    if (!tip.props.appendTo.contains(tip.popper)) {\n      tip.props.appendTo.appendChild(tip.popper);\n      tip.props.onMount(tip);\n      tip.state.isMounted = true;\n    }\n  }\n  /**\n   * Determines if the instance is in `followCursor` mode\n   */\n\n\n  function hasFollowCursorBehavior() {\n    return tip.props.followCursor && !isUsingTouch && lastTriggerEvent.type !== 'focus';\n  }\n  /**\n   * Updates the tooltip's position on each animation frame + timeout\n   */\n\n\n  function makeSticky() {\n    applyTransitionDuration([tip.popper], isIE ? 0 : tip.props.updateDuration);\n\n    var updatePosition = function updatePosition() {\n      if (tip.popperInstance) {\n        tip.popperInstance.scheduleUpdate();\n      }\n\n      if (tip.state.isMounted) {\n        requestAnimationFrame(updatePosition);\n      } else {\n        applyTransitionDuration([tip.popper], 0);\n      }\n    };\n\n    updatePosition();\n  }\n  /**\n   * Invokes a callback once the tooltip has fully transitioned out\n   */\n\n\n  function onTransitionedOut(duration, callback) {\n    onTransitionEnd(duration, function () {\n      if (!tip.state.isVisible && tip.props.appendTo.contains(tip.popper)) {\n        callback();\n      }\n    });\n  }\n  /**\n   * Invokes a callback once the tooltip has fully transitioned in\n   */\n\n\n  function onTransitionedIn(duration, callback) {\n    onTransitionEnd(duration, callback);\n  }\n  /**\n   * Invokes a callback once the tooltip's CSS transition ends\n   */\n\n\n  function onTransitionEnd(duration, callback) {\n    // Make callback synchronous if duration is 0\n    if (duration === 0) {\n      return callback();\n    }\n\n    var tooltip = tip.popperChildren.tooltip;\n\n    var listener = function listener(e) {\n      if (e.target === tooltip) {\n        toggleTransitionEndListener(tooltip, 'remove', listener);\n        callback();\n      }\n    };\n\n    toggleTransitionEndListener(tooltip, 'remove', transitionEndListener);\n    toggleTransitionEndListener(tooltip, 'add', listener);\n    transitionEndListener = listener;\n  }\n  /**\n   * Adds an event listener to the reference and stores it in `listeners`\n   */\n\n\n  function on(eventType, handler) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    tip.reference.addEventListener(eventType, handler, options);\n    listeners.push({\n      eventType: eventType,\n      handler: handler,\n      options: options\n    });\n  }\n  /**\n   * Adds event listeners to the reference based on the `trigger` prop\n   */\n\n\n  function addTriggersToReference() {\n    if (tip.props.touchHold && !tip.props.target) {\n      on('touchstart', onTrigger, PASSIVE);\n      on('touchend', onMouseLeave, PASSIVE);\n    }\n\n    tip.props.trigger.trim().split(' ').forEach(function (eventType) {\n      if (eventType === 'manual') {\n        return;\n      }\n\n      if (!tip.props.target) {\n        on(eventType, onTrigger);\n\n        switch (eventType) {\n          case 'mouseenter':\n            on('mouseleave', onMouseLeave);\n            break;\n\n          case 'focus':\n            on(isIE ? 'focusout' : 'blur', onBlur);\n            break;\n        }\n      } else {\n        switch (eventType) {\n          case 'mouseenter':\n            on('mouseover', onDelegateShow);\n            on('mouseout', onDelegateHide);\n            break;\n\n          case 'focus':\n            on('focusin', onDelegateShow);\n            on('focusout', onDelegateHide);\n            break;\n\n          case 'click':\n            on(eventType, onDelegateShow);\n            break;\n        }\n      }\n    });\n  }\n  /**\n   * Removes event listeners from the reference\n   */\n\n\n  function removeTriggersFromReference() {\n    listeners.forEach(function (_ref) {\n      var eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      tip.reference.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n  /* ======================= 🔑 Public methods 🔑 ======================= */\n\n  /**\n   * Enables the instance to allow it to show or hide\n   */\n\n\n  function enable() {\n    tip.state.isEnabled = true;\n  }\n  /**\n   * Disables the instance to disallow it to show or hide\n   */\n\n\n  function disable() {\n    tip.state.isEnabled = false;\n  }\n  /**\n   * Clears pending timeouts related to the `delay` prop if any\n   */\n\n\n  function clearDelayTimeouts() {\n    clearTimeout(showTimeoutId);\n    clearTimeout(hideTimeoutId);\n  }\n  /**\n   * Sets new props for the instance and redraws the tooltip\n   */\n\n\n  function set$$1() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validateOptions(options, Defaults);\n    var prevProps = tip.props;\n    var nextProps = evaluateProps(tip.reference, _extends({}, tip.props, options, {\n      performance: true\n    }));\n    nextProps.performance = hasOwnProperty(options, 'performance') ? options.performance : prevProps.performance;\n    tip.props = nextProps;\n\n    if (hasOwnProperty(options, 'trigger') || hasOwnProperty(options, 'touchHold')) {\n      removeTriggersFromReference();\n      addTriggersToReference();\n    }\n\n    if (hasOwnProperty(options, 'interactiveDebounce')) {\n      cleanupOldMouseListeners();\n      debouncedOnMouseMove = debounce(onMouseMove, options.interactiveDebounce);\n    }\n\n    updatePopperElement(tip.popper, prevProps, nextProps);\n    tip.popperChildren = getChildren(tip.popper);\n\n    if (tip.popperInstance && POPPER_INSTANCE_RELATED_PROPS.some(function (prop) {\n      return hasOwnProperty(options, prop);\n    })) {\n      tip.popperInstance.destroy();\n      tip.popperInstance = createPopperInstance();\n\n      if (!tip.state.isVisible) {\n        tip.popperInstance.disableEventListeners();\n      }\n\n      if (tip.props.followCursor && lastMouseMoveEvent) {\n        positionVirtualReferenceNearCursor(lastMouseMoveEvent);\n      }\n    }\n  }\n  /**\n   * Shortcut for .set({ content: newContent })\n   */\n\n\n  function setContent$$1(content) {\n    set$$1({\n      content: content\n    });\n  }\n  /**\n   * Shows the tooltip\n   */\n\n\n  function show() {\n    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getValue(tip.props.duration, 0, Defaults.duration[0]);\n\n    if (tip.state.isDestroyed || !tip.state.isEnabled || isUsingTouch && !tip.props.touch) {\n      return;\n    } // Destroy tooltip if the reference element is no longer on the DOM\n\n\n    if (!tip.reference.isVirtual && !document.documentElement.contains(tip.reference)) {\n      return destroy();\n    } // Do not show tooltip if the reference element has a `disabled` attribute\n\n\n    if (tip.reference.hasAttribute('disabled')) {\n      return;\n    } // If the reference was just programmatically focused for accessibility\n    // reasons\n\n\n    if (referenceJustProgrammaticallyFocused) {\n      referenceJustProgrammaticallyFocused = false;\n      return;\n    }\n\n    if (tip.props.onShow(tip) === false) {\n      return;\n    }\n\n    tip.popper.style.visibility = 'visible';\n    tip.state.isVisible = true; // Prevent a transition if the popper is at the opposite placement\n\n    applyTransitionDuration([tip.popper, tip.popperChildren.tooltip, tip.popperChildren.backdrop], 0);\n    mount(function () {\n      if (!tip.state.isVisible) {\n        return;\n      } // Arrow will sometimes not be positioned correctly. Force another update\n\n\n      if (!hasFollowCursorBehavior()) {\n        tip.popperInstance.update();\n      }\n\n      applyTransitionDuration([tip.popperChildren.tooltip, tip.popperChildren.backdrop, tip.popperChildren.content], duration);\n\n      if (tip.popperChildren.backdrop) {\n        tip.popperChildren.content.style.transitionDelay = Math.round(duration / 6) + 'ms';\n      }\n\n      if (tip.props.interactive) {\n        tip.reference.classList.add('tippy-active');\n      }\n\n      if (tip.props.sticky) {\n        makeSticky();\n      }\n\n      setVisibilityState([tip.popperChildren.tooltip, tip.popperChildren.backdrop, tip.popperChildren.content], 'visible');\n      onTransitionedIn(duration, function () {\n        if (tip.props.updateDuration === 0) {\n          tip.popperChildren.tooltip.classList.add('tippy-notransition');\n        }\n\n        if (tip.props.autoFocus && tip.props.interactive && includes(['focus', 'click'], lastTriggerEvent.type)) {\n          focus(tip.popper);\n        }\n\n        if (tip.props.aria) {\n          tip.reference.setAttribute('aria-' + tip.props.aria, tip.popper.id);\n        }\n\n        tip.props.onShown(tip);\n        tip.state.isShown = true;\n      });\n    });\n  }\n  /**\n   * Hides the tooltip\n   */\n\n\n  function hide() {\n    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getValue(tip.props.duration, 1, Defaults.duration[1]);\n\n    if (tip.state.isDestroyed || !tip.state.isEnabled) {\n      return;\n    }\n\n    if (tip.props.onHide(tip) === false) {\n      return;\n    }\n\n    if (tip.props.updateDuration === 0) {\n      tip.popperChildren.tooltip.classList.remove('tippy-notransition');\n    }\n\n    if (tip.props.interactive) {\n      tip.reference.classList.remove('tippy-active');\n    }\n\n    tip.popper.style.visibility = 'hidden';\n    tip.state.isVisible = false;\n    tip.state.isShown = false;\n    applyTransitionDuration([tip.popperChildren.tooltip, tip.popperChildren.backdrop, tip.popperChildren.content], duration);\n    setVisibilityState([tip.popperChildren.tooltip, tip.popperChildren.backdrop, tip.popperChildren.content], 'hidden');\n\n    if (tip.props.autoFocus && tip.props.interactive && !referenceJustProgrammaticallyFocused && includes(['focus', 'click'], lastTriggerEvent.type)) {\n      if (lastTriggerEvent.type === 'focus') {\n        referenceJustProgrammaticallyFocused = true;\n      }\n\n      focus(tip.reference);\n    }\n\n    onTransitionedOut(duration, function () {\n      if (!isPreparingToShow) {\n        removeFollowCursorListener();\n      }\n\n      if (tip.props.aria) {\n        tip.reference.removeAttribute('aria-' + tip.props.aria);\n      }\n\n      tip.popperInstance.disableEventListeners();\n      tip.props.appendTo.removeChild(tip.popper);\n      tip.state.isMounted = false;\n      tip.props.onHidden(tip);\n    });\n  }\n  /**\n   * Destroys the tooltip\n   */\n\n\n  function destroy(destroyTargetInstances) {\n    if (tip.state.isDestroyed) {\n      return;\n    } // If the popper is currently mounted to the DOM, we want to ensure it gets\n    // hidden and unmounted instantly upon destruction\n\n\n    if (tip.state.isMounted) {\n      hide(0);\n    }\n\n    removeTriggersFromReference();\n    tip.reference.removeEventListener('click', onReferenceClick);\n    delete tip.reference._tippy;\n\n    if (tip.props.target && destroyTargetInstances) {\n      arrayFrom(tip.reference.querySelectorAll(tip.props.target)).forEach(function (child) {\n        return child._tippy && child._tippy.destroy();\n      });\n    }\n\n    if (tip.popperInstance) {\n      tip.popperInstance.destroy();\n    }\n\n    if (popperMutationObserver) {\n      popperMutationObserver.disconnect();\n    }\n\n    tip.state.isDestroyed = true;\n  }\n}\n\nvar globalEventListenersBound = false;\n/**\n * Exported module\n * @param {String|Element|Element[]|NodeList|Object} targets\n * @param {Object} options\n * @param {Boolean} one\n * @return {Object}\n */\n\nfunction tippy$1(targets, options, one) {\n  validateOptions(options, Defaults);\n\n  if (!globalEventListenersBound) {\n    bindGlobalEventListeners();\n    globalEventListenersBound = true;\n  }\n\n  var props = _extends({}, Defaults, options);\n  /**\n   * If they are specifying a virtual positioning reference, we need to polyfill\n   * some native DOM props\n   */\n\n\n  if (isPlainObject(targets)) {\n    polyfillElementPrototypeProperties(targets);\n  }\n\n  var references = getArrayOfElements(targets);\n  var firstReference = references[0];\n  var instances = (one && firstReference ? [firstReference] : references).reduce(function (acc, reference) {\n    var tip = reference && createTippy(reference, props);\n\n    if (tip) {\n      acc.push(tip);\n    }\n\n    return acc;\n  }, []);\n  var collection = {\n    targets: targets,\n    props: props,\n    instances: instances,\n    destroyAll: function destroyAll() {\n      collection.instances.forEach(function (instance) {\n        instance.destroy();\n      });\n      collection.instances = [];\n    }\n  };\n  return collection;\n}\n/**\n * Static props\n */\n\n\ntippy$1.version = version;\ntippy$1.defaults = Defaults;\n/**\n * Static methods\n */\n\ntippy$1.one = function (targets, options) {\n  return tippy$1(targets, options, true).instances[0];\n};\n\ntippy$1.setDefaults = function (partialDefaults) {\n  Object.keys(partialDefaults).forEach(function (key) {\n    Defaults[key] = partialDefaults[key];\n  });\n};\n\ntippy$1.disableAnimations = function () {\n  tippy$1.setDefaults({\n    duration: 0,\n    updateDuration: 0,\n    animateFill: false\n  });\n};\n\ntippy$1.hideAllPoppers = hideAllPoppers; // noop: deprecated static method as capture phase is now default\n\ntippy$1.useCapture = function () {};\n/**\n * Auto-init tooltips for elements with a `data-tippy=\"...\"` attribute\n */\n\n\nvar autoInit = function autoInit() {\n  arrayFrom(document.querySelectorAll('[data-tippy]')).forEach(function (el) {\n    var content = el.getAttribute('data-tippy');\n\n    if (content) {\n      tippy$1(el, {\n        content: content\n      });\n    }\n  });\n};\n\nif (isBrowser) {\n  setTimeout(autoInit);\n}\n\nexport default tippy$1;","map":{"version":3,"sources":["../../src/js/browser.js","../../src/js/defaults.js","../../src/js/selectors.js","../../src/js/ponyfills.js","../../src/js/constants.js","../../src/js/popper.js","../../src/js/utils.js","../../src/js/bindGlobalEventListeners.js","../../src/js/reference.js","../../src/js/props.js","../../src/js/deprecated_computeArrowTransform.js","../../src/js/createTippy.js","../../src/js/index.js"],"names":["isBrowser","nav","win","isIE","isIOS","supportsTouch","document","POPPER_INSTANCE_RELATED_PROPS","elementProto","Element","matches","el","callback","element","PASSIVE","passive","FF_EXTENSION_TRICK","x","html","props","popper","Selectors","arrow","div","arrowType","backdrop","value","action","fullPlacement","tooltip","t","content","createArrowElement","createBackdropElement","e","getChildren","nextProps","prevProps","theme","options","popperInstance","onCreate","onUpdate","tip","tippyInstanceToExclude","y","event","interactiveBorder","distance","exceedsTop","popperRect","popperPlacement","exceedsBottom","exceedsLeft","exceedsRight","isNaN","parseFloat","isPlainObject","arrayFrom","Array","v","window","timeoutId","fn","obj","a","isUsingTouch","lastMouseMoveTime","now","performance","target","hideAllPoppers","closest","reference","isClickTrigger","includes","activeElement","tippyInstance","navigator","keys","Object","valueAsString","key","isNumeric","Number","JSON","polyfills","virtualReference","out","getDataAttributeOptions","defaults","hasOwnProperty","TRANSFORM_NUMBER_RE","isVertical","numbers","b","transforms","isReverse","match","str","cssFunction","placement","getPopperPlacement","getTransformAxis","getTransformNumbers","computedTransform","arrowTransform","transformAxisBasedOnPlacement","transformNumbersBasedOnPlacement","idCounter","evaluateProps","popperMutationObserver","lastTriggerEvent","lastMouseMoveEvent","showTimeoutId","hideTimeoutId","isPreparingToShow","transitionEndListener","listeners","referenceJustProgrammaticallyFocused","debouncedOnMouseMove","debounce","id","createPopperElement","isCursorOutsideInteractiveBorder","popperChildren","state","createPopperInstance","canReceiveFocus","clientX","clientY","padding","isVerticalPlacement","isHorizontalPlacement","Math","rect","followCursor","isHorizontal","targetEl","createDelegateChildTippy","hasFollowCursorBehavior","delay","getValue","Defaults","removeFollowCursorListener","isEventListenerStopped","referenceTheCursorIsOver","isCursorOverPopper","isCursorOverReference","isTouchEvent","caseA","caseB","popperOptions","boundary","getModifier","behavior","flipBehavior","offset","getOffsetDistanceInPx","styles","updatePosition","duration","listener","eventType","handler","destroy","child","globalEventListenersBound","references","getArrayOfElements","firstReference","instances","one","createTippy","collection","tippy","partialDefaults","autoInit"],"mappings":"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","sourcesContent":["export const isBrowser = typeof window !== 'undefined'\n\nconst nav = isBrowser ? navigator : {}\nconst win = isBrowser ? window : {}\n\nexport const isBrowserSupported = 'MutationObserver' in win\nexport const isIE = /MSIE |Trident\\//.test(nav.userAgent)\nexport const isIOS = /iPhone|iPad|iPod/.test(nav.platform) && !win.MSStream\nexport const supportsTouch = 'ontouchstart' in win\n","export default {\n  a11y: true,\n  allowHTML: true,\n  animateFill: true,\n  animation: 'shift-away',\n  appendTo: () => document.body,\n  aria: 'describedby',\n  arrow: false,\n  arrowTransform: '',\n  arrowType: 'sharp',\n  autoFocus: true,\n  boundary: 'scrollParent',\n  content: '',\n  delay: [0, 20],\n  distance: 10,\n  duration: [325, 275],\n  flip: true,\n  flipBehavior: 'flip',\n  followCursor: false,\n  hideOnClick: true,\n  inertia: false,\n  interactive: false,\n  interactiveBorder: 2,\n  interactiveDebounce: 0,\n  lazy: true,\n  livePlacement: true,\n  maxWidth: '',\n  multiple: false,\n  offset: 0,\n  onHidden() {},\n  onHide() {},\n  onMount() {},\n  onShow() {},\n  onShown() {},\n  performance: false,\n  placement: 'top',\n  popperOptions: {},\n  shouldPopperHideOnBlur: () => true,\n  showOnInit: false,\n  size: 'regular',\n  sticky: false,\n  target: '',\n  theme: 'dark',\n  touch: true,\n  touchHold: false,\n  trigger: 'mouseenter focus',\n  updateDuration: 200,\n  wait: null,\n  zIndex: 9999,\n}\n\n/**\n * If the set() method encounters one of these, the popperInstance must be\n * recreated\n */\nexport const POPPER_INSTANCE_RELATED_PROPS = [\n  'arrow',\n  'arrowType',\n  'distance',\n  'flip',\n  'flipBehavior',\n  'offset',\n  'placement',\n  'popperOptions',\n]\n","export default {\n  POPPER: '.tippy-popper',\n  TOOLTIP: '.tippy-tooltip',\n  CONTENT: '.tippy-content',\n  BACKDROP: '.tippy-backdrop',\n  ARROW: '.tippy-arrow',\n  ROUND_ARROW: '.tippy-roundarrow',\n}\n","import { isBrowser } from './browser'\n\nconst elementProto = isBrowser ? Element.prototype : {}\n\nexport const matches =\n  elementProto.matches ||\n  elementProto.matchesSelector ||\n  elementProto.webkitMatchesSelector ||\n  elementProto.mozMatchesSelector ||\n  elementProto.msMatchesSelector\n\n/**\n * Ponyfill for Array.from - converts iterable values to an array\n * @param {Array-like} value\n * @return {Array}\n */\nexport function arrayFrom(value) {\n  return [].slice.call(value)\n}\n\n/**\n * Ponyfill for Element.prototype.closest\n * @param {Element} element\n * @param {String} parentSelector\n * @return {Element}\n */\nexport function closest(element, parentSelector) {\n  return (\n    elementProto.closest ||\n    function(selector) {\n      let el = this\n      while (el) {\n        if (matches.call(el, selector)) return el\n        el = el.parentElement\n      }\n    }\n  ).call(element, parentSelector)\n}\n\n/**\n * Works like Element.prototype.closest, but uses a callback instead\n * @param {Element} element\n * @param {Function} callback\n * @return {Element}\n */\nexport function closestCallback(element, callback) {\n  while (element) {\n    if (callback(element)) return element\n    element = element.parentElement\n  }\n}\n","export const PASSIVE = { passive: true }\nexport const FF_EXTENSION_TRICK = { x: true }\n","import Selectors from './selectors'\nimport { arrayFrom, closestCallback } from './ponyfills'\nimport { FF_EXTENSION_TRICK } from './constants'\n\n/**\n * Returns a new `div` element\n * @return {HTMLDivElement}\n */\nexport function div() {\n  return document.createElement('div')\n}\n\n/**\n * Sets the innerHTML of an element while tricking linters & minifiers\n * @param {HTMLElement} el\n * @param {Element|String} html\n */\nexport function setInnerHTML(el, html) {\n  el[FF_EXTENSION_TRICK.x && 'innerHTML'] =\n    html instanceof Element ? html[FF_EXTENSION_TRICK.x && 'innerHTML'] : html\n}\n\n/**\n * Sets the content of a tooltip\n * @param {HTMLElement} contentEl\n * @param {Object} props\n */\nexport function setContent(contentEl, props) {\n  if (props.content instanceof Element) {\n    setInnerHTML(contentEl, '')\n    contentEl.appendChild(props.content)\n  } else {\n    contentEl[props.allowHTML ? 'innerHTML' : 'textContent'] = props.content\n  }\n}\n\n/**\n * Returns the child elements of a popper element\n * @param {HTMLElement} popper\n */\nexport function getChildren(popper) {\n  return {\n    tooltip: popper.querySelector(Selectors.TOOLTIP),\n    backdrop: popper.querySelector(Selectors.BACKDROP),\n    content: popper.querySelector(Selectors.CONTENT),\n    arrow:\n      popper.querySelector(Selectors.ARROW) ||\n      popper.querySelector(Selectors.ROUND_ARROW),\n  }\n}\n\n/**\n * Adds `data-inertia` attribute\n * @param {HTMLElement} tooltip\n */\nexport function addInertia(tooltip) {\n  tooltip.setAttribute('data-inertia', '')\n}\n\n/**\n * Removes `data-inertia` attribute\n * @param {HTMLElement} tooltip\n */\nexport function removeInertia(tooltip) {\n  tooltip.removeAttribute('data-inertia')\n}\n\n/**\n * Creates an arrow element and returns it\n */\nexport function createArrowElement(arrowType) {\n  const arrow = div()\n  if (arrowType === 'round') {\n    arrow.className = 'tippy-roundarrow'\n    setInnerHTML(\n      arrow,\n      '<svg viewBox=\"0 0 24 8\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z\"/></svg>',\n    )\n  } else {\n    arrow.className = 'tippy-arrow'\n  }\n  return arrow\n}\n\n/**\n * Creates a backdrop element and returns it\n */\nexport function createBackdropElement() {\n  const backdrop = div()\n  backdrop.className = 'tippy-backdrop'\n  backdrop.setAttribute('data-state', 'hidden')\n  return backdrop\n}\n\n/**\n * Adds interactive-related attributes\n * @param {HTMLElement} popper\n * @param {HTMLElement} tooltip\n */\nexport function addInteractive(popper, tooltip) {\n  popper.setAttribute('tabindex', '-1')\n  tooltip.setAttribute('data-interactive', '')\n}\n\n/**\n * Removes interactive-related attributes\n * @param {HTMLElement} popper\n * @param {HTMLElement} tooltip\n */\nexport function removeInteractive(popper, tooltip) {\n  popper.removeAttribute('tabindex')\n  tooltip.removeAttribute('data-interactive')\n}\n\n/**\n * Applies a transition duration to a list of elements\n * @param {Array} els\n * @param {Number} value\n */\nexport function applyTransitionDuration(els, value) {\n  els.forEach(el => {\n    if (el) {\n      el.style.transitionDuration = `${value}ms`\n    }\n  })\n}\n\n/**\n * Add/remove transitionend listener from tooltip\n * @param {Element} tooltip\n * @param {String} action\n * @param {Function} listener\n */\nexport function toggleTransitionEndListener(tooltip, action, listener) {\n  tooltip[action + 'EventListener']('transitionend', listener)\n}\n\n/**\n * Returns the popper's placement, ignoring shifting (top-start, etc)\n * @param {Element} popper\n * @return {String}\n */\nexport function getPopperPlacement(popper) {\n  const fullPlacement = popper.getAttribute('x-placement')\n  return fullPlacement ? fullPlacement.split('-')[0] : ''\n}\n\n/**\n * Sets the visibility state to elements so they can begin to transition\n * @param {Array} els\n * @param {String} state\n */\nexport function setVisibilityState(els, state) {\n  els.forEach(el => {\n    if (el) {\n      el.setAttribute('data-state', state)\n    }\n  })\n}\n\n/**\n * Triggers reflow\n * @param {Element} popper\n */\nexport function reflow(popper) {\n  void popper.offsetHeight\n}\n\n/**\n * Constructs the popper element and returns it\n * @param {Number} id\n * @param {Object} props\n */\nexport function createPopperElement(id, props) {\n  const popper = div()\n  popper.className = 'tippy-popper'\n  popper.setAttribute('role', 'tooltip')\n  popper.id = `tippy-${id}`\n  popper.style.zIndex = props.zIndex\n\n  const tooltip = div()\n  tooltip.className = 'tippy-tooltip'\n  tooltip.style.maxWidth =\n    props.maxWidth + (typeof props.maxWidth === 'number' ? 'px' : '')\n  tooltip.setAttribute('data-size', props.size)\n  tooltip.setAttribute('data-animation', props.animation)\n  tooltip.setAttribute('data-state', 'hidden')\n  props.theme.split(' ').forEach(t => {\n    tooltip.classList.add(t + '-theme')\n  })\n\n  const content = div()\n  content.className = 'tippy-content'\n  content.setAttribute('data-state', 'hidden')\n\n  if (props.interactive) {\n    addInteractive(popper, tooltip)\n  }\n\n  if (props.arrow) {\n    tooltip.appendChild(createArrowElement(props.arrowType))\n  }\n\n  if (props.animateFill) {\n    tooltip.appendChild(createBackdropElement())\n    tooltip.setAttribute('data-animatefill', '')\n  }\n\n  if (props.inertia) {\n    addInertia(tooltip)\n  }\n\n  setContent(content, props)\n\n  tooltip.appendChild(content)\n  popper.appendChild(tooltip)\n\n  popper.addEventListener('focusout', e => {\n    if (\n      e.relatedTarget &&\n      popper._tippy &&\n      !closestCallback(e.relatedTarget, el => el === popper) &&\n      e.relatedTarget !== popper._tippy.reference &&\n      popper._tippy.props.shouldPopperHideOnBlur(e)\n    ) {\n      popper._tippy.hide()\n    }\n  })\n\n  return popper\n}\n\n/**\n * Updates the popper element based on the new props\n * @param {HTMLElement} popper\n * @param {Object} prevProps\n * @param {Object} nextProps\n */\nexport function updatePopperElement(popper, prevProps, nextProps) {\n  const { tooltip, content, backdrop, arrow } = getChildren(popper)\n\n  popper.style.zIndex = nextProps.zIndex\n  tooltip.setAttribute('data-size', nextProps.size)\n  tooltip.setAttribute('data-animation', nextProps.animation)\n  tooltip.style.maxWidth =\n    nextProps.maxWidth + (typeof nextProps.maxWidth === 'number' ? 'px' : '')\n\n  if (prevProps.content !== nextProps.content) {\n    setContent(content, nextProps)\n  }\n\n  // animateFill\n  if (!prevProps.animateFill && nextProps.animateFill) {\n    tooltip.appendChild(createBackdropElement())\n    tooltip.setAttribute('data-animatefill', '')\n  } else if (prevProps.animateFill && !nextProps.animateFill) {\n    tooltip.removeChild(backdrop)\n    tooltip.removeAttribute('data-animatefill')\n  }\n\n  // arrow\n  if (!prevProps.arrow && nextProps.arrow) {\n    tooltip.appendChild(createArrowElement(nextProps.arrowType))\n  } else if (prevProps.arrow && !nextProps.arrow) {\n    tooltip.removeChild(arrow)\n  }\n\n  // arrowType\n  if (\n    prevProps.arrow &&\n    nextProps.arrow &&\n    prevProps.arrowType !== nextProps.arrowType\n  ) {\n    tooltip.replaceChild(createArrowElement(nextProps.arrowType), arrow)\n  }\n\n  // interactive\n  if (!prevProps.interactive && nextProps.interactive) {\n    addInteractive(popper, tooltip)\n  } else if (prevProps.interactive && !nextProps.interactive) {\n    removeInteractive(popper, tooltip)\n  }\n\n  // inertia\n  if (!prevProps.inertia && nextProps.inertia) {\n    addInertia(tooltip)\n  } else if (prevProps.inertia && !nextProps.inertia) {\n    removeInertia(tooltip)\n  }\n\n  // theme\n  if (prevProps.theme !== nextProps.theme) {\n    prevProps.theme.split(' ').forEach(theme => {\n      tooltip.classList.remove(theme + '-theme')\n    })\n    nextProps.theme.split(' ').forEach(theme => {\n      tooltip.classList.add(theme + '-theme')\n    })\n  }\n}\n\n/**\n * Runs the callback after the popper's position has been updated\n * update() is debounced with Promise.resolve() or setTimeout()\n * scheduleUpdate() is update() wrapped in requestAnimationFrame()\n * @param {Popper} popperInstance\n * @param {Function} callback\n */\nexport function afterPopperPositionUpdates(popperInstance, callback) {\n  const { popper, options } = popperInstance\n  const { onCreate, onUpdate } = options\n\n  options.onCreate = options.onUpdate = () => {\n    reflow(popper)\n    callback()\n    onUpdate()\n    options.onCreate = onCreate\n    options.onUpdate = onUpdate\n  }\n}\n\n/**\n * Hides all visible poppers on the document, optionally excluding one\n * @param {Tippy} tippyInstanceToExclude\n */\nexport function hideAllPoppers(tippyInstanceToExclude) {\n  arrayFrom(document.querySelectorAll(Selectors.POPPER)).forEach(popper => {\n    const tip = popper._tippy\n    if (\n      tip &&\n      tip.props.hideOnClick === true &&\n      (!tippyInstanceToExclude || popper !== tippyInstanceToExclude.popper)\n    ) {\n      tip.hide()\n    }\n  })\n}\n\n/**\n * Determines if the mouse cursor is outside of the popper's interactive border\n * region\n * @param {String} popperPlacement\n * @param {Object} popperRect\n * @param {MouseEvent} event\n * @param {Object} props\n */\nexport function isCursorOutsideInteractiveBorder(\n  popperPlacement,\n  popperRect,\n  event,\n  props,\n) {\n  if (!popperPlacement) {\n    return true\n  }\n\n  const { clientX: x, clientY: y } = event\n  const { interactiveBorder, distance } = props\n\n  const exceedsTop =\n    popperRect.top - y >\n    (popperPlacement === 'top'\n      ? interactiveBorder + distance\n      : interactiveBorder)\n\n  const exceedsBottom =\n    y - popperRect.bottom >\n    (popperPlacement === 'bottom'\n      ? interactiveBorder + distance\n      : interactiveBorder)\n\n  const exceedsLeft =\n    popperRect.left - x >\n    (popperPlacement === 'left'\n      ? interactiveBorder + distance\n      : interactiveBorder)\n\n  const exceedsRight =\n    x - popperRect.right >\n    (popperPlacement === 'right'\n      ? interactiveBorder + distance\n      : interactiveBorder)\n\n  return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight\n}\n\n/**\n * Returns the distance offset, taking into account the default offset due to\n * the transform: translate() rule in CSS\n * @param {Number} distance\n * @param {Number} defaultDistance\n */\nexport function getOffsetDistanceInPx(distance, defaultDistance) {\n  return -(distance - defaultDistance) + 'px'\n}\n","import { arrayFrom } from './ponyfills'\n\n/**\n * Determines if a value is a plain object\n * @param {any} value\n * @return {Boolean}\n */\nexport function isPlainObject(value) {\n  return {}.toString.call(value) === '[object Object]'\n}\n\n/**\n * Safe .hasOwnProperty check, for prototype-less objects\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\nexport function hasOwnProperty(obj, key) {\n  return {}.hasOwnProperty.call(obj, key)\n}\n\n/**\n * Determines if a value is numeric\n * @param {any} value\n * @return {Boolean}\n */\nexport function isNumeric(value) {\n  return !isNaN(value) && !isNaN(parseFloat(value))\n}\n\n/**\n * Returns an array of elements based on the value\n * @param {any} value\n * @return {Array}\n */\nexport function getArrayOfElements(value) {\n  if (value instanceof Element || isPlainObject(value)) {\n    return [value]\n  }\n  if (value instanceof NodeList) {\n    return arrayFrom(value)\n  }\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  try {\n    return arrayFrom(document.querySelectorAll(value))\n  } catch (e) {\n    return []\n  }\n}\n\n/**\n * Returns a value at a given index depending on if it's an array or number\n * @param {any} value\n * @param {Number} index\n * @param {any} defaultValue\n */\nexport function getValue(value, index, defaultValue) {\n  if (Array.isArray(value)) {\n    const v = value[index]\n    return v == null ? defaultValue : v\n  }\n  return value\n}\n\n/**\n * Focuses an element while preventing a scroll jump if it's not within the\n * viewport\n * @param {Element} el\n */\nexport function focus(el) {\n  const x = window.scrollX || window.pageXOffset\n  const y = window.scrollY || window.pageYOffset\n  el.focus()\n  scroll(x, y)\n}\n\n/**\n * Defers a function's execution until the call stack has cleared\n * @param {Function} fn\n */\nexport function defer(fn) {\n  setTimeout(fn, 1)\n}\n\n/**\n * Debounce utility\n * @param {Function} fn\n * @param {Number} ms\n */\nexport function debounce(fn, ms) {\n  let timeoutId\n  return function() {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => fn.apply(this, arguments), ms)\n  }\n}\n\n/**\n * Prevents errors from being thrown while accessing nested modifier objects\n * in `popperOptions`\n * @param {Object} obj\n * @param {String} key\n * @return {Object|undefined}\n */\nexport function getModifier(obj, key) {\n  return obj && obj.modifiers && obj.modifiers[key]\n}\n\n/**\n * Determines if an array or string includes a value\n * @param {Array|String} a\n * @param {any} b\n * @return {Boolean}\n */\nexport function includes(a, b) {\n  return a.indexOf(b) > -1\n}\n","import { supportsTouch, isIOS } from './browser'\nimport Selectors from './selectors'\nimport { hideAllPoppers } from './popper'\nimport { closest, closestCallback, arrayFrom } from './ponyfills'\nimport { includes } from './utils'\nimport { PASSIVE } from './constants'\n\nexport let isUsingTouch = false\n\nexport function onDocumentTouch() {\n  if (isUsingTouch) {\n    return\n  }\n\n  isUsingTouch = true\n\n  if (isIOS) {\n    document.body.classList.add('tippy-iOS')\n  }\n\n  if (window.performance) {\n    document.addEventListener('mousemove', onDocumentMouseMove)\n  }\n}\n\nlet lastMouseMoveTime = 0\nexport function onDocumentMouseMove() {\n  const now = performance.now()\n\n  // Chrome 60+ is 1 mousemove per animation frame, use 20ms time difference\n  if (now - lastMouseMoveTime < 20) {\n    isUsingTouch = false\n    document.removeEventListener('mousemove', onDocumentMouseMove)\n    if (!isIOS) {\n      document.body.classList.remove('tippy-iOS')\n    }\n  }\n\n  lastMouseMoveTime = now\n}\n\nexport function onDocumentClick({ target }) {\n  // Simulated events dispatched on the document\n  if (!(target instanceof Element)) {\n    return hideAllPoppers()\n  }\n\n  // Clicked on an interactive popper\n  const popper = closest(target, Selectors.POPPER)\n  if (popper && popper._tippy && popper._tippy.props.interactive) {\n    return\n  }\n\n  // Clicked on a reference\n  const reference = closestCallback(\n    target,\n    el => el._tippy && el._tippy.reference === el,\n  )\n  if (reference) {\n    const tip = reference._tippy\n    const isClickTrigger = includes(tip.props.trigger, 'click')\n\n    if (isUsingTouch || isClickTrigger) {\n      return hideAllPoppers(tip)\n    }\n\n    if (tip.props.hideOnClick !== true || isClickTrigger) {\n      return\n    }\n\n    tip.clearDelayTimeouts()\n  }\n\n  hideAllPoppers()\n}\n\nexport function onWindowBlur() {\n  const { activeElement } = document\n  if (activeElement && activeElement.blur && activeElement._tippy) {\n    activeElement.blur()\n  }\n}\n\nexport function onWindowResize() {\n  arrayFrom(document.querySelectorAll(Selectors.POPPER)).forEach(popper => {\n    const tippyInstance = popper._tippy\n    if (!tippyInstance.props.livePlacement) {\n      tippyInstance.popperInstance.scheduleUpdate()\n    }\n  })\n}\n\n/**\n * Adds the needed global event listeners\n */\nexport default function bindGlobalEventListeners() {\n  document.addEventListener('click', onDocumentClick, true)\n  document.addEventListener('touchstart', onDocumentTouch, PASSIVE)\n  window.addEventListener('blur', onWindowBlur)\n  window.addEventListener('resize', onWindowResize)\n\n  if (\n    !supportsTouch &&\n    (navigator.maxTouchPoints || navigator.msMaxTouchPoints)\n  ) {\n    document.addEventListener('pointerdown', onDocumentTouch)\n  }\n}\n","import Defaults from './defaults'\nimport { matches } from './ponyfills'\nimport { isNumeric } from './utils'\n\nconst keys = Object.keys(Defaults)\n\n/**\n * Determines if an element can receive focus\n * @param {Element} el\n * @return {Boolean}\n */\nexport function canReceiveFocus(el) {\n  return el instanceof Element\n    ? matches.call(\n        el,\n        'a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]',\n      ) && !el.hasAttribute('disabled')\n    : true\n}\n\n/**\n * Returns an object of optional props from data-tippy-* attributes\n * @param {Element} reference\n * @return {Object}\n */\nexport function getDataAttributeOptions(reference) {\n  return keys.reduce((acc, key) => {\n    const valueAsString = (\n      reference.getAttribute(`data-tippy-${key}`) || ''\n    ).trim()\n\n    if (!valueAsString) {\n      return acc\n    }\n\n    if (key === 'content') {\n      acc[key] = valueAsString\n    } else if (valueAsString === 'true') {\n      acc[key] = true\n    } else if (valueAsString === 'false') {\n      acc[key] = false\n    } else if (isNumeric(valueAsString)) {\n      acc[key] = Number(valueAsString)\n    } else if (valueAsString[0] === '[' || valueAsString[0] === '{') {\n      acc[key] = JSON.parse(valueAsString)\n    } else {\n      acc[key] = valueAsString\n    }\n\n    return acc\n  }, {})\n}\n\n/**\n * Polyfills the virtual reference (plain object) with Element.prototype props\n * Mutating because DOM elements are mutated, adds `_tippy` property\n * @param {Object} virtualReference\n * @return {Object}\n */\nexport function polyfillElementPrototypeProperties(virtualReference) {\n  const polyfills = {\n    isVirtual: true,\n    attributes: virtualReference.attributes || {},\n    setAttribute(key, value) {\n      virtualReference.attributes[key] = value\n    },\n    getAttribute(key) {\n      return virtualReference.attributes[key]\n    },\n    removeAttribute(key) {\n      delete virtualReference.attributes[key]\n    },\n    hasAttribute(key) {\n      return key in virtualReference.attributes\n    },\n    addEventListener() {},\n    removeEventListener() {},\n    classList: {\n      classNames: {},\n      add(key) {\n        virtualReference.classList.classNames[key] = true\n      },\n      remove(key) {\n        delete virtualReference.classList.classNames[key]\n      },\n      contains(key) {\n        return key in virtualReference.classList.classNames\n      },\n    },\n  }\n\n  for (const key in polyfills) {\n    virtualReference[key] = polyfills[key]\n  }\n}\n","import { getDataAttributeOptions } from './reference'\nimport { hasOwnProperty } from './utils'\n\n/**\n * Evaluates the props object\n * @param {Element} reference\n * @param {Object} props\n * @return {Object}\n */\nexport function evaluateProps(reference, props) {\n  const out = {\n    ...props,\n    ...(props.performance ? {} : getDataAttributeOptions(reference)),\n  }\n\n  if (out.arrow) {\n    out.animateFill = false\n  }\n\n  if (typeof out.appendTo === 'function') {\n    out.appendTo = props.appendTo(reference)\n  }\n\n  if (typeof out.content === 'function') {\n    out.content = props.content(reference)\n  }\n\n  return out\n}\n\n/**\n * Validates an object of options with the valid default props object\n * @param {Object} options\n * @param {Object} defaults\n */\nexport function validateOptions(options = {}, defaults) {\n  Object.keys(options).forEach(option => {\n    if (!hasOwnProperty(defaults, option)) {\n      throw new Error(`[tippy]: \\`${option}\\` is not a valid option`)\n    }\n  })\n}\n","import Selectors from './selectors'\nimport { getPopperPlacement } from './popper'\nimport { closest } from './ponyfills'\nimport { includes } from './utils'\n\n// =============================================================================\n// DEPRECATED\n// All of this code (for the `arrowTransform` option) will be removed in v4\n// =============================================================================\nexport const TRANSFORM_NUMBER_RE = {\n  translate: /translateX?Y?\\(([^)]+)\\)/,\n  scale: /scaleX?Y?\\(([^)]+)\\)/,\n}\n\n/**\n * Transforms the x/y axis based on the placement\n */\nexport function transformAxisBasedOnPlacement(axis, isVertical) {\n  return (\n    (isVertical\n      ? axis\n      : {\n          X: 'Y',\n          Y: 'X',\n        }[axis]) || ''\n  )\n}\n\n/**\n * Transforms the scale/translate numbers based on the placement\n */\nexport function transformNumbersBasedOnPlacement(\n  type,\n  numbers,\n  isVertical,\n  isReverse,\n) {\n  /**\n   * Avoid destructuring because a large boilerplate function is generated\n   * by Babel\n   */\n  const a = numbers[0]\n  const b = numbers[1]\n\n  if (!a && !b) {\n    return ''\n  }\n\n  const transforms = {\n    scale: (() => {\n      if (!b) {\n        return `${a}`\n      } else {\n        return isVertical ? `${a}, ${b}` : `${b}, ${a}`\n      }\n    })(),\n    translate: (() => {\n      if (!b) {\n        return isReverse ? `${-a}px` : `${a}px`\n      } else {\n        if (isVertical) {\n          return isReverse ? `${a}px, ${-b}px` : `${a}px, ${b}px`\n        } else {\n          return isReverse ? `${-b}px, ${a}px` : `${b}px, ${a}px`\n        }\n      }\n    })(),\n  }\n\n  return transforms[type]\n}\n\n/**\n * Returns the axis for a CSS function (translate or scale)\n */\nexport function getTransformAxis(str, cssFunction) {\n  const match = str.match(new RegExp(cssFunction + '([XY])'))\n  return match ? match[1] : ''\n}\n\n/**\n * Returns the numbers given to the CSS function\n */\nexport function getTransformNumbers(str, regex) {\n  const match = str.match(regex)\n  return match ? match[1].split(',').map(n => parseFloat(n, 10)) : []\n}\n\n/**\n * Computes the arrow's transform so that it is correct for any placement\n */\nfunction computeArrowTransform(arrow, arrowTransform) {\n  const placement = getPopperPlacement(closest(arrow, Selectors.POPPER))\n  const isVertical = includes(['top', 'bottom'], placement)\n  const isReverse = includes(['right', 'bottom'], placement)\n\n  const matches = {\n    translate: {\n      axis: getTransformAxis(arrowTransform, 'translate'),\n      numbers: getTransformNumbers(\n        arrowTransform,\n        TRANSFORM_NUMBER_RE.translate,\n      ),\n    },\n    scale: {\n      axis: getTransformAxis(arrowTransform, 'scale'),\n      numbers: getTransformNumbers(arrowTransform, TRANSFORM_NUMBER_RE.scale),\n    },\n  }\n\n  const computedTransform = arrowTransform\n    .replace(\n      TRANSFORM_NUMBER_RE.translate,\n      `translate${transformAxisBasedOnPlacement(\n        matches.translate.axis,\n        isVertical,\n      )}(${transformNumbersBasedOnPlacement(\n        'translate',\n        matches.translate.numbers,\n        isVertical,\n        isReverse,\n      )})`,\n    )\n    .replace(\n      TRANSFORM_NUMBER_RE.scale,\n      `scale${transformAxisBasedOnPlacement(\n        matches.scale.axis,\n        isVertical,\n      )}(${transformNumbersBasedOnPlacement(\n        'scale',\n        matches.scale.numbers,\n        isVertical,\n        isReverse,\n      )})`,\n    )\n\n  arrow.style[\n    typeof document.body.style.transform !== 'undefined'\n      ? 'transform'\n      : 'webkitTransform'\n  ] = computedTransform\n}\n\nexport default computeArrowTransform\n","import Popper from 'popper.js'\nimport { supportsTouch, isIE } from './browser'\nimport { isUsingTouch } from './bindGlobalEventListeners'\nimport Defaults, { POPPER_INSTANCE_RELATED_PROPS } from './defaults'\nimport Selectors from './selectors'\nimport {\n  createPopperElement,\n  updatePopperElement,\n  afterPopperPositionUpdates,\n  getChildren,\n  getPopperPlacement,\n  applyTransitionDuration,\n  toggleTransitionEndListener,\n  setVisibilityState,\n  isCursorOutsideInteractiveBorder,\n  getOffsetDistanceInPx,\n} from './popper'\nimport { canReceiveFocus } from './reference'\nimport { validateOptions, evaluateProps } from './props'\nimport computeArrowTransform from './deprecated_computeArrowTransform'\nimport { closest, closestCallback, arrayFrom } from './ponyfills'\nimport {\n  defer,\n  focus,\n  hasOwnProperty,\n  debounce,\n  getValue,\n  getModifier,\n  includes,\n} from './utils'\nimport { PASSIVE } from './constants'\n\nlet idCounter = 1\n\n/**\n * Creates and returns a Tippy object. We're using a closure pattern instead of\n * a class so that the exposed object API is clean without private members\n * prefixed with `_`.\n * @param {Element} reference\n * @param {Object} collectionProps\n * @return {Object} instance\n */\nexport default function createTippy(reference, collectionProps) {\n  const props = evaluateProps(reference, collectionProps)\n\n  // If the reference shouldn't have multiple tippys, return null early\n  if (!props.multiple && reference._tippy) {\n    return null\n  }\n\n  /* ======================= 🔒 Private members 🔒 ======================= */\n  // The popper element's mutation observer\n  let popperMutationObserver = null\n\n  // The last trigger event object that caused the tippy to show\n  let lastTriggerEvent = {}\n\n  // The last mousemove event object created by the document mousemove event\n  let lastMouseMoveEvent = null\n\n  // Timeout created by the show delay\n  let showTimeoutId = 0\n\n  // Timeout created by the hide delay\n  let hideTimeoutId = 0\n\n  // Flag to determine if the tippy is preparing to show due to the show timeout\n  let isPreparingToShow = false\n\n  // The current `transitionend` callback reference\n  let transitionEndListener = () => {}\n\n  // Array of event listeners currently attached to the reference element\n  let listeners = []\n\n  // Flag to determine if the reference was recently programmatically focused\n  let referenceJustProgrammaticallyFocused = false\n\n  // Private onMouseMove handler reference, debounced or not\n  let debouncedOnMouseMove =\n    props.interactiveDebounce > 0\n      ? debounce(onMouseMove, props.interactiveDebounce)\n      : onMouseMove\n\n  /* ======================= 🔑 Public members 🔑 ======================= */\n  // id used for the `aria-describedby` / `aria-labelledby` attribute\n  const id = idCounter++\n\n  // Popper element reference\n  const popper = createPopperElement(id, props)\n\n  // Prevent a tippy with a delay from hiding if the cursor left then returned\n  // before it started hiding\n  popper.addEventListener('mouseenter', event => {\n    if (\n      tip.props.interactive &&\n      tip.state.isVisible &&\n      lastTriggerEvent.type === 'mouseenter'\n    ) {\n      prepareShow(event)\n    }\n  })\n  popper.addEventListener('mouseleave', event => {\n    if (\n      tip.props.interactive &&\n      lastTriggerEvent.type === 'mouseenter' &&\n      tip.props.interactiveDebounce === 0 &&\n      isCursorOutsideInteractiveBorder(\n        getPopperPlacement(popper),\n        popper.getBoundingClientRect(),\n        event,\n        tip.props,\n      )\n    ) {\n      prepareHide()\n    }\n  })\n\n  // Popper element children: { arrow, backdrop, content, tooltip }\n  const popperChildren = getChildren(popper)\n\n  // The state of the tippy\n  const state = {\n    // If the tippy is currently enabled\n    isEnabled: true,\n    // show() invoked, not currently transitioning out\n    isVisible: false,\n    // If the tippy has been destroyed\n    isDestroyed: false,\n    // If the tippy is on the DOM (transitioning out or in)\n    isMounted: false,\n    // show() transition finished\n    isShown: false,\n  }\n\n  // Popper.js instance for the tippy is lazily created\n  const popperInstance = null\n\n  // 🌟 tippy instance\n  const tip = {\n    // properties\n    id,\n    reference,\n    popper,\n    popperChildren,\n    popperInstance,\n    props,\n    state,\n    // methods\n    clearDelayTimeouts,\n    set,\n    setContent,\n    show,\n    hide,\n    enable,\n    disable,\n    destroy,\n  }\n\n  addTriggersToReference()\n\n  reference.addEventListener('click', onReferenceClick)\n\n  if (!props.lazy) {\n    tip.popperInstance = createPopperInstance()\n    tip.popperInstance.disableEventListeners()\n  }\n\n  if (props.showOnInit) {\n    prepareShow()\n  }\n\n  // Ensure the reference element can receive focus (and is not a delegate)\n  if (props.a11y && !props.target && !canReceiveFocus(reference)) {\n    reference.setAttribute('tabindex', '0')\n  }\n\n  // Install shortcuts\n  reference._tippy = tip\n  popper._tippy = tip\n\n  return tip\n\n  /* ======================= 🔒 Private methods 🔒 ======================= */\n  /**\n   * If the reference was clicked, it also receives focus\n   */\n  function onReferenceClick() {\n    defer(() => {\n      referenceJustProgrammaticallyFocused = false\n    })\n  }\n\n  /**\n   * Ensure the popper's position stays correct if its dimensions change. Use\n   * update() over .scheduleUpdate() so there is no 1 frame flash due to\n   * async update\n   */\n  function addMutationObserver() {\n    popperMutationObserver = new MutationObserver(() => {\n      tip.popperInstance.update()\n    })\n    popperMutationObserver.observe(popper, {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    })\n  }\n\n  /**\n   * Positions the virtual reference near the mouse cursor\n   */\n  function positionVirtualReferenceNearCursor(event) {\n    const { clientX, clientY } = (lastMouseMoveEvent = event)\n\n    if (!tip.popperInstance) {\n      return\n    }\n\n    // Ensure virtual reference is padded by 5px to prevent tooltip from\n    // overflowing. Maybe Popper.js issue?\n    const placement = getPopperPlacement(tip.popper)\n    const padding = tip.popperChildren.arrow ? 20 : 5\n    const isVerticalPlacement = includes(['top', 'bottom'], placement)\n    const isHorizontalPlacement = includes(['left', 'right'], placement)\n\n    // Top / left boundary\n    let x = isVerticalPlacement ? Math.max(padding, clientX) : clientX\n    let y = isHorizontalPlacement ? Math.max(padding, clientY) : clientY\n\n    // Bottom / right boundary\n    if (isVerticalPlacement && x > padding) {\n      x = Math.min(clientX, window.innerWidth - padding)\n    }\n    if (isHorizontalPlacement && y > padding) {\n      y = Math.min(clientY, window.innerHeight - padding)\n    }\n\n    const rect = tip.reference.getBoundingClientRect()\n    const { followCursor } = tip.props\n    const isHorizontal = followCursor === 'horizontal'\n    const isVertical = followCursor === 'vertical'\n\n    tip.popperInstance.reference = {\n      getBoundingClientRect: () => ({\n        width: 0,\n        height: 0,\n        top: isHorizontal ? rect.top : y,\n        bottom: isHorizontal ? rect.bottom : y,\n        left: isVertical ? rect.left : x,\n        right: isVertical ? rect.right : x,\n      }),\n      clientWidth: 0,\n      clientHeight: 0,\n    }\n\n    tip.popperInstance.scheduleUpdate()\n\n    if (followCursor === 'initial' && tip.state.isVisible) {\n      removeFollowCursorListener()\n    }\n  }\n\n  /**\n   * Creates the tippy instance for a delegate when it's been triggered\n   */\n  function createDelegateChildTippy(event) {\n    const targetEl = closest(event.target, tip.props.target)\n    if (targetEl && !targetEl._tippy) {\n      createTippy(targetEl, {\n        ...tip.props,\n        target: '',\n        showOnInit: true,\n      })\n      prepareShow(event)\n    }\n  }\n\n  /**\n   * Setup before show() is invoked (delays, etc.)\n   */\n  function prepareShow(event) {\n    clearDelayTimeouts()\n\n    if (tip.state.isVisible) {\n      return\n    }\n\n    // Is a delegate, create an instance for the child target\n    if (tip.props.target) {\n      return createDelegateChildTippy(event)\n    }\n\n    isPreparingToShow = true\n\n    if (tip.props.wait) {\n      return tip.props.wait(tip, event)\n    }\n\n    // If the tooltip has a delay, we need to be listening to the mousemove as\n    // soon as the trigger event is fired, so that it's in the correct position\n    // upon mount.\n    // Edge case: if the tooltip is still mounted, but then prepareShow() is\n    // called, it causes a jump.\n    if (hasFollowCursorBehavior() && !tip.state.isMounted) {\n      document.addEventListener('mousemove', positionVirtualReferenceNearCursor)\n    }\n\n    const delay = getValue(tip.props.delay, 0, Defaults.delay)\n\n    if (delay) {\n      showTimeoutId = setTimeout(() => {\n        show()\n      }, delay)\n    } else {\n      show()\n    }\n  }\n\n  /**\n   * Setup before hide() is invoked (delays, etc.)\n   */\n  function prepareHide() {\n    clearDelayTimeouts()\n\n    if (!tip.state.isVisible) {\n      return removeFollowCursorListener()\n    }\n\n    isPreparingToShow = false\n\n    const delay = getValue(tip.props.delay, 1, Defaults.delay)\n\n    if (delay) {\n      hideTimeoutId = setTimeout(() => {\n        if (tip.state.isVisible) {\n          hide()\n        }\n      }, delay)\n    } else {\n      hide()\n    }\n  }\n\n  /**\n   * Removes the follow cursor listener\n   */\n  function removeFollowCursorListener() {\n    document.removeEventListener(\n      'mousemove',\n      positionVirtualReferenceNearCursor,\n    )\n    lastMouseMoveEvent = null\n  }\n\n  /**\n   * Cleans up old listeners\n   */\n  function cleanupOldMouseListeners() {\n    document.body.removeEventListener('mouseleave', prepareHide)\n    document.removeEventListener('mousemove', debouncedOnMouseMove)\n  }\n\n  /**\n   * Event listener invoked upon trigger\n   */\n  function onTrigger(event) {\n    if (!tip.state.isEnabled || isEventListenerStopped(event)) {\n      return\n    }\n\n    if (!tip.state.isVisible) {\n      lastTriggerEvent = event\n    }\n\n    // Toggle show/hide when clicking click-triggered tooltips\n    if (\n      event.type === 'click' &&\n      tip.props.hideOnClick !== false &&\n      tip.state.isVisible\n    ) {\n      prepareHide()\n    } else {\n      prepareShow(event)\n    }\n  }\n\n  /**\n   * Event listener used for interactive tooltips to detect when they should\n   * hide\n   */\n  function onMouseMove(event) {\n    const referenceTheCursorIsOver = closestCallback(\n      event.target,\n      el => el._tippy,\n    )\n\n    const isCursorOverPopper =\n      closest(event.target, Selectors.POPPER) === tip.popper\n    const isCursorOverReference = referenceTheCursorIsOver === tip.reference\n\n    if (isCursorOverPopper || isCursorOverReference) {\n      return\n    }\n\n    if (\n      isCursorOutsideInteractiveBorder(\n        getPopperPlacement(tip.popper),\n        tip.popper.getBoundingClientRect(),\n        event,\n        tip.props,\n      )\n    ) {\n      cleanupOldMouseListeners()\n      prepareHide()\n    }\n  }\n\n  /**\n   * Event listener invoked upon mouseleave\n   */\n  function onMouseLeave(event) {\n    if (isEventListenerStopped(event)) {\n      return\n    }\n\n    if (tip.props.interactive) {\n      document.body.addEventListener('mouseleave', prepareHide)\n      document.addEventListener('mousemove', debouncedOnMouseMove)\n      return\n    }\n\n    prepareHide()\n  }\n\n  /**\n   * Event listener invoked upon blur\n   */\n  function onBlur(event) {\n    if (event.target !== tip.reference) {\n      return\n    }\n\n    if (tip.props.interactive) {\n      if (!event.relatedTarget) {\n        return\n      }\n      if (closest(event.relatedTarget, Selectors.POPPER)) {\n        return\n      }\n    }\n\n    prepareHide()\n  }\n\n  /**\n   * Event listener invoked when a child target is triggered\n   */\n  function onDelegateShow(event) {\n    if (closest(event.target, tip.props.target)) {\n      prepareShow(event)\n    }\n  }\n\n  /**\n   * Event listener invoked when a child target should hide\n   */\n  function onDelegateHide(event) {\n    if (closest(event.target, tip.props.target)) {\n      prepareHide()\n    }\n  }\n\n  /**\n   * Determines if an event listener should stop further execution due to the\n   * `touchHold` option\n   */\n  function isEventListenerStopped(event) {\n    const isTouchEvent = includes(event.type, 'touch')\n    const caseA =\n      supportsTouch && isUsingTouch && tip.props.touchHold && !isTouchEvent\n    const caseB = isUsingTouch && !tip.props.touchHold && isTouchEvent\n    return caseA || caseB\n  }\n\n  /**\n   * Creates the popper instance for the tip\n   */\n  function createPopperInstance() {\n    const { popperOptions } = tip.props\n    const { tooltip, arrow } = tip.popperChildren\n\n    return new Popper(tip.reference, tip.popper, {\n      placement: tip.props.placement,\n      ...popperOptions,\n      modifiers: {\n        ...(popperOptions ? popperOptions.modifiers : {}),\n        preventOverflow: {\n          boundariesElement: tip.props.boundary,\n          ...getModifier(popperOptions, 'preventOverflow'),\n        },\n        arrow: {\n          element: arrow,\n          enabled: !!arrow,\n          ...getModifier(popperOptions, 'arrow'),\n        },\n        flip: {\n          enabled: tip.props.flip,\n          padding: tip.props.distance + 5 /* 5px from viewport boundary */,\n          behavior: tip.props.flipBehavior,\n          ...getModifier(popperOptions, 'flip'),\n        },\n        offset: {\n          offset: tip.props.offset,\n          ...getModifier(popperOptions, 'offset'),\n        },\n      },\n      onCreate() {\n        tooltip.style[getPopperPlacement(tip.popper)] = getOffsetDistanceInPx(\n          tip.props.distance,\n          Defaults.distance,\n        )\n\n        if (arrow && tip.props.arrowTransform) {\n          computeArrowTransform(arrow, tip.props.arrowTransform)\n        }\n      },\n      onUpdate() {\n        const styles = tooltip.style\n        styles.top = ''\n        styles.bottom = ''\n        styles.left = ''\n        styles.right = ''\n        styles[getPopperPlacement(tip.popper)] = getOffsetDistanceInPx(\n          tip.props.distance,\n          Defaults.distance,\n        )\n\n        if (arrow && tip.props.arrowTransform) {\n          computeArrowTransform(arrow, tip.props.arrowTransform)\n        }\n      },\n    })\n  }\n\n  /**\n   * Mounts the tooltip to the DOM, callback to show tooltip is run **after**\n   * popper's position has updated\n   */\n  function mount(callback) {\n    if (!tip.popperInstance) {\n      tip.popperInstance = createPopperInstance()\n      addMutationObserver()\n      if (!tip.props.livePlacement || hasFollowCursorBehavior()) {\n        tip.popperInstance.disableEventListeners()\n      }\n    } else {\n      if (!hasFollowCursorBehavior()) {\n        tip.popperInstance.scheduleUpdate()\n        if (tip.props.livePlacement) {\n          tip.popperInstance.enableEventListeners()\n        }\n      }\n    }\n\n    // If the instance previously had followCursor behavior, it will be\n    // positioned incorrectly if triggered by `focus` afterwards.\n    // Update the reference back to the real DOM element\n    tip.popperInstance.reference = tip.reference\n    const { arrow } = tip.popperChildren\n\n    if (hasFollowCursorBehavior()) {\n      if (arrow) {\n        arrow.style.margin = '0'\n      }\n      const delay = getValue(tip.props.delay, 0, Defaults.delay)\n      if (lastTriggerEvent.type) {\n        positionVirtualReferenceNearCursor(\n          delay && lastMouseMoveEvent ? lastMouseMoveEvent : lastTriggerEvent,\n        )\n      }\n    } else if (arrow) {\n      arrow.style.margin = ''\n    }\n\n    afterPopperPositionUpdates(tip.popperInstance, callback)\n\n    if (!tip.props.appendTo.contains(tip.popper)) {\n      tip.props.appendTo.appendChild(tip.popper)\n      tip.props.onMount(tip)\n      tip.state.isMounted = true\n    }\n  }\n\n  /**\n   * Determines if the instance is in `followCursor` mode\n   */\n  function hasFollowCursorBehavior() {\n    return (\n      tip.props.followCursor &&\n      !isUsingTouch &&\n      lastTriggerEvent.type !== 'focus'\n    )\n  }\n\n  /**\n   * Updates the tooltip's position on each animation frame + timeout\n   */\n  function makeSticky() {\n    applyTransitionDuration([tip.popper], isIE ? 0 : tip.props.updateDuration)\n\n    const updatePosition = () => {\n      if (tip.popperInstance) {\n        tip.popperInstance.scheduleUpdate()\n      }\n\n      if (tip.state.isMounted) {\n        requestAnimationFrame(updatePosition)\n      } else {\n        applyTransitionDuration([tip.popper], 0)\n      }\n    }\n\n    updatePosition()\n  }\n\n  /**\n   * Invokes a callback once the tooltip has fully transitioned out\n   */\n  function onTransitionedOut(duration, callback) {\n    onTransitionEnd(duration, () => {\n      if (!tip.state.isVisible && tip.props.appendTo.contains(tip.popper)) {\n        callback()\n      }\n    })\n  }\n\n  /**\n   * Invokes a callback once the tooltip has fully transitioned in\n   */\n  function onTransitionedIn(duration, callback) {\n    onTransitionEnd(duration, callback)\n  }\n\n  /**\n   * Invokes a callback once the tooltip's CSS transition ends\n   */\n  function onTransitionEnd(duration, callback) {\n    // Make callback synchronous if duration is 0\n    if (duration === 0) {\n      return callback()\n    }\n\n    const { tooltip } = tip.popperChildren\n\n    const listener = e => {\n      if (e.target === tooltip) {\n        toggleTransitionEndListener(tooltip, 'remove', listener)\n        callback()\n      }\n    }\n\n    toggleTransitionEndListener(tooltip, 'remove', transitionEndListener)\n    toggleTransitionEndListener(tooltip, 'add', listener)\n\n    transitionEndListener = listener\n  }\n\n  /**\n   * Adds an event listener to the reference and stores it in `listeners`\n   */\n  function on(eventType, handler, options = false) {\n    tip.reference.addEventListener(eventType, handler, options)\n    listeners.push({ eventType, handler, options })\n  }\n\n  /**\n   * Adds event listeners to the reference based on the `trigger` prop\n   */\n  function addTriggersToReference() {\n    if (tip.props.touchHold && !tip.props.target) {\n      on('touchstart', onTrigger, PASSIVE)\n      on('touchend', onMouseLeave, PASSIVE)\n    }\n\n    tip.props.trigger\n      .trim()\n      .split(' ')\n      .forEach(eventType => {\n        if (eventType === 'manual') {\n          return\n        }\n\n        if (!tip.props.target) {\n          on(eventType, onTrigger)\n          switch (eventType) {\n            case 'mouseenter':\n              on('mouseleave', onMouseLeave)\n              break\n            case 'focus':\n              on(isIE ? 'focusout' : 'blur', onBlur)\n              break\n          }\n        } else {\n          switch (eventType) {\n            case 'mouseenter':\n              on('mouseover', onDelegateShow)\n              on('mouseout', onDelegateHide)\n              break\n            case 'focus':\n              on('focusin', onDelegateShow)\n              on('focusout', onDelegateHide)\n              break\n            case 'click':\n              on(eventType, onDelegateShow)\n              break\n          }\n        }\n      })\n  }\n\n  /**\n   * Removes event listeners from the reference\n   */\n  function removeTriggersFromReference() {\n    listeners.forEach(({ eventType, handler, options }) => {\n      tip.reference.removeEventListener(eventType, handler, options)\n    })\n    listeners = []\n  }\n\n  /* ======================= 🔑 Public methods 🔑 ======================= */\n  /**\n   * Enables the instance to allow it to show or hide\n   */\n  function enable() {\n    tip.state.isEnabled = true\n  }\n\n  /**\n   * Disables the instance to disallow it to show or hide\n   */\n  function disable() {\n    tip.state.isEnabled = false\n  }\n\n  /**\n   * Clears pending timeouts related to the `delay` prop if any\n   */\n  function clearDelayTimeouts() {\n    clearTimeout(showTimeoutId)\n    clearTimeout(hideTimeoutId)\n  }\n\n  /**\n   * Sets new props for the instance and redraws the tooltip\n   */\n  function set(options = {}) {\n    validateOptions(options, Defaults)\n\n    const prevProps = tip.props\n    const nextProps = evaluateProps(tip.reference, {\n      ...tip.props,\n      ...options,\n      performance: true,\n    })\n    nextProps.performance = hasOwnProperty(options, 'performance')\n      ? options.performance\n      : prevProps.performance\n    tip.props = nextProps\n\n    if (\n      hasOwnProperty(options, 'trigger') ||\n      hasOwnProperty(options, 'touchHold')\n    ) {\n      removeTriggersFromReference()\n      addTriggersToReference()\n    }\n\n    if (hasOwnProperty(options, 'interactiveDebounce')) {\n      cleanupOldMouseListeners()\n      debouncedOnMouseMove = debounce(onMouseMove, options.interactiveDebounce)\n    }\n\n    updatePopperElement(tip.popper, prevProps, nextProps)\n    tip.popperChildren = getChildren(tip.popper)\n\n    if (\n      tip.popperInstance &&\n      POPPER_INSTANCE_RELATED_PROPS.some(prop => hasOwnProperty(options, prop))\n    ) {\n      tip.popperInstance.destroy()\n      tip.popperInstance = createPopperInstance()\n      if (!tip.state.isVisible) {\n        tip.popperInstance.disableEventListeners()\n      }\n      if (tip.props.followCursor && lastMouseMoveEvent) {\n        positionVirtualReferenceNearCursor(lastMouseMoveEvent)\n      }\n    }\n  }\n\n  /**\n   * Shortcut for .set({ content: newContent })\n   */\n  function setContent(content) {\n    set({ content })\n  }\n\n  /**\n   * Shows the tooltip\n   */\n  function show(\n    duration = getValue(tip.props.duration, 0, Defaults.duration[0]),\n  ) {\n    if (\n      tip.state.isDestroyed ||\n      !tip.state.isEnabled ||\n      (isUsingTouch && !tip.props.touch)\n    ) {\n      return\n    }\n\n    // Destroy tooltip if the reference element is no longer on the DOM\n    if (\n      !tip.reference.isVirtual &&\n      !document.documentElement.contains(tip.reference)\n    ) {\n      return destroy()\n    }\n\n    // Do not show tooltip if the reference element has a `disabled` attribute\n    if (tip.reference.hasAttribute('disabled')) {\n      return\n    }\n\n    // If the reference was just programmatically focused for accessibility\n    // reasons\n    if (referenceJustProgrammaticallyFocused) {\n      referenceJustProgrammaticallyFocused = false\n      return\n    }\n\n    if (tip.props.onShow(tip) === false) {\n      return\n    }\n\n    tip.popper.style.visibility = 'visible'\n    tip.state.isVisible = true\n\n    // Prevent a transition if the popper is at the opposite placement\n    applyTransitionDuration(\n      [tip.popper, tip.popperChildren.tooltip, tip.popperChildren.backdrop],\n      0,\n    )\n\n    mount(() => {\n      if (!tip.state.isVisible) {\n        return\n      }\n\n      // Arrow will sometimes not be positioned correctly. Force another update\n      if (!hasFollowCursorBehavior()) {\n        tip.popperInstance.update()\n      }\n\n      applyTransitionDuration(\n        [\n          tip.popperChildren.tooltip,\n          tip.popperChildren.backdrop,\n          tip.popperChildren.content,\n        ],\n        duration,\n      )\n      if (tip.popperChildren.backdrop) {\n        tip.popperChildren.content.style.transitionDelay =\n          Math.round(duration / 6) + 'ms'\n      }\n\n      if (tip.props.interactive) {\n        tip.reference.classList.add('tippy-active')\n      }\n\n      if (tip.props.sticky) {\n        makeSticky()\n      }\n\n      setVisibilityState(\n        [\n          tip.popperChildren.tooltip,\n          tip.popperChildren.backdrop,\n          tip.popperChildren.content,\n        ],\n        'visible',\n      )\n\n      onTransitionedIn(duration, () => {\n        if (tip.props.updateDuration === 0) {\n          tip.popperChildren.tooltip.classList.add('tippy-notransition')\n        }\n\n        if (\n          tip.props.autoFocus &&\n          tip.props.interactive &&\n          includes(['focus', 'click'], lastTriggerEvent.type)\n        ) {\n          focus(tip.popper)\n        }\n\n        if (tip.props.aria) {\n          tip.reference.setAttribute(`aria-${tip.props.aria}`, tip.popper.id)\n        }\n\n        tip.props.onShown(tip)\n        tip.state.isShown = true\n      })\n    })\n  }\n\n  /**\n   * Hides the tooltip\n   */\n  function hide(\n    duration = getValue(tip.props.duration, 1, Defaults.duration[1]),\n  ) {\n    if (tip.state.isDestroyed || !tip.state.isEnabled) {\n      return\n    }\n\n    if (tip.props.onHide(tip) === false) {\n      return\n    }\n\n    if (tip.props.updateDuration === 0) {\n      tip.popperChildren.tooltip.classList.remove('tippy-notransition')\n    }\n\n    if (tip.props.interactive) {\n      tip.reference.classList.remove('tippy-active')\n    }\n\n    tip.popper.style.visibility = 'hidden'\n    tip.state.isVisible = false\n    tip.state.isShown = false\n\n    applyTransitionDuration(\n      [\n        tip.popperChildren.tooltip,\n        tip.popperChildren.backdrop,\n        tip.popperChildren.content,\n      ],\n      duration,\n    )\n\n    setVisibilityState(\n      [\n        tip.popperChildren.tooltip,\n        tip.popperChildren.backdrop,\n        tip.popperChildren.content,\n      ],\n      'hidden',\n    )\n\n    if (\n      tip.props.autoFocus &&\n      tip.props.interactive &&\n      !referenceJustProgrammaticallyFocused &&\n      includes(['focus', 'click'], lastTriggerEvent.type)\n    ) {\n      if (lastTriggerEvent.type === 'focus') {\n        referenceJustProgrammaticallyFocused = true\n      }\n      focus(tip.reference)\n    }\n\n    onTransitionedOut(duration, () => {\n      if (!isPreparingToShow) {\n        removeFollowCursorListener()\n      }\n\n      if (tip.props.aria) {\n        tip.reference.removeAttribute(`aria-${tip.props.aria}`)\n      }\n\n      tip.popperInstance.disableEventListeners()\n\n      tip.props.appendTo.removeChild(tip.popper)\n      tip.state.isMounted = false\n\n      tip.props.onHidden(tip)\n    })\n  }\n\n  /**\n   * Destroys the tooltip\n   */\n  function destroy(destroyTargetInstances) {\n    if (tip.state.isDestroyed) {\n      return\n    }\n\n    // If the popper is currently mounted to the DOM, we want to ensure it gets\n    // hidden and unmounted instantly upon destruction\n    if (tip.state.isMounted) {\n      hide(0)\n    }\n\n    removeTriggersFromReference()\n\n    tip.reference.removeEventListener('click', onReferenceClick)\n\n    delete tip.reference._tippy\n\n    if (tip.props.target && destroyTargetInstances) {\n      arrayFrom(tip.reference.querySelectorAll(tip.props.target)).forEach(\n        child => child._tippy && child._tippy.destroy(),\n      )\n    }\n\n    if (tip.popperInstance) {\n      tip.popperInstance.destroy()\n    }\n\n    if (popperMutationObserver) {\n      popperMutationObserver.disconnect()\n    }\n\n    tip.state.isDestroyed = true\n  }\n}\n","import { version } from '../../package.json'\nimport { isBrowser } from './browser'\nimport Defaults from './defaults'\nimport createTippy from './createTippy'\nimport bindGlobalEventListeners from './bindGlobalEventListeners'\nimport { polyfillElementPrototypeProperties } from './reference'\nimport { validateOptions } from './props'\nimport { arrayFrom } from './ponyfills'\nimport { hideAllPoppers } from './popper'\nimport { isPlainObject, getArrayOfElements } from './utils'\n\nlet globalEventListenersBound = false\n\n/**\n * Exported module\n * @param {String|Element|Element[]|NodeList|Object} targets\n * @param {Object} options\n * @param {Boolean} one\n * @return {Object}\n */\nfunction tippy(targets, options, one) {\n  validateOptions(options, Defaults)\n\n  if (!globalEventListenersBound) {\n    bindGlobalEventListeners()\n    globalEventListenersBound = true\n  }\n\n  const props = { ...Defaults, ...options }\n\n  /**\n   * If they are specifying a virtual positioning reference, we need to polyfill\n   * some native DOM props\n   */\n  if (isPlainObject(targets)) {\n    polyfillElementPrototypeProperties(targets)\n  }\n\n  const references = getArrayOfElements(targets)\n  const firstReference = references[0]\n\n  const instances = (one && firstReference\n    ? [firstReference]\n    : references\n  ).reduce((acc, reference) => {\n    const tip = reference && createTippy(reference, props)\n    if (tip) {\n      acc.push(tip)\n    }\n    return acc\n  }, [])\n\n  const collection = {\n    targets,\n    props,\n    instances,\n    destroyAll() {\n      collection.instances.forEach(instance => {\n        instance.destroy()\n      })\n      collection.instances = []\n    },\n  }\n\n  return collection\n}\n\n/**\n * Static props\n */\ntippy.version = version\ntippy.defaults = Defaults\n\n/**\n * Static methods\n */\ntippy.one = (targets, options) => tippy(targets, options, true).instances[0]\ntippy.setDefaults = partialDefaults => {\n  Object.keys(partialDefaults).forEach(key => {\n    Defaults[key] = partialDefaults[key]\n  })\n}\ntippy.disableAnimations = () => {\n  tippy.setDefaults({\n    duration: 0,\n    updateDuration: 0,\n    animateFill: false,\n  })\n}\ntippy.hideAllPoppers = hideAllPoppers\n// noop: deprecated static method as capture phase is now default\ntippy.useCapture = () => {}\n\n/**\n * Auto-init tooltips for elements with a `data-tippy=\"...\"` attribute\n */\nexport const autoInit = () => {\n  arrayFrom(document.querySelectorAll('[data-tippy]')).forEach(el => {\n    const content = el.getAttribute('data-tippy')\n    if (content) {\n      tippy(el, { content })\n    }\n  })\n}\nif (isBrowser) {\n  setTimeout(autoInit)\n}\n\nexport default tippy\n"]},"metadata":{},"sourceType":"module"}
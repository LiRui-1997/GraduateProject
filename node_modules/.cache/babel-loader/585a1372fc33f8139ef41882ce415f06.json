{"ast":null,"code":"import history, { URLParam, HistoryManager } from '../../app/History';\nimport { config } from '../../config';\nimport { DEFAULT_LABEL_OPERATION, ID_LABEL_OPERATION } from '../../types/Filters';\nimport * as AlertUtils from '../../utils/AlertUtils';\nexport var perPageOptions = [5, 10, 15];\nvar defaultDuration = 600;\nvar defaultRefreshInterval = config.toolbar.defaultRefreshInterval;\nexport var handleError = function handleError(error) {\n  AlertUtils.add(error);\n};\nexport var getFiltersFromURL = function getFiltersFromURL(filterTypes) {\n  var urlParams = new URLSearchParams(history.location.search);\n  var activeFilters = [];\n  filterTypes.forEach(function (filter) {\n    urlParams.getAll(filter.id).forEach(function (value) {\n      activeFilters.push({\n        id: filter.id,\n        title: filter.title,\n        value: value\n      });\n    });\n  });\n  return {\n    filters: activeFilters,\n    op: urlParams.get(ID_LABEL_OPERATION) || DEFAULT_LABEL_OPERATION\n  };\n};\nexport var setFiltersToURL = function setFiltersToURL(filterTypes, filters) {\n  var urlParams = new URLSearchParams(history.location.search);\n  filterTypes.forEach(function (type) {\n    urlParams.delete(type.id);\n  }); // Remove manually the special Filter opLabel\n\n  urlParams.delete('opLabel');\n  var cleanFilters = [];\n  filters.filters.forEach(function (activeFilter) {\n    var filterType = filterTypes.find(function (filter) {\n      return filter.id === activeFilter.id;\n    });\n\n    if (!filterType) {\n      return;\n    }\n\n    cleanFilters.push(activeFilter);\n    urlParams.append(filterType.id, activeFilter.value);\n  });\n  urlParams.append(ID_LABEL_OPERATION, filters.op); // Resetting pagination when filters change\n\n  history.push(history.location.pathname + '?' + urlParams.toString());\n  return {\n    filters: cleanFilters,\n    op: filters.op || DEFAULT_LABEL_OPERATION\n  };\n};\nexport var filtersMatchURL = function filtersMatchURL(filterTypes, filters) {\n  // This can probably be improved and/or simplified?\n  var fromFilters = new Map();\n  filters.filters.forEach(function (activeFilter) {\n    var existingValue = fromFilters.get(activeFilter.id) || [];\n    fromFilters.set(activeFilter.id, existingValue.concat(activeFilter.value));\n  });\n  var fromURL = new Map();\n  var urlParams = new URLSearchParams(history.location.search);\n  filterTypes.forEach(function (filter) {\n    var values = urlParams.getAll(filter.id);\n\n    if (values.length > 0) {\n      var existing = fromURL.get(filter.id) || [];\n      fromURL.set(filter.id, existing.concat(values));\n    }\n  });\n\n  if (fromFilters.size !== fromURL.size) {\n    return false;\n  }\n\n  var equalFilters = true;\n  fromFilters.forEach(function (filterValues, filterName) {\n    var aux = fromURL.get(filterName) || [];\n    equalFilters = equalFilters && filterValues.every(function (value) {\n      return aux.includes(value);\n    }) && filterValues.length === aux.length;\n  });\n  return equalFilters;\n};\nexport var isCurrentSortAscending = function isCurrentSortAscending() {\n  return (HistoryManager.getParam(URLParam.DIRECTION) || 'asc') === 'asc';\n};\nexport var currentDuration = function currentDuration() {\n  return HistoryManager.getDuration() || defaultDuration;\n};\nexport var currentRefreshInterval = function currentRefreshInterval() {\n  var refreshInterval = HistoryManager.getNumericParam(URLParam.REFRESH_INTERVAL);\n\n  if (refreshInterval === undefined) {\n    return defaultRefreshInterval;\n  }\n\n  return refreshInterval;\n};\nexport var currentSortField = function currentSortField(sortFields) {\n  var queriedSortedField = HistoryManager.getParam(URLParam.SORT) || sortFields[0].param;\n  return sortFields.find(function (sortField) {\n    return sortField.param === queriedSortedField;\n  }) || sortFields[0];\n};\nexport var compareNullable = function compareNullable(a, b, safeComp) {\n  if (!a) {\n    return !b ? 0 : 1;\n  }\n\n  if (!b) {\n    return -1;\n  }\n\n  return safeComp(a, b);\n};\nexport var runFilters = function runFilters(items, filters, active) {\n  return filters.reduce(function (i, f) {\n    return runOneFilter(i, f, active);\n  }, items);\n};\n\nvar runOneFilter = function runOneFilter(items, filter, active) {\n  var relatedActive = {\n    filters: active.filters.filter(function (af) {\n      return af.id === filter.id;\n    }),\n    op: active.op\n  };\n\n  if (relatedActive.filters.length) {\n    return items.filter(function (item) {\n      return filter.run(item, relatedActive);\n    });\n  }\n\n  return items;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/components/FilterList/FilterHelper.ts"],"names":["history","URLParam","HistoryManager","config","DEFAULT_LABEL_OPERATION","ID_LABEL_OPERATION","AlertUtils","perPageOptions","defaultDuration","defaultRefreshInterval","toolbar","handleError","error","add","getFiltersFromURL","filterTypes","urlParams","URLSearchParams","location","search","activeFilters","forEach","filter","getAll","id","value","push","title","filters","op","get","setFiltersToURL","type","delete","cleanFilters","activeFilter","filterType","find","append","pathname","toString","filtersMatchURL","fromFilters","Map","existingValue","set","concat","fromURL","values","length","existing","size","equalFilters","filterValues","filterName","aux","every","includes","isCurrentSortAscending","getParam","DIRECTION","currentDuration","getDuration","currentRefreshInterval","refreshInterval","getNumericParam","REFRESH_INTERVAL","undefined","currentSortField","sortFields","queriedSortedField","SORT","param","sortField","compareNullable","a","b","safeComp","runFilters","items","active","reduce","i","f","runOneFilter","relatedActive","af","item","run"],"mappings":"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","sourcesContent":["import history, { URLParam, HistoryManager } from '../../app/History';\nimport { config } from '../../config';\nimport {\n  ActiveFilter,\n  ActiveFiltersInfo,\n  DEFAULT_LABEL_OPERATION,\n  FilterType,\n  ID_LABEL_OPERATION,\n  LabelOperation,\n  RunnableFilter\n} from '../../types/Filters';\nimport { SortField } from '../../types/SortFilters';\nimport * as AlertUtils from '../../utils/AlertUtils';\n\nexport const perPageOptions: number[] = [5, 10, 15];\nconst defaultDuration = 600;\nconst defaultRefreshInterval = config.toolbar.defaultRefreshInterval;\n\nexport const handleError = (error: string) => {\n  AlertUtils.add(error);\n};\n\nexport const getFiltersFromURL = (filterTypes: FilterType[]): ActiveFiltersInfo => {\n  const urlParams = new URLSearchParams(history.location.search);\n  const activeFilters: ActiveFilter[] = [];\n  filterTypes.forEach(filter => {\n    urlParams.getAll(filter.id).forEach(value => {\n      activeFilters.push({\n        id: filter.id,\n        title: filter.title,\n        value: value\n      });\n    });\n  });\n\n  return {\n    filters: activeFilters,\n    op: (urlParams.get(ID_LABEL_OPERATION) as LabelOperation) || DEFAULT_LABEL_OPERATION\n  };\n};\n\nexport const setFiltersToURL = (filterTypes: FilterType[], filters: ActiveFiltersInfo): ActiveFiltersInfo => {\n  const urlParams = new URLSearchParams(history.location.search);\n  filterTypes.forEach(type => {\n    urlParams.delete(type.id);\n  });\n  // Remove manually the special Filter opLabel\n  urlParams.delete('opLabel');\n  const cleanFilters: ActiveFilter[] = [];\n\n  filters.filters.forEach(activeFilter => {\n    const filterType = filterTypes.find(filter => filter.id === activeFilter.id);\n    if (!filterType) {\n      return;\n    }\n    cleanFilters.push(activeFilter);\n    urlParams.append(filterType.id, activeFilter.value);\n  });\n  urlParams.append(ID_LABEL_OPERATION, filters.op);\n  // Resetting pagination when filters change\n  history.push(history.location.pathname + '?' + urlParams.toString());\n  return { filters: cleanFilters, op: filters.op || DEFAULT_LABEL_OPERATION };\n};\n\nexport const filtersMatchURL = (filterTypes: FilterType[], filters: ActiveFiltersInfo): boolean => {\n  // This can probably be improved and/or simplified?\n  const fromFilters: Map<string, string[]> = new Map<string, string[]>();\n  filters.filters.forEach(activeFilter => {\n    const existingValue = fromFilters.get(activeFilter.id) || [];\n    fromFilters.set(activeFilter.id, existingValue.concat(activeFilter.value));\n  });\n\n  const fromURL: Map<string, string[]> = new Map<string, string[]>();\n  const urlParams = new URLSearchParams(history.location.search);\n  filterTypes.forEach(filter => {\n    const values = urlParams.getAll(filter.id);\n    if (values.length > 0) {\n      const existing = fromURL.get(filter.id) || [];\n      fromURL.set(filter.id, existing.concat(values));\n    }\n  });\n\n  if (fromFilters.size !== fromURL.size) {\n    return false;\n  }\n  let equalFilters = true;\n  fromFilters.forEach((filterValues, filterName) => {\n    const aux = fromURL.get(filterName) || [];\n    equalFilters =\n      equalFilters && filterValues.every(value => aux.includes(value)) && filterValues.length === aux.length;\n  });\n\n  return equalFilters;\n};\n\nexport const isCurrentSortAscending = (): boolean => {\n  return (HistoryManager.getParam(URLParam.DIRECTION) || 'asc') === 'asc';\n};\n\nexport const currentDuration = (): number => {\n  return HistoryManager.getDuration() || defaultDuration;\n};\n\nexport const currentRefreshInterval = (): number => {\n  const refreshInterval = HistoryManager.getNumericParam(URLParam.REFRESH_INTERVAL);\n  if (refreshInterval === undefined) {\n    return defaultRefreshInterval;\n  }\n  return refreshInterval;\n};\n\nexport const currentSortField = <T>(sortFields: SortField<T>[]): SortField<T> => {\n  const queriedSortedField = HistoryManager.getParam(URLParam.SORT) || sortFields[0].param;\n  return (\n    sortFields.find(sortField => {\n      return sortField.param === queriedSortedField;\n    }) || sortFields[0]\n  );\n};\n\nexport const compareNullable = <T>(a: T | undefined, b: T | undefined, safeComp: (a2: T, b2: T) => number): number => {\n  if (!a) {\n    return !b ? 0 : 1;\n  }\n  if (!b) {\n    return -1;\n  }\n  return safeComp(a, b);\n};\n\nexport const runFilters = <T>(items: T[], filters: RunnableFilter<T>[], active: ActiveFiltersInfo) => {\n  return filters.reduce((i, f) => runOneFilter(i, f, active), items);\n};\n\nconst runOneFilter = <T>(items: T[], filter: RunnableFilter<T>, active: ActiveFiltersInfo) => {\n  const relatedActive = { filters: active.filters.filter(af => af.id === filter.id), op: active.op };\n  if (relatedActive.filters.length) {\n    return items.filter(item => filter.run(item, relatedActive));\n  }\n  return items;\n};\n"]},"metadata":{},"sourceType":"module"}
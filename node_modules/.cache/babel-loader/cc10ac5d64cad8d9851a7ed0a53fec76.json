{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/Metrics/IstioMetrics.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport * as API from 'services/Api';\nimport { evalTimeRange, isEqualTimeRange } from 'types/Common';\nimport * as AlertUtils from 'utils/AlertUtils';\nimport { RenderComponentScroll } from 'components/Nav/Page';\nimport * as MetricsHelper from './Helper';\nimport { MetricsSettingsDropdown } from '../MetricsOptions/MetricsSettingsDropdown';\nimport MetricsReporter from '../MetricsOptions/MetricsReporter';\nimport history, { URLParam } from 'app/History';\nimport { MetricsObjectTypes } from 'types/Metrics';\nimport { MessageType } from 'types/MessageCenter';\nimport { GrafanaLinks } from './GrafanaLinks';\nimport { SpanOverlay } from './SpanOverlay';\nimport { Dashboard } from 'components/Charts/Dashboard';\nimport { timeRangeSelector } from 'store/Selectors';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { maximizeButtonStyle } from '../Charts/KChart';\nvar displayFlex = style({\n  display: 'flex'\n});\nvar fullHeightStyle = style({\n  height: '100%'\n});\n\nvar IstioMetrics = /*#__PURE__*/function (_React$Component) {\n  _inherits(IstioMetrics, _React$Component);\n\n  var _super = _createSuper(IstioMetrics);\n\n  function IstioMetrics(props) {\n    var _this;\n\n    _classCallCheck(this, IstioMetrics);\n\n    _this = _super.call(this, props);\n    _this.toolbarRef = void 0;\n    _this.options = void 0;\n    _this.spanOverlay = void 0;\n\n    _this.refresh = function () {\n      _this.fetchMetrics();\n\n      if (_this.props.jaegerIntegration) {\n        _this.spanOverlay.fetch({\n          namespace: _this.props.namespace,\n          target: _this.props.object,\n          targetKind: _this.props.objectType,\n          range: _this.props.timeRange\n        });\n      }\n    };\n\n    _this.fetchMetrics = function () {\n      // Time range needs to be reevaluated everytime fetching\n      MetricsHelper.timeRangeToOptions(_this.props.timeRange, _this.options);\n      var promise;\n\n      switch (_this.props.objectType) {\n        case MetricsObjectTypes.WORKLOAD:\n          promise = API.getWorkloadDashboard(_this.props.namespace, _this.props.object, _this.options);\n          break;\n\n        case MetricsObjectTypes.APP:\n          promise = API.getAppDashboard(_this.props.namespace, _this.props.object, _this.options);\n          break;\n\n        case MetricsObjectTypes.SERVICE:\n        default:\n          promise = API.getServiceDashboard(_this.props.namespace, _this.props.object, _this.options);\n          break;\n      }\n\n      return promise.then(function (response) {\n        var labelsSettings = MetricsHelper.extractLabelsSettings(response.data, _this.state.labelsSettings);\n\n        _this.setState({\n          dashboard: response.data,\n          labelsSettings: labelsSettings\n        });\n      }).catch(function (error) {\n        AlertUtils.addError('Could not fetch metrics.', error);\n        throw error;\n      });\n    };\n\n    _this.onMetricsSettingsChanged = function (settings) {\n      var defaultLabels = [_this.props.direction === 'inbound' ? 'source_canonical_service' : 'destination_canonical_service'];\n      MetricsHelper.settingsToOptions(settings, _this.options, defaultLabels);\n\n      _this.fetchMetrics();\n    };\n\n    _this.onLabelsFiltersChanged = function (labelsFilters) {\n      _this.setState({\n        labelsSettings: labelsFilters\n      });\n    };\n\n    _this.onReporterChanged = function (reporter) {\n      _this.options.reporter = reporter;\n\n      _this.fetchMetrics();\n    };\n\n    _this.onClickDataPoint = function (_, datum) {\n      if ('start' in datum && 'end' in datum) {\n        // Zoom-in bucket\n        _this.onDomainChange([datum.start, datum.end]);\n      } else if ('traceId' in datum) {\n        var traceId = datum.traceId;\n        var spanId = datum.spanId;\n        var domain = _this.props.objectType === MetricsObjectTypes.APP ? 'applications' : _this.props.objectType === MetricsObjectTypes.SERVICE ? 'services' : 'workloads';\n        history.push(\"/namespaces/\".concat(_this.props.namespace, \"/\").concat(domain, \"/\").concat(_this.props.object, \"?tab=traces&\").concat(URLParam.JAEGER_TRACE_ID, \"=\").concat(traceId, \"&\").concat(URLParam.JAEGER_SPAN_ID, \"=\").concat(spanId));\n      }\n    };\n\n    _this.onSpans = function (checked) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.set(URLParam.SHOW_SPANS, String(checked));\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n\n      _this.setState({\n        showSpans: !_this.state.showSpans\n      });\n    };\n\n    _this.expandHandler = function (expandedChart) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.delete('expand');\n\n      if (expandedChart) {\n        urlParams.set('expand', expandedChart);\n      }\n\n      history.push(history.location.pathname + '?' + urlParams.toString());\n    };\n\n    _this.toolbarRef = React.createRef();\n\n    var _settings = MetricsHelper.retrieveMetricsSettings();\n\n    _this.options = _this.initOptions(_settings); // Initialize active filters from URL\n\n    _this.state = {\n      labelsSettings: _settings.labelsSettings,\n      grafanaLinks: [],\n      tabHeight: 300,\n      showSpans: _settings.showSpans\n    };\n    _this.spanOverlay = new SpanOverlay(function (changed) {\n      return _this.setState({\n        spanOverlay: changed\n      });\n    });\n    return _this;\n  }\n\n  _createClass(IstioMetrics, [{\n    key: \"initOptions\",\n    value: function initOptions(settings) {\n      var options = {\n        reporter: MetricsReporter.initialReporter(this.props.direction),\n        direction: this.props.direction\n      };\n      var defaultLabels = [this.props.direction === 'inbound' ? 'source_canonical_service' : 'destination_canonical_service', this.props.direction === 'inbound' ? 'source_workload_namespace' : 'destination_workload_namespace'];\n      MetricsHelper.settingsToOptions(settings, options, defaultLabels);\n      return options;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchGrafanaInfo();\n      this.refresh();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.direction !== prevProps.direction || this.props.namespace !== prevProps.namespace || this.props.object !== prevProps.object || this.props.objectType !== prevProps.objectType || this.props.lastRefreshAt !== prevProps.lastRefreshAt || !isEqualTimeRange(this.props.timeRange, prevProps.timeRange)) {\n        if (this.props.direction !== prevProps.direction) {\n          var settings = MetricsHelper.retrieveMetricsSettings();\n          this.options = this.initOptions(settings);\n          this.setState({\n            labelsSettings: settings.labelsSettings\n          });\n        }\n\n        this.spanOverlay.reset();\n        this.refresh();\n      }\n    }\n  }, {\n    key: \"fetchGrafanaInfo\",\n    value: function fetchGrafanaInfo() {\n      var _this2 = this;\n\n      if (!IstioMetrics.grafanaInfoPromise) {\n        IstioMetrics.grafanaInfoPromise = API.getGrafanaInfo().then(function (response) {\n          if (response.status === 204) {\n            return undefined;\n          }\n\n          return response.data;\n        });\n      }\n\n      IstioMetrics.grafanaInfoPromise.then(function (grafanaInfo) {\n        if (grafanaInfo) {\n          _this2.setState({\n            grafanaLinks: grafanaInfo.externalLinks\n          });\n        } else {\n          _this2.setState({\n            grafanaLinks: []\n          });\n        }\n      }).catch(function (err) {\n        AlertUtils.addMessage(_objectSpread(_objectSpread({}, AlertUtils.extractAxiosError('Could not fetch Grafana info. Turning off links to Grafana.', err)), {}, {\n          group: 'default',\n          type: MessageType.INFO,\n          showNotification: false\n        }));\n      });\n    }\n  }, {\n    key: \"onDomainChange\",\n    value: function onDomainChange(dates) {\n      if (dates && dates[0] && dates[1]) {\n        var _range = {\n          from: dates[0].getTime(),\n          to: dates[1].getTime()\n        };\n        this.props.setTimeRange(_range);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var urlParams = new URLSearchParams(history.location.search);\n      var expandedChart = urlParams.get('expand') || undefined; // 20px (card margin) + 24px (card padding) + 51px (toolbar) + 15px (toolbar padding) + 24px (card padding) + 20px (card margin)\n\n      var toolbarHeight = this.toolbarRef.current ? this.toolbarRef.current.clientHeight : 51;\n      var toolbarSpace = 20 + 24 + toolbarHeight + 15 + 24 + 20;\n      var dashboardHeight = this.state.tabHeight - toolbarSpace;\n      return /*#__PURE__*/React.createElement(RenderComponentScroll, {\n        onResize: function onResize(height) {\n          return _this3.setState({\n            tabHeight: height\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: fullHeightStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }\n      }, this.renderOptionsBar(), this.state.dashboard && /*#__PURE__*/React.createElement(Dashboard, {\n        dashboard: this.state.dashboard,\n        labelValues: MetricsHelper.convertAsPromLabels(this.state.labelsSettings),\n        maximizedChart: expandedChart,\n        expandHandler: this.expandHandler,\n        onClick: this.onClickDataPoint,\n        labelPrettifier: MetricsHelper.prettyLabelValues,\n        overlay: this.state.spanOverlay,\n        showSpans: this.state.showSpans,\n        dashboardHeight: dashboardHeight,\n        timeWindow: evalTimeRange(this.props.timeRange),\n        brushHandlers: {\n          onDomainChangeEnd: function onDomainChangeEnd(_, props) {\n            return _this3.onDomainChange(props.currentDomain.x);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }, {\n    key: \"renderOptionsBar\",\n    value: function renderOptionsBar() {\n      var _this4 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbarRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Toolbar, {\n        style: {\n          paddingBottom: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MetricsSettingsDropdown, {\n        onChanged: this.onMetricsSettingsChanged,\n        onLabelsFiltersChanged: this.onLabelsFiltersChanged,\n        direction: this.props.direction,\n        labelsSettings: this.state.labelsSettings,\n        hasHistograms: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MetricsReporter, {\n        onChanged: this.onReporterChanged,\n        direction: this.props.direction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarItem, {\n        className: displayFlex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: maximizeButtonStyle,\n        className: \"pf-c-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        key: \"spans-show-chart\",\n        id: \"spans-show-\",\n        className: \"pf-c-check__input\",\n        style: {\n          marginBottom: '3px'\n        },\n        type: \"checkbox\",\n        checked: this.state.showSpans,\n        onChange: function onChange(event) {\n          return _this4.onSpans(event.target.checked);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"pf-c-check__label\",\n        style: {\n          paddingLeft: '5px',\n          paddingRight: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 17\n        }\n      }, \"Spans\")))), /*#__PURE__*/React.createElement(ToolbarGroup, {\n        style: {\n          marginLeft: 'auto',\n          paddingRight: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GrafanaLinks, {\n        links: this.state.grafanaLinks,\n        namespace: this.props.namespace,\n        object: this.props.object,\n        objectType: this.props.objectType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return IstioMetrics;\n}(React.Component);\n\nIstioMetrics.grafanaInfoPromise = void 0;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jaegerIntegration: state.jaegerState.info ? state.jaegerState.info.integration : false,\n    lastRefreshAt: state.globalState.lastRefreshAt,\n    timeRange: timeRangeSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setTimeRange: bindActionCreators(UserSettingsActions.setTimeRange, dispatch)\n  };\n};\n\nvar IstioMetricsContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(IstioMetrics));\nexport default IstioMetricsContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/components/Metrics/IstioMetrics.tsx"],"names":["React","connect","bindActionCreators","withRouter","Card","CardBody","Toolbar","ToolbarGroup","ToolbarItem","style","API","evalTimeRange","isEqualTimeRange","AlertUtils","RenderComponentScroll","MetricsHelper","MetricsSettingsDropdown","MetricsReporter","history","URLParam","MetricsObjectTypes","MessageType","GrafanaLinks","SpanOverlay","Dashboard","timeRangeSelector","UserSettingsActions","maximizeButtonStyle","displayFlex","display","fullHeightStyle","height","IstioMetrics","props","toolbarRef","options","spanOverlay","refresh","fetchMetrics","jaegerIntegration","fetch","namespace","target","object","targetKind","objectType","range","timeRange","timeRangeToOptions","promise","WORKLOAD","getWorkloadDashboard","APP","getAppDashboard","SERVICE","getServiceDashboard","then","response","labelsSettings","extractLabelsSettings","data","state","setState","dashboard","catch","error","addError","onMetricsSettingsChanged","settings","defaultLabels","direction","settingsToOptions","onLabelsFiltersChanged","labelsFilters","onReporterChanged","reporter","onClickDataPoint","_","datum","onDomainChange","start","end","traceId","spanId","domain","push","JAEGER_TRACE_ID","JAEGER_SPAN_ID","onSpans","checked","urlParams","URLSearchParams","location","search","set","SHOW_SPANS","String","replace","pathname","toString","showSpans","expandHandler","expandedChart","delete","createRef","retrieveMetricsSettings","initOptions","grafanaLinks","tabHeight","changed","initialReporter","fetchGrafanaInfo","prevProps","lastRefreshAt","reset","grafanaInfoPromise","getGrafanaInfo","status","undefined","grafanaInfo","externalLinks","err","addMessage","extractAxiosError","group","type","INFO","showNotification","dates","from","getTime","to","setTimeRange","get","toolbarHeight","current","clientHeight","toolbarSpace","dashboardHeight","renderOptionsBar","convertAsPromLabels","prettyLabelValues","onDomainChangeEnd","currentDomain","x","paddingBottom","marginBottom","event","paddingLeft","paddingRight","marginLeft","Component","mapStateToProps","jaegerState","info","integration","globalState","mapDispatchToProps","dispatch","IstioMetricsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport * as API from 'services/Api';\nimport { KialiAppState } from 'store/Store';\nimport { TimeRange, evalTimeRange, TimeInMilliseconds, isEqualTimeRange } from 'types/Common';\nimport { Direction, IstioMetricsOptions, Reporter } from 'types/MetricsOptions';\nimport * as AlertUtils from 'utils/AlertUtils';\nimport { RenderComponentScroll } from 'components/Nav/Page';\nimport * as MetricsHelper from './Helper';\nimport { MetricsSettings, LabelsSettings } from '../MetricsOptions/MetricsSettings';\nimport { MetricsSettingsDropdown } from '../MetricsOptions/MetricsSettingsDropdown';\nimport MetricsReporter from '../MetricsOptions/MetricsReporter';\nimport history, { URLParam } from 'app/History';\nimport { MetricsObjectTypes } from 'types/Metrics';\nimport { GrafanaInfo } from 'types/GrafanaInfo';\nimport { MessageType } from 'types/MessageCenter';\nimport { GrafanaLinks } from './GrafanaLinks';\nimport { SpanOverlay, JaegerLineInfo } from './SpanOverlay';\nimport { DashboardModel, ExternalLink } from 'types/Dashboards';\nimport { Overlay } from 'types/Overlay';\nimport { RawOrBucket } from 'types/VictoryChartInfo';\nimport { Dashboard } from 'components/Charts/Dashboard';\nimport { timeRangeSelector } from 'store/Selectors';\nimport { KialiAppAction } from 'actions/KialiAppAction';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { maximizeButtonStyle } from '../Charts/KChart';\n\ntype MetricsState = {\n  dashboard?: DashboardModel;\n  labelsSettings: LabelsSettings;\n  grafanaLinks: ExternalLink[];\n  spanOverlay?: Overlay<JaegerLineInfo>;\n  tabHeight: number;\n  showSpans: boolean;\n};\n\ntype ObjectId = {\n  namespace: string;\n  object: string;\n};\n\ntype IstioMetricsProps = ObjectId &\n  RouteComponentProps<{}> & {\n    objectType: MetricsObjectTypes;\n    direction: Direction;\n  };\n\ntype Props = IstioMetricsProps & {\n  // Redux props\n  jaegerIntegration: boolean;\n  lastRefreshAt: TimeInMilliseconds;\n  timeRange: TimeRange;\n  setTimeRange: (range: TimeRange) => void;\n};\n\nconst displayFlex = style({\n  display: 'flex'\n});\n\nconst fullHeightStyle = style({\n  height: '100%'\n});\n\nclass IstioMetrics extends React.Component<Props, MetricsState> {\n  toolbarRef: React.RefObject<HTMLDivElement>;\n  options: IstioMetricsOptions;\n  spanOverlay: SpanOverlay;\n  static grafanaInfoPromise: Promise<GrafanaInfo | undefined> | undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.toolbarRef = React.createRef<HTMLDivElement>();\n    const settings = MetricsHelper.retrieveMetricsSettings();\n    this.options = this.initOptions(settings);\n    // Initialize active filters from URL\n    this.state = {\n      labelsSettings: settings.labelsSettings,\n      grafanaLinks: [],\n      tabHeight: 300,\n      showSpans: settings.showSpans\n    };\n    this.spanOverlay = new SpanOverlay(changed => this.setState({ spanOverlay: changed }));\n  }\n\n  private initOptions(settings: MetricsSettings): IstioMetricsOptions {\n    const options: IstioMetricsOptions = {\n      reporter: MetricsReporter.initialReporter(this.props.direction),\n      direction: this.props.direction\n    };\n    const defaultLabels = [\n      this.props.direction === 'inbound' ? 'source_canonical_service' : 'destination_canonical_service',\n      this.props.direction === 'inbound' ? 'source_workload_namespace' : 'destination_workload_namespace'\n    ];\n    MetricsHelper.settingsToOptions(settings, options, defaultLabels);\n    return options;\n  }\n\n  componentDidMount() {\n    this.fetchGrafanaInfo();\n    this.refresh();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.direction !== prevProps.direction ||\n      this.props.namespace !== prevProps.namespace ||\n      this.props.object !== prevProps.object ||\n      this.props.objectType !== prevProps.objectType ||\n      this.props.lastRefreshAt !== prevProps.lastRefreshAt ||\n      !isEqualTimeRange(this.props.timeRange, prevProps.timeRange)\n    ) {\n      if (this.props.direction !== prevProps.direction) {\n        const settings = MetricsHelper.retrieveMetricsSettings();\n        this.options = this.initOptions(settings);\n        this.setState({ labelsSettings: settings.labelsSettings });\n      }\n      this.spanOverlay.reset();\n      this.refresh();\n    }\n  }\n\n  private refresh = () => {\n    this.fetchMetrics();\n    if (this.props.jaegerIntegration) {\n      this.spanOverlay.fetch({\n        namespace: this.props.namespace,\n        target: this.props.object,\n        targetKind: this.props.objectType,\n        range: this.props.timeRange\n      });\n    }\n  };\n\n  private fetchMetrics = () => {\n    // Time range needs to be reevaluated everytime fetching\n    MetricsHelper.timeRangeToOptions(this.props.timeRange, this.options);\n    let promise: Promise<API.Response<DashboardModel>>;\n    switch (this.props.objectType) {\n      case MetricsObjectTypes.WORKLOAD:\n        promise = API.getWorkloadDashboard(this.props.namespace, this.props.object, this.options);\n        break;\n      case MetricsObjectTypes.APP:\n        promise = API.getAppDashboard(this.props.namespace, this.props.object, this.options);\n        break;\n      case MetricsObjectTypes.SERVICE:\n      default:\n        promise = API.getServiceDashboard(this.props.namespace, this.props.object, this.options);\n        break;\n    }\n    return promise\n      .then(response => {\n        const labelsSettings = MetricsHelper.extractLabelsSettings(response.data, this.state.labelsSettings);\n        this.setState({\n          dashboard: response.data,\n          labelsSettings: labelsSettings\n        });\n      })\n      .catch(error => {\n        AlertUtils.addError('Could not fetch metrics.', error);\n        throw error;\n      });\n  };\n\n  private fetchGrafanaInfo() {\n    if (!IstioMetrics.grafanaInfoPromise) {\n      IstioMetrics.grafanaInfoPromise = API.getGrafanaInfo().then(response => {\n        if (response.status === 204) {\n          return undefined;\n        }\n        return response.data;\n      });\n    }\n    IstioMetrics.grafanaInfoPromise\n      .then(grafanaInfo => {\n        if (grafanaInfo) {\n          this.setState({ grafanaLinks: grafanaInfo.externalLinks });\n        } else {\n          this.setState({ grafanaLinks: [] });\n        }\n      })\n      .catch(err => {\n        AlertUtils.addMessage({\n          ...AlertUtils.extractAxiosError('Could not fetch Grafana info. Turning off links to Grafana.', err),\n          group: 'default',\n          type: MessageType.INFO,\n          showNotification: false\n        });\n      });\n  }\n\n  private onMetricsSettingsChanged = (settings: MetricsSettings) => {\n    const defaultLabels = [\n      this.props.direction === 'inbound' ? 'source_canonical_service' : 'destination_canonical_service'\n    ];\n    MetricsHelper.settingsToOptions(settings, this.options, defaultLabels);\n    this.fetchMetrics();\n  };\n\n  private onLabelsFiltersChanged = (labelsFilters: LabelsSettings) => {\n    this.setState({ labelsSettings: labelsFilters });\n  };\n\n  private onReporterChanged = (reporter: Reporter) => {\n    this.options.reporter = reporter;\n    this.fetchMetrics();\n  };\n\n  private onClickDataPoint = (_, datum: RawOrBucket<JaegerLineInfo>) => {\n    if ('start' in datum && 'end' in datum) {\n      // Zoom-in bucket\n      this.onDomainChange([datum.start as Date, datum.end as Date]);\n    } else if ('traceId' in datum) {\n      const traceId = datum.traceId;\n      const spanId = datum.spanId;\n      const domain =\n        this.props.objectType === MetricsObjectTypes.APP\n          ? 'applications'\n          : this.props.objectType === MetricsObjectTypes.SERVICE\n          ? 'services'\n          : 'workloads';\n      history.push(\n        `/namespaces/${this.props.namespace}/${domain}/${this.props.object}?tab=traces&${URLParam.JAEGER_TRACE_ID}=${traceId}&${URLParam.JAEGER_SPAN_ID}=${spanId}`\n      );\n    }\n  };\n\n  private onDomainChange(dates: [Date, Date]) {\n    if (dates && dates[0] && dates[1]) {\n      const range: TimeRange = {\n        from: dates[0].getTime(),\n        to: dates[1].getTime()\n      };\n      this.props.setTimeRange(range);\n    }\n  }\n\n  render() {\n    const urlParams = new URLSearchParams(history.location.search);\n    const expandedChart = urlParams.get('expand') || undefined;\n\n    // 20px (card margin) + 24px (card padding) + 51px (toolbar) + 15px (toolbar padding) + 24px (card padding) + 20px (card margin)\n    const toolbarHeight = this.toolbarRef.current ? this.toolbarRef.current.clientHeight : 51;\n    const toolbarSpace = 20 + 24 + toolbarHeight + 15 + 24 + 20;\n    const dashboardHeight = this.state.tabHeight - toolbarSpace;\n    return (\n      <RenderComponentScroll onResize={height => this.setState({ tabHeight: height })}>\n        <Card className={fullHeightStyle}>\n          <CardBody>\n            {this.renderOptionsBar()}\n            {this.state.dashboard && (\n              <Dashboard\n                dashboard={this.state.dashboard}\n                labelValues={MetricsHelper.convertAsPromLabels(this.state.labelsSettings)}\n                maximizedChart={expandedChart}\n                expandHandler={this.expandHandler}\n                onClick={this.onClickDataPoint}\n                labelPrettifier={MetricsHelper.prettyLabelValues}\n                overlay={this.state.spanOverlay}\n                showSpans={this.state.showSpans}\n                dashboardHeight={dashboardHeight}\n                timeWindow={evalTimeRange(this.props.timeRange)}\n                brushHandlers={{ onDomainChangeEnd: (_, props) => this.onDomainChange(props.currentDomain.x) }}\n              />\n            )}\n          </CardBody>\n        </Card>\n      </RenderComponentScroll>\n    );\n  }\n\n  private onSpans = (checked: boolean) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.set(URLParam.SHOW_SPANS, String(checked));\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n    this.setState({ showSpans: !this.state.showSpans });\n  };\n\n  private renderOptionsBar() {\n    return (\n      <div ref={this.toolbarRef}>\n        <Toolbar style={{ paddingBottom: 15 }}>\n          <ToolbarGroup>\n            <ToolbarItem>\n              <MetricsSettingsDropdown\n                onChanged={this.onMetricsSettingsChanged}\n                onLabelsFiltersChanged={this.onLabelsFiltersChanged}\n                direction={this.props.direction}\n                labelsSettings={this.state.labelsSettings}\n                hasHistograms={true}\n              />\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup>\n            <ToolbarItem className={displayFlex}>\n              <MetricsReporter onChanged={this.onReporterChanged} direction={this.props.direction} />\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup>\n            <ToolbarItem className={displayFlex}>\n              <div style={maximizeButtonStyle} className=\"pf-c-check\">\n                <input\n                  key={`spans-show-chart`}\n                  id={`spans-show-`}\n                  className=\"pf-c-check__input\"\n                  style={{ marginBottom: '3px' }}\n                  type=\"checkbox\"\n                  checked={this.state.showSpans}\n                  onChange={event => this.onSpans(event.target.checked)}\n                />\n                <label\n                  className=\"pf-c-check__label\"\n                  style={{\n                    paddingLeft: '5px',\n                    paddingRight: '5px'\n                  }}\n                >\n                  Spans\n                </label>\n              </div>\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup style={{ marginLeft: 'auto', paddingRight: '20px' }}>\n            <GrafanaLinks\n              links={this.state.grafanaLinks}\n              namespace={this.props.namespace}\n              object={this.props.object}\n              objectType={this.props.objectType}\n            />\n          </ToolbarGroup>\n        </Toolbar>\n      </div>\n    );\n  }\n\n  private expandHandler = (expandedChart?: string) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.delete('expand');\n    if (expandedChart) {\n      urlParams.set('expand', expandedChart);\n    }\n    history.push(history.location.pathname + '?' + urlParams.toString());\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => {\n  return {\n    jaegerIntegration: state.jaegerState.info ? state.jaegerState.info.integration : false,\n    lastRefreshAt: state.globalState.lastRefreshAt,\n    timeRange: timeRangeSelector(state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>) => {\n  return {\n    setTimeRange: bindActionCreators(UserSettingsActions.setTimeRange, dispatch)\n  };\n};\n\nconst IstioMetricsContainer = withRouter<RouteComponentProps<{}> & IstioMetricsProps, any>(\n  connect(mapStateToProps, mapDispatchToProps)(IstioMetrics)\n);\n\nexport default IstioMetricsContainer;\n"]},"metadata":{},"sourceType":"module"}
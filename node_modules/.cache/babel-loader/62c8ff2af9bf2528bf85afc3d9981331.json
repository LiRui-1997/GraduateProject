{"ast":null,"code":"export var SUMMARY_PANEL_CHART_WIDTH = 250;\nexport var Protocol;\n\n(function (Protocol) {\n  Protocol[\"GRPC\"] = \"grpc\";\n  Protocol[\"HTTP\"] = \"http\";\n  Protocol[\"TCP\"] = \"tcp\";\n})(Protocol || (Protocol = {}));\n\nexport var EdgeLabelMode;\n\n(function (EdgeLabelMode) {\n  EdgeLabelMode[\"RESPONSE_TIME_GROUP\"] = \"responseTime\";\n  EdgeLabelMode[\"RESPONSE_TIME_AVERAGE\"] = \"avg\";\n  EdgeLabelMode[\"RESPONSE_TIME_P50\"] = \"rt50\";\n  EdgeLabelMode[\"RESPONSE_TIME_P95\"] = \"rt95\";\n  EdgeLabelMode[\"RESPONSE_TIME_P99\"] = \"rt99\";\n  EdgeLabelMode[\"THROUGHPUT_GROUP\"] = \"throughput\";\n  EdgeLabelMode[\"THROUGHPUT_REQUEST\"] = \"throughputRequest\";\n  EdgeLabelMode[\"THROUGHPUT_RESPONSE\"] = \"throughputResponse\";\n  EdgeLabelMode[\"TRAFFIC_DISTRIBUTION\"] = \"trafficDistribution\";\n  EdgeLabelMode[\"TRAFFIC_RATE\"] = \"trafficRate\";\n})(EdgeLabelMode || (EdgeLabelMode = {}));\n\nexport var isResponseTimeMode = function isResponseTimeMode(mode) {\n  return mode === EdgeLabelMode.RESPONSE_TIME_GROUP || mode === EdgeLabelMode.RESPONSE_TIME_AVERAGE || mode === EdgeLabelMode.RESPONSE_TIME_P50 || mode === EdgeLabelMode.RESPONSE_TIME_P95 || mode === EdgeLabelMode.RESPONSE_TIME_P99;\n};\nexport var isThroughputMode = function isThroughputMode(mode) {\n  return mode === EdgeLabelMode.THROUGHPUT_GROUP || mode === EdgeLabelMode.THROUGHPUT_REQUEST || mode === EdgeLabelMode.THROUGHPUT_RESPONSE;\n};\nexport var numLabels = function numLabels(modes) {\n  return modes.filter(function (m) {\n    return m !== EdgeLabelMode.RESPONSE_TIME_GROUP && m !== EdgeLabelMode.THROUGHPUT_GROUP;\n  }).length;\n};\nexport var TrafficRate;\n\n(function (TrafficRate) {\n  TrafficRate[\"GRPC_GROUP\"] = \"grpc\";\n  TrafficRate[\"GRPC_RECEIVED\"] = \"grpcReceived\";\n  TrafficRate[\"GRPC_REQUEST\"] = \"grpcRequest\";\n  TrafficRate[\"GRPC_SENT\"] = \"grpcSent\";\n  TrafficRate[\"GRPC_TOTAL\"] = \"grpcTotal\";\n  TrafficRate[\"HTTP_GROUP\"] = \"http\";\n  TrafficRate[\"HTTP_REQUEST\"] = \"httpRequest\";\n  TrafficRate[\"TCP_GROUP\"] = \"tcp\";\n  TrafficRate[\"TCP_RECEIVED\"] = \"tcpReceived\";\n  TrafficRate[\"TCP_SENT\"] = \"tcpSent\";\n  TrafficRate[\"TCP_TOTAL\"] = \"tcpTotal\";\n})(TrafficRate || (TrafficRate = {}));\n\nexport var DefaultTrafficRates = [TrafficRate.GRPC_GROUP, TrafficRate.GRPC_REQUEST, TrafficRate.HTTP_GROUP, TrafficRate.HTTP_REQUEST, TrafficRate.TCP_GROUP, TrafficRate.TCP_SENT];\nexport var isGrpcRate = function isGrpcRate(rate) {\n  return rate === TrafficRate.GRPC_GROUP || rate === TrafficRate.GRPC_RECEIVED || rate === TrafficRate.GRPC_REQUEST || rate === TrafficRate.GRPC_SENT || rate === TrafficRate.GRPC_TOTAL;\n};\nexport var toGrpcRate = function toGrpcRate(rate) {\n  switch (rate) {\n    case 'received':\n      return TrafficRate.GRPC_RECEIVED;\n\n    case 'requests':\n    case 'request':\n      return TrafficRate.GRPC_REQUEST;\n\n    case 'sent':\n      return TrafficRate.GRPC_SENT;\n\n    case 'total':\n      return TrafficRate.GRPC_TOTAL;\n\n    default:\n      return undefined;\n  }\n};\nexport var isHttpRate = function isHttpRate(rate) {\n  return rate === TrafficRate.HTTP_GROUP || rate === TrafficRate.HTTP_REQUEST;\n};\nexport var toHttpRate = function toHttpRate(rate) {\n  switch (rate) {\n    case 'requests':\n    case 'request':\n      return TrafficRate.HTTP_REQUEST;\n\n    default:\n      return undefined;\n  }\n};\nexport var isTcpRate = function isTcpRate(rate) {\n  return rate === TrafficRate.TCP_GROUP || rate === TrafficRate.TCP_RECEIVED || rate === TrafficRate.TCP_SENT || rate === TrafficRate.TCP_TOTAL;\n};\nexport var toTcpRate = function toTcpRate(rate) {\n  switch (rate) {\n    case 'received':\n      return TrafficRate.TCP_RECEIVED;\n\n    case 'sent':\n      return TrafficRate.TCP_SENT;\n\n    case 'total':\n      return TrafficRate.TCP_TOTAL;\n\n    default:\n      return undefined;\n  }\n};\nexport var GraphType;\n\n(function (GraphType) {\n  GraphType[\"APP\"] = \"\\u5E94\\u7528\\u7A0B\\u5E8F\";\n  GraphType[\"SERVICE\"] = \"\\u670D\\u52A1\";\n  GraphType[\"VERSIONED_APP\"] = \"\\u591A\\u7248\\u672C\\u5E94\\u7528\";\n  GraphType[\"WORKLOAD\"] = \"\\u5DE5\\u4F5C\\u8D1F\\u8F7D\";\n})(GraphType || (GraphType = {}));\n\nexport var BoxByType;\n\n(function (BoxByType) {\n  BoxByType[\"APP\"] = \"app\";\n  BoxByType[\"CLUSTER\"] = \"cluster\";\n  BoxByType[\"NAMESPACE\"] = \"namespace\";\n})(BoxByType || (BoxByType = {}));\n\nexport var NodeType;\n\n(function (NodeType) {\n  NodeType[\"AGGREGATE\"] = \"aggregate\";\n  NodeType[\"APP\"] = \"app\";\n  NodeType[\"BOX\"] = \"box\";\n  NodeType[\"SERVICE\"] = \"service\";\n  NodeType[\"UNKNOWN\"] = \"unknown\";\n  NodeType[\"WORKLOAD\"] = \"workload\";\n})(NodeType || (NodeType = {}));\n\nexport var CLUSTER_DEFAULT = 'Kubernetes'; // Istio default cluster, typically indicates a single-cluster env\n\nexport var UNKNOWN = 'unknown';\n// This data is stored in the _global scratch area in the cy graph\n// for use by code that needs access to it.\n// We can add more props to this scratch data as the need arises.\nexport var CytoscapeGlobalScratchNamespace = '_global';\nexport var hasProtocolTraffic = function hasProtocolTraffic(protocolTraffic) {\n  return protocolTraffic.rates !== undefined && protocolTraffic.responses !== undefined;\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/Graph.ts"],"names":["SUMMARY_PANEL_CHART_WIDTH","Protocol","EdgeLabelMode","isResponseTimeMode","mode","RESPONSE_TIME_GROUP","RESPONSE_TIME_AVERAGE","RESPONSE_TIME_P50","RESPONSE_TIME_P95","RESPONSE_TIME_P99","isThroughputMode","THROUGHPUT_GROUP","THROUGHPUT_REQUEST","THROUGHPUT_RESPONSE","numLabels","modes","filter","m","length","TrafficRate","DefaultTrafficRates","GRPC_GROUP","GRPC_REQUEST","HTTP_GROUP","HTTP_REQUEST","TCP_GROUP","TCP_SENT","isGrpcRate","rate","GRPC_RECEIVED","GRPC_SENT","GRPC_TOTAL","toGrpcRate","undefined","isHttpRate","toHttpRate","isTcpRate","TCP_RECEIVED","TCP_TOTAL","toTcpRate","GraphType","BoxByType","NodeType","CLUSTER_DEFAULT","UNKNOWN","CytoscapeGlobalScratchNamespace","hasProtocolTraffic","protocolTraffic","rates","responses"],"mappings":"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","sourcesContent":["import Namespace from './Namespace';\nimport { DurationInSeconds, TimeInSeconds } from './Common';\nimport { Health } from './Health';\nimport { HealthAnnotationType } from './HealthAnnotation';\n\nexport interface Layout {\n  name: string;\n}\n\nexport const SUMMARY_PANEL_CHART_WIDTH = 250;\nexport type SummaryType = 'graph' | 'node' | 'edge' | 'box';\nexport interface SummaryData {\n  summaryType: SummaryType;\n  summaryTarget: any;\n}\n\nexport enum Protocol {\n  GRPC = 'grpc',\n  HTTP = 'http',\n  TCP = 'tcp'\n}\n\nexport interface SummaryPanelPropType {\n  data: SummaryData;\n  duration: DurationInSeconds;\n  graphType: GraphType;\n  injectServiceNodes: boolean;\n  namespaces: Namespace[];\n  queryTime: TimeInSeconds;\n  rateInterval: string;\n  step: number;\n  trafficRates: TrafficRate[];\n}\n\nexport enum EdgeLabelMode {\n  RESPONSE_TIME_GROUP = 'responseTime',\n  RESPONSE_TIME_AVERAGE = 'avg',\n  RESPONSE_TIME_P50 = 'rt50',\n  RESPONSE_TIME_P95 = 'rt95',\n  RESPONSE_TIME_P99 = 'rt99',\n  THROUGHPUT_GROUP = 'throughput',\n  THROUGHPUT_REQUEST = 'throughputRequest',\n  THROUGHPUT_RESPONSE = 'throughputResponse',\n  TRAFFIC_DISTRIBUTION = 'trafficDistribution',\n  TRAFFIC_RATE = 'trafficRate'\n}\n\nexport const isResponseTimeMode = (mode: EdgeLabelMode): boolean => {\n  return (\n    mode === EdgeLabelMode.RESPONSE_TIME_GROUP ||\n    mode === EdgeLabelMode.RESPONSE_TIME_AVERAGE ||\n    mode === EdgeLabelMode.RESPONSE_TIME_P50 ||\n    mode === EdgeLabelMode.RESPONSE_TIME_P95 ||\n    mode === EdgeLabelMode.RESPONSE_TIME_P99\n  );\n};\n\nexport const isThroughputMode = (mode: EdgeLabelMode): boolean => {\n  return (\n    mode === EdgeLabelMode.THROUGHPUT_GROUP ||\n    mode === EdgeLabelMode.THROUGHPUT_REQUEST ||\n    mode === EdgeLabelMode.THROUGHPUT_RESPONSE\n  );\n};\n\nexport const numLabels = (modes: EdgeLabelMode[]): number => {\n  return modes.filter(m => m !== EdgeLabelMode.RESPONSE_TIME_GROUP && m !== EdgeLabelMode.THROUGHPUT_GROUP).length;\n};\n\nexport enum TrafficRate {\n  GRPC_GROUP = 'grpc',\n  GRPC_RECEIVED = 'grpcReceived', // response_messages\n  GRPC_REQUEST = 'grpcRequest',\n  GRPC_SENT = 'grpcSent', // request_messages\n  GRPC_TOTAL = 'grpcTotal', // sent_bytes + received_bytes\n  HTTP_GROUP = 'http',\n  HTTP_REQUEST = 'httpRequest',\n  TCP_GROUP = 'tcp',\n  TCP_RECEIVED = 'tcpReceived', // received_bytes\n  TCP_SENT = 'tcpSent', // sent_bytes\n  TCP_TOTAL = 'tcpTotal' // sent_bytes + received_bytes\n}\n\nexport const DefaultTrafficRates: TrafficRate[] = [\n  TrafficRate.GRPC_GROUP,\n  TrafficRate.GRPC_REQUEST,\n  TrafficRate.HTTP_GROUP,\n  TrafficRate.HTTP_REQUEST,\n  TrafficRate.TCP_GROUP,\n  TrafficRate.TCP_SENT\n];\n\nexport const isGrpcRate = (rate: TrafficRate): boolean => {\n  return (\n    rate === TrafficRate.GRPC_GROUP ||\n    rate === TrafficRate.GRPC_RECEIVED ||\n    rate === TrafficRate.GRPC_REQUEST ||\n    rate === TrafficRate.GRPC_SENT ||\n    rate === TrafficRate.GRPC_TOTAL\n  );\n};\n\nexport const toGrpcRate = (rate: string): TrafficRate | undefined => {\n  switch (rate) {\n    case 'received':\n      return TrafficRate.GRPC_RECEIVED;\n    case 'requests':\n    case 'request':\n      return TrafficRate.GRPC_REQUEST;\n    case 'sent':\n      return TrafficRate.GRPC_SENT;\n    case 'total':\n      return TrafficRate.GRPC_TOTAL;\n    default:\n      return undefined;\n  }\n};\n\nexport const isHttpRate = (rate: TrafficRate): boolean => {\n  return rate === TrafficRate.HTTP_GROUP || rate === TrafficRate.HTTP_REQUEST;\n};\n\nexport const toHttpRate = (rate: string): TrafficRate | undefined => {\n  switch (rate) {\n    case 'requests':\n    case 'request':\n      return TrafficRate.HTTP_REQUEST;\n    default:\n      return undefined;\n  }\n};\n\nexport const isTcpRate = (rate: TrafficRate): boolean => {\n  return (\n    rate === TrafficRate.TCP_GROUP ||\n    rate === TrafficRate.TCP_RECEIVED ||\n    rate === TrafficRate.TCP_SENT ||\n    rate === TrafficRate.TCP_TOTAL\n  );\n};\n\nexport const toTcpRate = (rate: string): TrafficRate | undefined => {\n  switch (rate) {\n    case 'received':\n      return TrafficRate.TCP_RECEIVED;\n    case 'sent':\n      return TrafficRate.TCP_SENT;\n    case 'total':\n      return TrafficRate.TCP_TOTAL;\n    default:\n      return undefined;\n  }\n};\n\nexport enum GraphType {\n  APP = '应用程序',\n  SERVICE = '服务',\n  VERSIONED_APP = '多版本应用',\n  WORKLOAD = '工作负载'\n}\n\n\nexport enum BoxByType {\n  APP = 'app',\n  CLUSTER = 'cluster',\n  NAMESPACE = 'namespace'\n}\n\nexport enum NodeType {\n  AGGREGATE = 'aggregate',\n  APP = 'app',\n  BOX = 'box',\n  SERVICE = 'service',\n  UNKNOWN = 'unknown',\n  WORKLOAD = 'workload'\n}\n\nexport const CLUSTER_DEFAULT = 'Kubernetes'; // Istio default cluster, typically indicates a single-cluster env\nexport const UNKNOWN = 'unknown';\n\nexport interface NodeParamsType {\n  aggregate?: string;\n  aggregateValue?: string;\n  app: string;\n  namespace: Namespace;\n  nodeType: NodeType;\n  service: string;\n  version?: string;\n  workload: string;\n}\n\n// This data is stored in the _global scratch area in the cy graph\n// for use by code that needs access to it.\n// We can add more props to this scratch data as the need arises.\nexport const CytoscapeGlobalScratchNamespace = '_global';\nexport type CytoscapeGlobalScratchData = {\n  activeNamespaces: Namespace[];\n  homeCluster: string;\n  edgeLabels: EdgeLabelMode[];\n  graphType: GraphType;\n  showMissingSidecars: boolean;\n  showSecurity: boolean;\n  showVirtualServices: boolean;\n  trafficRates: TrafficRate[];\n};\n\nexport interface CytoscapeBaseEvent {\n  summaryType: SummaryType; // what the summary panel should show\n  summaryTarget: any; // the cytoscape element that was the target of the event\n}\n\nexport interface CytoscapeClickEvent extends CytoscapeBaseEvent {}\nexport interface CytoscapeMouseInEvent extends CytoscapeBaseEvent {}\nexport interface CytoscapeMouseOutEvent extends CytoscapeBaseEvent {}\n\n// Graph Structures\n\ntype PercentageOfTrafficByFlag = {\n  [flag: string]: string;\n};\n\ntype PercentageOfTrafficByHost = {\n  [host: string]: string;\n};\n\nexport type ResponseDetail = {\n  flags: PercentageOfTrafficByFlag;\n  hosts: PercentageOfTrafficByHost;\n};\n\nexport type Responses = {\n  [responseCode: string]: ResponseDetail;\n};\n\ntype ValidProtocols = 'http' | 'grpc' | 'tcp';\n\nexport type ProtocolNoTraffic = {\n  protocol: ValidProtocols;\n};\n\nexport type ProtocolTrafficHttp = {\n  protocol: 'http';\n  rates: {\n    http: string;\n    httpPercentErr?: string;\n  };\n  responses: Responses;\n};\n\nexport type ProtocolTrafficGrpc = {\n  protocol: 'grpc';\n  rates: {\n    grpc: string;\n    grpcPercentErr?: string;\n  };\n  responses: Responses;\n};\n\nexport type ProtocolTrafficTcp = {\n  protocol: 'tcp';\n  rates: {\n    tcp: string;\n  };\n  responses: Responses;\n};\n\nexport type ProtocolWithTraffic = ProtocolTrafficHttp | ProtocolTrafficTcp | ProtocolTrafficGrpc;\nexport type ProtocolTraffic = ProtocolWithTraffic | ProtocolNoTraffic;\n\nexport const hasProtocolTraffic = (protocolTraffic: ProtocolTraffic): protocolTraffic is ProtocolWithTraffic => {\n  return (\n    (protocolTraffic as ProtocolWithTraffic).rates !== undefined &&\n    (protocolTraffic as ProtocolWithTraffic).responses !== undefined\n  );\n};\n\nexport interface DestService {\n  cluster: string;\n  namespace: string;\n  name: string;\n}\n\nexport interface SEInfo {\n  hosts: string[];\n  location: string;\n  namespace: string; // namespace represents where the ServiceEntry object is defined and not necessarily the namespace of the node.\n}\n\nexport interface WEInfo {\n  name: string;\n}\n\n// Node data expected from server\nexport interface GraphNodeData {\n  id: string;\n  parent?: string;\n  nodeType: NodeType;\n  cluster: string;\n  namespace: string;\n  workload?: string;\n  app?: string;\n  version?: string;\n  service?: string;\n  aggregate?: string;\n  aggregateValue?: string;\n  destServices?: DestService[];\n  traffic?: ProtocolTraffic[];\n  hasCB?: boolean;\n  hasFaultInjection?: boolean;\n  hasHealthConfig?: HealthAnnotationType;\n  hasMissingSC?: boolean;\n  hasRequestRouting?: boolean;\n  hasRequestTimeout?: boolean;\n  hasTCPTrafficShifting?: boolean;\n  hasTrafficShifting?: boolean;\n  hasVS?: {\n    hostnames?: string[];\n  };\n  hasWorkloadEntry?: WEInfo[];\n  isBox?: string;\n  isDead?: boolean;\n  isIdle?: boolean;\n  isInaccessible?: boolean;\n  isGateway?: {\n    ingressInfo?: {\n      hostnames?: string[];\n    };\n  };\n  isMisconfigured?: string;\n  isOutside?: boolean;\n  isRoot?: boolean;\n  isServiceEntry?: SEInfo;\n}\n\n// Edge data expected from server\nexport interface GraphEdgeData {\n  id: string;\n  source: string;\n  target: string;\n  destPrincipal?: string;\n  responseTime?: number;\n  sourcePrincipal?: string;\n  traffic?: ProtocolTraffic;\n  isMTLS?: number;\n}\n\nexport interface GraphNodeWrapper {\n  data: GraphNodeData;\n}\n\nexport interface GraphEdgeWrapper {\n  data: GraphEdgeData;\n}\n\nexport interface GraphElements {\n  nodes?: GraphNodeWrapper[];\n  edges?: GraphEdgeWrapper[];\n}\n\nexport interface GraphDefinition {\n  duration: number;\n  elements: GraphElements;\n  graphType: GraphType;\n  timestamp: number;\n}\n\n// Node data after decorating at fetch-time (what is mainly used by ui code)\nexport interface DecoratedGraphNodeData extends GraphNodeData {\n  grpcIn: number;\n  grpcInErr: number;\n  grpcInNoResponse: number;\n  grpcOut: number;\n  health: Health;\n  healthStatus: string; // status name\n  httpIn: number;\n  httpIn3xx: number;\n  httpIn4xx: number;\n  httpIn5xx: number;\n  httpInNoResponse: number;\n  httpOut: number;\n  tcpIn: number;\n  tcpOut: number;\n\n  traffic: never;\n\n  // computed, true if has istio namespace\n  isIstio?: boolean;\n}\n\n// Edge data after decorating at fetch-time (what is mainly used by ui code)\nexport interface DecoratedGraphEdgeData extends GraphEdgeData {\n  grpc: number;\n  grpcErr: number;\n  grpcNoResponse: number;\n  grpcPercentErr: number;\n  grpcPercentReq: number;\n  http: number;\n  http3xx: number;\n  http4xx: number;\n  http5xx: number;\n  httpNoResponse: number;\n  httpPercentErr: number;\n  httpPercentReq: number;\n  protocol: ValidProtocols;\n  responses: Responses;\n  tcp: number;\n\n  // During the decoration process, we make non-optional some number attributes (giving them a default value)\n  // computed, true if traffic rate > 0\n  hasTraffic?: boolean;\n  // Default value -1\n  isMTLS: number;\n  // Default value NaN\n  responseTime: number;\n  // Default value NaN\n  throughput: number;\n}\n\nexport interface DecoratedGraphNodeWrapper {\n  data: DecoratedGraphNodeData;\n}\n\nexport interface DecoratedGraphEdgeWrapper {\n  data: DecoratedGraphEdgeData;\n}\n\nexport interface DecoratedGraphElements {\n  nodes?: DecoratedGraphNodeWrapper[];\n  edges?: DecoratedGraphEdgeWrapper[];\n}\n"]},"metadata":{},"sourceType":"module"}
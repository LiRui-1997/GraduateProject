{"ast":null,"code":"import _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as API from '../services/Api';\nimport { MetricsStatsActions } from './MetricsStatsActions';\nimport { statsQueryToKey } from 'types/MetricsOptions';\nimport { addError, addInfo } from 'utils/AlertUtils';\nvar expiry = 2 * 60 * 1000;\nvar MetricsStatsThunkActions = {\n  load: function load(queries) {\n    return function (dispatch, getState) {\n      var oldStats = getState().metricsStats.data;\n      var now = Date.now(); // Keep only queries for stats we don't already have\n\n      var newStats = new Map(Array.from(oldStats).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            v = _ref2[1];\n\n        return now - v.timestamp < expiry;\n      }));\n      var filtered = queries.filter(function (q) {\n        return !newStats.has(statsQueryToKey(q));\n      });\n\n      if (filtered.length > 0) {\n        API.getMetricsStats(filtered).then(function (res) {\n          // Merge result\n          Object.entries(res.data.stats).forEach(function (e) {\n            return newStats.set(e[0], _objectSpread(_objectSpread({}, e[1]), {}, {\n              timestamp: now\n            }));\n          });\n          dispatch(MetricsStatsActions.setStats(newStats));\n\n          if (res.data.warnings && res.data.warnings.length > 0) {\n            addInfo(res.data.warnings.join('; '), false);\n          }\n        }).catch(function (err) {\n          addError('Could not fetch metrics stats.', err);\n        });\n      }\n    };\n  }\n};\nexport default MetricsStatsThunkActions;","map":{"version":3,"sources":["/root/GraduateProject/src/actions/MetricsStatsThunkActions.ts"],"names":["API","MetricsStatsActions","statsQueryToKey","addError","addInfo","expiry","MetricsStatsThunkActions","load","queries","dispatch","getState","oldStats","metricsStats","data","now","Date","newStats","Map","Array","from","filter","_","v","timestamp","filtered","q","has","length","getMetricsStats","then","res","Object","entries","stats","forEach","e","set","setStats","warnings","join","catch","err"],"mappings":";;AAGA,OAAO,KAAKA,GAAZ,MAAqB,iBAArB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAA4BC,eAA5B,QAAmD,sBAAnD;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,kBAAlC;AAKA,IAAMC,MAAM,GAAG,IAAI,EAAJ,GAAS,IAAxB;AACA,IAAMC,wBAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,cAACC,OAAD,EAAkC;AACtC,WAAO,UAACC,QAAD,EAA+DC,QAA/D,EAAiG;AACtG,UAAMC,QAAQ,GAAGD,QAAQ,GAAGE,YAAX,CAAwBC,IAAzC;AACA,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAFsG,CAGtG;;AACA,UAAME,QAAQ,GAAG,IAAIC,GAAJ,CAAQC,KAAK,CAACC,IAAN,CAAWR,QAAX,EAAqBS,MAArB,CAA4B;AAAA;AAAA,YAAEC,CAAF;AAAA,YAAKC,CAAL;;AAAA,eAAYR,GAAG,GAAGQ,CAAC,CAACC,SAAR,GAAoBlB,MAAhC;AAAA,OAA5B,CAAR,CAAjB;AACA,UAAMmB,QAAQ,GAAGhB,OAAO,CAACY,MAAR,CAAe,UAAAK,CAAC;AAAA,eAAI,CAACT,QAAQ,CAACU,GAAT,CAAaxB,eAAe,CAACuB,CAAD,CAA5B,CAAL;AAAA,OAAhB,CAAjB;;AACA,UAAID,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACvB3B,QAAAA,GAAG,CAAC4B,eAAJ,CAAoBJ,QAApB,EACGK,IADH,CACQ,UAAAC,GAAG,EAAI;AACX;AACAC,UAAAA,MAAM,CAACC,OAAP,CAAeF,GAAG,CAACjB,IAAJ,CAASoB,KAAxB,EAA+BC,OAA/B,CAAuC,UAAAC,CAAC;AAAA,mBAAInB,QAAQ,CAACoB,GAAT,CAAaD,CAAC,CAAC,CAAD,CAAd,kCAAwBA,CAAC,CAAC,CAAD,CAAzB;AAA8BZ,cAAAA,SAAS,EAAET;AAAzC,eAAJ;AAAA,WAAxC;AACAL,UAAAA,QAAQ,CAACR,mBAAmB,CAACoC,QAApB,CAA6BrB,QAA7B,CAAD,CAAR;;AACA,cAAIc,GAAG,CAACjB,IAAJ,CAASyB,QAAT,IAAqBR,GAAG,CAACjB,IAAJ,CAASyB,QAAT,CAAkBX,MAAlB,GAA2B,CAApD,EAAuD;AACrDvB,YAAAA,OAAO,CAAC0B,GAAG,CAACjB,IAAJ,CAASyB,QAAT,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+B,KAA/B,CAAP;AACD;AACF,SARH,EASGC,KATH,CASS,UAAAC,GAAG,EAAI;AACZtC,UAAAA,QAAQ,CAAC,gCAAD,EAAmCsC,GAAnC,CAAR;AACD,SAXH;AAYD;AACF,KApBD;AAqBD;AAvB8B,CAAjC;AA0BA,eAAenC,wBAAf","sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport { KialiAppState } from '../store/Store';\nimport { KialiAppAction } from './KialiAppAction';\nimport * as API from '../services/Api';\nimport { MetricsStatsActions } from './MetricsStatsActions';\nimport { MetricsStatsQuery, statsQueryToKey } from 'types/MetricsOptions';\nimport { addError, addInfo } from 'utils/AlertUtils';\nimport { MetricsStats } from 'types/Metrics';\n\ntype ExpiringStats = MetricsStats & { timestamp: number };\n\nconst expiry = 2 * 60 * 1000;\nconst MetricsStatsThunkActions = {\n  load: (queries: MetricsStatsQuery[]) => {\n    return (dispatch: ThunkDispatch<KialiAppState, void, KialiAppAction>, getState: () => KialiAppState) => {\n      const oldStats = getState().metricsStats.data as Map<string, ExpiringStats>;\n      const now = Date.now();\n      // Keep only queries for stats we don't already have\n      const newStats = new Map(Array.from(oldStats).filter(([_, v]) => now - v.timestamp < expiry));\n      const filtered = queries.filter(q => !newStats.has(statsQueryToKey(q)));\n      if (filtered.length > 0) {\n        API.getMetricsStats(filtered)\n          .then(res => {\n            // Merge result\n            Object.entries(res.data.stats).forEach(e => newStats.set(e[0], { ...e[1], timestamp: now }));\n            dispatch(MetricsStatsActions.setStats(newStats));\n            if (res.data.warnings && res.data.warnings.length > 0) {\n              addInfo(res.data.warnings.join('; '), false);\n            }\n          })\n          .catch(err => {\n            addError('Could not fetch metrics stats.', err);\n          });\n      }\n    };\n  }\n};\n\nexport default MetricsStatsThunkActions;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** Raf for node + browser */\nexport var raf = typeof requestAnimationFrame === 'undefined'\n/**\n * Make sure setTimeout is always invoked with\n * `this` set to `window` or `global` automatically\n **/\n? function (cb) {\n  return setTimeout(cb);\n}\n/**\n * Make sure window.requestAnimationFrame is always invoked with `this` window\n * We might have raf without window in case of `raf/polyfill` (recommended by React)\n **/\n: typeof window === 'undefined' ? requestAnimationFrame : requestAnimationFrame.bind(window);\n/**\n * Utility to join classes conditionally\n */\n\nexport function classes() {\n  var classes = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    classes[_i] = arguments[_i];\n  }\n\n  return classes.map(function (c) {\n    return c && typeof c === 'object' ? Object.keys(c).map(function (key) {\n      return !!c[key] && key;\n    }) : [c];\n  }).reduce(function (flattened, c) {\n    return flattened.concat(c);\n  }, []).filter(function (c) {\n    return !!c;\n  }).join(' ');\n}\n/**\n * Merges various styles into a single style object.\n * Note: if two objects have the same property the last one wins\n */\n\nexport function extend() {\n  var objects = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    objects[_i] = arguments[_i];\n  }\n  /** The final result we will return */\n\n\n  var result = {};\n\n  for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {\n    var object = objects_1[_a];\n\n    if (object == null || object === false) {\n      continue;\n    }\n\n    for (var key in object) {\n      /** Falsy values except a explicit 0 is ignored */\n      var val = object[key];\n\n      if (!val && val !== 0) {\n        continue;\n      }\n      /** if nested media or pseudo selector */\n\n\n      if (key === '$nest' && val) {\n        result[key] = result['$nest'] ? extend(result['$nest'], val) : val;\n      } else if (key.indexOf('&') !== -1 || key.indexOf('@media') === 0) {\n        result[key] = result[key] ? extend(result[key], val) : val;\n      } else {\n        result[key] = val;\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Utility to help customize styles with media queries. e.g.\n * ```\n * style(\n *  media({maxWidth:500}, {color:'red'})\n * )\n * ```\n */\n\nexport var media = function media(mediaQuery) {\n  var objects = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    objects[_i - 1] = arguments[_i];\n  }\n\n  var mediaQuerySections = [];\n  if (mediaQuery.type) mediaQuerySections.push(mediaQuery.type);\n  if (mediaQuery.orientation) mediaQuerySections.push(\"(orientation: \" + mediaQuery.orientation + \")\");\n  if (mediaQuery.minWidth) mediaQuerySections.push(\"(min-width: \" + mediaLength(mediaQuery.minWidth) + \")\");\n  if (mediaQuery.maxWidth) mediaQuerySections.push(\"(max-width: \" + mediaLength(mediaQuery.maxWidth) + \")\");\n  if (mediaQuery.minHeight) mediaQuerySections.push(\"(min-height: \" + mediaLength(mediaQuery.minHeight) + \")\");\n  if (mediaQuery.maxHeight) mediaQuerySections.push(\"(max-height: \" + mediaLength(mediaQuery.maxHeight) + \")\");\n  var stringMediaQuery = \"@media \" + mediaQuerySections.join(' and ');\n  var object = {\n    $nest: (_a = {}, _a[stringMediaQuery] = extend.apply(void 0, objects), _a)\n  };\n  return object;\n\n  var _a;\n};\n\nvar mediaLength = function mediaLength(value) {\n  return typeof value === 'string' ? value : value + \"px\";\n};","map":null,"metadata":{},"sourceType":"module"}
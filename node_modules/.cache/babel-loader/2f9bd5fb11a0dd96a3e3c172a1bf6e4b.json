{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { isMTLSEnabled } from '../types/TLSStatus';\n\nvar createIdentitySelector = function createIdentitySelector(selector) {\n  return createSelector(selector, function (x) {\n    return x;\n  });\n}; // select the proper field from Redux State\n\n\nvar activeNamespaces = function activeNamespaces(state) {\n  return state.namespaces.activeNamespaces;\n}; // Select from the above field(s) and the last function is the formatter\n\n\nexport var activeNamespacesSelector = createIdentitySelector(activeNamespaces);\n\nvar duration = function duration(state) {\n  return state.userSettings.duration;\n};\n\nexport var durationSelector = createIdentitySelector(duration);\n\nvar timeRange = function timeRange(state) {\n  return state.userSettings.timeRange;\n};\n\nexport var timeRangeSelector = createIdentitySelector(timeRange);\n\nvar namespaceFilter = function namespaceFilter(state) {\n  return state.namespaces.filter;\n};\n\nexport var namespaceFilterSelector = createIdentitySelector(namespaceFilter);\n\nvar edgeLabels = function edgeLabels(state) {\n  return state.graph.toolbarState.edgeLabels;\n};\n\nexport var edgeLabelsSelector = createIdentitySelector(edgeLabels);\n\nvar findValue = function findValue(state) {\n  return state.graph.toolbarState.findValue;\n};\n\nexport var findValueSelector = createIdentitySelector(findValue);\n\nvar graphType = function graphType(state) {\n  return state.graph.toolbarState.graphType;\n};\n\nexport var graphTypeSelector = createIdentitySelector(graphType);\n\nvar hideValue = function hideValue(state) {\n  return state.graph.toolbarState.hideValue;\n};\n\nexport var hideValueSelector = createIdentitySelector(hideValue);\n\nvar namespaceItems = function namespaceItems(state) {\n  return state.namespaces.items;\n};\n\nexport var namespaceItemsSelector = createIdentitySelector(namespaceItems);\n\nvar refreshInterval = function refreshInterval(state) {\n  return state.userSettings.refreshInterval;\n};\n\nexport var refreshIntervalSelector = createIdentitySelector(refreshInterval);\n\nvar replayActive = function replayActive(state) {\n  return state.userSettings.replayActive;\n};\n\nexport var replayActiveSelector = createIdentitySelector(replayActive);\n\nvar replayQueryTime = function replayQueryTime(state) {\n  return state.userSettings.replayQueryTime;\n};\n\nexport var replayQueryTimeSelector = createIdentitySelector(replayQueryTime);\n\nvar lastRefreshAt = function lastRefreshAt(state) {\n  return state.globalState.lastRefreshAt;\n};\n\nexport var lastRefreshAtSelector = createIdentitySelector(lastRefreshAt);\n\nvar showIdleNodes = function showIdleNodes(state) {\n  return state.graph.toolbarState.showIdleNodes;\n};\n\nexport var showIdleNodesSelector = createIdentitySelector(showIdleNodes);\n\nvar trafficRates = function trafficRates(state) {\n  return state.graph.toolbarState.trafficRates;\n};\n\nexport var trafficRatesSelector = createIdentitySelector(trafficRates);\n\nvar meshwideMTLSStatus = function meshwideMTLSStatus(state) {\n  return state.meshTLSStatus.status;\n};\n\nexport var meshWideMTLSStatusSelector = createIdentitySelector(meshwideMTLSStatus);\n\nvar meshwideMTLSEnabled = function meshwideMTLSEnabled(state) {\n  return isMTLSEnabled(state.meshTLSStatus.status);\n};\n\nexport var meshWideMTLSEnabledSelector = createIdentitySelector(meshwideMTLSEnabled);\n\nvar istioStatus = function istioStatus(state) {\n  return state.istioStatus;\n};\n\nexport var istioStatusSelector = createIdentitySelector(istioStatus);\n\nvar istioCertsInfo = function istioCertsInfo(state) {\n  return state.istioCertsInfo;\n};\n\nexport var istioCertsInfoSelector = createIdentitySelector(istioCertsInfo);","map":{"version":3,"sources":["/root/kiali-ui/src/store/Selectors.ts"],"names":["createSelector","isMTLSEnabled","createIdentitySelector","selector","x","activeNamespaces","state","namespaces","activeNamespacesSelector","duration","userSettings","durationSelector","timeRange","timeRangeSelector","namespaceFilter","filter","namespaceFilterSelector","edgeLabels","graph","toolbarState","edgeLabelsSelector","findValue","findValueSelector","graphType","graphTypeSelector","hideValue","hideValueSelector","namespaceItems","items","namespaceItemsSelector","refreshInterval","refreshIntervalSelector","replayActive","replayActiveSelector","replayQueryTime","replayQueryTimeSelector","lastRefreshAt","globalState","lastRefreshAtSelector","showIdleNodes","showIdleNodesSelector","trafficRates","trafficRatesSelector","meshwideMTLSStatus","meshTLSStatus","status","meshWideMTLSStatusSelector","meshwideMTLSEnabled","meshWideMTLSEnabledSelector","istioStatus","istioStatusSelector","istioCertsInfo","istioCertsInfoSelector"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport { KialiAppState } from './Store';\nimport { isMTLSEnabled } from '../types/TLSStatus';\nimport { TimeRange } from '../types/Common';\n// These memoized selectors are from Redux Reselect package\n\ntype Selector<T> = (state: KialiAppState) => T;\n\nconst createIdentitySelector = <T extends unknown>(selector: Selector<T>): Selector<T> =>\n  createSelector(selector, (x: T): T => x);\n\n// select the proper field from Redux State\nconst activeNamespaces = (state: KialiAppState) => state.namespaces.activeNamespaces;\n\n// Select from the above field(s) and the last function is the formatter\nexport const activeNamespacesSelector = createIdentitySelector(activeNamespaces);\n\nconst duration = (state: KialiAppState) => state.userSettings.duration;\n\nexport const durationSelector = createIdentitySelector(duration);\n\nconst timeRange = (state: KialiAppState): TimeRange => state.userSettings.timeRange;\n\nexport const timeRangeSelector = createIdentitySelector(timeRange);\n\nconst namespaceFilter = (state: KialiAppState) => state.namespaces.filter;\n\nexport const namespaceFilterSelector = createIdentitySelector(namespaceFilter);\n\nconst edgeLabels = (state: KialiAppState) => state.graph.toolbarState.edgeLabels;\n\nexport const edgeLabelsSelector = createIdentitySelector(edgeLabels);\n\nconst findValue = (state: KialiAppState) => state.graph.toolbarState.findValue;\n\nexport const findValueSelector = createIdentitySelector(findValue);\n\nconst graphType = (state: KialiAppState) => state.graph.toolbarState.graphType;\n\nexport const graphTypeSelector = createIdentitySelector(graphType);\n\nconst hideValue = (state: KialiAppState) => state.graph.toolbarState.hideValue;\n\nexport const hideValueSelector = createIdentitySelector(hideValue);\n\nconst namespaceItems = (state: KialiAppState) => state.namespaces.items;\n\nexport const namespaceItemsSelector = createIdentitySelector(namespaceItems);\n\nconst refreshInterval = (state: KialiAppState) => state.userSettings.refreshInterval;\n\nexport const refreshIntervalSelector = createIdentitySelector(refreshInterval);\n\nconst replayActive = (state: KialiAppState) => state.userSettings.replayActive;\n\nexport const replayActiveSelector = createIdentitySelector(replayActive);\n\nconst replayQueryTime = (state: KialiAppState) => state.userSettings.replayQueryTime;\n\nexport const replayQueryTimeSelector = createIdentitySelector(replayQueryTime);\n\nconst lastRefreshAt = (state: KialiAppState) => state.globalState.lastRefreshAt;\n\nexport const lastRefreshAtSelector = createIdentitySelector(lastRefreshAt);\n\nconst showIdleNodes = (state: KialiAppState) => state.graph.toolbarState.showIdleNodes;\n\nexport const showIdleNodesSelector = createIdentitySelector(showIdleNodes);\n\nconst trafficRates = (state: KialiAppState) => state.graph.toolbarState.trafficRates;\n\nexport const trafficRatesSelector = createIdentitySelector(trafficRates);\n\nconst meshwideMTLSStatus = (state: KialiAppState) => state.meshTLSStatus.status;\n\nexport const meshWideMTLSStatusSelector = createIdentitySelector(meshwideMTLSStatus);\n\nconst meshwideMTLSEnabled = (state: KialiAppState) => isMTLSEnabled(state.meshTLSStatus.status);\n\nexport const meshWideMTLSEnabledSelector = createIdentitySelector(meshwideMTLSEnabled);\n\nconst istioStatus = (state: KialiAppState) => state.istioStatus;\n\nexport const istioStatusSelector = createIdentitySelector(istioStatus);\n\nconst istioCertsInfo = (state: KialiAppState) => state.istioCertsInfo;\n\nexport const istioCertsInfoSelector = createIdentitySelector(istioCertsInfo);\n"]},"metadata":{},"sourceType":"module"}
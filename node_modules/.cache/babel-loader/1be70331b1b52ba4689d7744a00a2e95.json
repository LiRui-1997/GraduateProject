{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/Charts/KChart.tsx\";\nimport * as React from 'react';\nimport { Button, EmptyState, EmptyStateIcon, EmptyStateBody, ButtonVariant, EmptyStateVariant } from '@patternfly/react-core';\nimport { ChartArea, ChartBar, ChartScatter, ChartLine } from '@patternfly/react-charts';\nimport { CubesIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport ChartWithLegend, { LEGEND_HEIGHT, MIN_HEIGHT, MIN_HEIGHT_YAXIS } from './ChartWithLegend';\nimport { defaultIconStyle, KialiIcon } from '../../config/KialiIcon';\nimport { style } from 'typestyle';\nexport var maximizeButtonStyle = {\n  position: 'relative',\n  float: 'right'\n};\nvar emptyStyle = style({\n  padding: '0 0 0 0',\n  margin: '0 0 0 0'\n});\nvar kchartStyle = style({\n  paddingTop: 15,\n  paddingLeft: 25,\n  paddingRight: 25,\n  paddingBottom: 12\n}); // 24px (title + toolbar) + 20px (margin) + 15px (padding) + 15px (padding)\n\nvar titlePadding = 64;\nvar lineInfo = {\n  fill: false,\n  stroke: true,\n  groupOffset: 0,\n  seriesComponent: /*#__PURE__*/React.createElement(ChartLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }\n  }),\n  sizeRatio: 1.0\n};\nvar areaInfo = {\n  fill: true,\n  stroke: false,\n  groupOffset: 0,\n  seriesComponent: /*#__PURE__*/React.createElement(ChartArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }\n  }),\n  sizeRatio: 1.0\n};\nvar barInfo = {\n  fill: true,\n  stroke: false,\n  groupOffset: 7,\n  seriesComponent: /*#__PURE__*/React.createElement(ChartBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 20\n    }\n  }),\n  sizeRatio: 1 / 6\n};\nvar scatterInfo = {\n  fill: true,\n  stroke: false,\n  groupOffset: 0,\n  seriesComponent: /*#__PURE__*/React.createElement(ChartScatter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 20\n    }\n  }),\n  sizeRatio: 1 / 30\n};\n\nvar KChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(KChart, _React$Component);\n\n  var _super = _createSuper(KChart);\n\n  function KChart(props) {\n    var _this;\n\n    _classCallCheck(this, KChart);\n\n    _this = _super.call(this, props);\n\n    _this.getInnerChartHeight = function () {\n      var chartHeight = _this.props.chartHeight || 300;\n      var innerChartHeight = chartHeight - titlePadding;\n      return innerChartHeight;\n    };\n\n    _this.state = {\n      collapsed: _this.props.chart.startCollapsed || !_this.props.chart.error && _this.isEmpty()\n    };\n    return _this;\n  }\n\n  _createClass(KChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Check when there is a change on empty datapoints on a refresh to draw the chart collapsed the first time\n      // User can change the state after that point\n      var propsIsEmpty = !this.props.data.some(function (s) {\n        return s.datapoints.length !== 0;\n      });\n      var prevPropsIsEmpty = !prevProps.data.some(function (s) {\n        return s.datapoints.length !== 0;\n      });\n\n      if (propsIsEmpty !== prevPropsIsEmpty) {\n        this.setState({\n          collapsed: propsIsEmpty\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: kchartStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          minWidth: '0px',\n          display: 'inline-block',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, this.props.chart.name), this.props.onToggleMaximized && /*#__PURE__*/React.createElement(\"div\", {\n        style: maximizeButtonStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: ButtonVariant.link,\n        onClick: this.props.onToggleMaximized,\n        isInline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.Expand, {\n        className: defaultIconStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }, this.props.chart.error ? this.renderError() : this.isEmpty() ? this.renderEmpty() : this.renderChart()));\n    }\n  }, {\n    key: \"determineChartType\",\n    value: function determineChartType() {\n      if (this.props.chart.chartType === undefined) {\n        return this.props.chart.xAxis === 'series' ? barInfo : lineInfo;\n      }\n\n      var chartType = this.props.chart.chartType;\n\n      switch (chartType) {\n        case 'area':\n          return areaInfo;\n\n        case 'bar':\n          return barInfo;\n\n        case 'scatter':\n          return scatterInfo;\n\n        case 'line':\n        default:\n          return lineInfo;\n      }\n    }\n  }, {\n    key: \"renderChart\",\n    value: function renderChart() {\n      if (this.state.collapsed) {\n        return undefined;\n      }\n\n      var typeData = this.determineChartType();\n      var minDomain = this.props.chart.min === undefined ? undefined : {\n        y: this.props.chart.min\n      };\n      var maxDomain = this.props.chart.max === undefined ? undefined : {\n        y: this.props.chart.max\n      };\n      return /*#__PURE__*/React.createElement(ChartWithLegend, {\n        chartHeight: this.getInnerChartHeight(),\n        data: this.props.data,\n        seriesComponent: typeData.seriesComponent,\n        fill: typeData.fill,\n        stroke: typeData.stroke,\n        showSpans: this.props.showSpans,\n        groupOffset: typeData.groupOffset,\n        sizeRatio: typeData.sizeRatio,\n        overlay: this.props.overlay,\n        unit: this.props.chart.unit,\n        isMaximized: this.props.isMaximized,\n        moreChartProps: {\n          minDomain: minDomain,\n          maxDomain: maxDomain\n        },\n        onClick: this.props.onClick,\n        brushHandlers: this.props.brushHandlers,\n        timeWindow: this.props.timeWindow,\n        xAxis: this.props.chart.xAxis,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.props.data.some(function (s) {\n        return s.datapoints.length !== 0;\n      });\n    }\n  }, {\n    key: \"renderEmpty\",\n    value: function renderEmpty() {\n      var chartHeight = this.getInnerChartHeight();\n      return chartHeight > MIN_HEIGHT ? /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          overflow: 'hidden',\n          height: chartHeight > MIN_HEIGHT_YAXIS ? chartHeight - LEGEND_HEIGHT : chartHeight,\n          textAlign: 'center',\n          borderLeft: '2px solid #ECEFF1',\n          borderBottom: '2px solid #ECEFF1'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(EmptyState, {\n        variant: EmptyStateVariant.small,\n        className: emptyStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }\n      }, this.props.isMaximized && /*#__PURE__*/React.createElement(EmptyStateIcon, {\n        icon: CubesIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 38\n        }\n      }), /*#__PURE__*/React.createElement(EmptyStateBody, {\n        className: emptyStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }\n      }, \"No data available\"))) : undefined;\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          overflow: 'hidden',\n          height: this.getInnerChartHeight(),\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(EmptyState, {\n        variant: EmptyStateVariant.small,\n        className: emptyStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }\n      }, this.props.isMaximized && /*#__PURE__*/React.createElement(EmptyStateIcon, {\n        icon: function icon() {\n          return /*#__PURE__*/React.createElement(ErrorCircleOIcon, {\n            style: {\n              color: '#cc0000'\n            },\n            width: 32,\n            height: 32,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 41\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(EmptyStateBody, {\n        className: emptyStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, \"An error occured while fetching this metric:\", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      }, this.props.chart.error)))));\n    }\n  }]);\n\n  return KChart;\n}(React.Component);\n\nexport default KChart;","map":{"version":3,"sources":["/root/GraduateProject/src/components/Charts/KChart.tsx"],"names":["React","Button","EmptyState","EmptyStateIcon","EmptyStateBody","ButtonVariant","EmptyStateVariant","ChartArea","ChartBar","ChartScatter","ChartLine","CubesIcon","ErrorCircleOIcon","ChartWithLegend","LEGEND_HEIGHT","MIN_HEIGHT","MIN_HEIGHT_YAXIS","defaultIconStyle","KialiIcon","style","maximizeButtonStyle","position","float","emptyStyle","padding","margin","kchartStyle","paddingTop","paddingLeft","paddingRight","paddingBottom","titlePadding","lineInfo","fill","stroke","groupOffset","seriesComponent","sizeRatio","areaInfo","barInfo","scatterInfo","KChart","props","getInnerChartHeight","chartHeight","innerChartHeight","state","collapsed","chart","startCollapsed","error","isEmpty","prevProps","propsIsEmpty","data","some","s","datapoints","length","prevPropsIsEmpty","setState","display","justifyContent","minWidth","whiteSpace","overflow","textOverflow","name","onToggleMaximized","link","marginTop","renderError","renderEmpty","renderChart","chartType","undefined","xAxis","typeData","determineChartType","minDomain","min","y","maxDomain","max","showSpans","overlay","unit","isMaximized","onClick","brushHandlers","timeWindow","alignItems","height","textAlign","borderLeft","borderBottom","small","color","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  ButtonVariant,\n  EmptyStateVariant\n} from '@patternfly/react-core';\nimport { ChartArea, ChartBar, ChartScatter, ChartLine } from '@patternfly/react-charts';\nimport { CubesIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\n\nimport { ChartModel } from 'types/Dashboards';\nimport { VCLines, RawOrBucket, RichDataPoint, LineInfo } from 'types/VictoryChartInfo';\nimport { Overlay } from 'types/Overlay';\nimport ChartWithLegend, { LEGEND_HEIGHT, MIN_HEIGHT, MIN_HEIGHT_YAXIS } from './ChartWithLegend';\nimport { BrushHandlers } from './Container';\nimport { defaultIconStyle, KialiIcon } from '../../config/KialiIcon';\nimport { style } from 'typestyle';\n\ntype KChartProps<T extends LineInfo> = {\n  chart: ChartModel;\n  chartHeight?: number;\n  data: VCLines<RichDataPoint>;\n  isMaximized: boolean;\n  onToggleMaximized: () => void;\n  onClick?: (datum: RawOrBucket<T>) => void;\n  showSpans: boolean;\n  brushHandlers?: BrushHandlers;\n  overlay?: Overlay<T>;\n  timeWindow?: [Date, Date];\n};\n\nexport const maximizeButtonStyle: React.CSSProperties = {\n  position: 'relative',\n  float: 'right'\n};\n\nconst emptyStyle = style({\n  padding: '0 0 0 0',\n  margin: '0 0 0 0'\n});\n\nconst kchartStyle = style({\n  paddingTop: 15,\n  paddingLeft: 25,\n  paddingRight: 25,\n  paddingBottom: 12\n});\n\n// 24px (title + toolbar) + 20px (margin) + 15px (padding) + 15px (padding)\nconst titlePadding = 64;\n\ntype State = {\n  collapsed: boolean;\n};\n\ntype ChartTypeData = {\n  fill: boolean;\n  stroke: boolean;\n  groupOffset: number;\n  seriesComponent: React.ReactElement;\n  sizeRatio: number;\n};\n\nconst lineInfo: ChartTypeData = {\n  fill: false,\n  stroke: true,\n  groupOffset: 0,\n  seriesComponent: <ChartLine />,\n  sizeRatio: 1.0\n};\nconst areaInfo: ChartTypeData = {\n  fill: true,\n  stroke: false,\n  groupOffset: 0,\n  seriesComponent: <ChartArea />,\n  sizeRatio: 1.0\n};\nconst barInfo: ChartTypeData = {\n  fill: true,\n  stroke: false,\n  groupOffset: 7,\n  seriesComponent: <ChartBar />,\n  sizeRatio: 1 / 6\n};\nconst scatterInfo: ChartTypeData = {\n  fill: true,\n  stroke: false,\n  groupOffset: 0,\n  seriesComponent: <ChartScatter />,\n  sizeRatio: 1 / 30\n};\n\nclass KChart<T extends LineInfo> extends React.Component<KChartProps<T>, State> {\n  constructor(props: KChartProps<T>) {\n    super(props);\n    this.state = {\n      collapsed: this.props.chart.startCollapsed || (!this.props.chart.error && this.isEmpty())\n    };\n  }\n\n  componentDidUpdate(prevProps: KChartProps<T>) {\n    // Check when there is a change on empty datapoints on a refresh to draw the chart collapsed the first time\n    // User can change the state after that point\n    const propsIsEmpty = !this.props.data.some(s => s.datapoints.length !== 0);\n    const prevPropsIsEmpty = !prevProps.data.some(s => s.datapoints.length !== 0);\n    if (propsIsEmpty !== prevPropsIsEmpty) {\n      this.setState({\n        collapsed: propsIsEmpty\n      });\n    }\n  }\n\n  private getInnerChartHeight = (): number => {\n    const chartHeight: number = this.props.chartHeight || 300;\n    const innerChartHeight = chartHeight - titlePadding;\n    return innerChartHeight;\n  };\n\n  render() {\n    return (\n      <div className={kchartStyle}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between'\n          }}\n        >\n          <div\n            style={{\n              minWidth: '0px',\n              display: 'inline-block',\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis'\n            }}\n          >\n            {this.props.chart.name}\n          </div>\n          {this.props.onToggleMaximized && (\n            <div style={maximizeButtonStyle}>\n              <Button variant={ButtonVariant.link} onClick={this.props.onToggleMaximized} isInline>\n                <KialiIcon.Expand className={defaultIconStyle} />\n              </Button>\n            </div>\n          )}\n        </div>\n        <div style={{ marginTop: 20 }}>\n          {this.props.chart.error ? this.renderError() : this.isEmpty() ? this.renderEmpty() : this.renderChart()}\n        </div>\n      </div>\n    );\n  }\n\n  private determineChartType() {\n    if (this.props.chart.chartType === undefined) {\n      return this.props.chart.xAxis === 'series' ? barInfo : lineInfo;\n    }\n    const chartType = this.props.chart.chartType;\n    switch (chartType) {\n      case 'area':\n        return areaInfo;\n      case 'bar':\n        return barInfo;\n      case 'scatter':\n        return scatterInfo;\n      case 'line':\n      default:\n        return lineInfo;\n    }\n  }\n\n  private renderChart() {\n    if (this.state.collapsed) {\n      return undefined;\n    }\n    const typeData = this.determineChartType();\n    const minDomain = this.props.chart.min === undefined ? undefined : { y: this.props.chart.min };\n    const maxDomain = this.props.chart.max === undefined ? undefined : { y: this.props.chart.max };\n    return (\n      <ChartWithLegend\n        chartHeight={this.getInnerChartHeight()}\n        data={this.props.data}\n        seriesComponent={typeData.seriesComponent}\n        fill={typeData.fill}\n        stroke={typeData.stroke}\n        showSpans={this.props.showSpans}\n        groupOffset={typeData.groupOffset}\n        sizeRatio={typeData.sizeRatio}\n        overlay={this.props.overlay}\n        unit={this.props.chart.unit}\n        isMaximized={this.props.isMaximized}\n        moreChartProps={{ minDomain: minDomain, maxDomain: maxDomain }}\n        onClick={this.props.onClick}\n        brushHandlers={this.props.brushHandlers}\n        timeWindow={this.props.timeWindow}\n        xAxis={this.props.chart.xAxis}\n      />\n    );\n  }\n\n  private isEmpty(): boolean {\n    return !this.props.data.some(s => s.datapoints.length !== 0);\n  }\n\n  private renderEmpty() {\n    const chartHeight = this.getInnerChartHeight();\n    return chartHeight > MIN_HEIGHT ? (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          overflow: 'hidden',\n          height: chartHeight > MIN_HEIGHT_YAXIS ? chartHeight - LEGEND_HEIGHT : chartHeight,\n          textAlign: 'center',\n          borderLeft: '2px solid #ECEFF1',\n          borderBottom: '2px solid #ECEFF1'\n        }}\n      >\n        <EmptyState variant={EmptyStateVariant.small} className={emptyStyle}>\n          {this.props.isMaximized && <EmptyStateIcon icon={CubesIcon} />}\n          <EmptyStateBody className={emptyStyle}>No data available</EmptyStateBody>\n        </EmptyState>\n      </div>\n    ) : undefined;\n  }\n\n  private renderError() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          overflow: 'hidden',\n          height: this.getInnerChartHeight(),\n          textAlign: 'center'\n        }}\n      >\n        <EmptyState variant={EmptyStateVariant.small} className={emptyStyle}>\n          {this.props.isMaximized && (\n            <EmptyStateIcon icon={() => <ErrorCircleOIcon style={{ color: '#cc0000' }} width={32} height={32} />} />\n          )}\n          <EmptyStateBody className={emptyStyle}>\n            An error occured while fetching this metric:\n            <p>\n              <i>{this.props.chart.error}</i>\n            </p>\n          </EmptyStateBody>\n        </EmptyState>\n      </div>\n    );\n  }\n}\n\nexport default KChart;\n"]},"metadata":{},"sourceType":"module"}
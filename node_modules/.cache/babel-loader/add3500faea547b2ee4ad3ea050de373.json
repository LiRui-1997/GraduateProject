{"ast":null,"code":"import { DEGRADED, FAILURE, HEALTHY, NA } from './Health';\nimport { ValidationTypes } from './IstioObjects';\nvar higherThan = ['error-warning', 'error-improvement', 'error-correct', 'warning-improvement', 'warning-correct', 'improvement-correct'];\nexport var higherSeverity = function higherSeverity(a, b) {\n  return higherThan.includes(a + '-' + b);\n};\nexport var highestSeverity = function highestSeverity(checks) {\n  var severity = ValidationTypes.Correct;\n  checks.forEach(function (check) {\n    if (higherSeverity(check.severity, severity)) {\n      severity = check.severity;\n    }\n  });\n  return severity;\n};\nexport var validationToHealth = function validationToHealth(severity) {\n  var status = NA;\n\n  if (severity === ValidationTypes.Correct) {\n    status = HEALTHY;\n  } else if (severity === ValidationTypes.Warning) {\n    status = DEGRADED;\n  } else if (severity === ValidationTypes.Error) {\n    status = FAILURE;\n  }\n\n  return status;\n};\n\nvar numberOfChecks = function numberOfChecks(type, object) {\n  return (object && object.checks ? object.checks : []).filter(function (i) {\n    return i.severity === type;\n  }).length;\n};\n\nexport var validationToSeverity = function validationToSeverity(object) {\n  var warnChecks = numberOfChecks(ValidationTypes.Warning, object);\n  var errChecks = numberOfChecks(ValidationTypes.Error, object);\n  return errChecks > 0 ? ValidationTypes.Error : warnChecks > 0 ? ValidationTypes.Warning : ValidationTypes.Correct;\n};\nexport var checkForPath = function checkForPath(object, path) {\n  if (!object || !object.checks) {\n    return [];\n  }\n\n  return object.checks.filter(function (item) {\n    return item.path === path;\n  });\n};\nexport var globalChecks = function globalChecks(object) {\n  return checkForPath(object, '');\n};","map":{"version":3,"sources":["/root/GraduateProject/src/types/ServiceInfo.ts"],"names":["DEGRADED","FAILURE","HEALTHY","NA","ValidationTypes","higherThan","higherSeverity","a","b","includes","highestSeverity","checks","severity","Correct","forEach","check","validationToHealth","status","Warning","Error","numberOfChecks","type","object","filter","i","length","validationToSeverity","warnChecks","errChecks","checkForPath","path","item","globalChecks"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,EAArC,QAAsE,UAAtE;AACA,SAKEC,eALF,QAOO,gBAPP;AA8DA,IAAMC,UAAU,GAAG,CACjB,eADiB,EAEjB,mBAFiB,EAGjB,eAHiB,EAIjB,qBAJiB,EAKjB,iBALiB,EAMjB,qBANiB,CAAnB;AASA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAqBC,CAArB,EAAqD;AACjF,SAAOH,UAAU,CAACI,QAAX,CAAoBF,CAAC,GAAG,GAAJ,GAAUC,CAA9B,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAA4C;AACzE,MAAIC,QAAyB,GAAGR,eAAe,CAACS,OAAhD;AAEAF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,QAAIT,cAAc,CAACS,KAAK,CAACH,QAAP,EAAiBA,QAAjB,CAAlB,EAA8C;AAC5CA,MAAAA,QAAQ,GAAGG,KAAK,CAACH,QAAjB;AACD;AACF,GAJD;AAMA,SAAOA,QAAP;AACD,CAVM;AAYP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACJ,QAAD,EAAuC;AACvE,MAAIK,MAAc,GAAGd,EAArB;;AACA,MAAIS,QAAQ,KAAKR,eAAe,CAACS,OAAjC,EAA0C;AACxCI,IAAAA,MAAM,GAAGf,OAAT;AACD,GAFD,MAEO,IAAIU,QAAQ,KAAKR,eAAe,CAACc,OAAjC,EAA0C;AAC/CD,IAAAA,MAAM,GAAGjB,QAAT;AACD,GAFM,MAEA,IAAIY,QAAQ,KAAKR,eAAe,CAACe,KAAjC,EAAwC;AAC7CF,IAAAA,MAAM,GAAGhB,OAAT;AACD;;AACD,SAAOgB,MAAP;AACD,CAVM;;AAYP,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAwBC,MAAxB;AAAA,SACrB,CAACA,MAAM,IAAIA,MAAM,CAACX,MAAjB,GAA0BW,MAAM,CAACX,MAAjC,GAA0C,EAA3C,EAA+CY,MAA/C,CAAsD,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACZ,QAAF,KAAeS,IAAnB;AAAA,GAAvD,EAAgFI,MAD3D;AAAA,CAAvB;;AAGA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACJ,MAAD,EAA+C;AACjF,MAAMK,UAAU,GAAGP,cAAc,CAAChB,eAAe,CAACc,OAAjB,EAA0BI,MAA1B,CAAjC;AACA,MAAMM,SAAS,GAAGR,cAAc,CAAChB,eAAe,CAACe,KAAjB,EAAwBG,MAAxB,CAAhC;AACA,SAAOM,SAAS,GAAG,CAAZ,GAAgBxB,eAAe,CAACe,KAAhC,GAAwCQ,UAAU,GAAG,CAAb,GAAiBvB,eAAe,CAACc,OAAjC,GAA2Cd,eAAe,CAACS,OAA1G;AACD,CAJM;AAMP,OAAO,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CAACP,MAAD,EAAuCQ,IAAvC,EAAuE;AACjG,MAAI,CAACR,MAAD,IAAW,CAACA,MAAM,CAACX,MAAvB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,SAAOW,MAAM,CAACX,MAAP,CAAcY,MAAd,CAAqB,UAAAQ,IAAI,EAAI;AAClC,WAAOA,IAAI,CAACD,IAAL,KAAcA,IAArB;AACD,GAFM,CAAP;AAGD,CARM;AAUP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACV,MAAD,EAA6C;AACvE,SAAOO,YAAY,CAACP,MAAD,EAAS,EAAT,CAAnB;AACD,CAFM","sourcesContent":["import { DEGRADED, FAILURE, HEALTHY, NA, ServiceHealth, Status } from './Health';\nimport {\n  DestinationRules,\n  ObjectCheck,\n  ObjectValidation,\n  Validations,\n  ValidationTypes,\n  VirtualServices\n} from './IstioObjects';\nimport { TLSStatus } from './TLSStatus';\nimport { AdditionalItem } from './Workload';\n\nexport interface ServicePort {\n  name: string;\n  port: number;\n  protocol: string;\n}\n\nexport interface Endpoints {\n  addresses?: EndpointAddress[];\n  ports?: ServicePort[];\n}\n\ninterface EndpointAddress {\n  ip: string;\n  kind?: string;\n  name?: string;\n}\n\nexport interface WorkloadOverview {\n  name: string;\n  type: string;\n  istioSidecar: boolean;\n  labels?: { [key: string]: string };\n  resourceVersion: string;\n  createdAt: string;\n}\n\nexport interface Service {\n  type: string;\n  name: string;\n  createdAt: string;\n  resourceVersion: string;\n  ip: string;\n  ports?: ServicePort[];\n  externalName: string;\n  labels?: { [key: string]: string };\n  selectors?: { [key: string]: string };\n}\n\nexport interface ServiceDetailsInfo {\n  service: Service;\n  endpoints?: Endpoints[];\n  istioSidecar: boolean;\n  virtualServices: VirtualServices;\n  destinationRules: DestinationRules;\n  health?: ServiceHealth;\n  workloads?: WorkloadOverview[];\n  namespaceMTLS?: TLSStatus;\n  validations: Validations;\n  additionalDetails: AdditionalItem[];\n}\n\nconst higherThan = [\n  'error-warning',\n  'error-improvement',\n  'error-correct',\n  'warning-improvement',\n  'warning-correct',\n  'improvement-correct'\n];\n\nexport const higherSeverity = (a: ValidationTypes, b: ValidationTypes): boolean => {\n  return higherThan.includes(a + '-' + b);\n};\n\nexport const highestSeverity = (checks: ObjectCheck[]): ValidationTypes => {\n  let severity: ValidationTypes = ValidationTypes.Correct;\n\n  checks.forEach(check => {\n    if (higherSeverity(check.severity, severity)) {\n      severity = check.severity;\n    }\n  });\n\n  return severity;\n};\n\nexport const validationToHealth = (severity: ValidationTypes): Status => {\n  let status: Status = NA;\n  if (severity === ValidationTypes.Correct) {\n    status = HEALTHY;\n  } else if (severity === ValidationTypes.Warning) {\n    status = DEGRADED;\n  } else if (severity === ValidationTypes.Error) {\n    status = FAILURE;\n  }\n  return status;\n};\n\nconst numberOfChecks = (type: ValidationTypes, object: ObjectValidation) =>\n  (object && object.checks ? object.checks : []).filter(i => i.severity === type).length;\n\nexport const validationToSeverity = (object: ObjectValidation): ValidationTypes => {\n  const warnChecks = numberOfChecks(ValidationTypes.Warning, object);\n  const errChecks = numberOfChecks(ValidationTypes.Error, object);\n  return errChecks > 0 ? ValidationTypes.Error : warnChecks > 0 ? ValidationTypes.Warning : ValidationTypes.Correct;\n};\n\nexport const checkForPath = (object: ObjectValidation | undefined, path: string): ObjectCheck[] => {\n  if (!object || !object.checks) {\n    return [];\n  }\n\n  return object.checks.filter(item => {\n    return item.path === path;\n  });\n};\n\nexport const globalChecks = (object: ObjectValidation): ObjectCheck[] => {\n  return checkForPath(object, '');\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/MetricsOptions/MetricsSettingsDropdown.tsx\";\nimport * as React from 'react';\nimport { Divider, Dropdown, DropdownToggle, DropdownToggleCheckbox, Radio } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport isEqual from 'lodash/isEqual';\nimport history, { URLParam } from '../../app/History';\nimport { allQuantiles } from './MetricsSettings';\nimport { mergeLabelFilter, prettyLabelValues, combineLabelsSettings, retrieveMetricsSettings } from 'components/Metrics/Helper';\nimport { PFColors } from '../Pf/PfColors';\nvar checkboxSelectAllStyle = style({\n  marginLeft: 10,\n  fontWeight: 700\n});\nvar checkboxStyle = style({\n  marginLeft: 10\n});\nvar secondLevelStyle = style({\n  marginLeft: 18\n});\nvar spacerStyle = style({\n  height: '1em'\n});\nexport var MetricsSettingsDropdown = /*#__PURE__*/function (_React$Component) {\n  _inherits(MetricsSettingsDropdown, _React$Component);\n\n  var _super = _createSuper(MetricsSettingsDropdown);\n\n  function MetricsSettingsDropdown(props) {\n    var _this;\n\n    _classCallCheck(this, MetricsSettingsDropdown);\n\n    _this = _super.call(this, props);\n\n    _this.checkSelected = function () {\n      var allSelected = true;\n\n      _this.state.labelsSettings.forEach(function (lblSetting) {\n        if (lblSetting.checked === false) {\n          allSelected = false;\n        } else {\n          Object.keys(lblSetting.values).forEach(function (value) {\n            if (lblSetting.values[value] === false) {\n              allSelected = false;\n            }\n          });\n        }\n      });\n\n      _this.setState({\n        allSelected: allSelected\n      });\n    };\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.onGroupingChanged = function (label, checked) {\n      var objLbl = _this.state.labelsSettings.get(label);\n\n      if (objLbl) {\n        objLbl.checked = checked;\n      }\n\n      _this.updateLabelsSettingsURL(_this.state.labelsSettings);\n\n      _this.setState({\n        labelsSettings: new Map(_this.state.labelsSettings)\n      }, function () {\n        _this.props.onChanged(_this.state);\n\n        _this.checkSelected();\n      });\n    };\n\n    _this.onLabelsFiltersChanged = function (label, value, checked, singleSelection) {\n      var newValues = mergeLabelFilter(_this.state.labelsSettings, label, value, checked, singleSelection);\n\n      _this.updateLabelsSettingsURL(newValues);\n\n      _this.setState({\n        labelsSettings: newValues\n      }, function () {\n        _this.props.onLabelsFiltersChanged(newValues);\n\n        _this.checkSelected();\n      });\n    };\n\n    _this.updateLabelsSettingsURL = function (labelsSettings) {\n      // E.g.: bylbl=version=v1,v2,v4\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.delete(URLParam.BY_LABELS);\n      labelsSettings.forEach(function (lbl, name) {\n        if (lbl.checked) {\n          var filters = Object.keys(lbl.values).filter(function (k) {\n            return lbl.values[k];\n          }).join(',');\n\n          if (filters) {\n            urlParams.append(URLParam.BY_LABELS, name + '=' + filters);\n          } else {\n            urlParams.append(URLParam.BY_LABELS, name);\n          }\n        }\n      });\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n    };\n\n    _this.onHistogramAverageChanged = function (checked) {\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.set(URLParam.SHOW_AVERAGE, String(checked));\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n\n      _this.setState({\n        showAverage: checked\n      }, function () {\n        return _this.props.onChanged(_this.state);\n      });\n    };\n\n    _this.onHistogramOptionsChanged = function (quantile, checked) {\n      var newQuantiles = checked ? [quantile].concat(_this.state.showQuantiles) : _this.state.showQuantiles.filter(function (q) {\n        return quantile !== q;\n      });\n      var urlParams = new URLSearchParams(history.location.search);\n      urlParams.set(URLParam.QUANTILES, newQuantiles.join(' '));\n      history.replace(history.location.pathname + '?' + urlParams.toString());\n\n      _this.setState({\n        showQuantiles: newQuantiles\n      }, function () {\n        return _this.props.onChanged(_this.state);\n      });\n    };\n\n    _this.bulkUpdate = function (selected) {\n      _this.state.labelsSettings.forEach(function (lblSetting) {\n        lblSetting.checked = selected;\n        Object.keys(lblSetting.values).forEach(function (value) {\n          lblSetting.values[value] = selected;\n        });\n      });\n\n      _this.updateLabelsSettingsURL(_this.state.labelsSettings);\n\n      _this.setState({\n        labelsSettings: new Map(_this.state.labelsSettings)\n      }, function () {\n        _this.props.onChanged(_this.state);\n      });\n    };\n\n    _this.onBulkAll = function () {\n      _this.bulkUpdate(true);\n\n      _this.setState({\n        allSelected: true\n      });\n    };\n\n    _this.onBulkNone = function () {\n      _this.bulkUpdate(false);\n\n      _this.setState({\n        allSelected: false\n      });\n    };\n\n    var settings = retrieveMetricsSettings();\n    settings.labelsSettings = combineLabelsSettings(props.labelsSettings, settings.labelsSettings);\n    _this.state = _objectSpread(_objectSpread({}, settings), {}, {\n      isOpen: false,\n      allSelected: false\n    });\n    return _this;\n  }\n\n  _createClass(MetricsSettingsDropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // TODO Move the sync of URL and state to a global place\n      var changeDirection = prevProps.direction !== this.props.direction;\n      var settings = retrieveMetricsSettings();\n      var initLabelSettings = changeDirection ? settings.labelsSettings : new Map();\n      var stateLabelsSettings = changeDirection ? initLabelSettings : this.state.labelsSettings;\n      var labelsSettings = combineLabelsSettings(this.props.labelsSettings, stateLabelsSettings);\n\n      if (!isEqual(stateLabelsSettings, labelsSettings) || changeDirection) {\n        this.setState(function (prevState) {\n          return {\n            labelsSettings: labelsSettings,\n            showQuantiles: changeDirection ? settings.showQuantiles : prevState.showQuantiles,\n            showAverage: changeDirection ? settings.showAverage : prevState.showAverage,\n            showSpans: changeDirection ? settings.showSpans : prevState.showSpans\n          };\n        }, this.checkSelected);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var hasHistograms = this.props.hasHistograms;\n      var hasLabels = this.state.labelsSettings.size > 0;\n\n      if (!hasHistograms && !hasLabels) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        toggle: /*#__PURE__*/React.createElement(DropdownToggle, {\n          onToggle: this.onToggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }\n        }, \"Metrics Settings\"),\n        isOpen: this.state.isOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          paddingLeft: '10px',\n          backgroundColor: PFColors.White\n        },\n        className: \"pf-c-dropdown__menu-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, hasLabels && this.renderBulkSelector(), hasLabels && this.renderLabelOptions(), hasHistograms && this.renderHistogramOptions()));\n    }\n  }, {\n    key: \"renderBulkSelector\",\n    value: function renderBulkSelector() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DropdownToggleCheckbox, {\n        id: \"bulk-select-id\",\n        key: \"bulk-select-key\",\n        \"aria-label\": \"Select all metric/label filters\",\n        isChecked: this.state.allSelected,\n        onClick: function onClick() {\n          if (_this2.state.allSelected) {\n            _this2.onBulkNone();\n          } else {\n            _this2.onBulkAll();\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: checkboxSelectAllStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }\n      }, \"Select all metric/label filters\"), /*#__PURE__*/React.createElement(Divider, {\n        style: {\n          paddingTop: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"renderLabelOptions\",\n    value: function renderLabelOptions() {\n      var _this3 = this;\n\n      var displayGroupingLabels = [];\n      this.state.labelsSettings.forEach(function (lblObj, promName) {\n        var labelsHTML = lblObj.checked && lblObj.values ? Object.keys(lblObj.values).map(function (val) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: 'groupings_' + promName + '_' + val,\n            className: secondLevelStyle,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }\n          }, lblObj.singleSelection ? /*#__PURE__*/React.createElement(Radio, {\n            isChecked: lblObj.values[val],\n            id: val,\n            onChange: function onChange(_) {\n              return _this3.onLabelsFiltersChanged(promName, val, true, true);\n            },\n            label: prettyLabelValues(promName, val),\n            name: val,\n            value: val,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }\n          }) : /*#__PURE__*/React.createElement(\"label\", {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", {\n            type: \"checkbox\",\n            checked: lblObj.values[val],\n            onChange: function onChange(event) {\n              return _this3.onLabelsFiltersChanged(promName, val, event.target.checked, false);\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 21\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: checkboxStyle,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 21\n            }\n          }, prettyLabelValues(promName, val))));\n        }) : null;\n        displayGroupingLabels.push( /*#__PURE__*/React.createElement(\"div\", {\n          key: 'groupings_' + promName,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: lblObj.checked,\n          onChange: function onChange(event) {\n            return _this3.onGroupingChanged(promName, event.target.checked);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: checkboxStyle,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }\n        }, lblObj.displayName)), labelsHTML));\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }\n      }, \"Show metrics by:\"), displayGroupingLabels, /*#__PURE__*/React.createElement(\"div\", {\n        className: spacerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"renderHistogramOptions\",\n    value: function renderHistogramOptions() {\n      var _this4 = this;\n\n      // Prettier removes the parenthesis introducing JSX\n      // prettier-ignore\n      var displayHistogramOptions = [/*#__PURE__*/React.createElement(\"div\", {\n        key: 'histo_avg',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: this.state.showAverage,\n        onChange: function onChange(event) {\n          return _this4.onHistogramAverageChanged(event.target.checked);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: checkboxStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, \"Average\")))].concat(allQuantiles.map(function (o, idx) {\n        var checked = _this4.state.showQuantiles.includes(o);\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: 'histo_' + idx,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: checked,\n          onChange: function onChange(event) {\n            return _this4.onHistogramOptionsChanged(o, event.target.checked);\n          },\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: checkboxStyle,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }\n        }, \"Quantile \", o)));\n      }));\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      }, \"Histograms:\"), displayHistogramOptions, /*#__PURE__*/React.createElement(\"div\", {\n        className: spacerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return MetricsSettingsDropdown;\n}(React.Component);","map":{"version":3,"sources":["/root/kiali-ui/src/components/MetricsOptions/MetricsSettingsDropdown.tsx"],"names":["React","Divider","Dropdown","DropdownToggle","DropdownToggleCheckbox","Radio","style","isEqual","history","URLParam","allQuantiles","mergeLabelFilter","prettyLabelValues","combineLabelsSettings","retrieveMetricsSettings","PFColors","checkboxSelectAllStyle","marginLeft","fontWeight","checkboxStyle","secondLevelStyle","spacerStyle","height","MetricsSettingsDropdown","props","checkSelected","allSelected","state","labelsSettings","forEach","lblSetting","checked","Object","keys","values","value","setState","onToggle","isOpen","onGroupingChanged","label","objLbl","get","updateLabelsSettingsURL","Map","onChanged","onLabelsFiltersChanged","singleSelection","newValues","urlParams","URLSearchParams","location","search","delete","BY_LABELS","lbl","name","filters","filter","k","join","append","replace","pathname","toString","onHistogramAverageChanged","set","SHOW_AVERAGE","String","showAverage","onHistogramOptionsChanged","quantile","newQuantiles","concat","showQuantiles","q","QUANTILES","bulkUpdate","selected","onBulkAll","onBulkNone","settings","prevProps","changeDirection","direction","initLabelSettings","stateLabelsSettings","prevState","showSpans","hasHistograms","hasLabels","size","paddingLeft","backgroundColor","White","renderBulkSelector","renderLabelOptions","renderHistogramOptions","paddingTop","displayGroupingLabels","lblObj","promName","labelsHTML","map","val","_","event","target","push","displayName","displayHistogramOptions","o","idx","includes","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Divider, Dropdown, DropdownToggle, DropdownToggleCheckbox, Radio } from '@patternfly/react-core';\nimport { style } from 'typestyle';\nimport isEqual from 'lodash/isEqual';\n\nimport history, { URLParam } from '../../app/History';\nimport { MetricsSettings, Quantiles, allQuantiles, LabelsSettings } from './MetricsSettings';\nimport {\n  mergeLabelFilter,\n  prettyLabelValues,\n  combineLabelsSettings,\n  retrieveMetricsSettings\n} from 'components/Metrics/Helper';\nimport { PFColors } from '../Pf/PfColors';\nimport { PromLabel } from 'types/Metrics';\n\ninterface Props {\n  onChanged: (state: MetricsSettings) => void;\n  onLabelsFiltersChanged: (labelsFilters: LabelsSettings) => void;\n  direction: string;\n  hasHistograms: boolean;\n  labelsSettings: LabelsSettings;\n}\n\ntype State = MetricsSettings & {\n  isOpen: boolean;\n  allSelected: boolean;\n};\n\nconst checkboxSelectAllStyle = style({ marginLeft: 10, fontWeight: 700 });\nconst checkboxStyle = style({ marginLeft: 10 });\nconst secondLevelStyle = style({ marginLeft: 18 });\nconst spacerStyle = style({ height: '1em' });\n\nexport class MetricsSettingsDropdown extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const settings = retrieveMetricsSettings();\n    settings.labelsSettings = combineLabelsSettings(props.labelsSettings, settings.labelsSettings);\n    this.state = { ...settings, isOpen: false, allSelected: false };\n  }\n\n  checkSelected = () => {\n    let allSelected = true;\n    this.state.labelsSettings.forEach(lblSetting => {\n      if (lblSetting.checked === false) {\n        allSelected = false;\n      } else {\n        Object.keys(lblSetting.values).forEach(value => {\n          if (lblSetting.values[value] === false) {\n            allSelected = false;\n          }\n        });\n      }\n    });\n\n    this.setState({ allSelected: allSelected });\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    // TODO Move the sync of URL and state to a global place\n    const changeDirection = prevProps.direction !== this.props.direction;\n    const settings = retrieveMetricsSettings();\n    let initLabelSettings = changeDirection ? settings.labelsSettings : new Map();\n    const stateLabelsSettings = changeDirection ? initLabelSettings : this.state.labelsSettings;\n    const labelsSettings = combineLabelsSettings(this.props.labelsSettings, stateLabelsSettings);\n    if (!isEqual(stateLabelsSettings, labelsSettings) || changeDirection) {\n      this.setState(prevState => {\n        return {\n          labelsSettings: labelsSettings,\n          showQuantiles: changeDirection ? settings.showQuantiles : prevState.showQuantiles,\n          showAverage: changeDirection ? settings.showAverage : prevState.showAverage,\n          showSpans: changeDirection ? settings.showSpans : prevState.showSpans\n        };\n      }, this.checkSelected);\n    }\n  }\n\n  private onToggle = isOpen => {\n    this.setState({ isOpen: isOpen });\n  };\n\n  onGroupingChanged = (label: PromLabel, checked: boolean) => {\n    const objLbl = this.state.labelsSettings.get(label);\n    if (objLbl) {\n      objLbl.checked = checked;\n    }\n\n    this.updateLabelsSettingsURL(this.state.labelsSettings);\n\n    this.setState(\n      {\n        labelsSettings: new Map(this.state.labelsSettings)\n      },\n      () => {\n        this.props.onChanged(this.state);\n        this.checkSelected();\n      }\n    );\n  };\n\n  onLabelsFiltersChanged = (label: PromLabel, value: string, checked: boolean, singleSelection: boolean) => {\n    const newValues = mergeLabelFilter(this.state.labelsSettings, label, value, checked, singleSelection);\n    this.updateLabelsSettingsURL(newValues);\n    this.setState({ labelsSettings: newValues }, () => {\n      this.props.onLabelsFiltersChanged(newValues);\n      this.checkSelected();\n    });\n  };\n\n  updateLabelsSettingsURL = (labelsSettings: LabelsSettings) => {\n    // E.g.: bylbl=version=v1,v2,v4\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.delete(URLParam.BY_LABELS);\n    labelsSettings.forEach((lbl, name) => {\n      if (lbl.checked) {\n        const filters = Object.keys(lbl.values)\n          .filter(k => lbl.values[k])\n          .join(',');\n        if (filters) {\n          urlParams.append(URLParam.BY_LABELS, name + '=' + filters);\n        } else {\n          urlParams.append(URLParam.BY_LABELS, name);\n        }\n      }\n    });\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n  };\n\n  onHistogramAverageChanged = (checked: boolean) => {\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.set(URLParam.SHOW_AVERAGE, String(checked));\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n\n    this.setState({ showAverage: checked }, () => this.props.onChanged(this.state));\n  };\n\n  onHistogramOptionsChanged = (quantile: Quantiles, checked: boolean) => {\n    const newQuantiles = checked\n      ? [quantile].concat(this.state.showQuantiles)\n      : this.state.showQuantiles.filter(q => quantile !== q);\n\n    const urlParams = new URLSearchParams(history.location.search);\n    urlParams.set(URLParam.QUANTILES, newQuantiles.join(' '));\n    history.replace(history.location.pathname + '?' + urlParams.toString());\n\n    this.setState({ showQuantiles: newQuantiles }, () => this.props.onChanged(this.state));\n  };\n\n  bulkUpdate = (selected: boolean): void => {\n    this.state.labelsSettings.forEach(lblSetting => {\n      lblSetting.checked = selected;\n\n      Object.keys(lblSetting.values).forEach(value => {\n        lblSetting.values[value] = selected;\n      });\n    });\n\n    this.updateLabelsSettingsURL(this.state.labelsSettings);\n\n    this.setState(\n      {\n        labelsSettings: new Map(this.state.labelsSettings)\n      },\n      () => {\n        this.props.onChanged(this.state);\n      }\n    );\n  };\n\n  onBulkAll = () => {\n    this.bulkUpdate(true);\n    this.setState({ allSelected: true });\n  };\n\n  onBulkNone = () => {\n    this.bulkUpdate(false);\n    this.setState({ allSelected: false });\n  };\n\n  render() {\n    const hasHistograms = this.props.hasHistograms;\n    const hasLabels = this.state.labelsSettings.size > 0;\n    if (!hasHistograms && !hasLabels) {\n      return null;\n    }\n    return (\n      <Dropdown\n        toggle={<DropdownToggle onToggle={this.onToggle}>Metrics Settings</DropdownToggle>}\n        isOpen={this.state.isOpen}\n      >\n        {/* TODO: Remove the class=\"pf-c-dropdown__menu-item\" attribute which is fixing a sizing issue in PF.\n         * https://github.com/patternfly/patternfly-react/issues/3156 */}\n        <div style={{ paddingLeft: '10px', backgroundColor: PFColors.White }} className=\"pf-c-dropdown__menu-item\">\n          {hasLabels && this.renderBulkSelector()}\n          {hasLabels && this.renderLabelOptions()}\n          {hasHistograms && this.renderHistogramOptions()}\n        </div>\n      </Dropdown>\n    );\n  }\n\n  renderBulkSelector(): JSX.Element {\n    return (\n      <div>\n        <DropdownToggleCheckbox\n          id=\"bulk-select-id\"\n          key=\"bulk-select-key\"\n          aria-label=\"Select all metric/label filters\"\n          isChecked={this.state.allSelected}\n          onClick={() => {\n            if (this.state.allSelected) {\n              this.onBulkNone();\n            } else {\n              this.onBulkAll();\n            }\n          }}\n        ></DropdownToggleCheckbox>\n        <span className={checkboxSelectAllStyle}>Select all metric/label filters</span>\n        <Divider style={{ paddingTop: '5px' }} />\n      </div>\n    );\n  }\n\n  renderLabelOptions(): JSX.Element {\n    const displayGroupingLabels: any[] = [];\n    this.state.labelsSettings.forEach((lblObj, promName) => {\n      const labelsHTML =\n        lblObj.checked && lblObj.values\n          ? Object.keys(lblObj.values).map(val => (\n              <div key={'groupings_' + promName + '_' + val} className={secondLevelStyle}>\n                {lblObj.singleSelection ? (\n                  <Radio\n                    isChecked={lblObj.values[val]}\n                    id={val}\n                    onChange={_ => this.onLabelsFiltersChanged(promName, val, true, true)}\n                    label={prettyLabelValues(promName, val)}\n                    name={val}\n                    value={val}\n                  />\n                ) : (\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={lblObj.values[val]}\n                      onChange={event => this.onLabelsFiltersChanged(promName, val, event.target.checked, false)}\n                    />\n                    <span className={checkboxStyle}>{prettyLabelValues(promName, val)}</span>\n                  </label>\n                )}\n              </div>\n            ))\n          : null;\n      displayGroupingLabels.push(\n        <div key={'groupings_' + promName}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={lblObj.checked}\n              onChange={event => this.onGroupingChanged(promName, event.target.checked)}\n            />\n            <span className={checkboxStyle}>{lblObj.displayName}</span>\n          </label>\n          {labelsHTML}\n        </div>\n      );\n    });\n    return (\n      <>\n        <label>Show metrics by:</label>\n        {displayGroupingLabels}\n        <div className={spacerStyle} />\n      </>\n    );\n  }\n\n  renderHistogramOptions(): JSX.Element {\n    // Prettier removes the parenthesis introducing JSX\n    // prettier-ignore\n    const displayHistogramOptions = [(\n      <div key={'histo_avg'}>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={this.state.showAverage}\n            onChange={event => this.onHistogramAverageChanged(event.target.checked)}\n          />\n          <span className={checkboxStyle}>Average</span>\n        </label>\n      </div>\n    )].concat(\n      allQuantiles.map((o, idx) => {\n        const checked = this.state.showQuantiles.includes(o);\n        return (\n          <div key={'histo_' + idx}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={checked}\n                onChange={event => this.onHistogramOptionsChanged(o, event.target.checked)}\n              />\n              <span className={checkboxStyle}>Quantile {o}</span>\n            </label>\n          </div>\n        );\n      })\n    );\n    return (\n      <>\n        <label>Histograms:</label>\n        {displayHistogramOptions}\n        <div className={spacerStyle} />\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _ from 'lodash';\nimport { parseHealthConfig } from './HealthConfig';\nexport var humanDurations = function humanDurations(cfg, prefix, suffix) {\n  return _.mapValues(cfg.durations, function (v) {\n    return _.reject([prefix, v, suffix], _.isEmpty).join(' ');\n  });\n};\n\nvar toDurations = function toDurations(tupleArray) {\n  var obj = {};\n  tupleArray.forEach(function (tuple) {\n    obj[tuple[0]] = tuple[1];\n  });\n  return obj;\n};\n\nvar durationsTuples = [[60, '1m'], [300, '5m'], [600, '10m'], [1800, '30m'], [3600, '1h'], [10800, '3h'], [21600, '6h'], [43200, '12h'], [86400, '1d'], [604800, '7d'], [2592000, '30d']];\n\nvar computeValidDurations = function computeValidDurations(cfg) {\n  var filtered = durationsTuples;\n\n  if (cfg.prometheus.storageTsdbRetention) {\n    // Make sure we'll keep at least one item\n    if (cfg.prometheus.storageTsdbRetention <= durationsTuples[0][0]) {\n      filtered = [durationsTuples[0]];\n    } else {\n      filtered = durationsTuples.filter(function (d) {\n        return d[0] <= cfg.prometheus.storageTsdbRetention;\n      });\n    }\n  }\n\n  cfg.durations = toDurations(filtered);\n}; // Set some reasonable defaults. Initial values should be valid for fields\n// than may not be providedby/set on the server.\n\n\nvar defaultServerConfig = {\n  clusters: {},\n  durations: {},\n  healthConfig: {\n    rate: []\n  },\n  deployment: {\n    viewOnlyMode: false\n  },\n  installationTag: 'Kiali Console',\n  istioAnnotations: {\n    istioInjectionAnnotation: 'sidecar.istio.io/inject'\n  },\n  istioCanaryRevision: {\n    current: '',\n    upgrade: ''\n  },\n  istioIdentityDomain: 'svc.cluster.local',\n  istioNamespace: 'istio-system',\n  istioLabels: {\n    appLabelName: 'app',\n    injectionLabelName: 'istio-injection',\n    injectionLabelRev: 'istio.io/rev',\n    versionLabelName: 'version'\n  },\n  kialiFeatureFlags: {\n    certificatesInformationIndicators: {\n      enabled: true\n    },\n    istioInjectionAction: true,\n    istioUpgradeAction: false\n  },\n  prometheus: {\n    globalScrapeInterval: 15,\n    storageTsdbRetention: 21600\n  }\n}; // Overwritten with real server config on user login. Also used for tests.\n\nvar serverConfig = defaultServerConfig;\ncomputeValidDurations(serverConfig);\nexport { serverConfig };\nexport var toValidDuration = function toValidDuration(duration) {\n  // Check if valid\n  if (serverConfig.durations[duration]) {\n    return duration;\n  } // Get closest duration\n\n\n  for (var i = durationsTuples.length - 1; i >= 0; i--) {\n    if (duration > durationsTuples[i][0]) {\n      return durationsTuples[i][0];\n    }\n  }\n\n  return durationsTuples[0][0];\n};\nexport var setServerConfig = function setServerConfig(cfg) {\n  serverConfig = _objectSpread(_objectSpread({}, defaultServerConfig), cfg);\n  serverConfig.healthConfig = cfg.healthConfig ? parseHealthConfig(cfg.healthConfig) : serverConfig.healthConfig;\n  computeValidDurations(serverConfig);\n};\nexport var isIstioNamespace = function isIstioNamespace(namespace) {\n  if (namespace === serverConfig.istioNamespace) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/root/kiali-ui/src/config/ServerConfig.ts"],"names":["_","parseHealthConfig","humanDurations","cfg","prefix","suffix","mapValues","durations","v","reject","isEmpty","join","toDurations","tupleArray","obj","forEach","tuple","durationsTuples","computeValidDurations","filtered","prometheus","storageTsdbRetention","filter","d","defaultServerConfig","clusters","healthConfig","rate","deployment","viewOnlyMode","installationTag","istioAnnotations","istioInjectionAnnotation","istioCanaryRevision","current","upgrade","istioIdentityDomain","istioNamespace","istioLabels","appLabelName","injectionLabelName","injectionLabelRev","versionLabelName","kialiFeatureFlags","certificatesInformationIndicators","enabled","istioInjectionAction","istioUpgradeAction","globalScrapeInterval","serverConfig","toValidDuration","duration","i","length","setServerConfig","isIstioNamespace","namespace"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { ServerConfig } from '../types/ServerConfig';\nimport { parseHealthConfig } from './HealthConfig';\n\nexport type Durations = { [key: number]: string };\n\nexport type ComputedServerConfig = ServerConfig & {\n  durations: Durations;\n};\n\nexport const humanDurations = (cfg: ComputedServerConfig, prefix?: string, suffix?: string) =>\n  _.mapValues(cfg.durations, v => _.reject([prefix, v, suffix], _.isEmpty).join(' '));\n\nconst toDurations = (tupleArray: [number, string][]): Durations => {\n  const obj = {};\n  tupleArray.forEach(tuple => {\n    obj[tuple[0]] = tuple[1];\n  });\n  return obj;\n};\n\nconst durationsTuples: [number, string][] = [\n  [60, '1m'],\n  [300, '5m'],\n  [600, '10m'],\n  [1800, '30m'],\n  [3600, '1h'],\n  [10800, '3h'],\n  [21600, '6h'],\n  [43200, '12h'],\n  [86400, '1d'],\n  [604800, '7d'],\n  [2592000, '30d']\n];\n\nconst computeValidDurations = (cfg: ComputedServerConfig) => {\n  let filtered = durationsTuples;\n  if (cfg.prometheus.storageTsdbRetention) {\n    // Make sure we'll keep at least one item\n    if (cfg.prometheus.storageTsdbRetention <= durationsTuples[0][0]) {\n      filtered = [durationsTuples[0]];\n    } else {\n      filtered = durationsTuples.filter(d => d[0] <= cfg.prometheus.storageTsdbRetention!);\n    }\n  }\n  cfg.durations = toDurations(filtered);\n};\n\n// Set some reasonable defaults. Initial values should be valid for fields\n// than may not be providedby/set on the server.\nconst defaultServerConfig: ComputedServerConfig = {\n  clusters: {},\n  durations: {},\n  healthConfig: {\n    rate: []\n  },\n  deployment: {\n    viewOnlyMode: false\n  },\n  installationTag: 'Kiali Console',\n  istioAnnotations: {\n    istioInjectionAnnotation: 'sidecar.istio.io/inject'\n  },\n  istioCanaryRevision: {\n    current: '',\n    upgrade: ''\n  },\n  istioIdentityDomain: 'svc.cluster.local',\n  istioNamespace: 'istio-system',\n  istioLabels: {\n    appLabelName: 'app',\n    injectionLabelName: 'istio-injection',\n    injectionLabelRev: 'istio.io/rev',\n    versionLabelName: 'version'\n  },\n  kialiFeatureFlags: {\n    certificatesInformationIndicators: {\n      enabled: true\n    },\n    istioInjectionAction: true,\n    istioUpgradeAction: false\n  },\n  prometheus: {\n    globalScrapeInterval: 15,\n    storageTsdbRetention: 21600\n  }\n};\n\n// Overwritten with real server config on user login. Also used for tests.\nlet serverConfig = defaultServerConfig;\ncomputeValidDurations(serverConfig);\nexport { serverConfig };\n\nexport const toValidDuration = (duration: number): number => {\n  // Check if valid\n  if (serverConfig.durations[duration]) {\n    return duration;\n  }\n  // Get closest duration\n  for (let i = durationsTuples.length - 1; i >= 0; i--) {\n    if (duration > durationsTuples[i][0]) {\n      return durationsTuples[i][0];\n    }\n  }\n  return durationsTuples[0][0];\n};\n\nexport const setServerConfig = (cfg: ServerConfig) => {\n  serverConfig = {\n    ...defaultServerConfig,\n    ...cfg\n  };\n  serverConfig.healthConfig = cfg.healthConfig ? parseHealthConfig(cfg.healthConfig) : serverConfig.healthConfig;\n\n  computeValidDurations(serverConfig);\n};\n\nexport const isIstioNamespace = (namespace: string): boolean => {\n  if (namespace === serverConfig.istioNamespace) {\n    return true;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}
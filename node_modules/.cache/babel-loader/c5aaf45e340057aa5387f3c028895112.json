{"ast":null,"code":"import _regeneratorRuntime from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import moment from'moment';import{LoginActions}from'./LoginActions';import*as API from'../services/Api';import*as Login from'../services/Login';import{AuthResult}from'../types/Auth';import{isAuthStrategyOAuth}from'../config/AuthenticationConfig';import*as AlertUtils from'../utils/AlertUtils';var Dispatcher=new Login.LoginDispatcher();var shouldRelogin=function shouldRelogin(state){return!state||!state.session||moment(state.session.expiresOn).diff(moment())>0;};var loginSuccess=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,session){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(LoginActions.loginSuccess(session));case 1:case\"end\":return _context.stop();}}},_callee);}));return function loginSuccess(_x,_x2){return _ref.apply(this,arguments);};}();// Performs the user login, dispatching to the proper login implementations.\n// The `data` argument is defined as `any` because the dispatchers receive\n// different kinds of data (such as e-mail/password, tokens).\nvar performLogin=function performLogin(dispatch,state,data){var bail=function bail(loginResult){if(isAuthStrategyOAuth()){dispatch(LoginActions.loginFailure(loginResult.error));}else{data?dispatch(LoginActions.loginFailure(loginResult.error)):dispatch(LoginActions.logoutSuccess());}};Dispatcher.prepare().then(function(result){if(result===AuthResult.CONTINUE){Dispatcher.perform({dispatch:dispatch,state:state,data:data}).then(function(loginResult){return loginSuccess(dispatch,loginResult.session);},function(error){return bail(error);});}else{bail({status:AuthResult.FAILURE,error:'Preparation for login failed, try again.'});}});};var LoginThunkActions={authenticate:function authenticate(username,password){return function(dispatch,getState){dispatch(LoginActions.loginRequest());performLogin(dispatch,getState(),{username:username,password:password});};},checkCredentials:function checkCredentials(){return function(dispatch,getState){var state=getState();dispatch(LoginActions.loginRequest());if(shouldRelogin(state.authentication)){performLogin(dispatch,state);}else{loginSuccess(dispatch,state.authentication.session);}};},extendSession:function extendSession(session){return function(dispatch){dispatch(LoginActions.loginExtend(session));};},logout:function logout(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return API.logout();case 3:response=_context2.sent;if(response.status===204){dispatch(LoginActions.logoutSuccess());}_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);AlertUtils.addError('Logout failed',_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function(_x3){return _ref2.apply(this,arguments);};}();}};export default LoginThunkActions;","map":null,"metadata":{},"sourceType":"module"}
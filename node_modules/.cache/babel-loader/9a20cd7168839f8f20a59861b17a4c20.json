{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/Graph/SummaryPanelAppBox.tsx\";\nimport * as React from 'react';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { InOutRateTableGrpc, InOutRateTableHttp } from '../../components/SummaryPanel/InOutRateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { NodeType, Protocol, TrafficRate } from '../../types/Graph';\nimport { getAccumulatedTrafficRateGrpc, getAccumulatedTrafficRateHttp } from '../../utils/TrafficRate';\nimport { renderBadgedLink, renderHealth } from './SummaryLink';\nimport { shouldRefreshData, getNodeMetrics, getNodeMetricType, renderNoTraffic, summaryHeader, hr, summaryPanel, mergeMetricsResponses, getDatapoints } from './SummaryPanelCommon';\nimport { makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { decoratedNodeData, CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { Dropdown, DropdownPosition, DropdownItem, KebabToggle, DropdownGroup } from '@patternfly/react-core';\nimport { getOptions, clickHandler } from 'components/CytoscapeGraph/ContextMenu/NodeContextMenu';\nvar defaultMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nvar defaultState = _objectSpread({\n  appBox: null,\n  isOpen: false,\n  loading: false,\n  metricsLoadError: null\n}, defaultMetricsState);\n\nvar SummaryPanelAppBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(SummaryPanelAppBox, _React$Component);\n\n  var _super = _createSuper(SummaryPanelAppBox);\n\n  function SummaryPanelAppBox(_props) {\n    var _this;\n\n    _classCallCheck(this, SummaryPanelAppBox);\n\n    _this = _super.call(this, _props);\n    _this.metricsPromise = void 0;\n    _this.mainDivRef = void 0;\n\n    _this.onToggleActions = function (isExpanded) {\n      _this.setState({\n        isOpen: isExpanded\n      });\n    };\n\n    _this.updateCharts = function (props) {\n      var appBox = props.data.summaryTarget;\n      var nodeData = decoratedNodeData(appBox);\n      var nodeMetricType = getNodeMetricType(nodeData);\n\n      var isGrpcRequests = _this.isGrpcRequests();\n\n      if (_this.metricsPromise) {\n        _this.metricsPromise.cancel();\n\n        _this.metricsPromise = undefined;\n      }\n\n      if (!_this.hasGrpcTraffic(appBox) && !_this.hasHttpTraffic(appBox) && !_this.hasTcpTraffic(appBox)) {\n        _this.setState({\n          loading: false\n        });\n\n        return;\n      } // appBoxes are never root nodes, so always look for inbound traffic\n\n\n      var promiseInRps = Promise.resolve({\n        data: {}\n      });\n      var promiseInStream = Promise.resolve({\n        data: {}\n      });\n\n      if (_this.hasHttpIn(appBox) || _this.hasGrpcIn(appBox) && isGrpcRequests) {\n        var filtersRps = ['request_count', 'request_error_count'];\n        promiseInRps = getNodeMetrics(nodeMetricType, appBox, props, filtersRps, 'inbound', 'destination', undefined, undefined, ['request_protocol']);\n      }\n\n      if (_this.hasTcpIn(appBox) || _this.hasGrpcIn(appBox) && !isGrpcRequests) {\n        var filtersStream = [];\n\n        if (_this.hasGrpcIn(appBox) && !isGrpcRequests) {\n          filtersStream.push('grpc_sent', 'grpc_received');\n        }\n\n        if (_this.hasTcpIn(appBox)) {\n          filtersStream.push('tcp_sent', 'tcp_received');\n        }\n\n        if (filtersStream.length > 0) {\n          var byLabelsStream = nodeData.isOutside ? ['source_workload_namespace'] : [];\n          promiseInStream = getNodeMetrics(nodeMetricType, appBox, props, filtersStream, 'inbound', 'source', undefined, undefined, byLabelsStream);\n        }\n      }\n\n      var promiseIn = mergeMetricsResponses([promiseInRps, promiseInStream]);\n      var promiseOut = Promise.resolve({\n        data: {}\n      }); // Ignore outbound traffic if it is a non-root (appbox is always non-root) outsider (because they have no outbound edges)\n\n      if (!nodeData.isOutside) {\n        var filters = [];\n\n        if (_this.hasHttpOut(appBox) || _this.hasGrpcOut(appBox) && isGrpcRequests) {\n          filters.push('request_count', 'request_error_count');\n        }\n\n        if (_this.hasGrpcOut(appBox) && !isGrpcRequests) {\n          filters.push('grpc_sent', 'grpc_received');\n        }\n\n        if (_this.hasTcpOut(appBox)) {\n          filters.push('tcp_sent', 'tcp_received');\n        }\n\n        if (filters.length > 0) {\n          // use source metrics for outbound, except for:\n          // - istio namespace nodes (no source telemetry)\n          var reporter = nodeData.isIstio ? 'destination' : 'source'; // note: request_protocol is not a valid byLabel for tcp/grpc-message filters but it is ignored by prometheus\n\n          var byLabels = nodeData.isOutside ? ['destination_service_namespace', 'request_protocol'] : ['request_protocol'];\n          promiseOut = getNodeMetrics(nodeMetricType, appBox, props, filters, 'outbound', reporter, undefined, undefined, byLabels);\n        }\n      } // use dest metrics for inbound\n\n\n      _this.metricsPromise = makeCancelablePromise(Promise.all([promiseOut, promiseIn]));\n\n      _this.metricsPromise.promise.then(function (responses) {\n        var comparator = nodeData.isOutside ? function (labels, protocol) {\n          return protocol ? labels.request_protocol === protocol : true;\n        } : function (labels, protocol) {\n          if (protocol && labels.request_protocol !== protocol) {\n            return false;\n          }\n\n          if (labels.destination_service_namespace && !_this.isActiveNamespace(labels.destination_service_namespace)) {\n            return false;\n          }\n\n          if (labels.source_workload_namespace && !_this.isActiveNamespace(labels.source_workload_namespace)) {\n            return false;\n          }\n\n          return true;\n        };\n        var metricsOut = responses[0].data;\n        var metricsIn = responses[1].data;\n\n        _this.setState({\n          loading: false,\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcReceivedIn: getDatapoints(metricsIn.grpc_received, comparator),\n          grpcReceivedOut: getDatapoints(metricsOut.grpc_received, comparator),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcSentIn: getDatapoints(metricsIn.grpc_sent, comparator),\n          grpcSentOut: getDatapoints(metricsOut.grpc_sent, comparator),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          tcpReceivedOut: getDatapoints(metricsOut.tcp_received, comparator),\n          tcpReceivedIn: getDatapoints(metricsIn.tcp_received, comparator),\n          tcpSentIn: getDatapoints(metricsIn.tcp_sent, comparator),\n          tcpSentOut: getDatapoints(metricsOut.tcp_sent, comparator)\n        });\n      }).catch(function (error) {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelAppBox: Ignore fetch error (canceled).');\n          return;\n        }\n\n        var errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n\n        _this.setState(_objectSpread({\n          loading: false,\n          metricsLoadError: errorMsg\n        }, defaultMetricsState));\n      });\n\n      _this.setState({\n        loading: true,\n        metricsLoadError: null\n      });\n    };\n\n    _this.isActiveNamespace = function (namespace) {\n      if (!namespace) {\n        return false;\n      }\n\n      var _iterator = _createForOfIteratorHelper(_this.props.namespaces),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ns = _step.value;\n\n          if (ns.name === namespace) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    };\n\n    _this.renderBadgeSummary = function (appBox) {\n      var hasCB = appBox.data(CyNode.hasCB) === true;\n      var hasVS = appBox.data(CyNode.hasVS) === true;\n      appBox.children(\"node[\".concat(CyNode.hasCB, \"],[\").concat(CyNode.hasVS, \"]\")).nodes().forEach(function (n) {\n        hasCB = hasCB || n.data(CyNode.hasCB);\n        hasVS = hasVS || n.data(CyNode.hasVS);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '10px',\n          marginBottom: '10px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 7\n        }\n      }, hasCB && /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.CircuitBreaker, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '4px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }\n      }, \"Has Circuit Breaker\")), hasVS && /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(KialiIcon.VirtualService, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '4px'\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }\n      }, \"Has Virtual Service\")));\n    };\n\n    _this.renderGrpcRequests = function (appBox) {\n      // only consider the physical children to avoid inflated rates\n      var validChildren = appBox.children(\"node[nodeType != \\\"\".concat(NodeType.SERVICE, \"\\\"][nodeType != \\\"\").concat(NodeType.AGGREGATE, \"\\\"]\"));\n      var inbound = getAccumulatedTrafficRateGrpc(validChildren.incomers('edge'));\n      var outbound = getAccumulatedTrafficRateGrpc(validChildren.edgesTo('*'));\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InOutRateTableGrpc, {\n        title: \"GRPC Traffic (requests per second):\",\n        inRate: inbound.rate,\n        inRateGrpcErr: inbound.rateGrpcErr,\n        inRateNR: inbound.rateNoResponse,\n        outRate: outbound.rate,\n        outRateGrpcErr: outbound.rateGrpcErr,\n        outRateNR: outbound.rateNoResponse,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderHttpRequests = function (appBox) {\n      // only consider the physical children to avoid inflated rates\n      var validChildren = appBox.children(\"node[nodeType != \\\"\".concat(NodeType.SERVICE, \"\\\"][nodeType != \\\"\").concat(NodeType.AGGREGATE, \"\\\"]\"));\n      var inbound = getAccumulatedTrafficRateHttp(validChildren.incomers('edge'));\n      var outbound = getAccumulatedTrafficRateHttp(validChildren.edgesTo('*'));\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InOutRateTableHttp, {\n        title: \"HTTP (requests per second):\",\n        inRate: inbound.rate,\n        inRate3xx: inbound.rate3xx,\n        inRate4xx: inbound.rate4xx,\n        inRate5xx: inbound.rate5xx,\n        inRateNR: inbound.rateNoResponse,\n        outRate: outbound.rate,\n        outRate3xx: outbound.rate3xx,\n        outRate4xx: outbound.rate4xx,\n        outRate5xx: outbound.rate5xx,\n        outRateNR: outbound.rateNoResponse,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderSparklines = function (appBox) {\n      if (_this.state.loading) {\n        return /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 14\n          }\n        }, \"Loading charts...\");\n      } else if (_this.state.metricsLoadError) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(KialiIcon.Warning, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 11\n          }\n        }), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 33\n          }\n        }, \"Error loading metrics: \"), _this.state.metricsLoadError);\n      }\n\n      var hasGrpc = _this.hasGrpcTraffic(appBox);\n\n      var isGrpcRequests = hasGrpc && _this.isGrpcRequests();\n\n      var hasGrpcIn = hasGrpc && _this.hasGrpcIn(appBox);\n\n      var hasGrpcOut = hasGrpc && _this.hasGrpcOut(appBox);\n\n      var hasHttp = _this.hasHttpTraffic(appBox);\n\n      var hasHttpIn = hasHttp && _this.hasHttpIn(appBox);\n\n      var hasHttpOut = hasHttp && _this.hasHttpOut(appBox);\n\n      var hasTcp = _this.hasTcpTraffic(appBox);\n\n      var hasTcpIn = hasTcp && _this.hasTcpIn(appBox);\n\n      var hasTcpOut = hasTcp && _this.hasTcpOut(appBox);\n\n      var grpcCharts, httpCharts, tcpCharts;\n\n      if (hasGrpc) {\n        grpcCharts = isGrpcRequests ? /*#__PURE__*/React.createElement(React.Fragment, null, hasGrpcIn && /*#__PURE__*/React.createElement(RequestChart, {\n          key: \"grpc-inbound-request\",\n          label: \"gRPC - Inbound Request Traffic\",\n          dataRps: _this.state.grpcRequestIn,\n          dataErrors: _this.state.grpcRequestErrIn,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }\n        }), hasGrpcOut && /*#__PURE__*/React.createElement(RequestChart, {\n          key: \"grpc-outbound-request\",\n          label: \"gRPC - Outbound Request Traffic\",\n          dataRps: _this.state.grpcRequestOut,\n          dataErrors: _this.state.grpcRequestErrOut,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null, hasGrpcIn && /*#__PURE__*/React.createElement(StreamChart, {\n          label: \"gRPC - Inbound Traffic\",\n          receivedRates: _this.state.grpcReceivedIn,\n          sentRates: _this.state.grpcSentIn,\n          unit: \"messages\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }\n        }), hasGrpcOut && /*#__PURE__*/React.createElement(StreamChart, {\n          label: \"gRPC - Outbound Traffic\",\n          receivedRates: _this.state.grpcReceivedOut,\n          sentRates: _this.state.grpcSentOut,\n          unit: \"messages\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }\n        }));\n      }\n\n      if (hasHttp) {\n        httpCharts = /*#__PURE__*/React.createElement(React.Fragment, null, hasHttpIn && /*#__PURE__*/React.createElement(RequestChart, {\n          key: \"http-inbound-request\",\n          label: \"HTTP - Inbound Request Traffic\",\n          dataRps: _this.state.httpRequestIn,\n          dataErrors: _this.state.httpRequestErrIn,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }\n        }), hasHttpOut && /*#__PURE__*/React.createElement(RequestChart, {\n          key: \"http-outbound-request\",\n          label: \"HTTP - Outbound Request Traffic\",\n          dataRps: _this.state.httpRequestOut,\n          dataErrors: _this.state.httpRequestErrOut,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }\n        }));\n      }\n\n      if (hasTcp) {\n        tcpCharts = /*#__PURE__*/React.createElement(React.Fragment, null, hasTcpIn && /*#__PURE__*/React.createElement(StreamChart, {\n          key: \"tcp-inbound-request\",\n          label: \"TCP - Inbound Traffic\",\n          receivedRates: _this.state.tcpReceivedIn,\n          sentRates: _this.state.tcpSentIn,\n          unit: \"bytes\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }\n        }), hasTcpOut && /*#__PURE__*/React.createElement(StreamChart, {\n          key: \"tcp-outbound-request\",\n          label: \"TCP - Outbound Traffic\",\n          receivedRates: _this.state.tcpReceivedOut,\n          sentRates: _this.state.tcpSentOut,\n          unit: \"bytes\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, grpcCharts, httpCharts, tcpCharts);\n    };\n\n    _this.renderServiceList = function (appBox) {\n      // likely 0 or 1 but support N in case of unanticipated labeling\n      var serviceList = [];\n      appBox.children(\"node[nodeType = \\\"\".concat(NodeType.SERVICE, \"\\\"]\")).forEach(function (serviceNode) {\n        var serviceNodeData = decoratedNodeData(serviceNode);\n        serviceList.push(renderBadgedLink(serviceNodeData, NodeType.SERVICE));\n        var aggregates = appBox.children(\"node[nodeType = \\\"\".concat(NodeType.AGGREGATE, \"\\\"][service = \\\"\").concat(serviceNodeData.service, \"\\\"]\"));\n\n        if (!!aggregates && aggregates.length > 0) {\n          var aggregateList = [];\n          aggregates.forEach(function (aggregateNode) {\n            var aggregateNodeData = decoratedNodeData(aggregateNode);\n            aggregateList.push(renderBadgedLink(aggregateNodeData, NodeType.AGGREGATE));\n          });\n          serviceList.push( /*#__PURE__*/React.createElement(\"div\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 26\n            }\n          }, aggregateList));\n        }\n      });\n      return serviceList;\n    };\n\n    _this.renderWorkloadList = function (appBox) {\n      var workloadList = [];\n      appBox.children('node[workload]').forEach(function (node) {\n        var nodeData = decoratedNodeData(node);\n        workloadList.push(renderBadgedLink(nodeData, NodeType.WORKLOAD));\n      });\n      return workloadList;\n    };\n\n    _this.isGrpcRequests = function () {\n      return _this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n    };\n\n    _this.hasGrpcTraffic = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcIn > 0],[grpcOut > 0]').size() > 0;\n    };\n\n    _this.hasGrpcIn = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcIn > 0]').size() > 0;\n    };\n\n    _this.hasGrpcOut = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcOut > 0]').size() > 0;\n    };\n\n    _this.hasHttpTraffic = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[httpIn > 0],[httpOut > 0]').size() > 0;\n    };\n\n    _this.hasHttpIn = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[httpIn > 0]').size() > 0;\n    };\n\n    _this.hasHttpOut = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[httpOut > 0]').size() > 0;\n    };\n\n    _this.hasTcpTraffic = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpIn > 0],[tcpOut > 0]').size() > 0;\n    };\n\n    _this.hasTcpIn = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpIn > 0]').size() > 0;\n    };\n\n    _this.hasTcpOut = function (appBox) {\n      return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpOut > 0]').size() > 0;\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    _this.mainDivRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(SummaryPanelAppBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateCharts(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n        if (this.mainDivRef.current) {\n          this.mainDivRef.current.scrollTop = 0;\n        }\n      }\n\n      if (shouldRefreshData(prevProps, this.props)) {\n        this.updateCharts(this.props);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.metricsPromise) {\n        this.metricsPromise.cancel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var appBox = this.props.data.summaryTarget;\n      var nodeData = decoratedNodeData(appBox);\n      var serviceList = this.renderServiceList(appBox);\n      var workloadList = this.renderWorkloadList(appBox);\n      var hasGrpc = this.hasGrpcTraffic(appBox);\n      var isGrpcRequests = hasGrpc && this.isGrpcRequests();\n      var hasGrpcIn = hasGrpc && this.hasGrpcIn(appBox);\n      var hasGrpcOut = hasGrpc && this.hasGrpcOut(appBox);\n      var hasHttp = this.hasHttpTraffic(appBox);\n      var hasHttpIn = hasHttp && this.hasHttpIn(appBox);\n      var hasHttpOut = hasHttp && this.hasHttpOut(appBox);\n      var hasTcp = this.hasTcpTraffic(appBox);\n      var hasTcpIn = hasTcp && this.hasTcpIn(appBox);\n      var hasTcpOut = hasTcp && this.hasTcpOut(appBox);\n      var options = getOptions(nodeData).map(function (o) {\n        return /*#__PURE__*/React.createElement(DropdownItem, {\n          key: o.text,\n          onClick: function onClick() {\n            return clickHandler(o);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 9\n          }\n        }, o.text, \" \", o.target === '_blank' && /*#__PURE__*/React.createElement(ExternalLinkAltIcon, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 46\n          }\n        }));\n      });\n      var actions = options.length > 0 ? [/*#__PURE__*/React.createElement(DropdownGroup, {\n        label: \"Show\",\n        className: \"kiali-appbox-menu\",\n        children: options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 12\n        }\n      })] : undefined;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.mainDivRef,\n        className: \"panel panel-default \".concat(summaryPanel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-heading\",\n        style: summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, renderBadgedLink(nodeData), actions && /*#__PURE__*/React.createElement(Dropdown, {\n        id: \"summary-appbox-actions\",\n        isPlain: true,\n        style: {\n          float: 'right'\n        },\n        dropdownItems: actions,\n        isOpen: this.state.isOpen,\n        position: DropdownPosition.right,\n        toggle: /*#__PURE__*/React.createElement(KebabToggle, {\n          id: \"summary-appbox-kebab\",\n          onToggle: this.onToggleActions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }\n        }),\n        isGrouped: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }, renderHealth(nodeData.health)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      }, this.renderBadgeSummary(appBox), serviceList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 40\n        }\n      }, serviceList), workloadList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 41\n        }\n      }, \" \", workloadList))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, hasGrpc && isGrpcRequests && /*#__PURE__*/React.createElement(React.Fragment, null, this.renderGrpcRequests(appBox), hr()), hasHttp && /*#__PURE__*/React.createElement(React.Fragment, null, this.renderHttpRequests(appBox), hr()), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, this.renderSparklines(appBox), hr()), hasGrpc && !hasGrpcIn && renderNoTraffic('gRPC inbound'), hasGrpc && !hasGrpcOut && renderNoTraffic('gRPC outbound'), !hasGrpc && renderNoTraffic('gRPC'), hasHttp && !hasHttpIn && renderNoTraffic('HTTP inbound'), hasHttp && !hasHttpOut && renderNoTraffic('HTTP outbound'), !hasHttp && renderNoTraffic('HTTP'), hasTcp && !hasTcpIn && renderNoTraffic('TCP inbound'), hasTcp && !hasTcpOut && renderNoTraffic('TCP outbound'), !hasTcp && renderNoTraffic('TCP')));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // if the summaryTarget (i.e. selected appBox) has changed, then init the state and set to loading. The loading\n      // will actually be kicked off after the render (in componentDidMount/Update).\n      return props.data.summaryTarget !== state.appBox ? _objectSpread({\n        appBox: props.data.summaryTarget,\n        loading: true\n      }, defaultMetricsState) : null;\n    }\n  }]);\n\n  return SummaryPanelAppBox;\n}(React.Component);\n\nexport { SummaryPanelAppBox as default };","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Graph/SummaryPanelAppBox.tsx"],"names":["React","ExternalLinkAltIcon","InOutRateTableGrpc","InOutRateTableHttp","RequestChart","StreamChart","NodeType","Protocol","TrafficRate","getAccumulatedTrafficRateGrpc","getAccumulatedTrafficRateHttp","renderBadgedLink","renderHealth","shouldRefreshData","getNodeMetrics","getNodeMetricType","renderNoTraffic","summaryHeader","hr","summaryPanel","mergeMetricsResponses","getDatapoints","makeCancelablePromise","KialiIcon","decoratedNodeData","CyNode","Dropdown","DropdownPosition","DropdownItem","KebabToggle","DropdownGroup","getOptions","clickHandler","defaultMetricsState","grpcRequestIn","grpcRequestOut","grpcRequestErrIn","grpcRequestErrOut","grpcSentIn","grpcSentOut","grpcReceivedIn","grpcReceivedOut","httpRequestIn","httpRequestOut","httpRequestErrIn","httpRequestErrOut","tcpSentIn","tcpSentOut","tcpReceivedIn","tcpReceivedOut","defaultState","appBox","isOpen","loading","metricsLoadError","SummaryPanelAppBox","props","metricsPromise","mainDivRef","onToggleActions","isExpanded","setState","updateCharts","data","summaryTarget","nodeData","nodeMetricType","isGrpcRequests","cancel","undefined","hasGrpcTraffic","hasHttpTraffic","hasTcpTraffic","promiseInRps","Promise","resolve","promiseInStream","hasHttpIn","hasGrpcIn","filtersRps","hasTcpIn","filtersStream","push","length","byLabelsStream","isOutside","promiseIn","promiseOut","filters","hasHttpOut","hasGrpcOut","hasTcpOut","reporter","isIstio","byLabels","all","promise","then","responses","comparator","labels","protocol","request_protocol","destination_service_namespace","isActiveNamespace","source_workload_namespace","metricsOut","metricsIn","request_error_count","GRPC","grpc_received","request_count","grpc_sent","HTTP","tcp_received","tcp_sent","catch","error","isCanceled","console","debug","errorMsg","response","message","namespace","namespaces","ns","name","renderBadgeSummary","hasCB","hasVS","children","nodes","forEach","n","marginTop","marginBottom","paddingLeft","renderGrpcRequests","validChildren","SERVICE","AGGREGATE","inbound","incomers","outbound","edgesTo","rate","rateGrpcErr","rateNoResponse","renderHttpRequests","rate3xx","rate4xx","rate5xx","renderSparklines","state","hasGrpc","hasHttp","hasTcp","grpcCharts","httpCharts","tcpCharts","renderServiceList","serviceList","serviceNode","serviceNodeData","aggregates","service","aggregateList","aggregateNode","aggregateNodeData","renderWorkloadList","workloadList","node","WORKLOAD","trafficRates","includes","GRPC_REQUEST","filter","size","createRef","prevProps","current","scrollTop","options","map","o","text","target","actions","float","right","health","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { InOutRateTableGrpc, InOutRateTableHttp } from '../../components/SummaryPanel/InOutRateTable';\nimport { RequestChart, StreamChart } from '../../components/SummaryPanel/RpsChart';\nimport { NodeType, Protocol, SummaryPanelPropType, TrafficRate } from '../../types/Graph';\nimport { getAccumulatedTrafficRateGrpc, getAccumulatedTrafficRateHttp } from '../../utils/TrafficRate';\nimport { renderBadgedLink, renderHealth } from './SummaryLink';\nimport {\n  shouldRefreshData,\n  getNodeMetrics,\n  getNodeMetricType,\n  renderNoTraffic,\n  summaryHeader,\n  hr,\n  summaryPanel,\n  mergeMetricsResponses,\n  getDatapoints\n} from './SummaryPanelCommon';\nimport { Response } from '../../services/Api';\nimport { IstioMetricsMap, Datapoint, Labels } from '../../types/Metrics';\nimport { Reporter } from '../../types/MetricsOptions';\nimport { CancelablePromise, makeCancelablePromise } from '../../utils/CancelablePromises';\nimport { KialiIcon } from 'config/KialiIcon';\nimport { decoratedNodeData, CyNode } from 'components/CytoscapeGraph/CytoscapeGraphUtils';\nimport { Dropdown, DropdownPosition, DropdownItem, KebabToggle, DropdownGroup } from '@patternfly/react-core';\nimport { getOptions, clickHandler } from 'components/CytoscapeGraph/ContextMenu/NodeContextMenu';\n\ntype SummaryPanelAppBoxMetricsState = {\n  grpcRequestIn: Datapoint[];\n  grpcRequestOut: Datapoint[];\n  grpcRequestErrIn: Datapoint[];\n  grpcRequestErrOut: Datapoint[];\n  grpcSentIn: Datapoint[];\n  grpcSentOut: Datapoint[];\n  grpcReceivedIn: Datapoint[];\n  grpcReceivedOut: Datapoint[];\n  httpRequestIn: Datapoint[];\n  httpRequestOut: Datapoint[];\n  httpRequestErrIn: Datapoint[];\n  httpRequestErrOut: Datapoint[];\n  tcpSentIn: Datapoint[];\n  tcpSentOut: Datapoint[];\n  tcpReceivedIn: Datapoint[];\n  tcpReceivedOut: Datapoint[];\n};\n\ntype SummaryPanelAppBoxState = SummaryPanelAppBoxMetricsState & {\n  appBox: any;\n  isOpen: boolean;\n  loading: boolean;\n  metricsLoadError: string | null;\n};\n\nconst defaultMetricsState: SummaryPanelAppBoxMetricsState = {\n  grpcRequestIn: [],\n  grpcRequestOut: [],\n  grpcRequestErrIn: [],\n  grpcRequestErrOut: [],\n  grpcSentIn: [],\n  grpcSentOut: [],\n  grpcReceivedIn: [],\n  grpcReceivedOut: [],\n  httpRequestIn: [],\n  httpRequestOut: [],\n  httpRequestErrIn: [],\n  httpRequestErrOut: [],\n  tcpSentIn: [],\n  tcpSentOut: [],\n  tcpReceivedIn: [],\n  tcpReceivedOut: []\n};\n\nconst defaultState: SummaryPanelAppBoxState = {\n  appBox: null,\n  isOpen: false,\n  loading: false,\n  metricsLoadError: null,\n  ...defaultMetricsState\n};\n\nexport default class SummaryPanelAppBox extends React.Component<SummaryPanelPropType, SummaryPanelAppBoxState> {\n  private metricsPromise?: CancelablePromise<Response<IstioMetricsMap>[]>;\n  private readonly mainDivRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: SummaryPanelPropType) {\n    super(props);\n    this.state = { ...defaultState };\n\n    this.mainDivRef = React.createRef<HTMLDivElement>();\n  }\n\n  static getDerivedStateFromProps(props: SummaryPanelPropType, state: SummaryPanelAppBoxState) {\n    // if the summaryTarget (i.e. selected appBox) has changed, then init the state and set to loading. The loading\n    // will actually be kicked off after the render (in componentDidMount/Update).\n    return props.data.summaryTarget !== state.appBox\n      ? { appBox: props.data.summaryTarget, loading: true, ...defaultMetricsState }\n      : null;\n  }\n\n  componentDidMount() {\n    this.updateCharts(this.props);\n  }\n\n  componentDidUpdate(prevProps: SummaryPanelPropType) {\n    if (prevProps.data.summaryTarget !== this.props.data.summaryTarget) {\n      if (this.mainDivRef.current) {\n        this.mainDivRef.current.scrollTop = 0;\n      }\n    }\n    if (shouldRefreshData(prevProps, this.props)) {\n      this.updateCharts(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n    }\n  }\n\n  render() {\n    const appBox = this.props.data.summaryTarget;\n    const nodeData = decoratedNodeData(appBox);\n    const serviceList = this.renderServiceList(appBox);\n    const workloadList = this.renderWorkloadList(appBox);\n    const hasGrpc = this.hasGrpcTraffic(appBox);\n    const isGrpcRequests = hasGrpc && this.isGrpcRequests();\n    const hasGrpcIn = hasGrpc && this.hasGrpcIn(appBox);\n    const hasGrpcOut = hasGrpc && this.hasGrpcOut(appBox);\n    const hasHttp = this.hasHttpTraffic(appBox);\n    const hasHttpIn = hasHttp && this.hasHttpIn(appBox);\n    const hasHttpOut = hasHttp && this.hasHttpOut(appBox);\n    const hasTcp = this.hasTcpTraffic(appBox);\n    const hasTcpIn = hasTcp && this.hasTcpIn(appBox);\n    const hasTcpOut = hasTcp && this.hasTcpOut(appBox);\n\n    const options = getOptions(nodeData).map(o => {\n      return (\n        <DropdownItem key={o.text} onClick={() => clickHandler(o)}>\n          {o.text} {o.target === '_blank' && <ExternalLinkAltIcon />}\n        </DropdownItem>\n      );\n    });\n    const actions =\n      options.length > 0\n        ? [<DropdownGroup label=\"Show\" className=\"kiali-appbox-menu\" children={options} />]\n        : undefined;\n\n    return (\n      <div ref={this.mainDivRef} className={`panel panel-default ${summaryPanel}`}>\n        <div className=\"panel-heading\" style={summaryHeader}>\n          <div>\n            {renderBadgedLink(nodeData)}\n            {actions && (\n              <Dropdown\n                id=\"summary-appbox-actions\"\n                isPlain={true}\n                style={{ float: 'right' }}\n                dropdownItems={actions}\n                isOpen={this.state.isOpen}\n                position={DropdownPosition.right}\n                toggle={<KebabToggle id=\"summary-appbox-kebab\" onToggle={this.onToggleActions} />}\n                isGrouped={true}\n              />\n            )}\n          </div>\n          <div>{renderHealth(nodeData.health)}</div>\n          <div>\n            {this.renderBadgeSummary(appBox)}\n            {serviceList.length > 0 && <div>{serviceList}</div>}\n            {workloadList.length > 0 && <div> {workloadList}</div>}\n          </div>\n        </div>\n        <div className=\"panel-body\">\n          {hasGrpc && isGrpcRequests && (\n            <>\n              {this.renderGrpcRequests(appBox)}\n              {hr()}\n            </>\n          )}\n          {hasHttp && (\n            <>\n              {this.renderHttpRequests(appBox)}\n              {hr()}\n            </>\n          )}\n          <div>\n            {this.renderSparklines(appBox)}\n            {hr()}\n          </div>\n          {hasGrpc && !hasGrpcIn && renderNoTraffic('gRPC inbound')}\n          {hasGrpc && !hasGrpcOut && renderNoTraffic('gRPC outbound')}\n          {!hasGrpc && renderNoTraffic('gRPC')}\n          {hasHttp && !hasHttpIn && renderNoTraffic('HTTP inbound')}\n          {hasHttp && !hasHttpOut && renderNoTraffic('HTTP outbound')}\n          {!hasHttp && renderNoTraffic('HTTP')}\n          {hasTcp && !hasTcpIn && renderNoTraffic('TCP inbound')}\n          {hasTcp && !hasTcpOut && renderNoTraffic('TCP outbound')}\n          {!hasTcp && renderNoTraffic('TCP')}\n        </div>\n      </div>\n    );\n  }\n\n  private onToggleActions = isExpanded => {\n    this.setState({ isOpen: isExpanded });\n  };\n\n  private updateCharts = (props: SummaryPanelPropType) => {\n    const appBox = props.data.summaryTarget;\n    const nodeData = decoratedNodeData(appBox);\n    const nodeMetricType = getNodeMetricType(nodeData);\n    const isGrpcRequests = this.isGrpcRequests();\n\n    if (this.metricsPromise) {\n      this.metricsPromise.cancel();\n      this.metricsPromise = undefined;\n    }\n\n    if (!this.hasGrpcTraffic(appBox) && !this.hasHttpTraffic(appBox) && !this.hasTcpTraffic(appBox)) {\n      this.setState({ loading: false });\n      return;\n    }\n\n    // appBoxes are never root nodes, so always look for inbound traffic\n    let promiseInRps: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n    let promiseInStream: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n\n    if (this.hasHttpIn(appBox) || (this.hasGrpcIn(appBox) && isGrpcRequests)) {\n      const filtersRps = ['request_count', 'request_error_count'];\n\n      promiseInRps = getNodeMetrics(\n        nodeMetricType,\n        appBox,\n        props,\n        filtersRps,\n        'inbound',\n        'destination',\n        undefined,\n        undefined,\n        ['request_protocol']\n      );\n    }\n\n    if (this.hasTcpIn(appBox) || (this.hasGrpcIn(appBox) && !isGrpcRequests)) {\n      const filtersStream = [] as string[];\n\n      if (this.hasGrpcIn(appBox) && !isGrpcRequests) {\n        filtersStream.push('grpc_sent', 'grpc_received');\n      }\n      if (this.hasTcpIn(appBox)) {\n        filtersStream.push('tcp_sent', 'tcp_received');\n      }\n      if (filtersStream.length > 0) {\n        const byLabelsStream = nodeData.isOutside ? ['source_workload_namespace'] : [];\n\n        promiseInStream = getNodeMetrics(\n          nodeMetricType,\n          appBox,\n          props,\n          filtersStream,\n          'inbound',\n          'source',\n          undefined,\n          undefined,\n          byLabelsStream\n        );\n      }\n    }\n\n    const promiseIn = mergeMetricsResponses([promiseInRps, promiseInStream]);\n    let promiseOut: Promise<Response<IstioMetricsMap>> = Promise.resolve({ data: {} });\n\n    // Ignore outbound traffic if it is a non-root (appbox is always non-root) outsider (because they have no outbound edges)\n    if (!nodeData.isOutside) {\n      const filters = [] as string[];\n      if (this.hasHttpOut(appBox) || (this.hasGrpcOut(appBox) && isGrpcRequests)) {\n        filters.push('request_count', 'request_error_count');\n      }\n      if (this.hasGrpcOut(appBox) && !isGrpcRequests) {\n        filters.push('grpc_sent', 'grpc_received');\n      }\n      if (this.hasTcpOut(appBox)) {\n        filters.push('tcp_sent', 'tcp_received');\n      }\n\n      if (filters.length > 0) {\n        // use source metrics for outbound, except for:\n        // - istio namespace nodes (no source telemetry)\n        const reporter: Reporter = nodeData.isIstio ? 'destination' : 'source';\n        // note: request_protocol is not a valid byLabel for tcp/grpc-message filters but it is ignored by prometheus\n        const byLabels = nodeData.isOutside\n          ? ['destination_service_namespace', 'request_protocol']\n          : ['request_protocol'];\n        promiseOut = getNodeMetrics(\n          nodeMetricType,\n          appBox,\n          props,\n          filters,\n          'outbound',\n          reporter,\n          undefined,\n          undefined,\n          byLabels\n        );\n      }\n    }\n\n    // use dest metrics for inbound\n    this.metricsPromise = makeCancelablePromise(Promise.all([promiseOut, promiseIn]));\n\n    this.metricsPromise.promise\n      .then((responses: Response<IstioMetricsMap>[]) => {\n        const comparator = nodeData.isOutside\n          ? (labels: Labels, protocol?: Protocol) => {\n              return protocol ? labels.request_protocol === protocol : true;\n            }\n          : (labels: Labels, protocol?: Protocol) => {\n              if (protocol && labels.request_protocol !== protocol) {\n                return false;\n              }\n              if (\n                labels.destination_service_namespace &&\n                !this.isActiveNamespace(labels.destination_service_namespace)\n              ) {\n                return false;\n              }\n              if (labels.source_workload_namespace && !this.isActiveNamespace(labels.source_workload_namespace)) {\n                return false;\n              }\n              return true;\n            };\n\n        const metricsOut = responses[0].data;\n        const metricsIn = responses[1].data;\n        this.setState({\n          loading: false,\n          grpcRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.GRPC),\n          grpcRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.GRPC),\n          grpcReceivedIn: getDatapoints(metricsIn.grpc_received, comparator),\n          grpcReceivedOut: getDatapoints(metricsOut.grpc_received, comparator),\n          grpcRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.GRPC),\n          grpcRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.GRPC),\n          grpcSentIn: getDatapoints(metricsIn.grpc_sent, comparator),\n          grpcSentOut: getDatapoints(metricsOut.grpc_sent, comparator),\n          httpRequestErrIn: getDatapoints(metricsIn.request_error_count, comparator, Protocol.HTTP),\n          httpRequestErrOut: getDatapoints(metricsOut.request_error_count, comparator, Protocol.HTTP),\n          httpRequestIn: getDatapoints(metricsIn.request_count, comparator, Protocol.HTTP),\n          httpRequestOut: getDatapoints(metricsOut.request_count, comparator, Protocol.HTTP),\n          tcpReceivedOut: getDatapoints(metricsOut.tcp_received, comparator),\n          tcpReceivedIn: getDatapoints(metricsIn.tcp_received, comparator),\n          tcpSentIn: getDatapoints(metricsIn.tcp_sent, comparator),\n          tcpSentOut: getDatapoints(metricsOut.tcp_sent, comparator)\n        });\n      })\n      .catch(error => {\n        if (error.isCanceled) {\n          console.debug('SummaryPanelAppBox: Ignore fetch error (canceled).');\n          return;\n        }\n        const errorMsg = error.response && error.response.data.error ? error.response.data.error : error.message;\n        this.setState({\n          loading: false,\n          metricsLoadError: errorMsg,\n          ...defaultMetricsState\n        });\n      });\n\n    this.setState({ loading: true, metricsLoadError: null });\n  };\n\n  private isActiveNamespace = (namespace: string): boolean => {\n    if (!namespace) {\n      return false;\n    }\n    for (const ns of this.props.namespaces) {\n      if (ns.name === namespace) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  private renderBadgeSummary = appBox => {\n    let hasCB: boolean = appBox.data(CyNode.hasCB) === true;\n    let hasVS: boolean = appBox.data(CyNode.hasVS) === true;\n\n    appBox\n      .children(`node[${CyNode.hasCB}],[${CyNode.hasVS}]`)\n      .nodes()\n      .forEach(n => {\n        hasCB = hasCB || n.data(CyNode.hasCB);\n        hasVS = hasVS || n.data(CyNode.hasVS);\n      });\n\n    return (\n      <div style={{ marginTop: '10px', marginBottom: '10px' }}>\n        {hasCB && (\n          <div>\n            <KialiIcon.CircuitBreaker />\n            <span style={{ paddingLeft: '4px' }}>Has Circuit Breaker</span>\n          </div>\n        )}\n        {hasVS && (\n          <div>\n            <KialiIcon.VirtualService />\n            <span style={{ paddingLeft: '4px' }}>Has Virtual Service</span>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  private renderGrpcRequests = appBox => {\n    // only consider the physical children to avoid inflated rates\n    const validChildren = appBox.children(\n      `node[nodeType != \"${NodeType.SERVICE}\"][nodeType != \"${NodeType.AGGREGATE}\"]`\n    );\n    const inbound = getAccumulatedTrafficRateGrpc(validChildren.incomers('edge'));\n    const outbound = getAccumulatedTrafficRateGrpc(validChildren.edgesTo('*'));\n\n    return (\n      <>\n        <InOutRateTableGrpc\n          title=\"GRPC Traffic (requests per second):\"\n          inRate={inbound.rate}\n          inRateGrpcErr={inbound.rateGrpcErr}\n          inRateNR={inbound.rateNoResponse}\n          outRate={outbound.rate}\n          outRateGrpcErr={outbound.rateGrpcErr}\n          outRateNR={outbound.rateNoResponse}\n        />\n      </>\n    );\n  };\n\n  private renderHttpRequests = appBox => {\n    // only consider the physical children to avoid inflated rates\n    const validChildren = appBox.children(\n      `node[nodeType != \"${NodeType.SERVICE}\"][nodeType != \"${NodeType.AGGREGATE}\"]`\n    );\n    const inbound = getAccumulatedTrafficRateHttp(validChildren.incomers('edge'));\n    const outbound = getAccumulatedTrafficRateHttp(validChildren.edgesTo('*'));\n\n    return (\n      <>\n        <InOutRateTableHttp\n          title=\"HTTP (requests per second):\"\n          inRate={inbound.rate}\n          inRate3xx={inbound.rate3xx}\n          inRate4xx={inbound.rate4xx}\n          inRate5xx={inbound.rate5xx}\n          inRateNR={inbound.rateNoResponse}\n          outRate={outbound.rate}\n          outRate3xx={outbound.rate3xx}\n          outRate4xx={outbound.rate4xx}\n          outRate5xx={outbound.rate5xx}\n          outRateNR={outbound.rateNoResponse}\n        />\n      </>\n    );\n  };\n\n  private renderSparklines = appBox => {\n    if (this.state.loading) {\n      return <strong>Loading charts...</strong>;\n    } else if (this.state.metricsLoadError) {\n      return (\n        <div>\n          <KialiIcon.Warning /> <strong>Error loading metrics: </strong>\n          {this.state.metricsLoadError}\n        </div>\n      );\n    }\n\n    const hasGrpc = this.hasGrpcTraffic(appBox);\n    const isGrpcRequests = hasGrpc && this.isGrpcRequests();\n    const hasGrpcIn = hasGrpc && this.hasGrpcIn(appBox);\n    const hasGrpcOut = hasGrpc && this.hasGrpcOut(appBox);\n    const hasHttp = this.hasHttpTraffic(appBox);\n    const hasHttpIn = hasHttp && this.hasHttpIn(appBox);\n    const hasHttpOut = hasHttp && this.hasHttpOut(appBox);\n    const hasTcp = this.hasTcpTraffic(appBox);\n    const hasTcpIn = hasTcp && this.hasTcpIn(appBox);\n    const hasTcpOut = hasTcp && this.hasTcpOut(appBox);\n    let grpcCharts, httpCharts, tcpCharts;\n\n    if (hasGrpc) {\n      grpcCharts = isGrpcRequests ? (\n        <>\n          {hasGrpcIn && (\n            <RequestChart\n              key=\"grpc-inbound-request\"\n              label=\"gRPC - Inbound Request Traffic\"\n              dataRps={this.state.grpcRequestIn!}\n              dataErrors={this.state.grpcRequestErrIn}\n            />\n          )}\n          {hasGrpcOut && (\n            <RequestChart\n              key=\"grpc-outbound-request\"\n              label=\"gRPC - Outbound Request Traffic\"\n              dataRps={this.state.grpcRequestOut}\n              dataErrors={this.state.grpcRequestErrOut}\n            />\n          )}\n        </>\n      ) : (\n        <>\n          {hasGrpcIn && (\n            <StreamChart\n              label=\"gRPC - Inbound Traffic\"\n              receivedRates={this.state.grpcReceivedIn}\n              sentRates={this.state.grpcSentIn}\n              unit=\"messages\"\n            />\n          )}\n          {hasGrpcOut && (\n            <StreamChart\n              label=\"gRPC - Outbound Traffic\"\n              receivedRates={this.state.grpcReceivedOut}\n              sentRates={this.state.grpcSentOut}\n              unit=\"messages\"\n            />\n          )}\n        </>\n      );\n    }\n\n    if (hasHttp) {\n      httpCharts = (\n        <>\n          {hasHttpIn && (\n            <RequestChart\n              key=\"http-inbound-request\"\n              label=\"HTTP - Inbound Request Traffic\"\n              dataRps={this.state.httpRequestIn}\n              dataErrors={this.state.httpRequestErrIn}\n            />\n          )}\n          {hasHttpOut && (\n            <RequestChart\n              key=\"http-outbound-request\"\n              label=\"HTTP - Outbound Request Traffic\"\n              dataRps={this.state.httpRequestOut}\n              dataErrors={this.state.httpRequestErrOut}\n            />\n          )}\n        </>\n      );\n    }\n\n    if (hasTcp) {\n      tcpCharts = (\n        <>\n          {hasTcpIn && (\n            <StreamChart\n              key=\"tcp-inbound-request\"\n              label=\"TCP - Inbound Traffic\"\n              receivedRates={this.state.tcpReceivedIn}\n              sentRates={this.state.tcpSentIn}\n              unit=\"bytes\"\n            />\n          )}\n          {hasTcpOut && (\n            <StreamChart\n              key=\"tcp-outbound-request\"\n              label=\"TCP - Outbound Traffic\"\n              receivedRates={this.state.tcpReceivedOut}\n              sentRates={this.state.tcpSentOut}\n              unit=\"bytes\"\n            />\n          )}\n        </>\n      );\n    }\n\n    return (\n      <>\n        {grpcCharts}\n        {httpCharts}\n        {tcpCharts}\n      </>\n    );\n  };\n\n  private renderServiceList = (appBox): any[] => {\n    // likely 0 or 1 but support N in case of unanticipated labeling\n    const serviceList: any[] = [];\n\n    appBox.children(`node[nodeType = \"${NodeType.SERVICE}\"]`).forEach(serviceNode => {\n      const serviceNodeData = decoratedNodeData(serviceNode);\n      serviceList.push(renderBadgedLink(serviceNodeData, NodeType.SERVICE));\n      const aggregates = appBox.children(\n        `node[nodeType = \"${NodeType.AGGREGATE}\"][service = \"${serviceNodeData.service}\"]`\n      );\n      if (!!aggregates && aggregates.length > 0) {\n        const aggregateList: any[] = [];\n        aggregates.forEach(aggregateNode => {\n          const aggregateNodeData = decoratedNodeData(aggregateNode);\n          aggregateList.push(renderBadgedLink(aggregateNodeData, NodeType.AGGREGATE));\n        });\n        serviceList.push(<div>{aggregateList}</div>);\n      }\n    });\n\n    return serviceList;\n  };\n\n  private renderWorkloadList = (appBox): any[] => {\n    const workloadList: any[] = [];\n\n    appBox.children('node[workload]').forEach(node => {\n      const nodeData = decoratedNodeData(node);\n      workloadList.push(renderBadgedLink(nodeData, NodeType.WORKLOAD));\n    });\n\n    return workloadList;\n  };\n\n  private isGrpcRequests = (): boolean => {\n    return this.props.trafficRates.includes(TrafficRate.GRPC_REQUEST);\n  };\n\n  private hasGrpcTraffic = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcIn > 0],[grpcOut > 0]').size() > 0;\n  };\n\n  private hasGrpcIn = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcIn > 0]').size() > 0;\n  };\n\n  private hasGrpcOut = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[grpcOut > 0]').size() > 0;\n  };\n\n  private hasHttpTraffic = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[httpIn > 0],[httpOut > 0]').size() > 0;\n  };\n\n  private hasHttpIn = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[httpIn > 0]').size() > 0;\n  };\n\n  private hasHttpOut = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[httpOut > 0]').size() > 0;\n  };\n\n  private hasTcpTraffic = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpIn > 0],[tcpOut > 0]').size() > 0;\n  };\n  private hasTcpIn = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpIn > 0]').size() > 0;\n  };\n  private hasTcpOut = (appBox): boolean => {\n    return appBox.children().filter('[nodeType != \"service\"]').filter('[tcpOut > 0]').size() > 0;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
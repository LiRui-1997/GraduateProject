{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _statusMsg,\n    _jsxFileName = \"/root/kiali-ui/src/components/IstioStatus/IstioComponentStatus.tsx\";\n\nimport * as React from 'react';\nimport { Status } from '../../types/IstioStatus';\nimport { PFColors } from '../Pf/PfColors';\nimport { CheckCircleIcon, ExclamationCircleIcon, ExclamationTriangleIcon, MinusCircleIcon } from '@patternfly/react-icons';\nimport { Split, SplitItem } from '@patternfly/react-core';\nvar ErrorCoreComponent = {\n  color: PFColors.Danger,\n  icon: ExclamationCircleIcon\n};\nvar ErrorAddonComponent = {\n  color: PFColors.Warning,\n  icon: ExclamationTriangleIcon\n};\nvar NotReadyComponent = {\n  color: PFColors.Info,\n  icon: MinusCircleIcon\n};\nvar SuccessComponent = {\n  color: PFColors.Success,\n  icon: CheckCircleIcon\n}; // Mapping Valid-Core to Icon representation.\n\nvar validToIcon = {\n  'false-false': ErrorAddonComponent,\n  'false-true': ErrorCoreComponent,\n  'true-false': SuccessComponent,\n  'true-true': SuccessComponent\n};\nvar statusMsg = (_statusMsg = {}, _defineProperty(_statusMsg, Status.NotFound, 'Not found'), _defineProperty(_statusMsg, Status.NotReady, 'Not ready'), _defineProperty(_statusMsg, Status.Unhealthy, 'Not healthy'), _defineProperty(_statusMsg, Status.Unreachable, 'Unreachable'), _statusMsg);\n\nvar IstioComponentStatus = /*#__PURE__*/function (_React$Component) {\n  _inherits(IstioComponentStatus, _React$Component);\n\n  var _super = _createSuper(IstioComponentStatus);\n\n  function IstioComponentStatus() {\n    var _this;\n\n    _classCallCheck(this, IstioComponentStatus);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderIcon = function (status, isCore) {\n      var compIcon = validToIcon[\"\".concat(status === Status.Healthy, \"-\").concat(isCore)];\n\n      if (status === Status.NotReady) {\n        compIcon = NotReadyComponent;\n      }\n\n      var IconComponent = compIcon.icon;\n      return /*#__PURE__*/React.createElement(IconComponent, {\n        style: {\n          color: compIcon.color,\n          marginTop: 5\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 12\n        }\n      });\n    };\n\n    _this.renderCells = function () {\n      var comp = _this.props.componentStatus;\n      return [/*#__PURE__*/React.createElement(Split, {\n        key: 'cell-status-icon-' + comp.name,\n        gutter: 'md',\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SplitItem, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, _this.renderIcon(_this.props.componentStatus.status, _this.props.componentStatus.is_core)), /*#__PURE__*/React.createElement(SplitItem, {\n        isFilled: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, comp.name), /*#__PURE__*/React.createElement(SplitItem, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }, statusMsg[comp.status]))];\n    };\n\n    return _this;\n  }\n\n  _createClass(IstioComponentStatus, [{\n    key: \"render\",\n    value: function render() {\n      return this.renderCells();\n    }\n  }]);\n\n  return IstioComponentStatus;\n}(React.Component);\n\nexport default IstioComponentStatus;","map":{"version":3,"sources":["/root/kiali-ui/src/components/IstioStatus/IstioComponentStatus.tsx"],"names":["React","Status","PFColors","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","MinusCircleIcon","Split","SplitItem","ErrorCoreComponent","color","Danger","icon","ErrorAddonComponent","Warning","NotReadyComponent","Info","SuccessComponent","Success","validToIcon","statusMsg","NotFound","NotReady","Unhealthy","Unreachable","IstioComponentStatus","renderIcon","status","isCore","compIcon","Healthy","IconComponent","marginTop","renderCells","comp","props","componentStatus","name","is_core","Component"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAA0BC,MAA1B,QAAwC,yBAAxC;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SACEC,eADF,EAEEC,qBAFF,EAGEC,uBAHF,EAIEC,eAJF,QAKO,yBALP;AAMA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,wBAAjC;AAWA,IAAMC,kBAAiC,GAAG;AACxCC,EAAAA,KAAK,EAAER,QAAQ,CAACS,MADwB;AAExCC,EAAAA,IAAI,EAAER;AAFkC,CAA1C;AAKA,IAAMS,mBAAkC,GAAG;AACzCH,EAAAA,KAAK,EAAER,QAAQ,CAACY,OADyB;AAEzCF,EAAAA,IAAI,EAAEP;AAFmC,CAA3C;AAKA,IAAMU,iBAAgC,GAAG;AACvCL,EAAAA,KAAK,EAAER,QAAQ,CAACc,IADuB;AAEvCJ,EAAAA,IAAI,EAAEN;AAFiC,CAAzC;AAKA,IAAMW,gBAA+B,GAAG;AACtCP,EAAAA,KAAK,EAAER,QAAQ,CAACgB,OADsB;AAEtCN,EAAAA,IAAI,EAAET;AAFgC,CAAxC,C,CAKA;;AACA,IAAMgB,WAA+C,GAAG;AACtD,iBAAeN,mBADuC;AAEtD,gBAAcJ,kBAFwC;AAGtD,gBAAcQ,gBAHwC;AAItD,eAAaA;AAJyC,CAAxD;AAOA,IAAMG,SAAS,iDACZnB,MAAM,CAACoB,QADK,EACM,WADN,+BAEZpB,MAAM,CAACqB,QAFK,EAEM,WAFN,+BAGZrB,MAAM,CAACsB,SAHK,EAGO,aAHP,+BAIZtB,MAAM,CAACuB,WAJK,EAIS,aAJT,cAAf;;IAOMC,oB;;;;;;;;;;;;;;;;UACJC,U,GAAa,UAACC,MAAD,EAAiBC,MAAjB,EAAqC;AAChD,UAAIC,QAAQ,GAAGV,WAAW,WAAIQ,MAAM,KAAK1B,MAAM,CAAC6B,OAAtB,cAAiCF,MAAjC,EAA1B;;AACA,UAAID,MAAM,KAAK1B,MAAM,CAACqB,QAAtB,EAAgC;AAC9BO,QAAAA,QAAQ,GAAGd,iBAAX;AACD;;AACD,UAAMgB,aAAa,GAAGF,QAAQ,CAACjB,IAA/B;AACA,0BAAO,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAE;AAAEF,UAAAA,KAAK,EAAEmB,QAAQ,CAACnB,KAAlB;AAAyBsB,UAAAA,SAAS,EAAE;AAApC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,K;;UAEDC,W,GAAc,YAAM;AAClB,UAAMC,IAAI,GAAG,MAAKC,KAAL,CAAWC,eAAxB;AAEA,aAAO,cACL,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAE,sBAAsBF,IAAI,CAACG,IAAvC;AAA6C,QAAA,MAAM,EAAE,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAY,MAAKX,UAAL,CAAgB,MAAKS,KAAL,CAAWC,eAAX,CAA2BT,MAA3C,EAAmD,MAAKQ,KAAL,CAAWC,eAAX,CAA2BE,OAA9E,CAAZ,CADF,eAEE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BJ,IAAI,CAACG,IAAjC,CAFF,eAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAYjB,SAAS,CAACc,IAAI,CAACP,MAAN,CAArB,CAHF,CADK,CAAP;AAOD,K;;;;;;;WAED,kBAAS;AACP,aAAO,KAAKM,WAAL,EAAP;AACD;;;;EAxBgCjC,KAAK,CAACuC,S;;AA2BzC,eAAed,oBAAf","sourcesContent":["import * as React from 'react';\nimport { ComponentStatus, Status } from '../../types/IstioStatus';\nimport { IconType } from '@patternfly/react-icons/dist/js/createIcon';\nimport { PFColors } from '../Pf/PfColors';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  MinusCircleIcon\n} from '@patternfly/react-icons';\nimport { Split, SplitItem } from '@patternfly/react-core';\n\ntype Props = {\n  componentStatus: ComponentStatus;\n};\n\nexport type ComponentIcon = {\n  color: string;\n  icon: IconType;\n};\n\nconst ErrorCoreComponent: ComponentIcon = {\n  color: PFColors.Danger,\n  icon: ExclamationCircleIcon\n};\n\nconst ErrorAddonComponent: ComponentIcon = {\n  color: PFColors.Warning,\n  icon: ExclamationTriangleIcon\n};\n\nconst NotReadyComponent: ComponentIcon = {\n  color: PFColors.Info,\n  icon: MinusCircleIcon\n};\n\nconst SuccessComponent: ComponentIcon = {\n  color: PFColors.Success,\n  icon: CheckCircleIcon\n};\n\n// Mapping Valid-Core to Icon representation.\nconst validToIcon: { [valid: string]: ComponentIcon } = {\n  'false-false': ErrorAddonComponent,\n  'false-true': ErrorCoreComponent,\n  'true-false': SuccessComponent,\n  'true-true': SuccessComponent\n};\n\nconst statusMsg = {\n  [Status.NotFound]: 'Not found',\n  [Status.NotReady]: 'Not ready',\n  [Status.Unhealthy]: 'Not healthy',\n  [Status.Unreachable]: 'Unreachable'\n};\n\nclass IstioComponentStatus extends React.Component<Props> {\n  renderIcon = (status: Status, isCore: boolean) => {\n    let compIcon = validToIcon[`${status === Status.Healthy}-${isCore}`];\n    if (status === Status.NotReady) {\n      compIcon = NotReadyComponent;\n    }\n    const IconComponent = compIcon.icon;\n    return <IconComponent style={{ color: compIcon.color, marginTop: 5 }} />;\n  };\n\n  renderCells = () => {\n    const comp = this.props.componentStatus;\n\n    return [\n      <Split key={'cell-status-icon-' + comp.name} gutter={'md'}>\n        <SplitItem>{this.renderIcon(this.props.componentStatus.status, this.props.componentStatus.is_core)}</SplitItem>\n        <SplitItem isFilled={true}>{comp.name}</SplitItem>\n        <SplitItem>{statusMsg[comp.status]}</SplitItem>\n      </Split>\n    ];\n  };\n\n  render() {\n    return this.renderCells();\n  }\n}\n\nexport default IstioComponentStatus;\n"]},"metadata":{},"sourceType":"module"}
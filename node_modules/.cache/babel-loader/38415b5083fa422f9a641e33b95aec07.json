{"ast":null,"code":"import _slicedToArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/IstioConfigNew/AuthorizationPolicyForm/When/ConditionBuilder.tsx\";\nimport * as React from 'react';\nimport { cellWidth, Table, TableBody, TableHeader } from '@patternfly/react-table'; // Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\n\nimport { Button, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { isValidRequestHeaderName } from '../../../../helpers/ValidationHelpers';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { isValidIp } from '../../../../utils/IstioConfigUtils';\nvar headerCells = [{\n  title: 'Condition Key',\n  transforms: [cellWidth(30)],\n  props: {}\n}, {\n  title: 'Values',\n  transforms: [cellWidth(30)],\n  props: {}\n}, {\n  title: 'Not Values',\n  transforms: [cellWidth(30)],\n  props: {}\n}];\nvar noValidKeyStyle = style({\n  color: PFColors.Red100\n});\nvar conditionFixedKeys = ['source.ip', 'source.namespace', 'source.principal', 'request.auth.principal', 'request.auth.audiences', 'request.auth.presenter', 'destination.ip', 'destination.port', 'connection.sni'];\n\nvar ConditionBuilder = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConditionBuilder, _React$Component);\n\n  var _super = _createSuper(ConditionBuilder);\n\n  function ConditionBuilder(props) {\n    var _this;\n\n    _classCallCheck(this, ConditionBuilder);\n\n    _this = _super.call(this, props);\n\n    _this.onAddNewConditionKey = function (key, _) {\n      _this.setState(function (prevState) {\n        prevState.condition.key = key;\n        return {\n          condition: prevState.condition\n        };\n      });\n    };\n\n    _this.onAddNewValues = function (value, _) {\n      _this.setState(function (prevState) {\n        prevState.condition.values = value.length === 0 ? [] : value.split(',');\n        return {\n          condition: prevState.condition\n        };\n      });\n    };\n\n    _this.onAddNewNotValues = function (notValues, _) {\n      _this.setState(function (prevState) {\n        prevState.condition.notValues = notValues.length === 0 ? [] : notValues.split(',');\n        return {\n          condition: prevState.condition\n        };\n      });\n    };\n\n    _this.onAddConditionToList = function () {\n      var conditionItem = _this.state.condition;\n\n      _this.setState({\n        condition: {\n          key: ''\n        }\n      }, function () {\n        _this.props.onAddCondition(conditionItem);\n      });\n    };\n\n    _this.isValidKey = function (key) {\n      if (key.length === 0) {\n        return false;\n      }\n\n      if (conditionFixedKeys.includes(key)) {\n        return true;\n      }\n\n      if (key.startsWith('request.headers')) {\n        return isValidRequestHeaderName(key);\n      }\n\n      if (key.startsWith('experimental.envoy.filters.')) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.isValidCondition = function () {\n      var key = _this.state.condition.key;\n\n      var isValidKey = _this.isValidKey(key);\n\n      if (!isValidKey) {\n        return [false, true, true, 'Condition Key not supported'];\n      }\n\n      var values = _this.state.condition.values;\n      var notValues = _this.state.condition.notValues;\n\n      if ((!values || values.length === 0) && (!notValues || notValues.length === 0)) {\n        return [true, false, false, 'Values and NotValues cannot be empty'];\n      }\n\n      if (key === 'source.ip' || key === 'destination.ip') {\n        // If some value is not an IP, then is not valid\n        // @ts-ignore\n        var valuesValid = values ? !values.some(function (value) {\n          return !isValidIp(value);\n        }) : true; // @ts-ignore\n\n        var notValuesValid = notValues ? !notValues.some(function (value) {\n          return !isValidIp(value);\n        }) : true;\n        return [true, valuesValid, notValuesValid, 'Not valid IP'];\n      }\n\n      return [true, true, true, ''];\n    };\n\n    _this.rows = function (validKey, validValues, validNotValues, validText) {\n      return [{\n        key: 'conditionKeyNew',\n        cells: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: _this.state.condition.key,\n          type: \"text\",\n          id: \"addNewConditionKey\",\n          key: \"addNewConditionKey\",\n          \"aria-describedby\": \"add new condition key\",\n          name: \"addNewConditionKey\",\n          onChange: _this.onAddNewConditionKey,\n          isValid: validKey,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }\n        }), !validKey && /*#__PURE__*/React.createElement(\"div\", {\n          key: \"hostsHelperText\",\n          className: noValidKeyStyle,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }\n        }, validText)), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: _this.state.condition.values ? _this.state.condition.values.join(',') : '',\n          type: \"text\",\n          id: \"addNewValues\",\n          key: \"addNewValues\",\n          \"aria-describedby\": \"add new condition values\",\n          name: \"addNewConditionValues\",\n          onChange: _this.onAddNewValues,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }\n        }), !validValues && /*#__PURE__*/React.createElement(\"div\", {\n          key: \"hostsHelperText\",\n          className: noValidKeyStyle,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }\n        }, validText)), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n          value: _this.state.condition.notValues ? _this.state.condition.notValues.join(',') : '',\n          type: \"text\",\n          id: \"addNewNotValues\",\n          key: \"addNewNotValues\",\n          \"aria-describedby\": \"add new condition not values\",\n          name: \"addNewNotValues\",\n          onChange: _this.onAddNewNotValues,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }\n        }), !validNotValues && /*#__PURE__*/React.createElement(\"div\", {\n          key: \"hostsHelperText\",\n          className: noValidKeyStyle,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }\n        }, validText))]\n      }];\n    };\n\n    _this.state = {\n      condition: {\n        key: ''\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ConditionBuilder, [{\n    key: \"render\",\n    value: function render() {\n      var _this$isValidConditio = this.isValidCondition(),\n          _this$isValidConditio2 = _slicedToArray(_this$isValidConditio, 4),\n          validKey = _this$isValidConditio2[0],\n          validValues = _this$isValidConditio2[1],\n          validNotValues = _this$isValidConditio2[2],\n          validText = _this$isValidConditio2[3];\n\n      var validCondition = validKey && validValues && validNotValues;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n        \"aria-label\": \"Condition Builder\",\n        cells: headerCells,\n        rows: this.rows(validKey, validValues, validNotValues, validText),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"link\",\n        icon: /*#__PURE__*/React.createElement(PlusCircleIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }\n        }),\n        isDisabled: !validCondition,\n        onClick: this.onAddConditionToList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 9\n        }\n      }, \"Add Condition to When List\"));\n    }\n  }]);\n\n  return ConditionBuilder;\n}(React.Component);\n\nexport default ConditionBuilder;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/IstioConfigNew/AuthorizationPolicyForm/When/ConditionBuilder.tsx"],"names":["React","cellWidth","Table","TableBody","TableHeader","Button","TextInputBase","TextInput","PlusCircleIcon","isValidRequestHeaderName","style","PFColors","isValidIp","headerCells","title","transforms","props","noValidKeyStyle","color","Red100","conditionFixedKeys","ConditionBuilder","onAddNewConditionKey","key","_","setState","prevState","condition","onAddNewValues","value","values","length","split","onAddNewNotValues","notValues","onAddConditionToList","conditionItem","state","onAddCondition","isValidKey","includes","startsWith","isValidCondition","valuesValid","some","notValuesValid","rows","validKey","validValues","validNotValues","validText","cells","join","validCondition","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { cellWidth, ICell, Table, TableBody, TableHeader } from '@patternfly/react-table';\n// Use TextInputBase like workaround while PF4 team work in https://github.com/patternfly/patternfly-react/issues/4072\nimport { Button, TextInputBase as TextInput } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { isValidRequestHeaderName } from '../../../../helpers/ValidationHelpers';\nimport { style } from 'typestyle';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { isValidIp } from '../../../../utils/IstioConfigUtils';\n\nexport type Condition = {\n  key: string;\n  values?: string[];\n  notValues?: string[];\n};\n\ntype Props = {\n  onAddCondition: (condition: Condition) => void;\n};\n\ntype State = {\n  condition: Condition;\n};\n\nconst headerCells: ICell[] = [\n  {\n    title: 'Condition Key',\n    transforms: [cellWidth(30) as any],\n    props: {}\n  },\n  {\n    title: 'Values',\n    transforms: [cellWidth(30) as any],\n    props: {}\n  },\n  {\n    title: 'Not Values',\n    transforms: [cellWidth(30) as any],\n    props: {}\n  }\n];\n\nconst noValidKeyStyle = style({\n  color: PFColors.Red100\n});\n\nconst conditionFixedKeys = [\n  'source.ip',\n  'source.namespace',\n  'source.principal',\n  'request.auth.principal',\n  'request.auth.audiences',\n  'request.auth.presenter',\n  'destination.ip',\n  'destination.port',\n  'connection.sni'\n];\n\nclass ConditionBuilder extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      condition: {\n        key: ''\n      }\n    };\n  }\n\n  onAddNewConditionKey = (key: string, _) => {\n    this.setState(prevState => {\n      prevState.condition.key = key;\n      return {\n        condition: prevState.condition\n      };\n    });\n  };\n\n  onAddNewValues = (value: string, _) => {\n    this.setState(prevState => {\n      prevState.condition.values = value.length === 0 ? [] : value.split(',');\n      return {\n        condition: prevState.condition\n      };\n    });\n  };\n\n  onAddNewNotValues = (notValues: string, _) => {\n    this.setState(prevState => {\n      prevState.condition.notValues = notValues.length === 0 ? [] : notValues.split(',');\n      return {\n        condition: prevState.condition\n      };\n    });\n  };\n\n  onAddConditionToList = () => {\n    const conditionItem = this.state.condition;\n    this.setState(\n      {\n        condition: {\n          key: ''\n        }\n      },\n      () => {\n        this.props.onAddCondition(conditionItem);\n      }\n    );\n  };\n\n  isValidKey = (key: string): boolean => {\n    if (key.length === 0) {\n      return false;\n    }\n    if (conditionFixedKeys.includes(key)) {\n      return true;\n    }\n    if (key.startsWith('request.headers')) {\n      return isValidRequestHeaderName(key);\n    }\n    if (key.startsWith('experimental.envoy.filters.')) {\n      return true;\n    }\n    return false;\n  };\n\n  // Helper to mark invalid any of the fields: key, values, notValues with helper text\n  isValidCondition = (): [boolean, boolean, boolean, string] => {\n    const key = this.state.condition.key;\n    const isValidKey = this.isValidKey(key);\n    if (!isValidKey) {\n      return [false, true, true, 'Condition Key not supported'];\n    }\n    const values = this.state.condition.values;\n    const notValues = this.state.condition.notValues;\n    if ((!values || values.length === 0) && (!notValues || notValues.length === 0)) {\n      return [true, false, false, 'Values and NotValues cannot be empty'];\n    }\n    if (key === 'source.ip' || key === 'destination.ip') {\n      // If some value is not an IP, then is not valid\n      // @ts-ignore\n      const valuesValid = values ? !values.some(value => !isValidIp(value)) : true;\n      // @ts-ignore\n      const notValuesValid = notValues ? !notValues.some(value => !isValidIp(value)) : true;\n      return [true, valuesValid, notValuesValid, 'Not valid IP'];\n    }\n    return [true, true, true, ''];\n  };\n\n  rows = (validKey: boolean, validValues: boolean, validNotValues: boolean, validText: string) => {\n    return [\n      {\n        key: 'conditionKeyNew',\n        cells: [\n          <>\n            <TextInput\n              value={this.state.condition.key}\n              type=\"text\"\n              id=\"addNewConditionKey\"\n              key=\"addNewConditionKey\"\n              aria-describedby=\"add new condition key\"\n              name=\"addNewConditionKey\"\n              onChange={this.onAddNewConditionKey}\n              isValid={validKey}\n            />\n            {!validKey && (\n              <div key=\"hostsHelperText\" className={noValidKeyStyle}>\n                {validText}\n              </div>\n            )}\n          </>,\n          <>\n            <TextInput\n              value={this.state.condition.values ? this.state.condition.values.join(',') : ''}\n              type=\"text\"\n              id=\"addNewValues\"\n              key=\"addNewValues\"\n              aria-describedby=\"add new condition values\"\n              name=\"addNewConditionValues\"\n              onChange={this.onAddNewValues}\n            />\n            {!validValues && (\n              <div key=\"hostsHelperText\" className={noValidKeyStyle}>\n                {validText}\n              </div>\n            )}\n          </>,\n          <>\n            <TextInput\n              value={this.state.condition.notValues ? this.state.condition.notValues.join(',') : ''}\n              type=\"text\"\n              id=\"addNewNotValues\"\n              key=\"addNewNotValues\"\n              aria-describedby=\"add new condition not values\"\n              name=\"addNewNotValues\"\n              onChange={this.onAddNewNotValues}\n            />\n            {!validNotValues && (\n              <div key=\"hostsHelperText\" className={noValidKeyStyle}>\n                {validText}\n              </div>\n            )}\n          </>\n        ]\n      }\n    ];\n  };\n\n  render() {\n    const [validKey, validValues, validNotValues, validText] = this.isValidCondition();\n    const validCondition = validKey && validValues && validNotValues;\n    return (\n      <>\n        <Table\n          aria-label=\"Condition Builder\"\n          cells={headerCells}\n          rows={this.rows(validKey, validValues, validNotValues, validText)}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        <Button\n          variant=\"link\"\n          icon={<PlusCircleIcon />}\n          isDisabled={!validCondition}\n          onClick={this.onAddConditionToList}\n        >\n          Add Condition to When List\n        </Button>\n      </>\n    );\n  }\n}\n\nexport default ConditionBuilder;\n"]},"metadata":{},"sourceType":"module"}
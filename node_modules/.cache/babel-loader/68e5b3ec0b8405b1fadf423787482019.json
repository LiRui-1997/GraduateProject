{"ast":null,"code":"import _pt from \"prop-types\";\nimport * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport classNames from 'classnames'; // eslint-disable-next-line @typescript-eslint/interface-name-prefix\n\nexport var EditableTextCell = function EditableTextCell(_ref) {\n  var value = _ref.value,\n      rowIndex = _ref.rowIndex,\n      cellIndex = _ref.cellIndex,\n      props = _ref.props,\n      handleTextInputChange = _ref.handleTextInputChange,\n      inputAriaLabel = _ref.inputAriaLabel,\n      isDisabled = _ref.isDisabled;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, React.createElement(TextInput, {\n    isDisabled: isDisabled,\n    value: props.editableValue !== undefined ? props.editableValue : value,\n    isValid: props.isValid,\n    type: \"text\",\n    onChange: function onChange(newValue, event) {\n      handleTextInputChange(newValue, event, rowIndex, cellIndex);\n    },\n    \"aria-label\": inputAriaLabel\n  }), React.createElement(\"div\", {\n    className: classNames(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableTextCell.propTypes = {\n  value: _pt.string.isRequired,\n  rowIndex: _pt.number.isRequired,\n  cellIndex: _pt.number.isRequired,\n  props: _pt.any.isRequired,\n  handleTextInputChange: _pt.func.isRequired,\n  inputAriaLabel: _pt.string.isRequired,\n  isDisabled: _pt.bool\n};","map":{"version":3,"sources":["/root/kiali-ui/node_modules/@patternfly/react-table/dist/esm/components/Table/EditableTextCell.js"],"names":["_pt","React","TextInput","inlineStyles","formStyles","classNames","EditableTextCell","value","rowIndex","cellIndex","props","handleTextInputChange","inputAriaLabel","isDisabled","createElement","Fragment","className","inlineEditValue","inlineEditInput","editableValue","undefined","isValid","type","onChange","newValue","event","formHelperText","modifiers","error","errorText","propTypes","string","isRequired","number","any","func","bool"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,qDAA1B;AACA,OAAOC,YAAP,MAAyB,gEAAzB;AACA,OAAOC,UAAP,MAAuB,mDAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAAqC;;AAErC,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAC9BC,KAD8B,QAC9BA,KAD8B;AAAA,MAE9BC,QAF8B,QAE9BA,QAF8B;AAAA,MAG9BC,SAH8B,QAG9BA,SAH8B;AAAA,MAI9BC,KAJ8B,QAI9BA,KAJ8B;AAAA,MAK9BC,qBAL8B,QAK9BA,qBAL8B;AAAA,MAM9BC,cAN8B,QAM9BA,cAN8B;AAAA,MAO9BC,UAP8B,QAO9BA,UAP8B;AAAA,SAQ1BZ,KAAK,CAACa,aAAN,CAAoBb,KAAK,CAACc,QAA1B,EAAoC,IAApC,EAA0Cd,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AACzEE,IAAAA,SAAS,EAAEb,YAAY,CAACc;AADiD,GAA3B,EAE7CV,KAF6C,CAA1C,EAEKN,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AACpCE,IAAAA,SAAS,EAAEb,YAAY,CAACe;AADY,GAA3B,EAERjB,KAAK,CAACa,aAAN,CAAoBZ,SAApB,EAA+B;AAChCW,IAAAA,UAAU,EAAEA,UADoB;AAEhCN,IAAAA,KAAK,EAAEG,KAAK,CAACS,aAAN,KAAwBC,SAAxB,GAAoCV,KAAK,CAACS,aAA1C,GAA0DZ,KAFjC;AAGhCc,IAAAA,OAAO,EAAEX,KAAK,CAACW,OAHiB;AAIhCC,IAAAA,IAAI,EAAE,MAJ0B;AAKhCC,IAAAA,QAAQ,EAAE,kBAACC,QAAD,EAAWC,KAAX,EAAqB;AAC7Bd,MAAAA,qBAAqB,CAACa,QAAD,EAAWC,KAAX,EAAkBjB,QAAlB,EAA4BC,SAA5B,CAArB;AACD,KAP+B;AAQhC,kBAAcG;AARkB,GAA/B,CAFQ,EAWPX,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAC7BE,IAAAA,SAAS,EAAEX,UAAU,CAACD,UAAU,CAACsB,cAAZ,EAA4BtB,UAAU,CAACuB,SAAX,CAAqBC,KAAjD,CADQ;AAE7B,iBAAa;AAFgB,GAA3B,EAGDlB,KAAK,CAACmB,SAHL,CAXO,CAFL,CAR0B;AAAA,CAAzB;AAyBPvB,gBAAgB,CAACwB,SAAjB,GAA6B;AAC3BvB,EAAAA,KAAK,EAAEP,GAAG,CAAC+B,MAAJ,CAAWC,UADS;AAE3BxB,EAAAA,QAAQ,EAAER,GAAG,CAACiC,MAAJ,CAAWD,UAFM;AAG3BvB,EAAAA,SAAS,EAAET,GAAG,CAACiC,MAAJ,CAAWD,UAHK;AAI3BtB,EAAAA,KAAK,EAAEV,GAAG,CAACkC,GAAJ,CAAQF,UAJY;AAK3BrB,EAAAA,qBAAqB,EAAEX,GAAG,CAACmC,IAAJ,CAASH,UALL;AAM3BpB,EAAAA,cAAc,EAAEZ,GAAG,CAAC+B,MAAJ,CAAWC,UANA;AAO3BnB,EAAAA,UAAU,EAAEb,GAAG,CAACoC;AAPW,CAA7B","sourcesContent":["import _pt from \"prop-types\";\nimport * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport classNames from 'classnames'; // eslint-disable-next-line @typescript-eslint/interface-name-prefix\n\nexport const EditableTextCell = ({\n  value,\n  rowIndex,\n  cellIndex,\n  props,\n  handleTextInputChange,\n  inputAriaLabel,\n  isDisabled\n}) => React.createElement(React.Fragment, null, React.createElement(\"div\", {\n  className: inlineStyles.inlineEditValue\n}, value), React.createElement(\"div\", {\n  className: inlineStyles.inlineEditInput\n}, React.createElement(TextInput, {\n  isDisabled: isDisabled,\n  value: props.editableValue !== undefined ? props.editableValue : value,\n  isValid: props.isValid,\n  type: \"text\",\n  onChange: (newValue, event) => {\n    handleTextInputChange(newValue, event, rowIndex, cellIndex);\n  },\n  \"aria-label\": inputAriaLabel\n}), React.createElement(\"div\", {\n  className: classNames(formStyles.formHelperText, formStyles.modifiers.error),\n  \"aria-live\": \"polite\"\n}, props.errorText)));\nEditableTextCell.propTypes = {\n  value: _pt.string.isRequired,\n  rowIndex: _pt.number.isRequired,\n  cellIndex: _pt.number.isRequired,\n  props: _pt.any.isRequired,\n  handleTextInputChange: _pt.func.isRequired,\n  inputAriaLabel: _pt.string.isRequired,\n  isDisabled: _pt.bool\n};\n//# sourceMappingURL=EditableTextCell.js.map"]},"metadata":{},"sourceType":"module"}
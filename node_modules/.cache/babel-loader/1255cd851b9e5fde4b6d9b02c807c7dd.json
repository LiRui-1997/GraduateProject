{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentInfoDescription.tsx\";\nimport * as React from 'react';\nimport { Card // CardActions,\n, CardBody, CardHead, CardHeader, DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow // Dropdown,\n// DropdownItem,\n, Grid, GridItem // KebabToggle,\n, List, ListItem // PopoverPosition,\n, Stack, StackItem, Tab, Tabs, Text, TextVariants, Title // Tooltip\n} from '@patternfly/react-core';\nimport LocalTime from '../../../../components/Time/LocalTime';\nimport * as API from '../../../../services/Api';\nimport { Link } from 'react-router-dom';\nimport { RenderComponentScroll } from '../../../../components/Nav/Page'; // import { GraphType } from '../../../../types/Graph';\n// import history from '../../../../app/History';\n\nimport jsyaml from 'js-yaml';\nimport YAML from 'yaml'; // import { KialiIcon } from '../../../../config/KialiIcon';\n\nimport { style } from 'typestyle';\nimport equal from 'fast-deep-equal';\nimport TrafficControlInfo from './TrafficControlInfo';\nimport ErrorBoundaryWithMessage from '../../../../components/ErrorBoundary/ErrorBoundaryWithMessage';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { PFBadge } from 'components/Pf/PfBadges';\nvar infoStyle = style({\n  margin: '0px 16px 2px 4px'\n});\n\nvar ExperimentInfoDescription = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExperimentInfoDescription, _React$Component);\n\n  var _super = _createSuper(ExperimentInfoDescription);\n\n  function ExperimentInfoDescription(props) {\n    var _this;\n\n    _classCallCheck(this, ExperimentInfoDescription);\n\n    _this = _super.call(this, props);\n\n    _this.onDownloadClick = function () {\n      API.getExperimentYAML(_this.props.namespace, _this.props.experimentDetails.experimentItem.name).then(function (response) {\n        return response.data;\n      }).then(function (data) {\n        var _link$parentNode;\n\n        var url = window.URL.createObjectURL(new Blob([YAML.stringify(jsyaml.safeLoad(JSON.stringify(data, null, 2)))], {\n          type: 'application/json'\n        }));\n        var link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', _this.props.experimentDetails.experimentItem.name + \".yaml\"); // 3. Append to html page\n\n        document.body.appendChild(link); // 4. Force download\n\n        link.click(); // 5. Clean up and remove the link\n\n        (_link$parentNode = link.parentNode) === null || _link$parentNode === void 0 ? void 0 : _link$parentNode.removeChild(link);\n      });\n    };\n\n    _this.state = {\n      isKebabOpen: false,\n      isUpdated: false\n    };\n    return _this;\n  }\n\n  _createClass(ExperimentInfoDescription, [{\n    key: \"serviceLink\",\n    value: function serviceLink(namespace, workload) {\n      return '/namespaces/' + namespace + '/services/' + workload;\n    }\n  }, {\n    key: \"serviceInfo\",\n    value: function serviceInfo() {\n      return [/*#__PURE__*/React.createElement(DataListCell, {\n        key: \"service-icon\",\n        isIcon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: {\n          badge: 'S'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(DataListCell, {\n        key: \"targetService\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, \"\\u76EE\\u6807\\u670D\\u52A1\"))];\n    }\n  }, {\n    key: \"serviceLinkCell\",\n    value: function serviceLinkCell(bname) {\n      return [/*#__PURE__*/React.createElement(DataListCell, {\n        key: bname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, bname))];\n    }\n  }, {\n    key: \"renderDeployments\",\n    value: function renderDeployments(baseline, kind) {\n      var linkTo = '/namespaces/' + this.props.namespace + '/workloads/' + baseline;\n\n      if (kind === 'Service') {\n        linkTo = '/namespaces/' + this.props.namespace + '/services/' + baseline;\n      }\n\n      return /*#__PURE__*/React.createElement(ListItem, {\n        key: \"AppService_\".concat(baseline),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: linkTo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, baseline));\n    }\n  }, {\n    key: \"baselineInfo\",\n    value: function baselineInfo(bname, binfo, kind) {\n      var workloadList = this.renderDeployments(binfo, kind);\n      var badgeKind = kind === 'Deployment' ? 'W' : 'S';\n      return [/*#__PURE__*/React.createElement(DataListCell, {\n        key: \"workload-icon\",\n        isIcon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: {\n          badge: badgeKind\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(DataListCell, {\n        key: bname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }, bname), /*#__PURE__*/React.createElement(List, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, workloadList))];\n    }\n  }, {\n    key: \"candidatesInfo\",\n    value: function candidatesInfo() {\n      var _this$props$experimen,\n          _this2 = this;\n\n      (_this$props$experimen = this.props.experimentDetails) === null || _this$props$experimen === void 0 ? void 0 : _this$props$experimen.experimentItem.candidates.map(function (can) {\n        var _this2$props$experime, _this2$props$experime2;\n\n        var kind = ((_this2$props$experime = _this2.props.experimentDetails) === null || _this2$props$experime === void 0 ? void 0 : _this2$props$experime.experimentItem.kind) ? (_this2$props$experime2 = _this2.props.experimentDetails) === null || _this2$props$experime2 === void 0 ? void 0 : _this2$props$experime2.experimentItem.kind : 'Deployment';\n        return _this2.baselineInfo('Candidate', can.name, kind);\n      });\n    }\n  }, {\n    key: \"percentageInfo\",\n    value: function percentageInfo(bname, bpercentage) {\n      return [/*#__PURE__*/React.createElement(DataListCell, {\n        key: bname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, \"Weight\"), /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, bpercentage, \" %\"))];\n    }\n  }, {\n    key: \"defaultTab\",\n    value: function defaultTab() {\n      return 'trafficControl';\n    }\n  }, {\n    key: \"gatewayInfo\",\n    value: function gatewayInfo(badgeKind, namespace, gatewayname) {\n      var linkTo = '/namespaces/' + namespace + '/istio/gateways/' + gatewayname;\n      return [/*#__PURE__*/React.createElement(DataListCell, {\n        key: \"workload-icon\",\n        isIcon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: {\n          badge: badgeKind\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(DataListCell, {\n        key: \"gateway\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, \"Gateway\"), /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: linkTo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }, gatewayname)))];\n    }\n  }, {\n    key: \"getConclusionList\",\n    value: function getConclusionList(conclusions) {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }\n      }, conclusions.map(function (sub, subIdx) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: subIdx,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 18\n          }\n        }, sub);\n      }));\n    }\n  }, {\n    key: \"renderCardHead\",\n    value: function renderCardHead() {\n      // const graphCardActions = [\n      //   <DropdownItem key=\"viewGraph\" onClick={this.showFullMetric}>\n      //     Show service inbound metrics\n      //   </DropdownItem>,\n      //   <DropdownItem key=\"viewGraph\" onClick={this.showFullGraph}>\n      //     Show traffic graph\n      //   </DropdownItem>,\n      //   <DropdownItem key=\"viewGraph\" onClick={this.onDownloadClick}>\n      //     Download Experiment YAML\n      //   </DropdownItem>\n      // ];\n      return [/*#__PURE__*/React.createElement(CardHead, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        style: {\n          float: 'left'\n        },\n        headingLevel: \"h3\",\n        size: \"2xl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(PFBadge, {\n        badge: {\n          badge: this.props.experimentDetails.experimentType\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }), \"\\xA0\\xA0\", this.props.experimentDetails.experimentItem.name)))];\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!equal(this.props.experiment, prevProps.experiment)) {\n        this.setState({\n          isUpdated: true\n        });\n      } else if (equal(this.props.experiment, prevProps.experiment) && this.state.isUpdated) {\n        this.setState({\n          isUpdated: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$experimen2,\n          _this$props$experimen3,\n          _this$props$experimen4,\n          _this4 = this;\n\n      // let targetNamespace = this.props.experimentDetails\n      //   ? this.props.experimentDetails.experimentItem.targetServiceNamespace\n      //   : this.props.namespace;\n      var targetService = this.props.experimentDetails ? this.props.experimentDetails.experimentItem.targetService : this.props.target;\n      var statusString = this.props.experimentDetails ? this.props.experimentDetails.experimentItem.status : '';\n\n      if (this.props.actionTaken !== '') {\n        statusString = 'Waiting for result of action \"' + this.props.actionTaken + '\" ';\n      }\n\n      var hasHosts = this.props.experimentDetails ? this.props.experimentDetails.networking && this.props.experimentDetails.networking.hosts ? this.props.experimentDetails.networking.hosts.length > 0 : false : false;\n      var winnerInfo = '';\n      var additionInfo = '';\n\n      if (this.props.experimentDetails.experimentItem.status.indexOf('Abort') > 0) {\n        winnerInfo = ' (Tentative)';\n        additionInfo = ' at the time of Termination(Abort).';\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RenderComponentScroll, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        gutter: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        gutter: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 19\n        }\n      }, ((_this$props$experimen2 = this.props.experimentDetails) === null || _this$props$experimen2 === void 0 ? void 0 : _this$props$experimen2.experimentItem.kind) === 'Deployment' ? this.renderCardHead() : '', /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DataList, {\n        \"aria-label\": \"baseline and candidate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 23\n        }\n      }, ((_this$props$experimen3 = this.props.experimentDetails) === null || _this$props$experimen3 === void 0 ? void 0 : _this$props$experimen3.experimentItem.kind) === 'Deployment' ? /*#__PURE__*/React.createElement(DataListItem, {\n        \"aria-labelledby\": \"target\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: this.serviceInfo(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: this.serviceLinkCell(targetService),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 31\n        }\n      }))) : '', /*#__PURE__*/React.createElement(DataListItem, {\n        \"aria-labelledby\": \"Baseline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: this.baselineInfo('基准版本', this.props.experimentDetails ? this.props.experimentDetails.experimentItem.baseline.name : '', this.props.experimentDetails ? this.props.experimentDetails.experimentItem.kind : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: this.percentageInfo('候选版本', this.props.experimentDetails ? this.props.experimentDetails.experimentItem.baseline.weight : 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }))), (_this$props$experimen4 = this.props.experimentDetails) === null || _this$props$experimen4 === void 0 ? void 0 : _this$props$experimen4.experimentItem.candidates.map(function (can) {\n        var _this4$props$experime, _this4$props$experime2;\n\n        var kind = ((_this4$props$experime = _this4.props.experimentDetails) === null || _this4$props$experime === void 0 ? void 0 : _this4$props$experime.experimentItem.kind) ? (_this4$props$experime2 = _this4.props.experimentDetails) === null || _this4$props$experime2 === void 0 ? void 0 : _this4$props$experime2.experimentItem.kind : 'Deployment';\n        return /*#__PURE__*/React.createElement(DataListItem, {\n          \"aria-labelledby\": \"Candidate\",\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(DataListItemRow, {\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 31\n          }\n        }, /*#__PURE__*/React.createElement(DataListItemCells, {\n          dataListCells: _this4.baselineInfo('Candidate', can.name, kind),\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(DataListItemCells, {\n          dataListCells: _this4.percentageInfo('Candidate', can.weight),\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 33\n          }\n        })));\n      }), hasHosts ? /*#__PURE__*/React.createElement(DataListItem, {\n        \"aria-labelledby\": \"Gateway\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: this.gatewayInfo('H', this.props.namespace, this.props.experimentDetails.networking ? this.props.experimentDetails.networking.hosts[0].gateway : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(DataListItemCells, {\n        dataListCells: /*#__PURE__*/React.createElement(DataListCell, {\n          key: \"gateway\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 35\n          }\n        }, /*#__PURE__*/React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 37\n          }\n        }, \"Name\"), /*#__PURE__*/React.createElement(Text, {\n          component: TextVariants.h3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 37\n          }\n        }, this.props.experimentDetails.networking ? this.props.experimentDetails.networking.hosts[0].name : '')),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 31\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Stack, {\n        gutter: \"md\",\n        style: {\n          marginTop: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        id: 'Status',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 27\n        }\n      }, \" \\u5B9E\\u9A8C\\u72B6\\u6001: \"), statusString), /*#__PURE__*/React.createElement(StackItem, {\n        id: 'Status',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 27\n        }\n      }, \" \\u5F53\\u524D\\u9636\\u6BB5: \"), this.props.experimentDetails ? this.props.experimentDetails.experimentItem.phase : ''), /*#__PURE__*/React.createElement(StackItem, {\n        id: 'Winner',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 25\n        }\n      }, this.props.experimentDetails.experimentItem.endTime !== '' ? /*#__PURE__*/React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 33\n        }\n      }, this.props.experimentDetails.experimentItem.winner.winning_version_found ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 39\n        }\n      }, \" \\u83B7\\u80DC\\u7248\\u672C: \", winnerInfo), this.props.experimentDetails.experimentItem.winner.name) : /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 37\n        }\n      }, \" \\u672A\\u627E\\u5230\\u83B7\\u80DC\\u7248\\u672C \")))) : /*#__PURE__*/React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 35\n        }\n      }, ' ', this.props.experimentDetails.experimentItem.endTime === '' ? '当前最佳版本' : '获胜版本', ' '), this.props.experimentDetails.experimentItem.winner.name)), /*#__PURE__*/React.createElement(GridItem, {\n        span: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 35\n        }\n      }, \" Probability of Winning: \"), this.props.experimentDetails.experimentItem.winner.probability_of_winning_for_best_version)))), /*#__PURE__*/React.createElement(StackItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(GridItem, {\n        span: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        id: 'started_at',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 33\n        }\n      }, \" Created at \"), /*#__PURE__*/React.createElement(LocalTime, {\n        time: this.props.experimentDetails && this.props.experimentDetails.experimentItem.initTime ? this.props.experimentDetails.experimentItem.initTime : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        id: 'started_at',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 33\n        }\n      }, \" Started at \"), /*#__PURE__*/React.createElement(LocalTime, {\n        time: this.props.experimentDetails && this.props.experimentDetails.experimentItem.startTime ? this.props.experimentDetails.experimentItem.startTime : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(StackItem, {\n        id: 'ended_at',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        component: TextVariants.h3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 33\n        }\n      }, \" Ended at \"), /*#__PURE__*/React.createElement(LocalTime, {\n        time: this.props.experimentDetails && this.props.experimentDetails.experimentItem.endTime ? this.props.experimentDetails.experimentItem.endTime : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 33\n        }\n      }))))))))))), /*#__PURE__*/React.createElement(GridItem, {\n        span: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        isFilled: false,\n        activeKey: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        title: 'Traffic Control',\n        eventKey: 0,\n        style: {\n          backgroundColor: PFColors.White\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ErrorBoundaryWithMessage, {\n        message: 'Something went wrong',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TrafficControlInfo, {\n        trafficControl: this.props.experimentDetails.trafficControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }\n      }))))))));\n    } // private onGraphActionsToggle = (isOpen: boolean) => {\n    //   this.setState({\n    //     isKebabOpen: isOpen\n    //   });\n    // };\n    // private showFullGraph = () => {\n    //   let graphType: GraphType = GraphType.WORKLOAD;\n    //   const graphUrl = `/graph/namespaces?graphType=${graphType}&injectServiceNodes=true&namespaces=${this.props.namespace}&idleNodes=false&edges=requestsPercentage&`;\n    //   history.push(graphUrl);\n    // };\n    // private showFullMetric = () => {\n    //   const graphUrl = `/namespaces/${this.props.namespace}/services/${this.props.target}?tab=metrics&bylbl=destination_version`;\n    //   let candidateVersions: string[];\n    //   candidateVersions = [];\n    //   this.props.experimentDetails?.experimentItem.candidates.map(can => {\n    //     candidateVersions.push(can.version);\n    //   });\n    //   if (this.props.experimentDetails !== undefined) {\n    //     const params = `=${this.props.experimentDetails.experimentItem.baseline.version},${candidateVersions.join()}`;\n    //     history.push(graphUrl + encodeURIComponent(params));\n    //   } else {\n    //     history.push(graphUrl);\n    //   }\n    // };\n\n  }]);\n\n  return ExperimentInfoDescription;\n}(React.Component);\n\nexport default ExperimentInfoDescription;","map":{"version":3,"sources":["/root/GraduateProject/src/pages/extensions/iter8/Iter8ExperimentDetails/ExperimentInfoDescription.tsx"],"names":["React","Card","CardBody","CardHead","CardHeader","DataList","DataListCell","DataListItem","DataListItemCells","DataListItemRow","Grid","GridItem","List","ListItem","Stack","StackItem","Tab","Tabs","Text","TextVariants","Title","LocalTime","API","Link","RenderComponentScroll","jsyaml","YAML","style","equal","TrafficControlInfo","ErrorBoundaryWithMessage","PFColors","PFBadge","infoStyle","margin","ExperimentInfoDescription","props","onDownloadClick","getExperimentYAML","namespace","experimentDetails","experimentItem","name","then","response","data","url","window","URL","createObjectURL","Blob","stringify","safeLoad","JSON","type","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","state","isKebabOpen","isUpdated","workload","badge","h3","bname","baseline","kind","linkTo","binfo","workloadList","renderDeployments","badgeKind","candidates","map","can","baselineInfo","bpercentage","gatewayname","conclusions","sub","subIdx","float","experimentType","prevProps","experiment","setState","targetService","target","statusString","status","actionTaken","hasHosts","networking","hosts","length","winnerInfo","additionInfo","indexOf","height","renderCardHead","serviceInfo","serviceLinkCell","percentageInfo","weight","gatewayInfo","gateway","marginTop","phase","endTime","winner","winning_version_found","probability_of_winning_for_best_version","initTime","startTime","backgroundColor","White","trafficControl","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Card,\n  // CardActions,\n  CardBody,\n  CardHead,\n  CardHeader,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  // Dropdown,\n  // DropdownItem,\n  Grid,\n  GridItem,\n  // KebabToggle,\n  List,\n  ListItem,\n  // PopoverPosition,\n  Stack,\n  StackItem,\n  Tab,\n  Tabs,\n  Text,\n  TextVariants,\n  Title,\n  // Tooltip\n} from '@patternfly/react-core';\n\nimport LocalTime from '../../../../components/Time/LocalTime';\nimport * as API from '../../../../services/Api';\nimport { Link } from 'react-router-dom';\nimport { Iter8ExpDetailsInfo } from '../../../../types/Iter8';\nimport { RenderComponentScroll } from '../../../../components/Nav/Page';\n// import { GraphType } from '../../../../types/Graph';\n// import history from '../../../../app/History';\nimport jsyaml from 'js-yaml';\nimport YAML from 'yaml';\n// import { KialiIcon } from '../../../../config/KialiIcon';\nimport { style } from 'typestyle';\nimport equal from 'fast-deep-equal';\nimport TrafficControlInfo from './TrafficControlInfo';\nimport ErrorBoundaryWithMessage from '../../../../components/ErrorBoundary/ErrorBoundaryWithMessage';\nimport { PFColors } from '../../../../components/Pf/PfColors';\nimport { PFBadge } from 'components/Pf/PfBadges';\n\ninterface ExperimentInfoDescriptionProps {\n  target: string;\n  namespace: string;\n  experimentDetails: Iter8ExpDetailsInfo;\n  experiment: string;\n  actionTaken: string;\n}\n\ntype ExperimentInfoState = {\n  isKebabOpen: boolean;\n  isUpdated: boolean;\n};\n\nconst infoStyle = style({\n  margin: '0px 16px 2px 4px'\n});\n\nclass ExperimentInfoDescription extends React.Component<ExperimentInfoDescriptionProps, ExperimentInfoState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isKebabOpen: false,\n      isUpdated: false\n    };\n  }\n\n  serviceLink(namespace: string, workload: string) {\n    return '/namespaces/' + namespace + '/services/' + workload;\n  }\n\n  serviceInfo() {\n    return [\n      <DataListCell key=\"service-icon\" isIcon={true}>\n        <PFBadge badge={{ badge: 'S' }} />\n      </DataListCell>,\n      <DataListCell key=\"targetService\">\n        <Text component={TextVariants.h3}>目标服务</Text>\n      </DataListCell>\n    ];\n  }\n\n  serviceLinkCell(bname: string) {\n    return [\n      <DataListCell key={bname}>\n        <Text component={TextVariants.h3}>\n          {bname}\n        </Text>\n      </DataListCell>\n    ];\n  }\n\n  renderDeployments(baseline: string, kind: string) {\n    let linkTo = '/namespaces/' + this.props.namespace + '/workloads/' + baseline;\n    if (kind === 'Service') {\n      linkTo = '/namespaces/' + this.props.namespace + '/services/' + baseline;\n    }\n    return (\n      <ListItem key={`AppService_${baseline}`}>\n        <Link to={linkTo}>{baseline}</Link>\n      </ListItem>\n    );\n  }\n\n  baselineInfo(bname: string, binfo: string, kind: string) {\n    const workloadList = this.renderDeployments(binfo, kind);\n    let badgeKind = kind === 'Deployment' ? 'W' : 'S';\n    return [\n      <DataListCell key=\"workload-icon\" isIcon={true}>\n        <PFBadge badge={{ badge: badgeKind }} />\n      </DataListCell>,\n      <DataListCell key={bname}>\n        <Text component={TextVariants.h3}>{bname}</Text>\n        <List>{workloadList}</List>\n      </DataListCell>\n    ];\n  }\n\n  candidatesInfo() {\n    this.props.experimentDetails?.experimentItem.candidates.map(can => {\n      let kind = this.props.experimentDetails?.experimentItem.kind\n        ? this.props.experimentDetails?.experimentItem.kind\n        : 'Deployment';\n      return this.baselineInfo('Candidate', can.name, kind);\n    });\n  }\n\n  percentageInfo(bname: string, bpercentage: number) {\n    return [\n      <DataListCell key={bname}>\n        <Text component={TextVariants.h3}>Weight</Text>\n        <Text>{bpercentage} %</Text>\n      </DataListCell>\n    ];\n  }\n\n  defaultTab() {\n    return 'trafficControl';\n  }\n\n  gatewayInfo(badgeKind: string, namespace: string, gatewayname: string) {\n    let linkTo = '/namespaces/' + namespace + '/istio/gateways/' + gatewayname;\n    return [\n      <DataListCell key=\"workload-icon\" isIcon={true}>\n        <PFBadge badge={{ badge: badgeKind }} />\n      </DataListCell>,\n      <DataListCell key=\"gateway\">\n        <Text>Gateway</Text>\n        <Text component={TextVariants.h3}>\n          <Link to={linkTo}>{gatewayname}</Link>\n        </Text>\n      </DataListCell>\n    ];\n  }\n\n  getConclusionList(conclusions: string[]) {\n    return (\n      <ul>\n        {conclusions.map((sub, subIdx) => {\n          return <li key={subIdx}>{sub}</li>;\n        })}\n      </ul>\n    );\n  }\n\n  onDownloadClick = () => {\n    API.getExperimentYAML(this.props.namespace, this.props.experimentDetails.experimentItem.name)\n      .then(response => response.data)\n      .then(data => {\n        const url = window.URL.createObjectURL(\n          new Blob([YAML.stringify(jsyaml.safeLoad(JSON.stringify(data, null, 2)))], { type: 'application/json' })\n        );\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', this.props.experimentDetails.experimentItem.name + `.yaml`);\n        // 3. Append to html page\n        document.body.appendChild(link); // 4. Force download\n        link.click(); // 5. Clean up and remove the link\n        link.parentNode?.removeChild(link);\n      });\n  };\n\n  renderCardHead() {\n    // const graphCardActions = [\n    //   <DropdownItem key=\"viewGraph\" onClick={this.showFullMetric}>\n    //     Show service inbound metrics\n    //   </DropdownItem>,\n    //   <DropdownItem key=\"viewGraph\" onClick={this.showFullGraph}>\n    //     Show traffic graph\n    //   </DropdownItem>,\n    //   <DropdownItem key=\"viewGraph\" onClick={this.onDownloadClick}>\n    //     Download Experiment YAML\n    //   </DropdownItem>\n    // ];\n\n    return [\n      <CardHead>\n        {/* <CardActions>\n          <Dropdown\n            toggle={<KebabToggle onToggle={this.onGraphActionsToggle} />}\n            dropdownItems={graphCardActions}\n            isPlain\n            isOpen={this.state.isKebabOpen}\n            position={'right'}\n          />\n        </CardActions> */}\n        <CardHeader>\n          <Title style={{ float: 'left' }} headingLevel=\"h3\" size=\"2xl\">\n            <PFBadge badge={{ badge: this.props.experimentDetails.experimentType }} />\n            &nbsp;&nbsp;\n            {this.props.experimentDetails.experimentItem.name}\n          </Title>\n        </CardHeader>\n      </CardHead>\n    ];\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.experiment, prevProps.experiment)) {\n      this.setState({ isUpdated: true });\n    } else if (equal(this.props.experiment, prevProps.experiment) && this.state.isUpdated) {\n      this.setState({ isUpdated: false });\n    }\n  }\n\n  render() {\n    // let targetNamespace = this.props.experimentDetails\n    //   ? this.props.experimentDetails.experimentItem.targetServiceNamespace\n    //   : this.props.namespace;\n    let targetService = this.props.experimentDetails\n      ? this.props.experimentDetails.experimentItem.targetService\n      : this.props.target;\n\n    let statusString = this.props.experimentDetails ? this.props.experimentDetails.experimentItem.status : '';\n    if (this.props.actionTaken !== '') {\n      statusString = 'Waiting for result of action \"' + this.props.actionTaken + '\" ';\n    }\n\n    let hasHosts = this.props.experimentDetails\n      ? this.props.experimentDetails.networking && this.props.experimentDetails.networking.hosts\n        ? this.props.experimentDetails.networking.hosts.length > 0\n        : false\n      : false;\n    let winnerInfo = '';\n    let additionInfo = '';\n    if (this.props.experimentDetails.experimentItem.status.indexOf('Abort') > 0) {\n      winnerInfo = ' (Tentative)';\n      additionInfo = ' at the time of Termination(Abort).';\n    }\n    return (\n      <>\n        <RenderComponentScroll>\n          <Grid gutter=\"md\">\n            <GridItem span={12}>\n              <Grid gutter=\"md\">\n                <GridItem span={6}>\n                  <Card style={{ height: '100%' }}>\n                    {this.props.experimentDetails?.experimentItem.kind === 'Deployment' ? this.renderCardHead() : ''}\n                    <CardBody>\n                      <DataList aria-label=\"baseline and candidate\">\n                        {this.props.experimentDetails?.experimentItem.kind === 'Deployment' ? (\n                          <DataListItem aria-labelledby=\"target\">\n                            <DataListItemRow>\n                              <DataListItemCells dataListCells={this.serviceInfo()} />\n                              <DataListItemCells dataListCells={this.serviceLinkCell(targetService)} />\n                            </DataListItemRow>\n                          </DataListItem>\n                        ) : (\n                          ''\n                        )}\n\n                        <DataListItem aria-labelledby=\"Baseline\">\n                          <DataListItemRow>\n                            <DataListItemCells\n                              dataListCells={this.baselineInfo(\n                                '基准版本',\n                                this.props.experimentDetails\n                                  ? this.props.experimentDetails.experimentItem.baseline.name\n                                  : '',\n                                this.props.experimentDetails ? this.props.experimentDetails.experimentItem.kind : ''\n                              )}\n                            />\n                            <DataListItemCells\n                              dataListCells={this.percentageInfo(\n                                '候选版本',\n                                this.props.experimentDetails\n                                  ? this.props.experimentDetails.experimentItem.baseline.weight\n                                  : 0\n                              )}\n                            />\n                          </DataListItemRow>\n                        </DataListItem>\n                        {this.props.experimentDetails?.experimentItem.candidates.map(can => {\n                          let kind = this.props.experimentDetails?.experimentItem.kind\n                            ? this.props.experimentDetails?.experimentItem.kind\n                            : 'Deployment';\n                          return (\n                            <DataListItem aria-labelledby=\"Candidate\">\n                              <DataListItemRow>\n                                <DataListItemCells dataListCells={this.baselineInfo('Candidate', can.name, kind)} />\n                                <DataListItemCells dataListCells={this.percentageInfo('Candidate', can.weight)} />\n                              </DataListItemRow>\n                            </DataListItem>\n                          );\n                        })}\n                        {hasHosts ? (\n                          <DataListItem aria-labelledby=\"Gateway\">\n                            <DataListItemRow>\n                              <DataListItemCells\n                                dataListCells={this.gatewayInfo(\n                                  'H',\n\n                                  this.props.namespace,\n                                  this.props.experimentDetails.networking\n                                    ? this.props.experimentDetails.networking.hosts[0].gateway\n                                    : ''\n                                )}\n                              />\n                              <DataListItemCells\n                                dataListCells={\n                                  <DataListCell key=\"gateway\">\n                                    <Text>Name</Text>\n                                    <Text component={TextVariants.h3}>\n                                      {this.props.experimentDetails.networking\n                                        ? this.props.experimentDetails.networking.hosts[0].name\n                                        : ''}\n                                    </Text>\n                                  </DataListCell>\n                                }\n                              />\n                            </DataListItemRow>\n                          </DataListItem>\n                        ) : (\n                          <></>\n                        )}\n                      </DataList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem span={6}>\n                  <Card style={{ height: '100%' }}>\n                    <CardBody>\n                      <Stack gutter=\"md\" style={{ marginTop: '10px' }}>\n                        <StackItem id={'Status'}>\n                          <Text component={TextVariants.h3}> 实验状态: </Text>\n                          {statusString}\n                        </StackItem>\n                        <StackItem id={'Status'}>\n                          <Text component={TextVariants.h3}> 当前阶段: </Text>\n                          {this.props.experimentDetails ? this.props.experimentDetails.experimentItem.phase : ''}\n                        </StackItem>\n                        <StackItem id={'Winner'}>\n                          {this.props.experimentDetails.experimentItem.endTime !== '' ? (\n                            <Grid>\n                              <GridItem span={12}>\n                                <StackItem>\n                                  {this.props.experimentDetails.experimentItem.winner.winning_version_found ? (\n                                    <>\n                                      <Text component={TextVariants.h3}> 获胜版本: {winnerInfo}</Text>\n                                      {this.props.experimentDetails.experimentItem.winner.name}\n                                      {/* <Tooltip\n                                        key={'winnerTooltip'}\n                                        aria-label={'Winner Tooltip'}\n                                        position={PopoverPosition.auto}\n                                        className={'health_indicator'}\n                                        content={\n                                          <>\n                                            {'Winning version identified by iter8 analytics'}\n                                            {additionInfo}\n                                          </>\n                                        }\n                                      >\n                                        <KialiIcon.Info className={infoStyle} />\n                                      </Tooltip> */}\n                                    </>\n                                  ) : (\n                                    <Text component={TextVariants.h3}> 未找到获胜版本 </Text>\n                                  )}\n                                </StackItem>\n                              </GridItem>\n                            </Grid>\n                          ) : (\n                            <Grid>\n                              <GridItem span={6}>\n                                <StackItem>\n                                  <Text component={TextVariants.h3}>\n                                    {' '}\n                                    {this.props.experimentDetails.experimentItem.endTime === ''\n                                      ? '当前最佳版本'\n                                      : '获胜版本'}{' '}\n                                  </Text>\n                                  {this.props.experimentDetails.experimentItem.winner.name}\n                                </StackItem>\n                              </GridItem>\n                              <GridItem span={6}>\n                                <StackItem>\n                                  <Text component={TextVariants.h3}> Probability of Winning: </Text>\n                                  {\n                                    this.props.experimentDetails.experimentItem.winner\n                                      .probability_of_winning_for_best_version\n                                  }\n                                </StackItem>\n                              </GridItem>\n                            </Grid>\n                          )}\n                        </StackItem>\n                        <StackItem>\n                          <Grid>\n                            <GridItem span={4}>\n                              <StackItem id={'started_at'}>\n                                <Text component={TextVariants.h3}> Created at </Text>\n                                <LocalTime\n                                  time={\n                                    this.props.experimentDetails && this.props.experimentDetails.experimentItem.initTime\n                                      ? this.props.experimentDetails.experimentItem.initTime\n                                      : ''\n                                  }\n                                />\n                              </StackItem>\n                            </GridItem>\n                            <GridItem span={4}>\n                              <StackItem id={'started_at'}>\n                                <Text component={TextVariants.h3}> Started at </Text>\n                                <LocalTime\n                                  time={\n                                    this.props.experimentDetails &&\n                                    this.props.experimentDetails.experimentItem.startTime\n                                      ? this.props.experimentDetails.experimentItem.startTime\n                                      : ''\n                                  }\n                                />\n                              </StackItem>\n                            </GridItem>\n                            <GridItem span={4}>\n                              <StackItem id={'ended_at'}>\n                                <Text component={TextVariants.h3}> Ended at </Text>\n                                <LocalTime\n                                  time={\n                                    this.props.experimentDetails && this.props.experimentDetails.experimentItem.endTime\n                                      ? this.props.experimentDetails.experimentItem.endTime\n                                      : ''\n                                  }\n                                />\n                              </StackItem>\n                            </GridItem>\n                          </Grid>\n                        </StackItem>\n                      </Stack>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n              </Grid>\n            </GridItem>\n            <GridItem span={12}>\n              <Tabs isFilled={false} activeKey={0}>\n                <Tab title={'Traffic Control'} eventKey={0} style={{ backgroundColor: PFColors.White }}>\n                  <ErrorBoundaryWithMessage message={'Something went wrong'}>\n                    <TrafficControlInfo trafficControl={this.props.experimentDetails.trafficControl} />\n                  </ErrorBoundaryWithMessage>\n                </Tab>\n              </Tabs>\n            </GridItem>\n          </Grid>\n        </RenderComponentScroll>\n      </>\n    );\n  }\n\n  // private onGraphActionsToggle = (isOpen: boolean) => {\n  //   this.setState({\n  //     isKebabOpen: isOpen\n  //   });\n  // };\n\n  // private showFullGraph = () => {\n  //   let graphType: GraphType = GraphType.WORKLOAD;\n  //   const graphUrl = `/graph/namespaces?graphType=${graphType}&injectServiceNodes=true&namespaces=${this.props.namespace}&idleNodes=false&edges=requestsPercentage&`;\n  //   history.push(graphUrl);\n  // };\n\n  // private showFullMetric = () => {\n  //   const graphUrl = `/namespaces/${this.props.namespace}/services/${this.props.target}?tab=metrics&bylbl=destination_version`;\n  //   let candidateVersions: string[];\n  //   candidateVersions = [];\n  //   this.props.experimentDetails?.experimentItem.candidates.map(can => {\n  //     candidateVersions.push(can.version);\n  //   });\n  //   if (this.props.experimentDetails !== undefined) {\n  //     const params = `=${this.props.experimentDetails.experimentItem.baseline.version},${candidateVersions.join()}`;\n  //     history.push(graphUrl + encodeURIComponent(params));\n  //   } else {\n  //     history.push(graphUrl);\n  //   }\n  // };\n}\n\nexport default ExperimentInfoDescription;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/components/MetricsOptions/MetricsRawAggregation.tsx\";\nimport * as React from 'react';\nimport { URLParam, HistoryManager } from '../../app/History';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\n\nvar MetricsRawAggregation = /*#__PURE__*/function (_React$Component) {\n  _inherits(MetricsRawAggregation, _React$Component);\n\n  var _super = _createSuper(MetricsRawAggregation);\n\n  function MetricsRawAggregation(props) {\n    var _this;\n\n    _classCallCheck(this, MetricsRawAggregation);\n\n    _this = _super.call(this, props);\n    _this.aggregator = void 0;\n\n    _this.onAggregatorChanged = function (aggregator) {\n      HistoryManager.setParam(URLParam.AGGREGATOR, aggregator);\n      _this.aggregator = aggregator;\n\n      _this.props.onChanged(_this.aggregator);\n    };\n\n    _this.aggregator = MetricsRawAggregation.initialAggregator();\n    return _this;\n  }\n\n  _createClass(MetricsRawAggregation, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ToolbarDropdown, {\n        id: 'metrics_filter_aggregator',\n        disabled: false,\n        handleSelect: this.onAggregatorChanged,\n        nameDropdown: 'Pods aggregation',\n        value: this.aggregator,\n        initialLabel: MetricsRawAggregation.Aggregators[this.aggregator],\n        options: MetricsRawAggregation.Aggregators,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return MetricsRawAggregation;\n}(React.Component);\n\nMetricsRawAggregation.Aggregators = {\n  sum: 'Sum',\n  avg: 'Average',\n  min: 'Min',\n  max: 'Max',\n  stddev: 'Standard deviation',\n  stdvar: 'Standard variance'\n};\n\nMetricsRawAggregation.initialAggregator = function () {\n  var opParam = HistoryManager.getParam(URLParam.AGGREGATOR);\n\n  if (opParam !== undefined) {\n    return opParam;\n  }\n\n  return 'sum';\n};\n\nexport { MetricsRawAggregation as default };","map":{"version":3,"sources":["/root/kiali-ui/src/components/MetricsOptions/MetricsRawAggregation.tsx"],"names":["React","URLParam","HistoryManager","ToolbarDropdown","MetricsRawAggregation","props","aggregator","onAggregatorChanged","setParam","AGGREGATOR","onChanged","initialAggregator","Aggregators","Component","sum","avg","min","max","stddev","stdvar","opParam","getParam","undefined"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,mBAAzC;AACA,SAASC,eAAT,QAAgC,oCAAhC;;IAMqBC,qB;;;;;AAoBnB,iCAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;AADwB,UAVlBC,UAUkB;;AAAA,UAK1BC,mBAL0B,GAKJ,UAACD,UAAD,EAAwB;AAC5CJ,MAAAA,cAAc,CAACM,QAAf,CAAwBP,QAAQ,CAACQ,UAAjC,EAA6CH,UAA7C;AACA,YAAKA,UAAL,GAAkBA,UAAlB;;AACA,YAAKD,KAAL,CAAWK,SAAX,CAAqB,MAAKJ,UAA1B;AACD,KATyB;;AAExB,UAAKA,UAAL,GAAkBF,qBAAqB,CAACO,iBAAtB,EAAlB;AAFwB;AAGzB;;;;WAQD,kBAAS;AACP,0BACE,oBAAC,eAAD;AACE,QAAA,EAAE,EAAE,2BADN;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,YAAY,EAAE,KAAKJ,mBAHrB;AAIE,QAAA,YAAY,EAAE,kBAJhB;AAKE,QAAA,KAAK,EAAE,KAAKD,UALd;AAME,QAAA,YAAY,EAAEF,qBAAqB,CAACQ,WAAtB,CAAkC,KAAKN,UAAvC,CANhB;AAOE,QAAA,OAAO,EAAEF,qBAAqB,CAACQ,WAPjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;;;;EA3CgDZ,KAAK,CAACa,S;;AAApCT,qB,CACZQ,W,GAAyC;AAC9CE,EAAAA,GAAG,EAAE,KADyC;AAE9CC,EAAAA,GAAG,EAAE,SAFyC;AAG9CC,EAAAA,GAAG,EAAE,KAHyC;AAI9CC,EAAAA,GAAG,EAAE,KAJyC;AAK9CC,EAAAA,MAAM,EAAE,oBALsC;AAM9CC,EAAAA,MAAM,EAAE;AANsC,C;;AAD7Bf,qB,CAYZO,iB,GAAoB,YAAkB;AAC3C,MAAMS,OAAO,GAAGlB,cAAc,CAACmB,QAAf,CAAwBpB,QAAQ,CAACQ,UAAjC,CAAhB;;AACA,MAAIW,OAAO,KAAKE,SAAhB,EAA2B;AACzB,WAAOF,OAAP;AACD;;AACD,SAAO,KAAP;AACD,C;;SAlBkBhB,qB","sourcesContent":["import * as React from 'react';\nimport { Aggregator } from 'types/MetricsOptions';\n\nimport { URLParam, HistoryManager } from '../../app/History';\nimport { ToolbarDropdown } from '../ToolbarDropdown/ToolbarDropdown';\n\ninterface Props {\n  onChanged: (aggregator: Aggregator) => void;\n}\n\nexport default class MetricsRawAggregation extends React.Component<Props> {\n  static Aggregators: { [key: string]: string } = {\n    sum: 'Sum',\n    avg: 'Average',\n    min: 'Min',\n    max: 'Max',\n    stddev: 'Standard deviation',\n    stdvar: 'Standard variance'\n  };\n\n  private aggregator: Aggregator;\n\n  static initialAggregator = (): Aggregator => {\n    const opParam = HistoryManager.getParam(URLParam.AGGREGATOR);\n    if (opParam !== undefined) {\n      return opParam as Aggregator;\n    }\n    return 'sum';\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.aggregator = MetricsRawAggregation.initialAggregator();\n  }\n\n  onAggregatorChanged = (aggregator: string) => {\n    HistoryManager.setParam(URLParam.AGGREGATOR, aggregator);\n    this.aggregator = aggregator as Aggregator;\n    this.props.onChanged(this.aggregator);\n  };\n\n  render() {\n    return (\n      <ToolbarDropdown\n        id={'metrics_filter_aggregator'}\n        disabled={false}\n        handleSelect={this.onAggregatorChanged}\n        nameDropdown={'Pods aggregation'}\n        value={this.aggregator}\n        initialLabel={MetricsRawAggregation.Aggregators[this.aggregator]}\n        options={MetricsRawAggregation.Aggregators}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
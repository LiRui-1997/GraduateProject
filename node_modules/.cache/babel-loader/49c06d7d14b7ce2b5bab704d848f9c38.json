{"ast":null,"code":"import _slicedToArray from\"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var allMatch=new RegExp('.*');/*\n Parse configuration from backend format to regex expression\n*/export var parseHealthConfig=function parseHealthConfig(healthConfig){for(var _i=0,_Object$entries=Object.entries(healthConfig.rate);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],r=_Object$entries$_i[1];healthConfig.rate[key].namespace=getExpr(healthConfig.rate[key].namespace);healthConfig.rate[key].name=getExpr(healthConfig.rate[key].name);healthConfig.rate[key].kind=getExpr(healthConfig.rate[key].kind);for(var _i2=0,_Object$values=Object.values(r.tolerance);_i2<_Object$values.length;_i2++){var t=_Object$values[_i2];t.code=getExpr(t.code,true);t.direction=getExpr(t.direction);t.protocol=getExpr(t.protocol);}}return healthConfig;};/*\n  Convert the string to regex, if isCode is true then call to replaceXCode to change the X|x in code expression to \\d\n*/export var getExpr=function getExpr(value){var isCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(value){if(typeof value==='string'&&value!==''){var v=value.replace('\\\\\\\\','\\\\');return new RegExp(isCode?replaceXCode(v):v);}if(typeof value==='object'&&value.toString()!=='/(?:)/'){return value;}}return allMatch;};/* Replace x|X by the regular expression\n   Example: 4XX or 5XX to 4\\d\\d 5\\d\\d\n*/var replaceXCode=function replaceXCode(value){return value.replace(/x|X/g,'\\\\d');};/*\n Export for tests\n*/export var allMatchTEST=allMatch;export var getExprTEST=getExpr;export var replaceXCodeTEST=replaceXCode;","map":null,"metadata":{},"sourceType":"module"}
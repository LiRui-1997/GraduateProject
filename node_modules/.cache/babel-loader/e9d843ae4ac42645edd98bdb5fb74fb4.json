{"ast":null,"code":"import _defineProperty from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nexport var removeDuplicatesArray = function removeDuplicatesArray(a) {\n  return _toConsumableArray(Array.from(new Set(a)));\n};\nexport var arrayEquals = function arrayEquals(a1, a2, comparator) {\n  if (a1.length !== a2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a1.length; ++i) {\n    if (!comparator(a1[i], a2[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport var namespaceEquals = function namespaceEquals(ns1, ns2) {\n  return arrayEquals(ns1, ns2, function (n1, n2) {\n    return n1.name === n2.name;\n  });\n};\nexport function groupBy(items, key) {\n  return items.reduce(function (result, item) {\n    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, item[key], [].concat(_toConsumableArray(result[item[key]] || []), [item])));\n  }, {});\n}","map":{"version":3,"sources":["/root/GraduateProject/src/utils/Common.ts"],"names":["removeDuplicatesArray","a","Array","from","Set","arrayEquals","a1","a2","comparator","length","i","namespaceEquals","ns1","ns2","n1","n2","name","groupBy","items","key","reduce","result","item"],"mappings":";;;AAEA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,CAAC;AAAA,4BAAQC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQH,CAAR,CAAX,CAAR;AAAA,CAA/B;AAEP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAIC,EAAJ,EAAaC,EAAb,EAAsBC,UAAtB,EAAgE;AACzF,MAAIF,EAAE,CAACG,MAAH,KAAcF,EAAE,CAACE,MAArB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+B,EAAEC,CAAjC,EAAoC;AAClC,QAAI,CAACF,UAAU,CAACF,EAAE,CAACI,CAAD,CAAH,EAAQH,EAAE,CAACG,CAAD,CAAV,CAAf,EAA+B;AAC7B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAVM;AAYP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAmBC,GAAnB;AAAA,SAC7BR,WAAW,CAACO,GAAD,EAAMC,GAAN,EAAW,UAACC,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAA3B;AAAA,GAAX,CADkB;AAAA,CAAxB;AAGP,OAAO,SAASC,OAAT,CAAoBC,KAApB,EAAgCC,GAAhC,EAAsE;AAC3E,SAAOD,KAAK,CAACE,MAAN,CACL,UAACC,MAAD,EAASC,IAAT;AAAA,2CACKD,MADL,2BAEGC,IAAI,CAACH,GAAD,CAFP,+BAE8BE,MAAM,CAACC,IAAI,CAACH,GAAD,CAAL,CAAN,IAA+B,EAF7D,IAEkEG,IAFlE;AAAA,GADK,EAKL,EALK,CAAP;AAOD","sourcesContent":["import Namespace from '../types/Namespace';\n\nexport const removeDuplicatesArray = a => [...Array.from(new Set(a))] as string[];\n\nexport const arrayEquals = <T>(a1: T[], a2: T[], comparator: (v1: T, v2: T) => boolean) => {\n  if (a1.length !== a2.length) {\n    return false;\n  }\n  for (let i = 0; i < a1.length; ++i) {\n    if (!comparator(a1[i], a2[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const namespaceEquals = (ns1: Namespace[], ns2: Namespace[]): boolean =>\n  arrayEquals(ns1, ns2, (n1, n2) => n1.name === n2.name);\n\nexport function groupBy<T>(items: T[], key: keyof T): { [key: string]: T[] } {\n  return items.reduce(\n    (result, item) => ({\n      ...result,\n      [item[key as string]]: [...(result[item[key as string]] || []), item]\n    }),\n    {} as { [key: string]: T[] }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
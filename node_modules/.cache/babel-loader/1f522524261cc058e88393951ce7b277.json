{"ast":null,"code":"import _classCallCheck from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/GraduateProject/src/components/SummaryPanel/ResponseTimeChart.tsx\";\nimport * as React from 'react';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport { SUMMARY_PANEL_CHART_WIDTH } from '../../types/Graph';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { toVCLine } from 'utils/VictoryChartsUtils';\nimport { SparklineChart } from 'components/Charts/SparklineChart';\nimport 'components/Charts/Charts.css';\nexport var ResponseTimeChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResponseTimeChart, _React$Component);\n\n  var _super = _createSuper(ResponseTimeChart);\n\n  function ResponseTimeChart() {\n    var _this;\n\n    _classCallCheck(this, ResponseTimeChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.thereIsTrafficData = function () {\n      return _this.props.rtAvg.length > 0;\n    };\n\n    _this.toMillis = function (dps) {\n      return dps.map(function (dp) {\n        return [dp[0], dp[1] * 1000.0];\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ResponseTimeChart, [{\n    key: \"render\",\n    value: function render() {\n      var scaler = this.props.unit === 's' ? this.toMillis : function (a) {\n        return a;\n      };\n      var series = [toVCLine(scaler(this.props.rtAvg), 'avg', PFColors.Black1000), toVCLine(scaler(this.props.rtMed), 'p50', PFColors.Green400), toVCLine(scaler(this.props.rt95), 'p95', PFColors.Blue400), toVCLine(scaler(this.props.rt99), 'p99', PFColors.Orange400)];\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !this.props.hide && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }\n      }, this.props.label, \":\")), this.thereIsTrafficData() ? /*#__PURE__*/React.createElement(SparklineChart, {\n        name: 'rt',\n        height: 70,\n        width: SUMMARY_PANEL_CHART_WIDTH,\n        showLegend: true,\n        padding: {\n          top: 5\n        },\n        tooltipFormat: function tooltipFormat(dp) {\n          var val = Math.floor(dp.y * 1000) / 1000;\n          return \"\".concat(dp.x.toLocaleTimeString(), \" - \").concat(dp.name, \": \").concat(val, \" ms\");\n        },\n        series: series,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InfoAltIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }), \" Not enough traffic to generate chart.\")));\n    }\n  }]);\n\n  return ResponseTimeChart;\n}(React.Component);","map":{"version":3,"sources":["/root/GraduateProject/src/components/SummaryPanel/ResponseTimeChart.tsx"],"names":["React","InfoAltIcon","SUMMARY_PANEL_CHART_WIDTH","PFColors","toVCLine","SparklineChart","ResponseTimeChart","thereIsTrafficData","props","rtAvg","length","toMillis","dps","map","dp","scaler","unit","a","series","Black1000","rtMed","Green400","rt95","Blue400","rt99","Orange400","hide","label","top","val","Math","floor","y","x","toLocaleTimeString","name","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AAEA,OAAO,8BAAP;AAaA,WAAaC,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UACEC,kBADF,GACuB,YAAM;AACzB,aAAO,MAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,GAA0B,CAAjC;AACD,KAHH;;AAAA,UAOEC,QAPF,GAOa,UAACC,GAAD,EAAmC;AAC5C,aAAOA,GAAG,CAACC,GAAJ,CAAQ,UAAAC,EAAE;AAAA,eAAI,CAACA,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAF,GAAQ,MAAhB,CAAJ;AAAA,OAAV,CAAP;AACD,KATH;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAWE,kBAAS;AACP,UAAMC,MAAM,GAAG,KAAKP,KAAL,CAAWQ,IAAX,KAAoB,GAApB,GAA0B,KAAKL,QAA/B,GAA0C,UAAAM,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAA1D;AACA,UAAMC,MAAM,GAAG,CACbd,QAAQ,CAACW,MAAM,CAAC,KAAKP,KAAL,CAAWC,KAAZ,CAAP,EAA2B,KAA3B,EAAkCN,QAAQ,CAACgB,SAA3C,CADK,EAEbf,QAAQ,CAACW,MAAM,CAAC,KAAKP,KAAL,CAAWY,KAAZ,CAAP,EAA2B,KAA3B,EAAkCjB,QAAQ,CAACkB,QAA3C,CAFK,EAGbjB,QAAQ,CAACW,MAAM,CAAC,KAAKP,KAAL,CAAWc,IAAZ,CAAP,EAA0B,KAA1B,EAAiCnB,QAAQ,CAACoB,OAA1C,CAHK,EAIbnB,QAAQ,CAACW,MAAM,CAAC,KAAKP,KAAL,CAAWgB,IAAZ,CAAP,EAA0B,KAA1B,EAAiCrB,QAAQ,CAACsB,SAA1C,CAJK,CAAf;AAOA,0BACE,0CACG,CAAC,KAAKjB,KAAL,CAAWkB,IAAZ,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlB,KAAL,CAAWmB,KAApB,MADF,CADF,EAIG,KAAKpB,kBAAL,kBACC,oBAAC,cAAD;AACE,QAAA,IAAI,EAAE,IADR;AAEE,QAAA,MAAM,EAAE,EAFV;AAGE,QAAA,KAAK,EAAEL,yBAHT;AAIE,QAAA,UAAU,EAAE,IAJd;AAKE,QAAA,OAAO,EAAE;AAAE0B,UAAAA,GAAG,EAAE;AAAP,SALX;AAME,QAAA,aAAa,EAAE,uBAAAd,EAAE,EAAI;AACnB,cAAMe,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWjB,EAAE,CAACkB,CAAH,GAAO,IAAlB,IAA0B,IAAtC;AACA,2BAAWlB,EAAE,CAACmB,CAAJ,CAAeC,kBAAf,EAAV,gBAAmDpB,EAAE,CAACqB,IAAtD,eAA+DN,GAA/D;AACD,SATH;AAUE,QAAA,MAAM,EAAEX,MAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,2CAlBJ,CAFJ,CADF;AA6BD;AAjDH;;AAAA;AAAA,EAAuClB,KAAK,CAACoC,SAA7C","sourcesContent":["import * as React from 'react';\nimport { InfoAltIcon } from '@patternfly/react-icons';\nimport { SUMMARY_PANEL_CHART_WIDTH } from '../../types/Graph';\nimport { Datapoint } from '../../types/Metrics';\nimport { PFColors } from 'components/Pf/PfColors';\nimport { toVCLine } from 'utils/VictoryChartsUtils';\nimport { SparklineChart } from 'components/Charts/SparklineChart';\n\nimport 'components/Charts/Charts.css';\n\nexport type ResponseTimeUnit = 's' | 'ms';\ntype ResponseTimeChartTypeProp = {\n  hide?: boolean;\n  label: string;\n  rtAvg: Datapoint[];\n  rtMed: Datapoint[];\n  rt95: Datapoint[];\n  rt99: Datapoint[];\n  unit: ResponseTimeUnit;\n};\n\nexport class ResponseTimeChart extends React.Component<ResponseTimeChartTypeProp, {}> {\n  thereIsTrafficData = () => {\n    return this.props.rtAvg.length > 0;\n  };\n\n  // The prom data may be in seconds but we want to report response times in millis when the user hovers\n  // Convert the data points to millis.\n  toMillis = (dps: Datapoint[]): Datapoint[] => {\n    return dps.map(dp => [dp[0], dp[1] * 1000.0]);\n  };\n\n  render() {\n    const scaler = this.props.unit === 's' ? this.toMillis : a => a;\n    const series = [\n      toVCLine(scaler(this.props.rtAvg), 'avg', PFColors.Black1000),\n      toVCLine(scaler(this.props.rtMed), 'p50', PFColors.Green400),\n      toVCLine(scaler(this.props.rt95), 'p95', PFColors.Blue400),\n      toVCLine(scaler(this.props.rt99), 'p99', PFColors.Orange400)\n    ];\n\n    return (\n      <>\n        {!this.props.hide && (\n          <div>\n            <div>\n              <strong>{this.props.label}:</strong>\n            </div>\n            {this.thereIsTrafficData() ? (\n              <SparklineChart\n                name={'rt'}\n                height={70}\n                width={SUMMARY_PANEL_CHART_WIDTH}\n                showLegend={true}\n                padding={{ top: 5 }}\n                tooltipFormat={dp => {\n                  const val = Math.floor(dp.y * 1000) / 1000;\n                  return `${(dp.x as Date).toLocaleTimeString()} - ${dp.name}: ${val} ms`;\n                }}\n                series={series}\n              />\n            ) : (\n              <div>\n                <InfoAltIcon /> Not enough traffic to generate chart.\n              </div>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
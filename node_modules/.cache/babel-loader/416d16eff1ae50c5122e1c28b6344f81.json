{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/root/kiali-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/root/kiali-ui/src/app/AuthenticationController.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport authenticationConfig, { isAuthStrategyOAuth } from '../config/AuthenticationConfig';\nimport { LoginStatus } from '../store/Store';\nimport * as API from '../services/Api';\nimport { HelpDropdownActions } from '../actions/HelpDropdownActions';\nimport { JaegerActions } from '../actions/JaegerActions';\nimport LoginThunkActions from '../actions/LoginThunkActions';\nimport { MessageCenterActions } from '../actions/MessageCenterActions';\nimport { MessageType } from '../types/MessageCenter';\nimport InitializingScreen from './InitializingScreen';\nimport { isKioskMode } from '../utils/SearchParamUtils';\nimport * as AlertUtils from '../utils/AlertUtils';\nimport { setServerConfig, serverConfig, humanDurations } from '../config/ServerConfig';\nimport { MeshTlsActions } from '../actions/MeshTlsActions';\nimport { AuthStrategy } from '../types/Auth';\nimport { LoginActions } from '../actions/LoginActions';\nimport history from './History';\nimport { NamespaceActions } from 'actions/NamespaceAction';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { config } from 'config';\nimport { store } from 'store/ConfigStore';\nimport { toGrpcRate, toHttpRate, toTcpRate, TrafficRate } from 'types/Graph';\nimport { GraphToolbarActions } from 'actions/GraphToolbarActions';\nvar LoginStage;\n\n(function (LoginStage) {\n  LoginStage[LoginStage[\"LOGIN\"] = 0] = \"LOGIN\";\n  LoginStage[LoginStage[\"POST_LOGIN\"] = 1] = \"POST_LOGIN\";\n  LoginStage[LoginStage[\"LOGGED_IN\"] = 2] = \"LOGGED_IN\";\n  LoginStage[LoginStage[\"LOGGED_IN_AT_LOAD\"] = 3] = \"LOGGED_IN_AT_LOAD\";\n})(LoginStage || (LoginStage = {}));\n\nexport var AuthenticationController = /*#__PURE__*/function (_React$Component) {\n  _inherits(AuthenticationController, _React$Component);\n\n  var _super = _createSuper(AuthenticationController);\n\n  // How long to wait for the post-login actions to complete\n  // before transitioning to the \"Loading\" page.\n  function AuthenticationController(props) {\n    var _this;\n\n    _classCallCheck(this, AuthenticationController);\n\n    _this = _super.call(this, props);\n    _this.postLoginMSTillTransition = 3000;\n    _this.doPostLoginActions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var postLoginTimer, getStatusPromise, getJaegerInfoPromise, configs;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              postLoginTimer = setTimeout(function () {\n                _this.setState({\n                  stage: LoginStage.LOGGED_IN_AT_LOAD\n                });\n              }, _this.postLoginMSTillTransition);\n              _context.prev = 1;\n              getStatusPromise = API.getStatus().then(function (response) {\n                return _this.processServerStatus(response.data);\n              }).catch(function (error) {\n                AlertUtils.addError('Error fetching server status.', error, 'default', MessageType.WARNING);\n              });\n              getJaegerInfoPromise = API.getJaegerInfo().then(function (response) {\n                return _this.props.setJaegerInfo(response.data);\n              }).catch(function (error) {\n                _this.props.setJaegerInfo(null);\n\n                AlertUtils.addError('Could not fetch Jaeger info. Turning off Jaeger integration.', error, 'default', MessageType.INFO);\n              });\n              _context.next = 6;\n              return Promise.all([API.getNamespaces(), API.getServerConfig(), getStatusPromise, getJaegerInfoPromise]);\n\n            case 6:\n              configs = _context.sent;\n\n              _this.props.setNamespaces(configs[0].data, new Date());\n\n              setServerConfig(configs[1].data);\n\n              _this.applyUIDefaults();\n\n              _this.checkConfiguredRemoteKialis(configs[1].data);\n\n              if (_this.props.landingRoute) {\n                history.replace(_this.props.landingRoute);\n\n                _this.props.setLandingRoute(undefined);\n              }\n\n              _this.setState({\n                stage: LoginStage.LOGGED_IN\n              });\n\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Error on post-login actions.', _context.t0); // Transitioning to LOGGED_IN_AT_LOAD so that the user will see the \"Loading...\"\n              // screen instead of being stuck at the \"login\" page after a post-login error.\n\n              _this.setState({\n                isPostLoginError: true,\n                stage: LoginStage.LOGGED_IN_AT_LOAD\n              });\n\n            case 19:\n              _context.prev = 19;\n              clearTimeout(postLoginTimer);\n              return _context.finish(19);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15, 19, 22]]);\n    }));\n\n    _this.setDocLayout = function () {\n      if (document.documentElement) {\n        document.documentElement.className = isKioskMode() ? 'kiosk' : '';\n      }\n    };\n\n    _this.processServerStatus = function (status) {\n      _this.props.statusRefresh(status);\n\n      status.warningMessages.forEach(function (wMsg) {\n        _this.props.addMessage(wMsg, '', 'systemErrors', MessageType.WARNING);\n      });\n    };\n\n    _this.state = {\n      stage: _this.props.authenticated ? LoginStage.LOGGED_IN_AT_LOAD : LoginStage.LOGIN,\n      isPostLoginError: false\n    };\n    return _this;\n  }\n\n  _createClass(AuthenticationController, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.state.stage === LoginStage.LOGGED_IN_AT_LOAD) {\n        this.doPostLoginActions();\n      } else {\n        var dispatchLoginCycleOnLoad = false; // If login strategy is \"anonymous\" or \"header\", dispatch login cycle\n        // because there is no need to ask for any credentials\n\n        if (authenticationConfig.strategy === AuthStrategy.anonymous || authenticationConfig.strategy === AuthStrategy.header) {\n          dispatchLoginCycleOnLoad = true;\n        } // If login strategy is Openshift, OpenId, check if there is an\n        // \"access_token\" or \"id_token\" hash parameter in the URL. If there is,\n        // this means the IdP is calling back. Dispatch the login cycle to finish\n        // the authentication.\n\n\n        if (isAuthStrategyOAuth()) {\n          var pattern = /[#&](access_token|id_token)=/;\n          dispatchLoginCycleOnLoad = pattern.test(window.location.hash);\n        }\n\n        if (dispatchLoginCycleOnLoad) {\n          this.props.checkCredentials(); // This state shows the initializing screen while doing the login cycle. This\n          // prevents from briefly showing the login form while the trip to the back-end completes.\n\n          this.setState({\n            stage: LoginStage.LOGGED_IN_AT_LOAD\n          });\n        } else {\n          this.props.setLandingRoute(history.location.pathname + history.location.search);\n        }\n      }\n\n      this.setDocLayout();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _prevState) {\n      if (!prevProps.authenticated && this.props.authenticated) {\n        this.setState({\n          stage: LoginStage.POST_LOGIN\n        });\n        this.doPostLoginActions();\n      } else if (prevProps.authenticated && !this.props.authenticated) {\n        this.setState({\n          stage: LoginStage.LOGIN\n        });\n      }\n\n      if (!prevProps.isLoginError && this.props.isLoginError) {\n        this.setState({\n          stage: LoginStage.LOGIN\n        });\n      }\n\n      this.setDocLayout();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.stage === LoginStage.LOGGED_IN) {\n        return this.props.protectedAreaComponent;\n      } else if (this.state.stage === LoginStage.LOGGED_IN_AT_LOAD) {\n        return !this.state.isPostLoginError ? /*#__PURE__*/React.createElement(InitializingScreen, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 9\n          }\n        }) : /*#__PURE__*/React.createElement(InitializingScreen, {\n          errorMsg: AuthenticationController.PostLoginErrorMsg,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 9\n          }\n        });\n      } else if (this.state.stage === LoginStage.POST_LOGIN) {\n        // For OAuth/OpenID auth strategies, show/keep the initializing screen unless there\n        // is an error.\n        if (!this.state.isPostLoginError && isAuthStrategyOAuth()) {\n          return /*#__PURE__*/React.createElement(InitializingScreen, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 16\n            }\n          });\n        }\n\n        return !this.state.isPostLoginError ? this.props.publicAreaComponent(true) : this.props.publicAreaComponent(false, AuthenticationController.PostLoginErrorMsg);\n      } else {\n        return this.props.publicAreaComponent(false);\n      }\n    }\n  }, {\n    key: \"applyUIDefaults\",\n    value: function applyUIDefaults() {\n      var uiDefaults = serverConfig.kialiFeatureFlags.uiDefaults;\n\n      if (uiDefaults) {\n        // Duration (aka metricsPerRefresh)\n        if (uiDefaults.metricsPerRefresh) {\n          var validDurations = humanDurations(serverConfig, '', '');\n          var metricsPerRefresh = 0;\n\n          for (var _i = 0, _Object$entries = Object.entries(validDurations); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                value = _Object$entries$_i[1];\n\n            if (value === uiDefaults.metricsPerRefresh) {\n              metricsPerRefresh = Number(key);\n              break;\n            }\n          }\n\n          if (metricsPerRefresh > 0) {\n            this.props.setDuration(metricsPerRefresh);\n            console.debug(\"Setting UI Default: metricsPerRefresh [\".concat(uiDefaults.metricsPerRefresh, \"=\").concat(metricsPerRefresh, \"s]\"));\n          } else {\n            console.debug(\"Ignoring invalid UI Default: metricsPerRefresh [\".concat(uiDefaults.metricsPerRefresh, \"]\"));\n          }\n        } // Refresh Interval\n\n\n        var refreshInterval = -1;\n\n        if (uiDefaults.refreshInterval) {\n          for (var _i2 = 0, _Object$entries2 = Object.entries(config.toolbar.refreshInterval); _i2 < _Object$entries2.length; _i2++) {\n            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                _key = _Object$entries2$_i[0],\n                _value = _Object$entries2$_i[1];\n\n            if (_value.toLowerCase().endsWith(uiDefaults.refreshInterval.toLowerCase())) {\n              refreshInterval = Number(_key);\n              break;\n            }\n          }\n\n          if (refreshInterval >= 0) {\n            this.props.setRefreshInterval(refreshInterval);\n            console.debug(\"Setting UI Default: refreshInterval [\".concat(uiDefaults.refreshInterval, \"=\").concat(refreshInterval, \"ms]\"));\n          } else {\n            console.debug(\"Ignoring invalid UI Default: refreshInterval [\".concat(uiDefaults.refreshInterval, \"]\"));\n          }\n        } // Selected Namespaces\n\n\n        if (uiDefaults.namespaces && uiDefaults.namespaces.length > 0) {\n          // use store directly, we don't want to update on redux state change\n          var _namespaces = store.getState().namespaces.items;\n          var namespaceNames = _namespaces ? _namespaces.map(function (ns) {\n            return ns.name;\n          }) : [];\n          var activeNamespaces = [];\n\n          var _iterator = _createForOfIteratorHelper(uiDefaults.namespaces),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var name = _step.value;\n\n              if (namespaceNames.includes(name)) {\n                activeNamespaces.push({\n                  name: name\n                });\n              } else {\n                console.debug(\"Ignoring invalid UI Default: namespace [\".concat(name, \"]\"));\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (activeNamespaces.length > 0) {\n            this.props.setActiveNamespaces(activeNamespaces);\n            console.debug(\"Setting UI Default: namespaces \".concat(JSON.stringify(activeNamespaces.map(function (ns) {\n              return ns.name;\n            }))));\n          }\n        } // Graph Traffic\n\n\n        var grpcRate = toGrpcRate(uiDefaults.graph.traffic.grpc);\n        var httpRate = toHttpRate(uiDefaults.graph.traffic.http);\n        var tcpRate = toTcpRate(uiDefaults.graph.traffic.tcp);\n        var _rates = [];\n\n        if (grpcRate) {\n          _rates.push(TrafficRate.GRPC_GROUP, grpcRate);\n        }\n\n        if (httpRate) {\n          _rates.push(TrafficRate.HTTP_GROUP, httpRate);\n        }\n\n        if (tcpRate) {\n          _rates.push(TrafficRate.TCP_GROUP, tcpRate);\n        }\n\n        this.props.setTrafficRates(_rates);\n      }\n    } // Check which clusters does not have an accessible Kiali instance.\n    // Emit a warning telling that for those clusters, no cross-links will be available.\n\n  }, {\n    key: \"checkConfiguredRemoteKialis\",\n    value: function checkConfiguredRemoteKialis(backendConfigs) {\n      if (backendConfigs.clusters) {\n        var clustersWithoutKialis = [];\n\n        for (var cluster in backendConfigs.clusters) {\n          var _backendConfigs$clust;\n\n          // skip home cluster, it's always reachable\n          if (cluster === ((_backendConfigs$clust = backendConfigs.clusterInfo) === null || _backendConfigs$clust === void 0 ? void 0 : _backendConfigs$clust.name)) {\n            continue;\n          }\n\n          if (backendConfigs.clusters.hasOwnProperty(cluster)) {\n            var _backendConfigs$clust2;\n\n            var kialiInstance = (_backendConfigs$clust2 = backendConfigs.clusters[cluster].kialiInstances) === null || _backendConfigs$clust2 === void 0 ? void 0 : _backendConfigs$clust2.find(function (instance) {\n              return instance.url.length !== 0;\n            });\n\n            if (!kialiInstance) {\n              clustersWithoutKialis.push(cluster);\n            }\n          }\n        }\n\n        if (clustersWithoutKialis.length > 0) {\n          AlertUtils.addWarning('Not all remote clusters have reachable Kiali instances.', undefined, undefined, 'Context menus are disabled for remote cluster nodes if a Kiali instance is not discovered, or if the remote Kiali is not configured with an external URL.');\n        }\n      }\n    }\n  }]);\n\n  return AuthenticationController;\n}(React.Component);\nAuthenticationController.PostLoginErrorMsg = \"Kiali failed to initialize. Please ensure that services \\n    Kiali depends on, such as Prometheus, are healthy and reachable by Kiali then refresh your browser.\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authenticated: state.authentication.status === LoginStatus.loggedIn,\n    isLoginError: state.authentication.status === LoginStatus.error,\n    landingRoute: state.authentication.landingRoute\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addMessage: bindActionCreators(MessageCenterActions.addMessage, dispatch),\n    checkCredentials: function checkCredentials() {\n      return dispatch(LoginThunkActions.checkCredentials());\n    },\n    setActiveNamespaces: bindActionCreators(NamespaceActions.setActiveNamespaces, dispatch),\n    setDuration: bindActionCreators(UserSettingsActions.setDuration, dispatch),\n    setJaegerInfo: bindActionCreators(JaegerActions.setInfo, dispatch),\n    setLandingRoute: bindActionCreators(LoginActions.setLandingRoute, dispatch),\n    setMeshTlsStatus: bindActionCreators(MeshTlsActions.setinfo, dispatch),\n    setNamespaces: bindActionCreators(NamespaceActions.receiveList, dispatch),\n    setRefreshInterval: bindActionCreators(UserSettingsActions.setRefreshInterval, dispatch),\n    setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch),\n    statusRefresh: bindActionCreators(HelpDropdownActions.statusRefresh, dispatch)\n  };\n};\n\nvar AuthenticationControllerContainer = connect(mapStateToProps, mapDispatchToProps)(AuthenticationController);\nexport default AuthenticationControllerContainer;","map":{"version":3,"sources":["/root/kiali-ui/src/app/AuthenticationController.tsx"],"names":["React","connect","bindActionCreators","authenticationConfig","isAuthStrategyOAuth","LoginStatus","API","HelpDropdownActions","JaegerActions","LoginThunkActions","MessageCenterActions","MessageType","InitializingScreen","isKioskMode","AlertUtils","setServerConfig","serverConfig","humanDurations","MeshTlsActions","AuthStrategy","LoginActions","history","NamespaceActions","UserSettingsActions","config","store","toGrpcRate","toHttpRate","toTcpRate","TrafficRate","GraphToolbarActions","LoginStage","AuthenticationController","props","postLoginMSTillTransition","doPostLoginActions","postLoginTimer","setTimeout","setState","stage","LOGGED_IN_AT_LOAD","getStatusPromise","getStatus","then","response","processServerStatus","data","catch","error","addError","WARNING","getJaegerInfoPromise","getJaegerInfo","setJaegerInfo","INFO","Promise","all","getNamespaces","getServerConfig","configs","setNamespaces","Date","applyUIDefaults","checkConfiguredRemoteKialis","landingRoute","replace","setLandingRoute","undefined","LOGGED_IN","console","isPostLoginError","clearTimeout","setDocLayout","document","documentElement","className","status","statusRefresh","warningMessages","forEach","wMsg","addMessage","state","authenticated","LOGIN","dispatchLoginCycleOnLoad","strategy","anonymous","header","pattern","test","window","location","hash","checkCredentials","pathname","search","prevProps","_prevState","POST_LOGIN","isLoginError","protectedAreaComponent","PostLoginErrorMsg","publicAreaComponent","uiDefaults","kialiFeatureFlags","metricsPerRefresh","validDurations","Object","entries","key","value","Number","setDuration","debug","refreshInterval","toolbar","toLowerCase","endsWith","setRefreshInterval","namespaces","length","getState","items","namespaceNames","map","ns","name","activeNamespaces","includes","push","setActiveNamespaces","JSON","stringify","grpcRate","graph","traffic","grpc","httpRate","http","tcpRate","tcp","rates","GRPC_GROUP","HTTP_GROUP","TCP_GROUP","setTrafficRates","backendConfigs","clusters","clustersWithoutKialis","cluster","clusterInfo","hasOwnProperty","kialiInstance","kialiInstances","find","instance","url","addWarning","Component","mapStateToProps","authentication","loggedIn","mapDispatchToProps","dispatch","setInfo","setMeshTlsStatus","setinfo","receiveList","AuthenticationControllerContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport authenticationConfig, { isAuthStrategyOAuth } from '../config/AuthenticationConfig';\nimport { KialiAppState, LoginStatus } from '../store/Store';\nimport * as API from '../services/Api';\nimport { HelpDropdownActions } from '../actions/HelpDropdownActions';\nimport { JaegerActions } from '../actions/JaegerActions';\nimport LoginThunkActions from '../actions/LoginThunkActions';\nimport { MessageCenterActions } from '../actions/MessageCenterActions';\nimport { MessageType } from '../types/MessageCenter';\nimport { KialiDispatch } from '../types/Redux';\nimport InitializingScreen from './InitializingScreen';\nimport { isKioskMode } from '../utils/SearchParamUtils';\nimport * as AlertUtils from '../utils/AlertUtils';\nimport { setServerConfig, serverConfig, humanDurations } from '../config/ServerConfig';\nimport { TLSStatus } from '../types/TLSStatus';\nimport { MeshTlsActions } from '../actions/MeshTlsActions';\nimport { AuthStrategy } from '../types/Auth';\nimport { JaegerInfo } from '../types/JaegerInfo';\nimport { ServerConfig } from '../types/ServerConfig';\nimport { LoginActions } from '../actions/LoginActions';\nimport history from './History';\nimport { NamespaceActions } from 'actions/NamespaceAction';\nimport Namespace from 'types/Namespace';\nimport { UserSettingsActions } from 'actions/UserSettingsActions';\nimport { DurationInSeconds, IntervalInMilliseconds } from 'types/Common';\nimport { config } from 'config';\nimport { store } from 'store/ConfigStore';\nimport { toGrpcRate, toHttpRate, toTcpRate, TrafficRate } from 'types/Graph';\nimport { GraphToolbarActions } from 'actions/GraphToolbarActions';\nimport { StatusState } from 'types/StatusState';\n\ninterface AuthenticationControllerReduxProps {\n  addMessage: (content: string, detail: string, groupId?: string, msgType?: MessageType, showNotif?: boolean) => void;\n  authenticated: boolean;\n  checkCredentials: () => void;\n  isLoginError: boolean;\n  landingRoute?: string;\n  setActiveNamespaces: (namespaces: Namespace[]) => void;\n  setDuration: (duration: DurationInSeconds) => void;\n  setJaegerInfo: (jaegerInfo: JaegerInfo | null) => void;\n  setLandingRoute: (route: string | undefined) => void;\n  setMeshTlsStatus: (meshStatus: TLSStatus) => void;\n  setNamespaces: (namespaces: Namespace[], receivedAt: Date) => void;\n  setRefreshInterval: (interval: IntervalInMilliseconds) => void;\n  setTrafficRates: (rates: TrafficRate[]) => void;\n  statusRefresh: (statusState: StatusState) => void;\n}\n\ntype AuthenticationControllerProps = AuthenticationControllerReduxProps & {\n  protectedAreaComponent: React.ReactNode;\n  publicAreaComponent: (isPostLoginPerforming: boolean, errorMsg?: string) => React.ReactNode;\n};\n\nenum LoginStage {\n  LOGIN,\n  POST_LOGIN,\n  LOGGED_IN,\n  LOGGED_IN_AT_LOAD\n}\n\ninterface AuthenticationControllerState {\n  stage: LoginStage;\n  isPostLoginError: boolean;\n}\n\nexport class AuthenticationController extends React.Component<\n  AuthenticationControllerProps,\n  AuthenticationControllerState\n> {\n  static readonly PostLoginErrorMsg = `Kiali failed to initialize. Please ensure that services \n    Kiali depends on, such as Prometheus, are healthy and reachable by Kiali then refresh your browser.`;\n\n  // How long to wait for the post-login actions to complete\n  // before transitioning to the \"Loading\" page.\n  private readonly postLoginMSTillTransition = 3000;\n\n  constructor(props: AuthenticationControllerProps) {\n    super(props);\n    this.state = {\n      stage: this.props.authenticated ? LoginStage.LOGGED_IN_AT_LOAD : LoginStage.LOGIN,\n      isPostLoginError: false\n    };\n  }\n\n  componentDidMount(): void {\n    if (this.state.stage === LoginStage.LOGGED_IN_AT_LOAD) {\n      this.doPostLoginActions();\n    } else {\n      let dispatchLoginCycleOnLoad = false;\n\n      // If login strategy is \"anonymous\" or \"header\", dispatch login cycle\n      // because there is no need to ask for any credentials\n      if (\n        authenticationConfig.strategy === AuthStrategy.anonymous ||\n        authenticationConfig.strategy === AuthStrategy.header\n      ) {\n        dispatchLoginCycleOnLoad = true;\n      }\n\n      // If login strategy is Openshift, OpenId, check if there is an\n      // \"access_token\" or \"id_token\" hash parameter in the URL. If there is,\n      // this means the IdP is calling back. Dispatch the login cycle to finish\n      // the authentication.\n      if (isAuthStrategyOAuth()) {\n        const pattern = /[#&](access_token|id_token)=/;\n        dispatchLoginCycleOnLoad = pattern.test(window.location.hash);\n      }\n\n      if (dispatchLoginCycleOnLoad) {\n        this.props.checkCredentials();\n\n        // This state shows the initializing screen while doing the login cycle. This\n        // prevents from briefly showing the login form while the trip to the back-end completes.\n        this.setState({\n          stage: LoginStage.LOGGED_IN_AT_LOAD\n        });\n      } else {\n        this.props.setLandingRoute(history.location.pathname + history.location.search);\n      }\n    }\n\n    this.setDocLayout();\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<AuthenticationControllerProps>,\n    _prevState: Readonly<AuthenticationControllerState>\n  ): void {\n    if (!prevProps.authenticated && this.props.authenticated) {\n      this.setState({ stage: LoginStage.POST_LOGIN });\n      this.doPostLoginActions();\n    } else if (prevProps.authenticated && !this.props.authenticated) {\n      this.setState({ stage: LoginStage.LOGIN });\n    }\n\n    if (!prevProps.isLoginError && this.props.isLoginError) {\n      this.setState({ stage: LoginStage.LOGIN });\n    }\n\n    this.setDocLayout();\n  }\n\n  render() {\n    if (this.state.stage === LoginStage.LOGGED_IN) {\n      return this.props.protectedAreaComponent;\n    } else if (this.state.stage === LoginStage.LOGGED_IN_AT_LOAD) {\n      return !this.state.isPostLoginError ? (\n        <InitializingScreen />\n      ) : (\n        <InitializingScreen errorMsg={AuthenticationController.PostLoginErrorMsg} />\n      );\n    } else if (this.state.stage === LoginStage.POST_LOGIN) {\n      // For OAuth/OpenID auth strategies, show/keep the initializing screen unless there\n      // is an error.\n      if (!this.state.isPostLoginError && isAuthStrategyOAuth()) {\n        return <InitializingScreen />;\n      }\n\n      return !this.state.isPostLoginError\n        ? this.props.publicAreaComponent(true)\n        : this.props.publicAreaComponent(false, AuthenticationController.PostLoginErrorMsg);\n    } else {\n      return this.props.publicAreaComponent(false);\n    }\n  }\n\n  private doPostLoginActions = async () => {\n    const postLoginTimer = setTimeout(() => {\n      this.setState({ stage: LoginStage.LOGGED_IN_AT_LOAD });\n    }, this.postLoginMSTillTransition);\n\n    try {\n      const getStatusPromise = API.getStatus()\n        .then(response => this.processServerStatus(response.data))\n        .catch(error => {\n          AlertUtils.addError('Error fetching server status.', error, 'default', MessageType.WARNING);\n        });\n      const getJaegerInfoPromise = API.getJaegerInfo()\n        .then(response => this.props.setJaegerInfo(response.data))\n        .catch(error => {\n          this.props.setJaegerInfo(null);\n          AlertUtils.addError(\n            'Could not fetch Jaeger info. Turning off Jaeger integration.',\n            error,\n            'default',\n            MessageType.INFO\n          );\n        });\n\n      const configs = await Promise.all([\n        API.getNamespaces(),\n        API.getServerConfig(),\n        getStatusPromise,\n        getJaegerInfoPromise\n      ]);\n\n      this.props.setNamespaces(configs[0].data, new Date());\n      setServerConfig(configs[1].data);\n      this.applyUIDefaults();\n      this.checkConfiguredRemoteKialis(configs[1].data);\n\n      if (this.props.landingRoute) {\n        history.replace(this.props.landingRoute);\n        this.props.setLandingRoute(undefined);\n      }\n      this.setState({ stage: LoginStage.LOGGED_IN });\n    } catch (err) {\n      console.error('Error on post-login actions.', err);\n      // Transitioning to LOGGED_IN_AT_LOAD so that the user will see the \"Loading...\"\n      // screen instead of being stuck at the \"login\" page after a post-login error.\n      this.setState({ isPostLoginError: true, stage: LoginStage.LOGGED_IN_AT_LOAD });\n    } finally {\n      clearTimeout(postLoginTimer);\n    }\n  };\n\n  private applyUIDefaults() {\n    const uiDefaults = serverConfig.kialiFeatureFlags.uiDefaults;\n    if (uiDefaults) {\n      // Duration (aka metricsPerRefresh)\n      if (uiDefaults.metricsPerRefresh) {\n        const validDurations = humanDurations(serverConfig, '', '');\n        let metricsPerRefresh = 0;\n        for (const [key, value] of Object.entries(validDurations)) {\n          if (value === uiDefaults.metricsPerRefresh) {\n            metricsPerRefresh = Number(key);\n            break;\n          }\n        }\n        if (metricsPerRefresh > 0) {\n          this.props.setDuration(metricsPerRefresh);\n          console.debug(\n            `Setting UI Default: metricsPerRefresh [${uiDefaults.metricsPerRefresh}=${metricsPerRefresh}s]`\n          );\n        } else {\n          console.debug(`Ignoring invalid UI Default: metricsPerRefresh [${uiDefaults.metricsPerRefresh}]`);\n        }\n      }\n\n      // Refresh Interval\n      let refreshInterval = -1;\n      if (uiDefaults.refreshInterval) {\n        for (const [key, value] of Object.entries(config.toolbar.refreshInterval)) {\n          if (value.toLowerCase().endsWith(uiDefaults.refreshInterval.toLowerCase())) {\n            refreshInterval = Number(key);\n            break;\n          }\n        }\n        if (refreshInterval >= 0) {\n          this.props.setRefreshInterval(refreshInterval);\n          console.debug(`Setting UI Default: refreshInterval [${uiDefaults.refreshInterval}=${refreshInterval}ms]`);\n        } else {\n          console.debug(`Ignoring invalid UI Default: refreshInterval [${uiDefaults.refreshInterval}]`);\n        }\n      }\n\n      // Selected Namespaces\n      if (uiDefaults.namespaces && uiDefaults.namespaces.length > 0) {\n        // use store directly, we don't want to update on redux state change\n        const namespaces = store.getState().namespaces.items;\n        const namespaceNames: string[] = namespaces ? namespaces.map(ns => ns.name) : [];\n        const activeNamespaces: Namespace[] = [];\n\n        for (const name of uiDefaults.namespaces) {\n          if (namespaceNames.includes(name)) {\n            activeNamespaces.push({ name: name } as Namespace);\n          } else {\n            console.debug(`Ignoring invalid UI Default: namespace [${name}]`);\n          }\n        }\n        if (activeNamespaces.length > 0) {\n          this.props.setActiveNamespaces(activeNamespaces);\n          console.debug(`Setting UI Default: namespaces ${JSON.stringify(activeNamespaces.map(ns => ns.name))}`);\n        }\n      }\n\n      // Graph Traffic\n      const grpcRate = toGrpcRate(uiDefaults.graph.traffic.grpc);\n      const httpRate = toHttpRate(uiDefaults.graph.traffic.http);\n      const tcpRate = toTcpRate(uiDefaults.graph.traffic.tcp);\n      const rates: TrafficRate[] = [];\n      if (grpcRate) {\n        rates.push(TrafficRate.GRPC_GROUP, grpcRate);\n      }\n      if (httpRate) {\n        rates.push(TrafficRate.HTTP_GROUP, httpRate);\n      }\n      if (tcpRate) {\n        rates.push(TrafficRate.TCP_GROUP, tcpRate);\n      }\n      this.props.setTrafficRates(rates);\n    }\n  }\n\n  // Check which clusters does not have an accessible Kiali instance.\n  // Emit a warning telling that for those clusters, no cross-links will be available.\n  private checkConfiguredRemoteKialis(backendConfigs: ServerConfig) {\n    if (backendConfigs.clusters) {\n      const clustersWithoutKialis = [] as string[];\n      for (let cluster in backendConfigs.clusters) {\n        // skip home cluster, it's always reachable\n        if (cluster === backendConfigs.clusterInfo?.name) {\n          continue;\n        }\n        if (backendConfigs.clusters.hasOwnProperty(cluster)) {\n          const kialiInstance = backendConfigs.clusters[cluster].kialiInstances?.find(\n            instance => instance.url.length !== 0\n          );\n          if (!kialiInstance) {\n            clustersWithoutKialis.push(cluster);\n          }\n        }\n      }\n\n      if (clustersWithoutKialis.length > 0) {\n        AlertUtils.addWarning(\n          'Not all remote clusters have reachable Kiali instances.',\n          undefined,\n          undefined,\n          'Context menus are disabled for remote cluster nodes if a Kiali instance is not discovered, or if the remote Kiali is not configured with an external URL.'\n        );\n      }\n    }\n  }\n\n  private setDocLayout = () => {\n    if (document.documentElement) {\n      document.documentElement.className = isKioskMode() ? 'kiosk' : '';\n    }\n  };\n\n  private processServerStatus = (status: StatusState) => {\n    this.props.statusRefresh(status);\n\n    status.warningMessages.forEach(wMsg => {\n      this.props.addMessage(wMsg, '', 'systemErrors', MessageType.WARNING);\n    });\n  };\n}\n\nconst mapStateToProps = (state: KialiAppState) => ({\n  authenticated: state.authentication.status === LoginStatus.loggedIn,\n  isLoginError: state.authentication.status === LoginStatus.error,\n  landingRoute: state.authentication.landingRoute\n});\n\nconst mapDispatchToProps = (dispatch: KialiDispatch) => ({\n  addMessage: bindActionCreators(MessageCenterActions.addMessage, dispatch),\n  checkCredentials: () => dispatch(LoginThunkActions.checkCredentials()),\n  setActiveNamespaces: bindActionCreators(NamespaceActions.setActiveNamespaces, dispatch),\n  setDuration: bindActionCreators(UserSettingsActions.setDuration, dispatch),\n  setJaegerInfo: bindActionCreators(JaegerActions.setInfo, dispatch),\n  setLandingRoute: bindActionCreators(LoginActions.setLandingRoute, dispatch),\n  setMeshTlsStatus: bindActionCreators(MeshTlsActions.setinfo, dispatch),\n  setNamespaces: bindActionCreators(NamespaceActions.receiveList, dispatch),\n  setRefreshInterval: bindActionCreators(UserSettingsActions.setRefreshInterval, dispatch),\n  setTrafficRates: bindActionCreators(GraphToolbarActions.setTrafficRates, dispatch),\n  statusRefresh: bindActionCreators(HelpDropdownActions.statusRefresh, dispatch)\n});\n\nconst AuthenticationControllerContainer = connect(mapStateToProps, mapDispatchToProps)(AuthenticationController);\nexport default AuthenticationControllerContainer;\n"]},"metadata":{},"sourceType":"module"}
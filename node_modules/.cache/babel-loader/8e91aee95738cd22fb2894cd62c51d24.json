{"ast":null,"code":"import _slicedToArray from \"/root/GraduateProject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { FILTER_ACTION_APPEND, FilterTypes } from '../../types/Filters';\nimport { DEGRADED, FAILURE, HEALTHY, NOT_READY } from '../../types/Health';\nimport { MTLSStatuses } from '../../types/TLSStatus';\nimport { TextInputTypes } from '@patternfly/react-core';\nexport var nameFilter = {\n  id: 'namespace_search',\n  title: 'Namespace',\n  placeholder: 'Filter by Namespace',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [],\n  run: function run(namespace, filters) {\n    return filters.filters.some(function (f) {\n      return namespace.name.includes(f.value);\n    });\n  }\n};\nexport var mtlsValues = [{\n  id: 'enabled',\n  title: 'Enabled'\n}, {\n  id: 'partiallyEnabled',\n  title: 'Partially Enabled'\n}, {\n  id: 'disabled',\n  title: 'Disabled'\n}];\nvar statusMap = new Map([[MTLSStatuses.ENABLED, 'Enabled'], [MTLSStatuses.PARTIALLY, 'Partially Enabled'], [MTLSStatuses.NOT_ENABLED, 'Disabled'], [MTLSStatuses.DISABLED, 'Disabled']]);\nexport var mtlsFilter = {\n  id: 'mtls',\n  title: 'mTLS status',\n  placeholder: 'Filter by mTLS status',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: mtlsValues,\n  run: function run(ns, filters) {\n    return ns.tlsStatus ? filters.filters.some(function (f) {\n      return statusMap.get(ns.tlsStatus.status) === f.value;\n    }) : false;\n  }\n};\nexport var labelFilter = {\n  id: 'nsLabel',\n  title: 'Namespace Label',\n  placeholder: 'Filter by Namespace Label',\n  filterType: FilterTypes.nsLabel,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [],\n  run: function run(ns, filters) {\n    return filters.filters.some(function (f) {\n      if (f.value.includes(':')) {\n        var _f$value$split = f.value.split(':'),\n            _f$value$split2 = _slicedToArray(_f$value$split, 2),\n            k = _f$value$split2[0],\n            v = _f$value$split2[1];\n\n        return v.split(',').some(function (val) {\n          return !!ns.labels && k in ns.labels && ns.labels[k].startsWith(val);\n        });\n      } else {\n        return !!ns.labels && Object.keys(ns.labels).some(function (label) {\n          return label.startsWith(f.value);\n        });\n      }\n    });\n  }\n};\nvar healthValues = [{\n  id: NOT_READY.name,\n  title: NOT_READY.name\n}, {\n  id: FAILURE.name,\n  title: FAILURE.name\n}, {\n  id: DEGRADED.name,\n  title: DEGRADED.name\n}, {\n  id: HEALTHY.name,\n  title: HEALTHY.name\n}];\n\nvar summarizeHealthFilters = function summarizeHealthFilters(healthFilters) {\n  if (healthFilters.filters.length === 0) {\n    return {\n      noFilter: true,\n      showInNotReady: true,\n      showInError: true,\n      showInWarning: true,\n      showInSuccess: true\n    };\n  }\n\n  var showInNotReady = false,\n      showInError = false,\n      showInWarning = false,\n      showInSuccess = false;\n  healthFilters.filters.forEach(function (f) {\n    switch (f.value) {\n      case NOT_READY.name:\n        showInNotReady = true;\n        break;\n\n      case FAILURE.name:\n        showInError = true;\n        break;\n\n      case DEGRADED.name:\n        showInWarning = true;\n        break;\n\n      case HEALTHY.name:\n        showInSuccess = true;\n        break;\n\n      default:\n    }\n  });\n  return {\n    noFilter: false,\n    showInNotReady: showInNotReady,\n    showInError: showInError,\n    showInWarning: showInWarning,\n    showInSuccess: showInSuccess\n  };\n};\n\nexport var healthFilter = {\n  id: 'health',\n  title: 'Health',\n  placeholder: 'Filter by Application Health',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: healthValues,\n  run: function run(ns, filters) {\n    var _summarizeHealthFilte = summarizeHealthFilters(filters),\n        showInNotReady = _summarizeHealthFilte.showInNotReady,\n        showInError = _summarizeHealthFilte.showInError,\n        showInWarning = _summarizeHealthFilte.showInWarning,\n        showInSuccess = _summarizeHealthFilte.showInSuccess,\n        noFilter = _summarizeHealthFilte.noFilter;\n\n    return noFilter ? true : ns.status ? showInNotReady && ns.status.inNotReady.length > 0 || showInError && ns.status.inError.length > 0 || showInWarning && ns.status.inWarning.length > 0 || showInSuccess && ns.status.inSuccess.length > 0 && ns.status.inError.length === 0 && ns.status.inWarning.length === 0 : false;\n  }\n};\nexport var availableFilters = [nameFilter, healthFilter, mtlsFilter, labelFilter];","map":{"version":3,"sources":["/root/GraduateProject/src/pages/Overview/Filters.ts"],"names":["FILTER_ACTION_APPEND","FilterTypes","DEGRADED","FAILURE","HEALTHY","NOT_READY","MTLSStatuses","TextInputTypes","nameFilter","id","title","placeholder","filterType","text","action","filterValues","run","namespace","filters","some","f","name","includes","value","mtlsValues","statusMap","Map","ENABLED","PARTIALLY","NOT_ENABLED","DISABLED","mtlsFilter","select","ns","tlsStatus","get","status","labelFilter","nsLabel","split","k","v","val","labels","startsWith","Object","keys","label","healthValues","summarizeHealthFilters","healthFilters","length","noFilter","showInNotReady","showInError","showInWarning","showInSuccess","forEach","healthFilter","inNotReady","inError","inWarning","inSuccess","availableFilters"],"mappings":"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","sourcesContent":["import { ActiveFiltersInfo, FILTER_ACTION_APPEND, FilterTypes, RunnableFilter, FilterValue } from '../../types/Filters';\nimport { DEGRADED, FAILURE, HEALTHY, NOT_READY } from '../../types/Health';\nimport { NamespaceInfo } from './NamespaceInfo';\nimport { MTLSStatuses } from '../../types/TLSStatus';\nimport { TextInputTypes } from '@patternfly/react-core';\n\nexport const nameFilter: RunnableFilter<NamespaceInfo> = {\n  id: 'namespace_search',\n  title: 'Namespace',\n  placeholder: 'Filter by Namespace',\n  filterType: TextInputTypes.text,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [],\n  run: (namespace: NamespaceInfo, filters: ActiveFiltersInfo) =>\n    filters.filters.some(f => namespace.name.includes(f.value))\n};\n\nexport const mtlsValues: FilterValue[] = [\n  { id: 'enabled', title: 'Enabled' },\n  { id: 'partiallyEnabled', title: 'Partially Enabled' },\n  { id: 'disabled', title: 'Disabled' }\n];\n\nconst statusMap = new Map<string, string>([\n  [MTLSStatuses.ENABLED, 'Enabled'],\n  [MTLSStatuses.PARTIALLY, 'Partially Enabled'],\n  [MTLSStatuses.NOT_ENABLED, 'Disabled'],\n  [MTLSStatuses.DISABLED, 'Disabled']\n]);\n\nexport const mtlsFilter: RunnableFilter<NamespaceInfo> = {\n  id: 'mtls',\n  title: 'mTLS status',\n  placeholder: 'Filter by mTLS status',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: mtlsValues,\n  run: (ns: NamespaceInfo, filters: ActiveFiltersInfo) => {\n    return ns.tlsStatus ? filters.filters.some(f => statusMap.get(ns.tlsStatus!.status) === f.value) : false;\n  }\n};\n\nexport const labelFilter: RunnableFilter<NamespaceInfo> = {\n  id: 'nsLabel',\n  title: 'Namespace Label',\n  placeholder: 'Filter by Namespace Label',\n  filterType: FilterTypes.nsLabel,\n  action: FILTER_ACTION_APPEND,\n  filterValues: [],\n  run: (ns: NamespaceInfo, filters: ActiveFiltersInfo) => {\n    return filters.filters.some(f => {\n      if (f.value.includes(':')) {\n        const [k, v] = f.value.split(':');\n        return v.split(',').some(val => !!ns.labels && k in ns.labels && ns.labels[k].startsWith(val));\n      } else {\n        return !!ns.labels && Object.keys(ns.labels).some(label => label.startsWith(f.value));\n      }\n    });\n  }\n};\n\nconst healthValues: FilterValue[] = [\n  { id: NOT_READY.name, title: NOT_READY.name },\n  { id: FAILURE.name, title: FAILURE.name },\n  { id: DEGRADED.name, title: DEGRADED.name },\n  { id: HEALTHY.name, title: HEALTHY.name }\n];\n\nconst summarizeHealthFilters = (healthFilters: ActiveFiltersInfo) => {\n  if (healthFilters.filters.length === 0) {\n    return {\n      noFilter: true,\n      showInNotReady: true,\n      showInError: true,\n      showInWarning: true,\n      showInSuccess: true\n    };\n  }\n  let showInNotReady = false,\n    showInError = false,\n    showInWarning = false,\n    showInSuccess = false;\n  healthFilters.filters.forEach(f => {\n    switch (f.value) {\n      case NOT_READY.name:\n        showInNotReady = true;\n        break;\n      case FAILURE.name:\n        showInError = true;\n        break;\n      case DEGRADED.name:\n        showInWarning = true;\n        break;\n      case HEALTHY.name:\n        showInSuccess = true;\n        break;\n      default:\n    }\n  });\n  return {\n    noFilter: false,\n    showInNotReady: showInNotReady,\n    showInError: showInError,\n    showInWarning: showInWarning,\n    showInSuccess: showInSuccess\n  };\n};\n\nexport const healthFilter: RunnableFilter<NamespaceInfo> = {\n  id: 'health',\n  title: 'Health',\n  placeholder: 'Filter by Application Health',\n  filterType: FilterTypes.select,\n  action: FILTER_ACTION_APPEND,\n  filterValues: healthValues,\n  run: (ns: NamespaceInfo, filters: ActiveFiltersInfo) => {\n    const { showInNotReady, showInError, showInWarning, showInSuccess, noFilter } = summarizeHealthFilters(filters);\n    return noFilter\n      ? true\n      : ns.status\n      ? (showInNotReady && ns.status.inNotReady.length > 0) ||\n        (showInError && ns.status.inError.length > 0) ||\n        (showInWarning && ns.status.inWarning.length > 0) ||\n        (showInSuccess &&\n          ns.status.inSuccess.length > 0 &&\n          ns.status.inError.length === 0 &&\n          ns.status.inWarning.length === 0)\n      : false;\n  }\n};\n\nexport const availableFilters: RunnableFilter<NamespaceInfo>[] = [nameFilter, healthFilter, mtlsFilter, labelFilter];\n"]},"metadata":{},"sourceType":"module"}